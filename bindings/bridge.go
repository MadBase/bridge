// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// GovernanceStorageProposal is an auto generated low-level Go binding around an user-defined struct.
type GovernanceStorageProposal struct {
	Executed     bool
	Logic        common.Address
	VoteCount    *big.Int
	BlockEndVote *big.Int
}

// MadByteBNAddress is an auto generated low-level Go binding around an user-defined struct.
type MadByteBNAddress struct {
	To0 *big.Int
	To1 *big.Int
	To2 *big.Int
	To3 *big.Int
}

// AccessControlLibraryMetaData contains all meta data concerning the AccessControlLibrary contract.
var AccessControlLibraryMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122017d1a29ae8787b9d30fa273f4f5b519e875f75dae3908845adf3362755c8f9a964736f6c63430008060033",
}

// AccessControlLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use AccessControlLibraryMetaData.ABI instead.
var AccessControlLibraryABI = AccessControlLibraryMetaData.ABI

// AccessControlLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AccessControlLibraryMetaData.Bin instead.
var AccessControlLibraryBin = AccessControlLibraryMetaData.Bin

// DeployAccessControlLibrary deploys a new Ethereum contract, binding an instance of AccessControlLibrary to it.
func DeployAccessControlLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *AccessControlLibrary, error) {
	parsed, err := AccessControlLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(AccessControlLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &AccessControlLibrary{AccessControlLibraryCaller: AccessControlLibraryCaller{contract: contract}, AccessControlLibraryTransactor: AccessControlLibraryTransactor{contract: contract}, AccessControlLibraryFilterer: AccessControlLibraryFilterer{contract: contract}}, nil
}

// AccessControlLibrary is an auto generated Go binding around an Ethereum contract.
type AccessControlLibrary struct {
	AccessControlLibraryCaller     // Read-only binding to the contract
	AccessControlLibraryTransactor // Write-only binding to the contract
	AccessControlLibraryFilterer   // Log filterer for contract events
}

// AccessControlLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type AccessControlLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccessControlLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AccessControlLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccessControlLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AccessControlLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccessControlLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AccessControlLibrarySession struct {
	Contract     *AccessControlLibrary // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// AccessControlLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AccessControlLibraryCallerSession struct {
	Contract *AccessControlLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// AccessControlLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AccessControlLibraryTransactorSession struct {
	Contract     *AccessControlLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// AccessControlLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type AccessControlLibraryRaw struct {
	Contract *AccessControlLibrary // Generic contract binding to access the raw methods on
}

// AccessControlLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AccessControlLibraryCallerRaw struct {
	Contract *AccessControlLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// AccessControlLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AccessControlLibraryTransactorRaw struct {
	Contract *AccessControlLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAccessControlLibrary creates a new instance of AccessControlLibrary, bound to a specific deployed contract.
func NewAccessControlLibrary(address common.Address, backend bind.ContractBackend) (*AccessControlLibrary, error) {
	contract, err := bindAccessControlLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &AccessControlLibrary{AccessControlLibraryCaller: AccessControlLibraryCaller{contract: contract}, AccessControlLibraryTransactor: AccessControlLibraryTransactor{contract: contract}, AccessControlLibraryFilterer: AccessControlLibraryFilterer{contract: contract}}, nil
}

// NewAccessControlLibraryCaller creates a new read-only instance of AccessControlLibrary, bound to a specific deployed contract.
func NewAccessControlLibraryCaller(address common.Address, caller bind.ContractCaller) (*AccessControlLibraryCaller, error) {
	contract, err := bindAccessControlLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AccessControlLibraryCaller{contract: contract}, nil
}

// NewAccessControlLibraryTransactor creates a new write-only instance of AccessControlLibrary, bound to a specific deployed contract.
func NewAccessControlLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*AccessControlLibraryTransactor, error) {
	contract, err := bindAccessControlLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AccessControlLibraryTransactor{contract: contract}, nil
}

// NewAccessControlLibraryFilterer creates a new log filterer instance of AccessControlLibrary, bound to a specific deployed contract.
func NewAccessControlLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*AccessControlLibraryFilterer, error) {
	contract, err := bindAccessControlLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AccessControlLibraryFilterer{contract: contract}, nil
}

// bindAccessControlLibrary binds a generic wrapper to an already deployed contract.
func bindAccessControlLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AccessControlLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AccessControlLibrary *AccessControlLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AccessControlLibrary.Contract.AccessControlLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AccessControlLibrary *AccessControlLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccessControlLibrary.Contract.AccessControlLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AccessControlLibrary *AccessControlLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AccessControlLibrary.Contract.AccessControlLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AccessControlLibrary *AccessControlLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AccessControlLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AccessControlLibrary *AccessControlLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccessControlLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AccessControlLibrary *AccessControlLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AccessControlLibrary.Contract.contract.Transact(opts, method, params...)
}

// AccessControlledMetaData contains all meta data concerning the AccessControlled contract.
var AccessControlledMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"grantOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governance_\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50600061002561007060201b61067a1760201c565b9050338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061009d565b6000807f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90508091505090565b610934806100ac6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063605361721461005c578063ab033ea914610066578063dc97805914610082578063e348da131461009e578063fad8b32a146100ba575b600080fd5b6100646100d6565b005b610080600480360381019061007b91906106bc565b6101e1565b005b61009c600480360381019061009791906106bc565b6102d3565b005b6100b860048036038101906100b391906106bc565b6103c5565b005b6100d460048036038101906100cf91906106bc565b610524565b005b60006100e061067a565b90508060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610174576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161016b90610772565b60405180910390fd5b8060020160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60006101eb61067a565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461027f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027690610792565b60405180910390fd5b600061028961067a565b9050828160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b60006102dd61067a565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610371576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036890610792565b60405180910390fd5b600061037b61067a565b9050828160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b60006103cf61067a565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061047a57508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6104b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b090610752565b60405180910390fd5b60006104c361067a565b905060018160000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550505050565b600061052e61067a565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806105d957508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610618576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060f90610752565b60405180910390fd5b600061062261067a565b90508060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff0219169055505050565b6000807f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90508091505090565b6000813590506106b6816108e7565b92915050565b6000602082840312156106d2576106d16107f5565b5b60006106e0848285016106a7565b91505092915050565b60006106f6602e836107b2565b9150610701826107fa565b604082019050919050565b60006107196025836107b2565b915061072482610849565b604082019050919050565b600061073c6025836107b2565b915061074782610898565b604082019050919050565b6000602082019050818103600083015261076b816106e9565b9050919050565b6000602082019050818103600083015261078b8161070c565b9050919050565b600060208201905081810360008301526107ab8161072f565b9050919050565b600082825260208201905092915050565b60006107ce826107d5565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b7f41636365737320436f6e74726f6c3a206f6e6c79206f776e6572206f72206f7060008201527f657261746f7220616c6c6f776564000000000000000000000000000000000000602082015250565b7f41636365737320436f6e74726f6c3a206f776e657273686970206e6f7420677260008201527f616e746564000000000000000000000000000000000000000000000000000000602082015250565b7f41636365737320436f6e74726f6c3a206f6e6c79206f776e657220697320616c60008201527f6c6f776564000000000000000000000000000000000000000000000000000000602082015250565b6108f0816107c3565b81146108fb57600080fd5b5056fea2646970667358221220de2a4b5bb864507c0318f1c863c445f00853f508a173a364121b968b934aaa2164736f6c63430008060033",
}

// AccessControlledABI is the input ABI used to generate the binding from.
// Deprecated: Use AccessControlledMetaData.ABI instead.
var AccessControlledABI = AccessControlledMetaData.ABI

// AccessControlledBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AccessControlledMetaData.Bin instead.
var AccessControlledBin = AccessControlledMetaData.Bin

// DeployAccessControlled deploys a new Ethereum contract, binding an instance of AccessControlled to it.
func DeployAccessControlled(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *AccessControlled, error) {
	parsed, err := AccessControlledMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(AccessControlledBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &AccessControlled{AccessControlledCaller: AccessControlledCaller{contract: contract}, AccessControlledTransactor: AccessControlledTransactor{contract: contract}, AccessControlledFilterer: AccessControlledFilterer{contract: contract}}, nil
}

// AccessControlled is an auto generated Go binding around an Ethereum contract.
type AccessControlled struct {
	AccessControlledCaller     // Read-only binding to the contract
	AccessControlledTransactor // Write-only binding to the contract
	AccessControlledFilterer   // Log filterer for contract events
}

// AccessControlledCaller is an auto generated read-only Go binding around an Ethereum contract.
type AccessControlledCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccessControlledTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AccessControlledTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccessControlledFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AccessControlledFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccessControlledSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AccessControlledSession struct {
	Contract     *AccessControlled // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AccessControlledCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AccessControlledCallerSession struct {
	Contract *AccessControlledCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// AccessControlledTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AccessControlledTransactorSession struct {
	Contract     *AccessControlledTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// AccessControlledRaw is an auto generated low-level Go binding around an Ethereum contract.
type AccessControlledRaw struct {
	Contract *AccessControlled // Generic contract binding to access the raw methods on
}

// AccessControlledCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AccessControlledCallerRaw struct {
	Contract *AccessControlledCaller // Generic read-only contract binding to access the raw methods on
}

// AccessControlledTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AccessControlledTransactorRaw struct {
	Contract *AccessControlledTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAccessControlled creates a new instance of AccessControlled, bound to a specific deployed contract.
func NewAccessControlled(address common.Address, backend bind.ContractBackend) (*AccessControlled, error) {
	contract, err := bindAccessControlled(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &AccessControlled{AccessControlledCaller: AccessControlledCaller{contract: contract}, AccessControlledTransactor: AccessControlledTransactor{contract: contract}, AccessControlledFilterer: AccessControlledFilterer{contract: contract}}, nil
}

// NewAccessControlledCaller creates a new read-only instance of AccessControlled, bound to a specific deployed contract.
func NewAccessControlledCaller(address common.Address, caller bind.ContractCaller) (*AccessControlledCaller, error) {
	contract, err := bindAccessControlled(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AccessControlledCaller{contract: contract}, nil
}

// NewAccessControlledTransactor creates a new write-only instance of AccessControlled, bound to a specific deployed contract.
func NewAccessControlledTransactor(address common.Address, transactor bind.ContractTransactor) (*AccessControlledTransactor, error) {
	contract, err := bindAccessControlled(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AccessControlledTransactor{contract: contract}, nil
}

// NewAccessControlledFilterer creates a new log filterer instance of AccessControlled, bound to a specific deployed contract.
func NewAccessControlledFilterer(address common.Address, filterer bind.ContractFilterer) (*AccessControlledFilterer, error) {
	contract, err := bindAccessControlled(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AccessControlledFilterer{contract: contract}, nil
}

// bindAccessControlled binds a generic wrapper to an already deployed contract.
func bindAccessControlled(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AccessControlledABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AccessControlled *AccessControlledRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AccessControlled.Contract.AccessControlledCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AccessControlled *AccessControlledRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccessControlled.Contract.AccessControlledTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AccessControlled *AccessControlledRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AccessControlled.Contract.AccessControlledTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AccessControlled *AccessControlledCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AccessControlled.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AccessControlled *AccessControlledTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccessControlled.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AccessControlled *AccessControlledTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AccessControlled.Contract.contract.Transact(opts, method, params...)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_AccessControlled *AccessControlledTransactor) GrantOperator(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _AccessControlled.contract.Transact(opts, "grantOperator", who)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_AccessControlled *AccessControlledSession) GrantOperator(who common.Address) (*types.Transaction, error) {
	return _AccessControlled.Contract.GrantOperator(&_AccessControlled.TransactOpts, who)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_AccessControlled *AccessControlledTransactorSession) GrantOperator(who common.Address) (*types.Transaction, error) {
	return _AccessControlled.Contract.GrantOperator(&_AccessControlled.TransactOpts, who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_AccessControlled *AccessControlledTransactor) GrantOwner(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _AccessControlled.contract.Transact(opts, "grantOwner", who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_AccessControlled *AccessControlledSession) GrantOwner(who common.Address) (*types.Transaction, error) {
	return _AccessControlled.Contract.GrantOwner(&_AccessControlled.TransactOpts, who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_AccessControlled *AccessControlledTransactorSession) GrantOwner(who common.Address) (*types.Transaction, error) {
	return _AccessControlled.Contract.GrantOwner(&_AccessControlled.TransactOpts, who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_AccessControlled *AccessControlledTransactor) RevokeOperator(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _AccessControlled.contract.Transact(opts, "revokeOperator", who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_AccessControlled *AccessControlledSession) RevokeOperator(who common.Address) (*types.Transaction, error) {
	return _AccessControlled.Contract.RevokeOperator(&_AccessControlled.TransactOpts, who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_AccessControlled *AccessControlledTransactorSession) RevokeOperator(who common.Address) (*types.Transaction, error) {
	return _AccessControlled.Contract.RevokeOperator(&_AccessControlled.TransactOpts, who)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_AccessControlled *AccessControlledTransactor) SetGovernance(opts *bind.TransactOpts, governance_ common.Address) (*types.Transaction, error) {
	return _AccessControlled.contract.Transact(opts, "setGovernance", governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_AccessControlled *AccessControlledSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _AccessControlled.Contract.SetGovernance(&_AccessControlled.TransactOpts, governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_AccessControlled *AccessControlledTransactorSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _AccessControlled.Contract.SetGovernance(&_AccessControlled.TransactOpts, governance_)
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_AccessControlled *AccessControlledTransactor) TakeOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccessControlled.contract.Transact(opts, "takeOwnership")
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_AccessControlled *AccessControlledSession) TakeOwnership() (*types.Transaction, error) {
	return _AccessControlled.Contract.TakeOwnership(&_AccessControlled.TransactOpts)
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_AccessControlled *AccessControlledTransactorSession) TakeOwnership() (*types.Transaction, error) {
	return _AccessControlled.Contract.TakeOwnership(&_AccessControlled.TransactOpts)
}

// AccusationMetaData contains all meta data concerning the Accusation contract.
var AccusationMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"InvalidTransactionConsumption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"MultipleProposals\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_pClaims\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_pClaimsSig\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_bClaims\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_bClaimsSigGroup\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_txInPreImage\",\"type\":\"bytes\"},{\"internalType\":\"bytes[3]\",\"name\":\"_proofs\",\"type\":\"bytes[3]\"}],\"name\":\"AccuseInvalidTransactionConsumption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_signature0\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_pClaims0\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_signature1\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_pClaims1\",\"type\":\"bytes\"}],\"name\":\"AccuseMultipleProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// AccusationABI is the input ABI used to generate the binding from.
// Deprecated: Use AccusationMetaData.ABI instead.
var AccusationABI = AccusationMetaData.ABI

// Accusation is an auto generated Go binding around an Ethereum contract.
type Accusation struct {
	AccusationCaller     // Read-only binding to the contract
	AccusationTransactor // Write-only binding to the contract
	AccusationFilterer   // Log filterer for contract events
}

// AccusationCaller is an auto generated read-only Go binding around an Ethereum contract.
type AccusationCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccusationTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AccusationTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccusationFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AccusationFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccusationSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AccusationSession struct {
	Contract     *Accusation       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AccusationCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AccusationCallerSession struct {
	Contract *AccusationCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// AccusationTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AccusationTransactorSession struct {
	Contract     *AccusationTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// AccusationRaw is an auto generated low-level Go binding around an Ethereum contract.
type AccusationRaw struct {
	Contract *Accusation // Generic contract binding to access the raw methods on
}

// AccusationCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AccusationCallerRaw struct {
	Contract *AccusationCaller // Generic read-only contract binding to access the raw methods on
}

// AccusationTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AccusationTransactorRaw struct {
	Contract *AccusationTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAccusation creates a new instance of Accusation, bound to a specific deployed contract.
func NewAccusation(address common.Address, backend bind.ContractBackend) (*Accusation, error) {
	contract, err := bindAccusation(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Accusation{AccusationCaller: AccusationCaller{contract: contract}, AccusationTransactor: AccusationTransactor{contract: contract}, AccusationFilterer: AccusationFilterer{contract: contract}}, nil
}

// NewAccusationCaller creates a new read-only instance of Accusation, bound to a specific deployed contract.
func NewAccusationCaller(address common.Address, caller bind.ContractCaller) (*AccusationCaller, error) {
	contract, err := bindAccusation(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AccusationCaller{contract: contract}, nil
}

// NewAccusationTransactor creates a new write-only instance of Accusation, bound to a specific deployed contract.
func NewAccusationTransactor(address common.Address, transactor bind.ContractTransactor) (*AccusationTransactor, error) {
	contract, err := bindAccusation(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AccusationTransactor{contract: contract}, nil
}

// NewAccusationFilterer creates a new log filterer instance of Accusation, bound to a specific deployed contract.
func NewAccusationFilterer(address common.Address, filterer bind.ContractFilterer) (*AccusationFilterer, error) {
	contract, err := bindAccusation(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AccusationFilterer{contract: contract}, nil
}

// bindAccusation binds a generic wrapper to an already deployed contract.
func bindAccusation(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AccusationABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Accusation *AccusationRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Accusation.Contract.AccusationCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Accusation *AccusationRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Accusation.Contract.AccusationTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Accusation *AccusationRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Accusation.Contract.AccusationTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Accusation *AccusationCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Accusation.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Accusation *AccusationTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Accusation.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Accusation *AccusationTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Accusation.Contract.contract.Transact(opts, method, params...)
}

// AccuseInvalidTransactionConsumption is a paid mutator transaction binding the contract method 0xcac6a5f0.
//
// Solidity: function AccuseInvalidTransactionConsumption(bytes _pClaims, bytes _pClaimsSig, bytes _bClaims, bytes _bClaimsSigGroup, bytes _txInPreImage, bytes[3] _proofs) returns()
func (_Accusation *AccusationTransactor) AccuseInvalidTransactionConsumption(opts *bind.TransactOpts, _pClaims []byte, _pClaimsSig []byte, _bClaims []byte, _bClaimsSigGroup []byte, _txInPreImage []byte, _proofs [3][]byte) (*types.Transaction, error) {
	return _Accusation.contract.Transact(opts, "AccuseInvalidTransactionConsumption", _pClaims, _pClaimsSig, _bClaims, _bClaimsSigGroup, _txInPreImage, _proofs)
}

// AccuseInvalidTransactionConsumption is a paid mutator transaction binding the contract method 0xcac6a5f0.
//
// Solidity: function AccuseInvalidTransactionConsumption(bytes _pClaims, bytes _pClaimsSig, bytes _bClaims, bytes _bClaimsSigGroup, bytes _txInPreImage, bytes[3] _proofs) returns()
func (_Accusation *AccusationSession) AccuseInvalidTransactionConsumption(_pClaims []byte, _pClaimsSig []byte, _bClaims []byte, _bClaimsSigGroup []byte, _txInPreImage []byte, _proofs [3][]byte) (*types.Transaction, error) {
	return _Accusation.Contract.AccuseInvalidTransactionConsumption(&_Accusation.TransactOpts, _pClaims, _pClaimsSig, _bClaims, _bClaimsSigGroup, _txInPreImage, _proofs)
}

// AccuseInvalidTransactionConsumption is a paid mutator transaction binding the contract method 0xcac6a5f0.
//
// Solidity: function AccuseInvalidTransactionConsumption(bytes _pClaims, bytes _pClaimsSig, bytes _bClaims, bytes _bClaimsSigGroup, bytes _txInPreImage, bytes[3] _proofs) returns()
func (_Accusation *AccusationTransactorSession) AccuseInvalidTransactionConsumption(_pClaims []byte, _pClaimsSig []byte, _bClaims []byte, _bClaimsSigGroup []byte, _txInPreImage []byte, _proofs [3][]byte) (*types.Transaction, error) {
	return _Accusation.Contract.AccuseInvalidTransactionConsumption(&_Accusation.TransactOpts, _pClaims, _pClaimsSig, _bClaims, _bClaimsSigGroup, _txInPreImage, _proofs)
}

// AccuseMultipleProposal is a paid mutator transaction binding the contract method 0x7f321b2d.
//
// Solidity: function AccuseMultipleProposal(bytes _signature0, bytes _pClaims0, bytes _signature1, bytes _pClaims1) returns()
func (_Accusation *AccusationTransactor) AccuseMultipleProposal(opts *bind.TransactOpts, _signature0 []byte, _pClaims0 []byte, _signature1 []byte, _pClaims1 []byte) (*types.Transaction, error) {
	return _Accusation.contract.Transact(opts, "AccuseMultipleProposal", _signature0, _pClaims0, _signature1, _pClaims1)
}

// AccuseMultipleProposal is a paid mutator transaction binding the contract method 0x7f321b2d.
//
// Solidity: function AccuseMultipleProposal(bytes _signature0, bytes _pClaims0, bytes _signature1, bytes _pClaims1) returns()
func (_Accusation *AccusationSession) AccuseMultipleProposal(_signature0 []byte, _pClaims0 []byte, _signature1 []byte, _pClaims1 []byte) (*types.Transaction, error) {
	return _Accusation.Contract.AccuseMultipleProposal(&_Accusation.TransactOpts, _signature0, _pClaims0, _signature1, _pClaims1)
}

// AccuseMultipleProposal is a paid mutator transaction binding the contract method 0x7f321b2d.
//
// Solidity: function AccuseMultipleProposal(bytes _signature0, bytes _pClaims0, bytes _signature1, bytes _pClaims1) returns()
func (_Accusation *AccusationTransactorSession) AccuseMultipleProposal(_signature0 []byte, _pClaims0 []byte, _signature1 []byte, _pClaims1 []byte) (*types.Transaction, error) {
	return _Accusation.Contract.AccuseMultipleProposal(&_Accusation.TransactOpts, _signature0, _pClaims0, _signature1, _pClaims1)
}

// AccusationInvalidTransactionConsumptionIterator is returned from FilterInvalidTransactionConsumption and is used to iterate over the raw logs and unpacked data for InvalidTransactionConsumption events raised by the Accusation contract.
type AccusationInvalidTransactionConsumptionIterator struct {
	Event *AccusationInvalidTransactionConsumption // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccusationInvalidTransactionConsumptionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccusationInvalidTransactionConsumption)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccusationInvalidTransactionConsumption)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccusationInvalidTransactionConsumptionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccusationInvalidTransactionConsumptionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccusationInvalidTransactionConsumption represents a InvalidTransactionConsumption event raised by the Accusation contract.
type AccusationInvalidTransactionConsumption struct {
	Validator common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterInvalidTransactionConsumption is a free log retrieval operation binding the contract event 0xe7d88c5a1b3de74710b2ce1551a3d3be5c537d9d526cf4cb0fbbc948f527ee8b.
//
// Solidity: event InvalidTransactionConsumption(address indexed validator)
func (_Accusation *AccusationFilterer) FilterInvalidTransactionConsumption(opts *bind.FilterOpts, validator []common.Address) (*AccusationInvalidTransactionConsumptionIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _Accusation.contract.FilterLogs(opts, "InvalidTransactionConsumption", validatorRule)
	if err != nil {
		return nil, err
	}
	return &AccusationInvalidTransactionConsumptionIterator{contract: _Accusation.contract, event: "InvalidTransactionConsumption", logs: logs, sub: sub}, nil
}

// WatchInvalidTransactionConsumption is a free log subscription operation binding the contract event 0xe7d88c5a1b3de74710b2ce1551a3d3be5c537d9d526cf4cb0fbbc948f527ee8b.
//
// Solidity: event InvalidTransactionConsumption(address indexed validator)
func (_Accusation *AccusationFilterer) WatchInvalidTransactionConsumption(opts *bind.WatchOpts, sink chan<- *AccusationInvalidTransactionConsumption, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _Accusation.contract.WatchLogs(opts, "InvalidTransactionConsumption", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccusationInvalidTransactionConsumption)
				if err := _Accusation.contract.UnpackLog(event, "InvalidTransactionConsumption", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInvalidTransactionConsumption is a log parse operation binding the contract event 0xe7d88c5a1b3de74710b2ce1551a3d3be5c537d9d526cf4cb0fbbc948f527ee8b.
//
// Solidity: event InvalidTransactionConsumption(address indexed validator)
func (_Accusation *AccusationFilterer) ParseInvalidTransactionConsumption(log types.Log) (*AccusationInvalidTransactionConsumption, error) {
	event := new(AccusationInvalidTransactionConsumption)
	if err := _Accusation.contract.UnpackLog(event, "InvalidTransactionConsumption", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AccusationMultipleProposalsIterator is returned from FilterMultipleProposals and is used to iterate over the raw logs and unpacked data for MultipleProposals events raised by the Accusation contract.
type AccusationMultipleProposalsIterator struct {
	Event *AccusationMultipleProposals // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccusationMultipleProposalsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccusationMultipleProposals)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccusationMultipleProposals)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccusationMultipleProposalsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccusationMultipleProposalsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccusationMultipleProposals represents a MultipleProposals event raised by the Accusation contract.
type AccusationMultipleProposals struct {
	Validator common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterMultipleProposals is a free log retrieval operation binding the contract event 0xd70587ff450b3f9f38dcd0b8de705c37a9039a6d820906da412205e9f65c4138.
//
// Solidity: event MultipleProposals(address indexed validator)
func (_Accusation *AccusationFilterer) FilterMultipleProposals(opts *bind.FilterOpts, validator []common.Address) (*AccusationMultipleProposalsIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _Accusation.contract.FilterLogs(opts, "MultipleProposals", validatorRule)
	if err != nil {
		return nil, err
	}
	return &AccusationMultipleProposalsIterator{contract: _Accusation.contract, event: "MultipleProposals", logs: logs, sub: sub}, nil
}

// WatchMultipleProposals is a free log subscription operation binding the contract event 0xd70587ff450b3f9f38dcd0b8de705c37a9039a6d820906da412205e9f65c4138.
//
// Solidity: event MultipleProposals(address indexed validator)
func (_Accusation *AccusationFilterer) WatchMultipleProposals(opts *bind.WatchOpts, sink chan<- *AccusationMultipleProposals, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _Accusation.contract.WatchLogs(opts, "MultipleProposals", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccusationMultipleProposals)
				if err := _Accusation.contract.UnpackLog(event, "MultipleProposals", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMultipleProposals is a log parse operation binding the contract event 0xd70587ff450b3f9f38dcd0b8de705c37a9039a6d820906da412205e9f65c4138.
//
// Solidity: event MultipleProposals(address indexed validator)
func (_Accusation *AccusationFilterer) ParseMultipleProposals(log types.Log) (*AccusationMultipleProposals, error) {
	event := new(AccusationMultipleProposals)
	if err := _Accusation.contract.UnpackLog(event, "MultipleProposals", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AccusationEventsMetaData contains all meta data concerning the AccusationEvents contract.
var AccusationEventsMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"InvalidTransactionConsumption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"MultipleProposals\",\"type\":\"event\"}]",
}

// AccusationEventsABI is the input ABI used to generate the binding from.
// Deprecated: Use AccusationEventsMetaData.ABI instead.
var AccusationEventsABI = AccusationEventsMetaData.ABI

// AccusationEvents is an auto generated Go binding around an Ethereum contract.
type AccusationEvents struct {
	AccusationEventsCaller     // Read-only binding to the contract
	AccusationEventsTransactor // Write-only binding to the contract
	AccusationEventsFilterer   // Log filterer for contract events
}

// AccusationEventsCaller is an auto generated read-only Go binding around an Ethereum contract.
type AccusationEventsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccusationEventsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AccusationEventsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccusationEventsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AccusationEventsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccusationEventsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AccusationEventsSession struct {
	Contract     *AccusationEvents // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AccusationEventsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AccusationEventsCallerSession struct {
	Contract *AccusationEventsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// AccusationEventsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AccusationEventsTransactorSession struct {
	Contract     *AccusationEventsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// AccusationEventsRaw is an auto generated low-level Go binding around an Ethereum contract.
type AccusationEventsRaw struct {
	Contract *AccusationEvents // Generic contract binding to access the raw methods on
}

// AccusationEventsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AccusationEventsCallerRaw struct {
	Contract *AccusationEventsCaller // Generic read-only contract binding to access the raw methods on
}

// AccusationEventsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AccusationEventsTransactorRaw struct {
	Contract *AccusationEventsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAccusationEvents creates a new instance of AccusationEvents, bound to a specific deployed contract.
func NewAccusationEvents(address common.Address, backend bind.ContractBackend) (*AccusationEvents, error) {
	contract, err := bindAccusationEvents(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &AccusationEvents{AccusationEventsCaller: AccusationEventsCaller{contract: contract}, AccusationEventsTransactor: AccusationEventsTransactor{contract: contract}, AccusationEventsFilterer: AccusationEventsFilterer{contract: contract}}, nil
}

// NewAccusationEventsCaller creates a new read-only instance of AccusationEvents, bound to a specific deployed contract.
func NewAccusationEventsCaller(address common.Address, caller bind.ContractCaller) (*AccusationEventsCaller, error) {
	contract, err := bindAccusationEvents(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AccusationEventsCaller{contract: contract}, nil
}

// NewAccusationEventsTransactor creates a new write-only instance of AccusationEvents, bound to a specific deployed contract.
func NewAccusationEventsTransactor(address common.Address, transactor bind.ContractTransactor) (*AccusationEventsTransactor, error) {
	contract, err := bindAccusationEvents(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AccusationEventsTransactor{contract: contract}, nil
}

// NewAccusationEventsFilterer creates a new log filterer instance of AccusationEvents, bound to a specific deployed contract.
func NewAccusationEventsFilterer(address common.Address, filterer bind.ContractFilterer) (*AccusationEventsFilterer, error) {
	contract, err := bindAccusationEvents(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AccusationEventsFilterer{contract: contract}, nil
}

// bindAccusationEvents binds a generic wrapper to an already deployed contract.
func bindAccusationEvents(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AccusationEventsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AccusationEvents *AccusationEventsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AccusationEvents.Contract.AccusationEventsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AccusationEvents *AccusationEventsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccusationEvents.Contract.AccusationEventsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AccusationEvents *AccusationEventsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AccusationEvents.Contract.AccusationEventsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AccusationEvents *AccusationEventsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AccusationEvents.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AccusationEvents *AccusationEventsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccusationEvents.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AccusationEvents *AccusationEventsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AccusationEvents.Contract.contract.Transact(opts, method, params...)
}

// AccusationEventsInvalidTransactionConsumptionIterator is returned from FilterInvalidTransactionConsumption and is used to iterate over the raw logs and unpacked data for InvalidTransactionConsumption events raised by the AccusationEvents contract.
type AccusationEventsInvalidTransactionConsumptionIterator struct {
	Event *AccusationEventsInvalidTransactionConsumption // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccusationEventsInvalidTransactionConsumptionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccusationEventsInvalidTransactionConsumption)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccusationEventsInvalidTransactionConsumption)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccusationEventsInvalidTransactionConsumptionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccusationEventsInvalidTransactionConsumptionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccusationEventsInvalidTransactionConsumption represents a InvalidTransactionConsumption event raised by the AccusationEvents contract.
type AccusationEventsInvalidTransactionConsumption struct {
	Validator common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterInvalidTransactionConsumption is a free log retrieval operation binding the contract event 0xe7d88c5a1b3de74710b2ce1551a3d3be5c537d9d526cf4cb0fbbc948f527ee8b.
//
// Solidity: event InvalidTransactionConsumption(address indexed validator)
func (_AccusationEvents *AccusationEventsFilterer) FilterInvalidTransactionConsumption(opts *bind.FilterOpts, validator []common.Address) (*AccusationEventsInvalidTransactionConsumptionIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _AccusationEvents.contract.FilterLogs(opts, "InvalidTransactionConsumption", validatorRule)
	if err != nil {
		return nil, err
	}
	return &AccusationEventsInvalidTransactionConsumptionIterator{contract: _AccusationEvents.contract, event: "InvalidTransactionConsumption", logs: logs, sub: sub}, nil
}

// WatchInvalidTransactionConsumption is a free log subscription operation binding the contract event 0xe7d88c5a1b3de74710b2ce1551a3d3be5c537d9d526cf4cb0fbbc948f527ee8b.
//
// Solidity: event InvalidTransactionConsumption(address indexed validator)
func (_AccusationEvents *AccusationEventsFilterer) WatchInvalidTransactionConsumption(opts *bind.WatchOpts, sink chan<- *AccusationEventsInvalidTransactionConsumption, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _AccusationEvents.contract.WatchLogs(opts, "InvalidTransactionConsumption", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccusationEventsInvalidTransactionConsumption)
				if err := _AccusationEvents.contract.UnpackLog(event, "InvalidTransactionConsumption", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInvalidTransactionConsumption is a log parse operation binding the contract event 0xe7d88c5a1b3de74710b2ce1551a3d3be5c537d9d526cf4cb0fbbc948f527ee8b.
//
// Solidity: event InvalidTransactionConsumption(address indexed validator)
func (_AccusationEvents *AccusationEventsFilterer) ParseInvalidTransactionConsumption(log types.Log) (*AccusationEventsInvalidTransactionConsumption, error) {
	event := new(AccusationEventsInvalidTransactionConsumption)
	if err := _AccusationEvents.contract.UnpackLog(event, "InvalidTransactionConsumption", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AccusationEventsMultipleProposalsIterator is returned from FilterMultipleProposals and is used to iterate over the raw logs and unpacked data for MultipleProposals events raised by the AccusationEvents contract.
type AccusationEventsMultipleProposalsIterator struct {
	Event *AccusationEventsMultipleProposals // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccusationEventsMultipleProposalsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccusationEventsMultipleProposals)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccusationEventsMultipleProposals)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccusationEventsMultipleProposalsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccusationEventsMultipleProposalsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccusationEventsMultipleProposals represents a MultipleProposals event raised by the AccusationEvents contract.
type AccusationEventsMultipleProposals struct {
	Validator common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterMultipleProposals is a free log retrieval operation binding the contract event 0xd70587ff450b3f9f38dcd0b8de705c37a9039a6d820906da412205e9f65c4138.
//
// Solidity: event MultipleProposals(address indexed validator)
func (_AccusationEvents *AccusationEventsFilterer) FilterMultipleProposals(opts *bind.FilterOpts, validator []common.Address) (*AccusationEventsMultipleProposalsIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _AccusationEvents.contract.FilterLogs(opts, "MultipleProposals", validatorRule)
	if err != nil {
		return nil, err
	}
	return &AccusationEventsMultipleProposalsIterator{contract: _AccusationEvents.contract, event: "MultipleProposals", logs: logs, sub: sub}, nil
}

// WatchMultipleProposals is a free log subscription operation binding the contract event 0xd70587ff450b3f9f38dcd0b8de705c37a9039a6d820906da412205e9f65c4138.
//
// Solidity: event MultipleProposals(address indexed validator)
func (_AccusationEvents *AccusationEventsFilterer) WatchMultipleProposals(opts *bind.WatchOpts, sink chan<- *AccusationEventsMultipleProposals, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _AccusationEvents.contract.WatchLogs(opts, "MultipleProposals", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccusationEventsMultipleProposals)
				if err := _AccusationEvents.contract.UnpackLog(event, "MultipleProposals", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMultipleProposals is a log parse operation binding the contract event 0xd70587ff450b3f9f38dcd0b8de705c37a9039a6d820906da412205e9f65c4138.
//
// Solidity: event MultipleProposals(address indexed validator)
func (_AccusationEvents *AccusationEventsFilterer) ParseMultipleProposals(log types.Log) (*AccusationEventsMultipleProposals, error) {
	event := new(AccusationEventsMultipleProposals)
	if err := _AccusationEvents.contract.UnpackLog(event, "MultipleProposals", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AccusationInvalidTransactionConsumptionFacetMetaData contains all meta data concerning the AccusationInvalidTransactionConsumptionFacet contract.
var AccusationInvalidTransactionConsumptionFacetMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"InvalidTransactionConsumption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"MultipleProposals\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_pClaims\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_pClaimsSig\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_bClaims\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_bClaimsSigGroup\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_txInPreImage\",\"type\":\"bytes\"},{\"internalType\":\"bytes[3]\",\"name\":\"_proofs\",\"type\":\"bytes[3]\"}],\"name\":\"AccuseInvalidTransactionConsumption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b5061629c80620000216000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063cac6a5f014610030575b600080fd5b61004a60048036038101906100459190613381565b61004c565b005b6000610056610151565b9050600061006888888888888861017e565b90506100bf60018360000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546104de90919063ffffffff16565b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508073ffffffffffffffffffffffffffffffffffffffff167fe7d88c5a1b3de74710b2ce1551a3d3be5c537d9d526cf4cb0fbbc948f527ee8b60405160405180910390a25050505050505050565b6000807fcb6574b970d6cba58c206e0a22b65f585e0e0144a6a0af7ad3741b9830b50a9290508091505090565b600061018a8585610537565b6000610195866105d0565b905060006101a2896105f5565b9050600081600001516060015163ffffffff16116101f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ec90613ec7565b60405180910390fd5b80600001516020015163ffffffff166001836020015161021591906146cc565b63ffffffff161461025b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025290614027565b60405180910390fd5b80600001516000015163ffffffff16826000015163ffffffff16146102b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ac90614307565b60405180910390fd5b60006102c1898b610612565b90506102cc8161065c565b61030b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610302906141e7565b60405180910390fd5b600061032e8660016003811061032457610323614d2e565b5b60200201516106db565b9050610342818460000151608001516108dd565b60006103658760026003811061035b5761035a614d2e565b5b60200201516106db565b90506103758183604001516108dd565b60006103988860006003811061038e5761038d614d2e565b5b60200201516106db565b905081604001518160400151146103e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103db90614267565b60405180910390fd5b60006103ef8a6109aa565b905063ffffffff816020015163ffffffff161415610464578160400151816040015114610451576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044890614227565b60405180910390fd5b61045f828860a001516108dd565b6104ca565b816040015161047b826040015183602001516109c4565b146104bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b290613fa7565b60405180910390fd5b6104c9828860a001516109f7565b5b849750505050505050509695505050505050565b60008282846104ed9190614676565b9150811015610531576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052890613fc7565b60405180910390fd5b92915050565b61053f61308e565b6105476130b0565b610552836000610b8d565b809250819350505061058b84805190602001206040516020016105759190613d0e565b6040516020818303038152906040528284610d74565b6105ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c190614187565b60405180910390fd5b50505050565b6105d86130d2565b6105ee8260086105e9856004610f2d565b610fb6565b9050919050565b6105fd61312d565b61060882600861127a565b5080915050919050565b6000610654836040518060400160405280600881526020017f50726f706f73616c000000000000000000000000000000000000000000000000815250846113b0565b905092915050565b600080610667611511565b90508060020160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1680156106d357506106c761153e565b6106d084611551565b10155b915050919050565b6106e3613153565b606782511015610728576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071f90614407565b60405180910390fd5b60006107358360636115a6565b905060006107448460656115a6565b90506020816107539190614a2f565b61ffff168261ffff1660676107689190614676565b6107729190614676565b845110156107b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ac90613f67565b60405180910390fd5b6107c0846000611660565b8360000190151590811515815250506107da8460016115a6565b836020019061ffff16908161ffff16815250506000836020015161ffff16101580156108105750610100836020015161ffff1611155b61084f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084690614147565b60405180910390fd5b61085a846003611725565b83604001818152505061086e846023611725565b836060018181525050610882846043611725565b83608001818152505061089b8460678461ffff166117d4565b8360a001819052506108ce848360676108b4919061463e565b61ffff166020846108c59190614a2f565b61ffff166117d4565b8360c001819052505050919050565b6000801b82608001511415610927576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091e90614047565b60405180910390fd5b60006109408360400151846080015185602001516118e7565b905060006109628460c00151848487604001518860a001518960200151611984565b9050806109a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099b906143e7565b60405180910390fd5b50505050565b6109b261319f565b6109bd826008611af1565b9050919050565b600082826040516020016109d9929190613d92565b60405160208183030381529060405280519060200120905092915050565b6000801b8260600151148015610a1357506000801b8260800151145b15610aa65760007fbc36789e7a1e281436464229828f817d6612f7b477d66591ff96a9e064bcc98a90506000610a5d8460c00151848487604001518860a001518960200151611984565b905080610a9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9690614367565b60405180910390fd5b5050610b89565b6000801b826060015114158015610ac457506000801b826080015114155b15610b4d576000610ae28360600151846080015185602001516118e7565b90506000610b048460c00151848487604001518860a001518960200151611984565b905080610b46576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3d90614107565b60405180910390fd5b5050610b88565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7f906142a7565b60405180910390fd5b5b5050565b610b9561308e565b610b9d6130b0565b8260c084610bab9190614676565b11610beb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be290613ee7565b60405180910390fd5b60c083610bf89190614676565b84511015610c3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3290614427565b60405180910390fd5b610c5184600085610c4c9190614676565b611c57565b82600060048110610c6557610c64614d2e565b5b602002018181525050610c8484602085610c7f9190614676565b611c57565b82600160048110610c9857610c97614d2e565b5b602002018181525050610cb784604085610cb29190614676565b611c57565b82600260048110610ccb57610cca614d2e565b5b602002018181525050610cea84606085610ce59190614676565b611c57565b82600360048110610cfe57610cfd614d2e565b5b602002018181525050610d1d84608085610d189190614676565b611c57565b81600060028110610d3157610d30614d2e565b5b602002018181525050610d508460a085610d4b9190614676565b611c57565b81600160028110610d6457610d63614d2e565b5b6020020181815250509250929050565b6000610d7e6130b0565b610d8785611d05565b9050610f2360405180610180016040528086600060028110610dac57610dab614d2e565b5b6020020151815260200186600160028110610dca57610dc9614d2e565b5b602002015181526020017f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed81526020017f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec81526020017f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d815260200183600060028110610e8057610e7f614d2e565b5b6020020151815260200183600160028110610e9e57610e9d614d2e565b5b6020020151815260200185600060048110610ebc57610ebb614d2e565b5b6020020151815260200185600160048110610eda57610ed9614d2e565b5b6020020151815260200185600260048110610ef857610ef7614d2e565b5b6020020151815260200185600360048110610f1657610f15614d2e565b5b6020020151815250611e79565b9150509392505050565b600080610f3a8484611ef9565b905060008161ffff16118015610f55575060028161ffff1611155b610f94576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f8b90613fe7565b60405180910390fd5b60018161ffff161415610faa5760089150610faf565b600091505b5092915050565b610fbe6130d2565b828261ffff1660b085610fd19190614676565b610fdb9190614b33565b1161101b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161101290614207565b60405180910390fd5b8161ffff1660b08461102d9190614676565b6110379190614b33565b8451101561107a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611071906142c7565b60405180910390fd5b60008261ffff1614156110b95761109d846008856110989190614676565b611fc1565b816060019063ffffffff16908163ffffffff16815250506110d3565b6000816060019063ffffffff16908163ffffffff16815250505b6110dd8484611fc1565b816000019063ffffffff16908163ffffffff16815250506000816000015163ffffffff1611611141576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113890614087565b60405180910390fd5b611157846004856111529190614676565b611fc1565b816020019063ffffffff16908163ffffffff16815250506000816020015163ffffffff16116111bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111b290613f87565b60405180910390fd5b6111e0848361ffff166030866111d19190614676565b6111db9190614b33565b611725565b81604001818152505061120e848361ffff166050866111ff9190614676565b6112099190614b33565b611725565b81608001818152505061123c848361ffff1660708661122d9190614676565b6112379190614b33565b611725565b8160a001818152505061126a848361ffff1660908661125b9190614676565b6112659190614b33565b611725565b8160c00181815250509392505050565b61128261312d565b6000826101c8846112939190614676565b116112d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112ca90614467565b60405180910390fd5b60006112eb856004866112e69190614676565b610f2d565b90508061ffff166101c86112ff9190614b33565b9150818461130d9190614676565b85511015611350576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611347906143a7565b60405180910390fd5b611367856010866113619190614676565b83610fb6565b83600001819052506113a0858261ffff1660b06010886113879190614676565b6113919190614676565b61139b9190614b33565b61209e565b8360200181905250509250929050565b600060418451146113f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ed90614167565b60405180910390fd5b6000838360405160200161140b929190613dbe565b60405160208183030381529060405280519060200120905060008060006020880151925060408801519150606088015160001a9050601b8160ff1610611451578061145f565b601b8161145e9190614706565b5b9050601b8160ff1614806114765750601c8160ff16145b6114b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ac906140a7565b60405180910390fd5b600184828585604051600081526020016040526040516114d89493929190613de2565b6020604051602081039080840390855afa1580156114fa573d6000803e3d6000fd5b505050602060405103519450505050509392505050565b6000807f310970b1d84cbb8af371a12019b396e9511a9b44411c1dabeec3e3d59d9a50f690508091505090565b6000611548612190565b60000154905090565b600061155b612190565b60090160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549050919050565b6000816002836115b69190614676565b116115f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115ed90613f47565b60405180910390fd5b6002826116039190614676565b83511015611646576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161163d906141a7565b60405180910390fd5b61ffff826020850101516010610100031c16905092915050565b6000816001836116709190614676565b116116b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116a7906140e7565b60405180910390fd5b6001826116bd9190614676565b83511015611700576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116f790614007565b60405180910390fd5b6000826020850101516008610100031c90506001811690506001811491505092915050565b6000816020836117359190614676565b11611775576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161176c90614347565b60405180910390fd5b6020826117829190614676565b835110156117c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117bc90614247565b60405180910390fd5b81602084010151905092915050565b60608282846117e39190614676565b1015611824576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161181b90614487565b60405180910390fd5b81836118309190614676565b84511015611873576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161186a90613f27565b60405180910390fd5b8167ffffffffffffffff81111561188d5761188c614d5d565b5b6040519080825280601f01601f1916602001820160405280156118bf5781602001600182028036833780820191505090505b509050600060208486010190506118df816118d9846121bd565b856121ca565b509392505050565b60006101008261ffff1611158015611904575060008261ffff1610155b611943576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161193a906140c7565b60405180910390fd5b8383836101006119539190614aff565b60405160200161196593929190613d55565b6040516020818303038152906040528051906020012090509392505050565b600080600086905060007fbc36789e7a1e281436464229828f817d6612f7b477d66591ff96a9e064bcc98a90506000808661ffff16101580156119cd57506101008661ffff1611155b611a0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a03906141c7565b60405180910390fd5b60005b8661ffff16811015611add57611a258882612258565b15611a4457602082611a37919061463e565b9150818c01519450611a48565b8294505b611a69898260018a611a5a9190614aff565b611a649190614aff565b61227c565b15611a9e578484604051602001611a81929190613d29565b604051602081830303815290604052805190602001209350611aca565b8385604051602001611ab1929190613d29565b6040516020818303038152906040528051906020012093505b8080611ad590614c4f565b915050611a0f565b508983149450505050509695505050505050565b611af961319f565b81603083611b079190614676565b11611b47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b3e906144e7565b60405180910390fd5b603082611b549190614676565b83511015611b97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b8e906144a7565b60405180910390fd5b611ba18383611fc1565b816000019063ffffffff16908163ffffffff16815250506000816000015163ffffffff1611611c05576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bfc90614327565b60405180910390fd5b611c1b83600484611c169190614676565b611fc1565b816020019063ffffffff16908163ffffffff1681525050611c4883601084611c439190614676565b611725565b81604001818152505092915050565b600081601f83611c679190614676565b11611ca7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c9e90614347565b60405180910390fd5b601f82611cb49190614676565b835111611cf6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ced90614067565b60405180910390fd5b81602084010151905092915050565b611d0d6130b0565b6000611d2283600060f81b600160f81b61229c565b90506000611d3984600260f81b600360f81b61229c565b90506000611d468361238b565b90506000611d538361238b565b9050611dde604051806080016040528084600060028110611d7757611d76614d2e565b5b6020020151815260200184600160028110611d9557611d94614d2e565b5b6020020151815260200183600060028110611db357611db2614d2e565b5b6020020151815260200183600160028110611dd157611dd0614d2e565b5b6020020151815250612a15565b9450611de985612a73565b611e28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e1f90613e67565b60405180910390fd5b611e3185612bbc565b611e70576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e67906142e7565b60405180910390fd5b50505050919050565b6000611e836131cf565b6000602082610180866008600019fa905080611ed4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ecb906143c7565b60405180910390fd5b600182600060018110611eea57611ee9614d2e565b5b60200201511492505050919050565b600081600283611f099190614676565b11611f49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f4090613f47565b60405180910390fd5b600282611f569190614676565b83511015611f99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f90906141a7565b60405180910390fd5b816020840101516010610100031c905060ff811660081b61ff00821660081c17905092915050565b600081600483611fd19190614676565b11612011576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161200890614347565b60405180910390fd5b60048261201e9190614676565b83511015612061576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161205890614287565b60405180910390fd5b816020840101516020610100031c905060ff811660181b61ff00821660081b62ff0000831660081c63ff000000841660181c171717905092915050565b6120a66131f1565b81610108836120b59190614676565b116120f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120ec90614127565b60405180910390fd5b610108826121039190614676565b83511015612146576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161213d906144c7565b60405180910390fd5b61215c836010846121579190614676565b612c14565b816000018190525061217a836048846121759190614676565b610b8d565b8260200183604001829052829052505092915050565b6000807f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237ef90508091505090565b6000602082019050919050565b5b6020811061220957825182526020826121e49190614676565b91506020836121f39190614676565b92506020816122029190614b33565b90506121cb565b600081141561221757612253565b600060018260206122289190614b33565b61010061223591906147fa565b61223f9190614b33565b905080198451168184511681811785525050505b505050565b60008060018360ff031b6020850151168360ff031c90506001811491505092915050565b60008060018360ff031b84168360ff031c90506001811491505092915050565b60008083856040516020016122b2929190613ce6565b6040516020818303038152906040528051906020012060001c9050600083866040516020016122e2929190613ce6565b6040516020818303038152906040528051906020012060001c90507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061232c5761232b614cff565b5b817f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061235c5761235b614cff565b5b7f0e0a77c19a07df2f666ea36f7879462c0a78eb28f5c70b3dd35d438dc58f0d9d850908925050509392505050565b6123936130b0565b60008060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806123c7576123c6614cff565b5b85860992507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806123fb576123fa614cff565b5b6004840891507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806124305761242f614cff565b5b828409905061243e81612e41565b905060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061247157612470614cff565b5b83840990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806124a5576124a4614cff565b5b83820990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806124d9576124d8614cff565b5b848509935060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061250f5761250e614cff565b5b8577b3c4d79d41a91759a9e4c7e359b6b89eaec68e62effffffd0990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061255b5761255a614cff565b5b838209905061256981612e95565b90507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061259a57612599614cff565b5b7759e26bcea0d48bacd4f263f1acdb5c4f5763473177fffffe8208905060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806125e8576125e7614cff565b5b6001830890506125f781612e95565b905060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061262a57612629614cff565b5b847f2042def740cbc01bd03583cf0100e593ba56470b9af68708d2c05d64905353850990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061267e5761267d614cff565b5b858209905061268c81612e95565b90507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806126bd576126bc614cff565b5b60018208905060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806126f4576126f3614cff565b5b84850990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061272857612727614cff565b5b84820990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061275c5761275b614cff565b5b600382089050600061276d82612edc565b90507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061279e5761279d614cff565b5b84850991507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806127d2576127d1614cff565b5b84830991507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061280657612805614cff565b5b600383089150600061281783612edc565b905060006001600460038461282c9190614a6b565b6001866128399190614a6b565b6128439190614918565b61284d919061473d565b61285791906145aa565b90506000600182141561286c57879050612882565b600282141561287d57869050612881565b8590505b5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806128b1576128b0614cff565b5b81820994507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806128e5576128e4614cff565b5b81860994507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061291957612918614cff565b5b60038608945061292885612f61565b945060006129358f612fb5565b90507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061296657612965614cff565b5b8187099550612988604051806040016040528084815260200188815250612a73565b6129c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129be90613f07565b60405180910390fd5b818e6000600281106129dc576129db614d2e565b5b602002018181525050858e6001600281106129fa576129f9614d2e565b5b60200201818152505050505050505050505050505050919050565b612a1d6130b0565b60006040826080856006600019fa905080612a6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a6490613e87565b60405180910390fd5b50919050565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780612aa457612aa3614cff565b5b60037f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780612ad557612ad4614cff565b5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780612b0457612b03614cff565b5b85600060028110612b1857612b17614d2e565b5b602002015186600060028110612b3157612b30614d2e565b5b60200201510985600060028110612b4b57612b4a614d2e565b5b602002015109087f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780612b8157612b80614cff565b5b83600160028110612b9557612b94614d2e565b5b602002015184600160028110612bae57612bad614d2e565b5b602002015109149050919050565b60008082600060028110612bd357612bd2614d2e565b5b60200201511480612bfc5750600182600060028110612bf557612bf4614d2e565b5b6020020151145b15612c0a5760009050612c0f565b600190505b919050565b612c1c613224565b81603883612c2a9190614676565b11612c6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c6190613ee7565b60405180910390fd5b603882612c779190614676565b83511015612cba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cb190614387565b60405180910390fd5b612cc48383611fc1565b816000019063ffffffff16908163ffffffff16815250506000816000015163ffffffff1611612d28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d1f90614447565b60405180910390fd5b612d3e83600484612d399190614676565b611fc1565b816020019063ffffffff16908163ffffffff16815250506000816020015163ffffffff1611612da2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d9990613e27565b60405180910390fd5b612db883600884612db39190614676565b611fc1565b816040019063ffffffff16908163ffffffff16815250506000816040015163ffffffff1611612e1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e1390613ea7565b60405180910390fd5b612e3283601884612e2d9190614676565b611725565b81606001818152505092915050565b6000612e8e827f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd457f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4761300c565b9050919050565b600080821415612ea85760009050612ed7565b817f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47612ed49190614b33565b90505b919050565b600080612f2a837f183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea37f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4761300c565b905060008114612f565760018082166002612f459190614918565b612f4f9190614a6b565b9150612f5b565b600091505b50919050565b6000612fae827f0c19139cb84c680a6e14116da060561765e05aa45a1c72a34f082305b61f3f527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4761300c565b9050919050565b6000600190507f183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea3821115613007577f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4690505b919050565b60008060405160208152602080820152602060408201528560608201528460808201528360a082015260208160c08360055afa9150805192505080613086576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161307d90613e47565b60405180910390fd5b509392505050565b6040518060800160405280600490602082028036833780820191505090505090565b6040518060400160405280600290602082028036833780820191505090505090565b6040518060e00160405280600063ffffffff168152602001600063ffffffff16815260200160008019168152602001600063ffffffff1681526020016000801916815260200160008019168152602001600080191681525090565b60405180604001604052806131406130d2565b815260200161314d6131f1565b81525090565b6040518060e00160405280600015158152602001600061ffff16815260200160008019168152602001600080191681526020016000801916815260200160608152602001606081525090565b6040518060600160405280600063ffffffff168152602001600063ffffffff168152602001600080191681525090565b6040518060200160405280600190602082028036833780820191505090505090565b6040518060600160405280613204613224565b815260200161321161308e565b815260200161321e6130b0565b81525090565b6040518060800160405280600063ffffffff168152602001600063ffffffff168152602001600063ffffffff168152602001600080191681525090565b600061327461326f8461452c565b614507565b9050808285602086028201111561328e5761328d614d91565b5b60005b858110156132dc57813567ffffffffffffffff8111156132b4576132b3614d8c565b5b8086016132c18982613353565b85526020850194506020840193505050600181019050613291565b5050509392505050565b60006132f96132f484614552565b614507565b90508281526020810184848401111561331557613314614d96565b5b613320848285614bdc565b509392505050565b600082601f83011261333d5761333c614d8c565b5b600361334a848285613261565b91505092915050565b600082601f83011261336857613367614d8c565b5b81356133788482602086016132e6565b91505092915050565b60008060008060008060c0878903121561339e5761339d614da0565b5b600087013567ffffffffffffffff8111156133bc576133bb614d9b565b5b6133c889828a01613353565b965050602087013567ffffffffffffffff8111156133e9576133e8614d9b565b5b6133f589828a01613353565b955050604087013567ffffffffffffffff81111561341657613415614d9b565b5b61342289828a01613353565b945050606087013567ffffffffffffffff81111561344357613442614d9b565b5b61344f89828a01613353565b935050608087013567ffffffffffffffff8111156134705761346f614d9b565b5b61347c89828a01613353565b92505060a087013567ffffffffffffffff81111561349d5761349c614d9b565b5b6134a989828a01613328565b9150509295509295509295565b6134c76134c282614b67565b614c98565b82525050565b6134d681614b93565b82525050565b6134ed6134e882614b93565b614ca2565b82525050565b60006134fe82614583565b613508818561458e565b9350613518818560208601614beb565b80840191505092915050565b6000613531604b83614599565b915061353c82614ddd565b606082019050919050565b6000613554601d83614599565b915061355f82614e52565b602082019050919050565b6000613577602983614599565b915061358282614e7b565b604082019050919050565b600061359a601e83614599565b91506135a582614eca565b602082019050919050565b60006135bd604a83614599565b91506135c882614ef3565b606082019050919050565b60006135e0604583614599565b91506135eb82614f68565b606082019050919050565b6000613603603a83614599565b915061360e82614fdd565b604082019050919050565b6000613626602483614599565b91506136318261502c565b604082019050919050565b6000613649604083614599565b91506136548261507b565b604082019050919050565b600061366c605a83614599565b9150613677826150ca565b606082019050919050565b600061368f604183614599565b915061369a8261513f565b606082019050919050565b60006136b2604b83614599565b91506136bd826151b4565b606082019050919050565b60006136d5605583614599565b91506136e082615229565b606082019050919050565b60006136f8601483614599565b91506137038261529e565b602082019050919050565b600061371b604a83614599565b9150613726826152c7565b606082019050919050565b600061373e606783614599565b91506137498261533c565b608082019050919050565b6000613761602b83614599565b915061376c826153d7565b604082019050919050565b6000613784603383614599565b915061378f82615426565b604082019050919050565b60006137a7603e83614599565b91506137b282615475565b604082019050919050565b60006137ca604c83614599565b91506137d5826154c4565b606082019050919050565b60006137ed603183614599565b91506137f882615539565b604082019050919050565b6000613810603b83614599565b915061381b82615588565b604082019050919050565b6000613833605983614599565b915061383e826155d7565b606082019050919050565b6000613856604b83614599565b91506138618261564c565b606082019050919050565b6000613879603883614599565b9150613884826156c1565b604082019050919050565b600061389c604383614599565b91506138a782615710565b606082019050919050565b60006138bf602f83614599565b91506138ca82615785565b604082019050919050565b60006138e2603083614599565b91506138ed826157d4565b604082019050919050565b6000613905606883614599565b915061391082615823565b608082019050919050565b6000613928603f83614599565b9150613933826158be565b604082019050919050565b600061394b604983614599565b91506139568261590d565b606082019050919050565b600061396e604b83614599565b915061397982615982565b606082019050919050565b6000613991605783614599565b915061399c826159f7565b606082019050919050565b60006139b4602e83614599565b91506139bf82615a6c565b604082019050919050565b60006139d7602983614599565b91506139e282615abb565b604082019050919050565b60006139fa605083614599565b9150613a0582615b0a565b606082019050919050565b6000613a1d603783614599565b9150613a2882615b7f565b604082019050919050565b6000613a40604a83614599565b9150613a4b82615bce565b606082019050919050565b6000613a63602a83614599565b9150613a6e82615c43565b604082019050919050565b6000613a86602d83614599565b9150613a9182615c92565b604082019050919050565b6000613aa9605183614599565b9150613ab482615ce1565b606082019050919050565b6000613acc604283614599565b9150613ad782615d56565b606082019050919050565b6000613aef603d83614599565b9150613afa82615dcb565b604082019050919050565b6000613b12603983614599565b9150613b1d82615e1a565b604082019050919050565b6000613b35603983614599565b9150613b4082615e69565b604082019050919050565b6000613b58601d83614599565b9150613b6382615eb8565b602082019050919050565b6000613b7b604183614599565b9150613b8682615ee1565b606082019050919050565b6000613b9e604b83614599565b9150613ba982615f56565b606082019050919050565b6000613bc1602f83614599565b9150613bcc82615fcb565b604082019050919050565b6000613be4604c83614599565b9150613bef8261601a565b606082019050919050565b6000613c07603a83614599565b9150613c128261608f565b604082019050919050565b6000613c2a605683614599565b9150613c35826160de565b606082019050919050565b6000613c4d604383614599565b9150613c5882616153565b606082019050919050565b6000613c70603583614599565b9150613c7b826161c8565b604082019050919050565b6000613c93603f83614599565b9150613c9e82616217565b604082019050919050565b613cba613cb582614bbf565b614cac565b82525050565b613cc981614bcf565b82525050565b613ce0613cdb82614bcf565b614cbe565b82525050565b6000613cf282856134b6565b600182019150613d0282846134f3565b91508190509392505050565b6000613d1a82846134dc565b60208201915081905092915050565b6000613d3582856134dc565b602082019150613d4582846134dc565b6020820191508190509392505050565b6000613d6182866134dc565b602082019150613d7182856134dc565b602082019150613d818284613ccf565b600182019150819050949350505050565b6000613d9e82856134dc565b602082019150613dae8284613ca9565b6004820191508190509392505050565b6000613dca82856134f3565b9150613dd682846134f3565b91508190509392505050565b6000608082019050613df760008301876134cd565b613e046020830186613cc0565b613e1160408301856134cd565b613e1e60608301846134cd565b95945050505050565b60006020820190508181036000830152613e4081613524565b9050919050565b60006020820190508181036000830152613e6081613547565b9050919050565b60006020820190508181036000830152613e808161356a565b9050919050565b60006020820190508181036000830152613ea08161358d565b9050919050565b60006020820190508181036000830152613ec0816135b0565b9050919050565b60006020820190508181036000830152613ee0816135d3565b9050919050565b60006020820190508181036000830152613f00816135f6565b9050919050565b60006020820190508181036000830152613f2081613619565b9050919050565b60006020820190508181036000830152613f408161363c565b9050919050565b60006020820190508181036000830152613f608161365f565b9050919050565b60006020820190508181036000830152613f8081613682565b9050919050565b60006020820190508181036000830152613fa0816136a5565b9050919050565b60006020820190508181036000830152613fc0816136c8565b9050919050565b60006020820190508181036000830152613fe0816136eb565b9050919050565b600060208201905081810360008301526140008161370e565b9050919050565b6000602082019050818103600083015261402081613731565b9050919050565b6000602082019050818103600083015261404081613754565b9050919050565b6000602082019050818103600083015261406081613777565b9050919050565b600060208201905081810360008301526140808161379a565b9050919050565b600060208201905081810360008301526140a0816137bd565b9050919050565b600060208201905081810360008301526140c0816137e0565b9050919050565b600060208201905081810360008301526140e081613803565b9050919050565b6000602082019050818103600083015261410081613826565b9050919050565b6000602082019050818103600083015261412081613849565b9050919050565b600060208201905081810360008301526141408161386c565b9050919050565b600060208201905081810360008301526141608161388f565b9050919050565b60006020820190508181036000830152614180816138b2565b9050919050565b600060208201905081810360008301526141a0816138d5565b9050919050565b600060208201905081810360008301526141c0816138f8565b9050919050565b600060208201905081810360008301526141e08161391b565b9050919050565b600060208201905081810360008301526142008161393e565b9050919050565b6000602082019050818103600083015261422081613961565b9050919050565b6000602082019050818103600083015261424081613984565b9050919050565b60006020820190508181036000830152614260816139a7565b9050919050565b60006020820190508181036000830152614280816139ca565b9050919050565b600060208201905081810360008301526142a0816139ed565b9050919050565b600060208201905081810360008301526142c081613a10565b9050919050565b600060208201905081810360008301526142e081613a33565b9050919050565b6000602082019050818103600083015261430081613a56565b9050919050565b6000602082019050818103600083015261432081613a79565b9050919050565b6000602082019050818103600083015261434081613a9c565b9050919050565b6000602082019050818103600083015261436081613abf565b9050919050565b6000602082019050818103600083015261438081613ae2565b9050919050565b600060208201905081810360008301526143a081613b05565b9050919050565b600060208201905081810360008301526143c081613b28565b9050919050565b600060208201905081810360008301526143e081613b4b565b9050919050565b6000602082019050818103600083015261440081613b6e565b9050919050565b6000602082019050818103600083015261442081613b91565b9050919050565b6000602082019050818103600083015261444081613bb4565b9050919050565b6000602082019050818103600083015261446081613bd7565b9050919050565b6000602082019050818103600083015261448081613bfa565b9050919050565b600060208201905081810360008301526144a081613c1d565b9050919050565b600060208201905081810360008301526144c081613c40565b9050919050565b600060208201905081810360008301526144e081613c63565b9050919050565b6000602082019050818103600083015261450081613c86565b9050919050565b6000614511614522565b905061451d8282614c1e565b919050565b6000604051905090565b600067ffffffffffffffff82111561454757614546614d5d565b5b602082029050919050565b600067ffffffffffffffff82111561456d5761456c614d5d565b5b61457682614da5565b9050602081019050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b60006145b582614b9d565b91506145c083614b9d565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038313600083121516156145fb576145fa614cd0565b5b817f800000000000000000000000000000000000000000000000000000000000000003831260008312161561463357614632614cd0565b5b828201905092915050565b600061464982614ba7565b915061465483614ba7565b92508261ffff0382111561466b5761466a614cd0565b5b828201905092915050565b600061468182614bb5565b915061468c83614bb5565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156146c1576146c0614cd0565b5b828201905092915050565b60006146d782614bbf565b91506146e283614bbf565b92508263ffffffff038211156146fb576146fa614cd0565b5b828201905092915050565b600061471182614bcf565b915061471c83614bcf565b92508260ff0382111561473257614731614cd0565b5b828201905092915050565b600061474882614b9d565b915061475383614b9d565b92508261476357614762614cff565b5b600160000383147f80000000000000000000000000000000000000000000000000000000000000008314161561479c5761479b614cd0565b5b828205905092915050565b6000808291508390505b60018511156147f1578086048111156147cd576147cc614cd0565b5b60018516156147dc5780820291505b80810290506147ea85614dd0565b94506147b1565b94509492505050565b600061480582614bb5565b915061481083614bb5565b925061483d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484614845565b905092915050565b6000826148555760019050614911565b816148635760009050614911565b81600181146148795760028114614883576148b2565b6001915050614911565b60ff84111561489557614894614cd0565b5b8360020a9150848211156148ac576148ab614cd0565b5b50614911565b5060208310610133831016604e8410600b84101617156148e75782820a9050838111156148e2576148e1614cd0565b5b614911565b6148f484848460016147a7565b9250905081840481111561490b5761490a614cd0565b5b81810290505b9392505050565b600061492382614b9d565b915061492e83614b9d565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561496d5761496c614cd0565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156149aa576149a9614cd0565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156149e7576149e6614cd0565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615614a2457614a23614cd0565b5b828202905092915050565b6000614a3a82614ba7565b9150614a4583614ba7565b92508161ffff0483118215151615614a6057614a5f614cd0565b5b828202905092915050565b6000614a7682614b9d565b9150614a8183614b9d565b9250827f800000000000000000000000000000000000000000000000000000000000000001821260008412151615614abc57614abb614cd0565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018213600084121615614af457614af3614cd0565b5b828203905092915050565b6000614b0a82614ba7565b9150614b1583614ba7565b925082821015614b2857614b27614cd0565b5b828203905092915050565b6000614b3e82614bb5565b9150614b4983614bb5565b925082821015614b5c57614b5b614cd0565b5b828203905092915050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b6000819050919050565b600061ffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015614c09578082015181840152602081019050614bee565b83811115614c18576000848401525b50505050565b614c2782614da5565b810181811067ffffffffffffffff82111715614c4657614c45614d5d565b5b80604052505050565b6000614c5a82614bb5565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614c8d57614c8c614cd0565b5b600182019050919050565b6000819050919050565b6000819050919050565b6000614cb782614db6565b9050919050565b6000614cc982614dc3565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b60008160e01b9050919050565b60008160f81b9050919050565b60008160011c9050919050565b7f52436c61696d735061727365724c6962726172793a20496e76616c696420706160008201527f7273696e672e20546865206865696768742073686f756c64206265206772656160208201527f746572207468616e203021000000000000000000000000000000000000000000604082015250565b7f6d6f64756c6172206578706f6e656e74696174696f6e2066616c696564000000600082015250565b7f496e76616c6964206861736820706f696e743a206e6f74206f6e20656c6c697060008201527f7469632063757276650000000000000000000000000000000000000000000000602082015250565b7f656c6c6970746963206375727665206164646974696f6e206661696c65640000600082015250565b7f52436c61696d735061727365724c6962726172793a20496e76616c696420706160008201527f7273696e672e2054686520726f756e642073686f756c6420626520677265617460208201527f6572207468616e20302100000000000000000000000000000000000000000000604082015250565b7f41636375736174696f6e4c6962726172793a205468652061636375736564207060008201527f726f706f73616c20646f65736e2774206861766520616e79207472616e73616360208201527f74696f6e21000000000000000000000000000000000000000000000000000000604082015250565b7f52436c61696d735061727365724c6962726172793a204f766572666c6f77206f60008201527f6e2074686520646174614f666673657420706172616d65746572000000000000602082015250565b7f496e76616c696420706f696e743a206e6f74206f6e20656c6c6970746963206360008201527f7572766500000000000000000000000000000000000000000000000000000000602082015250565b7f426173655061727365724c6962726172793a204e6f7420656e6f75676820627960008201527f74657320746f206578747261637420696e20746865207372632062696e617279602082015250565b7f426173655061727365724c6962726172793a204572726f72206578747261637460008201527f696e672075696e31362120416e206f766572666c6f772068617070656e65642060208201527f7769746820746865206f666673657420706172616d6574657221000000000000604082015250565b7f4d65726b6c6550726f6f665061727365724c6962726172793a204e6f7420656e60008201527f6f75676820627974657320746f2065787472616374204d65726b6c6550726f6f60208201527f6600000000000000000000000000000000000000000000000000000000000000604082015250565b7f42436c61696d735061727365724c6962726172793a20496e76616c696420706160008201527f7273696e672e20546865206865696768742073686f756c64206265206772656160208201527f746572207468616e203021000000000000000000000000000000000000000000604082015250565b7f41636375736174696f6e4c6962726172793a20546865206b6579206f66204d6560008201527f726b6c652050726f6f662073686f756c6420626520657175616c20746f20746860208201527f65205554584f4944206265696e67207370656e74210000000000000000000000604082015250565b7f64732d6d6174682d6164642d6f766572666c6f77000000000000000000000000600082015250565b7f42436c61696d735061727365724c6962726172793a205468652073697a65206f60008201527f662074686520646174612073656374696f6e2073686f756c642062652031206f60208201527f72203220776f7264732100000000000000000000000000000000000000000000604082015250565b7f426173655061727365724c6962726172793a204572726f72206578747261637460008201527f696e6720626f6f6c2120547279696e6720746f207265616420616e206f66667360208201527f6574206f7574206f6620626f756e64617269657320696e20746865207372632060408201527f62696e6172792100000000000000000000000000000000000000000000000000606082015250565b7f41636375736174696f6e4c6962726172793a204865696768742064656c74612060008201527f73686f756c642062652031000000000000000000000000000000000000000000602082015250565b7f4d65726b6c6550726f6f664c6962726172793a20496e76616c696420496e636c60008201527f7573696f6e204d65726b6c652070726f6f662100000000000000000000000000602082015250565b7f426173655061727365724c6962726172793a20547279696e6720746f2072656160008201527f6420616e206f6666736574206f7574206f6620626f756e646172696573210000602082015250565b7f42436c61696d735061727365724c6962726172793a20496e76616c696420706160008201527f7273696e672e2054686520636861696e49642073686f756c642062652067726560208201527f61746572207468616e2030210000000000000000000000000000000000000000604082015250565b7f41636375736174696f6e4c6962726172793a205369676e61747572652075736560008201527f7320696e76616c69642076657273696f6e000000000000000000000000000000602082015250565b7f4d65726b6c6550726f6f664c6962726172793a20496e76616c69642070726f6f60008201527f664865696768742c2073686f756c64206265205b302c203235365b0000000000602082015250565b7f426173655061727365724c6962726172793a204572726f72206578747261637460008201527f696e6720626f6f6c2120416e206f766572666c6f772068617070656e6564207760208201527f69746820746865206f666673657420706172616d657465722100000000000000604082015250565b7f4d65726b6c6550726f6f664c6962726172793a20546865204c656166206e6f6460008201527f652070726f766964656420776173206e6f7420666f756e6420696e207468652060208201527f6b65792773207061746821000000000000000000000000000000000000000000604082015250565b7f52436572745061727365724c6962726172793a204f766572666c6f77206f6e2060008201527f74686520646174614f666673657420706172616d657465720000000000000000602082015250565b7f4d65726b6c6550726f6f665061727365724c6962726172793a206b657948656960008201527f6768742073686f756c6420626520696e207468652072616e6765205b302c203260208201527f35365d0000000000000000000000000000000000000000000000000000000000604082015250565b7f41636375736174696f6e4c6962726172793a205369676e61747572652073686f60008201527f756c642062652036352062797465730000000000000000000000000000000000602082015250565b7f41636375736174696f6e4c6962726172793a205369676e61747572652076657260008201527f696669636174696f6e206661696c656400000000000000000000000000000000602082015250565b7f426173655061727365724c6962726172793a204572726f72206578747261637460008201527f696e672075696e31362120547279696e6720746f207265616420616e206f666660208201527f736574206f7574206f6620626f756e64617269657320696e207468652073726360408201527f2062696e61727921000000000000000000000000000000000000000000000000606082015250565b7f4d65726b6c6550726f6f664c6962726172793a2070726f6f664865696768742060008201527f73686f756c6420626520696e207468652072616e6765205b302c203235365d00602082015250565b7f41636375736174696f6e4c6962726172793a20746865207369676e6572206f6660008201527f2074686573652070726f706f73616c206973206e6f7420612076616c6964207660208201527f616c696461746f72210000000000000000000000000000000000000000000000604082015250565b7f42436c61696d735061727365724c6962726172793a20496e76616c696420706160008201527f7273696e672e204f766572666c6f77206f6e2074686520646174614f6666736560208201527f7420706172616d65746572000000000000000000000000000000000000000000604082015250565b7f41636375736174696f6e4c6962726172793a20546865206b6579206f66204d6560008201527f726b6c652050726f6f662073686f756c6420626520657175616c20746f20746860208201527f6520636f6e73756d6564206465706f736974206b657921000000000000000000604082015250565b7f426173655061727365724c6962726172793a206e6f7420656e6f75676820627960008201527f74657320746f2065787472616374000000000000000000000000000000000000602082015250565b7f41636375736174696f6e4c6962726172793a20546865205554584f2073686f7560008201527f6c64206d61746368210000000000000000000000000000000000000000000000602082015250565b7f426173655061727365724c6962726172793a20547279696e6720746f2072656160008201527f6420616e206f6666736574206f7574206f6620626f756e64617269657320696e60208201527f20746865207372632062696e6172792100000000000000000000000000000000604082015250565b7f4d65726b6c6550726f6f664c6962726172793a20496e76616c6964204e6f6e2060008201527f496e636c7573696f6e204d65726b6c652070726f6f6621000000000000000000602082015250565b7f42436c61696d735061727365724c6962726172793a20496e76616c696420706160008201527f7273696e672e204e6f7420656e6f75676820627974657320746f20657874726160208201527f63742042436c61696d7300000000000000000000000000000000000000000000604082015250565b7f44616e6765726f7573206861736820706f696e743a206e6f742073616665206660008201527f6f72207369676e696e6700000000000000000000000000000000000000000000602082015250565b7f41636375736174696f6e4c6962726172793a20436861696e49642073686f756c60008201527f64206265207468652073616d6500000000000000000000000000000000000000602082015250565b7f5458496e507265496d6167655061727365724c6962726172793a20496e76616c60008201527f69642070617273696e672e2054686520636861696e49642073686f756c64206260208201527f652067726561746572207468616e203021000000000000000000000000000000604082015250565b7f426173655061727365724c6962726172793a20416e206f766572666c6f77206860008201527f617070656e6564207769746820746865206f666673657420706172616d65746560208201527f7221000000000000000000000000000000000000000000000000000000000000604082015250565b7f4d65726b6c6550726f6f664c6962726172793a2044656661756c74206c65616660008201527f206e6f7420666f756e6420696e20746865206b65792773207061746821000000602082015250565b7f52436c61696d735061727365724c6962726172793a204e6f7420656e6f75676860008201527f20627974657320746f20657874726163742052436c61696d7300000000000000602082015250565b7f50436c61696d735061727365724c6962726172793a204e6f7420656e6f75676860008201527f20627974657320746f20657874726163742050436c61696d7300000000000000602082015250565b7f656c6c69707469632063757276652070616972696e67206661696c6564000000600082015250565b7f4d65726b6c6550726f6f664c6962726172793a205468652070726f6f6620646f60008201527f65736e2774206d617463682074686520726f6f74206f6620746865207472696560208201527f2100000000000000000000000000000000000000000000000000000000000000604082015250565b7f4d65726b6c6550726f6f665061727365724c6962726172793a204e6f7420656e60008201527f6f75676820627974657320746f20657874726163742061206d696e696d756d2060208201527f4d65726b6c6550726f6f66000000000000000000000000000000000000000000604082015250565b7f52436572745061727365724c6962726172793a204e6f7420656e6f756768206260008201527f7974657320746f20657874726163740000000000000000000000000000000000602082015250565b7f52436c61696d735061727365724c6962726172793a20496e76616c696420706160008201527f7273696e672e2054686520636861696e49642073686f756c642062652067726560208201527f61746572207468616e2030210000000000000000000000000000000000000000604082015250565b7f50436c61696d735061727365724c6962726172793a204f766572666c6f77206f60008201527f6e2074686520646174614f666673657420706172616d65746572000000000000602082015250565b7f426173655061727365724c6962726172793a20416e206f766572666c6f77206860008201527f617070656e6564207769746820746865206f6666736574206f7220746865206860208201527f6f774d616e79427974657320706172616d657465722100000000000000000000604082015250565b7f5458496e507265496d6167655061727365724c6962726172793a204e6f74206560008201527f6e6f75676820627974657320746f2065787472616374205458496e507265496d60208201527f6167650000000000000000000000000000000000000000000000000000000000604082015250565b7f52436572745061727365724c6962726172793a204e6f7420656e6f756768206260008201527f7974657320746f20657874726163742052436572740000000000000000000000602082015250565b7f5458496e507265496d6167655061727365724c6962726172793a204f7665726660008201527f6c6f77206f6e2074686520646174614f666673657420706172616d657465720060208201525056fea2646970667358221220316c230d64a469cb2076e8df5e41fdec097e93f67d540e2b4fc248f6731a3b9864736f6c63430008060033",
}

// AccusationInvalidTransactionConsumptionFacetABI is the input ABI used to generate the binding from.
// Deprecated: Use AccusationInvalidTransactionConsumptionFacetMetaData.ABI instead.
var AccusationInvalidTransactionConsumptionFacetABI = AccusationInvalidTransactionConsumptionFacetMetaData.ABI

// AccusationInvalidTransactionConsumptionFacetBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AccusationInvalidTransactionConsumptionFacetMetaData.Bin instead.
var AccusationInvalidTransactionConsumptionFacetBin = AccusationInvalidTransactionConsumptionFacetMetaData.Bin

// DeployAccusationInvalidTransactionConsumptionFacet deploys a new Ethereum contract, binding an instance of AccusationInvalidTransactionConsumptionFacet to it.
func DeployAccusationInvalidTransactionConsumptionFacet(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *AccusationInvalidTransactionConsumptionFacet, error) {
	parsed, err := AccusationInvalidTransactionConsumptionFacetMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(AccusationInvalidTransactionConsumptionFacetBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &AccusationInvalidTransactionConsumptionFacet{AccusationInvalidTransactionConsumptionFacetCaller: AccusationInvalidTransactionConsumptionFacetCaller{contract: contract}, AccusationInvalidTransactionConsumptionFacetTransactor: AccusationInvalidTransactionConsumptionFacetTransactor{contract: contract}, AccusationInvalidTransactionConsumptionFacetFilterer: AccusationInvalidTransactionConsumptionFacetFilterer{contract: contract}}, nil
}

// AccusationInvalidTransactionConsumptionFacet is an auto generated Go binding around an Ethereum contract.
type AccusationInvalidTransactionConsumptionFacet struct {
	AccusationInvalidTransactionConsumptionFacetCaller     // Read-only binding to the contract
	AccusationInvalidTransactionConsumptionFacetTransactor // Write-only binding to the contract
	AccusationInvalidTransactionConsumptionFacetFilterer   // Log filterer for contract events
}

// AccusationInvalidTransactionConsumptionFacetCaller is an auto generated read-only Go binding around an Ethereum contract.
type AccusationInvalidTransactionConsumptionFacetCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccusationInvalidTransactionConsumptionFacetTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AccusationInvalidTransactionConsumptionFacetTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccusationInvalidTransactionConsumptionFacetFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AccusationInvalidTransactionConsumptionFacetFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccusationInvalidTransactionConsumptionFacetSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AccusationInvalidTransactionConsumptionFacetSession struct {
	Contract     *AccusationInvalidTransactionConsumptionFacet // Generic contract binding to set the session for
	CallOpts     bind.CallOpts                                 // Call options to use throughout this session
	TransactOpts bind.TransactOpts                             // Transaction auth options to use throughout this session
}

// AccusationInvalidTransactionConsumptionFacetCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AccusationInvalidTransactionConsumptionFacetCallerSession struct {
	Contract *AccusationInvalidTransactionConsumptionFacetCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                                       // Call options to use throughout this session
}

// AccusationInvalidTransactionConsumptionFacetTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AccusationInvalidTransactionConsumptionFacetTransactorSession struct {
	Contract     *AccusationInvalidTransactionConsumptionFacetTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                                       // Transaction auth options to use throughout this session
}

// AccusationInvalidTransactionConsumptionFacetRaw is an auto generated low-level Go binding around an Ethereum contract.
type AccusationInvalidTransactionConsumptionFacetRaw struct {
	Contract *AccusationInvalidTransactionConsumptionFacet // Generic contract binding to access the raw methods on
}

// AccusationInvalidTransactionConsumptionFacetCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AccusationInvalidTransactionConsumptionFacetCallerRaw struct {
	Contract *AccusationInvalidTransactionConsumptionFacetCaller // Generic read-only contract binding to access the raw methods on
}

// AccusationInvalidTransactionConsumptionFacetTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AccusationInvalidTransactionConsumptionFacetTransactorRaw struct {
	Contract *AccusationInvalidTransactionConsumptionFacetTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAccusationInvalidTransactionConsumptionFacet creates a new instance of AccusationInvalidTransactionConsumptionFacet, bound to a specific deployed contract.
func NewAccusationInvalidTransactionConsumptionFacet(address common.Address, backend bind.ContractBackend) (*AccusationInvalidTransactionConsumptionFacet, error) {
	contract, err := bindAccusationInvalidTransactionConsumptionFacet(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &AccusationInvalidTransactionConsumptionFacet{AccusationInvalidTransactionConsumptionFacetCaller: AccusationInvalidTransactionConsumptionFacetCaller{contract: contract}, AccusationInvalidTransactionConsumptionFacetTransactor: AccusationInvalidTransactionConsumptionFacetTransactor{contract: contract}, AccusationInvalidTransactionConsumptionFacetFilterer: AccusationInvalidTransactionConsumptionFacetFilterer{contract: contract}}, nil
}

// NewAccusationInvalidTransactionConsumptionFacetCaller creates a new read-only instance of AccusationInvalidTransactionConsumptionFacet, bound to a specific deployed contract.
func NewAccusationInvalidTransactionConsumptionFacetCaller(address common.Address, caller bind.ContractCaller) (*AccusationInvalidTransactionConsumptionFacetCaller, error) {
	contract, err := bindAccusationInvalidTransactionConsumptionFacet(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AccusationInvalidTransactionConsumptionFacetCaller{contract: contract}, nil
}

// NewAccusationInvalidTransactionConsumptionFacetTransactor creates a new write-only instance of AccusationInvalidTransactionConsumptionFacet, bound to a specific deployed contract.
func NewAccusationInvalidTransactionConsumptionFacetTransactor(address common.Address, transactor bind.ContractTransactor) (*AccusationInvalidTransactionConsumptionFacetTransactor, error) {
	contract, err := bindAccusationInvalidTransactionConsumptionFacet(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AccusationInvalidTransactionConsumptionFacetTransactor{contract: contract}, nil
}

// NewAccusationInvalidTransactionConsumptionFacetFilterer creates a new log filterer instance of AccusationInvalidTransactionConsumptionFacet, bound to a specific deployed contract.
func NewAccusationInvalidTransactionConsumptionFacetFilterer(address common.Address, filterer bind.ContractFilterer) (*AccusationInvalidTransactionConsumptionFacetFilterer, error) {
	contract, err := bindAccusationInvalidTransactionConsumptionFacet(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AccusationInvalidTransactionConsumptionFacetFilterer{contract: contract}, nil
}

// bindAccusationInvalidTransactionConsumptionFacet binds a generic wrapper to an already deployed contract.
func bindAccusationInvalidTransactionConsumptionFacet(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AccusationInvalidTransactionConsumptionFacetABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AccusationInvalidTransactionConsumptionFacet *AccusationInvalidTransactionConsumptionFacetRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AccusationInvalidTransactionConsumptionFacet.Contract.AccusationInvalidTransactionConsumptionFacetCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AccusationInvalidTransactionConsumptionFacet *AccusationInvalidTransactionConsumptionFacetRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccusationInvalidTransactionConsumptionFacet.Contract.AccusationInvalidTransactionConsumptionFacetTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AccusationInvalidTransactionConsumptionFacet *AccusationInvalidTransactionConsumptionFacetRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AccusationInvalidTransactionConsumptionFacet.Contract.AccusationInvalidTransactionConsumptionFacetTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AccusationInvalidTransactionConsumptionFacet *AccusationInvalidTransactionConsumptionFacetCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AccusationInvalidTransactionConsumptionFacet.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AccusationInvalidTransactionConsumptionFacet *AccusationInvalidTransactionConsumptionFacetTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccusationInvalidTransactionConsumptionFacet.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AccusationInvalidTransactionConsumptionFacet *AccusationInvalidTransactionConsumptionFacetTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AccusationInvalidTransactionConsumptionFacet.Contract.contract.Transact(opts, method, params...)
}

// AccuseInvalidTransactionConsumption is a paid mutator transaction binding the contract method 0xcac6a5f0.
//
// Solidity: function AccuseInvalidTransactionConsumption(bytes _pClaims, bytes _pClaimsSig, bytes _bClaims, bytes _bClaimsSigGroup, bytes _txInPreImage, bytes[3] _proofs) returns()
func (_AccusationInvalidTransactionConsumptionFacet *AccusationInvalidTransactionConsumptionFacetTransactor) AccuseInvalidTransactionConsumption(opts *bind.TransactOpts, _pClaims []byte, _pClaimsSig []byte, _bClaims []byte, _bClaimsSigGroup []byte, _txInPreImage []byte, _proofs [3][]byte) (*types.Transaction, error) {
	return _AccusationInvalidTransactionConsumptionFacet.contract.Transact(opts, "AccuseInvalidTransactionConsumption", _pClaims, _pClaimsSig, _bClaims, _bClaimsSigGroup, _txInPreImage, _proofs)
}

// AccuseInvalidTransactionConsumption is a paid mutator transaction binding the contract method 0xcac6a5f0.
//
// Solidity: function AccuseInvalidTransactionConsumption(bytes _pClaims, bytes _pClaimsSig, bytes _bClaims, bytes _bClaimsSigGroup, bytes _txInPreImage, bytes[3] _proofs) returns()
func (_AccusationInvalidTransactionConsumptionFacet *AccusationInvalidTransactionConsumptionFacetSession) AccuseInvalidTransactionConsumption(_pClaims []byte, _pClaimsSig []byte, _bClaims []byte, _bClaimsSigGroup []byte, _txInPreImage []byte, _proofs [3][]byte) (*types.Transaction, error) {
	return _AccusationInvalidTransactionConsumptionFacet.Contract.AccuseInvalidTransactionConsumption(&_AccusationInvalidTransactionConsumptionFacet.TransactOpts, _pClaims, _pClaimsSig, _bClaims, _bClaimsSigGroup, _txInPreImage, _proofs)
}

// AccuseInvalidTransactionConsumption is a paid mutator transaction binding the contract method 0xcac6a5f0.
//
// Solidity: function AccuseInvalidTransactionConsumption(bytes _pClaims, bytes _pClaimsSig, bytes _bClaims, bytes _bClaimsSigGroup, bytes _txInPreImage, bytes[3] _proofs) returns()
func (_AccusationInvalidTransactionConsumptionFacet *AccusationInvalidTransactionConsumptionFacetTransactorSession) AccuseInvalidTransactionConsumption(_pClaims []byte, _pClaimsSig []byte, _bClaims []byte, _bClaimsSigGroup []byte, _txInPreImage []byte, _proofs [3][]byte) (*types.Transaction, error) {
	return _AccusationInvalidTransactionConsumptionFacet.Contract.AccuseInvalidTransactionConsumption(&_AccusationInvalidTransactionConsumptionFacet.TransactOpts, _pClaims, _pClaimsSig, _bClaims, _bClaimsSigGroup, _txInPreImage, _proofs)
}

// AccusationInvalidTransactionConsumptionFacetInvalidTransactionConsumptionIterator is returned from FilterInvalidTransactionConsumption and is used to iterate over the raw logs and unpacked data for InvalidTransactionConsumption events raised by the AccusationInvalidTransactionConsumptionFacet contract.
type AccusationInvalidTransactionConsumptionFacetInvalidTransactionConsumptionIterator struct {
	Event *AccusationInvalidTransactionConsumptionFacetInvalidTransactionConsumption // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccusationInvalidTransactionConsumptionFacetInvalidTransactionConsumptionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccusationInvalidTransactionConsumptionFacetInvalidTransactionConsumption)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccusationInvalidTransactionConsumptionFacetInvalidTransactionConsumption)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccusationInvalidTransactionConsumptionFacetInvalidTransactionConsumptionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccusationInvalidTransactionConsumptionFacetInvalidTransactionConsumptionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccusationInvalidTransactionConsumptionFacetInvalidTransactionConsumption represents a InvalidTransactionConsumption event raised by the AccusationInvalidTransactionConsumptionFacet contract.
type AccusationInvalidTransactionConsumptionFacetInvalidTransactionConsumption struct {
	Validator common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterInvalidTransactionConsumption is a free log retrieval operation binding the contract event 0xe7d88c5a1b3de74710b2ce1551a3d3be5c537d9d526cf4cb0fbbc948f527ee8b.
//
// Solidity: event InvalidTransactionConsumption(address indexed validator)
func (_AccusationInvalidTransactionConsumptionFacet *AccusationInvalidTransactionConsumptionFacetFilterer) FilterInvalidTransactionConsumption(opts *bind.FilterOpts, validator []common.Address) (*AccusationInvalidTransactionConsumptionFacetInvalidTransactionConsumptionIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _AccusationInvalidTransactionConsumptionFacet.contract.FilterLogs(opts, "InvalidTransactionConsumption", validatorRule)
	if err != nil {
		return nil, err
	}
	return &AccusationInvalidTransactionConsumptionFacetInvalidTransactionConsumptionIterator{contract: _AccusationInvalidTransactionConsumptionFacet.contract, event: "InvalidTransactionConsumption", logs: logs, sub: sub}, nil
}

// WatchInvalidTransactionConsumption is a free log subscription operation binding the contract event 0xe7d88c5a1b3de74710b2ce1551a3d3be5c537d9d526cf4cb0fbbc948f527ee8b.
//
// Solidity: event InvalidTransactionConsumption(address indexed validator)
func (_AccusationInvalidTransactionConsumptionFacet *AccusationInvalidTransactionConsumptionFacetFilterer) WatchInvalidTransactionConsumption(opts *bind.WatchOpts, sink chan<- *AccusationInvalidTransactionConsumptionFacetInvalidTransactionConsumption, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _AccusationInvalidTransactionConsumptionFacet.contract.WatchLogs(opts, "InvalidTransactionConsumption", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccusationInvalidTransactionConsumptionFacetInvalidTransactionConsumption)
				if err := _AccusationInvalidTransactionConsumptionFacet.contract.UnpackLog(event, "InvalidTransactionConsumption", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInvalidTransactionConsumption is a log parse operation binding the contract event 0xe7d88c5a1b3de74710b2ce1551a3d3be5c537d9d526cf4cb0fbbc948f527ee8b.
//
// Solidity: event InvalidTransactionConsumption(address indexed validator)
func (_AccusationInvalidTransactionConsumptionFacet *AccusationInvalidTransactionConsumptionFacetFilterer) ParseInvalidTransactionConsumption(log types.Log) (*AccusationInvalidTransactionConsumptionFacetInvalidTransactionConsumption, error) {
	event := new(AccusationInvalidTransactionConsumptionFacetInvalidTransactionConsumption)
	if err := _AccusationInvalidTransactionConsumptionFacet.contract.UnpackLog(event, "InvalidTransactionConsumption", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AccusationInvalidTransactionConsumptionFacetMultipleProposalsIterator is returned from FilterMultipleProposals and is used to iterate over the raw logs and unpacked data for MultipleProposals events raised by the AccusationInvalidTransactionConsumptionFacet contract.
type AccusationInvalidTransactionConsumptionFacetMultipleProposalsIterator struct {
	Event *AccusationInvalidTransactionConsumptionFacetMultipleProposals // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccusationInvalidTransactionConsumptionFacetMultipleProposalsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccusationInvalidTransactionConsumptionFacetMultipleProposals)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccusationInvalidTransactionConsumptionFacetMultipleProposals)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccusationInvalidTransactionConsumptionFacetMultipleProposalsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccusationInvalidTransactionConsumptionFacetMultipleProposalsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccusationInvalidTransactionConsumptionFacetMultipleProposals represents a MultipleProposals event raised by the AccusationInvalidTransactionConsumptionFacet contract.
type AccusationInvalidTransactionConsumptionFacetMultipleProposals struct {
	Validator common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterMultipleProposals is a free log retrieval operation binding the contract event 0xd70587ff450b3f9f38dcd0b8de705c37a9039a6d820906da412205e9f65c4138.
//
// Solidity: event MultipleProposals(address indexed validator)
func (_AccusationInvalidTransactionConsumptionFacet *AccusationInvalidTransactionConsumptionFacetFilterer) FilterMultipleProposals(opts *bind.FilterOpts, validator []common.Address) (*AccusationInvalidTransactionConsumptionFacetMultipleProposalsIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _AccusationInvalidTransactionConsumptionFacet.contract.FilterLogs(opts, "MultipleProposals", validatorRule)
	if err != nil {
		return nil, err
	}
	return &AccusationInvalidTransactionConsumptionFacetMultipleProposalsIterator{contract: _AccusationInvalidTransactionConsumptionFacet.contract, event: "MultipleProposals", logs: logs, sub: sub}, nil
}

// WatchMultipleProposals is a free log subscription operation binding the contract event 0xd70587ff450b3f9f38dcd0b8de705c37a9039a6d820906da412205e9f65c4138.
//
// Solidity: event MultipleProposals(address indexed validator)
func (_AccusationInvalidTransactionConsumptionFacet *AccusationInvalidTransactionConsumptionFacetFilterer) WatchMultipleProposals(opts *bind.WatchOpts, sink chan<- *AccusationInvalidTransactionConsumptionFacetMultipleProposals, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _AccusationInvalidTransactionConsumptionFacet.contract.WatchLogs(opts, "MultipleProposals", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccusationInvalidTransactionConsumptionFacetMultipleProposals)
				if err := _AccusationInvalidTransactionConsumptionFacet.contract.UnpackLog(event, "MultipleProposals", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMultipleProposals is a log parse operation binding the contract event 0xd70587ff450b3f9f38dcd0b8de705c37a9039a6d820906da412205e9f65c4138.
//
// Solidity: event MultipleProposals(address indexed validator)
func (_AccusationInvalidTransactionConsumptionFacet *AccusationInvalidTransactionConsumptionFacetFilterer) ParseMultipleProposals(log types.Log) (*AccusationInvalidTransactionConsumptionFacetMultipleProposals, error) {
	event := new(AccusationInvalidTransactionConsumptionFacetMultipleProposals)
	if err := _AccusationInvalidTransactionConsumptionFacet.contract.UnpackLog(event, "MultipleProposals", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AccusationLibraryMetaData contains all meta data concerning the AccusationLibrary contract.
var AccusationLibraryMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c2d96b6a4138d1fa9d5f70b1144f6b1fcd7a421868b066f1bc736feaadadd3a664736f6c63430008060033",
}

// AccusationLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use AccusationLibraryMetaData.ABI instead.
var AccusationLibraryABI = AccusationLibraryMetaData.ABI

// AccusationLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AccusationLibraryMetaData.Bin instead.
var AccusationLibraryBin = AccusationLibraryMetaData.Bin

// DeployAccusationLibrary deploys a new Ethereum contract, binding an instance of AccusationLibrary to it.
func DeployAccusationLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *AccusationLibrary, error) {
	parsed, err := AccusationLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(AccusationLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &AccusationLibrary{AccusationLibraryCaller: AccusationLibraryCaller{contract: contract}, AccusationLibraryTransactor: AccusationLibraryTransactor{contract: contract}, AccusationLibraryFilterer: AccusationLibraryFilterer{contract: contract}}, nil
}

// AccusationLibrary is an auto generated Go binding around an Ethereum contract.
type AccusationLibrary struct {
	AccusationLibraryCaller     // Read-only binding to the contract
	AccusationLibraryTransactor // Write-only binding to the contract
	AccusationLibraryFilterer   // Log filterer for contract events
}

// AccusationLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type AccusationLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccusationLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AccusationLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccusationLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AccusationLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccusationLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AccusationLibrarySession struct {
	Contract     *AccusationLibrary // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// AccusationLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AccusationLibraryCallerSession struct {
	Contract *AccusationLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// AccusationLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AccusationLibraryTransactorSession struct {
	Contract     *AccusationLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// AccusationLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type AccusationLibraryRaw struct {
	Contract *AccusationLibrary // Generic contract binding to access the raw methods on
}

// AccusationLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AccusationLibraryCallerRaw struct {
	Contract *AccusationLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// AccusationLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AccusationLibraryTransactorRaw struct {
	Contract *AccusationLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAccusationLibrary creates a new instance of AccusationLibrary, bound to a specific deployed contract.
func NewAccusationLibrary(address common.Address, backend bind.ContractBackend) (*AccusationLibrary, error) {
	contract, err := bindAccusationLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &AccusationLibrary{AccusationLibraryCaller: AccusationLibraryCaller{contract: contract}, AccusationLibraryTransactor: AccusationLibraryTransactor{contract: contract}, AccusationLibraryFilterer: AccusationLibraryFilterer{contract: contract}}, nil
}

// NewAccusationLibraryCaller creates a new read-only instance of AccusationLibrary, bound to a specific deployed contract.
func NewAccusationLibraryCaller(address common.Address, caller bind.ContractCaller) (*AccusationLibraryCaller, error) {
	contract, err := bindAccusationLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AccusationLibraryCaller{contract: contract}, nil
}

// NewAccusationLibraryTransactor creates a new write-only instance of AccusationLibrary, bound to a specific deployed contract.
func NewAccusationLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*AccusationLibraryTransactor, error) {
	contract, err := bindAccusationLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AccusationLibraryTransactor{contract: contract}, nil
}

// NewAccusationLibraryFilterer creates a new log filterer instance of AccusationLibrary, bound to a specific deployed contract.
func NewAccusationLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*AccusationLibraryFilterer, error) {
	contract, err := bindAccusationLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AccusationLibraryFilterer{contract: contract}, nil
}

// bindAccusationLibrary binds a generic wrapper to an already deployed contract.
func bindAccusationLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AccusationLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AccusationLibrary *AccusationLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AccusationLibrary.Contract.AccusationLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AccusationLibrary *AccusationLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccusationLibrary.Contract.AccusationLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AccusationLibrary *AccusationLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AccusationLibrary.Contract.AccusationLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AccusationLibrary *AccusationLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AccusationLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AccusationLibrary *AccusationLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccusationLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AccusationLibrary *AccusationLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AccusationLibrary.Contract.contract.Transact(opts, method, params...)
}

// AccusationManagerMetaData contains all meta data concerning the AccusationManager contract.
var AccusationManagerMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"ConsensusBrokenBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"ContradictoryPreCommits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"ContradictoryPreVotePreCommits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"ContradictoryPreVotes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"InvalidProposer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"InvalidStateTransition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"MultiplePreVotes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"MultipleProposals\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"blockHeaderA\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"blockHeaderB\",\"type\":\"bytes\"}],\"name\":\"AccuseConsensusBrokenBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"preCommit\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"preCommitNil\",\"type\":\"bytes\"}],\"name\":\"AccuseContradictoryPreCommits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"preVote\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"preCommit\",\"type\":\"bytes\"}],\"name\":\"AccuseContradictoryPreVotePreCommits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"preVote\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"preVoteNil\",\"type\":\"bytes\"}],\"name\":\"AccuseContradictoryPreVotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"proposal\",\"type\":\"bytes\"}],\"name\":\"AccuseInvalidProposer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"bclaims\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"foo\",\"type\":\"bytes\"}],\"name\":\"AccuseInvalidStateTransition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"preVoteA\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"preVoteB\",\"type\":\"bytes\"}],\"name\":\"AccuseMultiplePreVotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"proposalA\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"proposalB\",\"type\":\"bytes\"}],\"name\":\"AccuseMultipleProposals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b5061093a806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063a23c73931161005b578063a23c7393146100fd578063c46caaf614610119578063f210ced214610135578063f6ad20ce1461015157610088565b80630ea32bec1461008d578063516b80b9146100a957806378e1f019146100c557806382533f5c146100e1575b600080fd5b6100a760048036038101906100a2919061075a565b61016d565b005b6100c360048036038101906100be91906107a7565b6101fa565b005b6100df60048036038101906100da91906107a7565b6102cf565b005b6100fb60048036038101906100f691906107a7565b6103a4565b005b610117600480360381019061011291906107a7565b610436565b005b610133600480360381019061012e91906107a7565b6104c8565b005b61014f600480360381019061014a91906107a7565b61059d565b005b61016b600480360381019061016691906107a7565b610672565b005b600082829050116101b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101aa9061086e565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff167f77f1708f5eab350545b273a6bbd5e819925e387446cb922c7ef0d25a7782769e60405160405180910390a25050565b60008484905011610240576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102379061088e565b60405180910390fd5b60008282905011610286576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027d9061088e565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff167f9348647501345b23a9b5e3bfc44a78365a6c93669054cc6f602e39e629b0835d60405160405180910390a250505050565b60008484905011610315576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161030c9061088e565b60405180910390fd5b6000828290501161035b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103529061088e565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff167fae1bdc7f2e721641da05261844dad550517708284be2eed847adb64706bdb30560405160405180910390a250505050565b818190508484905014156103ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e49061088e565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff167f83037df234739a146aec8f64e978ab3170063df7ebfc53e1d7fb750c53bc2bbe60405160405180910390a250505050565b8181905084849050141561047f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104769061088e565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff167f9be6f9fc82afc51051c1d95446f326431da376c54af2bcd3d9eb4117f41c82c360405160405180910390a250505050565b6000848490501161050e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105059061088e565b60405180910390fd5b60008282905011610554576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054b9061088e565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff167f7544322a8cfb3d0c5e657c3895677c1b7dc3e68d9854a14d105a7e37ea5d3dd260405160405180910390a250505050565b600084849050116105e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105da9061088e565b60405180910390fd5b60008282905011610629576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106209061088e565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff167f4ca23d8bc99c010b758a0665fe07e62a6abd7daead3aaa3fefb4f182ace0f0a460405160405180910390a250505050565b818190508484905014156106bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b29061088e565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff167fd70587ff450b3f9f38dcd0b8de705c37a9039a6d820906da412205e9f65c413860405160405180910390a250505050565b60008083601f84011261071a576107196108c4565b5b8235905067ffffffffffffffff811115610737576107366108bf565b5b602083019150836001820283011115610753576107526108c9565b5b9250929050565b60008060208385031215610771576107706108d3565b5b600083013567ffffffffffffffff81111561078f5761078e6108ce565b5b61079b85828601610704565b92509250509250929050565b600080600080604085870312156107c1576107c06108d3565b5b600085013567ffffffffffffffff8111156107df576107de6108ce565b5b6107eb87828801610704565b9450945050602085013567ffffffffffffffff81111561080e5761080d6108ce565b5b61081a87828801610704565b925092505092959194509250565b6000610835600e836108ae565b9150610840826108d8565b602082019050919050565b60006108586000836108ae565b915061086382610901565b600082019050919050565b6000602082019050818103600083015261088781610828565b9050919050565b600060208201905081810360008301526108a78161084b565b9050919050565b600082825260208201905092915050565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b7f456d7074792070726f706f73616c000000000000000000000000000000000000600082015250565b5056fea2646970667358221220c3d942220fddbd06331aa58ab0f201892e326610bdacda6607f8dc2afb7df71f64736f6c63430008060033",
}

// AccusationManagerABI is the input ABI used to generate the binding from.
// Deprecated: Use AccusationManagerMetaData.ABI instead.
var AccusationManagerABI = AccusationManagerMetaData.ABI

// AccusationManagerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AccusationManagerMetaData.Bin instead.
var AccusationManagerBin = AccusationManagerMetaData.Bin

// DeployAccusationManager deploys a new Ethereum contract, binding an instance of AccusationManager to it.
func DeployAccusationManager(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *AccusationManager, error) {
	parsed, err := AccusationManagerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(AccusationManagerBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &AccusationManager{AccusationManagerCaller: AccusationManagerCaller{contract: contract}, AccusationManagerTransactor: AccusationManagerTransactor{contract: contract}, AccusationManagerFilterer: AccusationManagerFilterer{contract: contract}}, nil
}

// AccusationManager is an auto generated Go binding around an Ethereum contract.
type AccusationManager struct {
	AccusationManagerCaller     // Read-only binding to the contract
	AccusationManagerTransactor // Write-only binding to the contract
	AccusationManagerFilterer   // Log filterer for contract events
}

// AccusationManagerCaller is an auto generated read-only Go binding around an Ethereum contract.
type AccusationManagerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccusationManagerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AccusationManagerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccusationManagerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AccusationManagerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccusationManagerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AccusationManagerSession struct {
	Contract     *AccusationManager // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// AccusationManagerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AccusationManagerCallerSession struct {
	Contract *AccusationManagerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// AccusationManagerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AccusationManagerTransactorSession struct {
	Contract     *AccusationManagerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// AccusationManagerRaw is an auto generated low-level Go binding around an Ethereum contract.
type AccusationManagerRaw struct {
	Contract *AccusationManager // Generic contract binding to access the raw methods on
}

// AccusationManagerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AccusationManagerCallerRaw struct {
	Contract *AccusationManagerCaller // Generic read-only contract binding to access the raw methods on
}

// AccusationManagerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AccusationManagerTransactorRaw struct {
	Contract *AccusationManagerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAccusationManager creates a new instance of AccusationManager, bound to a specific deployed contract.
func NewAccusationManager(address common.Address, backend bind.ContractBackend) (*AccusationManager, error) {
	contract, err := bindAccusationManager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &AccusationManager{AccusationManagerCaller: AccusationManagerCaller{contract: contract}, AccusationManagerTransactor: AccusationManagerTransactor{contract: contract}, AccusationManagerFilterer: AccusationManagerFilterer{contract: contract}}, nil
}

// NewAccusationManagerCaller creates a new read-only instance of AccusationManager, bound to a specific deployed contract.
func NewAccusationManagerCaller(address common.Address, caller bind.ContractCaller) (*AccusationManagerCaller, error) {
	contract, err := bindAccusationManager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AccusationManagerCaller{contract: contract}, nil
}

// NewAccusationManagerTransactor creates a new write-only instance of AccusationManager, bound to a specific deployed contract.
func NewAccusationManagerTransactor(address common.Address, transactor bind.ContractTransactor) (*AccusationManagerTransactor, error) {
	contract, err := bindAccusationManager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AccusationManagerTransactor{contract: contract}, nil
}

// NewAccusationManagerFilterer creates a new log filterer instance of AccusationManager, bound to a specific deployed contract.
func NewAccusationManagerFilterer(address common.Address, filterer bind.ContractFilterer) (*AccusationManagerFilterer, error) {
	contract, err := bindAccusationManager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AccusationManagerFilterer{contract: contract}, nil
}

// bindAccusationManager binds a generic wrapper to an already deployed contract.
func bindAccusationManager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AccusationManagerABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AccusationManager *AccusationManagerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AccusationManager.Contract.AccusationManagerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AccusationManager *AccusationManagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccusationManager.Contract.AccusationManagerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AccusationManager *AccusationManagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AccusationManager.Contract.AccusationManagerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AccusationManager *AccusationManagerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AccusationManager.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AccusationManager *AccusationManagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccusationManager.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AccusationManager *AccusationManagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AccusationManager.Contract.contract.Transact(opts, method, params...)
}

// AccuseConsensusBrokenBlock is a paid mutator transaction binding the contract method 0x82533f5c.
//
// Solidity: function AccuseConsensusBrokenBlock(bytes blockHeaderA, bytes blockHeaderB) returns()
func (_AccusationManager *AccusationManagerTransactor) AccuseConsensusBrokenBlock(opts *bind.TransactOpts, blockHeaderA []byte, blockHeaderB []byte) (*types.Transaction, error) {
	return _AccusationManager.contract.Transact(opts, "AccuseConsensusBrokenBlock", blockHeaderA, blockHeaderB)
}

// AccuseConsensusBrokenBlock is a paid mutator transaction binding the contract method 0x82533f5c.
//
// Solidity: function AccuseConsensusBrokenBlock(bytes blockHeaderA, bytes blockHeaderB) returns()
func (_AccusationManager *AccusationManagerSession) AccuseConsensusBrokenBlock(blockHeaderA []byte, blockHeaderB []byte) (*types.Transaction, error) {
	return _AccusationManager.Contract.AccuseConsensusBrokenBlock(&_AccusationManager.TransactOpts, blockHeaderA, blockHeaderB)
}

// AccuseConsensusBrokenBlock is a paid mutator transaction binding the contract method 0x82533f5c.
//
// Solidity: function AccuseConsensusBrokenBlock(bytes blockHeaderA, bytes blockHeaderB) returns()
func (_AccusationManager *AccusationManagerTransactorSession) AccuseConsensusBrokenBlock(blockHeaderA []byte, blockHeaderB []byte) (*types.Transaction, error) {
	return _AccusationManager.Contract.AccuseConsensusBrokenBlock(&_AccusationManager.TransactOpts, blockHeaderA, blockHeaderB)
}

// AccuseContradictoryPreCommits is a paid mutator transaction binding the contract method 0x516b80b9.
//
// Solidity: function AccuseContradictoryPreCommits(bytes preCommit, bytes preCommitNil) returns()
func (_AccusationManager *AccusationManagerTransactor) AccuseContradictoryPreCommits(opts *bind.TransactOpts, preCommit []byte, preCommitNil []byte) (*types.Transaction, error) {
	return _AccusationManager.contract.Transact(opts, "AccuseContradictoryPreCommits", preCommit, preCommitNil)
}

// AccuseContradictoryPreCommits is a paid mutator transaction binding the contract method 0x516b80b9.
//
// Solidity: function AccuseContradictoryPreCommits(bytes preCommit, bytes preCommitNil) returns()
func (_AccusationManager *AccusationManagerSession) AccuseContradictoryPreCommits(preCommit []byte, preCommitNil []byte) (*types.Transaction, error) {
	return _AccusationManager.Contract.AccuseContradictoryPreCommits(&_AccusationManager.TransactOpts, preCommit, preCommitNil)
}

// AccuseContradictoryPreCommits is a paid mutator transaction binding the contract method 0x516b80b9.
//
// Solidity: function AccuseContradictoryPreCommits(bytes preCommit, bytes preCommitNil) returns()
func (_AccusationManager *AccusationManagerTransactorSession) AccuseContradictoryPreCommits(preCommit []byte, preCommitNil []byte) (*types.Transaction, error) {
	return _AccusationManager.Contract.AccuseContradictoryPreCommits(&_AccusationManager.TransactOpts, preCommit, preCommitNil)
}

// AccuseContradictoryPreVotePreCommits is a paid mutator transaction binding the contract method 0xf210ced2.
//
// Solidity: function AccuseContradictoryPreVotePreCommits(bytes preVote, bytes preCommit) returns()
func (_AccusationManager *AccusationManagerTransactor) AccuseContradictoryPreVotePreCommits(opts *bind.TransactOpts, preVote []byte, preCommit []byte) (*types.Transaction, error) {
	return _AccusationManager.contract.Transact(opts, "AccuseContradictoryPreVotePreCommits", preVote, preCommit)
}

// AccuseContradictoryPreVotePreCommits is a paid mutator transaction binding the contract method 0xf210ced2.
//
// Solidity: function AccuseContradictoryPreVotePreCommits(bytes preVote, bytes preCommit) returns()
func (_AccusationManager *AccusationManagerSession) AccuseContradictoryPreVotePreCommits(preVote []byte, preCommit []byte) (*types.Transaction, error) {
	return _AccusationManager.Contract.AccuseContradictoryPreVotePreCommits(&_AccusationManager.TransactOpts, preVote, preCommit)
}

// AccuseContradictoryPreVotePreCommits is a paid mutator transaction binding the contract method 0xf210ced2.
//
// Solidity: function AccuseContradictoryPreVotePreCommits(bytes preVote, bytes preCommit) returns()
func (_AccusationManager *AccusationManagerTransactorSession) AccuseContradictoryPreVotePreCommits(preVote []byte, preCommit []byte) (*types.Transaction, error) {
	return _AccusationManager.Contract.AccuseContradictoryPreVotePreCommits(&_AccusationManager.TransactOpts, preVote, preCommit)
}

// AccuseContradictoryPreVotes is a paid mutator transaction binding the contract method 0x78e1f019.
//
// Solidity: function AccuseContradictoryPreVotes(bytes preVote, bytes preVoteNil) returns()
func (_AccusationManager *AccusationManagerTransactor) AccuseContradictoryPreVotes(opts *bind.TransactOpts, preVote []byte, preVoteNil []byte) (*types.Transaction, error) {
	return _AccusationManager.contract.Transact(opts, "AccuseContradictoryPreVotes", preVote, preVoteNil)
}

// AccuseContradictoryPreVotes is a paid mutator transaction binding the contract method 0x78e1f019.
//
// Solidity: function AccuseContradictoryPreVotes(bytes preVote, bytes preVoteNil) returns()
func (_AccusationManager *AccusationManagerSession) AccuseContradictoryPreVotes(preVote []byte, preVoteNil []byte) (*types.Transaction, error) {
	return _AccusationManager.Contract.AccuseContradictoryPreVotes(&_AccusationManager.TransactOpts, preVote, preVoteNil)
}

// AccuseContradictoryPreVotes is a paid mutator transaction binding the contract method 0x78e1f019.
//
// Solidity: function AccuseContradictoryPreVotes(bytes preVote, bytes preVoteNil) returns()
func (_AccusationManager *AccusationManagerTransactorSession) AccuseContradictoryPreVotes(preVote []byte, preVoteNil []byte) (*types.Transaction, error) {
	return _AccusationManager.Contract.AccuseContradictoryPreVotes(&_AccusationManager.TransactOpts, preVote, preVoteNil)
}

// AccuseInvalidProposer is a paid mutator transaction binding the contract method 0x0ea32bec.
//
// Solidity: function AccuseInvalidProposer(bytes proposal) returns()
func (_AccusationManager *AccusationManagerTransactor) AccuseInvalidProposer(opts *bind.TransactOpts, proposal []byte) (*types.Transaction, error) {
	return _AccusationManager.contract.Transact(opts, "AccuseInvalidProposer", proposal)
}

// AccuseInvalidProposer is a paid mutator transaction binding the contract method 0x0ea32bec.
//
// Solidity: function AccuseInvalidProposer(bytes proposal) returns()
func (_AccusationManager *AccusationManagerSession) AccuseInvalidProposer(proposal []byte) (*types.Transaction, error) {
	return _AccusationManager.Contract.AccuseInvalidProposer(&_AccusationManager.TransactOpts, proposal)
}

// AccuseInvalidProposer is a paid mutator transaction binding the contract method 0x0ea32bec.
//
// Solidity: function AccuseInvalidProposer(bytes proposal) returns()
func (_AccusationManager *AccusationManagerTransactorSession) AccuseInvalidProposer(proposal []byte) (*types.Transaction, error) {
	return _AccusationManager.Contract.AccuseInvalidProposer(&_AccusationManager.TransactOpts, proposal)
}

// AccuseInvalidStateTransition is a paid mutator transaction binding the contract method 0xc46caaf6.
//
// Solidity: function AccuseInvalidStateTransition(bytes bclaims, bytes foo) returns()
func (_AccusationManager *AccusationManagerTransactor) AccuseInvalidStateTransition(opts *bind.TransactOpts, bclaims []byte, foo []byte) (*types.Transaction, error) {
	return _AccusationManager.contract.Transact(opts, "AccuseInvalidStateTransition", bclaims, foo)
}

// AccuseInvalidStateTransition is a paid mutator transaction binding the contract method 0xc46caaf6.
//
// Solidity: function AccuseInvalidStateTransition(bytes bclaims, bytes foo) returns()
func (_AccusationManager *AccusationManagerSession) AccuseInvalidStateTransition(bclaims []byte, foo []byte) (*types.Transaction, error) {
	return _AccusationManager.Contract.AccuseInvalidStateTransition(&_AccusationManager.TransactOpts, bclaims, foo)
}

// AccuseInvalidStateTransition is a paid mutator transaction binding the contract method 0xc46caaf6.
//
// Solidity: function AccuseInvalidStateTransition(bytes bclaims, bytes foo) returns()
func (_AccusationManager *AccusationManagerTransactorSession) AccuseInvalidStateTransition(bclaims []byte, foo []byte) (*types.Transaction, error) {
	return _AccusationManager.Contract.AccuseInvalidStateTransition(&_AccusationManager.TransactOpts, bclaims, foo)
}

// AccuseMultiplePreVotes is a paid mutator transaction binding the contract method 0xa23c7393.
//
// Solidity: function AccuseMultiplePreVotes(bytes preVoteA, bytes preVoteB) returns()
func (_AccusationManager *AccusationManagerTransactor) AccuseMultiplePreVotes(opts *bind.TransactOpts, preVoteA []byte, preVoteB []byte) (*types.Transaction, error) {
	return _AccusationManager.contract.Transact(opts, "AccuseMultiplePreVotes", preVoteA, preVoteB)
}

// AccuseMultiplePreVotes is a paid mutator transaction binding the contract method 0xa23c7393.
//
// Solidity: function AccuseMultiplePreVotes(bytes preVoteA, bytes preVoteB) returns()
func (_AccusationManager *AccusationManagerSession) AccuseMultiplePreVotes(preVoteA []byte, preVoteB []byte) (*types.Transaction, error) {
	return _AccusationManager.Contract.AccuseMultiplePreVotes(&_AccusationManager.TransactOpts, preVoteA, preVoteB)
}

// AccuseMultiplePreVotes is a paid mutator transaction binding the contract method 0xa23c7393.
//
// Solidity: function AccuseMultiplePreVotes(bytes preVoteA, bytes preVoteB) returns()
func (_AccusationManager *AccusationManagerTransactorSession) AccuseMultiplePreVotes(preVoteA []byte, preVoteB []byte) (*types.Transaction, error) {
	return _AccusationManager.Contract.AccuseMultiplePreVotes(&_AccusationManager.TransactOpts, preVoteA, preVoteB)
}

// AccuseMultipleProposals is a paid mutator transaction binding the contract method 0xf6ad20ce.
//
// Solidity: function AccuseMultipleProposals(bytes proposalA, bytes proposalB) returns()
func (_AccusationManager *AccusationManagerTransactor) AccuseMultipleProposals(opts *bind.TransactOpts, proposalA []byte, proposalB []byte) (*types.Transaction, error) {
	return _AccusationManager.contract.Transact(opts, "AccuseMultipleProposals", proposalA, proposalB)
}

// AccuseMultipleProposals is a paid mutator transaction binding the contract method 0xf6ad20ce.
//
// Solidity: function AccuseMultipleProposals(bytes proposalA, bytes proposalB) returns()
func (_AccusationManager *AccusationManagerSession) AccuseMultipleProposals(proposalA []byte, proposalB []byte) (*types.Transaction, error) {
	return _AccusationManager.Contract.AccuseMultipleProposals(&_AccusationManager.TransactOpts, proposalA, proposalB)
}

// AccuseMultipleProposals is a paid mutator transaction binding the contract method 0xf6ad20ce.
//
// Solidity: function AccuseMultipleProposals(bytes proposalA, bytes proposalB) returns()
func (_AccusationManager *AccusationManagerTransactorSession) AccuseMultipleProposals(proposalA []byte, proposalB []byte) (*types.Transaction, error) {
	return _AccusationManager.Contract.AccuseMultipleProposals(&_AccusationManager.TransactOpts, proposalA, proposalB)
}

// AccusationManagerConsensusBrokenBlockIterator is returned from FilterConsensusBrokenBlock and is used to iterate over the raw logs and unpacked data for ConsensusBrokenBlock events raised by the AccusationManager contract.
type AccusationManagerConsensusBrokenBlockIterator struct {
	Event *AccusationManagerConsensusBrokenBlock // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccusationManagerConsensusBrokenBlockIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccusationManagerConsensusBrokenBlock)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccusationManagerConsensusBrokenBlock)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccusationManagerConsensusBrokenBlockIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccusationManagerConsensusBrokenBlockIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccusationManagerConsensusBrokenBlock represents a ConsensusBrokenBlock event raised by the AccusationManager contract.
type AccusationManagerConsensusBrokenBlock struct {
	Validator common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterConsensusBrokenBlock is a free log retrieval operation binding the contract event 0x83037df234739a146aec8f64e978ab3170063df7ebfc53e1d7fb750c53bc2bbe.
//
// Solidity: event ConsensusBrokenBlock(address indexed validator)
func (_AccusationManager *AccusationManagerFilterer) FilterConsensusBrokenBlock(opts *bind.FilterOpts, validator []common.Address) (*AccusationManagerConsensusBrokenBlockIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _AccusationManager.contract.FilterLogs(opts, "ConsensusBrokenBlock", validatorRule)
	if err != nil {
		return nil, err
	}
	return &AccusationManagerConsensusBrokenBlockIterator{contract: _AccusationManager.contract, event: "ConsensusBrokenBlock", logs: logs, sub: sub}, nil
}

// WatchConsensusBrokenBlock is a free log subscription operation binding the contract event 0x83037df234739a146aec8f64e978ab3170063df7ebfc53e1d7fb750c53bc2bbe.
//
// Solidity: event ConsensusBrokenBlock(address indexed validator)
func (_AccusationManager *AccusationManagerFilterer) WatchConsensusBrokenBlock(opts *bind.WatchOpts, sink chan<- *AccusationManagerConsensusBrokenBlock, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _AccusationManager.contract.WatchLogs(opts, "ConsensusBrokenBlock", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccusationManagerConsensusBrokenBlock)
				if err := _AccusationManager.contract.UnpackLog(event, "ConsensusBrokenBlock", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseConsensusBrokenBlock is a log parse operation binding the contract event 0x83037df234739a146aec8f64e978ab3170063df7ebfc53e1d7fb750c53bc2bbe.
//
// Solidity: event ConsensusBrokenBlock(address indexed validator)
func (_AccusationManager *AccusationManagerFilterer) ParseConsensusBrokenBlock(log types.Log) (*AccusationManagerConsensusBrokenBlock, error) {
	event := new(AccusationManagerConsensusBrokenBlock)
	if err := _AccusationManager.contract.UnpackLog(event, "ConsensusBrokenBlock", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AccusationManagerContradictoryPreCommitsIterator is returned from FilterContradictoryPreCommits and is used to iterate over the raw logs and unpacked data for ContradictoryPreCommits events raised by the AccusationManager contract.
type AccusationManagerContradictoryPreCommitsIterator struct {
	Event *AccusationManagerContradictoryPreCommits // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccusationManagerContradictoryPreCommitsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccusationManagerContradictoryPreCommits)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccusationManagerContradictoryPreCommits)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccusationManagerContradictoryPreCommitsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccusationManagerContradictoryPreCommitsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccusationManagerContradictoryPreCommits represents a ContradictoryPreCommits event raised by the AccusationManager contract.
type AccusationManagerContradictoryPreCommits struct {
	Validator common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterContradictoryPreCommits is a free log retrieval operation binding the contract event 0x9348647501345b23a9b5e3bfc44a78365a6c93669054cc6f602e39e629b0835d.
//
// Solidity: event ContradictoryPreCommits(address indexed validator)
func (_AccusationManager *AccusationManagerFilterer) FilterContradictoryPreCommits(opts *bind.FilterOpts, validator []common.Address) (*AccusationManagerContradictoryPreCommitsIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _AccusationManager.contract.FilterLogs(opts, "ContradictoryPreCommits", validatorRule)
	if err != nil {
		return nil, err
	}
	return &AccusationManagerContradictoryPreCommitsIterator{contract: _AccusationManager.contract, event: "ContradictoryPreCommits", logs: logs, sub: sub}, nil
}

// WatchContradictoryPreCommits is a free log subscription operation binding the contract event 0x9348647501345b23a9b5e3bfc44a78365a6c93669054cc6f602e39e629b0835d.
//
// Solidity: event ContradictoryPreCommits(address indexed validator)
func (_AccusationManager *AccusationManagerFilterer) WatchContradictoryPreCommits(opts *bind.WatchOpts, sink chan<- *AccusationManagerContradictoryPreCommits, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _AccusationManager.contract.WatchLogs(opts, "ContradictoryPreCommits", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccusationManagerContradictoryPreCommits)
				if err := _AccusationManager.contract.UnpackLog(event, "ContradictoryPreCommits", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContradictoryPreCommits is a log parse operation binding the contract event 0x9348647501345b23a9b5e3bfc44a78365a6c93669054cc6f602e39e629b0835d.
//
// Solidity: event ContradictoryPreCommits(address indexed validator)
func (_AccusationManager *AccusationManagerFilterer) ParseContradictoryPreCommits(log types.Log) (*AccusationManagerContradictoryPreCommits, error) {
	event := new(AccusationManagerContradictoryPreCommits)
	if err := _AccusationManager.contract.UnpackLog(event, "ContradictoryPreCommits", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AccusationManagerContradictoryPreVotePreCommitsIterator is returned from FilterContradictoryPreVotePreCommits and is used to iterate over the raw logs and unpacked data for ContradictoryPreVotePreCommits events raised by the AccusationManager contract.
type AccusationManagerContradictoryPreVotePreCommitsIterator struct {
	Event *AccusationManagerContradictoryPreVotePreCommits // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccusationManagerContradictoryPreVotePreCommitsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccusationManagerContradictoryPreVotePreCommits)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccusationManagerContradictoryPreVotePreCommits)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccusationManagerContradictoryPreVotePreCommitsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccusationManagerContradictoryPreVotePreCommitsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccusationManagerContradictoryPreVotePreCommits represents a ContradictoryPreVotePreCommits event raised by the AccusationManager contract.
type AccusationManagerContradictoryPreVotePreCommits struct {
	Validator common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterContradictoryPreVotePreCommits is a free log retrieval operation binding the contract event 0x4ca23d8bc99c010b758a0665fe07e62a6abd7daead3aaa3fefb4f182ace0f0a4.
//
// Solidity: event ContradictoryPreVotePreCommits(address indexed validator)
func (_AccusationManager *AccusationManagerFilterer) FilterContradictoryPreVotePreCommits(opts *bind.FilterOpts, validator []common.Address) (*AccusationManagerContradictoryPreVotePreCommitsIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _AccusationManager.contract.FilterLogs(opts, "ContradictoryPreVotePreCommits", validatorRule)
	if err != nil {
		return nil, err
	}
	return &AccusationManagerContradictoryPreVotePreCommitsIterator{contract: _AccusationManager.contract, event: "ContradictoryPreVotePreCommits", logs: logs, sub: sub}, nil
}

// WatchContradictoryPreVotePreCommits is a free log subscription operation binding the contract event 0x4ca23d8bc99c010b758a0665fe07e62a6abd7daead3aaa3fefb4f182ace0f0a4.
//
// Solidity: event ContradictoryPreVotePreCommits(address indexed validator)
func (_AccusationManager *AccusationManagerFilterer) WatchContradictoryPreVotePreCommits(opts *bind.WatchOpts, sink chan<- *AccusationManagerContradictoryPreVotePreCommits, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _AccusationManager.contract.WatchLogs(opts, "ContradictoryPreVotePreCommits", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccusationManagerContradictoryPreVotePreCommits)
				if err := _AccusationManager.contract.UnpackLog(event, "ContradictoryPreVotePreCommits", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContradictoryPreVotePreCommits is a log parse operation binding the contract event 0x4ca23d8bc99c010b758a0665fe07e62a6abd7daead3aaa3fefb4f182ace0f0a4.
//
// Solidity: event ContradictoryPreVotePreCommits(address indexed validator)
func (_AccusationManager *AccusationManagerFilterer) ParseContradictoryPreVotePreCommits(log types.Log) (*AccusationManagerContradictoryPreVotePreCommits, error) {
	event := new(AccusationManagerContradictoryPreVotePreCommits)
	if err := _AccusationManager.contract.UnpackLog(event, "ContradictoryPreVotePreCommits", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AccusationManagerContradictoryPreVotesIterator is returned from FilterContradictoryPreVotes and is used to iterate over the raw logs and unpacked data for ContradictoryPreVotes events raised by the AccusationManager contract.
type AccusationManagerContradictoryPreVotesIterator struct {
	Event *AccusationManagerContradictoryPreVotes // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccusationManagerContradictoryPreVotesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccusationManagerContradictoryPreVotes)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccusationManagerContradictoryPreVotes)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccusationManagerContradictoryPreVotesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccusationManagerContradictoryPreVotesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccusationManagerContradictoryPreVotes represents a ContradictoryPreVotes event raised by the AccusationManager contract.
type AccusationManagerContradictoryPreVotes struct {
	Validator common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterContradictoryPreVotes is a free log retrieval operation binding the contract event 0xae1bdc7f2e721641da05261844dad550517708284be2eed847adb64706bdb305.
//
// Solidity: event ContradictoryPreVotes(address indexed validator)
func (_AccusationManager *AccusationManagerFilterer) FilterContradictoryPreVotes(opts *bind.FilterOpts, validator []common.Address) (*AccusationManagerContradictoryPreVotesIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _AccusationManager.contract.FilterLogs(opts, "ContradictoryPreVotes", validatorRule)
	if err != nil {
		return nil, err
	}
	return &AccusationManagerContradictoryPreVotesIterator{contract: _AccusationManager.contract, event: "ContradictoryPreVotes", logs: logs, sub: sub}, nil
}

// WatchContradictoryPreVotes is a free log subscription operation binding the contract event 0xae1bdc7f2e721641da05261844dad550517708284be2eed847adb64706bdb305.
//
// Solidity: event ContradictoryPreVotes(address indexed validator)
func (_AccusationManager *AccusationManagerFilterer) WatchContradictoryPreVotes(opts *bind.WatchOpts, sink chan<- *AccusationManagerContradictoryPreVotes, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _AccusationManager.contract.WatchLogs(opts, "ContradictoryPreVotes", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccusationManagerContradictoryPreVotes)
				if err := _AccusationManager.contract.UnpackLog(event, "ContradictoryPreVotes", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContradictoryPreVotes is a log parse operation binding the contract event 0xae1bdc7f2e721641da05261844dad550517708284be2eed847adb64706bdb305.
//
// Solidity: event ContradictoryPreVotes(address indexed validator)
func (_AccusationManager *AccusationManagerFilterer) ParseContradictoryPreVotes(log types.Log) (*AccusationManagerContradictoryPreVotes, error) {
	event := new(AccusationManagerContradictoryPreVotes)
	if err := _AccusationManager.contract.UnpackLog(event, "ContradictoryPreVotes", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AccusationManagerInvalidProposerIterator is returned from FilterInvalidProposer and is used to iterate over the raw logs and unpacked data for InvalidProposer events raised by the AccusationManager contract.
type AccusationManagerInvalidProposerIterator struct {
	Event *AccusationManagerInvalidProposer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccusationManagerInvalidProposerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccusationManagerInvalidProposer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccusationManagerInvalidProposer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccusationManagerInvalidProposerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccusationManagerInvalidProposerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccusationManagerInvalidProposer represents a InvalidProposer event raised by the AccusationManager contract.
type AccusationManagerInvalidProposer struct {
	Validator common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterInvalidProposer is a free log retrieval operation binding the contract event 0x77f1708f5eab350545b273a6bbd5e819925e387446cb922c7ef0d25a7782769e.
//
// Solidity: event InvalidProposer(address indexed validator)
func (_AccusationManager *AccusationManagerFilterer) FilterInvalidProposer(opts *bind.FilterOpts, validator []common.Address) (*AccusationManagerInvalidProposerIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _AccusationManager.contract.FilterLogs(opts, "InvalidProposer", validatorRule)
	if err != nil {
		return nil, err
	}
	return &AccusationManagerInvalidProposerIterator{contract: _AccusationManager.contract, event: "InvalidProposer", logs: logs, sub: sub}, nil
}

// WatchInvalidProposer is a free log subscription operation binding the contract event 0x77f1708f5eab350545b273a6bbd5e819925e387446cb922c7ef0d25a7782769e.
//
// Solidity: event InvalidProposer(address indexed validator)
func (_AccusationManager *AccusationManagerFilterer) WatchInvalidProposer(opts *bind.WatchOpts, sink chan<- *AccusationManagerInvalidProposer, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _AccusationManager.contract.WatchLogs(opts, "InvalidProposer", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccusationManagerInvalidProposer)
				if err := _AccusationManager.contract.UnpackLog(event, "InvalidProposer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInvalidProposer is a log parse operation binding the contract event 0x77f1708f5eab350545b273a6bbd5e819925e387446cb922c7ef0d25a7782769e.
//
// Solidity: event InvalidProposer(address indexed validator)
func (_AccusationManager *AccusationManagerFilterer) ParseInvalidProposer(log types.Log) (*AccusationManagerInvalidProposer, error) {
	event := new(AccusationManagerInvalidProposer)
	if err := _AccusationManager.contract.UnpackLog(event, "InvalidProposer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AccusationManagerInvalidStateTransitionIterator is returned from FilterInvalidStateTransition and is used to iterate over the raw logs and unpacked data for InvalidStateTransition events raised by the AccusationManager contract.
type AccusationManagerInvalidStateTransitionIterator struct {
	Event *AccusationManagerInvalidStateTransition // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccusationManagerInvalidStateTransitionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccusationManagerInvalidStateTransition)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccusationManagerInvalidStateTransition)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccusationManagerInvalidStateTransitionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccusationManagerInvalidStateTransitionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccusationManagerInvalidStateTransition represents a InvalidStateTransition event raised by the AccusationManager contract.
type AccusationManagerInvalidStateTransition struct {
	Validator common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterInvalidStateTransition is a free log retrieval operation binding the contract event 0x7544322a8cfb3d0c5e657c3895677c1b7dc3e68d9854a14d105a7e37ea5d3dd2.
//
// Solidity: event InvalidStateTransition(address indexed validator)
func (_AccusationManager *AccusationManagerFilterer) FilterInvalidStateTransition(opts *bind.FilterOpts, validator []common.Address) (*AccusationManagerInvalidStateTransitionIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _AccusationManager.contract.FilterLogs(opts, "InvalidStateTransition", validatorRule)
	if err != nil {
		return nil, err
	}
	return &AccusationManagerInvalidStateTransitionIterator{contract: _AccusationManager.contract, event: "InvalidStateTransition", logs: logs, sub: sub}, nil
}

// WatchInvalidStateTransition is a free log subscription operation binding the contract event 0x7544322a8cfb3d0c5e657c3895677c1b7dc3e68d9854a14d105a7e37ea5d3dd2.
//
// Solidity: event InvalidStateTransition(address indexed validator)
func (_AccusationManager *AccusationManagerFilterer) WatchInvalidStateTransition(opts *bind.WatchOpts, sink chan<- *AccusationManagerInvalidStateTransition, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _AccusationManager.contract.WatchLogs(opts, "InvalidStateTransition", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccusationManagerInvalidStateTransition)
				if err := _AccusationManager.contract.UnpackLog(event, "InvalidStateTransition", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInvalidStateTransition is a log parse operation binding the contract event 0x7544322a8cfb3d0c5e657c3895677c1b7dc3e68d9854a14d105a7e37ea5d3dd2.
//
// Solidity: event InvalidStateTransition(address indexed validator)
func (_AccusationManager *AccusationManagerFilterer) ParseInvalidStateTransition(log types.Log) (*AccusationManagerInvalidStateTransition, error) {
	event := new(AccusationManagerInvalidStateTransition)
	if err := _AccusationManager.contract.UnpackLog(event, "InvalidStateTransition", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AccusationManagerMultiplePreVotesIterator is returned from FilterMultiplePreVotes and is used to iterate over the raw logs and unpacked data for MultiplePreVotes events raised by the AccusationManager contract.
type AccusationManagerMultiplePreVotesIterator struct {
	Event *AccusationManagerMultiplePreVotes // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccusationManagerMultiplePreVotesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccusationManagerMultiplePreVotes)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccusationManagerMultiplePreVotes)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccusationManagerMultiplePreVotesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccusationManagerMultiplePreVotesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccusationManagerMultiplePreVotes represents a MultiplePreVotes event raised by the AccusationManager contract.
type AccusationManagerMultiplePreVotes struct {
	Validator common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterMultiplePreVotes is a free log retrieval operation binding the contract event 0x9be6f9fc82afc51051c1d95446f326431da376c54af2bcd3d9eb4117f41c82c3.
//
// Solidity: event MultiplePreVotes(address indexed validator)
func (_AccusationManager *AccusationManagerFilterer) FilterMultiplePreVotes(opts *bind.FilterOpts, validator []common.Address) (*AccusationManagerMultiplePreVotesIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _AccusationManager.contract.FilterLogs(opts, "MultiplePreVotes", validatorRule)
	if err != nil {
		return nil, err
	}
	return &AccusationManagerMultiplePreVotesIterator{contract: _AccusationManager.contract, event: "MultiplePreVotes", logs: logs, sub: sub}, nil
}

// WatchMultiplePreVotes is a free log subscription operation binding the contract event 0x9be6f9fc82afc51051c1d95446f326431da376c54af2bcd3d9eb4117f41c82c3.
//
// Solidity: event MultiplePreVotes(address indexed validator)
func (_AccusationManager *AccusationManagerFilterer) WatchMultiplePreVotes(opts *bind.WatchOpts, sink chan<- *AccusationManagerMultiplePreVotes, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _AccusationManager.contract.WatchLogs(opts, "MultiplePreVotes", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccusationManagerMultiplePreVotes)
				if err := _AccusationManager.contract.UnpackLog(event, "MultiplePreVotes", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMultiplePreVotes is a log parse operation binding the contract event 0x9be6f9fc82afc51051c1d95446f326431da376c54af2bcd3d9eb4117f41c82c3.
//
// Solidity: event MultiplePreVotes(address indexed validator)
func (_AccusationManager *AccusationManagerFilterer) ParseMultiplePreVotes(log types.Log) (*AccusationManagerMultiplePreVotes, error) {
	event := new(AccusationManagerMultiplePreVotes)
	if err := _AccusationManager.contract.UnpackLog(event, "MultiplePreVotes", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AccusationManagerMultipleProposalsIterator is returned from FilterMultipleProposals and is used to iterate over the raw logs and unpacked data for MultipleProposals events raised by the AccusationManager contract.
type AccusationManagerMultipleProposalsIterator struct {
	Event *AccusationManagerMultipleProposals // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccusationManagerMultipleProposalsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccusationManagerMultipleProposals)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccusationManagerMultipleProposals)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccusationManagerMultipleProposalsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccusationManagerMultipleProposalsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccusationManagerMultipleProposals represents a MultipleProposals event raised by the AccusationManager contract.
type AccusationManagerMultipleProposals struct {
	Validator common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterMultipleProposals is a free log retrieval operation binding the contract event 0xd70587ff450b3f9f38dcd0b8de705c37a9039a6d820906da412205e9f65c4138.
//
// Solidity: event MultipleProposals(address indexed validator)
func (_AccusationManager *AccusationManagerFilterer) FilterMultipleProposals(opts *bind.FilterOpts, validator []common.Address) (*AccusationManagerMultipleProposalsIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _AccusationManager.contract.FilterLogs(opts, "MultipleProposals", validatorRule)
	if err != nil {
		return nil, err
	}
	return &AccusationManagerMultipleProposalsIterator{contract: _AccusationManager.contract, event: "MultipleProposals", logs: logs, sub: sub}, nil
}

// WatchMultipleProposals is a free log subscription operation binding the contract event 0xd70587ff450b3f9f38dcd0b8de705c37a9039a6d820906da412205e9f65c4138.
//
// Solidity: event MultipleProposals(address indexed validator)
func (_AccusationManager *AccusationManagerFilterer) WatchMultipleProposals(opts *bind.WatchOpts, sink chan<- *AccusationManagerMultipleProposals, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _AccusationManager.contract.WatchLogs(opts, "MultipleProposals", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccusationManagerMultipleProposals)
				if err := _AccusationManager.contract.UnpackLog(event, "MultipleProposals", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMultipleProposals is a log parse operation binding the contract event 0xd70587ff450b3f9f38dcd0b8de705c37a9039a6d820906da412205e9f65c4138.
//
// Solidity: event MultipleProposals(address indexed validator)
func (_AccusationManager *AccusationManagerFilterer) ParseMultipleProposals(log types.Log) (*AccusationManagerMultipleProposals, error) {
	event := new(AccusationManagerMultipleProposals)
	if err := _AccusationManager.contract.UnpackLog(event, "MultipleProposals", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AccusationMultipleProposalFacetMetaData contains all meta data concerning the AccusationMultipleProposalFacet contract.
var AccusationMultipleProposalFacetMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"InvalidTransactionConsumption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"MultipleProposals\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_signature0\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_pClaims0\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_signature1\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_pClaims1\",\"type\":\"bytes\"}],\"name\":\"AccuseMultipleProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50612ff7806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80637f321b2d14610030575b600080fd5b61004a600480360381019061004591906117ec565b61004c565b005b6000610056610155565b9050600061006a8a8a8a8a8a8a8a8a610182565b90506100c160018360000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461062490919063ffffffff16565b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508073ffffffffffffffffffffffffffffffffffffffff167fd70587ff450b3f9f38dcd0b8de705c37a9039a6d820906da412205e9f65c413860405160405180910390a250505050505050505050565b6000807fcb6574b970d6cba58c206e0a22b65f585e0e0144a6a0af7ad3741b9830b50a9290508091505090565b6000806102178a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505089898080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061067d565b905060006102ad87878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505086868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061067d565b90508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461031d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031490612088565b60405180910390fd5b848460405161032d929190611d86565b60405180910390208989604051610345929190611d86565b6040518091039020141561038e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038590611e28565b60405180910390fd5b60006103dd8a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506106c7565b9050600061042e87878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506106c7565b90508060200151600001516020015163ffffffff168260200151600001516020015163ffffffff1614610496576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048d90612148565b60405180910390fd5b8060200151600001516040015163ffffffff168260200151600001516040015163ffffffff16146104fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f390611e88565b60405180910390fd5b8060200151600001516000015163ffffffff168260200151600001516000015163ffffffff1614610562576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055990611e48565b60405180910390fd5b600061056c6106e4565b90508063ffffffff168360200151600001516000015163ffffffff16146105c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105bf906120c8565b60405180910390fd5b6105d185610707565b610610576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060790612068565b60405180910390fd5b849550505050505098975050505050505050565b6000828284610633919061220f565b9150811015610677576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066e90611f08565b60405180910390fd5b92915050565b60006106bf836040518060400160405280600881526020017f50726f706f73616c00000000000000000000000000000000000000000000000081525084610786565b905092915050565b6106cf611661565b6106da8260086108e7565b5080915050919050565b60006106ee610a1d565b60000160009054906101000a900463ffffffff16905090565b600080610712610a4a565b90508060020160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16801561077e5750610772610a77565b61077b84610a8a565b10155b915050919050565b600060418451146107cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c390611fc8565b60405180910390fd5b600083836040516020016107e1929190611d9f565b60405160208183030381529060405280519060200120905060008060006020880151925060408801519150606088015160001a9050601b8160ff16106108275780610835565b601b816108349190612265565b5b9050601b8160ff16148061084c5750601c8160ff16145b61088b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088290611f88565b60405180910390fd5b600184828585604051600081526020016040526040516108ae9493929190611dc3565b6020604051602081039080840390855afa1580156108d0573d6000803e3d6000fd5b505050602060405103519450505050509392505050565b6108ef611661565b6000826101c884610900919061220f565b11610940576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610937906121a8565b60405180910390fd5b600061095885600486610953919061220f565b610adf565b90508061ffff166101c861096c919061229c565b9150818461097a919061220f565b855110156109bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b490612128565b60405180910390fd5b6109d4856010866109ce919061220f565b83610b68565b8360000181905250610a0d858261ffff1660b06010886109f4919061220f565b6109fe919061220f565b610a08919061229c565b610e2c565b8360200181905250509250929050565b6000807fa53f90683b42ecb37674e5c8c5c9cabf849818fdc2fdfb57bbe3c738f7b50d0e90508091505090565b6000807f310970b1d84cbb8af371a12019b396e9511a9b44411c1dabeec3e3d59d9a50f690508091505090565b6000610a81610f1e565b60000154905090565b6000610a94610f1e565b60090160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549050919050565b600080610aec8484610f4b565b905060008161ffff16118015610b07575060028161ffff1611155b610b46576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3d90611f28565b60405180910390fd5b60018161ffff161415610b5c5760089150610b61565b600091505b5092915050565b610b70611687565b828261ffff1660b085610b83919061220f565b610b8d919061229c565b11610bcd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc490612008565b60405180910390fd5b8161ffff1660b084610bdf919061220f565b610be9919061229c565b84511015610c2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c23906120a8565b60405180910390fd5b60008261ffff161415610c6b57610c4f84600885610c4a919061220f565b611013565b816060019063ffffffff16908163ffffffff1681525050610c85565b6000816060019063ffffffff16908163ffffffff16815250505b610c8f8484611013565b816000019063ffffffff16908163ffffffff16815250506000816000015163ffffffff1611610cf3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cea90611f68565b60405180910390fd5b610d0984600485610d04919061220f565b611013565b816020019063ffffffff16908163ffffffff16815250506000816020015163ffffffff1611610d6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6490611ee8565b60405180910390fd5b610d92848361ffff16603086610d83919061220f565b610d8d919061229c565b6110f0565b816040018181525050610dc0848361ffff16605086610db1919061220f565b610dbb919061229c565b6110f0565b816080018181525050610dee848361ffff16607086610ddf919061220f565b610de9919061229c565b6110f0565b8160a0018181525050610e1c848361ffff16609086610e0d919061220f565b610e17919061229c565b6110f0565b8160c00181815250509392505050565b610e346116e2565b8161010883610e43919061220f565b11610e83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7a90611fa8565b60405180910390fd5b61010882610e91919061220f565b83511015610ed4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ecb906121c8565b60405180910390fd5b610eea83601084610ee5919061220f565b61119f565b8160000181905250610f0883604884610f03919061220f565b6113cc565b8260200183604001829052829052505092915050565b6000807f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237ef90508091505090565b600081600283610f5b919061220f565b11610f9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f9290611ec8565b60405180910390fd5b600282610fa8919061220f565b83511015610feb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fe290611fe8565b60405180910390fd5b816020840101516010610100031c905060ff811660081b61ff00821660081c17905092915050565b600081600483611023919061220f565b11611063576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105a906120e8565b60405180910390fd5b600482611070919061220f565b835110156110b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110aa90612048565b60405180910390fd5b816020840101516020610100031c905060ff811660181b61ff00821660081b62ff0000831660081c63ff000000841660181c171717905092915050565b600081602083611100919061220f565b11611140576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611137906120e8565b60405180910390fd5b60208261114d919061220f565b83511015611190576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161118790612028565b60405180910390fd5b81602084010151905092915050565b6111a7611715565b816038836111b5919061220f565b116111f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111ec90611ea8565b60405180910390fd5b603882611202919061220f565b83511015611245576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161123c90612108565b60405180910390fd5b61124f8383611013565b816000019063ffffffff16908163ffffffff16815250506000816000015163ffffffff16116112b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112aa90612188565b60405180910390fd5b6112c9836004846112c4919061220f565b611013565b816020019063ffffffff16908163ffffffff16815250506000816020015163ffffffff161161132d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132490611e08565b60405180910390fd5b6113438360088461133e919061220f565b611013565b816040019063ffffffff16908163ffffffff16815250506000816040015163ffffffff16116113a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161139e90611e68565b60405180910390fd5b6113bd836018846113b8919061220f565b6110f0565b81606001818152505092915050565b6113d4611752565b6113dc611774565b8260c0846113ea919061220f565b1161142a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161142190611ea8565b60405180910390fd5b60c083611437919061220f565b8451101561147a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161147190612168565b60405180910390fd5b6114908460008561148b919061220f565b6115b3565b826000600481106114a4576114a3612362565b5b6020020181815250506114c3846020856114be919061220f565b6115b3565b826001600481106114d7576114d6612362565b5b6020020181815250506114f6846040856114f1919061220f565b6115b3565b8260026004811061150a57611509612362565b5b60200201818152505061152984606085611524919061220f565b6115b3565b8260036004811061153d5761153c612362565b5b60200201818152505061155c84608085611557919061220f565b6115b3565b816000600281106115705761156f612362565b5b60200201818152505061158f8460a08561158a919061220f565b6115b3565b816001600281106115a3576115a2612362565b5b6020020181815250509250929050565b600081601f836115c3919061220f565b11611603576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115fa906120e8565b60405180910390fd5b601f82611610919061220f565b835111611652576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161164990611f48565b60405180910390fd5b81602084010151905092915050565b6040518060400160405280611674611687565b81526020016116816116e2565b81525090565b6040518060e00160405280600063ffffffff168152602001600063ffffffff16815260200160008019168152602001600063ffffffff1681526020016000801916815260200160008019168152602001600080191681525090565b60405180606001604052806116f5611715565b8152602001611702611752565b815260200161170f611774565b81525090565b6040518060800160405280600063ffffffff168152602001600063ffffffff168152602001600063ffffffff168152602001600080191681525090565b6040518060800160405280600490602082028036833780820191505090505090565b6040518060400160405280600290602082028036833780820191505090505090565b60008083601f8401126117ac576117ab612396565b5b8235905067ffffffffffffffff8111156117c9576117c8612391565b5b6020830191508360018202830111156117e5576117e461239b565b5b9250929050565b6000806000806000806000806080898b03121561180c5761180b6123a5565b5b600089013567ffffffffffffffff81111561182a576118296123a0565b5b6118368b828c01611796565b9850985050602089013567ffffffffffffffff811115611859576118586123a0565b5b6118658b828c01611796565b9650965050604089013567ffffffffffffffff811115611888576118876123a0565b5b6118948b828c01611796565b9450945050606089013567ffffffffffffffff8111156118b7576118b66123a0565b5b6118c38b828c01611796565b92509250509295985092959890939650565b6118de816122d0565b82525050565b60006118f083856121f3565b93506118fd8385846122f1565b82840190509392505050565b6000611914826121e8565b61191e81856121f3565b935061192e818560208601612300565b80840191505092915050565b6000611947604b836121fe565b9150611952826123aa565b606082019050919050565b600061196a6029836121fe565b91506119758261241f565b604082019050919050565b600061198d6043836121fe565b91506119988261246e565b606082019050919050565b60006119b0604a836121fe565b91506119bb826124e3565b606082019050919050565b60006119d36041836121fe565b91506119de82612558565b606082019050919050565b60006119f6603a836121fe565b9150611a01826125cd565b604082019050919050565b6000611a19605a836121fe565b9150611a248261261c565b606082019050919050565b6000611a3c604b836121fe565b9150611a4782612691565b606082019050919050565b6000611a5f6014836121fe565b9150611a6a82612706565b602082019050919050565b6000611a82604a836121fe565b9150611a8d8261272f565b606082019050919050565b6000611aa5603e836121fe565b9150611ab0826127a4565b604082019050919050565b6000611ac8604c836121fe565b9150611ad3826127f3565b606082019050919050565b6000611aeb6031836121fe565b9150611af682612868565b604082019050919050565b6000611b0e6038836121fe565b9150611b19826128b7565b604082019050919050565b6000611b31602f836121fe565b9150611b3c82612906565b604082019050919050565b6000611b546068836121fe565b9150611b5f82612955565b608082019050919050565b6000611b77604b836121fe565b9150611b82826129f0565b606082019050919050565b6000611b9a602e836121fe565b9150611ba582612a65565b604082019050919050565b6000611bbd6050836121fe565b9150611bc882612ab4565b606082019050919050565b6000611be0604a836121fe565b9150611beb82612b29565b606082019050919050565b6000611c036042836121fe565b9150611c0e82612b9e565b606082019050919050565b6000611c26604a836121fe565b9150611c3182612c13565b606082019050919050565b6000611c496039836121fe565b9150611c5482612c88565b604082019050919050565b6000611c6c6042836121fe565b9150611c7782612cd7565b606082019050919050565b6000611c8f6039836121fe565b9150611c9a82612d4c565b604082019050919050565b6000611cb26039836121fe565b9150611cbd82612d9b565b604082019050919050565b6000611cd56049836121fe565b9150611ce082612dea565b606082019050919050565b6000611cf8602f836121fe565b9150611d0382612e5f565b604082019050919050565b6000611d1b604c836121fe565b9150611d2682612eae565b606082019050919050565b6000611d3e603a836121fe565b9150611d4982612f23565b604082019050919050565b6000611d616035836121fe565b9150611d6c82612f72565b604082019050919050565b611d80816122e4565b82525050565b6000611d938284866118e4565b91508190509392505050565b6000611dab8285611909565b9150611db78284611909565b91508190509392505050565b6000608082019050611dd860008301876118d5565b611de56020830186611d77565b611df260408301856118d5565b611dff60608301846118d5565b95945050505050565b60006020820190508181036000830152611e218161193a565b9050919050565b60006020820190508181036000830152611e418161195d565b9050919050565b60006020820190508181036000830152611e6181611980565b9050919050565b60006020820190508181036000830152611e81816119a3565b9050919050565b60006020820190508181036000830152611ea1816119c6565b9050919050565b60006020820190508181036000830152611ec1816119e9565b9050919050565b60006020820190508181036000830152611ee181611a0c565b9050919050565b60006020820190508181036000830152611f0181611a2f565b9050919050565b60006020820190508181036000830152611f2181611a52565b9050919050565b60006020820190508181036000830152611f4181611a75565b9050919050565b60006020820190508181036000830152611f6181611a98565b9050919050565b60006020820190508181036000830152611f8181611abb565b9050919050565b60006020820190508181036000830152611fa181611ade565b9050919050565b60006020820190508181036000830152611fc181611b01565b9050919050565b60006020820190508181036000830152611fe181611b24565b9050919050565b6000602082019050818103600083015261200181611b47565b9050919050565b6000602082019050818103600083015261202181611b6a565b9050919050565b6000602082019050818103600083015261204181611b8d565b9050919050565b6000602082019050818103600083015261206181611bb0565b9050919050565b6000602082019050818103600083015261208181611bd3565b9050919050565b600060208201905081810360008301526120a181611bf6565b9050919050565b600060208201905081810360008301526120c181611c19565b9050919050565b600060208201905081810360008301526120e181611c3c565b9050919050565b6000602082019050818103600083015261210181611c5f565b9050919050565b6000602082019050818103600083015261212181611c82565b9050919050565b6000602082019050818103600083015261214181611ca5565b9050919050565b6000602082019050818103600083015261216181611cc8565b9050919050565b6000602082019050818103600083015261218181611ceb565b9050919050565b600060208201905081810360008301526121a181611d0e565b9050919050565b600060208201905081810360008301526121c181611d31565b9050919050565b600060208201905081810360008301526121e181611d54565b9050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600061221a826122da565b9150612225836122da565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561225a57612259612333565b5b828201905092915050565b6000612270826122e4565b915061227b836122e4565b92508260ff0382111561229157612290612333565b5b828201905092915050565b60006122a7826122da565b91506122b2836122da565b9250828210156122c5576122c4612333565b5b828203905092915050565b6000819050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b8381101561231e578082015181840152602081019050612303565b8381111561232d576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b7f52436c61696d735061727365724c6962726172793a20496e76616c696420706160008201527f7273696e672e20546865206865696768742073686f756c64206265206772656160208201527f746572207468616e203021000000000000000000000000000000000000000000604082015250565b7f41636375736174696f6e4c6962726172793a207468652050436c61696d73206160008201527f726520657175616c210000000000000000000000000000000000000000000000602082015250565b7f41636375736174696f6e4c6962726172793a2074686520636861696e4964206260008201527f65747765656e207468652070726f706f73616c7320617265206469666665726560208201527f6e74210000000000000000000000000000000000000000000000000000000000604082015250565b7f52436c61696d735061727365724c6962726172793a20496e76616c696420706160008201527f7273696e672e2054686520726f756e642073686f756c6420626520677265617460208201527f6572207468616e20302100000000000000000000000000000000000000000000604082015250565b7f41636375736174696f6e4c6962726172793a2074686520726f756e642062657460008201527f7765656e207468652070726f706f73616c732061726520646966666572656e7460208201527f2100000000000000000000000000000000000000000000000000000000000000604082015250565b7f52436c61696d735061727365724c6962726172793a204f766572666c6f77206f60008201527f6e2074686520646174614f666673657420706172616d65746572000000000000602082015250565b7f426173655061727365724c6962726172793a204572726f72206578747261637460008201527f696e672075696e31362120416e206f766572666c6f772068617070656e65642060208201527f7769746820746865206f666673657420706172616d6574657221000000000000604082015250565b7f42436c61696d735061727365724c6962726172793a20496e76616c696420706160008201527f7273696e672e20546865206865696768742073686f756c64206265206772656160208201527f746572207468616e203021000000000000000000000000000000000000000000604082015250565b7f64732d6d6174682d6164642d6f766572666c6f77000000000000000000000000600082015250565b7f42436c61696d735061727365724c6962726172793a205468652073697a65206f60008201527f662074686520646174612073656374696f6e2073686f756c642062652031206f60208201527f72203220776f7264732100000000000000000000000000000000000000000000604082015250565b7f426173655061727365724c6962726172793a20547279696e6720746f2072656160008201527f6420616e206f6666736574206f7574206f6620626f756e646172696573210000602082015250565b7f42436c61696d735061727365724c6962726172793a20496e76616c696420706160008201527f7273696e672e2054686520636861696e49642073686f756c642062652067726560208201527f61746572207468616e2030210000000000000000000000000000000000000000604082015250565b7f41636375736174696f6e4c6962726172793a205369676e61747572652075736560008201527f7320696e76616c69642076657273696f6e000000000000000000000000000000602082015250565b7f52436572745061727365724c6962726172793a204f766572666c6f77206f6e2060008201527f74686520646174614f666673657420706172616d657465720000000000000000602082015250565b7f41636375736174696f6e4c6962726172793a205369676e61747572652073686f60008201527f756c642062652036352062797465730000000000000000000000000000000000602082015250565b7f426173655061727365724c6962726172793a204572726f72206578747261637460008201527f696e672075696e31362120547279696e6720746f207265616420616e206f666660208201527f736574206f7574206f6620626f756e64617269657320696e207468652073726360408201527f2062696e61727921000000000000000000000000000000000000000000000000606082015250565b7f42436c61696d735061727365724c6962726172793a20496e76616c696420706160008201527f7273696e672e204f766572666c6f77206f6e2074686520646174614f6666736560208201527f7420706172616d65746572000000000000000000000000000000000000000000604082015250565b7f426173655061727365724c6962726172793a206e6f7420656e6f75676820627960008201527f74657320746f2065787472616374000000000000000000000000000000000000602082015250565b7f426173655061727365724c6962726172793a20547279696e6720746f2072656160008201527f6420616e206f6666736574206f7574206f6620626f756e64617269657320696e60208201527f20746865207372632062696e6172792100000000000000000000000000000000604082015250565b7f41636375736174696f6e4c6962726172793a20746865207369676e6572206f6660008201527f2074686573652070726f706f73616c73206973206e6f7420612076616c69642060208201527f76616c696461746f722100000000000000000000000000000000000000000000604082015250565b7f41636375736174696f6e4c6962726172793a20746865207369676e657273206f60008201527f66207468652070726f706f73616c732073686f756c642062652074686520736160208201527f6d65000000000000000000000000000000000000000000000000000000000000604082015250565b7f42436c61696d735061727365724c6962726172793a20496e76616c696420706160008201527f7273696e672e204e6f7420656e6f75676820627974657320746f20657874726160208201527f63742042436c61696d7300000000000000000000000000000000000000000000604082015250565b7f41636375736174696f6e4c6962726172793a2074686520636861696e4964206960008201527f7320696e76616c696420666f72207468697320636861696e2100000000000000602082015250565b7f426173655061727365724c6962726172793a20416e206f766572666c6f77206860008201527f617070656e6564207769746820746865206f666673657420706172616d65746560208201527f7221000000000000000000000000000000000000000000000000000000000000604082015250565b7f52436c61696d735061727365724c6962726172793a204e6f7420656e6f75676860008201527f20627974657320746f20657874726163742052436c61696d7300000000000000602082015250565b7f50436c61696d735061727365724c6962726172793a204e6f7420656e6f75676860008201527f20627974657320746f20657874726163742050436c61696d7300000000000000602082015250565b7f41636375736174696f6e4c6962726172793a2074686520626c6f636b2068656960008201527f67687473206265747765656e207468652070726f706f73616c7320617265206460208201527f6966666572656e74210000000000000000000000000000000000000000000000604082015250565b7f52436572745061727365724c6962726172793a204e6f7420656e6f756768206260008201527f7974657320746f20657874726163740000000000000000000000000000000000602082015250565b7f52436c61696d735061727365724c6962726172793a20496e76616c696420706160008201527f7273696e672e2054686520636861696e49642073686f756c642062652067726560208201527f61746572207468616e2030210000000000000000000000000000000000000000604082015250565b7f50436c61696d735061727365724c6962726172793a204f766572666c6f77206f60008201527f6e2074686520646174614f666673657420706172616d65746572000000000000602082015250565b7f52436572745061727365724c6962726172793a204e6f7420656e6f756768206260008201527f7974657320746f2065787472616374205243657274000000000000000000000060208201525056fea2646970667358221220ef4e5da2361a237d6badb3607df8bd5ecd7278a16000cdd5751a9929915f08ac64736f6c63430008060033",
}

// AccusationMultipleProposalFacetABI is the input ABI used to generate the binding from.
// Deprecated: Use AccusationMultipleProposalFacetMetaData.ABI instead.
var AccusationMultipleProposalFacetABI = AccusationMultipleProposalFacetMetaData.ABI

// AccusationMultipleProposalFacetBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AccusationMultipleProposalFacetMetaData.Bin instead.
var AccusationMultipleProposalFacetBin = AccusationMultipleProposalFacetMetaData.Bin

// DeployAccusationMultipleProposalFacet deploys a new Ethereum contract, binding an instance of AccusationMultipleProposalFacet to it.
func DeployAccusationMultipleProposalFacet(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *AccusationMultipleProposalFacet, error) {
	parsed, err := AccusationMultipleProposalFacetMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(AccusationMultipleProposalFacetBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &AccusationMultipleProposalFacet{AccusationMultipleProposalFacetCaller: AccusationMultipleProposalFacetCaller{contract: contract}, AccusationMultipleProposalFacetTransactor: AccusationMultipleProposalFacetTransactor{contract: contract}, AccusationMultipleProposalFacetFilterer: AccusationMultipleProposalFacetFilterer{contract: contract}}, nil
}

// AccusationMultipleProposalFacet is an auto generated Go binding around an Ethereum contract.
type AccusationMultipleProposalFacet struct {
	AccusationMultipleProposalFacetCaller     // Read-only binding to the contract
	AccusationMultipleProposalFacetTransactor // Write-only binding to the contract
	AccusationMultipleProposalFacetFilterer   // Log filterer for contract events
}

// AccusationMultipleProposalFacetCaller is an auto generated read-only Go binding around an Ethereum contract.
type AccusationMultipleProposalFacetCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccusationMultipleProposalFacetTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AccusationMultipleProposalFacetTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccusationMultipleProposalFacetFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AccusationMultipleProposalFacetFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccusationMultipleProposalFacetSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AccusationMultipleProposalFacetSession struct {
	Contract     *AccusationMultipleProposalFacet // Generic contract binding to set the session for
	CallOpts     bind.CallOpts                    // Call options to use throughout this session
	TransactOpts bind.TransactOpts                // Transaction auth options to use throughout this session
}

// AccusationMultipleProposalFacetCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AccusationMultipleProposalFacetCallerSession struct {
	Contract *AccusationMultipleProposalFacetCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                          // Call options to use throughout this session
}

// AccusationMultipleProposalFacetTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AccusationMultipleProposalFacetTransactorSession struct {
	Contract     *AccusationMultipleProposalFacetTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                          // Transaction auth options to use throughout this session
}

// AccusationMultipleProposalFacetRaw is an auto generated low-level Go binding around an Ethereum contract.
type AccusationMultipleProposalFacetRaw struct {
	Contract *AccusationMultipleProposalFacet // Generic contract binding to access the raw methods on
}

// AccusationMultipleProposalFacetCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AccusationMultipleProposalFacetCallerRaw struct {
	Contract *AccusationMultipleProposalFacetCaller // Generic read-only contract binding to access the raw methods on
}

// AccusationMultipleProposalFacetTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AccusationMultipleProposalFacetTransactorRaw struct {
	Contract *AccusationMultipleProposalFacetTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAccusationMultipleProposalFacet creates a new instance of AccusationMultipleProposalFacet, bound to a specific deployed contract.
func NewAccusationMultipleProposalFacet(address common.Address, backend bind.ContractBackend) (*AccusationMultipleProposalFacet, error) {
	contract, err := bindAccusationMultipleProposalFacet(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &AccusationMultipleProposalFacet{AccusationMultipleProposalFacetCaller: AccusationMultipleProposalFacetCaller{contract: contract}, AccusationMultipleProposalFacetTransactor: AccusationMultipleProposalFacetTransactor{contract: contract}, AccusationMultipleProposalFacetFilterer: AccusationMultipleProposalFacetFilterer{contract: contract}}, nil
}

// NewAccusationMultipleProposalFacetCaller creates a new read-only instance of AccusationMultipleProposalFacet, bound to a specific deployed contract.
func NewAccusationMultipleProposalFacetCaller(address common.Address, caller bind.ContractCaller) (*AccusationMultipleProposalFacetCaller, error) {
	contract, err := bindAccusationMultipleProposalFacet(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AccusationMultipleProposalFacetCaller{contract: contract}, nil
}

// NewAccusationMultipleProposalFacetTransactor creates a new write-only instance of AccusationMultipleProposalFacet, bound to a specific deployed contract.
func NewAccusationMultipleProposalFacetTransactor(address common.Address, transactor bind.ContractTransactor) (*AccusationMultipleProposalFacetTransactor, error) {
	contract, err := bindAccusationMultipleProposalFacet(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AccusationMultipleProposalFacetTransactor{contract: contract}, nil
}

// NewAccusationMultipleProposalFacetFilterer creates a new log filterer instance of AccusationMultipleProposalFacet, bound to a specific deployed contract.
func NewAccusationMultipleProposalFacetFilterer(address common.Address, filterer bind.ContractFilterer) (*AccusationMultipleProposalFacetFilterer, error) {
	contract, err := bindAccusationMultipleProposalFacet(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AccusationMultipleProposalFacetFilterer{contract: contract}, nil
}

// bindAccusationMultipleProposalFacet binds a generic wrapper to an already deployed contract.
func bindAccusationMultipleProposalFacet(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AccusationMultipleProposalFacetABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AccusationMultipleProposalFacet *AccusationMultipleProposalFacetRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AccusationMultipleProposalFacet.Contract.AccusationMultipleProposalFacetCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AccusationMultipleProposalFacet *AccusationMultipleProposalFacetRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccusationMultipleProposalFacet.Contract.AccusationMultipleProposalFacetTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AccusationMultipleProposalFacet *AccusationMultipleProposalFacetRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AccusationMultipleProposalFacet.Contract.AccusationMultipleProposalFacetTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AccusationMultipleProposalFacet *AccusationMultipleProposalFacetCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AccusationMultipleProposalFacet.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AccusationMultipleProposalFacet *AccusationMultipleProposalFacetTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccusationMultipleProposalFacet.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AccusationMultipleProposalFacet *AccusationMultipleProposalFacetTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AccusationMultipleProposalFacet.Contract.contract.Transact(opts, method, params...)
}

// AccuseMultipleProposal is a paid mutator transaction binding the contract method 0x7f321b2d.
//
// Solidity: function AccuseMultipleProposal(bytes _signature0, bytes _pClaims0, bytes _signature1, bytes _pClaims1) returns()
func (_AccusationMultipleProposalFacet *AccusationMultipleProposalFacetTransactor) AccuseMultipleProposal(opts *bind.TransactOpts, _signature0 []byte, _pClaims0 []byte, _signature1 []byte, _pClaims1 []byte) (*types.Transaction, error) {
	return _AccusationMultipleProposalFacet.contract.Transact(opts, "AccuseMultipleProposal", _signature0, _pClaims0, _signature1, _pClaims1)
}

// AccuseMultipleProposal is a paid mutator transaction binding the contract method 0x7f321b2d.
//
// Solidity: function AccuseMultipleProposal(bytes _signature0, bytes _pClaims0, bytes _signature1, bytes _pClaims1) returns()
func (_AccusationMultipleProposalFacet *AccusationMultipleProposalFacetSession) AccuseMultipleProposal(_signature0 []byte, _pClaims0 []byte, _signature1 []byte, _pClaims1 []byte) (*types.Transaction, error) {
	return _AccusationMultipleProposalFacet.Contract.AccuseMultipleProposal(&_AccusationMultipleProposalFacet.TransactOpts, _signature0, _pClaims0, _signature1, _pClaims1)
}

// AccuseMultipleProposal is a paid mutator transaction binding the contract method 0x7f321b2d.
//
// Solidity: function AccuseMultipleProposal(bytes _signature0, bytes _pClaims0, bytes _signature1, bytes _pClaims1) returns()
func (_AccusationMultipleProposalFacet *AccusationMultipleProposalFacetTransactorSession) AccuseMultipleProposal(_signature0 []byte, _pClaims0 []byte, _signature1 []byte, _pClaims1 []byte) (*types.Transaction, error) {
	return _AccusationMultipleProposalFacet.Contract.AccuseMultipleProposal(&_AccusationMultipleProposalFacet.TransactOpts, _signature0, _pClaims0, _signature1, _pClaims1)
}

// AccusationMultipleProposalFacetInvalidTransactionConsumptionIterator is returned from FilterInvalidTransactionConsumption and is used to iterate over the raw logs and unpacked data for InvalidTransactionConsumption events raised by the AccusationMultipleProposalFacet contract.
type AccusationMultipleProposalFacetInvalidTransactionConsumptionIterator struct {
	Event *AccusationMultipleProposalFacetInvalidTransactionConsumption // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccusationMultipleProposalFacetInvalidTransactionConsumptionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccusationMultipleProposalFacetInvalidTransactionConsumption)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccusationMultipleProposalFacetInvalidTransactionConsumption)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccusationMultipleProposalFacetInvalidTransactionConsumptionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccusationMultipleProposalFacetInvalidTransactionConsumptionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccusationMultipleProposalFacetInvalidTransactionConsumption represents a InvalidTransactionConsumption event raised by the AccusationMultipleProposalFacet contract.
type AccusationMultipleProposalFacetInvalidTransactionConsumption struct {
	Validator common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterInvalidTransactionConsumption is a free log retrieval operation binding the contract event 0xe7d88c5a1b3de74710b2ce1551a3d3be5c537d9d526cf4cb0fbbc948f527ee8b.
//
// Solidity: event InvalidTransactionConsumption(address indexed validator)
func (_AccusationMultipleProposalFacet *AccusationMultipleProposalFacetFilterer) FilterInvalidTransactionConsumption(opts *bind.FilterOpts, validator []common.Address) (*AccusationMultipleProposalFacetInvalidTransactionConsumptionIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _AccusationMultipleProposalFacet.contract.FilterLogs(opts, "InvalidTransactionConsumption", validatorRule)
	if err != nil {
		return nil, err
	}
	return &AccusationMultipleProposalFacetInvalidTransactionConsumptionIterator{contract: _AccusationMultipleProposalFacet.contract, event: "InvalidTransactionConsumption", logs: logs, sub: sub}, nil
}

// WatchInvalidTransactionConsumption is a free log subscription operation binding the contract event 0xe7d88c5a1b3de74710b2ce1551a3d3be5c537d9d526cf4cb0fbbc948f527ee8b.
//
// Solidity: event InvalidTransactionConsumption(address indexed validator)
func (_AccusationMultipleProposalFacet *AccusationMultipleProposalFacetFilterer) WatchInvalidTransactionConsumption(opts *bind.WatchOpts, sink chan<- *AccusationMultipleProposalFacetInvalidTransactionConsumption, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _AccusationMultipleProposalFacet.contract.WatchLogs(opts, "InvalidTransactionConsumption", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccusationMultipleProposalFacetInvalidTransactionConsumption)
				if err := _AccusationMultipleProposalFacet.contract.UnpackLog(event, "InvalidTransactionConsumption", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInvalidTransactionConsumption is a log parse operation binding the contract event 0xe7d88c5a1b3de74710b2ce1551a3d3be5c537d9d526cf4cb0fbbc948f527ee8b.
//
// Solidity: event InvalidTransactionConsumption(address indexed validator)
func (_AccusationMultipleProposalFacet *AccusationMultipleProposalFacetFilterer) ParseInvalidTransactionConsumption(log types.Log) (*AccusationMultipleProposalFacetInvalidTransactionConsumption, error) {
	event := new(AccusationMultipleProposalFacetInvalidTransactionConsumption)
	if err := _AccusationMultipleProposalFacet.contract.UnpackLog(event, "InvalidTransactionConsumption", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AccusationMultipleProposalFacetMultipleProposalsIterator is returned from FilterMultipleProposals and is used to iterate over the raw logs and unpacked data for MultipleProposals events raised by the AccusationMultipleProposalFacet contract.
type AccusationMultipleProposalFacetMultipleProposalsIterator struct {
	Event *AccusationMultipleProposalFacetMultipleProposals // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccusationMultipleProposalFacetMultipleProposalsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccusationMultipleProposalFacetMultipleProposals)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccusationMultipleProposalFacetMultipleProposals)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccusationMultipleProposalFacetMultipleProposalsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccusationMultipleProposalFacetMultipleProposalsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccusationMultipleProposalFacetMultipleProposals represents a MultipleProposals event raised by the AccusationMultipleProposalFacet contract.
type AccusationMultipleProposalFacetMultipleProposals struct {
	Validator common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterMultipleProposals is a free log retrieval operation binding the contract event 0xd70587ff450b3f9f38dcd0b8de705c37a9039a6d820906da412205e9f65c4138.
//
// Solidity: event MultipleProposals(address indexed validator)
func (_AccusationMultipleProposalFacet *AccusationMultipleProposalFacetFilterer) FilterMultipleProposals(opts *bind.FilterOpts, validator []common.Address) (*AccusationMultipleProposalFacetMultipleProposalsIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _AccusationMultipleProposalFacet.contract.FilterLogs(opts, "MultipleProposals", validatorRule)
	if err != nil {
		return nil, err
	}
	return &AccusationMultipleProposalFacetMultipleProposalsIterator{contract: _AccusationMultipleProposalFacet.contract, event: "MultipleProposals", logs: logs, sub: sub}, nil
}

// WatchMultipleProposals is a free log subscription operation binding the contract event 0xd70587ff450b3f9f38dcd0b8de705c37a9039a6d820906da412205e9f65c4138.
//
// Solidity: event MultipleProposals(address indexed validator)
func (_AccusationMultipleProposalFacet *AccusationMultipleProposalFacetFilterer) WatchMultipleProposals(opts *bind.WatchOpts, sink chan<- *AccusationMultipleProposalFacetMultipleProposals, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _AccusationMultipleProposalFacet.contract.WatchLogs(opts, "MultipleProposals", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccusationMultipleProposalFacetMultipleProposals)
				if err := _AccusationMultipleProposalFacet.contract.UnpackLog(event, "MultipleProposals", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMultipleProposals is a log parse operation binding the contract event 0xd70587ff450b3f9f38dcd0b8de705c37a9039a6d820906da412205e9f65c4138.
//
// Solidity: event MultipleProposals(address indexed validator)
func (_AccusationMultipleProposalFacet *AccusationMultipleProposalFacetFilterer) ParseMultipleProposals(log types.Log) (*AccusationMultipleProposalFacetMultipleProposals, error) {
	event := new(AccusationMultipleProposalFacetMultipleProposals)
	if err := _AccusationMultipleProposalFacet.contract.UnpackLog(event, "MultipleProposals", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AddressMetaData contains all meta data concerning the Address contract.
var AddressMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208e12c2c3f9bb6ba348b068da20fd507ce535e5a27faf92dc98283aef7ce9a59164736f6c63430008060033",
}

// AddressABI is the input ABI used to generate the binding from.
// Deprecated: Use AddressMetaData.ABI instead.
var AddressABI = AddressMetaData.ABI

// AddressBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AddressMetaData.Bin instead.
var AddressBin = AddressMetaData.Bin

// DeployAddress deploys a new Ethereum contract, binding an instance of Address to it.
func DeployAddress(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Address, error) {
	parsed, err := AddressMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(AddressBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Address{AddressCaller: AddressCaller{contract: contract}, AddressTransactor: AddressTransactor{contract: contract}, AddressFilterer: AddressFilterer{contract: contract}}, nil
}

// Address is an auto generated Go binding around an Ethereum contract.
type Address struct {
	AddressCaller     // Read-only binding to the contract
	AddressTransactor // Write-only binding to the contract
	AddressFilterer   // Log filterer for contract events
}

// AddressCaller is an auto generated read-only Go binding around an Ethereum contract.
type AddressCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AddressTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AddressTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AddressFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AddressFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AddressSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AddressSession struct {
	Contract     *Address          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AddressCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AddressCallerSession struct {
	Contract *AddressCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// AddressTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AddressTransactorSession struct {
	Contract     *AddressTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// AddressRaw is an auto generated low-level Go binding around an Ethereum contract.
type AddressRaw struct {
	Contract *Address // Generic contract binding to access the raw methods on
}

// AddressCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AddressCallerRaw struct {
	Contract *AddressCaller // Generic read-only contract binding to access the raw methods on
}

// AddressTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AddressTransactorRaw struct {
	Contract *AddressTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAddress creates a new instance of Address, bound to a specific deployed contract.
func NewAddress(address common.Address, backend bind.ContractBackend) (*Address, error) {
	contract, err := bindAddress(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Address{AddressCaller: AddressCaller{contract: contract}, AddressTransactor: AddressTransactor{contract: contract}, AddressFilterer: AddressFilterer{contract: contract}}, nil
}

// NewAddressCaller creates a new read-only instance of Address, bound to a specific deployed contract.
func NewAddressCaller(address common.Address, caller bind.ContractCaller) (*AddressCaller, error) {
	contract, err := bindAddress(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AddressCaller{contract: contract}, nil
}

// NewAddressTransactor creates a new write-only instance of Address, bound to a specific deployed contract.
func NewAddressTransactor(address common.Address, transactor bind.ContractTransactor) (*AddressTransactor, error) {
	contract, err := bindAddress(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AddressTransactor{contract: contract}, nil
}

// NewAddressFilterer creates a new log filterer instance of Address, bound to a specific deployed contract.
func NewAddressFilterer(address common.Address, filterer bind.ContractFilterer) (*AddressFilterer, error) {
	contract, err := bindAddress(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AddressFilterer{contract: contract}, nil
}

// bindAddress binds a generic wrapper to an already deployed contract.
func bindAddress(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AddressABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Address *AddressRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Address.Contract.AddressCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Address *AddressRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Address.Contract.AddressTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Address *AddressRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Address.Contract.AddressTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Address *AddressCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Address.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Address *AddressTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Address.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Address *AddressTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Address.Contract.contract.Transact(opts, method, params...)
}

// AdminMetaData contains all meta data concerning the Admin contract.
var AdminMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// AdminABI is the input ABI used to generate the binding from.
// Deprecated: Use AdminMetaData.ABI instead.
var AdminABI = AdminMetaData.ABI

// Admin is an auto generated Go binding around an Ethereum contract.
type Admin struct {
	AdminCaller     // Read-only binding to the contract
	AdminTransactor // Write-only binding to the contract
	AdminFilterer   // Log filterer for contract events
}

// AdminCaller is an auto generated read-only Go binding around an Ethereum contract.
type AdminCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AdminTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AdminTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AdminFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AdminFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AdminSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AdminSession struct {
	Contract     *Admin            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AdminCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AdminCallerSession struct {
	Contract *AdminCaller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// AdminTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AdminTransactorSession struct {
	Contract     *AdminTransactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AdminRaw is an auto generated low-level Go binding around an Ethereum contract.
type AdminRaw struct {
	Contract *Admin // Generic contract binding to access the raw methods on
}

// AdminCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AdminCallerRaw struct {
	Contract *AdminCaller // Generic read-only contract binding to access the raw methods on
}

// AdminTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AdminTransactorRaw struct {
	Contract *AdminTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAdmin creates a new instance of Admin, bound to a specific deployed contract.
func NewAdmin(address common.Address, backend bind.ContractBackend) (*Admin, error) {
	contract, err := bindAdmin(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Admin{AdminCaller: AdminCaller{contract: contract}, AdminTransactor: AdminTransactor{contract: contract}, AdminFilterer: AdminFilterer{contract: contract}}, nil
}

// NewAdminCaller creates a new read-only instance of Admin, bound to a specific deployed contract.
func NewAdminCaller(address common.Address, caller bind.ContractCaller) (*AdminCaller, error) {
	contract, err := bindAdmin(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AdminCaller{contract: contract}, nil
}

// NewAdminTransactor creates a new write-only instance of Admin, bound to a specific deployed contract.
func NewAdminTransactor(address common.Address, transactor bind.ContractTransactor) (*AdminTransactor, error) {
	contract, err := bindAdmin(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AdminTransactor{contract: contract}, nil
}

// NewAdminFilterer creates a new log filterer instance of Admin, bound to a specific deployed contract.
func NewAdminFilterer(address common.Address, filterer bind.ContractFilterer) (*AdminFilterer, error) {
	contract, err := bindAdmin(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AdminFilterer{contract: contract}, nil
}

// bindAdmin binds a generic wrapper to an already deployed contract.
func bindAdmin(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AdminABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Admin *AdminRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Admin.Contract.AdminCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Admin *AdminRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Admin.Contract.AdminTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Admin *AdminRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Admin.Contract.AdminTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Admin *AdminCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Admin.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Admin *AdminTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Admin.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Admin *AdminTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Admin.Contract.contract.Transact(opts, method, params...)
}

// GetAdmin is a free data retrieval call binding the contract method 0x6e9960c3.
//
// Solidity: function getAdmin() view returns(address)
func (_Admin *AdminCaller) GetAdmin(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Admin.contract.Call(opts, &out, "getAdmin")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetAdmin is a free data retrieval call binding the contract method 0x6e9960c3.
//
// Solidity: function getAdmin() view returns(address)
func (_Admin *AdminSession) GetAdmin() (common.Address, error) {
	return _Admin.Contract.GetAdmin(&_Admin.CallOpts)
}

// GetAdmin is a free data retrieval call binding the contract method 0x6e9960c3.
//
// Solidity: function getAdmin() view returns(address)
func (_Admin *AdminCallerSession) GetAdmin() (common.Address, error) {
	return _Admin.Contract.GetAdmin(&_Admin.CallOpts)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address admin_) returns()
func (_Admin *AdminTransactor) SetAdmin(opts *bind.TransactOpts, admin_ common.Address) (*types.Transaction, error) {
	return _Admin.contract.Transact(opts, "setAdmin", admin_)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address admin_) returns()
func (_Admin *AdminSession) SetAdmin(admin_ common.Address) (*types.Transaction, error) {
	return _Admin.Contract.SetAdmin(&_Admin.TransactOpts, admin_)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address admin_) returns()
func (_Admin *AdminTransactorSession) SetAdmin(admin_ common.Address) (*types.Transaction, error) {
	return _Admin.Contract.SetAdmin(&_Admin.TransactOpts, admin_)
}

// AtomicCounterMetaData contains all meta data concerning the AtomicCounter contract.
var AtomicCounterMetaData = &bind.MetaData{
	ABI: "[]",
}

// AtomicCounterABI is the input ABI used to generate the binding from.
// Deprecated: Use AtomicCounterMetaData.ABI instead.
var AtomicCounterABI = AtomicCounterMetaData.ABI

// AtomicCounter is an auto generated Go binding around an Ethereum contract.
type AtomicCounter struct {
	AtomicCounterCaller     // Read-only binding to the contract
	AtomicCounterTransactor // Write-only binding to the contract
	AtomicCounterFilterer   // Log filterer for contract events
}

// AtomicCounterCaller is an auto generated read-only Go binding around an Ethereum contract.
type AtomicCounterCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AtomicCounterTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AtomicCounterTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AtomicCounterFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AtomicCounterFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AtomicCounterSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AtomicCounterSession struct {
	Contract     *AtomicCounter    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AtomicCounterCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AtomicCounterCallerSession struct {
	Contract *AtomicCounterCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// AtomicCounterTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AtomicCounterTransactorSession struct {
	Contract     *AtomicCounterTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// AtomicCounterRaw is an auto generated low-level Go binding around an Ethereum contract.
type AtomicCounterRaw struct {
	Contract *AtomicCounter // Generic contract binding to access the raw methods on
}

// AtomicCounterCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AtomicCounterCallerRaw struct {
	Contract *AtomicCounterCaller // Generic read-only contract binding to access the raw methods on
}

// AtomicCounterTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AtomicCounterTransactorRaw struct {
	Contract *AtomicCounterTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAtomicCounter creates a new instance of AtomicCounter, bound to a specific deployed contract.
func NewAtomicCounter(address common.Address, backend bind.ContractBackend) (*AtomicCounter, error) {
	contract, err := bindAtomicCounter(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &AtomicCounter{AtomicCounterCaller: AtomicCounterCaller{contract: contract}, AtomicCounterTransactor: AtomicCounterTransactor{contract: contract}, AtomicCounterFilterer: AtomicCounterFilterer{contract: contract}}, nil
}

// NewAtomicCounterCaller creates a new read-only instance of AtomicCounter, bound to a specific deployed contract.
func NewAtomicCounterCaller(address common.Address, caller bind.ContractCaller) (*AtomicCounterCaller, error) {
	contract, err := bindAtomicCounter(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AtomicCounterCaller{contract: contract}, nil
}

// NewAtomicCounterTransactor creates a new write-only instance of AtomicCounter, bound to a specific deployed contract.
func NewAtomicCounterTransactor(address common.Address, transactor bind.ContractTransactor) (*AtomicCounterTransactor, error) {
	contract, err := bindAtomicCounter(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AtomicCounterTransactor{contract: contract}, nil
}

// NewAtomicCounterFilterer creates a new log filterer instance of AtomicCounter, bound to a specific deployed contract.
func NewAtomicCounterFilterer(address common.Address, filterer bind.ContractFilterer) (*AtomicCounterFilterer, error) {
	contract, err := bindAtomicCounter(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AtomicCounterFilterer{contract: contract}, nil
}

// bindAtomicCounter binds a generic wrapper to an already deployed contract.
func bindAtomicCounter(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AtomicCounterABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AtomicCounter *AtomicCounterRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AtomicCounter.Contract.AtomicCounterCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AtomicCounter *AtomicCounterRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AtomicCounter.Contract.AtomicCounterTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AtomicCounter *AtomicCounterRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AtomicCounter.Contract.AtomicCounterTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AtomicCounter *AtomicCounterCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AtomicCounter.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AtomicCounter *AtomicCounterTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AtomicCounter.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AtomicCounter *AtomicCounterTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AtomicCounter.Contract.contract.Transact(opts, method, params...)
}

// BClaimsParserLibraryMetaData contains all meta data concerning the BClaimsParserLibrary contract.
var BClaimsParserLibraryMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205c2de4bd326a363a825431ebe28814d1d391db5d1cae4f359cf1d737d98d842b64736f6c63430008060033",
}

// BClaimsParserLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use BClaimsParserLibraryMetaData.ABI instead.
var BClaimsParserLibraryABI = BClaimsParserLibraryMetaData.ABI

// BClaimsParserLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BClaimsParserLibraryMetaData.Bin instead.
var BClaimsParserLibraryBin = BClaimsParserLibraryMetaData.Bin

// DeployBClaimsParserLibrary deploys a new Ethereum contract, binding an instance of BClaimsParserLibrary to it.
func DeployBClaimsParserLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *BClaimsParserLibrary, error) {
	parsed, err := BClaimsParserLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BClaimsParserLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BClaimsParserLibrary{BClaimsParserLibraryCaller: BClaimsParserLibraryCaller{contract: contract}, BClaimsParserLibraryTransactor: BClaimsParserLibraryTransactor{contract: contract}, BClaimsParserLibraryFilterer: BClaimsParserLibraryFilterer{contract: contract}}, nil
}

// BClaimsParserLibrary is an auto generated Go binding around an Ethereum contract.
type BClaimsParserLibrary struct {
	BClaimsParserLibraryCaller     // Read-only binding to the contract
	BClaimsParserLibraryTransactor // Write-only binding to the contract
	BClaimsParserLibraryFilterer   // Log filterer for contract events
}

// BClaimsParserLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type BClaimsParserLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BClaimsParserLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BClaimsParserLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BClaimsParserLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BClaimsParserLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BClaimsParserLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BClaimsParserLibrarySession struct {
	Contract     *BClaimsParserLibrary // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// BClaimsParserLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BClaimsParserLibraryCallerSession struct {
	Contract *BClaimsParserLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// BClaimsParserLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BClaimsParserLibraryTransactorSession struct {
	Contract     *BClaimsParserLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// BClaimsParserLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type BClaimsParserLibraryRaw struct {
	Contract *BClaimsParserLibrary // Generic contract binding to access the raw methods on
}

// BClaimsParserLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BClaimsParserLibraryCallerRaw struct {
	Contract *BClaimsParserLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// BClaimsParserLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BClaimsParserLibraryTransactorRaw struct {
	Contract *BClaimsParserLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBClaimsParserLibrary creates a new instance of BClaimsParserLibrary, bound to a specific deployed contract.
func NewBClaimsParserLibrary(address common.Address, backend bind.ContractBackend) (*BClaimsParserLibrary, error) {
	contract, err := bindBClaimsParserLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BClaimsParserLibrary{BClaimsParserLibraryCaller: BClaimsParserLibraryCaller{contract: contract}, BClaimsParserLibraryTransactor: BClaimsParserLibraryTransactor{contract: contract}, BClaimsParserLibraryFilterer: BClaimsParserLibraryFilterer{contract: contract}}, nil
}

// NewBClaimsParserLibraryCaller creates a new read-only instance of BClaimsParserLibrary, bound to a specific deployed contract.
func NewBClaimsParserLibraryCaller(address common.Address, caller bind.ContractCaller) (*BClaimsParserLibraryCaller, error) {
	contract, err := bindBClaimsParserLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BClaimsParserLibraryCaller{contract: contract}, nil
}

// NewBClaimsParserLibraryTransactor creates a new write-only instance of BClaimsParserLibrary, bound to a specific deployed contract.
func NewBClaimsParserLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*BClaimsParserLibraryTransactor, error) {
	contract, err := bindBClaimsParserLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BClaimsParserLibraryTransactor{contract: contract}, nil
}

// NewBClaimsParserLibraryFilterer creates a new log filterer instance of BClaimsParserLibrary, bound to a specific deployed contract.
func NewBClaimsParserLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*BClaimsParserLibraryFilterer, error) {
	contract, err := bindBClaimsParserLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BClaimsParserLibraryFilterer{contract: contract}, nil
}

// bindBClaimsParserLibrary binds a generic wrapper to an already deployed contract.
func bindBClaimsParserLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BClaimsParserLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BClaimsParserLibrary *BClaimsParserLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BClaimsParserLibrary.Contract.BClaimsParserLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BClaimsParserLibrary *BClaimsParserLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BClaimsParserLibrary.Contract.BClaimsParserLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BClaimsParserLibrary *BClaimsParserLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BClaimsParserLibrary.Contract.BClaimsParserLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BClaimsParserLibrary *BClaimsParserLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BClaimsParserLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BClaimsParserLibrary *BClaimsParserLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BClaimsParserLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BClaimsParserLibrary *BClaimsParserLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BClaimsParserLibrary.Contract.contract.Transact(opts, method, params...)
}

// BaseParserLibraryMetaData contains all meta data concerning the BaseParserLibrary contract.
var BaseParserLibraryMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208518906bd3e94b85a00d56ece4c074b0a44701069d437ed44ce9803e5f6a040564736f6c63430008060033",
}

// BaseParserLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use BaseParserLibraryMetaData.ABI instead.
var BaseParserLibraryABI = BaseParserLibraryMetaData.ABI

// BaseParserLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BaseParserLibraryMetaData.Bin instead.
var BaseParserLibraryBin = BaseParserLibraryMetaData.Bin

// DeployBaseParserLibrary deploys a new Ethereum contract, binding an instance of BaseParserLibrary to it.
func DeployBaseParserLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *BaseParserLibrary, error) {
	parsed, err := BaseParserLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BaseParserLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseParserLibrary{BaseParserLibraryCaller: BaseParserLibraryCaller{contract: contract}, BaseParserLibraryTransactor: BaseParserLibraryTransactor{contract: contract}, BaseParserLibraryFilterer: BaseParserLibraryFilterer{contract: contract}}, nil
}

// BaseParserLibrary is an auto generated Go binding around an Ethereum contract.
type BaseParserLibrary struct {
	BaseParserLibraryCaller     // Read-only binding to the contract
	BaseParserLibraryTransactor // Write-only binding to the contract
	BaseParserLibraryFilterer   // Log filterer for contract events
}

// BaseParserLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseParserLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseParserLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseParserLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseParserLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseParserLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseParserLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BaseParserLibrarySession struct {
	Contract     *BaseParserLibrary // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// BaseParserLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BaseParserLibraryCallerSession struct {
	Contract *BaseParserLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// BaseParserLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BaseParserLibraryTransactorSession struct {
	Contract     *BaseParserLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// BaseParserLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type BaseParserLibraryRaw struct {
	Contract *BaseParserLibrary // Generic contract binding to access the raw methods on
}

// BaseParserLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BaseParserLibraryCallerRaw struct {
	Contract *BaseParserLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// BaseParserLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BaseParserLibraryTransactorRaw struct {
	Contract *BaseParserLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBaseParserLibrary creates a new instance of BaseParserLibrary, bound to a specific deployed contract.
func NewBaseParserLibrary(address common.Address, backend bind.ContractBackend) (*BaseParserLibrary, error) {
	contract, err := bindBaseParserLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseParserLibrary{BaseParserLibraryCaller: BaseParserLibraryCaller{contract: contract}, BaseParserLibraryTransactor: BaseParserLibraryTransactor{contract: contract}, BaseParserLibraryFilterer: BaseParserLibraryFilterer{contract: contract}}, nil
}

// NewBaseParserLibraryCaller creates a new read-only instance of BaseParserLibrary, bound to a specific deployed contract.
func NewBaseParserLibraryCaller(address common.Address, caller bind.ContractCaller) (*BaseParserLibraryCaller, error) {
	contract, err := bindBaseParserLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseParserLibraryCaller{contract: contract}, nil
}

// NewBaseParserLibraryTransactor creates a new write-only instance of BaseParserLibrary, bound to a specific deployed contract.
func NewBaseParserLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseParserLibraryTransactor, error) {
	contract, err := bindBaseParserLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseParserLibraryTransactor{contract: contract}, nil
}

// NewBaseParserLibraryFilterer creates a new log filterer instance of BaseParserLibrary, bound to a specific deployed contract.
func NewBaseParserLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseParserLibraryFilterer, error) {
	contract, err := bindBaseParserLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseParserLibraryFilterer{contract: contract}, nil
}

// bindBaseParserLibrary binds a generic wrapper to an already deployed contract.
func bindBaseParserLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseParserLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseParserLibrary *BaseParserLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BaseParserLibrary.Contract.BaseParserLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseParserLibrary *BaseParserLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseParserLibrary.Contract.BaseParserLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseParserLibrary *BaseParserLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseParserLibrary.Contract.BaseParserLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseParserLibrary *BaseParserLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BaseParserLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseParserLibrary *BaseParserLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseParserLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseParserLibrary *BaseParserLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseParserLibrary.Contract.contract.Transact(opts, method, params...)
}

// BasicERC20MetaData contains all meta data concerning the BasicERC20 contract.
var BasicERC20MetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// BasicERC20ABI is the input ABI used to generate the binding from.
// Deprecated: Use BasicERC20MetaData.ABI instead.
var BasicERC20ABI = BasicERC20MetaData.ABI

// BasicERC20 is an auto generated Go binding around an Ethereum contract.
type BasicERC20 struct {
	BasicERC20Caller     // Read-only binding to the contract
	BasicERC20Transactor // Write-only binding to the contract
	BasicERC20Filterer   // Log filterer for contract events
}

// BasicERC20Caller is an auto generated read-only Go binding around an Ethereum contract.
type BasicERC20Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BasicERC20Transactor is an auto generated write-only Go binding around an Ethereum contract.
type BasicERC20Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BasicERC20Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BasicERC20Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BasicERC20Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BasicERC20Session struct {
	Contract     *BasicERC20       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BasicERC20CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BasicERC20CallerSession struct {
	Contract *BasicERC20Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// BasicERC20TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BasicERC20TransactorSession struct {
	Contract     *BasicERC20Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// BasicERC20Raw is an auto generated low-level Go binding around an Ethereum contract.
type BasicERC20Raw struct {
	Contract *BasicERC20 // Generic contract binding to access the raw methods on
}

// BasicERC20CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BasicERC20CallerRaw struct {
	Contract *BasicERC20Caller // Generic read-only contract binding to access the raw methods on
}

// BasicERC20TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BasicERC20TransactorRaw struct {
	Contract *BasicERC20Transactor // Generic write-only contract binding to access the raw methods on
}

// NewBasicERC20 creates a new instance of BasicERC20, bound to a specific deployed contract.
func NewBasicERC20(address common.Address, backend bind.ContractBackend) (*BasicERC20, error) {
	contract, err := bindBasicERC20(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BasicERC20{BasicERC20Caller: BasicERC20Caller{contract: contract}, BasicERC20Transactor: BasicERC20Transactor{contract: contract}, BasicERC20Filterer: BasicERC20Filterer{contract: contract}}, nil
}

// NewBasicERC20Caller creates a new read-only instance of BasicERC20, bound to a specific deployed contract.
func NewBasicERC20Caller(address common.Address, caller bind.ContractCaller) (*BasicERC20Caller, error) {
	contract, err := bindBasicERC20(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BasicERC20Caller{contract: contract}, nil
}

// NewBasicERC20Transactor creates a new write-only instance of BasicERC20, bound to a specific deployed contract.
func NewBasicERC20Transactor(address common.Address, transactor bind.ContractTransactor) (*BasicERC20Transactor, error) {
	contract, err := bindBasicERC20(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BasicERC20Transactor{contract: contract}, nil
}

// NewBasicERC20Filterer creates a new log filterer instance of BasicERC20, bound to a specific deployed contract.
func NewBasicERC20Filterer(address common.Address, filterer bind.ContractFilterer) (*BasicERC20Filterer, error) {
	contract, err := bindBasicERC20(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BasicERC20Filterer{contract: contract}, nil
}

// bindBasicERC20 binds a generic wrapper to an already deployed contract.
func bindBasicERC20(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BasicERC20ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BasicERC20 *BasicERC20Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BasicERC20.Contract.BasicERC20Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BasicERC20 *BasicERC20Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BasicERC20.Contract.BasicERC20Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BasicERC20 *BasicERC20Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BasicERC20.Contract.BasicERC20Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BasicERC20 *BasicERC20CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BasicERC20.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BasicERC20 *BasicERC20TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BasicERC20.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BasicERC20 *BasicERC20TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BasicERC20.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address src, address who) view returns(uint256)
func (_BasicERC20 *BasicERC20Caller) Allowance(opts *bind.CallOpts, src common.Address, who common.Address) (*big.Int, error) {
	var out []interface{}
	err := _BasicERC20.contract.Call(opts, &out, "allowance", src, who)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address src, address who) view returns(uint256)
func (_BasicERC20 *BasicERC20Session) Allowance(src common.Address, who common.Address) (*big.Int, error) {
	return _BasicERC20.Contract.Allowance(&_BasicERC20.CallOpts, src, who)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address src, address who) view returns(uint256)
func (_BasicERC20 *BasicERC20CallerSession) Allowance(src common.Address, who common.Address) (*big.Int, error) {
	return _BasicERC20.Contract.Allowance(&_BasicERC20.CallOpts, src, who)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address who) view returns(uint256)
func (_BasicERC20 *BasicERC20Caller) BalanceOf(opts *bind.CallOpts, who common.Address) (*big.Int, error) {
	var out []interface{}
	err := _BasicERC20.contract.Call(opts, &out, "balanceOf", who)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address who) view returns(uint256)
func (_BasicERC20 *BasicERC20Session) BalanceOf(who common.Address) (*big.Int, error) {
	return _BasicERC20.Contract.BalanceOf(&_BasicERC20.CallOpts, who)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address who) view returns(uint256)
func (_BasicERC20 *BasicERC20CallerSession) BalanceOf(who common.Address) (*big.Int, error) {
	return _BasicERC20.Contract.BalanceOf(&_BasicERC20.CallOpts, who)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_BasicERC20 *BasicERC20Caller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BasicERC20.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_BasicERC20 *BasicERC20Session) TotalSupply() (*big.Int, error) {
	return _BasicERC20.Contract.TotalSupply(&_BasicERC20.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_BasicERC20 *BasicERC20CallerSession) TotalSupply() (*big.Int, error) {
	return _BasicERC20.Contract.TotalSupply(&_BasicERC20.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address who, uint256 wad) returns(bool)
func (_BasicERC20 *BasicERC20Transactor) Approve(opts *bind.TransactOpts, who common.Address, wad *big.Int) (*types.Transaction, error) {
	return _BasicERC20.contract.Transact(opts, "approve", who, wad)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address who, uint256 wad) returns(bool)
func (_BasicERC20 *BasicERC20Session) Approve(who common.Address, wad *big.Int) (*types.Transaction, error) {
	return _BasicERC20.Contract.Approve(&_BasicERC20.TransactOpts, who, wad)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address who, uint256 wad) returns(bool)
func (_BasicERC20 *BasicERC20TransactorSession) Approve(who common.Address, wad *big.Int) (*types.Transaction, error) {
	return _BasicERC20.Contract.Approve(&_BasicERC20.TransactOpts, who, wad)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address dst, uint256 wad) returns(bool)
func (_BasicERC20 *BasicERC20Transactor) Transfer(opts *bind.TransactOpts, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _BasicERC20.contract.Transact(opts, "transfer", dst, wad)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address dst, uint256 wad) returns(bool)
func (_BasicERC20 *BasicERC20Session) Transfer(dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _BasicERC20.Contract.Transfer(&_BasicERC20.TransactOpts, dst, wad)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address dst, uint256 wad) returns(bool)
func (_BasicERC20 *BasicERC20TransactorSession) Transfer(dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _BasicERC20.Contract.Transfer(&_BasicERC20.TransactOpts, dst, wad)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address src, address dst, uint256 wad) returns(bool)
func (_BasicERC20 *BasicERC20Transactor) TransferFrom(opts *bind.TransactOpts, src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _BasicERC20.contract.Transact(opts, "transferFrom", src, dst, wad)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address src, address dst, uint256 wad) returns(bool)
func (_BasicERC20 *BasicERC20Session) TransferFrom(src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _BasicERC20.Contract.TransferFrom(&_BasicERC20.TransactOpts, src, dst, wad)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address src, address dst, uint256 wad) returns(bool)
func (_BasicERC20 *BasicERC20TransactorSession) TransferFrom(src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _BasicERC20.Contract.TransferFrom(&_BasicERC20.TransactOpts, src, dst, wad)
}

// ChainStatusLibraryMetaData contains all meta data concerning the ChainStatusLibrary contract.
var ChainStatusLibraryMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122003b9915f3b34eab29b207e0982101c14eeaf2c8f444545128de04b359cc64ea764736f6c63430008060033",
}

// ChainStatusLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use ChainStatusLibraryMetaData.ABI instead.
var ChainStatusLibraryABI = ChainStatusLibraryMetaData.ABI

// ChainStatusLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ChainStatusLibraryMetaData.Bin instead.
var ChainStatusLibraryBin = ChainStatusLibraryMetaData.Bin

// DeployChainStatusLibrary deploys a new Ethereum contract, binding an instance of ChainStatusLibrary to it.
func DeployChainStatusLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ChainStatusLibrary, error) {
	parsed, err := ChainStatusLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ChainStatusLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ChainStatusLibrary{ChainStatusLibraryCaller: ChainStatusLibraryCaller{contract: contract}, ChainStatusLibraryTransactor: ChainStatusLibraryTransactor{contract: contract}, ChainStatusLibraryFilterer: ChainStatusLibraryFilterer{contract: contract}}, nil
}

// ChainStatusLibrary is an auto generated Go binding around an Ethereum contract.
type ChainStatusLibrary struct {
	ChainStatusLibraryCaller     // Read-only binding to the contract
	ChainStatusLibraryTransactor // Write-only binding to the contract
	ChainStatusLibraryFilterer   // Log filterer for contract events
}

// ChainStatusLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type ChainStatusLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ChainStatusLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ChainStatusLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ChainStatusLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ChainStatusLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ChainStatusLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ChainStatusLibrarySession struct {
	Contract     *ChainStatusLibrary // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// ChainStatusLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ChainStatusLibraryCallerSession struct {
	Contract *ChainStatusLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// ChainStatusLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ChainStatusLibraryTransactorSession struct {
	Contract     *ChainStatusLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// ChainStatusLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type ChainStatusLibraryRaw struct {
	Contract *ChainStatusLibrary // Generic contract binding to access the raw methods on
}

// ChainStatusLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ChainStatusLibraryCallerRaw struct {
	Contract *ChainStatusLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// ChainStatusLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ChainStatusLibraryTransactorRaw struct {
	Contract *ChainStatusLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewChainStatusLibrary creates a new instance of ChainStatusLibrary, bound to a specific deployed contract.
func NewChainStatusLibrary(address common.Address, backend bind.ContractBackend) (*ChainStatusLibrary, error) {
	contract, err := bindChainStatusLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ChainStatusLibrary{ChainStatusLibraryCaller: ChainStatusLibraryCaller{contract: contract}, ChainStatusLibraryTransactor: ChainStatusLibraryTransactor{contract: contract}, ChainStatusLibraryFilterer: ChainStatusLibraryFilterer{contract: contract}}, nil
}

// NewChainStatusLibraryCaller creates a new read-only instance of ChainStatusLibrary, bound to a specific deployed contract.
func NewChainStatusLibraryCaller(address common.Address, caller bind.ContractCaller) (*ChainStatusLibraryCaller, error) {
	contract, err := bindChainStatusLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ChainStatusLibraryCaller{contract: contract}, nil
}

// NewChainStatusLibraryTransactor creates a new write-only instance of ChainStatusLibrary, bound to a specific deployed contract.
func NewChainStatusLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*ChainStatusLibraryTransactor, error) {
	contract, err := bindChainStatusLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ChainStatusLibraryTransactor{contract: contract}, nil
}

// NewChainStatusLibraryFilterer creates a new log filterer instance of ChainStatusLibrary, bound to a specific deployed contract.
func NewChainStatusLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*ChainStatusLibraryFilterer, error) {
	contract, err := bindChainStatusLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ChainStatusLibraryFilterer{contract: contract}, nil
}

// bindChainStatusLibrary binds a generic wrapper to an already deployed contract.
func bindChainStatusLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ChainStatusLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ChainStatusLibrary *ChainStatusLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ChainStatusLibrary.Contract.ChainStatusLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ChainStatusLibrary *ChainStatusLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ChainStatusLibrary.Contract.ChainStatusLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ChainStatusLibrary *ChainStatusLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ChainStatusLibrary.Contract.ChainStatusLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ChainStatusLibrary *ChainStatusLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ChainStatusLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ChainStatusLibrary *ChainStatusLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ChainStatusLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ChainStatusLibrary *ChainStatusLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ChainStatusLibrary.Contract.contract.Transact(opts, method, params...)
}

// CircuitBreakerMetaData contains all meta data concerning the CircuitBreaker contract.
var CircuitBreakerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"cbState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// CircuitBreakerABI is the input ABI used to generate the binding from.
// Deprecated: Use CircuitBreakerMetaData.ABI instead.
var CircuitBreakerABI = CircuitBreakerMetaData.ABI

// CircuitBreaker is an auto generated Go binding around an Ethereum contract.
type CircuitBreaker struct {
	CircuitBreakerCaller     // Read-only binding to the contract
	CircuitBreakerTransactor // Write-only binding to the contract
	CircuitBreakerFilterer   // Log filterer for contract events
}

// CircuitBreakerCaller is an auto generated read-only Go binding around an Ethereum contract.
type CircuitBreakerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CircuitBreakerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type CircuitBreakerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CircuitBreakerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CircuitBreakerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CircuitBreakerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type CircuitBreakerSession struct {
	Contract     *CircuitBreaker   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CircuitBreakerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type CircuitBreakerCallerSession struct {
	Contract *CircuitBreakerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// CircuitBreakerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type CircuitBreakerTransactorSession struct {
	Contract     *CircuitBreakerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// CircuitBreakerRaw is an auto generated low-level Go binding around an Ethereum contract.
type CircuitBreakerRaw struct {
	Contract *CircuitBreaker // Generic contract binding to access the raw methods on
}

// CircuitBreakerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type CircuitBreakerCallerRaw struct {
	Contract *CircuitBreakerCaller // Generic read-only contract binding to access the raw methods on
}

// CircuitBreakerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type CircuitBreakerTransactorRaw struct {
	Contract *CircuitBreakerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCircuitBreaker creates a new instance of CircuitBreaker, bound to a specific deployed contract.
func NewCircuitBreaker(address common.Address, backend bind.ContractBackend) (*CircuitBreaker, error) {
	contract, err := bindCircuitBreaker(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CircuitBreaker{CircuitBreakerCaller: CircuitBreakerCaller{contract: contract}, CircuitBreakerTransactor: CircuitBreakerTransactor{contract: contract}, CircuitBreakerFilterer: CircuitBreakerFilterer{contract: contract}}, nil
}

// NewCircuitBreakerCaller creates a new read-only instance of CircuitBreaker, bound to a specific deployed contract.
func NewCircuitBreakerCaller(address common.Address, caller bind.ContractCaller) (*CircuitBreakerCaller, error) {
	contract, err := bindCircuitBreaker(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CircuitBreakerCaller{contract: contract}, nil
}

// NewCircuitBreakerTransactor creates a new write-only instance of CircuitBreaker, bound to a specific deployed contract.
func NewCircuitBreakerTransactor(address common.Address, transactor bind.ContractTransactor) (*CircuitBreakerTransactor, error) {
	contract, err := bindCircuitBreaker(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CircuitBreakerTransactor{contract: contract}, nil
}

// NewCircuitBreakerFilterer creates a new log filterer instance of CircuitBreaker, bound to a specific deployed contract.
func NewCircuitBreakerFilterer(address common.Address, filterer bind.ContractFilterer) (*CircuitBreakerFilterer, error) {
	contract, err := bindCircuitBreaker(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CircuitBreakerFilterer{contract: contract}, nil
}

// bindCircuitBreaker binds a generic wrapper to an already deployed contract.
func bindCircuitBreaker(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(CircuitBreakerABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CircuitBreaker *CircuitBreakerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CircuitBreaker.Contract.CircuitBreakerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CircuitBreaker *CircuitBreakerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CircuitBreaker.Contract.CircuitBreakerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CircuitBreaker *CircuitBreakerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CircuitBreaker.Contract.CircuitBreakerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CircuitBreaker *CircuitBreakerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CircuitBreaker.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CircuitBreaker *CircuitBreakerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CircuitBreaker.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CircuitBreaker *CircuitBreakerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CircuitBreaker.Contract.contract.Transact(opts, method, params...)
}

// CbState is a free data retrieval call binding the contract method 0x608115df.
//
// Solidity: function cbState() view returns(bool)
func (_CircuitBreaker *CircuitBreakerCaller) CbState(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _CircuitBreaker.contract.Call(opts, &out, "cbState")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CbState is a free data retrieval call binding the contract method 0x608115df.
//
// Solidity: function cbState() view returns(bool)
func (_CircuitBreaker *CircuitBreakerSession) CbState() (bool, error) {
	return _CircuitBreaker.Contract.CbState(&_CircuitBreaker.CallOpts)
}

// CbState is a free data retrieval call binding the contract method 0x608115df.
//
// Solidity: function cbState() view returns(bool)
func (_CircuitBreaker *CircuitBreakerCallerSession) CbState() (bool, error) {
	return _CircuitBreaker.Contract.CbState(&_CircuitBreaker.CallOpts)
}

// ConstantsMetaData contains all meta data concerning the Constants contract.
var ConstantsMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea264697066735822122021eae01290bc1ca660f6c8b7dad325bf58684508423305959b594241195dad0a64736f6c63430008060033",
}

// ConstantsABI is the input ABI used to generate the binding from.
// Deprecated: Use ConstantsMetaData.ABI instead.
var ConstantsABI = ConstantsMetaData.ABI

// ConstantsBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ConstantsMetaData.Bin instead.
var ConstantsBin = ConstantsMetaData.Bin

// DeployConstants deploys a new Ethereum contract, binding an instance of Constants to it.
func DeployConstants(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Constants, error) {
	parsed, err := ConstantsMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ConstantsBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Constants{ConstantsCaller: ConstantsCaller{contract: contract}, ConstantsTransactor: ConstantsTransactor{contract: contract}, ConstantsFilterer: ConstantsFilterer{contract: contract}}, nil
}

// Constants is an auto generated Go binding around an Ethereum contract.
type Constants struct {
	ConstantsCaller     // Read-only binding to the contract
	ConstantsTransactor // Write-only binding to the contract
	ConstantsFilterer   // Log filterer for contract events
}

// ConstantsCaller is an auto generated read-only Go binding around an Ethereum contract.
type ConstantsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ConstantsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ConstantsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ConstantsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ConstantsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ConstantsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ConstantsSession struct {
	Contract     *Constants        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ConstantsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ConstantsCallerSession struct {
	Contract *ConstantsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// ConstantsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ConstantsTransactorSession struct {
	Contract     *ConstantsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// ConstantsRaw is an auto generated low-level Go binding around an Ethereum contract.
type ConstantsRaw struct {
	Contract *Constants // Generic contract binding to access the raw methods on
}

// ConstantsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ConstantsCallerRaw struct {
	Contract *ConstantsCaller // Generic read-only contract binding to access the raw methods on
}

// ConstantsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ConstantsTransactorRaw struct {
	Contract *ConstantsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewConstants creates a new instance of Constants, bound to a specific deployed contract.
func NewConstants(address common.Address, backend bind.ContractBackend) (*Constants, error) {
	contract, err := bindConstants(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Constants{ConstantsCaller: ConstantsCaller{contract: contract}, ConstantsTransactor: ConstantsTransactor{contract: contract}, ConstantsFilterer: ConstantsFilterer{contract: contract}}, nil
}

// NewConstantsCaller creates a new read-only instance of Constants, bound to a specific deployed contract.
func NewConstantsCaller(address common.Address, caller bind.ContractCaller) (*ConstantsCaller, error) {
	contract, err := bindConstants(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ConstantsCaller{contract: contract}, nil
}

// NewConstantsTransactor creates a new write-only instance of Constants, bound to a specific deployed contract.
func NewConstantsTransactor(address common.Address, transactor bind.ContractTransactor) (*ConstantsTransactor, error) {
	contract, err := bindConstants(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ConstantsTransactor{contract: contract}, nil
}

// NewConstantsFilterer creates a new log filterer instance of Constants, bound to a specific deployed contract.
func NewConstantsFilterer(address common.Address, filterer bind.ContractFilterer) (*ConstantsFilterer, error) {
	contract, err := bindConstants(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ConstantsFilterer{contract: contract}, nil
}

// bindConstants binds a generic wrapper to an already deployed contract.
func bindConstants(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ConstantsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Constants *ConstantsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Constants.Contract.ConstantsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Constants *ConstantsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Constants.Contract.ConstantsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Constants *ConstantsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Constants.Contract.ConstantsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Constants *ConstantsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Constants.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Constants *ConstantsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Constants.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Constants *ConstantsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Constants.Contract.contract.Transact(opts, method, params...)
}

// ContextMetaData contains all meta data concerning the Context contract.
var ContextMetaData = &bind.MetaData{
	ABI: "[]",
}

// ContextABI is the input ABI used to generate the binding from.
// Deprecated: Use ContextMetaData.ABI instead.
var ContextABI = ContextMetaData.ABI

// Context is an auto generated Go binding around an Ethereum contract.
type Context struct {
	ContextCaller     // Read-only binding to the contract
	ContextTransactor // Write-only binding to the contract
	ContextFilterer   // Log filterer for contract events
}

// ContextCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContextCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContextTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContextTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContextFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContextFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContextSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContextSession struct {
	Contract     *Context          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ContextCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContextCallerSession struct {
	Contract *ContextCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// ContextTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContextTransactorSession struct {
	Contract     *ContextTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// ContextRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContextRaw struct {
	Contract *Context // Generic contract binding to access the raw methods on
}

// ContextCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContextCallerRaw struct {
	Contract *ContextCaller // Generic read-only contract binding to access the raw methods on
}

// ContextTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContextTransactorRaw struct {
	Contract *ContextTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContext creates a new instance of Context, bound to a specific deployed contract.
func NewContext(address common.Address, backend bind.ContractBackend) (*Context, error) {
	contract, err := bindContext(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Context{ContextCaller: ContextCaller{contract: contract}, ContextTransactor: ContextTransactor{contract: contract}, ContextFilterer: ContextFilterer{contract: contract}}, nil
}

// NewContextCaller creates a new read-only instance of Context, bound to a specific deployed contract.
func NewContextCaller(address common.Address, caller bind.ContractCaller) (*ContextCaller, error) {
	contract, err := bindContext(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContextCaller{contract: contract}, nil
}

// NewContextTransactor creates a new write-only instance of Context, bound to a specific deployed contract.
func NewContextTransactor(address common.Address, transactor bind.ContractTransactor) (*ContextTransactor, error) {
	contract, err := bindContext(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContextTransactor{contract: contract}, nil
}

// NewContextFilterer creates a new log filterer instance of Context, bound to a specific deployed contract.
func NewContextFilterer(address common.Address, filterer bind.ContractFilterer) (*ContextFilterer, error) {
	contract, err := bindContext(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContextFilterer{contract: contract}, nil
}

// bindContext binds a generic wrapper to an already deployed contract.
func bindContext(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ContextABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Context *ContextRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Context.Contract.ContextCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Context *ContextRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Context.Contract.ContextTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Context *ContextRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Context.Contract.ContextTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Context *ContextCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Context.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Context *ContextTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Context.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Context *ContextTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Context.Contract.contract.Transact(opts, method, params...)
}

// CryptoMetaData contains all meta data concerning the Crypto contract.
var CryptoMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256[2][]\",\"name\":\"sigs\",\"type\":\"uint256[2][]\"},{\"internalType\":\"uint256[]\",\"name\":\"indices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"invArray\",\"type\":\"uint256[]\"}],\"name\":\"AggregateSignatures\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"HashToG1\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"h\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2][]\",\"name\":\"pointsG1\",\"type\":\"uint256[2][]\"},{\"internalType\":\"uint256[]\",\"name\":\"indices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"invArray\",\"type\":\"uint256[]\"}],\"name\":\"LagrangeInterpolationG1\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"privK\",\"type\":\"uint256\"}],\"name\":\"Sign\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"sig\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"uint256[2]\",\"name\":\"sig\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[4]\",\"name\":\"pubK\",\"type\":\"uint256[4]\"}],\"name\":\"Verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"v\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"}],\"name\":\"baseToG1\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"h\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"input\",\"type\":\"uint256[4]\"}],\"name\":\"bn128_add\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"result\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[12]\",\"name\":\"input\",\"type\":\"uint256[12]\"}],\"name\":\"bn128_check_pairing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"point\",\"type\":\"uint256[2]\"}],\"name\":\"bn128_is_on_curve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"input\",\"type\":\"uint256[3]\"}],\"name\":\"bn128_multiply\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"result\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"honestIndices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"dishonestIndices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"checkIndices\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"validIndices\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"invArray\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"maxIndex\",\"type\":\"uint256\"}],\"name\":\"checkInverses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"uint256Array\",\"type\":\"uint256[]\"}],\"name\":\"computeArrayMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"x1\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"y1\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"x2\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"y2\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"proof\",\"type\":\"uint256[2]\"}],\"name\":\"dleq_verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"proof_is_valid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"e\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"}],\"name\":\"expmod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes1\",\"name\":\"c0\",\"type\":\"bytes1\"},{\"internalType\":\"bytes1\",\"name\":\"c1\",\"type\":\"bytes1\"}],\"name\":\"hashToBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"}],\"name\":\"invert\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"}],\"name\":\"legendre\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"chi\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"k\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"j\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"invArray\",\"type\":\"uint256[]\"}],\"name\":\"liRjPartialConst\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"}],\"name\":\"neg\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"input\",\"type\":\"uint256[2]\"}],\"name\":\"safeSigningPoint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"}],\"name\":\"sign0\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"}],\"name\":\"sqrt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50613d4a806100206000396000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c806382688f14116100c3578063ccba31231161007c578063ccba312314610482578063e480a92e146104b2578063e664725b146104e2578063e81ee0e314610512578063f022e06114610542578063f4d7d33d146105725761014d565b806382688f14146103625780638b6eb76e1461039257806395add79c146103c257806396d95a6f146103f2578063a218e42614610422578063b87cbafc146104525761014d565b80636bdf477c116101155780636bdf477c146102425780636ef064a4146102725780637351ee37146102a257806377d2f203146102d2578063783ce4581461030257806380f4a922146103325761014d565b8063063675871461015257806316534acd1461018257806338529ab4146101b257806358ef876a146101e2578063677342ce14610212575b600080fd5b61016c60048036038101906101679190612a81565b6105a2565b6040516101799190613095565b60405180910390f35b61019c6004803603810190610197919061271b565b6105b8565b6040516101a9919061307a565b60405180910390f35b6101cc60048036038101906101c79190612af0565b6105d6565b6040516101d9919061326b565b60405180910390f35b6101fc60048036038101906101f79190612be8565b6105ec565b604051610209919061326b565b60405180910390f35b61022c60048036038101906102279190612bbb565b610602565b604051610239919061326b565b60405180910390f35b61025c60048036038101906102579190612b5f565b610614565b604051610269919061307a565b60405180910390f35b61028c60048036038101906102879190612bbb565b61062e565b60405161029991906130b0565b60405180910390f35b6102bc60048036038101906102b79190612bbb565b610640565b6040516102c9919061326b565b60405180910390f35b6102ec60048036038101906102e79190612bbb565b610652565b6040516102f9919061326b565b60405180910390f35b61031c60048036038101906103179190612c57565b610664565b604051610329919061326b565b60405180910390f35b61034c60048036038101906103479190612951565b61067a565b6040516103599190613095565b60405180910390f35b61037c600480360381019061037791906128ae565b610690565b604051610389919061307a565b60405180910390f35b6103ac60048036038101906103a79190612bbb565b6106a8565b6040516103b9919061307a565b60405180910390f35b6103dc60048036038101906103d79190612a38565b6106c0565b6040516103e9919061307a565b60405180910390f35b61040c60048036038101906104079190612804565b6106d8565b6040516104199190613095565b60405180910390f35b61043c60048036038101906104379190612908565b6106ea565b604051610449919061326b565b60405180910390f35b61046c600480360381019061046791906127d6565b6106fc565b6040516104799190613095565b60405180910390f35b61049c60048036038101906104979190612bbb565b61070e565b6040516104a9919061326b565b60405180910390f35b6104cc60048036038101906104c791906129dc565b610720565b6040516104d99190613095565b60405180910390f35b6104fc60048036038101906104f791906128db565b610734565b604051610509919061307a565b60405180910390f35b61052c60048036038101906105279190612831565b61074c565b6040516105399190613095565b60405180910390f35b61055c6004803603810190610557919061271b565b610766565b604051610569919061307a565b60405180910390f35b61058c60048036038101906105879190612804565b610784565b6040516105999190613095565b60405180910390f35b60006105af848484610796565b90509392505050565b6105c06122b9565b6105cc8585858561094f565b9050949350505050565b60006105e3848484610beb565b90509392505050565b60006105f9848484610cda565b90509392505050565b600061060d82610e19565b9050919050565b61061c6122b9565b6106268383610e6d565b905092915050565b600061063982610ee4565b9050919050565b600061064b82610f69565b9050919050565b600061065d82610fbd565b9050919050565b6000610671848484611004565b90509392505050565b6000610687848484611086565b90509392505050565b6106986122b9565b6106a1826111cb565b9050919050565b6106b06122b9565b6106b982611229565b9050919050565b6106c86122b9565b6106d1826118b3565b9050919050565b60006106e382611a27565b9050919050565b60006106f582611a7f565b9050919050565b600061070782611af9565b9050919050565b600061071982611b79565b9050919050565b600061072c8383611bd0565b905092915050565b61073c6122b9565b61074582611cc7565b9050919050565b600061075b8686868686611d25565b905095945050505050565b61076e6122b9565b61077a85858585612068565b9050949350505050565b600061078f82612170565b9050919050565b60006107a06122b9565b6107a9856118b3565b9050610945604051806101800160405280866000600281106107ce576107cd6138a7565b5b60200201518152602001866001600281106107ec576107eb6138a7565b5b602002015181526020017f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed81526020017f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec81526020017f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d8152602001836000600281106108a2576108a16138a7565b5b60200201518152602001836001600281106108c0576108bf6138a7565b5b60200201518152602001856000600481106108de576108dd6138a7565b5b60200201518152602001856001600481106108fc576108fb6138a7565b5b602002015181526020018560026004811061091a576109196138a7565b5b6020020151815260200185600360048110610938576109376138a7565b5b6020020151815250611af9565b9150509392505050565b6109576122b9565b835185511461099b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610992906131ab565b60405180910390fd5b6109a36122b9565b6000816000600281106109b9576109b86138a7565b5b6020020181815250506000816001600281106109d8576109d76138a7565b5b6020020181815250506000806000806000806109f26122b9565b600096505b8b51871015610bd8578b8781518110610a1357610a126138a7565b5b602002602001015194508a871115610a2a57610bd8565b60019250600095505b8b51861015610ac8578b8681518110610a4f57610a4e6138a7565b5b602002602001015193508a861115610a6657610ac8565b84841415610a7357610ab5565b610a7e84868c610cda565b91507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000180610aaf57610aae613878565b5b82840992505b8580610ac0906137c7565b965050610a33565b8c8781518110610adb57610ada6138a7565b5b60200260200101519050610b38604051806060016040528083600060028110610b0757610b066138a7565b5b6020020151815260200183600160028110610b2557610b246138a7565b5b60200201518152602001858152506111cb565b9050610bc360405180608001604052808a600060028110610b5c57610b5b6138a7565b5b602002015181526020018a600160028110610b7a57610b796138a7565b5b6020020151815260200183600060028110610b9857610b976138a7565b5b6020020151815260200183600160028110610bb657610bb56138a7565b5b6020020151815250611cc7565b97508680610bd0906137c7565b9750506109f7565b8798505050505050505050949350505050565b6000808385604051602001610c01929190613052565b6040516020818303038152906040528051906020012060001c905060008386604051602001610c31929190613052565b6040516020818303038152906040528051906020012060001c90507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780610c7b57610c7a613878565b5b817f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780610cab57610caa613878565b5b7f0e0a77c19a07df2f666ea36f7879462c0a78eb28f5c70b3dd35d438dc58f0d9d850908925050509392505050565b600082841415610d1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d169061320b565b60405180910390fd5b6000849050600084861115610d41578486610d3a91906136d4565b9050610db0565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000180610d7057610d6f613878565b5b60017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001610d9d91906136d4565b830991508585610dad91906136d4565b90505b83600182610dbe91906136d4565b81518110610dcf57610dce6138a7565b5b602002602001015190507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000180610e0857610e07613878565b5b818309905080925050509392505050565b6000610e66827f0c19139cb84c680a6e14116da060561765e05aa45a1c72a34f082305b61f3f527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47611004565b9050919050565b610e756122b9565b610e7d6122b9565b610e86846118b3565b9050610edb604051806060016040528083600060028110610eaa57610ea96138a7565b5b6020020151815260200183600160028110610ec857610ec76138a7565b5b60200201518152602001858152506111cb565b91505092915050565b600080610f32837f183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea37f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47611004565b905060008114610f5e5760018082166002610f4d9190613529565b610f579190613640565b9150610f63565b600091505b50919050565b6000610fb6827f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd457f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47611004565b9050919050565b600080821415610fd05760009050610fff565b817f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47610ffc91906136d4565b90505b919050565b60008060405160208152602080820152602060408201528560608201528460808201528360a082015260208160c08360055afa915080519250508061107e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611075906130cb565b60405180910390fd5b509392505050565b60006001905060008060008085116110a1576110a061381a565b5b61010085106110b3576110b261381a565b5b600092505b8651831015611133578683815181106110d4576110d36138a7565b5b6020026020010151905060008114806110ec57508481115b156110fa5760009350611133565b6000816001901b8316141561111757806001901b82179150611120565b60009350611133565b828061112b906137c7565b9350506110b8565b83611140575050506111c4565b600092505b85518310156111c057858381518110611161576111606138a7565b5b60200260200101519050600081148061117957508481115b1561118757600093506111c0565b6000816001901b831614156111a457806001901b821791506111ad565b600093506111c0565b82806111b8906137c7565b935050611145565b5050505b9392505050565b6111d36122b9565b60006040826060856007600019fa905080611223576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121a9061322b565b60405180910390fd5b50919050565b6112316122b9565b60008060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061126557611264613878565b5b85860992507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061129957611298613878565b5b6004840891507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806112ce576112cd613878565b5b82840990506112dc81610f69565b905060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061130f5761130e613878565b5b83840990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061134357611342613878565b5b83820990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061137757611376613878565b5b848509935060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806113ad576113ac613878565b5b8577b3c4d79d41a91759a9e4c7e359b6b89eaec68e62effffffd0990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806113f9576113f8613878565b5b838209905061140781610fbd565b90507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061143857611437613878565b5b7759e26bcea0d48bacd4f263f1acdb5c4f5763473177fffffe8208905060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061148657611485613878565b5b60018308905061149581610fbd565b905060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806114c8576114c7613878565b5b847f2042def740cbc01bd03583cf0100e593ba56470b9af68708d2c05d64905353850990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061151c5761151b613878565b5b858209905061152a81610fbd565b90507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061155b5761155a613878565b5b60018208905060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061159257611591613878565b5b84850990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806115c6576115c5613878565b5b84820990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806115fa576115f9613878565b5b600382089050600061160b82610ee4565b90507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061163c5761163b613878565b5b84850991507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806116705761166f613878565b5b84830991507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806116a4576116a3613878565b5b60038308915060006116b583610ee4565b90506000600160046003846116ca9190613640565b6001866116d79190613640565b6116e19190613529565b6116eb91906134bf565b6116f5919061342b565b90506000600182141561170a57879050611720565b600282141561171b5786905061171f565b8590505b5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061174f5761174e613878565b5b81820994507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061178357611782613878565b5b81860994507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806117b7576117b6613878565b5b6003860894506117c685610e19565b945060006117d38f611b79565b90507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061180457611803613878565b5b8187099550611826604051806040016040528084815260200188815250612170565b611865576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161185c9061314b565b60405180910390fd5b818e60006002811061187a576118796138a7565b5b602002018181525050858e600160028110611898576118976138a7565b5b60200201818152505050505050505050505050505050919050565b6118bb6122b9565b60006118d083600060f81b600160f81b610beb565b905060006118e784600260f81b600360f81b610beb565b905060006118f483611229565b9050600061190183611229565b905061198c604051806080016040528084600060028110611925576119246138a7565b5b6020020151815260200184600160028110611943576119426138a7565b5b6020020151815260200183600060028110611961576119606138a7565b5b602002015181526020018360016002811061197f5761197e6138a7565b5b6020020151815250611cc7565b945061199785612170565b6119d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119cd906130eb565b60405180910390fd5b6119df85611a27565b611a1e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a15906131cb565b60405180910390fd5b50505050919050565b60008082600060028110611a3e57611a3d6138a7565b5b60200201511480611a675750600182600060028110611a6057611a5f6138a7565b5b6020020151145b15611a755760009050611a7a565b600190505b919050565b600080600083600081518110611a9857611a976138a7565b5b602002602001015190506000600190505b8451811015611aee57848181518110611ac557611ac46138a7565b5b6020026020010151925081831115611adb578291505b8080611ae6906137c7565b915050611aa9565b508092505050919050565b6000611b036122db565b6000602082610180866008600019fa905080611b54576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b4b9061324b565b60405180910390fd5b600182600060018110611b6a57611b696138a7565b5b60200201511492505050919050565b6000600190507f183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea3821115611bcb577f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4690505b919050565b6000806000806000600190508651600187611beb91906136d4565b1115611c2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c239061312b565b60405180910390fd5b600193505b85841015611cba5786600185611c4791906136d4565b81518110611c5857611c576138a7565b5b602002602001015192507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000180611c9157611c90613878565b5b838509915060018214611ca75760009050611cba565b8380611cb2906137c7565b945050611c31565b8094505050505092915050565b611ccf6122b9565b60006040826080856006600019fa905080611d1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d169061310b565b60405180910390fd5b50919050565b6000611d2f6122b9565b611d376122b9565b611da260405180606001604052808a600060028110611d5957611d586138a7565b5b602002015181526020018a600160028110611d7757611d766138a7565b5b6020020151815260200186600160028110611d9557611d946138a7565b5b60200201518152506111cb565b9150611e0f604051806060016040528089600060028110611dc657611dc56138a7565b5b6020020151815260200189600160028110611de457611de36138a7565b5b6020020151815260200186600060028110611e0257611e016138a7565b5b60200201518152506111cb565b90506000611e9c604051806080016040528085600060028110611e3557611e346138a7565b5b6020020151815260200185600160028110611e5357611e526138a7565b5b6020020151815260200184600060028110611e7157611e706138a7565b5b6020020151815260200184600160028110611e8f57611e8e6138a7565b5b6020020151815250611cc7565b9050611f09604051806060016040528089600060028110611ec057611ebf6138a7565b5b6020020151815260200189600160028110611ede57611edd6138a7565b5b6020020151815260200187600160028110611efc57611efb6138a7565b5b60200201518152506111cb565b9250611f76604051806060016040528088600060028110611f2d57611f2c6138a7565b5b6020020151815260200188600160028110611f4b57611f4a6138a7565b5b6020020151815260200187600060028110611f6957611f686138a7565b5b60200201518152506111cb565b91506000612003604051806080016040528086600060028110611f9c57611f9b6138a7565b5b6020020151815260200186600160028110611fba57611fb96138a7565b5b6020020151815260200185600060028110611fd857611fd76138a7565b5b6020020151815260200185600160028110611ff657611ff56138a7565b5b6020020151815250611cc7565b905060008a8a8a8a868660405160200161202296959493929190612fe2565b6040516020818303038152906040528051906020012060001c905086600060028110612051576120506138a7565b5b602002015181149550505050505095945050505050565b6120706122b9565b83518551146120b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120ab906131eb565b60405180910390fd5b828551116120f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120ee9061316b565b60405180910390fd5b600061210285611a7f565b905061210e8382611bd0565b61214d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121449061318b565b60405180910390fd5b6121556122b9565b6121618787878761094f565b90508092505050949350505050565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806121a1576121a0613878565b5b60037f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806121d2576121d1613878565b5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061220157612200613878565b5b85600060028110612215576122146138a7565b5b60200201518660006002811061222e5761222d6138a7565b5b60200201510985600060028110612248576122476138a7565b5b602002015109087f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061227e5761227d613878565b5b83600160028110612292576122916138a7565b5b6020020151846001600281106122ab576122aa6138a7565b5b602002015109149050919050565b6040518060400160405280600290602082028036833780820191505090505090565b6040518060200160405280600190602082028036833780820191505090505090565b600061231061230b846132ab565b613286565b905080838252602082019050828560408602820111156123335761233261390a565b5b60005b8581101561236357816123498882612614565b845260208401935060408301925050600181019050612336565b5050509392505050565b600061238061237b846132d7565b613286565b9050808285602086028201111561239a5761239961390a565b5b60005b858110156123ca57816123b08882612706565b84526020840193506020830192505060018101905061239d565b5050509392505050565b60006123e76123e2846132fd565b613286565b905080828560208602820111156124015761240061390a565b5b60005b8581101561243157816124178882612706565b845260208401935060208301925050600181019050612404565b5050509392505050565b600061244e61244984613323565b613286565b905080828560208602820111156124685761246761390a565b5b60005b85811015612498578161247e8882612706565b84526020840193506020830192505060018101905061246b565b5050509392505050565b60006124b56124b084613349565b613286565b905080828560208602820111156124cf576124ce61390a565b5b60005b858110156124ff57816124e58882612706565b8452602084019350602083019250506001810190506124d2565b5050509392505050565b600061251c6125178461336f565b613286565b9050808382526020820190508285602086028201111561253f5761253e61390a565b5b60005b8581101561256f57816125558882612706565b845260208401935060208301925050600181019050612542565b5050509392505050565b600061258c6125878461339b565b613286565b9050828152602081018484840111156125a8576125a761390f565b5b6125b3848285613754565b509392505050565b600082601f8301126125d0576125cf613905565b5b81356125e08482602086016122fd565b91505092915050565b600082601f8301126125fe576125fd613905565b5b600c61260b84828561236d565b91505092915050565b600082601f83011261262957612628613905565b5b60026126368482856123d4565b91505092915050565b600082601f83011261265457612653613905565b5b600361266184828561243b565b91505092915050565b600082601f83011261267f5761267e613905565b5b600461268c8482856124a2565b91505092915050565b600082601f8301126126aa576126a9613905565b5b81356126ba848260208601612509565b91505092915050565b6000813590506126d281613ce6565b92915050565b600082601f8301126126ed576126ec613905565b5b81356126fd848260208601612579565b91505092915050565b60008135905061271581613cfd565b92915050565b6000806000806080858703121561273557612734613919565b5b600085013567ffffffffffffffff81111561275357612752613914565b5b61275f878288016125bb565b945050602085013567ffffffffffffffff8111156127805761277f613914565b5b61278c87828801612695565b935050604061279d87828801612706565b925050606085013567ffffffffffffffff8111156127be576127bd613914565b5b6127ca87828801612695565b91505092959194509250565b600061018082840312156127ed576127ec613919565b5b60006127fb848285016125e9565b91505092915050565b60006040828403121561281a57612819613919565b5b600061282884828501612614565b91505092915050565b6000806000806000610140868803121561284e5761284d613919565b5b600061285c88828901612614565b955050604061286d88828901612614565b945050608061287e88828901612614565b93505060c061288f88828901612614565b9250506101006128a188828901612614565b9150509295509295909350565b6000606082840312156128c4576128c3613919565b5b60006128d28482850161263f565b91505092915050565b6000608082840312156128f1576128f0613919565b5b60006128ff8482850161266a565b91505092915050565b60006020828403121561291e5761291d613919565b5b600082013567ffffffffffffffff81111561293c5761293b613914565b5b61294884828501612695565b91505092915050565b60008060006060848603121561296a57612969613919565b5b600084013567ffffffffffffffff81111561298857612987613914565b5b61299486828701612695565b935050602084013567ffffffffffffffff8111156129b5576129b4613914565b5b6129c186828701612695565b92505060406129d286828701612706565b9150509250925092565b600080604083850312156129f3576129f2613919565b5b600083013567ffffffffffffffff811115612a1157612a10613914565b5b612a1d85828601612695565b9250506020612a2e85828601612706565b9150509250929050565b600060208284031215612a4e57612a4d613919565b5b600082013567ffffffffffffffff811115612a6c57612a6b613914565b5b612a78848285016126d8565b91505092915050565b600080600060e08486031215612a9a57612a99613919565b5b600084013567ffffffffffffffff811115612ab857612ab7613914565b5b612ac4868287016126d8565b9350506020612ad586828701612614565b9250506060612ae68682870161266a565b9150509250925092565b600080600060608486031215612b0957612b08613919565b5b600084013567ffffffffffffffff811115612b2757612b26613914565b5b612b33868287016126d8565b9350506020612b44868287016126c3565b9250506040612b55868287016126c3565b9150509250925092565b60008060408385031215612b7657612b75613919565b5b600083013567ffffffffffffffff811115612b9457612b93613914565b5b612ba0858286016126d8565b9250506020612bb185828601612706565b9150509250929050565b600060208284031215612bd157612bd0613919565b5b6000612bdf84828501612706565b91505092915050565b600080600060608486031215612c0157612c00613919565b5b6000612c0f86828701612706565b9350506020612c2086828701612706565b925050604084013567ffffffffffffffff811115612c4157612c40613914565b5b612c4d86828701612695565b9150509250925092565b600080600060608486031215612c7057612c6f613919565b5b6000612c7e86828701612706565b9350506020612c8f86828701612706565b9250506040612ca086828701612706565b9150509250925092565b6000612cb68383612fb5565b60208301905092915050565b6000612cce8383612fd3565b60208301905092915050565b612ce3816133d6565b612ced81846133f9565b9250612cf8826133cc565b8060005b83811015612d29578151612d108782612caa565b9650612d1b836133ec565b925050600181019050612cfc565b505050505050565b612d3a816133d6565b612d448184613404565b9250612d4f826133cc565b8060005b83811015612d80578151612d678782612cc2565b9650612d72836133ec565b925050600181019050612d53565b505050505050565b612d9181613708565b82525050565b612da8612da382613714565b613810565b82525050565b6000612db9826133e1565b612dc3818561340f565b9350612dd3818560208601613763565b80840191505092915050565b612de881613740565b82525050565b6000612dfb601d8361341a565b9150612e068261392f565b602082019050919050565b6000612e1e60298361341a565b9150612e2982613958565b604082019050919050565b6000612e41601e8361341a565b9150612e4c826139a7565b602082019050919050565b6000612e6460448361341a565b9150612e6f826139d0565b606082019050919050565b6000612e8760248361341a565b9150612e9282613a45565b604082019050919050565b6000612eaa603a8361341a565b9150612eb582613a94565b604082019050919050565b6000612ecd602a8361341a565b9150612ed882613ae3565b604082019050919050565b6000612ef0602c8361341a565b9150612efb82613b32565b604082019050919050565b6000612f13602a8361341a565b9150612f1e82613b81565b604082019050919050565b6000612f3660358361341a565b9150612f4182613bd0565b604082019050919050565b6000612f5960348361341a565b9150612f6482613c1f565b604082019050919050565b6000612f7c60248361341a565b9150612f8782613c6e565b604082019050919050565b6000612f9f601d8361341a565b9150612faa82613cbd565b602082019050919050565b612fbe8161374a565b82525050565b612fcd8161374a565b82525050565b612fdc8161374a565b82525050565b6000612fee8289612d31565b604082019150612ffe8288612d31565b60408201915061300e8287612d31565b60408201915061301e8286612d31565b60408201915061302e8285612d31565b60408201915061303e8284612d31565b604082019150819050979650505050505050565b600061305e8285612d97565b60018201915061306e8284612dae565b91508190509392505050565b600060408201905061308f6000830184612cda565b92915050565b60006020820190506130aa6000830184612d88565b92915050565b60006020820190506130c56000830184612ddf565b92915050565b600060208201905081810360008301526130e481612dee565b9050919050565b6000602082019050818103600083015261310481612e11565b9050919050565b6000602082019050818103600083015261312481612e34565b9050919050565b6000602082019050818103600083015261314481612e57565b9050919050565b6000602082019050818103600083015261316481612e7a565b9050919050565b6000602082019050818103600083015261318481612e9d565b9050919050565b600060208201905081810360008301526131a481612ec0565b9050919050565b600060208201905081810360008301526131c481612ee3565b9050919050565b600060208201905081810360008301526131e481612f06565b9050919050565b6000602082019050818103600083015261320481612f29565b9050919050565b6000602082019050818103600083015261322481612f4c565b9050919050565b6000602082019050818103600083015261324481612f6f565b9050919050565b6000602082019050818103600083015261326481612f92565b9050919050565b60006020820190506132806000830184612fc4565b92915050565b60006132906132a1565b905061329c8282613796565b919050565b6000604051905090565b600067ffffffffffffffff8211156132c6576132c56138d6565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156132f2576132f16138d6565b5b602082029050919050565b600067ffffffffffffffff821115613318576133176138d6565b5b602082029050919050565b600067ffffffffffffffff82111561333e5761333d6138d6565b5b602082029050919050565b600067ffffffffffffffff821115613364576133636138d6565b5b602082029050919050565b600067ffffffffffffffff82111561338a576133896138d6565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156133b6576133b56138d6565b5b6133bf8261391e565b9050602081019050919050565b6000819050919050565b600060029050919050565b600081519050919050565b6000602082019050919050565b600081905092915050565b600081905092915050565b600081905092915050565b600082825260208201905092915050565b600061343682613740565b915061344183613740565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0383136000831215161561347c5761347b613849565b5b817f80000000000000000000000000000000000000000000000000000000000000000383126000831216156134b4576134b3613849565b5b828201905092915050565b60006134ca82613740565b91506134d583613740565b9250826134e5576134e4613878565b5b600160000383147f80000000000000000000000000000000000000000000000000000000000000008314161561351e5761351d613849565b5b828205905092915050565b600061353482613740565b915061353f83613740565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561357e5761357d613849565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156135bb576135ba613849565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156135f8576135f7613849565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561363557613634613849565b5b828202905092915050565b600061364b82613740565b915061365683613740565b9250827f80000000000000000000000000000000000000000000000000000000000000000182126000841215161561369157613690613849565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0182136000841216156136c9576136c8613849565b5b828203905092915050565b60006136df8261374a565b91506136ea8361374a565b9250828210156136fd576136fc613849565b5b828203905092915050565b60008115159050919050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015613781578082015181840152602081019050613766565b83811115613790576000848401525b50505050565b61379f8261391e565b810181811067ffffffffffffffff821117156137be576137bd6138d6565b5b80604052505050565b60006137d28261374a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561380557613804613849565b5b600182019050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f6d6f64756c6172206578706f6e656e74696174696f6e2066616c696564000000600082015250565b7f496e76616c6964206861736820706f696e743a206e6f74206f6e20656c6c697060008201527f7469632063757276650000000000000000000000000000000000000000000000602082015250565b7f656c6c6970746963206375727665206164646974696f6e206661696c65640000600082015250565b7f636865636b496e7665727365733a20696e73756666696369656e7420696e766560008201527f7273657320666f722067726f7570207369676e61747572652063616c63756c6160208201527f74696f6e00000000000000000000000000000000000000000000000000000000604082015250565b7f496e76616c696420706f696e743a206e6f74206f6e20656c6c6970746963206360008201527f7572766500000000000000000000000000000000000000000000000000000000602082015250565b7f4661696c656420746f206d656574207265717569726564206e756d626572206f60008201527f66207369676e61747572657320666f72207468726573686f6c64000000000000602082015250565b7f696e76417272617920646f6573206e6f7420696e636c75646520636f7272656360008201527f7420696e76657273657300000000000000000000000000000000000000000000602082015250565b7f4d69736d61746368206265747765656e20706f696e7473473120616e6420696e60008201527f6469636573206172726179730000000000000000000000000000000000000000602082015250565b7f44616e6765726f7573206861736820706f696e743a206e6f742073616665206660008201527f6f72207369676e696e6700000000000000000000000000000000000000000000602082015250565b7f4d69736d61746368206265747765656e206c656e677468206f66207369676e6160008201527f747572657320616e6420696e6465782061727261790000000000000000000000602082015250565b7f4d7573742068617665206b20213d206a207768656e20636f6d707574696e672060008201527f526a207061727469616c20636f6e7374616e7473000000000000000000000000602082015250565b7f656c6c6970746963206375727665206d756c7469706c69636174696f6e20666160008201527f696c656400000000000000000000000000000000000000000000000000000000602082015250565b7f656c6c69707469632063757276652070616972696e67206661696c6564000000600082015250565b613cef81613714565b8114613cfa57600080fd5b50565b613d068161374a565b8114613d1157600080fd5b5056fea264697066735822122059b6fa9bfa73e780ed3993d6bc3f80e03b83f466473d30beb8e72248d9ab598564736f6c63430008060033",
}

// CryptoABI is the input ABI used to generate the binding from.
// Deprecated: Use CryptoMetaData.ABI instead.
var CryptoABI = CryptoMetaData.ABI

// CryptoBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use CryptoMetaData.Bin instead.
var CryptoBin = CryptoMetaData.Bin

// DeployCrypto deploys a new Ethereum contract, binding an instance of Crypto to it.
func DeployCrypto(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Crypto, error) {
	parsed, err := CryptoMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CryptoBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Crypto{CryptoCaller: CryptoCaller{contract: contract}, CryptoTransactor: CryptoTransactor{contract: contract}, CryptoFilterer: CryptoFilterer{contract: contract}}, nil
}

// Crypto is an auto generated Go binding around an Ethereum contract.
type Crypto struct {
	CryptoCaller     // Read-only binding to the contract
	CryptoTransactor // Write-only binding to the contract
	CryptoFilterer   // Log filterer for contract events
}

// CryptoCaller is an auto generated read-only Go binding around an Ethereum contract.
type CryptoCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CryptoTransactor is an auto generated write-only Go binding around an Ethereum contract.
type CryptoTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CryptoFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CryptoFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CryptoSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type CryptoSession struct {
	Contract     *Crypto           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CryptoCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type CryptoCallerSession struct {
	Contract *CryptoCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// CryptoTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type CryptoTransactorSession struct {
	Contract     *CryptoTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CryptoRaw is an auto generated low-level Go binding around an Ethereum contract.
type CryptoRaw struct {
	Contract *Crypto // Generic contract binding to access the raw methods on
}

// CryptoCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type CryptoCallerRaw struct {
	Contract *CryptoCaller // Generic read-only contract binding to access the raw methods on
}

// CryptoTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type CryptoTransactorRaw struct {
	Contract *CryptoTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCrypto creates a new instance of Crypto, bound to a specific deployed contract.
func NewCrypto(address common.Address, backend bind.ContractBackend) (*Crypto, error) {
	contract, err := bindCrypto(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Crypto{CryptoCaller: CryptoCaller{contract: contract}, CryptoTransactor: CryptoTransactor{contract: contract}, CryptoFilterer: CryptoFilterer{contract: contract}}, nil
}

// NewCryptoCaller creates a new read-only instance of Crypto, bound to a specific deployed contract.
func NewCryptoCaller(address common.Address, caller bind.ContractCaller) (*CryptoCaller, error) {
	contract, err := bindCrypto(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CryptoCaller{contract: contract}, nil
}

// NewCryptoTransactor creates a new write-only instance of Crypto, bound to a specific deployed contract.
func NewCryptoTransactor(address common.Address, transactor bind.ContractTransactor) (*CryptoTransactor, error) {
	contract, err := bindCrypto(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CryptoTransactor{contract: contract}, nil
}

// NewCryptoFilterer creates a new log filterer instance of Crypto, bound to a specific deployed contract.
func NewCryptoFilterer(address common.Address, filterer bind.ContractFilterer) (*CryptoFilterer, error) {
	contract, err := bindCrypto(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CryptoFilterer{contract: contract}, nil
}

// bindCrypto binds a generic wrapper to an already deployed contract.
func bindCrypto(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(CryptoABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Crypto *CryptoRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Crypto.Contract.CryptoCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Crypto *CryptoRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Crypto.Contract.CryptoTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Crypto *CryptoRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Crypto.Contract.CryptoTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Crypto *CryptoCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Crypto.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Crypto *CryptoTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Crypto.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Crypto *CryptoTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Crypto.Contract.contract.Transact(opts, method, params...)
}

// AggregateSignatures is a free data retrieval call binding the contract method 0xf022e061.
//
// Solidity: function AggregateSignatures(uint256[2][] sigs, uint256[] indices, uint256 threshold, uint256[] invArray) view returns(uint256[2])
func (_Crypto *CryptoCaller) AggregateSignatures(opts *bind.CallOpts, sigs [][2]*big.Int, indices []*big.Int, threshold *big.Int, invArray []*big.Int) ([2]*big.Int, error) {
	var out []interface{}
	err := _Crypto.contract.Call(opts, &out, "AggregateSignatures", sigs, indices, threshold, invArray)

	if err != nil {
		return *new([2]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([2]*big.Int)).(*[2]*big.Int)

	return out0, err

}

// AggregateSignatures is a free data retrieval call binding the contract method 0xf022e061.
//
// Solidity: function AggregateSignatures(uint256[2][] sigs, uint256[] indices, uint256 threshold, uint256[] invArray) view returns(uint256[2])
func (_Crypto *CryptoSession) AggregateSignatures(sigs [][2]*big.Int, indices []*big.Int, threshold *big.Int, invArray []*big.Int) ([2]*big.Int, error) {
	return _Crypto.Contract.AggregateSignatures(&_Crypto.CallOpts, sigs, indices, threshold, invArray)
}

// AggregateSignatures is a free data retrieval call binding the contract method 0xf022e061.
//
// Solidity: function AggregateSignatures(uint256[2][] sigs, uint256[] indices, uint256 threshold, uint256[] invArray) view returns(uint256[2])
func (_Crypto *CryptoCallerSession) AggregateSignatures(sigs [][2]*big.Int, indices []*big.Int, threshold *big.Int, invArray []*big.Int) ([2]*big.Int, error) {
	return _Crypto.Contract.AggregateSignatures(&_Crypto.CallOpts, sigs, indices, threshold, invArray)
}

// HashToG1 is a free data retrieval call binding the contract method 0x95add79c.
//
// Solidity: function HashToG1(bytes message) view returns(uint256[2] h)
func (_Crypto *CryptoCaller) HashToG1(opts *bind.CallOpts, message []byte) ([2]*big.Int, error) {
	var out []interface{}
	err := _Crypto.contract.Call(opts, &out, "HashToG1", message)

	if err != nil {
		return *new([2]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([2]*big.Int)).(*[2]*big.Int)

	return out0, err

}

// HashToG1 is a free data retrieval call binding the contract method 0x95add79c.
//
// Solidity: function HashToG1(bytes message) view returns(uint256[2] h)
func (_Crypto *CryptoSession) HashToG1(message []byte) ([2]*big.Int, error) {
	return _Crypto.Contract.HashToG1(&_Crypto.CallOpts, message)
}

// HashToG1 is a free data retrieval call binding the contract method 0x95add79c.
//
// Solidity: function HashToG1(bytes message) view returns(uint256[2] h)
func (_Crypto *CryptoCallerSession) HashToG1(message []byte) ([2]*big.Int, error) {
	return _Crypto.Contract.HashToG1(&_Crypto.CallOpts, message)
}

// LagrangeInterpolationG1 is a free data retrieval call binding the contract method 0x16534acd.
//
// Solidity: function LagrangeInterpolationG1(uint256[2][] pointsG1, uint256[] indices, uint256 threshold, uint256[] invArray) view returns(uint256[2])
func (_Crypto *CryptoCaller) LagrangeInterpolationG1(opts *bind.CallOpts, pointsG1 [][2]*big.Int, indices []*big.Int, threshold *big.Int, invArray []*big.Int) ([2]*big.Int, error) {
	var out []interface{}
	err := _Crypto.contract.Call(opts, &out, "LagrangeInterpolationG1", pointsG1, indices, threshold, invArray)

	if err != nil {
		return *new([2]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([2]*big.Int)).(*[2]*big.Int)

	return out0, err

}

// LagrangeInterpolationG1 is a free data retrieval call binding the contract method 0x16534acd.
//
// Solidity: function LagrangeInterpolationG1(uint256[2][] pointsG1, uint256[] indices, uint256 threshold, uint256[] invArray) view returns(uint256[2])
func (_Crypto *CryptoSession) LagrangeInterpolationG1(pointsG1 [][2]*big.Int, indices []*big.Int, threshold *big.Int, invArray []*big.Int) ([2]*big.Int, error) {
	return _Crypto.Contract.LagrangeInterpolationG1(&_Crypto.CallOpts, pointsG1, indices, threshold, invArray)
}

// LagrangeInterpolationG1 is a free data retrieval call binding the contract method 0x16534acd.
//
// Solidity: function LagrangeInterpolationG1(uint256[2][] pointsG1, uint256[] indices, uint256 threshold, uint256[] invArray) view returns(uint256[2])
func (_Crypto *CryptoCallerSession) LagrangeInterpolationG1(pointsG1 [][2]*big.Int, indices []*big.Int, threshold *big.Int, invArray []*big.Int) ([2]*big.Int, error) {
	return _Crypto.Contract.LagrangeInterpolationG1(&_Crypto.CallOpts, pointsG1, indices, threshold, invArray)
}

// Sign is a free data retrieval call binding the contract method 0x6bdf477c.
//
// Solidity: function Sign(bytes message, uint256 privK) view returns(uint256[2] sig)
func (_Crypto *CryptoCaller) Sign(opts *bind.CallOpts, message []byte, privK *big.Int) ([2]*big.Int, error) {
	var out []interface{}
	err := _Crypto.contract.Call(opts, &out, "Sign", message, privK)

	if err != nil {
		return *new([2]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([2]*big.Int)).(*[2]*big.Int)

	return out0, err

}

// Sign is a free data retrieval call binding the contract method 0x6bdf477c.
//
// Solidity: function Sign(bytes message, uint256 privK) view returns(uint256[2] sig)
func (_Crypto *CryptoSession) Sign(message []byte, privK *big.Int) ([2]*big.Int, error) {
	return _Crypto.Contract.Sign(&_Crypto.CallOpts, message, privK)
}

// Sign is a free data retrieval call binding the contract method 0x6bdf477c.
//
// Solidity: function Sign(bytes message, uint256 privK) view returns(uint256[2] sig)
func (_Crypto *CryptoCallerSession) Sign(message []byte, privK *big.Int) ([2]*big.Int, error) {
	return _Crypto.Contract.Sign(&_Crypto.CallOpts, message, privK)
}

// Verify is a free data retrieval call binding the contract method 0x06367587.
//
// Solidity: function Verify(bytes message, uint256[2] sig, uint256[4] pubK) view returns(bool v)
func (_Crypto *CryptoCaller) Verify(opts *bind.CallOpts, message []byte, sig [2]*big.Int, pubK [4]*big.Int) (bool, error) {
	var out []interface{}
	err := _Crypto.contract.Call(opts, &out, "Verify", message, sig, pubK)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Verify is a free data retrieval call binding the contract method 0x06367587.
//
// Solidity: function Verify(bytes message, uint256[2] sig, uint256[4] pubK) view returns(bool v)
func (_Crypto *CryptoSession) Verify(message []byte, sig [2]*big.Int, pubK [4]*big.Int) (bool, error) {
	return _Crypto.Contract.Verify(&_Crypto.CallOpts, message, sig, pubK)
}

// Verify is a free data retrieval call binding the contract method 0x06367587.
//
// Solidity: function Verify(bytes message, uint256[2] sig, uint256[4] pubK) view returns(bool v)
func (_Crypto *CryptoCallerSession) Verify(message []byte, sig [2]*big.Int, pubK [4]*big.Int) (bool, error) {
	return _Crypto.Contract.Verify(&_Crypto.CallOpts, message, sig, pubK)
}

// BaseToG1 is a free data retrieval call binding the contract method 0x8b6eb76e.
//
// Solidity: function baseToG1(uint256 t) view returns(uint256[2] h)
func (_Crypto *CryptoCaller) BaseToG1(opts *bind.CallOpts, t *big.Int) ([2]*big.Int, error) {
	var out []interface{}
	err := _Crypto.contract.Call(opts, &out, "baseToG1", t)

	if err != nil {
		return *new([2]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([2]*big.Int)).(*[2]*big.Int)

	return out0, err

}

// BaseToG1 is a free data retrieval call binding the contract method 0x8b6eb76e.
//
// Solidity: function baseToG1(uint256 t) view returns(uint256[2] h)
func (_Crypto *CryptoSession) BaseToG1(t *big.Int) ([2]*big.Int, error) {
	return _Crypto.Contract.BaseToG1(&_Crypto.CallOpts, t)
}

// BaseToG1 is a free data retrieval call binding the contract method 0x8b6eb76e.
//
// Solidity: function baseToG1(uint256 t) view returns(uint256[2] h)
func (_Crypto *CryptoCallerSession) BaseToG1(t *big.Int) ([2]*big.Int, error) {
	return _Crypto.Contract.BaseToG1(&_Crypto.CallOpts, t)
}

// Bn128Add is a free data retrieval call binding the contract method 0xe664725b.
//
// Solidity: function bn128_add(uint256[4] input) view returns(uint256[2] result)
func (_Crypto *CryptoCaller) Bn128Add(opts *bind.CallOpts, input [4]*big.Int) ([2]*big.Int, error) {
	var out []interface{}
	err := _Crypto.contract.Call(opts, &out, "bn128_add", input)

	if err != nil {
		return *new([2]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([2]*big.Int)).(*[2]*big.Int)

	return out0, err

}

// Bn128Add is a free data retrieval call binding the contract method 0xe664725b.
//
// Solidity: function bn128_add(uint256[4] input) view returns(uint256[2] result)
func (_Crypto *CryptoSession) Bn128Add(input [4]*big.Int) ([2]*big.Int, error) {
	return _Crypto.Contract.Bn128Add(&_Crypto.CallOpts, input)
}

// Bn128Add is a free data retrieval call binding the contract method 0xe664725b.
//
// Solidity: function bn128_add(uint256[4] input) view returns(uint256[2] result)
func (_Crypto *CryptoCallerSession) Bn128Add(input [4]*big.Int) ([2]*big.Int, error) {
	return _Crypto.Contract.Bn128Add(&_Crypto.CallOpts, input)
}

// Bn128CheckPairing is a free data retrieval call binding the contract method 0xb87cbafc.
//
// Solidity: function bn128_check_pairing(uint256[12] input) view returns(bool)
func (_Crypto *CryptoCaller) Bn128CheckPairing(opts *bind.CallOpts, input [12]*big.Int) (bool, error) {
	var out []interface{}
	err := _Crypto.contract.Call(opts, &out, "bn128_check_pairing", input)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Bn128CheckPairing is a free data retrieval call binding the contract method 0xb87cbafc.
//
// Solidity: function bn128_check_pairing(uint256[12] input) view returns(bool)
func (_Crypto *CryptoSession) Bn128CheckPairing(input [12]*big.Int) (bool, error) {
	return _Crypto.Contract.Bn128CheckPairing(&_Crypto.CallOpts, input)
}

// Bn128CheckPairing is a free data retrieval call binding the contract method 0xb87cbafc.
//
// Solidity: function bn128_check_pairing(uint256[12] input) view returns(bool)
func (_Crypto *CryptoCallerSession) Bn128CheckPairing(input [12]*big.Int) (bool, error) {
	return _Crypto.Contract.Bn128CheckPairing(&_Crypto.CallOpts, input)
}

// Bn128IsOnCurve is a free data retrieval call binding the contract method 0xf4d7d33d.
//
// Solidity: function bn128_is_on_curve(uint256[2] point) pure returns(bool)
func (_Crypto *CryptoCaller) Bn128IsOnCurve(opts *bind.CallOpts, point [2]*big.Int) (bool, error) {
	var out []interface{}
	err := _Crypto.contract.Call(opts, &out, "bn128_is_on_curve", point)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Bn128IsOnCurve is a free data retrieval call binding the contract method 0xf4d7d33d.
//
// Solidity: function bn128_is_on_curve(uint256[2] point) pure returns(bool)
func (_Crypto *CryptoSession) Bn128IsOnCurve(point [2]*big.Int) (bool, error) {
	return _Crypto.Contract.Bn128IsOnCurve(&_Crypto.CallOpts, point)
}

// Bn128IsOnCurve is a free data retrieval call binding the contract method 0xf4d7d33d.
//
// Solidity: function bn128_is_on_curve(uint256[2] point) pure returns(bool)
func (_Crypto *CryptoCallerSession) Bn128IsOnCurve(point [2]*big.Int) (bool, error) {
	return _Crypto.Contract.Bn128IsOnCurve(&_Crypto.CallOpts, point)
}

// Bn128Multiply is a free data retrieval call binding the contract method 0x82688f14.
//
// Solidity: function bn128_multiply(uint256[3] input) view returns(uint256[2] result)
func (_Crypto *CryptoCaller) Bn128Multiply(opts *bind.CallOpts, input [3]*big.Int) ([2]*big.Int, error) {
	var out []interface{}
	err := _Crypto.contract.Call(opts, &out, "bn128_multiply", input)

	if err != nil {
		return *new([2]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([2]*big.Int)).(*[2]*big.Int)

	return out0, err

}

// Bn128Multiply is a free data retrieval call binding the contract method 0x82688f14.
//
// Solidity: function bn128_multiply(uint256[3] input) view returns(uint256[2] result)
func (_Crypto *CryptoSession) Bn128Multiply(input [3]*big.Int) ([2]*big.Int, error) {
	return _Crypto.Contract.Bn128Multiply(&_Crypto.CallOpts, input)
}

// Bn128Multiply is a free data retrieval call binding the contract method 0x82688f14.
//
// Solidity: function bn128_multiply(uint256[3] input) view returns(uint256[2] result)
func (_Crypto *CryptoCallerSession) Bn128Multiply(input [3]*big.Int) ([2]*big.Int, error) {
	return _Crypto.Contract.Bn128Multiply(&_Crypto.CallOpts, input)
}

// CheckIndices is a free data retrieval call binding the contract method 0x80f4a922.
//
// Solidity: function checkIndices(uint256[] honestIndices, uint256[] dishonestIndices, uint256 n) pure returns(bool validIndices)
func (_Crypto *CryptoCaller) CheckIndices(opts *bind.CallOpts, honestIndices []*big.Int, dishonestIndices []*big.Int, n *big.Int) (bool, error) {
	var out []interface{}
	err := _Crypto.contract.Call(opts, &out, "checkIndices", honestIndices, dishonestIndices, n)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckIndices is a free data retrieval call binding the contract method 0x80f4a922.
//
// Solidity: function checkIndices(uint256[] honestIndices, uint256[] dishonestIndices, uint256 n) pure returns(bool validIndices)
func (_Crypto *CryptoSession) CheckIndices(honestIndices []*big.Int, dishonestIndices []*big.Int, n *big.Int) (bool, error) {
	return _Crypto.Contract.CheckIndices(&_Crypto.CallOpts, honestIndices, dishonestIndices, n)
}

// CheckIndices is a free data retrieval call binding the contract method 0x80f4a922.
//
// Solidity: function checkIndices(uint256[] honestIndices, uint256[] dishonestIndices, uint256 n) pure returns(bool validIndices)
func (_Crypto *CryptoCallerSession) CheckIndices(honestIndices []*big.Int, dishonestIndices []*big.Int, n *big.Int) (bool, error) {
	return _Crypto.Contract.CheckIndices(&_Crypto.CallOpts, honestIndices, dishonestIndices, n)
}

// CheckInverses is a free data retrieval call binding the contract method 0xe480a92e.
//
// Solidity: function checkInverses(uint256[] invArray, uint256 maxIndex) pure returns(bool)
func (_Crypto *CryptoCaller) CheckInverses(opts *bind.CallOpts, invArray []*big.Int, maxIndex *big.Int) (bool, error) {
	var out []interface{}
	err := _Crypto.contract.Call(opts, &out, "checkInverses", invArray, maxIndex)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckInverses is a free data retrieval call binding the contract method 0xe480a92e.
//
// Solidity: function checkInverses(uint256[] invArray, uint256 maxIndex) pure returns(bool)
func (_Crypto *CryptoSession) CheckInverses(invArray []*big.Int, maxIndex *big.Int) (bool, error) {
	return _Crypto.Contract.CheckInverses(&_Crypto.CallOpts, invArray, maxIndex)
}

// CheckInverses is a free data retrieval call binding the contract method 0xe480a92e.
//
// Solidity: function checkInverses(uint256[] invArray, uint256 maxIndex) pure returns(bool)
func (_Crypto *CryptoCallerSession) CheckInverses(invArray []*big.Int, maxIndex *big.Int) (bool, error) {
	return _Crypto.Contract.CheckInverses(&_Crypto.CallOpts, invArray, maxIndex)
}

// ComputeArrayMax is a free data retrieval call binding the contract method 0xa218e426.
//
// Solidity: function computeArrayMax(uint256[] uint256Array) pure returns(uint256)
func (_Crypto *CryptoCaller) ComputeArrayMax(opts *bind.CallOpts, uint256Array []*big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Crypto.contract.Call(opts, &out, "computeArrayMax", uint256Array)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ComputeArrayMax is a free data retrieval call binding the contract method 0xa218e426.
//
// Solidity: function computeArrayMax(uint256[] uint256Array) pure returns(uint256)
func (_Crypto *CryptoSession) ComputeArrayMax(uint256Array []*big.Int) (*big.Int, error) {
	return _Crypto.Contract.ComputeArrayMax(&_Crypto.CallOpts, uint256Array)
}

// ComputeArrayMax is a free data retrieval call binding the contract method 0xa218e426.
//
// Solidity: function computeArrayMax(uint256[] uint256Array) pure returns(uint256)
func (_Crypto *CryptoCallerSession) ComputeArrayMax(uint256Array []*big.Int) (*big.Int, error) {
	return _Crypto.Contract.ComputeArrayMax(&_Crypto.CallOpts, uint256Array)
}

// DleqVerify is a free data retrieval call binding the contract method 0xe81ee0e3.
//
// Solidity: function dleq_verify(uint256[2] x1, uint256[2] y1, uint256[2] x2, uint256[2] y2, uint256[2] proof) view returns(bool proof_is_valid)
func (_Crypto *CryptoCaller) DleqVerify(opts *bind.CallOpts, x1 [2]*big.Int, y1 [2]*big.Int, x2 [2]*big.Int, y2 [2]*big.Int, proof [2]*big.Int) (bool, error) {
	var out []interface{}
	err := _Crypto.contract.Call(opts, &out, "dleq_verify", x1, y1, x2, y2, proof)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// DleqVerify is a free data retrieval call binding the contract method 0xe81ee0e3.
//
// Solidity: function dleq_verify(uint256[2] x1, uint256[2] y1, uint256[2] x2, uint256[2] y2, uint256[2] proof) view returns(bool proof_is_valid)
func (_Crypto *CryptoSession) DleqVerify(x1 [2]*big.Int, y1 [2]*big.Int, x2 [2]*big.Int, y2 [2]*big.Int, proof [2]*big.Int) (bool, error) {
	return _Crypto.Contract.DleqVerify(&_Crypto.CallOpts, x1, y1, x2, y2, proof)
}

// DleqVerify is a free data retrieval call binding the contract method 0xe81ee0e3.
//
// Solidity: function dleq_verify(uint256[2] x1, uint256[2] y1, uint256[2] x2, uint256[2] y2, uint256[2] proof) view returns(bool proof_is_valid)
func (_Crypto *CryptoCallerSession) DleqVerify(x1 [2]*big.Int, y1 [2]*big.Int, x2 [2]*big.Int, y2 [2]*big.Int, proof [2]*big.Int) (bool, error) {
	return _Crypto.Contract.DleqVerify(&_Crypto.CallOpts, x1, y1, x2, y2, proof)
}

// Expmod is a free data retrieval call binding the contract method 0x783ce458.
//
// Solidity: function expmod(uint256 base, uint256 e, uint256 m) view returns(uint256 result)
func (_Crypto *CryptoCaller) Expmod(opts *bind.CallOpts, base *big.Int, e *big.Int, m *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Crypto.contract.Call(opts, &out, "expmod", base, e, m)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Expmod is a free data retrieval call binding the contract method 0x783ce458.
//
// Solidity: function expmod(uint256 base, uint256 e, uint256 m) view returns(uint256 result)
func (_Crypto *CryptoSession) Expmod(base *big.Int, e *big.Int, m *big.Int) (*big.Int, error) {
	return _Crypto.Contract.Expmod(&_Crypto.CallOpts, base, e, m)
}

// Expmod is a free data retrieval call binding the contract method 0x783ce458.
//
// Solidity: function expmod(uint256 base, uint256 e, uint256 m) view returns(uint256 result)
func (_Crypto *CryptoCallerSession) Expmod(base *big.Int, e *big.Int, m *big.Int) (*big.Int, error) {
	return _Crypto.Contract.Expmod(&_Crypto.CallOpts, base, e, m)
}

// HashToBase is a free data retrieval call binding the contract method 0x38529ab4.
//
// Solidity: function hashToBase(bytes message, bytes1 c0, bytes1 c1) pure returns(uint256 t)
func (_Crypto *CryptoCaller) HashToBase(opts *bind.CallOpts, message []byte, c0 [1]byte, c1 [1]byte) (*big.Int, error) {
	var out []interface{}
	err := _Crypto.contract.Call(opts, &out, "hashToBase", message, c0, c1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// HashToBase is a free data retrieval call binding the contract method 0x38529ab4.
//
// Solidity: function hashToBase(bytes message, bytes1 c0, bytes1 c1) pure returns(uint256 t)
func (_Crypto *CryptoSession) HashToBase(message []byte, c0 [1]byte, c1 [1]byte) (*big.Int, error) {
	return _Crypto.Contract.HashToBase(&_Crypto.CallOpts, message, c0, c1)
}

// HashToBase is a free data retrieval call binding the contract method 0x38529ab4.
//
// Solidity: function hashToBase(bytes message, bytes1 c0, bytes1 c1) pure returns(uint256 t)
func (_Crypto *CryptoCallerSession) HashToBase(message []byte, c0 [1]byte, c1 [1]byte) (*big.Int, error) {
	return _Crypto.Contract.HashToBase(&_Crypto.CallOpts, message, c0, c1)
}

// Invert is a free data retrieval call binding the contract method 0x7351ee37.
//
// Solidity: function invert(uint256 t) view returns(uint256 s)
func (_Crypto *CryptoCaller) Invert(opts *bind.CallOpts, t *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Crypto.contract.Call(opts, &out, "invert", t)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Invert is a free data retrieval call binding the contract method 0x7351ee37.
//
// Solidity: function invert(uint256 t) view returns(uint256 s)
func (_Crypto *CryptoSession) Invert(t *big.Int) (*big.Int, error) {
	return _Crypto.Contract.Invert(&_Crypto.CallOpts, t)
}

// Invert is a free data retrieval call binding the contract method 0x7351ee37.
//
// Solidity: function invert(uint256 t) view returns(uint256 s)
func (_Crypto *CryptoCallerSession) Invert(t *big.Int) (*big.Int, error) {
	return _Crypto.Contract.Invert(&_Crypto.CallOpts, t)
}

// Legendre is a free data retrieval call binding the contract method 0x6ef064a4.
//
// Solidity: function legendre(uint256 t) view returns(int256 chi)
func (_Crypto *CryptoCaller) Legendre(opts *bind.CallOpts, t *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Crypto.contract.Call(opts, &out, "legendre", t)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Legendre is a free data retrieval call binding the contract method 0x6ef064a4.
//
// Solidity: function legendre(uint256 t) view returns(int256 chi)
func (_Crypto *CryptoSession) Legendre(t *big.Int) (*big.Int, error) {
	return _Crypto.Contract.Legendre(&_Crypto.CallOpts, t)
}

// Legendre is a free data retrieval call binding the contract method 0x6ef064a4.
//
// Solidity: function legendre(uint256 t) view returns(int256 chi)
func (_Crypto *CryptoCallerSession) Legendre(t *big.Int) (*big.Int, error) {
	return _Crypto.Contract.Legendre(&_Crypto.CallOpts, t)
}

// LiRjPartialConst is a free data retrieval call binding the contract method 0x58ef876a.
//
// Solidity: function liRjPartialConst(uint256 k, uint256 j, uint256[] invArray) pure returns(uint256)
func (_Crypto *CryptoCaller) LiRjPartialConst(opts *bind.CallOpts, k *big.Int, j *big.Int, invArray []*big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Crypto.contract.Call(opts, &out, "liRjPartialConst", k, j, invArray)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LiRjPartialConst is a free data retrieval call binding the contract method 0x58ef876a.
//
// Solidity: function liRjPartialConst(uint256 k, uint256 j, uint256[] invArray) pure returns(uint256)
func (_Crypto *CryptoSession) LiRjPartialConst(k *big.Int, j *big.Int, invArray []*big.Int) (*big.Int, error) {
	return _Crypto.Contract.LiRjPartialConst(&_Crypto.CallOpts, k, j, invArray)
}

// LiRjPartialConst is a free data retrieval call binding the contract method 0x58ef876a.
//
// Solidity: function liRjPartialConst(uint256 k, uint256 j, uint256[] invArray) pure returns(uint256)
func (_Crypto *CryptoCallerSession) LiRjPartialConst(k *big.Int, j *big.Int, invArray []*big.Int) (*big.Int, error) {
	return _Crypto.Contract.LiRjPartialConst(&_Crypto.CallOpts, k, j, invArray)
}

// Neg is a free data retrieval call binding the contract method 0x77d2f203.
//
// Solidity: function neg(uint256 t) pure returns(uint256 s)
func (_Crypto *CryptoCaller) Neg(opts *bind.CallOpts, t *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Crypto.contract.Call(opts, &out, "neg", t)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Neg is a free data retrieval call binding the contract method 0x77d2f203.
//
// Solidity: function neg(uint256 t) pure returns(uint256 s)
func (_Crypto *CryptoSession) Neg(t *big.Int) (*big.Int, error) {
	return _Crypto.Contract.Neg(&_Crypto.CallOpts, t)
}

// Neg is a free data retrieval call binding the contract method 0x77d2f203.
//
// Solidity: function neg(uint256 t) pure returns(uint256 s)
func (_Crypto *CryptoCallerSession) Neg(t *big.Int) (*big.Int, error) {
	return _Crypto.Contract.Neg(&_Crypto.CallOpts, t)
}

// SafeSigningPoint is a free data retrieval call binding the contract method 0x96d95a6f.
//
// Solidity: function safeSigningPoint(uint256[2] input) pure returns(bool)
func (_Crypto *CryptoCaller) SafeSigningPoint(opts *bind.CallOpts, input [2]*big.Int) (bool, error) {
	var out []interface{}
	err := _Crypto.contract.Call(opts, &out, "safeSigningPoint", input)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SafeSigningPoint is a free data retrieval call binding the contract method 0x96d95a6f.
//
// Solidity: function safeSigningPoint(uint256[2] input) pure returns(bool)
func (_Crypto *CryptoSession) SafeSigningPoint(input [2]*big.Int) (bool, error) {
	return _Crypto.Contract.SafeSigningPoint(&_Crypto.CallOpts, input)
}

// SafeSigningPoint is a free data retrieval call binding the contract method 0x96d95a6f.
//
// Solidity: function safeSigningPoint(uint256[2] input) pure returns(bool)
func (_Crypto *CryptoCallerSession) SafeSigningPoint(input [2]*big.Int) (bool, error) {
	return _Crypto.Contract.SafeSigningPoint(&_Crypto.CallOpts, input)
}

// Sign0 is a free data retrieval call binding the contract method 0xccba3123.
//
// Solidity: function sign0(uint256 t) pure returns(uint256 s)
func (_Crypto *CryptoCaller) Sign0(opts *bind.CallOpts, t *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Crypto.contract.Call(opts, &out, "sign0", t)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Sign0 is a free data retrieval call binding the contract method 0xccba3123.
//
// Solidity: function sign0(uint256 t) pure returns(uint256 s)
func (_Crypto *CryptoSession) Sign0(t *big.Int) (*big.Int, error) {
	return _Crypto.Contract.Sign0(&_Crypto.CallOpts, t)
}

// Sign0 is a free data retrieval call binding the contract method 0xccba3123.
//
// Solidity: function sign0(uint256 t) pure returns(uint256 s)
func (_Crypto *CryptoCallerSession) Sign0(t *big.Int) (*big.Int, error) {
	return _Crypto.Contract.Sign0(&_Crypto.CallOpts, t)
}

// Sqrt is a free data retrieval call binding the contract method 0x677342ce.
//
// Solidity: function sqrt(uint256 t) view returns(uint256 s)
func (_Crypto *CryptoCaller) Sqrt(opts *bind.CallOpts, t *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Crypto.contract.Call(opts, &out, "sqrt", t)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Sqrt is a free data retrieval call binding the contract method 0x677342ce.
//
// Solidity: function sqrt(uint256 t) view returns(uint256 s)
func (_Crypto *CryptoSession) Sqrt(t *big.Int) (*big.Int, error) {
	return _Crypto.Contract.Sqrt(&_Crypto.CallOpts, t)
}

// Sqrt is a free data retrieval call binding the contract method 0x677342ce.
//
// Solidity: function sqrt(uint256 t) view returns(uint256 s)
func (_Crypto *CryptoCallerSession) Sqrt(t *big.Int) (*big.Int, error) {
	return _Crypto.Contract.Sqrt(&_Crypto.CallOpts, t)
}

// CryptoLibraryMetaData contains all meta data concerning the CryptoLibrary contract.
var CryptoLibraryMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122042906cf11e4c9ab362775c92ff21cb336a229cd547e4620417470fc56edfe70464736f6c63430008060033",
}

// CryptoLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use CryptoLibraryMetaData.ABI instead.
var CryptoLibraryABI = CryptoLibraryMetaData.ABI

// CryptoLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use CryptoLibraryMetaData.Bin instead.
var CryptoLibraryBin = CryptoLibraryMetaData.Bin

// DeployCryptoLibrary deploys a new Ethereum contract, binding an instance of CryptoLibrary to it.
func DeployCryptoLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *CryptoLibrary, error) {
	parsed, err := CryptoLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CryptoLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &CryptoLibrary{CryptoLibraryCaller: CryptoLibraryCaller{contract: contract}, CryptoLibraryTransactor: CryptoLibraryTransactor{contract: contract}, CryptoLibraryFilterer: CryptoLibraryFilterer{contract: contract}}, nil
}

// CryptoLibrary is an auto generated Go binding around an Ethereum contract.
type CryptoLibrary struct {
	CryptoLibraryCaller     // Read-only binding to the contract
	CryptoLibraryTransactor // Write-only binding to the contract
	CryptoLibraryFilterer   // Log filterer for contract events
}

// CryptoLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type CryptoLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CryptoLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type CryptoLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CryptoLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CryptoLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CryptoLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type CryptoLibrarySession struct {
	Contract     *CryptoLibrary    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CryptoLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type CryptoLibraryCallerSession struct {
	Contract *CryptoLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// CryptoLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type CryptoLibraryTransactorSession struct {
	Contract     *CryptoLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// CryptoLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type CryptoLibraryRaw struct {
	Contract *CryptoLibrary // Generic contract binding to access the raw methods on
}

// CryptoLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type CryptoLibraryCallerRaw struct {
	Contract *CryptoLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// CryptoLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type CryptoLibraryTransactorRaw struct {
	Contract *CryptoLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCryptoLibrary creates a new instance of CryptoLibrary, bound to a specific deployed contract.
func NewCryptoLibrary(address common.Address, backend bind.ContractBackend) (*CryptoLibrary, error) {
	contract, err := bindCryptoLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CryptoLibrary{CryptoLibraryCaller: CryptoLibraryCaller{contract: contract}, CryptoLibraryTransactor: CryptoLibraryTransactor{contract: contract}, CryptoLibraryFilterer: CryptoLibraryFilterer{contract: contract}}, nil
}

// NewCryptoLibraryCaller creates a new read-only instance of CryptoLibrary, bound to a specific deployed contract.
func NewCryptoLibraryCaller(address common.Address, caller bind.ContractCaller) (*CryptoLibraryCaller, error) {
	contract, err := bindCryptoLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CryptoLibraryCaller{contract: contract}, nil
}

// NewCryptoLibraryTransactor creates a new write-only instance of CryptoLibrary, bound to a specific deployed contract.
func NewCryptoLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*CryptoLibraryTransactor, error) {
	contract, err := bindCryptoLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CryptoLibraryTransactor{contract: contract}, nil
}

// NewCryptoLibraryFilterer creates a new log filterer instance of CryptoLibrary, bound to a specific deployed contract.
func NewCryptoLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*CryptoLibraryFilterer, error) {
	contract, err := bindCryptoLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CryptoLibraryFilterer{contract: contract}, nil
}

// bindCryptoLibrary binds a generic wrapper to an already deployed contract.
func bindCryptoLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(CryptoLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CryptoLibrary *CryptoLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CryptoLibrary.Contract.CryptoLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CryptoLibrary *CryptoLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CryptoLibrary.Contract.CryptoLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CryptoLibrary *CryptoLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CryptoLibrary.Contract.CryptoLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CryptoLibrary *CryptoLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CryptoLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CryptoLibrary *CryptoLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CryptoLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CryptoLibrary *CryptoLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CryptoLibrary.Contract.contract.Transact(opts, method, params...)
}

// DSAuthMetaData contains all meta data concerning the DSAuth contract.
var DSAuthMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contractDSAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractDSAuthority\",\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b5033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9460405160405180910390a26107e7806100a46000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806313af4035146100515780637a9e5e4b1461006d5780638da5cb5b14610089578063bf7e214f146100a7575b600080fd5b61006b60048036038101906100669190610529565b6100c5565b005b61008760048036038101906100829190610583565b6101db565b005b6100916102ee565b60405161009e9190610600565b60405180910390f35b6100af610314565b6040516100bc9190610652565b60405180910390f35b6100f3336000357fffffffff0000000000000000000000000000000000000000000000000000000016610338565b610132576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101299061066d565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9460405160405180910390a250565b610209336000357fffffffff0000000000000000000000000000000000000000000000000000000016610338565b610248576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023f9061066d565b60405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada460405160405180910390a250565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60003073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561037757600190506104e4565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156103d657600190506104e4565b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561043457600090506104e4565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b70096138430856040518463ffffffff1660e01b81526004016104919392919061061b565b60206040518083038186803b1580156104a957600080fd5b505afa1580156104bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e19190610556565b90505b92915050565b6000813590506104f98161076c565b92915050565b60008151905061050e81610783565b92915050565b6000813590506105238161079a565b92915050565b60006020828403121561053f5761053e61073e565b5b600061054d848285016104ea565b91505092915050565b60006020828403121561056c5761056b61073e565b5b600061057a848285016104ff565b91505092915050565b6000602082840312156105995761059861073e565b5b60006105a784828501610514565b91505092915050565b6105b98161069e565b82525050565b6105c8816106bc565b82525050565b6105d78161071a565b82525050565b60006105ea60148361068d565b91506105f582610743565b602082019050919050565b600060208201905061061560008301846105b0565b92915050565b600060608201905061063060008301866105b0565b61063d60208301856105b0565b61064a60408301846105bf565b949350505050565b600060208201905061066760008301846105ce565b92915050565b60006020820190508181036000830152610686816105dd565b9050919050565b600082825260208201905092915050565b60006106a9826106fa565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b60006106f38261069e565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107258261072c565b9050919050565b6000610737826106fa565b9050919050565b600080fd5b7f64732d617574682d756e617574686f72697a6564000000000000000000000000600082015250565b6107758161069e565b811461078057600080fd5b50565b61078c816106b0565b811461079757600080fd5b50565b6107a3816106e8565b81146107ae57600080fd5b5056fea2646970667358221220b291a02520f510b23f64b9d8d77ef35f59fdca0ddf54652ad91c57e9d22157a564736f6c63430008060033",
}

// DSAuthABI is the input ABI used to generate the binding from.
// Deprecated: Use DSAuthMetaData.ABI instead.
var DSAuthABI = DSAuthMetaData.ABI

// DSAuthBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use DSAuthMetaData.Bin instead.
var DSAuthBin = DSAuthMetaData.Bin

// DeployDSAuth deploys a new Ethereum contract, binding an instance of DSAuth to it.
func DeployDSAuth(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *DSAuth, error) {
	parsed, err := DSAuthMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(DSAuthBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &DSAuth{DSAuthCaller: DSAuthCaller{contract: contract}, DSAuthTransactor: DSAuthTransactor{contract: contract}, DSAuthFilterer: DSAuthFilterer{contract: contract}}, nil
}

// DSAuth is an auto generated Go binding around an Ethereum contract.
type DSAuth struct {
	DSAuthCaller     // Read-only binding to the contract
	DSAuthTransactor // Write-only binding to the contract
	DSAuthFilterer   // Log filterer for contract events
}

// DSAuthCaller is an auto generated read-only Go binding around an Ethereum contract.
type DSAuthCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DSAuthTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DSAuthTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DSAuthFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DSAuthFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DSAuthSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DSAuthSession struct {
	Contract     *DSAuth           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DSAuthCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DSAuthCallerSession struct {
	Contract *DSAuthCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// DSAuthTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DSAuthTransactorSession struct {
	Contract     *DSAuthTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DSAuthRaw is an auto generated low-level Go binding around an Ethereum contract.
type DSAuthRaw struct {
	Contract *DSAuth // Generic contract binding to access the raw methods on
}

// DSAuthCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DSAuthCallerRaw struct {
	Contract *DSAuthCaller // Generic read-only contract binding to access the raw methods on
}

// DSAuthTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DSAuthTransactorRaw struct {
	Contract *DSAuthTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDSAuth creates a new instance of DSAuth, bound to a specific deployed contract.
func NewDSAuth(address common.Address, backend bind.ContractBackend) (*DSAuth, error) {
	contract, err := bindDSAuth(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &DSAuth{DSAuthCaller: DSAuthCaller{contract: contract}, DSAuthTransactor: DSAuthTransactor{contract: contract}, DSAuthFilterer: DSAuthFilterer{contract: contract}}, nil
}

// NewDSAuthCaller creates a new read-only instance of DSAuth, bound to a specific deployed contract.
func NewDSAuthCaller(address common.Address, caller bind.ContractCaller) (*DSAuthCaller, error) {
	contract, err := bindDSAuth(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DSAuthCaller{contract: contract}, nil
}

// NewDSAuthTransactor creates a new write-only instance of DSAuth, bound to a specific deployed contract.
func NewDSAuthTransactor(address common.Address, transactor bind.ContractTransactor) (*DSAuthTransactor, error) {
	contract, err := bindDSAuth(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DSAuthTransactor{contract: contract}, nil
}

// NewDSAuthFilterer creates a new log filterer instance of DSAuth, bound to a specific deployed contract.
func NewDSAuthFilterer(address common.Address, filterer bind.ContractFilterer) (*DSAuthFilterer, error) {
	contract, err := bindDSAuth(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DSAuthFilterer{contract: contract}, nil
}

// bindDSAuth binds a generic wrapper to an already deployed contract.
func bindDSAuth(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(DSAuthABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DSAuth *DSAuthRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DSAuth.Contract.DSAuthCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DSAuth *DSAuthRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DSAuth.Contract.DSAuthTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DSAuth *DSAuthRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DSAuth.Contract.DSAuthTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DSAuth *DSAuthCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DSAuth.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DSAuth *DSAuthTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DSAuth.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DSAuth *DSAuthTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DSAuth.Contract.contract.Transact(opts, method, params...)
}

// Authority is a free data retrieval call binding the contract method 0xbf7e214f.
//
// Solidity: function authority() view returns(address)
func (_DSAuth *DSAuthCaller) Authority(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _DSAuth.contract.Call(opts, &out, "authority")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Authority is a free data retrieval call binding the contract method 0xbf7e214f.
//
// Solidity: function authority() view returns(address)
func (_DSAuth *DSAuthSession) Authority() (common.Address, error) {
	return _DSAuth.Contract.Authority(&_DSAuth.CallOpts)
}

// Authority is a free data retrieval call binding the contract method 0xbf7e214f.
//
// Solidity: function authority() view returns(address)
func (_DSAuth *DSAuthCallerSession) Authority() (common.Address, error) {
	return _DSAuth.Contract.Authority(&_DSAuth.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_DSAuth *DSAuthCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _DSAuth.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_DSAuth *DSAuthSession) Owner() (common.Address, error) {
	return _DSAuth.Contract.Owner(&_DSAuth.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_DSAuth *DSAuthCallerSession) Owner() (common.Address, error) {
	return _DSAuth.Contract.Owner(&_DSAuth.CallOpts)
}

// SetAuthority is a paid mutator transaction binding the contract method 0x7a9e5e4b.
//
// Solidity: function setAuthority(address authority_) returns()
func (_DSAuth *DSAuthTransactor) SetAuthority(opts *bind.TransactOpts, authority_ common.Address) (*types.Transaction, error) {
	return _DSAuth.contract.Transact(opts, "setAuthority", authority_)
}

// SetAuthority is a paid mutator transaction binding the contract method 0x7a9e5e4b.
//
// Solidity: function setAuthority(address authority_) returns()
func (_DSAuth *DSAuthSession) SetAuthority(authority_ common.Address) (*types.Transaction, error) {
	return _DSAuth.Contract.SetAuthority(&_DSAuth.TransactOpts, authority_)
}

// SetAuthority is a paid mutator transaction binding the contract method 0x7a9e5e4b.
//
// Solidity: function setAuthority(address authority_) returns()
func (_DSAuth *DSAuthTransactorSession) SetAuthority(authority_ common.Address) (*types.Transaction, error) {
	return _DSAuth.Contract.SetAuthority(&_DSAuth.TransactOpts, authority_)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address owner_) returns()
func (_DSAuth *DSAuthTransactor) SetOwner(opts *bind.TransactOpts, owner_ common.Address) (*types.Transaction, error) {
	return _DSAuth.contract.Transact(opts, "setOwner", owner_)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address owner_) returns()
func (_DSAuth *DSAuthSession) SetOwner(owner_ common.Address) (*types.Transaction, error) {
	return _DSAuth.Contract.SetOwner(&_DSAuth.TransactOpts, owner_)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address owner_) returns()
func (_DSAuth *DSAuthTransactorSession) SetOwner(owner_ common.Address) (*types.Transaction, error) {
	return _DSAuth.Contract.SetOwner(&_DSAuth.TransactOpts, owner_)
}

// DSAuthLogSetAuthorityIterator is returned from FilterLogSetAuthority and is used to iterate over the raw logs and unpacked data for LogSetAuthority events raised by the DSAuth contract.
type DSAuthLogSetAuthorityIterator struct {
	Event *DSAuthLogSetAuthority // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DSAuthLogSetAuthorityIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DSAuthLogSetAuthority)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DSAuthLogSetAuthority)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DSAuthLogSetAuthorityIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DSAuthLogSetAuthorityIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DSAuthLogSetAuthority represents a LogSetAuthority event raised by the DSAuth contract.
type DSAuthLogSetAuthority struct {
	Authority common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterLogSetAuthority is a free log retrieval operation binding the contract event 0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4.
//
// Solidity: event LogSetAuthority(address indexed authority)
func (_DSAuth *DSAuthFilterer) FilterLogSetAuthority(opts *bind.FilterOpts, authority []common.Address) (*DSAuthLogSetAuthorityIterator, error) {

	var authorityRule []interface{}
	for _, authorityItem := range authority {
		authorityRule = append(authorityRule, authorityItem)
	}

	logs, sub, err := _DSAuth.contract.FilterLogs(opts, "LogSetAuthority", authorityRule)
	if err != nil {
		return nil, err
	}
	return &DSAuthLogSetAuthorityIterator{contract: _DSAuth.contract, event: "LogSetAuthority", logs: logs, sub: sub}, nil
}

// WatchLogSetAuthority is a free log subscription operation binding the contract event 0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4.
//
// Solidity: event LogSetAuthority(address indexed authority)
func (_DSAuth *DSAuthFilterer) WatchLogSetAuthority(opts *bind.WatchOpts, sink chan<- *DSAuthLogSetAuthority, authority []common.Address) (event.Subscription, error) {

	var authorityRule []interface{}
	for _, authorityItem := range authority {
		authorityRule = append(authorityRule, authorityItem)
	}

	logs, sub, err := _DSAuth.contract.WatchLogs(opts, "LogSetAuthority", authorityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DSAuthLogSetAuthority)
				if err := _DSAuth.contract.UnpackLog(event, "LogSetAuthority", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogSetAuthority is a log parse operation binding the contract event 0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4.
//
// Solidity: event LogSetAuthority(address indexed authority)
func (_DSAuth *DSAuthFilterer) ParseLogSetAuthority(log types.Log) (*DSAuthLogSetAuthority, error) {
	event := new(DSAuthLogSetAuthority)
	if err := _DSAuth.contract.UnpackLog(event, "LogSetAuthority", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DSAuthLogSetOwnerIterator is returned from FilterLogSetOwner and is used to iterate over the raw logs and unpacked data for LogSetOwner events raised by the DSAuth contract.
type DSAuthLogSetOwnerIterator struct {
	Event *DSAuthLogSetOwner // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DSAuthLogSetOwnerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DSAuthLogSetOwner)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DSAuthLogSetOwner)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DSAuthLogSetOwnerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DSAuthLogSetOwnerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DSAuthLogSetOwner represents a LogSetOwner event raised by the DSAuth contract.
type DSAuthLogSetOwner struct {
	Owner common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogSetOwner is a free log retrieval operation binding the contract event 0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94.
//
// Solidity: event LogSetOwner(address indexed owner)
func (_DSAuth *DSAuthFilterer) FilterLogSetOwner(opts *bind.FilterOpts, owner []common.Address) (*DSAuthLogSetOwnerIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _DSAuth.contract.FilterLogs(opts, "LogSetOwner", ownerRule)
	if err != nil {
		return nil, err
	}
	return &DSAuthLogSetOwnerIterator{contract: _DSAuth.contract, event: "LogSetOwner", logs: logs, sub: sub}, nil
}

// WatchLogSetOwner is a free log subscription operation binding the contract event 0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94.
//
// Solidity: event LogSetOwner(address indexed owner)
func (_DSAuth *DSAuthFilterer) WatchLogSetOwner(opts *bind.WatchOpts, sink chan<- *DSAuthLogSetOwner, owner []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _DSAuth.contract.WatchLogs(opts, "LogSetOwner", ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DSAuthLogSetOwner)
				if err := _DSAuth.contract.UnpackLog(event, "LogSetOwner", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogSetOwner is a log parse operation binding the contract event 0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94.
//
// Solidity: event LogSetOwner(address indexed owner)
func (_DSAuth *DSAuthFilterer) ParseLogSetOwner(log types.Log) (*DSAuthLogSetOwner, error) {
	event := new(DSAuthLogSetOwner)
	if err := _DSAuth.contract.UnpackLog(event, "LogSetOwner", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DSAuthEventsMetaData contains all meta data concerning the DSAuthEvents contract.
var DSAuthEventsMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"}]",
	Bin: "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220e1dbd13508df360cef6640c5523e47535fa817d27c92e39dc330a8a85411aed664736f6c63430008060033",
}

// DSAuthEventsABI is the input ABI used to generate the binding from.
// Deprecated: Use DSAuthEventsMetaData.ABI instead.
var DSAuthEventsABI = DSAuthEventsMetaData.ABI

// DSAuthEventsBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use DSAuthEventsMetaData.Bin instead.
var DSAuthEventsBin = DSAuthEventsMetaData.Bin

// DeployDSAuthEvents deploys a new Ethereum contract, binding an instance of DSAuthEvents to it.
func DeployDSAuthEvents(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *DSAuthEvents, error) {
	parsed, err := DSAuthEventsMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(DSAuthEventsBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &DSAuthEvents{DSAuthEventsCaller: DSAuthEventsCaller{contract: contract}, DSAuthEventsTransactor: DSAuthEventsTransactor{contract: contract}, DSAuthEventsFilterer: DSAuthEventsFilterer{contract: contract}}, nil
}

// DSAuthEvents is an auto generated Go binding around an Ethereum contract.
type DSAuthEvents struct {
	DSAuthEventsCaller     // Read-only binding to the contract
	DSAuthEventsTransactor // Write-only binding to the contract
	DSAuthEventsFilterer   // Log filterer for contract events
}

// DSAuthEventsCaller is an auto generated read-only Go binding around an Ethereum contract.
type DSAuthEventsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DSAuthEventsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DSAuthEventsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DSAuthEventsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DSAuthEventsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DSAuthEventsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DSAuthEventsSession struct {
	Contract     *DSAuthEvents     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DSAuthEventsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DSAuthEventsCallerSession struct {
	Contract *DSAuthEventsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// DSAuthEventsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DSAuthEventsTransactorSession struct {
	Contract     *DSAuthEventsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// DSAuthEventsRaw is an auto generated low-level Go binding around an Ethereum contract.
type DSAuthEventsRaw struct {
	Contract *DSAuthEvents // Generic contract binding to access the raw methods on
}

// DSAuthEventsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DSAuthEventsCallerRaw struct {
	Contract *DSAuthEventsCaller // Generic read-only contract binding to access the raw methods on
}

// DSAuthEventsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DSAuthEventsTransactorRaw struct {
	Contract *DSAuthEventsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDSAuthEvents creates a new instance of DSAuthEvents, bound to a specific deployed contract.
func NewDSAuthEvents(address common.Address, backend bind.ContractBackend) (*DSAuthEvents, error) {
	contract, err := bindDSAuthEvents(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &DSAuthEvents{DSAuthEventsCaller: DSAuthEventsCaller{contract: contract}, DSAuthEventsTransactor: DSAuthEventsTransactor{contract: contract}, DSAuthEventsFilterer: DSAuthEventsFilterer{contract: contract}}, nil
}

// NewDSAuthEventsCaller creates a new read-only instance of DSAuthEvents, bound to a specific deployed contract.
func NewDSAuthEventsCaller(address common.Address, caller bind.ContractCaller) (*DSAuthEventsCaller, error) {
	contract, err := bindDSAuthEvents(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DSAuthEventsCaller{contract: contract}, nil
}

// NewDSAuthEventsTransactor creates a new write-only instance of DSAuthEvents, bound to a specific deployed contract.
func NewDSAuthEventsTransactor(address common.Address, transactor bind.ContractTransactor) (*DSAuthEventsTransactor, error) {
	contract, err := bindDSAuthEvents(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DSAuthEventsTransactor{contract: contract}, nil
}

// NewDSAuthEventsFilterer creates a new log filterer instance of DSAuthEvents, bound to a specific deployed contract.
func NewDSAuthEventsFilterer(address common.Address, filterer bind.ContractFilterer) (*DSAuthEventsFilterer, error) {
	contract, err := bindDSAuthEvents(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DSAuthEventsFilterer{contract: contract}, nil
}

// bindDSAuthEvents binds a generic wrapper to an already deployed contract.
func bindDSAuthEvents(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(DSAuthEventsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DSAuthEvents *DSAuthEventsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DSAuthEvents.Contract.DSAuthEventsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DSAuthEvents *DSAuthEventsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DSAuthEvents.Contract.DSAuthEventsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DSAuthEvents *DSAuthEventsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DSAuthEvents.Contract.DSAuthEventsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DSAuthEvents *DSAuthEventsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DSAuthEvents.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DSAuthEvents *DSAuthEventsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DSAuthEvents.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DSAuthEvents *DSAuthEventsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DSAuthEvents.Contract.contract.Transact(opts, method, params...)
}

// DSAuthEventsLogSetAuthorityIterator is returned from FilterLogSetAuthority and is used to iterate over the raw logs and unpacked data for LogSetAuthority events raised by the DSAuthEvents contract.
type DSAuthEventsLogSetAuthorityIterator struct {
	Event *DSAuthEventsLogSetAuthority // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DSAuthEventsLogSetAuthorityIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DSAuthEventsLogSetAuthority)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DSAuthEventsLogSetAuthority)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DSAuthEventsLogSetAuthorityIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DSAuthEventsLogSetAuthorityIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DSAuthEventsLogSetAuthority represents a LogSetAuthority event raised by the DSAuthEvents contract.
type DSAuthEventsLogSetAuthority struct {
	Authority common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterLogSetAuthority is a free log retrieval operation binding the contract event 0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4.
//
// Solidity: event LogSetAuthority(address indexed authority)
func (_DSAuthEvents *DSAuthEventsFilterer) FilterLogSetAuthority(opts *bind.FilterOpts, authority []common.Address) (*DSAuthEventsLogSetAuthorityIterator, error) {

	var authorityRule []interface{}
	for _, authorityItem := range authority {
		authorityRule = append(authorityRule, authorityItem)
	}

	logs, sub, err := _DSAuthEvents.contract.FilterLogs(opts, "LogSetAuthority", authorityRule)
	if err != nil {
		return nil, err
	}
	return &DSAuthEventsLogSetAuthorityIterator{contract: _DSAuthEvents.contract, event: "LogSetAuthority", logs: logs, sub: sub}, nil
}

// WatchLogSetAuthority is a free log subscription operation binding the contract event 0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4.
//
// Solidity: event LogSetAuthority(address indexed authority)
func (_DSAuthEvents *DSAuthEventsFilterer) WatchLogSetAuthority(opts *bind.WatchOpts, sink chan<- *DSAuthEventsLogSetAuthority, authority []common.Address) (event.Subscription, error) {

	var authorityRule []interface{}
	for _, authorityItem := range authority {
		authorityRule = append(authorityRule, authorityItem)
	}

	logs, sub, err := _DSAuthEvents.contract.WatchLogs(opts, "LogSetAuthority", authorityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DSAuthEventsLogSetAuthority)
				if err := _DSAuthEvents.contract.UnpackLog(event, "LogSetAuthority", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogSetAuthority is a log parse operation binding the contract event 0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4.
//
// Solidity: event LogSetAuthority(address indexed authority)
func (_DSAuthEvents *DSAuthEventsFilterer) ParseLogSetAuthority(log types.Log) (*DSAuthEventsLogSetAuthority, error) {
	event := new(DSAuthEventsLogSetAuthority)
	if err := _DSAuthEvents.contract.UnpackLog(event, "LogSetAuthority", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DSAuthEventsLogSetOwnerIterator is returned from FilterLogSetOwner and is used to iterate over the raw logs and unpacked data for LogSetOwner events raised by the DSAuthEvents contract.
type DSAuthEventsLogSetOwnerIterator struct {
	Event *DSAuthEventsLogSetOwner // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DSAuthEventsLogSetOwnerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DSAuthEventsLogSetOwner)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DSAuthEventsLogSetOwner)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DSAuthEventsLogSetOwnerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DSAuthEventsLogSetOwnerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DSAuthEventsLogSetOwner represents a LogSetOwner event raised by the DSAuthEvents contract.
type DSAuthEventsLogSetOwner struct {
	Owner common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogSetOwner is a free log retrieval operation binding the contract event 0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94.
//
// Solidity: event LogSetOwner(address indexed owner)
func (_DSAuthEvents *DSAuthEventsFilterer) FilterLogSetOwner(opts *bind.FilterOpts, owner []common.Address) (*DSAuthEventsLogSetOwnerIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _DSAuthEvents.contract.FilterLogs(opts, "LogSetOwner", ownerRule)
	if err != nil {
		return nil, err
	}
	return &DSAuthEventsLogSetOwnerIterator{contract: _DSAuthEvents.contract, event: "LogSetOwner", logs: logs, sub: sub}, nil
}

// WatchLogSetOwner is a free log subscription operation binding the contract event 0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94.
//
// Solidity: event LogSetOwner(address indexed owner)
func (_DSAuthEvents *DSAuthEventsFilterer) WatchLogSetOwner(opts *bind.WatchOpts, sink chan<- *DSAuthEventsLogSetOwner, owner []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _DSAuthEvents.contract.WatchLogs(opts, "LogSetOwner", ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DSAuthEventsLogSetOwner)
				if err := _DSAuthEvents.contract.UnpackLog(event, "LogSetOwner", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogSetOwner is a log parse operation binding the contract event 0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94.
//
// Solidity: event LogSetOwner(address indexed owner)
func (_DSAuthEvents *DSAuthEventsFilterer) ParseLogSetOwner(log types.Log) (*DSAuthEventsLogSetOwner, error) {
	event := new(DSAuthEventsLogSetOwner)
	if err := _DSAuthEvents.contract.UnpackLog(event, "LogSetOwner", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DSAuthorityMetaData contains all meta data concerning the DSAuthority contract.
var DSAuthorityMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"}],\"name\":\"canCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// DSAuthorityABI is the input ABI used to generate the binding from.
// Deprecated: Use DSAuthorityMetaData.ABI instead.
var DSAuthorityABI = DSAuthorityMetaData.ABI

// DSAuthority is an auto generated Go binding around an Ethereum contract.
type DSAuthority struct {
	DSAuthorityCaller     // Read-only binding to the contract
	DSAuthorityTransactor // Write-only binding to the contract
	DSAuthorityFilterer   // Log filterer for contract events
}

// DSAuthorityCaller is an auto generated read-only Go binding around an Ethereum contract.
type DSAuthorityCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DSAuthorityTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DSAuthorityTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DSAuthorityFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DSAuthorityFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DSAuthoritySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DSAuthoritySession struct {
	Contract     *DSAuthority      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DSAuthorityCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DSAuthorityCallerSession struct {
	Contract *DSAuthorityCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// DSAuthorityTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DSAuthorityTransactorSession struct {
	Contract     *DSAuthorityTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// DSAuthorityRaw is an auto generated low-level Go binding around an Ethereum contract.
type DSAuthorityRaw struct {
	Contract *DSAuthority // Generic contract binding to access the raw methods on
}

// DSAuthorityCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DSAuthorityCallerRaw struct {
	Contract *DSAuthorityCaller // Generic read-only contract binding to access the raw methods on
}

// DSAuthorityTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DSAuthorityTransactorRaw struct {
	Contract *DSAuthorityTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDSAuthority creates a new instance of DSAuthority, bound to a specific deployed contract.
func NewDSAuthority(address common.Address, backend bind.ContractBackend) (*DSAuthority, error) {
	contract, err := bindDSAuthority(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &DSAuthority{DSAuthorityCaller: DSAuthorityCaller{contract: contract}, DSAuthorityTransactor: DSAuthorityTransactor{contract: contract}, DSAuthorityFilterer: DSAuthorityFilterer{contract: contract}}, nil
}

// NewDSAuthorityCaller creates a new read-only instance of DSAuthority, bound to a specific deployed contract.
func NewDSAuthorityCaller(address common.Address, caller bind.ContractCaller) (*DSAuthorityCaller, error) {
	contract, err := bindDSAuthority(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DSAuthorityCaller{contract: contract}, nil
}

// NewDSAuthorityTransactor creates a new write-only instance of DSAuthority, bound to a specific deployed contract.
func NewDSAuthorityTransactor(address common.Address, transactor bind.ContractTransactor) (*DSAuthorityTransactor, error) {
	contract, err := bindDSAuthority(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DSAuthorityTransactor{contract: contract}, nil
}

// NewDSAuthorityFilterer creates a new log filterer instance of DSAuthority, bound to a specific deployed contract.
func NewDSAuthorityFilterer(address common.Address, filterer bind.ContractFilterer) (*DSAuthorityFilterer, error) {
	contract, err := bindDSAuthority(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DSAuthorityFilterer{contract: contract}, nil
}

// bindDSAuthority binds a generic wrapper to an already deployed contract.
func bindDSAuthority(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(DSAuthorityABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DSAuthority *DSAuthorityRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DSAuthority.Contract.DSAuthorityCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DSAuthority *DSAuthorityRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DSAuthority.Contract.DSAuthorityTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DSAuthority *DSAuthorityRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DSAuthority.Contract.DSAuthorityTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DSAuthority *DSAuthorityCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DSAuthority.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DSAuthority *DSAuthorityTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DSAuthority.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DSAuthority *DSAuthorityTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DSAuthority.Contract.contract.Transact(opts, method, params...)
}

// CanCall is a free data retrieval call binding the contract method 0xb7009613.
//
// Solidity: function canCall(address src, address dst, bytes4 sig) view returns(bool)
func (_DSAuthority *DSAuthorityCaller) CanCall(opts *bind.CallOpts, src common.Address, dst common.Address, sig [4]byte) (bool, error) {
	var out []interface{}
	err := _DSAuthority.contract.Call(opts, &out, "canCall", src, dst, sig)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanCall is a free data retrieval call binding the contract method 0xb7009613.
//
// Solidity: function canCall(address src, address dst, bytes4 sig) view returns(bool)
func (_DSAuthority *DSAuthoritySession) CanCall(src common.Address, dst common.Address, sig [4]byte) (bool, error) {
	return _DSAuthority.Contract.CanCall(&_DSAuthority.CallOpts, src, dst, sig)
}

// CanCall is a free data retrieval call binding the contract method 0xb7009613.
//
// Solidity: function canCall(address src, address dst, bytes4 sig) view returns(bool)
func (_DSAuthority *DSAuthorityCallerSession) CanCall(src common.Address, dst common.Address, sig [4]byte) (bool, error) {
	return _DSAuthority.Contract.CanCall(&_DSAuthority.CallOpts, src, dst, sig)
}

// DSMathMetaData contains all meta data concerning the DSMath contract.
var DSMathMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea26469706673582212205f4653b4d07c2282975f05f3281a4aa5cf63f4119034f07ce3dd754c97c4f02a64736f6c63430008060033",
}

// DSMathABI is the input ABI used to generate the binding from.
// Deprecated: Use DSMathMetaData.ABI instead.
var DSMathABI = DSMathMetaData.ABI

// DSMathBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use DSMathMetaData.Bin instead.
var DSMathBin = DSMathMetaData.Bin

// DeployDSMath deploys a new Ethereum contract, binding an instance of DSMath to it.
func DeployDSMath(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *DSMath, error) {
	parsed, err := DSMathMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(DSMathBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &DSMath{DSMathCaller: DSMathCaller{contract: contract}, DSMathTransactor: DSMathTransactor{contract: contract}, DSMathFilterer: DSMathFilterer{contract: contract}}, nil
}

// DSMath is an auto generated Go binding around an Ethereum contract.
type DSMath struct {
	DSMathCaller     // Read-only binding to the contract
	DSMathTransactor // Write-only binding to the contract
	DSMathFilterer   // Log filterer for contract events
}

// DSMathCaller is an auto generated read-only Go binding around an Ethereum contract.
type DSMathCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DSMathTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DSMathTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DSMathFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DSMathFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DSMathSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DSMathSession struct {
	Contract     *DSMath           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DSMathCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DSMathCallerSession struct {
	Contract *DSMathCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// DSMathTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DSMathTransactorSession struct {
	Contract     *DSMathTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DSMathRaw is an auto generated low-level Go binding around an Ethereum contract.
type DSMathRaw struct {
	Contract *DSMath // Generic contract binding to access the raw methods on
}

// DSMathCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DSMathCallerRaw struct {
	Contract *DSMathCaller // Generic read-only contract binding to access the raw methods on
}

// DSMathTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DSMathTransactorRaw struct {
	Contract *DSMathTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDSMath creates a new instance of DSMath, bound to a specific deployed contract.
func NewDSMath(address common.Address, backend bind.ContractBackend) (*DSMath, error) {
	contract, err := bindDSMath(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &DSMath{DSMathCaller: DSMathCaller{contract: contract}, DSMathTransactor: DSMathTransactor{contract: contract}, DSMathFilterer: DSMathFilterer{contract: contract}}, nil
}

// NewDSMathCaller creates a new read-only instance of DSMath, bound to a specific deployed contract.
func NewDSMathCaller(address common.Address, caller bind.ContractCaller) (*DSMathCaller, error) {
	contract, err := bindDSMath(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DSMathCaller{contract: contract}, nil
}

// NewDSMathTransactor creates a new write-only instance of DSMath, bound to a specific deployed contract.
func NewDSMathTransactor(address common.Address, transactor bind.ContractTransactor) (*DSMathTransactor, error) {
	contract, err := bindDSMath(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DSMathTransactor{contract: contract}, nil
}

// NewDSMathFilterer creates a new log filterer instance of DSMath, bound to a specific deployed contract.
func NewDSMathFilterer(address common.Address, filterer bind.ContractFilterer) (*DSMathFilterer, error) {
	contract, err := bindDSMath(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DSMathFilterer{contract: contract}, nil
}

// bindDSMath binds a generic wrapper to an already deployed contract.
func bindDSMath(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(DSMathABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DSMath *DSMathRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DSMath.Contract.DSMathCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DSMath *DSMathRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DSMath.Contract.DSMathTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DSMath *DSMathRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DSMath.Contract.DSMathTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DSMath *DSMathCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DSMath.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DSMath *DSMathTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DSMath.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DSMath *DSMathTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DSMath.Contract.contract.Transact(opts, method, params...)
}

// DSNoteMetaData contains all meta data concerning the DSNote contract.
var DSNoteMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"foo\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"bar\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"fax\",\"type\":\"bytes\"}],\"name\":\"LogNote\",\"type\":\"event\"}]",
	Bin: "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea26469706673582212206c8fd78fc5d5d5ed38359a3302a62f0c3c0bf8d55df5fdfeebed04c3d620e32a64736f6c63430008060033",
}

// DSNoteABI is the input ABI used to generate the binding from.
// Deprecated: Use DSNoteMetaData.ABI instead.
var DSNoteABI = DSNoteMetaData.ABI

// DSNoteBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use DSNoteMetaData.Bin instead.
var DSNoteBin = DSNoteMetaData.Bin

// DeployDSNote deploys a new Ethereum contract, binding an instance of DSNote to it.
func DeployDSNote(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *DSNote, error) {
	parsed, err := DSNoteMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(DSNoteBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &DSNote{DSNoteCaller: DSNoteCaller{contract: contract}, DSNoteTransactor: DSNoteTransactor{contract: contract}, DSNoteFilterer: DSNoteFilterer{contract: contract}}, nil
}

// DSNote is an auto generated Go binding around an Ethereum contract.
type DSNote struct {
	DSNoteCaller     // Read-only binding to the contract
	DSNoteTransactor // Write-only binding to the contract
	DSNoteFilterer   // Log filterer for contract events
}

// DSNoteCaller is an auto generated read-only Go binding around an Ethereum contract.
type DSNoteCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DSNoteTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DSNoteTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DSNoteFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DSNoteFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DSNoteSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DSNoteSession struct {
	Contract     *DSNote           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DSNoteCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DSNoteCallerSession struct {
	Contract *DSNoteCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// DSNoteTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DSNoteTransactorSession struct {
	Contract     *DSNoteTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DSNoteRaw is an auto generated low-level Go binding around an Ethereum contract.
type DSNoteRaw struct {
	Contract *DSNote // Generic contract binding to access the raw methods on
}

// DSNoteCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DSNoteCallerRaw struct {
	Contract *DSNoteCaller // Generic read-only contract binding to access the raw methods on
}

// DSNoteTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DSNoteTransactorRaw struct {
	Contract *DSNoteTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDSNote creates a new instance of DSNote, bound to a specific deployed contract.
func NewDSNote(address common.Address, backend bind.ContractBackend) (*DSNote, error) {
	contract, err := bindDSNote(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &DSNote{DSNoteCaller: DSNoteCaller{contract: contract}, DSNoteTransactor: DSNoteTransactor{contract: contract}, DSNoteFilterer: DSNoteFilterer{contract: contract}}, nil
}

// NewDSNoteCaller creates a new read-only instance of DSNote, bound to a specific deployed contract.
func NewDSNoteCaller(address common.Address, caller bind.ContractCaller) (*DSNoteCaller, error) {
	contract, err := bindDSNote(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DSNoteCaller{contract: contract}, nil
}

// NewDSNoteTransactor creates a new write-only instance of DSNote, bound to a specific deployed contract.
func NewDSNoteTransactor(address common.Address, transactor bind.ContractTransactor) (*DSNoteTransactor, error) {
	contract, err := bindDSNote(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DSNoteTransactor{contract: contract}, nil
}

// NewDSNoteFilterer creates a new log filterer instance of DSNote, bound to a specific deployed contract.
func NewDSNoteFilterer(address common.Address, filterer bind.ContractFilterer) (*DSNoteFilterer, error) {
	contract, err := bindDSNote(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DSNoteFilterer{contract: contract}, nil
}

// bindDSNote binds a generic wrapper to an already deployed contract.
func bindDSNote(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(DSNoteABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DSNote *DSNoteRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DSNote.Contract.DSNoteCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DSNote *DSNoteRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DSNote.Contract.DSNoteTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DSNote *DSNoteRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DSNote.Contract.DSNoteTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DSNote *DSNoteCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DSNote.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DSNote *DSNoteTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DSNote.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DSNote *DSNoteTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DSNote.Contract.contract.Transact(opts, method, params...)
}

// DSStopMetaData contains all meta data concerning the DSStop contract.
var DSStopMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"foo\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"bar\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"fax\",\"type\":\"bytes\"}],\"name\":\"LogNote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contractDSAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractDSAuthority\",\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b5033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9460405160405180910390a2610b5d806100a46000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80637a9e5e4b1161005b5780637a9e5e4b146100c65780638da5cb5b146100e2578063be9a655514610100578063bf7e214f1461010a5761007d565b806307da68f51461008257806313af40351461008c57806375f12b21146100a8575b600080fd5b61008a610128565b005b6100a660048036038101906100a191906107cc565b61023e565b005b6100b0610354565b6040516100bd9190610940565b60405180910390f35b6100e060048036038101906100db9190610826565b610367565b005b6100ea61047a565b6040516100f791906108ee565b60405180910390f35b6101086104a0565b005b6101126105b7565b60405161011f919061095b565b60405180910390f35b610156336000357fffffffff00000000000000000000000000000000000000000000000000000000166105db565b610195576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161018c90610976565b60405180910390fd5b60008060006004359250602435915034905060018060146101000a81548160ff02191690831515021790555081833373ffffffffffffffffffffffffffffffffffffffff166000357fffffffff00000000000000000000000000000000000000000000000000000000167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168460003660405161023193929190610996565b60405180910390a4505050565b61026c336000357fffffffff00000000000000000000000000000000000000000000000000000000166105db565b6102ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102a290610976565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9460405160405180910390a250565b600160149054906101000a900460ff1681565b610395336000357fffffffff00000000000000000000000000000000000000000000000000000000166105db565b6103d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103cb90610976565b60405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada460405160405180910390a250565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6104ce336000357fffffffff00000000000000000000000000000000000000000000000000000000166105db565b61050d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050490610976565b60405180910390fd5b6000806000600435925060243591503490506000600160146101000a81548160ff02191690831515021790555081833373ffffffffffffffffffffffffffffffffffffffff166000357fffffffff00000000000000000000000000000000000000000000000000000000167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916846000366040516105aa93929190610996565b60405180910390a4505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60003073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561061a5760019050610787565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156106795760019050610787565b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156106d75760009050610787565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b70096138430856040518463ffffffff1660e01b815260040161073493929190610909565b60206040518083038186803b15801561074c57600080fd5b505afa158015610760573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078491906107f9565b90505b92915050565b60008135905061079c81610ae2565b92915050565b6000815190506107b181610af9565b92915050565b6000813590506107c681610b10565b92915050565b6000602082840312156107e2576107e1610aa3565b5b60006107f08482850161078d565b91505092915050565b60006020828403121561080f5761080e610aa3565b5b600061081d848285016107a2565b91505092915050565b60006020828403121561083c5761083b610aa3565b5b600061084a848285016107b7565b91505092915050565b61085c816109ea565b82525050565b61086b816109fc565b82525050565b61087a81610a08565b82525050565b600061088c83856109c8565b9350610899838584610a94565b6108a283610aa8565b840190509392505050565b6108b681610a70565b82525050565b60006108c96014836109d9565b91506108d482610ab9565b602082019050919050565b6108e881610a66565b82525050565b60006020820190506109036000830184610853565b92915050565b600060608201905061091e6000830186610853565b61092b6020830185610853565b6109386040830184610871565b949350505050565b60006020820190506109556000830184610862565b92915050565b600060208201905061097060008301846108ad565b92915050565b6000602082019050818103600083015261098f816108bc565b9050919050565b60006040820190506109ab60008301866108df565b81810360208301526109be818486610880565b9050949350505050565b600082825260208201905092915050565b600082825260208201905092915050565b60006109f582610a46565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000610a3f826109ea565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610a7b82610a82565b9050919050565b6000610a8d82610a46565b9050919050565b82818337600083830152505050565b600080fd5b6000601f19601f8301169050919050565b7f64732d617574682d756e617574686f72697a6564000000000000000000000000600082015250565b610aeb816109ea565b8114610af657600080fd5b50565b610b02816109fc565b8114610b0d57600080fd5b50565b610b1981610a34565b8114610b2457600080fd5b5056fea264697066735822122038f882802aa98f66bc368651ad8748c1b151a705ea948aae01880e5db6d6a27a64736f6c63430008060033",
}

// DSStopABI is the input ABI used to generate the binding from.
// Deprecated: Use DSStopMetaData.ABI instead.
var DSStopABI = DSStopMetaData.ABI

// DSStopBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use DSStopMetaData.Bin instead.
var DSStopBin = DSStopMetaData.Bin

// DeployDSStop deploys a new Ethereum contract, binding an instance of DSStop to it.
func DeployDSStop(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *DSStop, error) {
	parsed, err := DSStopMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(DSStopBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &DSStop{DSStopCaller: DSStopCaller{contract: contract}, DSStopTransactor: DSStopTransactor{contract: contract}, DSStopFilterer: DSStopFilterer{contract: contract}}, nil
}

// DSStop is an auto generated Go binding around an Ethereum contract.
type DSStop struct {
	DSStopCaller     // Read-only binding to the contract
	DSStopTransactor // Write-only binding to the contract
	DSStopFilterer   // Log filterer for contract events
}

// DSStopCaller is an auto generated read-only Go binding around an Ethereum contract.
type DSStopCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DSStopTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DSStopTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DSStopFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DSStopFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DSStopSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DSStopSession struct {
	Contract     *DSStop           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DSStopCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DSStopCallerSession struct {
	Contract *DSStopCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// DSStopTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DSStopTransactorSession struct {
	Contract     *DSStopTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DSStopRaw is an auto generated low-level Go binding around an Ethereum contract.
type DSStopRaw struct {
	Contract *DSStop // Generic contract binding to access the raw methods on
}

// DSStopCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DSStopCallerRaw struct {
	Contract *DSStopCaller // Generic read-only contract binding to access the raw methods on
}

// DSStopTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DSStopTransactorRaw struct {
	Contract *DSStopTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDSStop creates a new instance of DSStop, bound to a specific deployed contract.
func NewDSStop(address common.Address, backend bind.ContractBackend) (*DSStop, error) {
	contract, err := bindDSStop(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &DSStop{DSStopCaller: DSStopCaller{contract: contract}, DSStopTransactor: DSStopTransactor{contract: contract}, DSStopFilterer: DSStopFilterer{contract: contract}}, nil
}

// NewDSStopCaller creates a new read-only instance of DSStop, bound to a specific deployed contract.
func NewDSStopCaller(address common.Address, caller bind.ContractCaller) (*DSStopCaller, error) {
	contract, err := bindDSStop(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DSStopCaller{contract: contract}, nil
}

// NewDSStopTransactor creates a new write-only instance of DSStop, bound to a specific deployed contract.
func NewDSStopTransactor(address common.Address, transactor bind.ContractTransactor) (*DSStopTransactor, error) {
	contract, err := bindDSStop(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DSStopTransactor{contract: contract}, nil
}

// NewDSStopFilterer creates a new log filterer instance of DSStop, bound to a specific deployed contract.
func NewDSStopFilterer(address common.Address, filterer bind.ContractFilterer) (*DSStopFilterer, error) {
	contract, err := bindDSStop(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DSStopFilterer{contract: contract}, nil
}

// bindDSStop binds a generic wrapper to an already deployed contract.
func bindDSStop(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(DSStopABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DSStop *DSStopRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DSStop.Contract.DSStopCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DSStop *DSStopRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DSStop.Contract.DSStopTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DSStop *DSStopRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DSStop.Contract.DSStopTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DSStop *DSStopCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DSStop.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DSStop *DSStopTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DSStop.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DSStop *DSStopTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DSStop.Contract.contract.Transact(opts, method, params...)
}

// Authority is a free data retrieval call binding the contract method 0xbf7e214f.
//
// Solidity: function authority() view returns(address)
func (_DSStop *DSStopCaller) Authority(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _DSStop.contract.Call(opts, &out, "authority")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Authority is a free data retrieval call binding the contract method 0xbf7e214f.
//
// Solidity: function authority() view returns(address)
func (_DSStop *DSStopSession) Authority() (common.Address, error) {
	return _DSStop.Contract.Authority(&_DSStop.CallOpts)
}

// Authority is a free data retrieval call binding the contract method 0xbf7e214f.
//
// Solidity: function authority() view returns(address)
func (_DSStop *DSStopCallerSession) Authority() (common.Address, error) {
	return _DSStop.Contract.Authority(&_DSStop.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_DSStop *DSStopCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _DSStop.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_DSStop *DSStopSession) Owner() (common.Address, error) {
	return _DSStop.Contract.Owner(&_DSStop.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_DSStop *DSStopCallerSession) Owner() (common.Address, error) {
	return _DSStop.Contract.Owner(&_DSStop.CallOpts)
}

// Stopped is a free data retrieval call binding the contract method 0x75f12b21.
//
// Solidity: function stopped() view returns(bool)
func (_DSStop *DSStopCaller) Stopped(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _DSStop.contract.Call(opts, &out, "stopped")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Stopped is a free data retrieval call binding the contract method 0x75f12b21.
//
// Solidity: function stopped() view returns(bool)
func (_DSStop *DSStopSession) Stopped() (bool, error) {
	return _DSStop.Contract.Stopped(&_DSStop.CallOpts)
}

// Stopped is a free data retrieval call binding the contract method 0x75f12b21.
//
// Solidity: function stopped() view returns(bool)
func (_DSStop *DSStopCallerSession) Stopped() (bool, error) {
	return _DSStop.Contract.Stopped(&_DSStop.CallOpts)
}

// SetAuthority is a paid mutator transaction binding the contract method 0x7a9e5e4b.
//
// Solidity: function setAuthority(address authority_) returns()
func (_DSStop *DSStopTransactor) SetAuthority(opts *bind.TransactOpts, authority_ common.Address) (*types.Transaction, error) {
	return _DSStop.contract.Transact(opts, "setAuthority", authority_)
}

// SetAuthority is a paid mutator transaction binding the contract method 0x7a9e5e4b.
//
// Solidity: function setAuthority(address authority_) returns()
func (_DSStop *DSStopSession) SetAuthority(authority_ common.Address) (*types.Transaction, error) {
	return _DSStop.Contract.SetAuthority(&_DSStop.TransactOpts, authority_)
}

// SetAuthority is a paid mutator transaction binding the contract method 0x7a9e5e4b.
//
// Solidity: function setAuthority(address authority_) returns()
func (_DSStop *DSStopTransactorSession) SetAuthority(authority_ common.Address) (*types.Transaction, error) {
	return _DSStop.Contract.SetAuthority(&_DSStop.TransactOpts, authority_)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address owner_) returns()
func (_DSStop *DSStopTransactor) SetOwner(opts *bind.TransactOpts, owner_ common.Address) (*types.Transaction, error) {
	return _DSStop.contract.Transact(opts, "setOwner", owner_)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address owner_) returns()
func (_DSStop *DSStopSession) SetOwner(owner_ common.Address) (*types.Transaction, error) {
	return _DSStop.Contract.SetOwner(&_DSStop.TransactOpts, owner_)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address owner_) returns()
func (_DSStop *DSStopTransactorSession) SetOwner(owner_ common.Address) (*types.Transaction, error) {
	return _DSStop.Contract.SetOwner(&_DSStop.TransactOpts, owner_)
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_DSStop *DSStopTransactor) Start(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DSStop.contract.Transact(opts, "start")
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_DSStop *DSStopSession) Start() (*types.Transaction, error) {
	return _DSStop.Contract.Start(&_DSStop.TransactOpts)
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_DSStop *DSStopTransactorSession) Start() (*types.Transaction, error) {
	return _DSStop.Contract.Start(&_DSStop.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_DSStop *DSStopTransactor) Stop(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DSStop.contract.Transact(opts, "stop")
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_DSStop *DSStopSession) Stop() (*types.Transaction, error) {
	return _DSStop.Contract.Stop(&_DSStop.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_DSStop *DSStopTransactorSession) Stop() (*types.Transaction, error) {
	return _DSStop.Contract.Stop(&_DSStop.TransactOpts)
}

// DSStopLogSetAuthorityIterator is returned from FilterLogSetAuthority and is used to iterate over the raw logs and unpacked data for LogSetAuthority events raised by the DSStop contract.
type DSStopLogSetAuthorityIterator struct {
	Event *DSStopLogSetAuthority // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DSStopLogSetAuthorityIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DSStopLogSetAuthority)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DSStopLogSetAuthority)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DSStopLogSetAuthorityIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DSStopLogSetAuthorityIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DSStopLogSetAuthority represents a LogSetAuthority event raised by the DSStop contract.
type DSStopLogSetAuthority struct {
	Authority common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterLogSetAuthority is a free log retrieval operation binding the contract event 0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4.
//
// Solidity: event LogSetAuthority(address indexed authority)
func (_DSStop *DSStopFilterer) FilterLogSetAuthority(opts *bind.FilterOpts, authority []common.Address) (*DSStopLogSetAuthorityIterator, error) {

	var authorityRule []interface{}
	for _, authorityItem := range authority {
		authorityRule = append(authorityRule, authorityItem)
	}

	logs, sub, err := _DSStop.contract.FilterLogs(opts, "LogSetAuthority", authorityRule)
	if err != nil {
		return nil, err
	}
	return &DSStopLogSetAuthorityIterator{contract: _DSStop.contract, event: "LogSetAuthority", logs: logs, sub: sub}, nil
}

// WatchLogSetAuthority is a free log subscription operation binding the contract event 0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4.
//
// Solidity: event LogSetAuthority(address indexed authority)
func (_DSStop *DSStopFilterer) WatchLogSetAuthority(opts *bind.WatchOpts, sink chan<- *DSStopLogSetAuthority, authority []common.Address) (event.Subscription, error) {

	var authorityRule []interface{}
	for _, authorityItem := range authority {
		authorityRule = append(authorityRule, authorityItem)
	}

	logs, sub, err := _DSStop.contract.WatchLogs(opts, "LogSetAuthority", authorityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DSStopLogSetAuthority)
				if err := _DSStop.contract.UnpackLog(event, "LogSetAuthority", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogSetAuthority is a log parse operation binding the contract event 0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4.
//
// Solidity: event LogSetAuthority(address indexed authority)
func (_DSStop *DSStopFilterer) ParseLogSetAuthority(log types.Log) (*DSStopLogSetAuthority, error) {
	event := new(DSStopLogSetAuthority)
	if err := _DSStop.contract.UnpackLog(event, "LogSetAuthority", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DSStopLogSetOwnerIterator is returned from FilterLogSetOwner and is used to iterate over the raw logs and unpacked data for LogSetOwner events raised by the DSStop contract.
type DSStopLogSetOwnerIterator struct {
	Event *DSStopLogSetOwner // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DSStopLogSetOwnerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DSStopLogSetOwner)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DSStopLogSetOwner)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DSStopLogSetOwnerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DSStopLogSetOwnerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DSStopLogSetOwner represents a LogSetOwner event raised by the DSStop contract.
type DSStopLogSetOwner struct {
	Owner common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogSetOwner is a free log retrieval operation binding the contract event 0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94.
//
// Solidity: event LogSetOwner(address indexed owner)
func (_DSStop *DSStopFilterer) FilterLogSetOwner(opts *bind.FilterOpts, owner []common.Address) (*DSStopLogSetOwnerIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _DSStop.contract.FilterLogs(opts, "LogSetOwner", ownerRule)
	if err != nil {
		return nil, err
	}
	return &DSStopLogSetOwnerIterator{contract: _DSStop.contract, event: "LogSetOwner", logs: logs, sub: sub}, nil
}

// WatchLogSetOwner is a free log subscription operation binding the contract event 0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94.
//
// Solidity: event LogSetOwner(address indexed owner)
func (_DSStop *DSStopFilterer) WatchLogSetOwner(opts *bind.WatchOpts, sink chan<- *DSStopLogSetOwner, owner []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _DSStop.contract.WatchLogs(opts, "LogSetOwner", ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DSStopLogSetOwner)
				if err := _DSStop.contract.UnpackLog(event, "LogSetOwner", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogSetOwner is a log parse operation binding the contract event 0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94.
//
// Solidity: event LogSetOwner(address indexed owner)
func (_DSStop *DSStopFilterer) ParseLogSetOwner(log types.Log) (*DSStopLogSetOwner, error) {
	event := new(DSStopLogSetOwner)
	if err := _DSStop.contract.UnpackLog(event, "LogSetOwner", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DSTokenMetaData contains all meta data concerning the DSToken contract.
var DSTokenMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"symbol_\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Start\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Stop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contractDSAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"move\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"pull\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"push\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractDSAuthority\",\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"name_\",\"type\":\"bytes32\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x6080604052601260065560006007553480156200001b57600080fd5b5060405162002248380380620022488339818101604052810190620000419190620000ea565b33600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9460405160405180910390a2806005819055505062000145565b600081519050620000e4816200012b565b92915050565b60006020828403121562000103576200010262000126565b5b60006200011384828501620000d3565b91505092915050565b6000819050919050565b600080fd5b62000136816200011c565b81146200014257600080fd5b50565b6120f380620001556000396000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c80637a9e5e4b116100de578063b753a98c11610097578063bf7e214f11610071578063bf7e214f146103fc578063daea85c51461041a578063dd62ed3e1461044a578063f2d5d56b1461047a57610173565b8063b753a98c146103ba578063bb35783b146103d6578063be9a6555146103f257610173565b80637a9e5e4b146102fa5780638da5cb5b1461031657806395d89b41146103345780639dc29fac14610352578063a0712d681461036e578063a9059cbb1461038a57610173565b8063313ce56711610130578063313ce5671461023a57806340c10f191461025857806342966c68146102745780635ac801fe1461029057806370a08231146102ac57806375f12b21146102dc57610173565b806306fdde031461017857806307da68f514610196578063095ea7b3146101a057806313af4035146101d057806318160ddd146101ec57806323b872dd1461020a575b600080fd5b610180610496565b60405161018d9190611cc0565b60405180910390f35b61019e61049c565b005b6101ba60048036038101906101b59190611a33565b610551565b6040516101c79190611ca5565b60405180910390f35b6101ea60048036038101906101e59190611973565b610693565b005b6101f46107a9565b6040516102019190611db6565b60405180910390f35b610224600480360381019061021f91906119e0565b6107af565b6040516102319190611ca5565b60405180910390f35b610242610cae565b60405161024f9190611db6565b60405180910390f35b610272600480360381019061026d9190611a33565b610cb4565b005b61028e60048036038101906102899190611afa565b610e61565b005b6102aa60048036038101906102a59190611aa0565b610e6e565b005b6102c660048036038101906102c19190611973565b610ee5565b6040516102d39190611db6565b60405180910390f35b6102e4610efd565b6040516102f19190611ca5565b60405180910390f35b610314600480360381019061030f9190611acd565b610f10565b005b61031e611023565b60405161032b9190611c53565b60405180910390f35b61033c611049565b6040516103499190611cc0565b60405180910390f35b61036c60048036038101906103679190611a33565b61104f565b005b61038860048036038101906103839190611afa565b611521565b005b6103a4600480360381019061039f9190611a33565b61152e565b6040516103b19190611ca5565b60405180910390f35b6103d460048036038101906103cf9190611a33565b611543565b005b6103f060048036038101906103eb91906119e0565b611553565b005b6103fa611564565b005b61040461161a565b6040516104119190611cdb565b60405180910390f35b610434600480360381019061042f9190611973565b61163e565b6040516104419190611ca5565b60405180910390f35b610464600480360381019061045f91906119a0565b611671565b6040516104719190611db6565b60405180910390f35b610494600480360381019061048f9190611a33565b611696565b005b60075481565b6104ca336000357fffffffff00000000000000000000000000000000000000000000000000000000166116a6565b610509576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050090611d16565b60405180910390fd5b60018060146101000a81548160ff0219169083151502179055507fbedf0f4abfe86d4ffad593d9607fe70e83ea706033d44d24b3b6283cf3fc4f6b60405160405180910390a1565b6000600160149054906101000a900460ff16156105a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059a90611d96565b60405180910390fd5b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516106819190611db6565b60405180910390a36001905092915050565b6106c1336000357fffffffff00000000000000000000000000000000000000000000000000000000166116a6565b610700576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f790611d16565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9460405160405180910390a250565b60025481565b6000600160149054906101000a900460ff1615610801576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f890611d96565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141580156108d957507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414155b15610aa45781600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561099d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099490611d76565b60405180910390fd5b610a23600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611858565b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b81600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610b26576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1d90611d56565b60405180910390fd5b610b6f600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611858565b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610bfb600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836118b1565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610c9b9190611db6565b60405180910390a3600190509392505050565b60065481565b610ce2336000357fffffffff00000000000000000000000000000000000000000000000000000000166116a6565b610d21576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1890611d16565b60405180910390fd5b600160149054906101000a900460ff1615610d71576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6890611d96565b60405180910390fd5b610dba600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054826118b1565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610e09600254826118b1565b6002819055508173ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688582604051610e559190611db6565b60405180910390a25050565b610e6b338261104f565b50565b610e9c336000357fffffffff00000000000000000000000000000000000000000000000000000000166116a6565b610edb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed290611d16565b60405180910390fd5b8060078190555050565b60036020528060005260406000206000915090505481565b600160149054906101000a900460ff1681565b610f3e336000357fffffffff00000000000000000000000000000000000000000000000000000000166116a6565b610f7d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7490611d16565b60405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada460405160405180910390a250565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b61107d336000357fffffffff00000000000000000000000000000000000000000000000000000000166116a6565b6110bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110b390611d16565b60405180910390fd5b600160149054906101000a900460ff161561110c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161110390611d96565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141580156111e457507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414155b156113af5780600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156112a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161129f90611d76565b60405180910390fd5b61132e600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482611858565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b80600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611431576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161142890611d56565b60405180910390fd5b61147a600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482611858565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506114c960025482611858565b6002819055508173ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5826040516115159190611db6565b60405180910390a25050565b61152b3382610cb4565b50565b600061153b3384846107af565b905092915050565b61154e3383836107af565b505050565b61155e8383836107af565b50505050565b611592336000357fffffffff00000000000000000000000000000000000000000000000000000000166116a6565b6115d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115c890611d16565b60405180910390fd5b6000600160146101000a81548160ff0219169083151502179055507f1b55ba3aa851a46be3b365aee5b5c140edd620d578922f3e8466d2cbd96f954b60405160405180910390a1565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600061166a827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610551565b9050919050565b6004602052816000526040600020602052806000526040600020600091509150505481565b6116a18233836107af565b505050565b60003073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156116e55760019050611852565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156117445760019050611852565b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156117a25760009050611852565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b70096138430856040518463ffffffff1660e01b81526004016117ff93929190611c6e565b60206040518083038186803b15801561181757600080fd5b505afa15801561182b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061184f9190611a73565b90505b92915050565b60008282846118679190611e38565b91508111156118ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118a290611cf6565b60405180910390fd5b92915050565b60008282846118c09190611de2565b9150811015611904576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118fb90611d36565b60405180910390fd5b92915050565b6000813590506119198161204a565b92915050565b60008151905061192e81612061565b92915050565b60008135905061194381612078565b92915050565b6000813590506119588161208f565b92915050565b60008135905061196d816120a6565b92915050565b60006020828403121561198957611988611f4f565b5b60006119978482850161190a565b91505092915050565b600080604083850312156119b7576119b6611f4f565b5b60006119c58582860161190a565b92505060206119d68582860161190a565b9150509250929050565b6000806000606084860312156119f9576119f8611f4f565b5b6000611a078682870161190a565b9350506020611a188682870161190a565b9250506040611a298682870161195e565b9150509250925092565b60008060408385031215611a4a57611a49611f4f565b5b6000611a588582860161190a565b9250506020611a698582860161195e565b9150509250929050565b600060208284031215611a8957611a88611f4f565b5b6000611a978482850161191f565b91505092915050565b600060208284031215611ab657611ab5611f4f565b5b6000611ac484828501611934565b91505092915050565b600060208284031215611ae357611ae2611f4f565b5b6000611af184828501611949565b91505092915050565b600060208284031215611b1057611b0f611f4f565b5b6000611b1e8482850161195e565b91505092915050565b611b3081611e6c565b82525050565b611b3f81611e7e565b82525050565b611b4e81611e8a565b82525050565b611b5d81611e94565b82525050565b611b6c81611efc565b82525050565b6000611b7f601583611dd1565b9150611b8a82611f54565b602082019050919050565b6000611ba2601483611dd1565b9150611bad82611f7d565b602082019050919050565b6000611bc5601483611dd1565b9150611bd082611fa6565b602082019050919050565b6000611be8601d83611dd1565b9150611bf382611fcf565b602082019050919050565b6000611c0b601e83611dd1565b9150611c1682611ff8565b602082019050919050565b6000611c2e601283611dd1565b9150611c3982612021565b602082019050919050565b611c4d81611ef2565b82525050565b6000602082019050611c686000830184611b27565b92915050565b6000606082019050611c836000830186611b27565b611c906020830185611b27565b611c9d6040830184611b54565b949350505050565b6000602082019050611cba6000830184611b36565b92915050565b6000602082019050611cd56000830184611b45565b92915050565b6000602082019050611cf06000830184611b63565b92915050565b60006020820190508181036000830152611d0f81611b72565b9050919050565b60006020820190508181036000830152611d2f81611b95565b9050919050565b60006020820190508181036000830152611d4f81611bb8565b9050919050565b60006020820190508181036000830152611d6f81611bdb565b9050919050565b60006020820190508181036000830152611d8f81611bfe565b9050919050565b60006020820190508181036000830152611daf81611c21565b9050919050565b6000602082019050611dcb6000830184611c44565b92915050565b600082825260208201905092915050565b6000611ded82611ef2565b9150611df883611ef2565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611e2d57611e2c611f20565b5b828201905092915050565b6000611e4382611ef2565b9150611e4e83611ef2565b925082821015611e6157611e60611f20565b5b828203905092915050565b6000611e7782611ed2565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000611ecb82611e6c565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611f0782611f0e565b9050919050565b6000611f1982611ed2565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600080fd5b7f64732d6d6174682d7375622d756e646572666c6f770000000000000000000000600082015250565b7f64732d617574682d756e617574686f72697a6564000000000000000000000000600082015250565b7f64732d6d6174682d6164642d6f766572666c6f77000000000000000000000000600082015250565b7f64732d746f6b656e2d696e73756666696369656e742d62616c616e6365000000600082015250565b7f64732d746f6b656e2d696e73756666696369656e742d617070726f76616c0000600082015250565b7f64732d73746f702d69732d73746f707065640000000000000000000000000000600082015250565b61205381611e6c565b811461205e57600080fd5b50565b61206a81611e7e565b811461207557600080fd5b50565b61208181611e8a565b811461208c57600080fd5b50565b61209881611ec0565b81146120a357600080fd5b50565b6120af81611ef2565b81146120ba57600080fd5b5056fea264697066735822122031e6f6e0f6e1df19f557e4ee6dbc3754da0c1f8483e60fded4a10575750493e164736f6c63430008060033",
}

// DSTokenABI is the input ABI used to generate the binding from.
// Deprecated: Use DSTokenMetaData.ABI instead.
var DSTokenABI = DSTokenMetaData.ABI

// DSTokenBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use DSTokenMetaData.Bin instead.
var DSTokenBin = DSTokenMetaData.Bin

// DeployDSToken deploys a new Ethereum contract, binding an instance of DSToken to it.
func DeployDSToken(auth *bind.TransactOpts, backend bind.ContractBackend, symbol_ [32]byte) (common.Address, *types.Transaction, *DSToken, error) {
	parsed, err := DSTokenMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(DSTokenBin), backend, symbol_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &DSToken{DSTokenCaller: DSTokenCaller{contract: contract}, DSTokenTransactor: DSTokenTransactor{contract: contract}, DSTokenFilterer: DSTokenFilterer{contract: contract}}, nil
}

// DSToken is an auto generated Go binding around an Ethereum contract.
type DSToken struct {
	DSTokenCaller     // Read-only binding to the contract
	DSTokenTransactor // Write-only binding to the contract
	DSTokenFilterer   // Log filterer for contract events
}

// DSTokenCaller is an auto generated read-only Go binding around an Ethereum contract.
type DSTokenCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DSTokenTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DSTokenTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DSTokenFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DSTokenFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DSTokenSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DSTokenSession struct {
	Contract     *DSToken          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DSTokenCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DSTokenCallerSession struct {
	Contract *DSTokenCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// DSTokenTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DSTokenTransactorSession struct {
	Contract     *DSTokenTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// DSTokenRaw is an auto generated low-level Go binding around an Ethereum contract.
type DSTokenRaw struct {
	Contract *DSToken // Generic contract binding to access the raw methods on
}

// DSTokenCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DSTokenCallerRaw struct {
	Contract *DSTokenCaller // Generic read-only contract binding to access the raw methods on
}

// DSTokenTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DSTokenTransactorRaw struct {
	Contract *DSTokenTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDSToken creates a new instance of DSToken, bound to a specific deployed contract.
func NewDSToken(address common.Address, backend bind.ContractBackend) (*DSToken, error) {
	contract, err := bindDSToken(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &DSToken{DSTokenCaller: DSTokenCaller{contract: contract}, DSTokenTransactor: DSTokenTransactor{contract: contract}, DSTokenFilterer: DSTokenFilterer{contract: contract}}, nil
}

// NewDSTokenCaller creates a new read-only instance of DSToken, bound to a specific deployed contract.
func NewDSTokenCaller(address common.Address, caller bind.ContractCaller) (*DSTokenCaller, error) {
	contract, err := bindDSToken(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DSTokenCaller{contract: contract}, nil
}

// NewDSTokenTransactor creates a new write-only instance of DSToken, bound to a specific deployed contract.
func NewDSTokenTransactor(address common.Address, transactor bind.ContractTransactor) (*DSTokenTransactor, error) {
	contract, err := bindDSToken(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DSTokenTransactor{contract: contract}, nil
}

// NewDSTokenFilterer creates a new log filterer instance of DSToken, bound to a specific deployed contract.
func NewDSTokenFilterer(address common.Address, filterer bind.ContractFilterer) (*DSTokenFilterer, error) {
	contract, err := bindDSToken(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DSTokenFilterer{contract: contract}, nil
}

// bindDSToken binds a generic wrapper to an already deployed contract.
func bindDSToken(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(DSTokenABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DSToken *DSTokenRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DSToken.Contract.DSTokenCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DSToken *DSTokenRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DSToken.Contract.DSTokenTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DSToken *DSTokenRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DSToken.Contract.DSTokenTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DSToken *DSTokenCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DSToken.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DSToken *DSTokenTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DSToken.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DSToken *DSTokenTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DSToken.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address , address ) view returns(uint256)
func (_DSToken *DSTokenCaller) Allowance(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _DSToken.contract.Call(opts, &out, "allowance", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address , address ) view returns(uint256)
func (_DSToken *DSTokenSession) Allowance(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _DSToken.Contract.Allowance(&_DSToken.CallOpts, arg0, arg1)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address , address ) view returns(uint256)
func (_DSToken *DSTokenCallerSession) Allowance(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _DSToken.Contract.Allowance(&_DSToken.CallOpts, arg0, arg1)
}

// Authority is a free data retrieval call binding the contract method 0xbf7e214f.
//
// Solidity: function authority() view returns(address)
func (_DSToken *DSTokenCaller) Authority(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _DSToken.contract.Call(opts, &out, "authority")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Authority is a free data retrieval call binding the contract method 0xbf7e214f.
//
// Solidity: function authority() view returns(address)
func (_DSToken *DSTokenSession) Authority() (common.Address, error) {
	return _DSToken.Contract.Authority(&_DSToken.CallOpts)
}

// Authority is a free data retrieval call binding the contract method 0xbf7e214f.
//
// Solidity: function authority() view returns(address)
func (_DSToken *DSTokenCallerSession) Authority() (common.Address, error) {
	return _DSToken.Contract.Authority(&_DSToken.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address ) view returns(uint256)
func (_DSToken *DSTokenCaller) BalanceOf(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _DSToken.contract.Call(opts, &out, "balanceOf", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address ) view returns(uint256)
func (_DSToken *DSTokenSession) BalanceOf(arg0 common.Address) (*big.Int, error) {
	return _DSToken.Contract.BalanceOf(&_DSToken.CallOpts, arg0)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address ) view returns(uint256)
func (_DSToken *DSTokenCallerSession) BalanceOf(arg0 common.Address) (*big.Int, error) {
	return _DSToken.Contract.BalanceOf(&_DSToken.CallOpts, arg0)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint256)
func (_DSToken *DSTokenCaller) Decimals(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DSToken.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint256)
func (_DSToken *DSTokenSession) Decimals() (*big.Int, error) {
	return _DSToken.Contract.Decimals(&_DSToken.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint256)
func (_DSToken *DSTokenCallerSession) Decimals() (*big.Int, error) {
	return _DSToken.Contract.Decimals(&_DSToken.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(bytes32)
func (_DSToken *DSTokenCaller) Name(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _DSToken.contract.Call(opts, &out, "name")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(bytes32)
func (_DSToken *DSTokenSession) Name() ([32]byte, error) {
	return _DSToken.Contract.Name(&_DSToken.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(bytes32)
func (_DSToken *DSTokenCallerSession) Name() ([32]byte, error) {
	return _DSToken.Contract.Name(&_DSToken.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_DSToken *DSTokenCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _DSToken.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_DSToken *DSTokenSession) Owner() (common.Address, error) {
	return _DSToken.Contract.Owner(&_DSToken.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_DSToken *DSTokenCallerSession) Owner() (common.Address, error) {
	return _DSToken.Contract.Owner(&_DSToken.CallOpts)
}

// Stopped is a free data retrieval call binding the contract method 0x75f12b21.
//
// Solidity: function stopped() view returns(bool)
func (_DSToken *DSTokenCaller) Stopped(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _DSToken.contract.Call(opts, &out, "stopped")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Stopped is a free data retrieval call binding the contract method 0x75f12b21.
//
// Solidity: function stopped() view returns(bool)
func (_DSToken *DSTokenSession) Stopped() (bool, error) {
	return _DSToken.Contract.Stopped(&_DSToken.CallOpts)
}

// Stopped is a free data retrieval call binding the contract method 0x75f12b21.
//
// Solidity: function stopped() view returns(bool)
func (_DSToken *DSTokenCallerSession) Stopped() (bool, error) {
	return _DSToken.Contract.Stopped(&_DSToken.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(bytes32)
func (_DSToken *DSTokenCaller) Symbol(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _DSToken.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(bytes32)
func (_DSToken *DSTokenSession) Symbol() ([32]byte, error) {
	return _DSToken.Contract.Symbol(&_DSToken.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(bytes32)
func (_DSToken *DSTokenCallerSession) Symbol() ([32]byte, error) {
	return _DSToken.Contract.Symbol(&_DSToken.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_DSToken *DSTokenCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DSToken.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_DSToken *DSTokenSession) TotalSupply() (*big.Int, error) {
	return _DSToken.Contract.TotalSupply(&_DSToken.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_DSToken *DSTokenCallerSession) TotalSupply() (*big.Int, error) {
	return _DSToken.Contract.TotalSupply(&_DSToken.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address guy, uint256 wad) returns(bool)
func (_DSToken *DSTokenTransactor) Approve(opts *bind.TransactOpts, guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.contract.Transact(opts, "approve", guy, wad)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address guy, uint256 wad) returns(bool)
func (_DSToken *DSTokenSession) Approve(guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.Contract.Approve(&_DSToken.TransactOpts, guy, wad)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address guy, uint256 wad) returns(bool)
func (_DSToken *DSTokenTransactorSession) Approve(guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.Contract.Approve(&_DSToken.TransactOpts, guy, wad)
}

// Approve0 is a paid mutator transaction binding the contract method 0xdaea85c5.
//
// Solidity: function approve(address guy) returns(bool)
func (_DSToken *DSTokenTransactor) Approve0(opts *bind.TransactOpts, guy common.Address) (*types.Transaction, error) {
	return _DSToken.contract.Transact(opts, "approve0", guy)
}

// Approve0 is a paid mutator transaction binding the contract method 0xdaea85c5.
//
// Solidity: function approve(address guy) returns(bool)
func (_DSToken *DSTokenSession) Approve0(guy common.Address) (*types.Transaction, error) {
	return _DSToken.Contract.Approve0(&_DSToken.TransactOpts, guy)
}

// Approve0 is a paid mutator transaction binding the contract method 0xdaea85c5.
//
// Solidity: function approve(address guy) returns(bool)
func (_DSToken *DSTokenTransactorSession) Approve0(guy common.Address) (*types.Transaction, error) {
	return _DSToken.Contract.Approve0(&_DSToken.TransactOpts, guy)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 wad) returns()
func (_DSToken *DSTokenTransactor) Burn(opts *bind.TransactOpts, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.contract.Transact(opts, "burn", wad)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 wad) returns()
func (_DSToken *DSTokenSession) Burn(wad *big.Int) (*types.Transaction, error) {
	return _DSToken.Contract.Burn(&_DSToken.TransactOpts, wad)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 wad) returns()
func (_DSToken *DSTokenTransactorSession) Burn(wad *big.Int) (*types.Transaction, error) {
	return _DSToken.Contract.Burn(&_DSToken.TransactOpts, wad)
}

// Burn0 is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address guy, uint256 wad) returns()
func (_DSToken *DSTokenTransactor) Burn0(opts *bind.TransactOpts, guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.contract.Transact(opts, "burn0", guy, wad)
}

// Burn0 is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address guy, uint256 wad) returns()
func (_DSToken *DSTokenSession) Burn0(guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.Contract.Burn0(&_DSToken.TransactOpts, guy, wad)
}

// Burn0 is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address guy, uint256 wad) returns()
func (_DSToken *DSTokenTransactorSession) Burn0(guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.Contract.Burn0(&_DSToken.TransactOpts, guy, wad)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address guy, uint256 wad) returns()
func (_DSToken *DSTokenTransactor) Mint(opts *bind.TransactOpts, guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.contract.Transact(opts, "mint", guy, wad)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address guy, uint256 wad) returns()
func (_DSToken *DSTokenSession) Mint(guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.Contract.Mint(&_DSToken.TransactOpts, guy, wad)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address guy, uint256 wad) returns()
func (_DSToken *DSTokenTransactorSession) Mint(guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.Contract.Mint(&_DSToken.TransactOpts, guy, wad)
}

// Mint0 is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 wad) returns()
func (_DSToken *DSTokenTransactor) Mint0(opts *bind.TransactOpts, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.contract.Transact(opts, "mint0", wad)
}

// Mint0 is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 wad) returns()
func (_DSToken *DSTokenSession) Mint0(wad *big.Int) (*types.Transaction, error) {
	return _DSToken.Contract.Mint0(&_DSToken.TransactOpts, wad)
}

// Mint0 is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 wad) returns()
func (_DSToken *DSTokenTransactorSession) Mint0(wad *big.Int) (*types.Transaction, error) {
	return _DSToken.Contract.Mint0(&_DSToken.TransactOpts, wad)
}

// Move is a paid mutator transaction binding the contract method 0xbb35783b.
//
// Solidity: function move(address src, address dst, uint256 wad) returns()
func (_DSToken *DSTokenTransactor) Move(opts *bind.TransactOpts, src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.contract.Transact(opts, "move", src, dst, wad)
}

// Move is a paid mutator transaction binding the contract method 0xbb35783b.
//
// Solidity: function move(address src, address dst, uint256 wad) returns()
func (_DSToken *DSTokenSession) Move(src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.Contract.Move(&_DSToken.TransactOpts, src, dst, wad)
}

// Move is a paid mutator transaction binding the contract method 0xbb35783b.
//
// Solidity: function move(address src, address dst, uint256 wad) returns()
func (_DSToken *DSTokenTransactorSession) Move(src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.Contract.Move(&_DSToken.TransactOpts, src, dst, wad)
}

// Pull is a paid mutator transaction binding the contract method 0xf2d5d56b.
//
// Solidity: function pull(address src, uint256 wad) returns()
func (_DSToken *DSTokenTransactor) Pull(opts *bind.TransactOpts, src common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.contract.Transact(opts, "pull", src, wad)
}

// Pull is a paid mutator transaction binding the contract method 0xf2d5d56b.
//
// Solidity: function pull(address src, uint256 wad) returns()
func (_DSToken *DSTokenSession) Pull(src common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.Contract.Pull(&_DSToken.TransactOpts, src, wad)
}

// Pull is a paid mutator transaction binding the contract method 0xf2d5d56b.
//
// Solidity: function pull(address src, uint256 wad) returns()
func (_DSToken *DSTokenTransactorSession) Pull(src common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.Contract.Pull(&_DSToken.TransactOpts, src, wad)
}

// Push is a paid mutator transaction binding the contract method 0xb753a98c.
//
// Solidity: function push(address dst, uint256 wad) returns()
func (_DSToken *DSTokenTransactor) Push(opts *bind.TransactOpts, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.contract.Transact(opts, "push", dst, wad)
}

// Push is a paid mutator transaction binding the contract method 0xb753a98c.
//
// Solidity: function push(address dst, uint256 wad) returns()
func (_DSToken *DSTokenSession) Push(dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.Contract.Push(&_DSToken.TransactOpts, dst, wad)
}

// Push is a paid mutator transaction binding the contract method 0xb753a98c.
//
// Solidity: function push(address dst, uint256 wad) returns()
func (_DSToken *DSTokenTransactorSession) Push(dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.Contract.Push(&_DSToken.TransactOpts, dst, wad)
}

// SetAuthority is a paid mutator transaction binding the contract method 0x7a9e5e4b.
//
// Solidity: function setAuthority(address authority_) returns()
func (_DSToken *DSTokenTransactor) SetAuthority(opts *bind.TransactOpts, authority_ common.Address) (*types.Transaction, error) {
	return _DSToken.contract.Transact(opts, "setAuthority", authority_)
}

// SetAuthority is a paid mutator transaction binding the contract method 0x7a9e5e4b.
//
// Solidity: function setAuthority(address authority_) returns()
func (_DSToken *DSTokenSession) SetAuthority(authority_ common.Address) (*types.Transaction, error) {
	return _DSToken.Contract.SetAuthority(&_DSToken.TransactOpts, authority_)
}

// SetAuthority is a paid mutator transaction binding the contract method 0x7a9e5e4b.
//
// Solidity: function setAuthority(address authority_) returns()
func (_DSToken *DSTokenTransactorSession) SetAuthority(authority_ common.Address) (*types.Transaction, error) {
	return _DSToken.Contract.SetAuthority(&_DSToken.TransactOpts, authority_)
}

// SetName is a paid mutator transaction binding the contract method 0x5ac801fe.
//
// Solidity: function setName(bytes32 name_) returns()
func (_DSToken *DSTokenTransactor) SetName(opts *bind.TransactOpts, name_ [32]byte) (*types.Transaction, error) {
	return _DSToken.contract.Transact(opts, "setName", name_)
}

// SetName is a paid mutator transaction binding the contract method 0x5ac801fe.
//
// Solidity: function setName(bytes32 name_) returns()
func (_DSToken *DSTokenSession) SetName(name_ [32]byte) (*types.Transaction, error) {
	return _DSToken.Contract.SetName(&_DSToken.TransactOpts, name_)
}

// SetName is a paid mutator transaction binding the contract method 0x5ac801fe.
//
// Solidity: function setName(bytes32 name_) returns()
func (_DSToken *DSTokenTransactorSession) SetName(name_ [32]byte) (*types.Transaction, error) {
	return _DSToken.Contract.SetName(&_DSToken.TransactOpts, name_)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address owner_) returns()
func (_DSToken *DSTokenTransactor) SetOwner(opts *bind.TransactOpts, owner_ common.Address) (*types.Transaction, error) {
	return _DSToken.contract.Transact(opts, "setOwner", owner_)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address owner_) returns()
func (_DSToken *DSTokenSession) SetOwner(owner_ common.Address) (*types.Transaction, error) {
	return _DSToken.Contract.SetOwner(&_DSToken.TransactOpts, owner_)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address owner_) returns()
func (_DSToken *DSTokenTransactorSession) SetOwner(owner_ common.Address) (*types.Transaction, error) {
	return _DSToken.Contract.SetOwner(&_DSToken.TransactOpts, owner_)
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_DSToken *DSTokenTransactor) Start(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DSToken.contract.Transact(opts, "start")
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_DSToken *DSTokenSession) Start() (*types.Transaction, error) {
	return _DSToken.Contract.Start(&_DSToken.TransactOpts)
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_DSToken *DSTokenTransactorSession) Start() (*types.Transaction, error) {
	return _DSToken.Contract.Start(&_DSToken.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_DSToken *DSTokenTransactor) Stop(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DSToken.contract.Transact(opts, "stop")
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_DSToken *DSTokenSession) Stop() (*types.Transaction, error) {
	return _DSToken.Contract.Stop(&_DSToken.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_DSToken *DSTokenTransactorSession) Stop() (*types.Transaction, error) {
	return _DSToken.Contract.Stop(&_DSToken.TransactOpts)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address dst, uint256 wad) returns(bool)
func (_DSToken *DSTokenTransactor) Transfer(opts *bind.TransactOpts, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.contract.Transact(opts, "transfer", dst, wad)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address dst, uint256 wad) returns(bool)
func (_DSToken *DSTokenSession) Transfer(dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.Contract.Transfer(&_DSToken.TransactOpts, dst, wad)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address dst, uint256 wad) returns(bool)
func (_DSToken *DSTokenTransactorSession) Transfer(dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.Contract.Transfer(&_DSToken.TransactOpts, dst, wad)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address src, address dst, uint256 wad) returns(bool)
func (_DSToken *DSTokenTransactor) TransferFrom(opts *bind.TransactOpts, src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.contract.Transact(opts, "transferFrom", src, dst, wad)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address src, address dst, uint256 wad) returns(bool)
func (_DSToken *DSTokenSession) TransferFrom(src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.Contract.TransferFrom(&_DSToken.TransactOpts, src, dst, wad)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address src, address dst, uint256 wad) returns(bool)
func (_DSToken *DSTokenTransactorSession) TransferFrom(src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.Contract.TransferFrom(&_DSToken.TransactOpts, src, dst, wad)
}

// DSTokenApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the DSToken contract.
type DSTokenApprovalIterator struct {
	Event *DSTokenApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DSTokenApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DSTokenApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DSTokenApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DSTokenApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DSTokenApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DSTokenApproval represents a Approval event raised by the DSToken contract.
type DSTokenApproval struct {
	Src common.Address
	Guy common.Address
	Wad *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed src, address indexed guy, uint256 wad)
func (_DSToken *DSTokenFilterer) FilterApproval(opts *bind.FilterOpts, src []common.Address, guy []common.Address) (*DSTokenApprovalIterator, error) {

	var srcRule []interface{}
	for _, srcItem := range src {
		srcRule = append(srcRule, srcItem)
	}
	var guyRule []interface{}
	for _, guyItem := range guy {
		guyRule = append(guyRule, guyItem)
	}

	logs, sub, err := _DSToken.contract.FilterLogs(opts, "Approval", srcRule, guyRule)
	if err != nil {
		return nil, err
	}
	return &DSTokenApprovalIterator{contract: _DSToken.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed src, address indexed guy, uint256 wad)
func (_DSToken *DSTokenFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *DSTokenApproval, src []common.Address, guy []common.Address) (event.Subscription, error) {

	var srcRule []interface{}
	for _, srcItem := range src {
		srcRule = append(srcRule, srcItem)
	}
	var guyRule []interface{}
	for _, guyItem := range guy {
		guyRule = append(guyRule, guyItem)
	}

	logs, sub, err := _DSToken.contract.WatchLogs(opts, "Approval", srcRule, guyRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DSTokenApproval)
				if err := _DSToken.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed src, address indexed guy, uint256 wad)
func (_DSToken *DSTokenFilterer) ParseApproval(log types.Log) (*DSTokenApproval, error) {
	event := new(DSTokenApproval)
	if err := _DSToken.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DSTokenBurnIterator is returned from FilterBurn and is used to iterate over the raw logs and unpacked data for Burn events raised by the DSToken contract.
type DSTokenBurnIterator struct {
	Event *DSTokenBurn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DSTokenBurnIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DSTokenBurn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DSTokenBurn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DSTokenBurnIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DSTokenBurnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DSTokenBurn represents a Burn event raised by the DSToken contract.
type DSTokenBurn struct {
	Guy common.Address
	Wad *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterBurn is a free log retrieval operation binding the contract event 0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5.
//
// Solidity: event Burn(address indexed guy, uint256 wad)
func (_DSToken *DSTokenFilterer) FilterBurn(opts *bind.FilterOpts, guy []common.Address) (*DSTokenBurnIterator, error) {

	var guyRule []interface{}
	for _, guyItem := range guy {
		guyRule = append(guyRule, guyItem)
	}

	logs, sub, err := _DSToken.contract.FilterLogs(opts, "Burn", guyRule)
	if err != nil {
		return nil, err
	}
	return &DSTokenBurnIterator{contract: _DSToken.contract, event: "Burn", logs: logs, sub: sub}, nil
}

// WatchBurn is a free log subscription operation binding the contract event 0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5.
//
// Solidity: event Burn(address indexed guy, uint256 wad)
func (_DSToken *DSTokenFilterer) WatchBurn(opts *bind.WatchOpts, sink chan<- *DSTokenBurn, guy []common.Address) (event.Subscription, error) {

	var guyRule []interface{}
	for _, guyItem := range guy {
		guyRule = append(guyRule, guyItem)
	}

	logs, sub, err := _DSToken.contract.WatchLogs(opts, "Burn", guyRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DSTokenBurn)
				if err := _DSToken.contract.UnpackLog(event, "Burn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBurn is a log parse operation binding the contract event 0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5.
//
// Solidity: event Burn(address indexed guy, uint256 wad)
func (_DSToken *DSTokenFilterer) ParseBurn(log types.Log) (*DSTokenBurn, error) {
	event := new(DSTokenBurn)
	if err := _DSToken.contract.UnpackLog(event, "Burn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DSTokenLogSetAuthorityIterator is returned from FilterLogSetAuthority and is used to iterate over the raw logs and unpacked data for LogSetAuthority events raised by the DSToken contract.
type DSTokenLogSetAuthorityIterator struct {
	Event *DSTokenLogSetAuthority // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DSTokenLogSetAuthorityIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DSTokenLogSetAuthority)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DSTokenLogSetAuthority)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DSTokenLogSetAuthorityIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DSTokenLogSetAuthorityIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DSTokenLogSetAuthority represents a LogSetAuthority event raised by the DSToken contract.
type DSTokenLogSetAuthority struct {
	Authority common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterLogSetAuthority is a free log retrieval operation binding the contract event 0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4.
//
// Solidity: event LogSetAuthority(address indexed authority)
func (_DSToken *DSTokenFilterer) FilterLogSetAuthority(opts *bind.FilterOpts, authority []common.Address) (*DSTokenLogSetAuthorityIterator, error) {

	var authorityRule []interface{}
	for _, authorityItem := range authority {
		authorityRule = append(authorityRule, authorityItem)
	}

	logs, sub, err := _DSToken.contract.FilterLogs(opts, "LogSetAuthority", authorityRule)
	if err != nil {
		return nil, err
	}
	return &DSTokenLogSetAuthorityIterator{contract: _DSToken.contract, event: "LogSetAuthority", logs: logs, sub: sub}, nil
}

// WatchLogSetAuthority is a free log subscription operation binding the contract event 0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4.
//
// Solidity: event LogSetAuthority(address indexed authority)
func (_DSToken *DSTokenFilterer) WatchLogSetAuthority(opts *bind.WatchOpts, sink chan<- *DSTokenLogSetAuthority, authority []common.Address) (event.Subscription, error) {

	var authorityRule []interface{}
	for _, authorityItem := range authority {
		authorityRule = append(authorityRule, authorityItem)
	}

	logs, sub, err := _DSToken.contract.WatchLogs(opts, "LogSetAuthority", authorityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DSTokenLogSetAuthority)
				if err := _DSToken.contract.UnpackLog(event, "LogSetAuthority", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogSetAuthority is a log parse operation binding the contract event 0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4.
//
// Solidity: event LogSetAuthority(address indexed authority)
func (_DSToken *DSTokenFilterer) ParseLogSetAuthority(log types.Log) (*DSTokenLogSetAuthority, error) {
	event := new(DSTokenLogSetAuthority)
	if err := _DSToken.contract.UnpackLog(event, "LogSetAuthority", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DSTokenLogSetOwnerIterator is returned from FilterLogSetOwner and is used to iterate over the raw logs and unpacked data for LogSetOwner events raised by the DSToken contract.
type DSTokenLogSetOwnerIterator struct {
	Event *DSTokenLogSetOwner // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DSTokenLogSetOwnerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DSTokenLogSetOwner)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DSTokenLogSetOwner)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DSTokenLogSetOwnerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DSTokenLogSetOwnerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DSTokenLogSetOwner represents a LogSetOwner event raised by the DSToken contract.
type DSTokenLogSetOwner struct {
	Owner common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogSetOwner is a free log retrieval operation binding the contract event 0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94.
//
// Solidity: event LogSetOwner(address indexed owner)
func (_DSToken *DSTokenFilterer) FilterLogSetOwner(opts *bind.FilterOpts, owner []common.Address) (*DSTokenLogSetOwnerIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _DSToken.contract.FilterLogs(opts, "LogSetOwner", ownerRule)
	if err != nil {
		return nil, err
	}
	return &DSTokenLogSetOwnerIterator{contract: _DSToken.contract, event: "LogSetOwner", logs: logs, sub: sub}, nil
}

// WatchLogSetOwner is a free log subscription operation binding the contract event 0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94.
//
// Solidity: event LogSetOwner(address indexed owner)
func (_DSToken *DSTokenFilterer) WatchLogSetOwner(opts *bind.WatchOpts, sink chan<- *DSTokenLogSetOwner, owner []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _DSToken.contract.WatchLogs(opts, "LogSetOwner", ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DSTokenLogSetOwner)
				if err := _DSToken.contract.UnpackLog(event, "LogSetOwner", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogSetOwner is a log parse operation binding the contract event 0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94.
//
// Solidity: event LogSetOwner(address indexed owner)
func (_DSToken *DSTokenFilterer) ParseLogSetOwner(log types.Log) (*DSTokenLogSetOwner, error) {
	event := new(DSTokenLogSetOwner)
	if err := _DSToken.contract.UnpackLog(event, "LogSetOwner", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DSTokenMintIterator is returned from FilterMint and is used to iterate over the raw logs and unpacked data for Mint events raised by the DSToken contract.
type DSTokenMintIterator struct {
	Event *DSTokenMint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DSTokenMintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DSTokenMint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DSTokenMint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DSTokenMintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DSTokenMintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DSTokenMint represents a Mint event raised by the DSToken contract.
type DSTokenMint struct {
	Guy common.Address
	Wad *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterMint is a free log retrieval operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
//
// Solidity: event Mint(address indexed guy, uint256 wad)
func (_DSToken *DSTokenFilterer) FilterMint(opts *bind.FilterOpts, guy []common.Address) (*DSTokenMintIterator, error) {

	var guyRule []interface{}
	for _, guyItem := range guy {
		guyRule = append(guyRule, guyItem)
	}

	logs, sub, err := _DSToken.contract.FilterLogs(opts, "Mint", guyRule)
	if err != nil {
		return nil, err
	}
	return &DSTokenMintIterator{contract: _DSToken.contract, event: "Mint", logs: logs, sub: sub}, nil
}

// WatchMint is a free log subscription operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
//
// Solidity: event Mint(address indexed guy, uint256 wad)
func (_DSToken *DSTokenFilterer) WatchMint(opts *bind.WatchOpts, sink chan<- *DSTokenMint, guy []common.Address) (event.Subscription, error) {

	var guyRule []interface{}
	for _, guyItem := range guy {
		guyRule = append(guyRule, guyItem)
	}

	logs, sub, err := _DSToken.contract.WatchLogs(opts, "Mint", guyRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DSTokenMint)
				if err := _DSToken.contract.UnpackLog(event, "Mint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMint is a log parse operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
//
// Solidity: event Mint(address indexed guy, uint256 wad)
func (_DSToken *DSTokenFilterer) ParseMint(log types.Log) (*DSTokenMint, error) {
	event := new(DSTokenMint)
	if err := _DSToken.contract.UnpackLog(event, "Mint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DSTokenStartIterator is returned from FilterStart and is used to iterate over the raw logs and unpacked data for Start events raised by the DSToken contract.
type DSTokenStartIterator struct {
	Event *DSTokenStart // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DSTokenStartIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DSTokenStart)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DSTokenStart)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DSTokenStartIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DSTokenStartIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DSTokenStart represents a Start event raised by the DSToken contract.
type DSTokenStart struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterStart is a free log retrieval operation binding the contract event 0x1b55ba3aa851a46be3b365aee5b5c140edd620d578922f3e8466d2cbd96f954b.
//
// Solidity: event Start()
func (_DSToken *DSTokenFilterer) FilterStart(opts *bind.FilterOpts) (*DSTokenStartIterator, error) {

	logs, sub, err := _DSToken.contract.FilterLogs(opts, "Start")
	if err != nil {
		return nil, err
	}
	return &DSTokenStartIterator{contract: _DSToken.contract, event: "Start", logs: logs, sub: sub}, nil
}

// WatchStart is a free log subscription operation binding the contract event 0x1b55ba3aa851a46be3b365aee5b5c140edd620d578922f3e8466d2cbd96f954b.
//
// Solidity: event Start()
func (_DSToken *DSTokenFilterer) WatchStart(opts *bind.WatchOpts, sink chan<- *DSTokenStart) (event.Subscription, error) {

	logs, sub, err := _DSToken.contract.WatchLogs(opts, "Start")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DSTokenStart)
				if err := _DSToken.contract.UnpackLog(event, "Start", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStart is a log parse operation binding the contract event 0x1b55ba3aa851a46be3b365aee5b5c140edd620d578922f3e8466d2cbd96f954b.
//
// Solidity: event Start()
func (_DSToken *DSTokenFilterer) ParseStart(log types.Log) (*DSTokenStart, error) {
	event := new(DSTokenStart)
	if err := _DSToken.contract.UnpackLog(event, "Start", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DSTokenStopIterator is returned from FilterStop and is used to iterate over the raw logs and unpacked data for Stop events raised by the DSToken contract.
type DSTokenStopIterator struct {
	Event *DSTokenStop // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DSTokenStopIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DSTokenStop)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DSTokenStop)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DSTokenStopIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DSTokenStopIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DSTokenStop represents a Stop event raised by the DSToken contract.
type DSTokenStop struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterStop is a free log retrieval operation binding the contract event 0xbedf0f4abfe86d4ffad593d9607fe70e83ea706033d44d24b3b6283cf3fc4f6b.
//
// Solidity: event Stop()
func (_DSToken *DSTokenFilterer) FilterStop(opts *bind.FilterOpts) (*DSTokenStopIterator, error) {

	logs, sub, err := _DSToken.contract.FilterLogs(opts, "Stop")
	if err != nil {
		return nil, err
	}
	return &DSTokenStopIterator{contract: _DSToken.contract, event: "Stop", logs: logs, sub: sub}, nil
}

// WatchStop is a free log subscription operation binding the contract event 0xbedf0f4abfe86d4ffad593d9607fe70e83ea706033d44d24b3b6283cf3fc4f6b.
//
// Solidity: event Stop()
func (_DSToken *DSTokenFilterer) WatchStop(opts *bind.WatchOpts, sink chan<- *DSTokenStop) (event.Subscription, error) {

	logs, sub, err := _DSToken.contract.WatchLogs(opts, "Stop")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DSTokenStop)
				if err := _DSToken.contract.UnpackLog(event, "Stop", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStop is a log parse operation binding the contract event 0xbedf0f4abfe86d4ffad593d9607fe70e83ea706033d44d24b3b6283cf3fc4f6b.
//
// Solidity: event Stop()
func (_DSToken *DSTokenFilterer) ParseStop(log types.Log) (*DSTokenStop, error) {
	event := new(DSTokenStop)
	if err := _DSToken.contract.UnpackLog(event, "Stop", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DSTokenTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the DSToken contract.
type DSTokenTransferIterator struct {
	Event *DSTokenTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DSTokenTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DSTokenTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DSTokenTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DSTokenTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DSTokenTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DSTokenTransfer represents a Transfer event raised by the DSToken contract.
type DSTokenTransfer struct {
	Src common.Address
	Dst common.Address
	Wad *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed src, address indexed dst, uint256 wad)
func (_DSToken *DSTokenFilterer) FilterTransfer(opts *bind.FilterOpts, src []common.Address, dst []common.Address) (*DSTokenTransferIterator, error) {

	var srcRule []interface{}
	for _, srcItem := range src {
		srcRule = append(srcRule, srcItem)
	}
	var dstRule []interface{}
	for _, dstItem := range dst {
		dstRule = append(dstRule, dstItem)
	}

	logs, sub, err := _DSToken.contract.FilterLogs(opts, "Transfer", srcRule, dstRule)
	if err != nil {
		return nil, err
	}
	return &DSTokenTransferIterator{contract: _DSToken.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed src, address indexed dst, uint256 wad)
func (_DSToken *DSTokenFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *DSTokenTransfer, src []common.Address, dst []common.Address) (event.Subscription, error) {

	var srcRule []interface{}
	for _, srcItem := range src {
		srcRule = append(srcRule, srcItem)
	}
	var dstRule []interface{}
	for _, dstItem := range dst {
		dstRule = append(dstRule, dstItem)
	}

	logs, sub, err := _DSToken.contract.WatchLogs(opts, "Transfer", srcRule, dstRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DSTokenTransfer)
				if err := _DSToken.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed src, address indexed dst, uint256 wad)
func (_DSToken *DSTokenFilterer) ParseTransfer(log types.Log) (*DSTokenTransfer, error) {
	event := new(DSTokenTransfer)
	if err := _DSToken.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DepositMetaData contains all meta data concerning the Deposit contract.
var DepositMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractRegistry\",\"name\":\"registry_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"key_share_G1\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"key_share_G1_correctness_proof\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[4]\",\"name\":\"key_share_G2\",\"type\":\"uint256[4]\"}],\"name\":\"KeyShareSubmission\",\"type\":\"event\"},{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"foo\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"bar\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"fax\",\"type\":\"bytes\"}],\"name\":\"LogNote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dkgStarts\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"registrationEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shareDistributionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"disputeEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"keyShareSubmissionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mpkSubmissionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gpkjSubmissionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gpkjDisputeEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dkgComplete\",\"type\":\"uint256\"}],\"name\":\"RegistrationOpen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"encrypted_shares\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[2][]\",\"name\":\"commitments\",\"type\":\"uint256[2][]\"}],\"name\":\"ShareDistribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share3\",\"type\":\"uint256\"}],\"name\":\"ValidatorMember\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"validatorCount\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"ethHeight\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"madHeight\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey3\",\"type\":\"uint256\"}],\"name\":\"ValidatorSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contractDSAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositID\",\"type\":\"uint256\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"directDeposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reloadRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractDSAuthority\",\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositID\",\"type\":\"uint256\"}],\"name\":\"setDepositID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "",
}

// DepositABI is the input ABI used to generate the binding from.
// Deprecated: Use DepositMetaData.ABI instead.
var DepositABI = DepositMetaData.ABI

// DepositBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use DepositMetaData.Bin instead.
var DepositBin = DepositMetaData.Bin

// DeployDeposit deploys a new Ethereum contract, binding an instance of Deposit to it.
func DeployDeposit(auth *bind.TransactOpts, backend bind.ContractBackend, registry_ common.Address) (common.Address, *types.Transaction, *Deposit, error) {
	parsed, err := DepositMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(DepositBin), backend, registry_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Deposit{DepositCaller: DepositCaller{contract: contract}, DepositTransactor: DepositTransactor{contract: contract}, DepositFilterer: DepositFilterer{contract: contract}}, nil
}

// Deposit is an auto generated Go binding around an Ethereum contract.
type Deposit struct {
	DepositCaller     // Read-only binding to the contract
	DepositTransactor // Write-only binding to the contract
	DepositFilterer   // Log filterer for contract events
}

// DepositCaller is an auto generated read-only Go binding around an Ethereum contract.
type DepositCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DepositTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DepositTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DepositFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DepositFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DepositSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DepositSession struct {
	Contract     *Deposit          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DepositCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DepositCallerSession struct {
	Contract *DepositCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// DepositTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DepositTransactorSession struct {
	Contract     *DepositTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// DepositRaw is an auto generated low-level Go binding around an Ethereum contract.
type DepositRaw struct {
	Contract *Deposit // Generic contract binding to access the raw methods on
}

// DepositCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DepositCallerRaw struct {
	Contract *DepositCaller // Generic read-only contract binding to access the raw methods on
}

// DepositTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DepositTransactorRaw struct {
	Contract *DepositTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDeposit creates a new instance of Deposit, bound to a specific deployed contract.
func NewDeposit(address common.Address, backend bind.ContractBackend) (*Deposit, error) {
	contract, err := bindDeposit(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Deposit{DepositCaller: DepositCaller{contract: contract}, DepositTransactor: DepositTransactor{contract: contract}, DepositFilterer: DepositFilterer{contract: contract}}, nil
}

// NewDepositCaller creates a new read-only instance of Deposit, bound to a specific deployed contract.
func NewDepositCaller(address common.Address, caller bind.ContractCaller) (*DepositCaller, error) {
	contract, err := bindDeposit(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DepositCaller{contract: contract}, nil
}

// NewDepositTransactor creates a new write-only instance of Deposit, bound to a specific deployed contract.
func NewDepositTransactor(address common.Address, transactor bind.ContractTransactor) (*DepositTransactor, error) {
	contract, err := bindDeposit(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DepositTransactor{contract: contract}, nil
}

// NewDepositFilterer creates a new log filterer instance of Deposit, bound to a specific deployed contract.
func NewDepositFilterer(address common.Address, filterer bind.ContractFilterer) (*DepositFilterer, error) {
	contract, err := bindDeposit(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DepositFilterer{contract: contract}, nil
}

// bindDeposit binds a generic wrapper to an already deployed contract.
func bindDeposit(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(DepositABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Deposit *DepositRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Deposit.Contract.DepositCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Deposit *DepositRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Deposit.Contract.DepositTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Deposit *DepositRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Deposit.Contract.DepositTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Deposit *DepositCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Deposit.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Deposit *DepositTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Deposit.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Deposit *DepositTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Deposit.Contract.contract.Transact(opts, method, params...)
}

// Authority is a free data retrieval call binding the contract method 0xbf7e214f.
//
// Solidity: function authority() view returns(address)
func (_Deposit *DepositCaller) Authority(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Deposit.contract.Call(opts, &out, "authority")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Authority is a free data retrieval call binding the contract method 0xbf7e214f.
//
// Solidity: function authority() view returns(address)
func (_Deposit *DepositSession) Authority() (common.Address, error) {
	return _Deposit.Contract.Authority(&_Deposit.CallOpts)
}

// Authority is a free data retrieval call binding the contract method 0xbf7e214f.
//
// Solidity: function authority() view returns(address)
func (_Deposit *DepositCallerSession) Authority() (common.Address, error) {
	return _Deposit.Contract.Authority(&_Deposit.CallOpts)
}

// DepositID is a free data retrieval call binding the contract method 0xb3117446.
//
// Solidity: function depositID() view returns(uint256)
func (_Deposit *DepositCaller) DepositID(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Deposit.contract.Call(opts, &out, "depositID")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DepositID is a free data retrieval call binding the contract method 0xb3117446.
//
// Solidity: function depositID() view returns(uint256)
func (_Deposit *DepositSession) DepositID() (*big.Int, error) {
	return _Deposit.Contract.DepositID(&_Deposit.CallOpts)
}

// DepositID is a free data retrieval call binding the contract method 0xb3117446.
//
// Solidity: function depositID() view returns(uint256)
func (_Deposit *DepositCallerSession) DepositID() (*big.Int, error) {
	return _Deposit.Contract.DepositID(&_Deposit.CallOpts)
}

// Deposits is a free data retrieval call binding the contract method 0xb02c43d0.
//
// Solidity: function deposits(uint256 _depositID) view returns(uint256)
func (_Deposit *DepositCaller) Deposits(opts *bind.CallOpts, _depositID *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Deposit.contract.Call(opts, &out, "deposits", _depositID)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Deposits is a free data retrieval call binding the contract method 0xb02c43d0.
//
// Solidity: function deposits(uint256 _depositID) view returns(uint256)
func (_Deposit *DepositSession) Deposits(_depositID *big.Int) (*big.Int, error) {
	return _Deposit.Contract.Deposits(&_Deposit.CallOpts, _depositID)
}

// Deposits is a free data retrieval call binding the contract method 0xb02c43d0.
//
// Solidity: function deposits(uint256 _depositID) view returns(uint256)
func (_Deposit *DepositCallerSession) Deposits(_depositID *big.Int) (*big.Int, error) {
	return _Deposit.Contract.Deposits(&_Deposit.CallOpts, _depositID)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Deposit *DepositCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Deposit.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Deposit *DepositSession) Owner() (common.Address, error) {
	return _Deposit.Contract.Owner(&_Deposit.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Deposit *DepositCallerSession) Owner() (common.Address, error) {
	return _Deposit.Contract.Owner(&_Deposit.CallOpts)
}

// Stopped is a free data retrieval call binding the contract method 0x75f12b21.
//
// Solidity: function stopped() view returns(bool)
func (_Deposit *DepositCaller) Stopped(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Deposit.contract.Call(opts, &out, "stopped")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Stopped is a free data retrieval call binding the contract method 0x75f12b21.
//
// Solidity: function stopped() view returns(bool)
func (_Deposit *DepositSession) Stopped() (bool, error) {
	return _Deposit.Contract.Stopped(&_Deposit.CallOpts)
}

// Stopped is a free data retrieval call binding the contract method 0x75f12b21.
//
// Solidity: function stopped() view returns(bool)
func (_Deposit *DepositCallerSession) Stopped() (bool, error) {
	return _Deposit.Contract.Stopped(&_Deposit.CallOpts)
}

// TotalDeposited is a free data retrieval call binding the contract method 0xff50abdc.
//
// Solidity: function totalDeposited() view returns(uint256)
func (_Deposit *DepositCaller) TotalDeposited(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Deposit.contract.Call(opts, &out, "totalDeposited")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalDeposited is a free data retrieval call binding the contract method 0xff50abdc.
//
// Solidity: function totalDeposited() view returns(uint256)
func (_Deposit *DepositSession) TotalDeposited() (*big.Int, error) {
	return _Deposit.Contract.TotalDeposited(&_Deposit.CallOpts)
}

// TotalDeposited is a free data retrieval call binding the contract method 0xff50abdc.
//
// Solidity: function totalDeposited() view returns(uint256)
func (_Deposit *DepositCallerSession) TotalDeposited() (*big.Int, error) {
	return _Deposit.Contract.TotalDeposited(&_Deposit.CallOpts)
}

// Deposit is a paid mutator transaction binding the contract method 0xb6b55f25.
//
// Solidity: function deposit(uint256 amount) returns(bool)
func (_Deposit *DepositTransactor) Deposit(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Deposit.contract.Transact(opts, "deposit", amount)
}

// Deposit is a paid mutator transaction binding the contract method 0xb6b55f25.
//
// Solidity: function deposit(uint256 amount) returns(bool)
func (_Deposit *DepositSession) Deposit(amount *big.Int) (*types.Transaction, error) {
	return _Deposit.Contract.Deposit(&_Deposit.TransactOpts, amount)
}

// Deposit is a paid mutator transaction binding the contract method 0xb6b55f25.
//
// Solidity: function deposit(uint256 amount) returns(bool)
func (_Deposit *DepositTransactorSession) Deposit(amount *big.Int) (*types.Transaction, error) {
	return _Deposit.Contract.Deposit(&_Deposit.TransactOpts, amount)
}

// DepositFor is a paid mutator transaction binding the contract method 0x2f4f21e2.
//
// Solidity: function depositFor(address who, uint256 amount) returns(bool)
func (_Deposit *DepositTransactor) DepositFor(opts *bind.TransactOpts, who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Deposit.contract.Transact(opts, "depositFor", who, amount)
}

// DepositFor is a paid mutator transaction binding the contract method 0x2f4f21e2.
//
// Solidity: function depositFor(address who, uint256 amount) returns(bool)
func (_Deposit *DepositSession) DepositFor(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Deposit.Contract.DepositFor(&_Deposit.TransactOpts, who, amount)
}

// DepositFor is a paid mutator transaction binding the contract method 0x2f4f21e2.
//
// Solidity: function depositFor(address who, uint256 amount) returns(bool)
func (_Deposit *DepositTransactorSession) DepositFor(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Deposit.Contract.DepositFor(&_Deposit.TransactOpts, who, amount)
}

// DirectDeposit is a paid mutator transaction binding the contract method 0xec68426f.
//
// Solidity: function directDeposit(uint256 _depositID, address who, uint256 amount) returns(bool)
func (_Deposit *DepositTransactor) DirectDeposit(opts *bind.TransactOpts, _depositID *big.Int, who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Deposit.contract.Transact(opts, "directDeposit", _depositID, who, amount)
}

// DirectDeposit is a paid mutator transaction binding the contract method 0xec68426f.
//
// Solidity: function directDeposit(uint256 _depositID, address who, uint256 amount) returns(bool)
func (_Deposit *DepositSession) DirectDeposit(_depositID *big.Int, who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Deposit.Contract.DirectDeposit(&_Deposit.TransactOpts, _depositID, who, amount)
}

// DirectDeposit is a paid mutator transaction binding the contract method 0xec68426f.
//
// Solidity: function directDeposit(uint256 _depositID, address who, uint256 amount) returns(bool)
func (_Deposit *DepositTransactorSession) DirectDeposit(_depositID *big.Int, who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Deposit.Contract.DirectDeposit(&_Deposit.TransactOpts, _depositID, who, amount)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_Deposit *DepositTransactor) GrantOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _Deposit.contract.Transact(opts, "grantOperator", _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_Deposit *DepositSession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _Deposit.Contract.GrantOperator(&_Deposit.TransactOpts, _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_Deposit *DepositTransactorSession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _Deposit.Contract.GrantOperator(&_Deposit.TransactOpts, _operator)
}

// ReloadRegistry is a paid mutator transaction binding the contract method 0x1476601d.
//
// Solidity: function reloadRegistry() returns()
func (_Deposit *DepositTransactor) ReloadRegistry(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Deposit.contract.Transact(opts, "reloadRegistry")
}

// ReloadRegistry is a paid mutator transaction binding the contract method 0x1476601d.
//
// Solidity: function reloadRegistry() returns()
func (_Deposit *DepositSession) ReloadRegistry() (*types.Transaction, error) {
	return _Deposit.Contract.ReloadRegistry(&_Deposit.TransactOpts)
}

// ReloadRegistry is a paid mutator transaction binding the contract method 0x1476601d.
//
// Solidity: function reloadRegistry() returns()
func (_Deposit *DepositTransactorSession) ReloadRegistry() (*types.Transaction, error) {
	return _Deposit.Contract.ReloadRegistry(&_Deposit.TransactOpts)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_Deposit *DepositTransactor) RevokeOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _Deposit.contract.Transact(opts, "revokeOperator", _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_Deposit *DepositSession) RevokeOperator(_operator common.Address) (*types.Transaction, error) {
	return _Deposit.Contract.RevokeOperator(&_Deposit.TransactOpts, _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_Deposit *DepositTransactorSession) RevokeOperator(_operator common.Address) (*types.Transaction, error) {
	return _Deposit.Contract.RevokeOperator(&_Deposit.TransactOpts, _operator)
}

// SetAuthority is a paid mutator transaction binding the contract method 0x7a9e5e4b.
//
// Solidity: function setAuthority(address authority_) returns()
func (_Deposit *DepositTransactor) SetAuthority(opts *bind.TransactOpts, authority_ common.Address) (*types.Transaction, error) {
	return _Deposit.contract.Transact(opts, "setAuthority", authority_)
}

// SetAuthority is a paid mutator transaction binding the contract method 0x7a9e5e4b.
//
// Solidity: function setAuthority(address authority_) returns()
func (_Deposit *DepositSession) SetAuthority(authority_ common.Address) (*types.Transaction, error) {
	return _Deposit.Contract.SetAuthority(&_Deposit.TransactOpts, authority_)
}

// SetAuthority is a paid mutator transaction binding the contract method 0x7a9e5e4b.
//
// Solidity: function setAuthority(address authority_) returns()
func (_Deposit *DepositTransactorSession) SetAuthority(authority_ common.Address) (*types.Transaction, error) {
	return _Deposit.Contract.SetAuthority(&_Deposit.TransactOpts, authority_)
}

// SetDepositID is a paid mutator transaction binding the contract method 0xda7f7eb7.
//
// Solidity: function setDepositID(uint256 _depositID) returns()
func (_Deposit *DepositTransactor) SetDepositID(opts *bind.TransactOpts, _depositID *big.Int) (*types.Transaction, error) {
	return _Deposit.contract.Transact(opts, "setDepositID", _depositID)
}

// SetDepositID is a paid mutator transaction binding the contract method 0xda7f7eb7.
//
// Solidity: function setDepositID(uint256 _depositID) returns()
func (_Deposit *DepositSession) SetDepositID(_depositID *big.Int) (*types.Transaction, error) {
	return _Deposit.Contract.SetDepositID(&_Deposit.TransactOpts, _depositID)
}

// SetDepositID is a paid mutator transaction binding the contract method 0xda7f7eb7.
//
// Solidity: function setDepositID(uint256 _depositID) returns()
func (_Deposit *DepositTransactorSession) SetDepositID(_depositID *big.Int) (*types.Transaction, error) {
	return _Deposit.Contract.SetDepositID(&_Deposit.TransactOpts, _depositID)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address owner_) returns()
func (_Deposit *DepositTransactor) SetOwner(opts *bind.TransactOpts, owner_ common.Address) (*types.Transaction, error) {
	return _Deposit.contract.Transact(opts, "setOwner", owner_)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address owner_) returns()
func (_Deposit *DepositSession) SetOwner(owner_ common.Address) (*types.Transaction, error) {
	return _Deposit.Contract.SetOwner(&_Deposit.TransactOpts, owner_)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address owner_) returns()
func (_Deposit *DepositTransactorSession) SetOwner(owner_ common.Address) (*types.Transaction, error) {
	return _Deposit.Contract.SetOwner(&_Deposit.TransactOpts, owner_)
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_Deposit *DepositTransactor) Start(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Deposit.contract.Transact(opts, "start")
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_Deposit *DepositSession) Start() (*types.Transaction, error) {
	return _Deposit.Contract.Start(&_Deposit.TransactOpts)
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_Deposit *DepositTransactorSession) Start() (*types.Transaction, error) {
	return _Deposit.Contract.Start(&_Deposit.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_Deposit *DepositTransactor) Stop(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Deposit.contract.Transact(opts, "stop")
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_Deposit *DepositSession) Stop() (*types.Transaction, error) {
	return _Deposit.Contract.Stop(&_Deposit.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_Deposit *DepositTransactorSession) Stop() (*types.Transaction, error) {
	return _Deposit.Contract.Stop(&_Deposit.TransactOpts)
}

// DepositDepositReceivedIterator is returned from FilterDepositReceived and is used to iterate over the raw logs and unpacked data for DepositReceived events raised by the Deposit contract.
type DepositDepositReceivedIterator struct {
	Event *DepositDepositReceived // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DepositDepositReceivedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DepositDepositReceived)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DepositDepositReceived)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DepositDepositReceivedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DepositDepositReceivedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DepositDepositReceived represents a DepositReceived event raised by the Deposit contract.
type DepositDepositReceived struct {
	DepositID *big.Int
	Depositor common.Address
	Amount    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterDepositReceived is a free log retrieval operation binding the contract event 0x5b063c6569a91e8133fc6cd71d31a4ca5c65c652fd53ae093f46107754f08541.
//
// Solidity: event DepositReceived(uint256 depositID, address depositor, uint256 amount)
func (_Deposit *DepositFilterer) FilterDepositReceived(opts *bind.FilterOpts) (*DepositDepositReceivedIterator, error) {

	logs, sub, err := _Deposit.contract.FilterLogs(opts, "DepositReceived")
	if err != nil {
		return nil, err
	}
	return &DepositDepositReceivedIterator{contract: _Deposit.contract, event: "DepositReceived", logs: logs, sub: sub}, nil
}

// WatchDepositReceived is a free log subscription operation binding the contract event 0x5b063c6569a91e8133fc6cd71d31a4ca5c65c652fd53ae093f46107754f08541.
//
// Solidity: event DepositReceived(uint256 depositID, address depositor, uint256 amount)
func (_Deposit *DepositFilterer) WatchDepositReceived(opts *bind.WatchOpts, sink chan<- *DepositDepositReceived) (event.Subscription, error) {

	logs, sub, err := _Deposit.contract.WatchLogs(opts, "DepositReceived")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DepositDepositReceived)
				if err := _Deposit.contract.UnpackLog(event, "DepositReceived", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDepositReceived is a log parse operation binding the contract event 0x5b063c6569a91e8133fc6cd71d31a4ca5c65c652fd53ae093f46107754f08541.
//
// Solidity: event DepositReceived(uint256 depositID, address depositor, uint256 amount)
func (_Deposit *DepositFilterer) ParseDepositReceived(log types.Log) (*DepositDepositReceived, error) {
	event := new(DepositDepositReceived)
	if err := _Deposit.contract.UnpackLog(event, "DepositReceived", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DepositKeyShareSubmissionIterator is returned from FilterKeyShareSubmission and is used to iterate over the raw logs and unpacked data for KeyShareSubmission events raised by the Deposit contract.
type DepositKeyShareSubmissionIterator struct {
	Event *DepositKeyShareSubmission // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DepositKeyShareSubmissionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DepositKeyShareSubmission)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DepositKeyShareSubmission)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DepositKeyShareSubmissionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DepositKeyShareSubmissionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DepositKeyShareSubmission represents a KeyShareSubmission event raised by the Deposit contract.
type DepositKeyShareSubmission struct {
	Issuer                     common.Address
	KeyShareG1                 [2]*big.Int
	KeyShareG1CorrectnessProof [2]*big.Int
	KeyShareG2                 [4]*big.Int
	Raw                        types.Log // Blockchain specific contextual infos
}

// FilterKeyShareSubmission is a free log retrieval operation binding the contract event 0xb0ee36c3780de716eb6c83687f433ae2558a6923e090fd238b657fb6c896badc.
//
// Solidity: event KeyShareSubmission(address issuer, uint256[2] key_share_G1, uint256[2] key_share_G1_correctness_proof, uint256[4] key_share_G2)
func (_Deposit *DepositFilterer) FilterKeyShareSubmission(opts *bind.FilterOpts) (*DepositKeyShareSubmissionIterator, error) {

	logs, sub, err := _Deposit.contract.FilterLogs(opts, "KeyShareSubmission")
	if err != nil {
		return nil, err
	}
	return &DepositKeyShareSubmissionIterator{contract: _Deposit.contract, event: "KeyShareSubmission", logs: logs, sub: sub}, nil
}

// WatchKeyShareSubmission is a free log subscription operation binding the contract event 0xb0ee36c3780de716eb6c83687f433ae2558a6923e090fd238b657fb6c896badc.
//
// Solidity: event KeyShareSubmission(address issuer, uint256[2] key_share_G1, uint256[2] key_share_G1_correctness_proof, uint256[4] key_share_G2)
func (_Deposit *DepositFilterer) WatchKeyShareSubmission(opts *bind.WatchOpts, sink chan<- *DepositKeyShareSubmission) (event.Subscription, error) {

	logs, sub, err := _Deposit.contract.WatchLogs(opts, "KeyShareSubmission")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DepositKeyShareSubmission)
				if err := _Deposit.contract.UnpackLog(event, "KeyShareSubmission", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKeyShareSubmission is a log parse operation binding the contract event 0xb0ee36c3780de716eb6c83687f433ae2558a6923e090fd238b657fb6c896badc.
//
// Solidity: event KeyShareSubmission(address issuer, uint256[2] key_share_G1, uint256[2] key_share_G1_correctness_proof, uint256[4] key_share_G2)
func (_Deposit *DepositFilterer) ParseKeyShareSubmission(log types.Log) (*DepositKeyShareSubmission, error) {
	event := new(DepositKeyShareSubmission)
	if err := _Deposit.contract.UnpackLog(event, "KeyShareSubmission", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DepositLogSetAuthorityIterator is returned from FilterLogSetAuthority and is used to iterate over the raw logs and unpacked data for LogSetAuthority events raised by the Deposit contract.
type DepositLogSetAuthorityIterator struct {
	Event *DepositLogSetAuthority // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DepositLogSetAuthorityIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DepositLogSetAuthority)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DepositLogSetAuthority)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DepositLogSetAuthorityIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DepositLogSetAuthorityIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DepositLogSetAuthority represents a LogSetAuthority event raised by the Deposit contract.
type DepositLogSetAuthority struct {
	Authority common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterLogSetAuthority is a free log retrieval operation binding the contract event 0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4.
//
// Solidity: event LogSetAuthority(address indexed authority)
func (_Deposit *DepositFilterer) FilterLogSetAuthority(opts *bind.FilterOpts, authority []common.Address) (*DepositLogSetAuthorityIterator, error) {

	var authorityRule []interface{}
	for _, authorityItem := range authority {
		authorityRule = append(authorityRule, authorityItem)
	}

	logs, sub, err := _Deposit.contract.FilterLogs(opts, "LogSetAuthority", authorityRule)
	if err != nil {
		return nil, err
	}
	return &DepositLogSetAuthorityIterator{contract: _Deposit.contract, event: "LogSetAuthority", logs: logs, sub: sub}, nil
}

// WatchLogSetAuthority is a free log subscription operation binding the contract event 0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4.
//
// Solidity: event LogSetAuthority(address indexed authority)
func (_Deposit *DepositFilterer) WatchLogSetAuthority(opts *bind.WatchOpts, sink chan<- *DepositLogSetAuthority, authority []common.Address) (event.Subscription, error) {

	var authorityRule []interface{}
	for _, authorityItem := range authority {
		authorityRule = append(authorityRule, authorityItem)
	}

	logs, sub, err := _Deposit.contract.WatchLogs(opts, "LogSetAuthority", authorityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DepositLogSetAuthority)
				if err := _Deposit.contract.UnpackLog(event, "LogSetAuthority", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogSetAuthority is a log parse operation binding the contract event 0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4.
//
// Solidity: event LogSetAuthority(address indexed authority)
func (_Deposit *DepositFilterer) ParseLogSetAuthority(log types.Log) (*DepositLogSetAuthority, error) {
	event := new(DepositLogSetAuthority)
	if err := _Deposit.contract.UnpackLog(event, "LogSetAuthority", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DepositLogSetOwnerIterator is returned from FilterLogSetOwner and is used to iterate over the raw logs and unpacked data for LogSetOwner events raised by the Deposit contract.
type DepositLogSetOwnerIterator struct {
	Event *DepositLogSetOwner // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DepositLogSetOwnerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DepositLogSetOwner)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DepositLogSetOwner)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DepositLogSetOwnerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DepositLogSetOwnerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DepositLogSetOwner represents a LogSetOwner event raised by the Deposit contract.
type DepositLogSetOwner struct {
	Owner common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogSetOwner is a free log retrieval operation binding the contract event 0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94.
//
// Solidity: event LogSetOwner(address indexed owner)
func (_Deposit *DepositFilterer) FilterLogSetOwner(opts *bind.FilterOpts, owner []common.Address) (*DepositLogSetOwnerIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _Deposit.contract.FilterLogs(opts, "LogSetOwner", ownerRule)
	if err != nil {
		return nil, err
	}
	return &DepositLogSetOwnerIterator{contract: _Deposit.contract, event: "LogSetOwner", logs: logs, sub: sub}, nil
}

// WatchLogSetOwner is a free log subscription operation binding the contract event 0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94.
//
// Solidity: event LogSetOwner(address indexed owner)
func (_Deposit *DepositFilterer) WatchLogSetOwner(opts *bind.WatchOpts, sink chan<- *DepositLogSetOwner, owner []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _Deposit.contract.WatchLogs(opts, "LogSetOwner", ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DepositLogSetOwner)
				if err := _Deposit.contract.UnpackLog(event, "LogSetOwner", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogSetOwner is a log parse operation binding the contract event 0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94.
//
// Solidity: event LogSetOwner(address indexed owner)
func (_Deposit *DepositFilterer) ParseLogSetOwner(log types.Log) (*DepositLogSetOwner, error) {
	event := new(DepositLogSetOwner)
	if err := _Deposit.contract.UnpackLog(event, "LogSetOwner", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DepositRegistrationOpenIterator is returned from FilterRegistrationOpen and is used to iterate over the raw logs and unpacked data for RegistrationOpen events raised by the Deposit contract.
type DepositRegistrationOpenIterator struct {
	Event *DepositRegistrationOpen // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DepositRegistrationOpenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DepositRegistrationOpen)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DepositRegistrationOpen)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DepositRegistrationOpenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DepositRegistrationOpenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DepositRegistrationOpen represents a RegistrationOpen event raised by the Deposit contract.
type DepositRegistrationOpen struct {
	DkgStarts              *big.Int
	RegistrationEnds       *big.Int
	ShareDistributionEnds  *big.Int
	DisputeEnds            *big.Int
	KeyShareSubmissionEnds *big.Int
	MpkSubmissionEnds      *big.Int
	GpkjSubmissionEnds     *big.Int
	GpkjDisputeEnds        *big.Int
	DkgComplete            *big.Int
	Raw                    types.Log // Blockchain specific contextual infos
}

// FilterRegistrationOpen is a free log retrieval operation binding the contract event 0x9c6f8368fe7e77e8cb9438744581403bcb3f53298e517f04c1b8475487402e97.
//
// Solidity: event RegistrationOpen(uint256 dkgStarts, uint256 registrationEnds, uint256 shareDistributionEnds, uint256 disputeEnds, uint256 keyShareSubmissionEnds, uint256 mpkSubmissionEnds, uint256 gpkjSubmissionEnds, uint256 gpkjDisputeEnds, uint256 dkgComplete)
func (_Deposit *DepositFilterer) FilterRegistrationOpen(opts *bind.FilterOpts) (*DepositRegistrationOpenIterator, error) {

	logs, sub, err := _Deposit.contract.FilterLogs(opts, "RegistrationOpen")
	if err != nil {
		return nil, err
	}
	return &DepositRegistrationOpenIterator{contract: _Deposit.contract, event: "RegistrationOpen", logs: logs, sub: sub}, nil
}

// WatchRegistrationOpen is a free log subscription operation binding the contract event 0x9c6f8368fe7e77e8cb9438744581403bcb3f53298e517f04c1b8475487402e97.
//
// Solidity: event RegistrationOpen(uint256 dkgStarts, uint256 registrationEnds, uint256 shareDistributionEnds, uint256 disputeEnds, uint256 keyShareSubmissionEnds, uint256 mpkSubmissionEnds, uint256 gpkjSubmissionEnds, uint256 gpkjDisputeEnds, uint256 dkgComplete)
func (_Deposit *DepositFilterer) WatchRegistrationOpen(opts *bind.WatchOpts, sink chan<- *DepositRegistrationOpen) (event.Subscription, error) {

	logs, sub, err := _Deposit.contract.WatchLogs(opts, "RegistrationOpen")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DepositRegistrationOpen)
				if err := _Deposit.contract.UnpackLog(event, "RegistrationOpen", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegistrationOpen is a log parse operation binding the contract event 0x9c6f8368fe7e77e8cb9438744581403bcb3f53298e517f04c1b8475487402e97.
//
// Solidity: event RegistrationOpen(uint256 dkgStarts, uint256 registrationEnds, uint256 shareDistributionEnds, uint256 disputeEnds, uint256 keyShareSubmissionEnds, uint256 mpkSubmissionEnds, uint256 gpkjSubmissionEnds, uint256 gpkjDisputeEnds, uint256 dkgComplete)
func (_Deposit *DepositFilterer) ParseRegistrationOpen(log types.Log) (*DepositRegistrationOpen, error) {
	event := new(DepositRegistrationOpen)
	if err := _Deposit.contract.UnpackLog(event, "RegistrationOpen", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DepositShareDistributionIterator is returned from FilterShareDistribution and is used to iterate over the raw logs and unpacked data for ShareDistribution events raised by the Deposit contract.
type DepositShareDistributionIterator struct {
	Event *DepositShareDistribution // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DepositShareDistributionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DepositShareDistribution)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DepositShareDistribution)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DepositShareDistributionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DepositShareDistributionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DepositShareDistribution represents a ShareDistribution event raised by the Deposit contract.
type DepositShareDistribution struct {
	Issuer          common.Address
	Index           *big.Int
	EncryptedShares []*big.Int
	Commitments     [][2]*big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterShareDistribution is a free log retrieval operation binding the contract event 0xa84d294194d6169652a99150fd2ef10e18b0d2caa10beeea237bbddcc6e22b10.
//
// Solidity: event ShareDistribution(address issuer, uint256 index, uint256[] encrypted_shares, uint256[2][] commitments)
func (_Deposit *DepositFilterer) FilterShareDistribution(opts *bind.FilterOpts) (*DepositShareDistributionIterator, error) {

	logs, sub, err := _Deposit.contract.FilterLogs(opts, "ShareDistribution")
	if err != nil {
		return nil, err
	}
	return &DepositShareDistributionIterator{contract: _Deposit.contract, event: "ShareDistribution", logs: logs, sub: sub}, nil
}

// WatchShareDistribution is a free log subscription operation binding the contract event 0xa84d294194d6169652a99150fd2ef10e18b0d2caa10beeea237bbddcc6e22b10.
//
// Solidity: event ShareDistribution(address issuer, uint256 index, uint256[] encrypted_shares, uint256[2][] commitments)
func (_Deposit *DepositFilterer) WatchShareDistribution(opts *bind.WatchOpts, sink chan<- *DepositShareDistribution) (event.Subscription, error) {

	logs, sub, err := _Deposit.contract.WatchLogs(opts, "ShareDistribution")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DepositShareDistribution)
				if err := _Deposit.contract.UnpackLog(event, "ShareDistribution", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseShareDistribution is a log parse operation binding the contract event 0xa84d294194d6169652a99150fd2ef10e18b0d2caa10beeea237bbddcc6e22b10.
//
// Solidity: event ShareDistribution(address issuer, uint256 index, uint256[] encrypted_shares, uint256[2][] commitments)
func (_Deposit *DepositFilterer) ParseShareDistribution(log types.Log) (*DepositShareDistribution, error) {
	event := new(DepositShareDistribution)
	if err := _Deposit.contract.UnpackLog(event, "ShareDistribution", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DepositValidatorMemberIterator is returned from FilterValidatorMember and is used to iterate over the raw logs and unpacked data for ValidatorMember events raised by the Deposit contract.
type DepositValidatorMemberIterator struct {
	Event *DepositValidatorMember // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DepositValidatorMemberIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DepositValidatorMember)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DepositValidatorMember)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DepositValidatorMemberIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DepositValidatorMemberIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DepositValidatorMember represents a ValidatorMember event raised by the Deposit contract.
type DepositValidatorMember struct {
	Account common.Address
	Epoch   *big.Int
	Index   *big.Int
	Share0  *big.Int
	Share1  *big.Int
	Share2  *big.Int
	Share3  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterValidatorMember is a free log retrieval operation binding the contract event 0x113b129fac2dde341b9fbbec2bb79a95b9945b0e80fda711fc8ae5c7b0ea83b0.
//
// Solidity: event ValidatorMember(address account, uint256 epoch, uint256 index, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_Deposit *DepositFilterer) FilterValidatorMember(opts *bind.FilterOpts) (*DepositValidatorMemberIterator, error) {

	logs, sub, err := _Deposit.contract.FilterLogs(opts, "ValidatorMember")
	if err != nil {
		return nil, err
	}
	return &DepositValidatorMemberIterator{contract: _Deposit.contract, event: "ValidatorMember", logs: logs, sub: sub}, nil
}

// WatchValidatorMember is a free log subscription operation binding the contract event 0x113b129fac2dde341b9fbbec2bb79a95b9945b0e80fda711fc8ae5c7b0ea83b0.
//
// Solidity: event ValidatorMember(address account, uint256 epoch, uint256 index, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_Deposit *DepositFilterer) WatchValidatorMember(opts *bind.WatchOpts, sink chan<- *DepositValidatorMember) (event.Subscription, error) {

	logs, sub, err := _Deposit.contract.WatchLogs(opts, "ValidatorMember")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DepositValidatorMember)
				if err := _Deposit.contract.UnpackLog(event, "ValidatorMember", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorMember is a log parse operation binding the contract event 0x113b129fac2dde341b9fbbec2bb79a95b9945b0e80fda711fc8ae5c7b0ea83b0.
//
// Solidity: event ValidatorMember(address account, uint256 epoch, uint256 index, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_Deposit *DepositFilterer) ParseValidatorMember(log types.Log) (*DepositValidatorMember, error) {
	event := new(DepositValidatorMember)
	if err := _Deposit.contract.UnpackLog(event, "ValidatorMember", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DepositValidatorSetIterator is returned from FilterValidatorSet and is used to iterate over the raw logs and unpacked data for ValidatorSet events raised by the Deposit contract.
type DepositValidatorSetIterator struct {
	Event *DepositValidatorSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DepositValidatorSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DepositValidatorSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DepositValidatorSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DepositValidatorSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DepositValidatorSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DepositValidatorSet represents a ValidatorSet event raised by the Deposit contract.
type DepositValidatorSet struct {
	ValidatorCount uint8
	Epoch          *big.Int
	EthHeight      uint32
	MadHeight      uint32
	GroupKey0      *big.Int
	GroupKey1      *big.Int
	GroupKey2      *big.Int
	GroupKey3      *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterValidatorSet is a free log retrieval operation binding the contract event 0x1c85ff1efe0a905f8feca811e617102cb7ec896aded693eb96366c8ef22bb09f.
//
// Solidity: event ValidatorSet(uint8 validatorCount, uint256 epoch, uint32 ethHeight, uint32 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_Deposit *DepositFilterer) FilterValidatorSet(opts *bind.FilterOpts) (*DepositValidatorSetIterator, error) {

	logs, sub, err := _Deposit.contract.FilterLogs(opts, "ValidatorSet")
	if err != nil {
		return nil, err
	}
	return &DepositValidatorSetIterator{contract: _Deposit.contract, event: "ValidatorSet", logs: logs, sub: sub}, nil
}

// WatchValidatorSet is a free log subscription operation binding the contract event 0x1c85ff1efe0a905f8feca811e617102cb7ec896aded693eb96366c8ef22bb09f.
//
// Solidity: event ValidatorSet(uint8 validatorCount, uint256 epoch, uint32 ethHeight, uint32 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_Deposit *DepositFilterer) WatchValidatorSet(opts *bind.WatchOpts, sink chan<- *DepositValidatorSet) (event.Subscription, error) {

	logs, sub, err := _Deposit.contract.WatchLogs(opts, "ValidatorSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DepositValidatorSet)
				if err := _Deposit.contract.UnpackLog(event, "ValidatorSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorSet is a log parse operation binding the contract event 0x1c85ff1efe0a905f8feca811e617102cb7ec896aded693eb96366c8ef22bb09f.
//
// Solidity: event ValidatorSet(uint8 validatorCount, uint256 epoch, uint32 ethHeight, uint32 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_Deposit *DepositFilterer) ParseValidatorSet(log types.Log) (*DepositValidatorSet, error) {
	event := new(DepositValidatorSet)
	if err := _Deposit.contract.UnpackLog(event, "ValidatorSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DiamondMetaData contains all meta data concerning the Diamond contract.
var DiamondMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "",
}

// DiamondABI is the input ABI used to generate the binding from.
// Deprecated: Use DiamondMetaData.ABI instead.
var DiamondABI = DiamondMetaData.ABI

// DiamondBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use DiamondMetaData.Bin instead.
var DiamondBin = DiamondMetaData.Bin

// DeployDiamond deploys a new Ethereum contract, binding an instance of Diamond to it.
func DeployDiamond(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Diamond, error) {
	parsed, err := DiamondMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(DiamondBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Diamond{DiamondCaller: DiamondCaller{contract: contract}, DiamondTransactor: DiamondTransactor{contract: contract}, DiamondFilterer: DiamondFilterer{contract: contract}}, nil
}

// Diamond is an auto generated Go binding around an Ethereum contract.
type Diamond struct {
	DiamondCaller     // Read-only binding to the contract
	DiamondTransactor // Write-only binding to the contract
	DiamondFilterer   // Log filterer for contract events
}

// DiamondCaller is an auto generated read-only Go binding around an Ethereum contract.
type DiamondCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DiamondTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DiamondTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DiamondFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DiamondFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DiamondSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DiamondSession struct {
	Contract     *Diamond          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DiamondCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DiamondCallerSession struct {
	Contract *DiamondCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// DiamondTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DiamondTransactorSession struct {
	Contract     *DiamondTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// DiamondRaw is an auto generated low-level Go binding around an Ethereum contract.
type DiamondRaw struct {
	Contract *Diamond // Generic contract binding to access the raw methods on
}

// DiamondCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DiamondCallerRaw struct {
	Contract *DiamondCaller // Generic read-only contract binding to access the raw methods on
}

// DiamondTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DiamondTransactorRaw struct {
	Contract *DiamondTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDiamond creates a new instance of Diamond, bound to a specific deployed contract.
func NewDiamond(address common.Address, backend bind.ContractBackend) (*Diamond, error) {
	contract, err := bindDiamond(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Diamond{DiamondCaller: DiamondCaller{contract: contract}, DiamondTransactor: DiamondTransactor{contract: contract}, DiamondFilterer: DiamondFilterer{contract: contract}}, nil
}

// NewDiamondCaller creates a new read-only instance of Diamond, bound to a specific deployed contract.
func NewDiamondCaller(address common.Address, caller bind.ContractCaller) (*DiamondCaller, error) {
	contract, err := bindDiamond(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DiamondCaller{contract: contract}, nil
}

// NewDiamondTransactor creates a new write-only instance of Diamond, bound to a specific deployed contract.
func NewDiamondTransactor(address common.Address, transactor bind.ContractTransactor) (*DiamondTransactor, error) {
	contract, err := bindDiamond(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DiamondTransactor{contract: contract}, nil
}

// NewDiamondFilterer creates a new log filterer instance of Diamond, bound to a specific deployed contract.
func NewDiamondFilterer(address common.Address, filterer bind.ContractFilterer) (*DiamondFilterer, error) {
	contract, err := bindDiamond(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DiamondFilterer{contract: contract}, nil
}

// bindDiamond binds a generic wrapper to an already deployed contract.
func bindDiamond(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(DiamondABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Diamond *DiamondRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Diamond.Contract.DiamondCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Diamond *DiamondRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Diamond.Contract.DiamondTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Diamond *DiamondRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Diamond.Contract.DiamondTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Diamond *DiamondCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Diamond.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Diamond *DiamondTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Diamond.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Diamond *DiamondTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Diamond.Contract.contract.Transact(opts, method, params...)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_Diamond *DiamondTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _Diamond.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_Diamond *DiamondSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _Diamond.Contract.Fallback(&_Diamond.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_Diamond *DiamondTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _Diamond.Contract.Fallback(&_Diamond.TransactOpts, calldata)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Diamond *DiamondTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Diamond.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Diamond *DiamondSession) Receive() (*types.Transaction, error) {
	return _Diamond.Contract.Receive(&_Diamond.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Diamond *DiamondTransactorSession) Receive() (*types.Transaction, error) {
	return _Diamond.Contract.Receive(&_Diamond.TransactOpts)
}

// DiamondStorageLibraryMetaData contains all meta data concerning the DiamondStorageLibrary contract.
var DiamondStorageLibraryMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122095429eecf55879c4e355dd171c6eb6333f5d66526f3e34b8a66af616aa25d29d64736f6c63430008060033",
}

// DiamondStorageLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use DiamondStorageLibraryMetaData.ABI instead.
var DiamondStorageLibraryABI = DiamondStorageLibraryMetaData.ABI

// DiamondStorageLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use DiamondStorageLibraryMetaData.Bin instead.
var DiamondStorageLibraryBin = DiamondStorageLibraryMetaData.Bin

// DeployDiamondStorageLibrary deploys a new Ethereum contract, binding an instance of DiamondStorageLibrary to it.
func DeployDiamondStorageLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *DiamondStorageLibrary, error) {
	parsed, err := DiamondStorageLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(DiamondStorageLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &DiamondStorageLibrary{DiamondStorageLibraryCaller: DiamondStorageLibraryCaller{contract: contract}, DiamondStorageLibraryTransactor: DiamondStorageLibraryTransactor{contract: contract}, DiamondStorageLibraryFilterer: DiamondStorageLibraryFilterer{contract: contract}}, nil
}

// DiamondStorageLibrary is an auto generated Go binding around an Ethereum contract.
type DiamondStorageLibrary struct {
	DiamondStorageLibraryCaller     // Read-only binding to the contract
	DiamondStorageLibraryTransactor // Write-only binding to the contract
	DiamondStorageLibraryFilterer   // Log filterer for contract events
}

// DiamondStorageLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type DiamondStorageLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DiamondStorageLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DiamondStorageLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DiamondStorageLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DiamondStorageLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DiamondStorageLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DiamondStorageLibrarySession struct {
	Contract     *DiamondStorageLibrary // Generic contract binding to set the session for
	CallOpts     bind.CallOpts          // Call options to use throughout this session
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// DiamondStorageLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DiamondStorageLibraryCallerSession struct {
	Contract *DiamondStorageLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                // Call options to use throughout this session
}

// DiamondStorageLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DiamondStorageLibraryTransactorSession struct {
	Contract     *DiamondStorageLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                // Transaction auth options to use throughout this session
}

// DiamondStorageLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type DiamondStorageLibraryRaw struct {
	Contract *DiamondStorageLibrary // Generic contract binding to access the raw methods on
}

// DiamondStorageLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DiamondStorageLibraryCallerRaw struct {
	Contract *DiamondStorageLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// DiamondStorageLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DiamondStorageLibraryTransactorRaw struct {
	Contract *DiamondStorageLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDiamondStorageLibrary creates a new instance of DiamondStorageLibrary, bound to a specific deployed contract.
func NewDiamondStorageLibrary(address common.Address, backend bind.ContractBackend) (*DiamondStorageLibrary, error) {
	contract, err := bindDiamondStorageLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &DiamondStorageLibrary{DiamondStorageLibraryCaller: DiamondStorageLibraryCaller{contract: contract}, DiamondStorageLibraryTransactor: DiamondStorageLibraryTransactor{contract: contract}, DiamondStorageLibraryFilterer: DiamondStorageLibraryFilterer{contract: contract}}, nil
}

// NewDiamondStorageLibraryCaller creates a new read-only instance of DiamondStorageLibrary, bound to a specific deployed contract.
func NewDiamondStorageLibraryCaller(address common.Address, caller bind.ContractCaller) (*DiamondStorageLibraryCaller, error) {
	contract, err := bindDiamondStorageLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DiamondStorageLibraryCaller{contract: contract}, nil
}

// NewDiamondStorageLibraryTransactor creates a new write-only instance of DiamondStorageLibrary, bound to a specific deployed contract.
func NewDiamondStorageLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*DiamondStorageLibraryTransactor, error) {
	contract, err := bindDiamondStorageLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DiamondStorageLibraryTransactor{contract: contract}, nil
}

// NewDiamondStorageLibraryFilterer creates a new log filterer instance of DiamondStorageLibrary, bound to a specific deployed contract.
func NewDiamondStorageLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*DiamondStorageLibraryFilterer, error) {
	contract, err := bindDiamondStorageLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DiamondStorageLibraryFilterer{contract: contract}, nil
}

// bindDiamondStorageLibrary binds a generic wrapper to an already deployed contract.
func bindDiamondStorageLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(DiamondStorageLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DiamondStorageLibrary *DiamondStorageLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DiamondStorageLibrary.Contract.DiamondStorageLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DiamondStorageLibrary *DiamondStorageLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DiamondStorageLibrary.Contract.DiamondStorageLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DiamondStorageLibrary *DiamondStorageLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DiamondStorageLibrary.Contract.DiamondStorageLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DiamondStorageLibrary *DiamondStorageLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DiamondStorageLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DiamondStorageLibrary *DiamondStorageLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DiamondStorageLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DiamondStorageLibrary *DiamondStorageLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DiamondStorageLibrary.Contract.contract.Transact(opts, method, params...)
}

// DiamondUpdateFacetMetaData contains all meta data concerning the DiamondUpdateFacet contract.
var DiamondUpdateFacetMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"facet\",\"type\":\"address\"}],\"name\":\"addFacet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"grantOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"removeFacet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"facet\",\"type\":\"address\"}],\"name\":\"replaceFacet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governance_\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50600061002561007060201b610d441760201c565b9050338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061009d565b6000807f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90508091505090565b61125a806100ac6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063dc9780591161005b578063dc978059146100eb578063de380fbf14610107578063e348da1314610123578063fad8b32a1461013f57610088565b8063208865cc1461008d57806360536172146100a9578063ab033ea9146100b3578063ca5a0fae146100cf575b600080fd5b6100a760048036038101906100a29190610e22565b61015b565b005b6100b161037b565b005b6100cd60048036038101906100c89190610dc8565b610486565b005b6100e960048036038101906100e49190610df5565b610578565b005b61010560048036038101906101009190610dc8565b61077c565b005b610121600480360381019061011c9190610e22565b61086e565b005b61013d60048036038101906101389190610dc8565b610a8f565b005b61015960048036038101906101549190610dc8565b610bee565b005b6000610165610d44565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166101f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ec90610fb4565b60405180910390fd5b60006101ff610d71565b9050600073ffffffffffffffffffffffffffffffffffffffff16816000016000867bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146102e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102da90610f54565b60405180910390fd5b82816000016000867bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b6000610385610d44565b90508060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610419576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041090610f74565b60405180910390fd5b8060020160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000610490610d44565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610524576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051b90610fd4565b60405180910390fd5b600061052e610d44565b9050828160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b6000610582610d44565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610612576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060990610fb4565b60405180910390fd5b600061061c610d71565b9050600073ffffffffffffffffffffffffffffffffffffffff16816000016000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610701576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f890610f94565b60405180910390fd5b806000016000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055505050565b6000610786610d44565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461081a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081190610fd4565b60405180910390fd5b6000610824610d44565b9050828160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b6000610878610d44565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610908576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ff90610fb4565b60405180910390fd5b6000610912610d71565b9050600073ffffffffffffffffffffffffffffffffffffffff16816000016000867bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156109f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ee90610f94565b60405180910390fd5b82816000016000867bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b6000610a99610d44565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610b4457508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610b83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7a90610f34565b60405180910390fd5b6000610b8d610d44565b905060018160000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550505050565b6000610bf8610d44565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610ca357508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610ce2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cd990610f34565b60405180910390fd5b6000610cec610d44565b90508060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff0219169055505050565b6000807f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90508091505090565b6000807f2031468f0c30f7087de4da9398818763b546d7f89935fa65485c24ff1df26bf390508091505090565b600081359050610dad816111f6565b92915050565b600081359050610dc28161120d565b92915050565b600060208284031215610dde57610ddd611063565b5b6000610dec84828501610d9e565b91505092915050565b600060208284031215610e0b57610e0a611063565b5b6000610e1984828501610db3565b91505092915050565b60008060408385031215610e3957610e38611063565b5b6000610e4785828601610db3565b9250506020610e5885828601610d9e565b9150509250929050565b6000610e6f602e83610ff4565b9150610e7a82611068565b604082019050919050565b6000610e92601783610ff4565b9150610e9d826110b7565b602082019050919050565b6000610eb5602583610ff4565b9150610ec0826110e0565b604082019050919050565b6000610ed8601783610ff4565b9150610ee38261112f565b602082019050919050565b6000610efb602683610ff4565b9150610f0682611158565b604082019050919050565b6000610f1e602583610ff4565b9150610f29826111a7565b604082019050919050565b60006020820190508181036000830152610f4d81610e62565b9050919050565b60006020820190508181036000830152610f6d81610e85565b9050919050565b60006020820190508181036000830152610f8d81610ea8565b9050919050565b60006020820190508181036000830152610fad81610ecb565b9050919050565b60006020820190508181036000830152610fcd81610eee565b9050919050565b60006020820190508181036000830152610fed81610f11565b9050919050565b600082825260208201905092915050565b600061101082611043565b9050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b7f41636365737320436f6e74726f6c3a206f6e6c79206f776e6572206f72206f7060008201527f657261746f7220616c6c6f776564000000000000000000000000000000000000602082015250565b7f73656c6563746f7220616c726561647920657869737473000000000000000000600082015250565b7f41636365737320436f6e74726f6c3a206f776e657273686970206e6f7420677260008201527f616e746564000000000000000000000000000000000000000000000000000000602082015250565b7f73656c6563746f7220646f6573206e6f74206578697374000000000000000000600082015250565b7f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160008201527f6c6c6f7765640000000000000000000000000000000000000000000000000000602082015250565b7f41636365737320436f6e74726f6c3a206f6e6c79206f776e657220697320616c60008201527f6c6f776564000000000000000000000000000000000000000000000000000000602082015250565b6111ff81611005565b811461120a57600080fd5b50565b61121681611017565b811461122157600080fd5b5056fea264697066735822122078472e52bb9ba43746934b68a82df36ad482e70c12dd424fdf2eb4acc971097364736f6c63430008060033",
}

// DiamondUpdateFacetABI is the input ABI used to generate the binding from.
// Deprecated: Use DiamondUpdateFacetMetaData.ABI instead.
var DiamondUpdateFacetABI = DiamondUpdateFacetMetaData.ABI

// DiamondUpdateFacetBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use DiamondUpdateFacetMetaData.Bin instead.
var DiamondUpdateFacetBin = DiamondUpdateFacetMetaData.Bin

// DeployDiamondUpdateFacet deploys a new Ethereum contract, binding an instance of DiamondUpdateFacet to it.
func DeployDiamondUpdateFacet(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *DiamondUpdateFacet, error) {
	parsed, err := DiamondUpdateFacetMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(DiamondUpdateFacetBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &DiamondUpdateFacet{DiamondUpdateFacetCaller: DiamondUpdateFacetCaller{contract: contract}, DiamondUpdateFacetTransactor: DiamondUpdateFacetTransactor{contract: contract}, DiamondUpdateFacetFilterer: DiamondUpdateFacetFilterer{contract: contract}}, nil
}

// DiamondUpdateFacet is an auto generated Go binding around an Ethereum contract.
type DiamondUpdateFacet struct {
	DiamondUpdateFacetCaller     // Read-only binding to the contract
	DiamondUpdateFacetTransactor // Write-only binding to the contract
	DiamondUpdateFacetFilterer   // Log filterer for contract events
}

// DiamondUpdateFacetCaller is an auto generated read-only Go binding around an Ethereum contract.
type DiamondUpdateFacetCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DiamondUpdateFacetTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DiamondUpdateFacetTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DiamondUpdateFacetFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DiamondUpdateFacetFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DiamondUpdateFacetSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DiamondUpdateFacetSession struct {
	Contract     *DiamondUpdateFacet // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// DiamondUpdateFacetCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DiamondUpdateFacetCallerSession struct {
	Contract *DiamondUpdateFacetCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// DiamondUpdateFacetTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DiamondUpdateFacetTransactorSession struct {
	Contract     *DiamondUpdateFacetTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// DiamondUpdateFacetRaw is an auto generated low-level Go binding around an Ethereum contract.
type DiamondUpdateFacetRaw struct {
	Contract *DiamondUpdateFacet // Generic contract binding to access the raw methods on
}

// DiamondUpdateFacetCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DiamondUpdateFacetCallerRaw struct {
	Contract *DiamondUpdateFacetCaller // Generic read-only contract binding to access the raw methods on
}

// DiamondUpdateFacetTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DiamondUpdateFacetTransactorRaw struct {
	Contract *DiamondUpdateFacetTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDiamondUpdateFacet creates a new instance of DiamondUpdateFacet, bound to a specific deployed contract.
func NewDiamondUpdateFacet(address common.Address, backend bind.ContractBackend) (*DiamondUpdateFacet, error) {
	contract, err := bindDiamondUpdateFacet(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &DiamondUpdateFacet{DiamondUpdateFacetCaller: DiamondUpdateFacetCaller{contract: contract}, DiamondUpdateFacetTransactor: DiamondUpdateFacetTransactor{contract: contract}, DiamondUpdateFacetFilterer: DiamondUpdateFacetFilterer{contract: contract}}, nil
}

// NewDiamondUpdateFacetCaller creates a new read-only instance of DiamondUpdateFacet, bound to a specific deployed contract.
func NewDiamondUpdateFacetCaller(address common.Address, caller bind.ContractCaller) (*DiamondUpdateFacetCaller, error) {
	contract, err := bindDiamondUpdateFacet(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DiamondUpdateFacetCaller{contract: contract}, nil
}

// NewDiamondUpdateFacetTransactor creates a new write-only instance of DiamondUpdateFacet, bound to a specific deployed contract.
func NewDiamondUpdateFacetTransactor(address common.Address, transactor bind.ContractTransactor) (*DiamondUpdateFacetTransactor, error) {
	contract, err := bindDiamondUpdateFacet(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DiamondUpdateFacetTransactor{contract: contract}, nil
}

// NewDiamondUpdateFacetFilterer creates a new log filterer instance of DiamondUpdateFacet, bound to a specific deployed contract.
func NewDiamondUpdateFacetFilterer(address common.Address, filterer bind.ContractFilterer) (*DiamondUpdateFacetFilterer, error) {
	contract, err := bindDiamondUpdateFacet(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DiamondUpdateFacetFilterer{contract: contract}, nil
}

// bindDiamondUpdateFacet binds a generic wrapper to an already deployed contract.
func bindDiamondUpdateFacet(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(DiamondUpdateFacetABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DiamondUpdateFacet *DiamondUpdateFacetRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DiamondUpdateFacet.Contract.DiamondUpdateFacetCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DiamondUpdateFacet *DiamondUpdateFacetRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DiamondUpdateFacet.Contract.DiamondUpdateFacetTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DiamondUpdateFacet *DiamondUpdateFacetRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DiamondUpdateFacet.Contract.DiamondUpdateFacetTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DiamondUpdateFacet *DiamondUpdateFacetCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DiamondUpdateFacet.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DiamondUpdateFacet *DiamondUpdateFacetTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DiamondUpdateFacet.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DiamondUpdateFacet *DiamondUpdateFacetTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DiamondUpdateFacet.Contract.contract.Transact(opts, method, params...)
}

// AddFacet is a paid mutator transaction binding the contract method 0x208865cc.
//
// Solidity: function addFacet(bytes4 selector, address facet) returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetTransactor) AddFacet(opts *bind.TransactOpts, selector [4]byte, facet common.Address) (*types.Transaction, error) {
	return _DiamondUpdateFacet.contract.Transact(opts, "addFacet", selector, facet)
}

// AddFacet is a paid mutator transaction binding the contract method 0x208865cc.
//
// Solidity: function addFacet(bytes4 selector, address facet) returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetSession) AddFacet(selector [4]byte, facet common.Address) (*types.Transaction, error) {
	return _DiamondUpdateFacet.Contract.AddFacet(&_DiamondUpdateFacet.TransactOpts, selector, facet)
}

// AddFacet is a paid mutator transaction binding the contract method 0x208865cc.
//
// Solidity: function addFacet(bytes4 selector, address facet) returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetTransactorSession) AddFacet(selector [4]byte, facet common.Address) (*types.Transaction, error) {
	return _DiamondUpdateFacet.Contract.AddFacet(&_DiamondUpdateFacet.TransactOpts, selector, facet)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetTransactor) GrantOperator(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _DiamondUpdateFacet.contract.Transact(opts, "grantOperator", who)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetSession) GrantOperator(who common.Address) (*types.Transaction, error) {
	return _DiamondUpdateFacet.Contract.GrantOperator(&_DiamondUpdateFacet.TransactOpts, who)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetTransactorSession) GrantOperator(who common.Address) (*types.Transaction, error) {
	return _DiamondUpdateFacet.Contract.GrantOperator(&_DiamondUpdateFacet.TransactOpts, who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetTransactor) GrantOwner(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _DiamondUpdateFacet.contract.Transact(opts, "grantOwner", who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetSession) GrantOwner(who common.Address) (*types.Transaction, error) {
	return _DiamondUpdateFacet.Contract.GrantOwner(&_DiamondUpdateFacet.TransactOpts, who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetTransactorSession) GrantOwner(who common.Address) (*types.Transaction, error) {
	return _DiamondUpdateFacet.Contract.GrantOwner(&_DiamondUpdateFacet.TransactOpts, who)
}

// RemoveFacet is a paid mutator transaction binding the contract method 0xca5a0fae.
//
// Solidity: function removeFacet(bytes4 selector) returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetTransactor) RemoveFacet(opts *bind.TransactOpts, selector [4]byte) (*types.Transaction, error) {
	return _DiamondUpdateFacet.contract.Transact(opts, "removeFacet", selector)
}

// RemoveFacet is a paid mutator transaction binding the contract method 0xca5a0fae.
//
// Solidity: function removeFacet(bytes4 selector) returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetSession) RemoveFacet(selector [4]byte) (*types.Transaction, error) {
	return _DiamondUpdateFacet.Contract.RemoveFacet(&_DiamondUpdateFacet.TransactOpts, selector)
}

// RemoveFacet is a paid mutator transaction binding the contract method 0xca5a0fae.
//
// Solidity: function removeFacet(bytes4 selector) returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetTransactorSession) RemoveFacet(selector [4]byte) (*types.Transaction, error) {
	return _DiamondUpdateFacet.Contract.RemoveFacet(&_DiamondUpdateFacet.TransactOpts, selector)
}

// ReplaceFacet is a paid mutator transaction binding the contract method 0xde380fbf.
//
// Solidity: function replaceFacet(bytes4 selector, address facet) returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetTransactor) ReplaceFacet(opts *bind.TransactOpts, selector [4]byte, facet common.Address) (*types.Transaction, error) {
	return _DiamondUpdateFacet.contract.Transact(opts, "replaceFacet", selector, facet)
}

// ReplaceFacet is a paid mutator transaction binding the contract method 0xde380fbf.
//
// Solidity: function replaceFacet(bytes4 selector, address facet) returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetSession) ReplaceFacet(selector [4]byte, facet common.Address) (*types.Transaction, error) {
	return _DiamondUpdateFacet.Contract.ReplaceFacet(&_DiamondUpdateFacet.TransactOpts, selector, facet)
}

// ReplaceFacet is a paid mutator transaction binding the contract method 0xde380fbf.
//
// Solidity: function replaceFacet(bytes4 selector, address facet) returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetTransactorSession) ReplaceFacet(selector [4]byte, facet common.Address) (*types.Transaction, error) {
	return _DiamondUpdateFacet.Contract.ReplaceFacet(&_DiamondUpdateFacet.TransactOpts, selector, facet)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetTransactor) RevokeOperator(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _DiamondUpdateFacet.contract.Transact(opts, "revokeOperator", who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetSession) RevokeOperator(who common.Address) (*types.Transaction, error) {
	return _DiamondUpdateFacet.Contract.RevokeOperator(&_DiamondUpdateFacet.TransactOpts, who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetTransactorSession) RevokeOperator(who common.Address) (*types.Transaction, error) {
	return _DiamondUpdateFacet.Contract.RevokeOperator(&_DiamondUpdateFacet.TransactOpts, who)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetTransactor) SetGovernance(opts *bind.TransactOpts, governance_ common.Address) (*types.Transaction, error) {
	return _DiamondUpdateFacet.contract.Transact(opts, "setGovernance", governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _DiamondUpdateFacet.Contract.SetGovernance(&_DiamondUpdateFacet.TransactOpts, governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetTransactorSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _DiamondUpdateFacet.Contract.SetGovernance(&_DiamondUpdateFacet.TransactOpts, governance_)
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetTransactor) TakeOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DiamondUpdateFacet.contract.Transact(opts, "takeOwnership")
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetSession) TakeOwnership() (*types.Transaction, error) {
	return _DiamondUpdateFacet.Contract.TakeOwnership(&_DiamondUpdateFacet.TransactOpts)
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetTransactorSession) TakeOwnership() (*types.Transaction, error) {
	return _DiamondUpdateFacet.Contract.TakeOwnership(&_DiamondUpdateFacet.TransactOpts)
}

// DirectGovernanceMetaData contains all meta data concerning the DirectGovernance contract.
var DirectGovernanceMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"ValueUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"name\":\"updateValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b5033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610083600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661008860201b60201c565b610302565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061012c57506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b61016b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161016290610200565b60405180910390fd5b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600160008154809291906101d59061023b565b919050555050565b60006101ea603183610220565b91506101f5826102b3565b604082019050919050565b60006020820190508181036000830152610219816101dd565b9050919050565b600082825260208201905092915050565b6000819050919050565b600061024682610231565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561027957610278610284565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f46756e6374696f6e616c697479207265737472696374656420746f206175746860008201527f6f72697a6564206f70657261746f72732e000000000000000000000000000000602082015250565b610801806103116000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80634651248614610046578063e348da1314610062578063fad8b32a1461007e575b600080fd5b610060600480360381019061005b919061050d565b61009a565b005b61007c600480360381019061007791906104e0565b6101bc565b005b610098600480360381019061009391906104e0565b610311565b005b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061013e57506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b61017d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610174906105f0565b60405180910390fd5b8082847f36dcd0e03525dedd9d5c21a263ef5f35d030298b5c48f1a713006aefc064ad05336040516101af91906105b5565b60405180910390a4505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061026057506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b61029f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610296906105f0565b60405180910390fd5b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600081548092919061030990610691565b919050555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806103b557506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6103f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103eb906105f0565b60405180910390fd5b6001805411610438576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042f906105d0565b60405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff02191690556001600081548092919061049990610667565b919050555050565b6000813590506104b081610786565b92915050565b6000813590506104c58161079d565b92915050565b6000813590506104da816107b4565b92915050565b6000602082840312156104f6576104f5610709565b5b6000610504848285016104a1565b91505092915050565b60008060006060848603121561052657610525610709565b5b6000610534868287016104cb565b9350506020610545868287016104cb565b9250506040610556868287016104b6565b9150509250925092565b61056981610621565b82525050565b600061057c601a83610610565b91506105878261070e565b602082019050919050565b600061059f603183610610565b91506105aa82610737565b604082019050919050565b60006020820190506105ca6000830184610560565b92915050565b600060208201905081810360008301526105e98161056f565b9050919050565b6000602082019050818103600083015261060981610592565b9050919050565b600082825260208201905092915050565b600061062c8261063d565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006106728261065d565b91506000821415610686576106856106da565b5b600182039050919050565b600061069c8261065d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156106cf576106ce6106da565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600080fd5b7f43616e27742072656d6f766520616c6c206f70657261746f7273000000000000600082015250565b7f46756e6374696f6e616c697479207265737472696374656420746f206175746860008201527f6f72697a6564206f70657261746f72732e000000000000000000000000000000602082015250565b61078f81610621565b811461079a57600080fd5b50565b6107a681610633565b81146107b157600080fd5b50565b6107bd8161065d565b81146107c857600080fd5b5056fea2646970667358221220e424c2ef305c8c793cc48faa286d331b42ccd815dec66d4ee814e9fed41c91fb64736f6c63430008060033",
}

// DirectGovernanceABI is the input ABI used to generate the binding from.
// Deprecated: Use DirectGovernanceMetaData.ABI instead.
var DirectGovernanceABI = DirectGovernanceMetaData.ABI

// DirectGovernanceBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use DirectGovernanceMetaData.Bin instead.
var DirectGovernanceBin = DirectGovernanceMetaData.Bin

// DeployDirectGovernance deploys a new Ethereum contract, binding an instance of DirectGovernance to it.
func DeployDirectGovernance(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *DirectGovernance, error) {
	parsed, err := DirectGovernanceMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(DirectGovernanceBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &DirectGovernance{DirectGovernanceCaller: DirectGovernanceCaller{contract: contract}, DirectGovernanceTransactor: DirectGovernanceTransactor{contract: contract}, DirectGovernanceFilterer: DirectGovernanceFilterer{contract: contract}}, nil
}

// DirectGovernance is an auto generated Go binding around an Ethereum contract.
type DirectGovernance struct {
	DirectGovernanceCaller     // Read-only binding to the contract
	DirectGovernanceTransactor // Write-only binding to the contract
	DirectGovernanceFilterer   // Log filterer for contract events
}

// DirectGovernanceCaller is an auto generated read-only Go binding around an Ethereum contract.
type DirectGovernanceCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DirectGovernanceTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DirectGovernanceTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DirectGovernanceFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DirectGovernanceFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DirectGovernanceSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DirectGovernanceSession struct {
	Contract     *DirectGovernance // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DirectGovernanceCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DirectGovernanceCallerSession struct {
	Contract *DirectGovernanceCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// DirectGovernanceTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DirectGovernanceTransactorSession struct {
	Contract     *DirectGovernanceTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// DirectGovernanceRaw is an auto generated low-level Go binding around an Ethereum contract.
type DirectGovernanceRaw struct {
	Contract *DirectGovernance // Generic contract binding to access the raw methods on
}

// DirectGovernanceCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DirectGovernanceCallerRaw struct {
	Contract *DirectGovernanceCaller // Generic read-only contract binding to access the raw methods on
}

// DirectGovernanceTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DirectGovernanceTransactorRaw struct {
	Contract *DirectGovernanceTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDirectGovernance creates a new instance of DirectGovernance, bound to a specific deployed contract.
func NewDirectGovernance(address common.Address, backend bind.ContractBackend) (*DirectGovernance, error) {
	contract, err := bindDirectGovernance(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &DirectGovernance{DirectGovernanceCaller: DirectGovernanceCaller{contract: contract}, DirectGovernanceTransactor: DirectGovernanceTransactor{contract: contract}, DirectGovernanceFilterer: DirectGovernanceFilterer{contract: contract}}, nil
}

// NewDirectGovernanceCaller creates a new read-only instance of DirectGovernance, bound to a specific deployed contract.
func NewDirectGovernanceCaller(address common.Address, caller bind.ContractCaller) (*DirectGovernanceCaller, error) {
	contract, err := bindDirectGovernance(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DirectGovernanceCaller{contract: contract}, nil
}

// NewDirectGovernanceTransactor creates a new write-only instance of DirectGovernance, bound to a specific deployed contract.
func NewDirectGovernanceTransactor(address common.Address, transactor bind.ContractTransactor) (*DirectGovernanceTransactor, error) {
	contract, err := bindDirectGovernance(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DirectGovernanceTransactor{contract: contract}, nil
}

// NewDirectGovernanceFilterer creates a new log filterer instance of DirectGovernance, bound to a specific deployed contract.
func NewDirectGovernanceFilterer(address common.Address, filterer bind.ContractFilterer) (*DirectGovernanceFilterer, error) {
	contract, err := bindDirectGovernance(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DirectGovernanceFilterer{contract: contract}, nil
}

// bindDirectGovernance binds a generic wrapper to an already deployed contract.
func bindDirectGovernance(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(DirectGovernanceABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DirectGovernance *DirectGovernanceRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DirectGovernance.Contract.DirectGovernanceCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DirectGovernance *DirectGovernanceRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DirectGovernance.Contract.DirectGovernanceTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DirectGovernance *DirectGovernanceRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DirectGovernance.Contract.DirectGovernanceTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DirectGovernance *DirectGovernanceCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DirectGovernance.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DirectGovernance *DirectGovernanceTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DirectGovernance.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DirectGovernance *DirectGovernanceTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DirectGovernance.Contract.contract.Transact(opts, method, params...)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_DirectGovernance *DirectGovernanceTransactor) GrantOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _DirectGovernance.contract.Transact(opts, "grantOperator", _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_DirectGovernance *DirectGovernanceSession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _DirectGovernance.Contract.GrantOperator(&_DirectGovernance.TransactOpts, _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_DirectGovernance *DirectGovernanceTransactorSession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _DirectGovernance.Contract.GrantOperator(&_DirectGovernance.TransactOpts, _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_DirectGovernance *DirectGovernanceTransactor) RevokeOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _DirectGovernance.contract.Transact(opts, "revokeOperator", _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_DirectGovernance *DirectGovernanceSession) RevokeOperator(_operator common.Address) (*types.Transaction, error) {
	return _DirectGovernance.Contract.RevokeOperator(&_DirectGovernance.TransactOpts, _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_DirectGovernance *DirectGovernanceTransactorSession) RevokeOperator(_operator common.Address) (*types.Transaction, error) {
	return _DirectGovernance.Contract.RevokeOperator(&_DirectGovernance.TransactOpts, _operator)
}

// UpdateValue is a paid mutator transaction binding the contract method 0x46512486.
//
// Solidity: function updateValue(uint256 epoch, uint256 key, bytes32 value) returns()
func (_DirectGovernance *DirectGovernanceTransactor) UpdateValue(opts *bind.TransactOpts, epoch *big.Int, key *big.Int, value [32]byte) (*types.Transaction, error) {
	return _DirectGovernance.contract.Transact(opts, "updateValue", epoch, key, value)
}

// UpdateValue is a paid mutator transaction binding the contract method 0x46512486.
//
// Solidity: function updateValue(uint256 epoch, uint256 key, bytes32 value) returns()
func (_DirectGovernance *DirectGovernanceSession) UpdateValue(epoch *big.Int, key *big.Int, value [32]byte) (*types.Transaction, error) {
	return _DirectGovernance.Contract.UpdateValue(&_DirectGovernance.TransactOpts, epoch, key, value)
}

// UpdateValue is a paid mutator transaction binding the contract method 0x46512486.
//
// Solidity: function updateValue(uint256 epoch, uint256 key, bytes32 value) returns()
func (_DirectGovernance *DirectGovernanceTransactorSession) UpdateValue(epoch *big.Int, key *big.Int, value [32]byte) (*types.Transaction, error) {
	return _DirectGovernance.Contract.UpdateValue(&_DirectGovernance.TransactOpts, epoch, key, value)
}

// DirectGovernanceValueUpdatedIterator is returned from FilterValueUpdated and is used to iterate over the raw logs and unpacked data for ValueUpdated events raised by the DirectGovernance contract.
type DirectGovernanceValueUpdatedIterator struct {
	Event *DirectGovernanceValueUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DirectGovernanceValueUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DirectGovernanceValueUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DirectGovernanceValueUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DirectGovernanceValueUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DirectGovernanceValueUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DirectGovernanceValueUpdated represents a ValueUpdated event raised by the DirectGovernance contract.
type DirectGovernanceValueUpdated struct {
	Epoch *big.Int
	Key   *big.Int
	Value [32]byte
	Who   common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterValueUpdated is a free log retrieval operation binding the contract event 0x36dcd0e03525dedd9d5c21a263ef5f35d030298b5c48f1a713006aefc064ad05.
//
// Solidity: event ValueUpdated(uint256 indexed epoch, uint256 indexed key, bytes32 indexed value, address who)
func (_DirectGovernance *DirectGovernanceFilterer) FilterValueUpdated(opts *bind.FilterOpts, epoch []*big.Int, key []*big.Int, value [][32]byte) (*DirectGovernanceValueUpdatedIterator, error) {

	var epochRule []interface{}
	for _, epochItem := range epoch {
		epochRule = append(epochRule, epochItem)
	}
	var keyRule []interface{}
	for _, keyItem := range key {
		keyRule = append(keyRule, keyItem)
	}
	var valueRule []interface{}
	for _, valueItem := range value {
		valueRule = append(valueRule, valueItem)
	}

	logs, sub, err := _DirectGovernance.contract.FilterLogs(opts, "ValueUpdated", epochRule, keyRule, valueRule)
	if err != nil {
		return nil, err
	}
	return &DirectGovernanceValueUpdatedIterator{contract: _DirectGovernance.contract, event: "ValueUpdated", logs: logs, sub: sub}, nil
}

// WatchValueUpdated is a free log subscription operation binding the contract event 0x36dcd0e03525dedd9d5c21a263ef5f35d030298b5c48f1a713006aefc064ad05.
//
// Solidity: event ValueUpdated(uint256 indexed epoch, uint256 indexed key, bytes32 indexed value, address who)
func (_DirectGovernance *DirectGovernanceFilterer) WatchValueUpdated(opts *bind.WatchOpts, sink chan<- *DirectGovernanceValueUpdated, epoch []*big.Int, key []*big.Int, value [][32]byte) (event.Subscription, error) {

	var epochRule []interface{}
	for _, epochItem := range epoch {
		epochRule = append(epochRule, epochItem)
	}
	var keyRule []interface{}
	for _, keyItem := range key {
		keyRule = append(keyRule, keyItem)
	}
	var valueRule []interface{}
	for _, valueItem := range value {
		valueRule = append(valueRule, valueItem)
	}

	logs, sub, err := _DirectGovernance.contract.WatchLogs(opts, "ValueUpdated", epochRule, keyRule, valueRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DirectGovernanceValueUpdated)
				if err := _DirectGovernance.contract.UnpackLog(event, "ValueUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValueUpdated is a log parse operation binding the contract event 0x36dcd0e03525dedd9d5c21a263ef5f35d030298b5c48f1a713006aefc064ad05.
//
// Solidity: event ValueUpdated(uint256 indexed epoch, uint256 indexed key, bytes32 indexed value, address who)
func (_DirectGovernance *DirectGovernanceFilterer) ParseValueUpdated(log types.Log) (*DirectGovernanceValueUpdated, error) {
	event := new(DirectGovernanceValueUpdated)
	if err := _DirectGovernance.contract.UnpackLog(event, "ValueUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC165MetaData contains all meta data concerning the ERC165 contract.
var ERC165MetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// ERC165ABI is the input ABI used to generate the binding from.
// Deprecated: Use ERC165MetaData.ABI instead.
var ERC165ABI = ERC165MetaData.ABI

// ERC165 is an auto generated Go binding around an Ethereum contract.
type ERC165 struct {
	ERC165Caller     // Read-only binding to the contract
	ERC165Transactor // Write-only binding to the contract
	ERC165Filterer   // Log filterer for contract events
}

// ERC165Caller is an auto generated read-only Go binding around an Ethereum contract.
type ERC165Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC165Transactor is an auto generated write-only Go binding around an Ethereum contract.
type ERC165Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC165Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ERC165Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC165Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ERC165Session struct {
	Contract     *ERC165           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ERC165CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ERC165CallerSession struct {
	Contract *ERC165Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// ERC165TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ERC165TransactorSession struct {
	Contract     *ERC165Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ERC165Raw is an auto generated low-level Go binding around an Ethereum contract.
type ERC165Raw struct {
	Contract *ERC165 // Generic contract binding to access the raw methods on
}

// ERC165CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ERC165CallerRaw struct {
	Contract *ERC165Caller // Generic read-only contract binding to access the raw methods on
}

// ERC165TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ERC165TransactorRaw struct {
	Contract *ERC165Transactor // Generic write-only contract binding to access the raw methods on
}

// NewERC165 creates a new instance of ERC165, bound to a specific deployed contract.
func NewERC165(address common.Address, backend bind.ContractBackend) (*ERC165, error) {
	contract, err := bindERC165(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ERC165{ERC165Caller: ERC165Caller{contract: contract}, ERC165Transactor: ERC165Transactor{contract: contract}, ERC165Filterer: ERC165Filterer{contract: contract}}, nil
}

// NewERC165Caller creates a new read-only instance of ERC165, bound to a specific deployed contract.
func NewERC165Caller(address common.Address, caller bind.ContractCaller) (*ERC165Caller, error) {
	contract, err := bindERC165(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ERC165Caller{contract: contract}, nil
}

// NewERC165Transactor creates a new write-only instance of ERC165, bound to a specific deployed contract.
func NewERC165Transactor(address common.Address, transactor bind.ContractTransactor) (*ERC165Transactor, error) {
	contract, err := bindERC165(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ERC165Transactor{contract: contract}, nil
}

// NewERC165Filterer creates a new log filterer instance of ERC165, bound to a specific deployed contract.
func NewERC165Filterer(address common.Address, filterer bind.ContractFilterer) (*ERC165Filterer, error) {
	contract, err := bindERC165(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ERC165Filterer{contract: contract}, nil
}

// bindERC165 binds a generic wrapper to an already deployed contract.
func bindERC165(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ERC165ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC165 *ERC165Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC165.Contract.ERC165Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC165 *ERC165Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC165.Contract.ERC165Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC165 *ERC165Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC165.Contract.ERC165Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC165 *ERC165CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC165.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC165 *ERC165TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC165.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC165 *ERC165TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC165.Contract.contract.Transact(opts, method, params...)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ERC165 *ERC165Caller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _ERC165.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ERC165 *ERC165Session) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _ERC165.Contract.SupportsInterface(&_ERC165.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ERC165 *ERC165CallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _ERC165.Contract.SupportsInterface(&_ERC165.CallOpts, interfaceId)
}

// ERC165LibraryMetaData contains all meta data concerning the ERC165Library contract.
var ERC165LibraryMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208eee37cd6e7f9b214a2ac634837699d3c0534d41f249bad7ce160a6d5bf3a15564736f6c63430008060033",
}

// ERC165LibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use ERC165LibraryMetaData.ABI instead.
var ERC165LibraryABI = ERC165LibraryMetaData.ABI

// ERC165LibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ERC165LibraryMetaData.Bin instead.
var ERC165LibraryBin = ERC165LibraryMetaData.Bin

// DeployERC165Library deploys a new Ethereum contract, binding an instance of ERC165Library to it.
func DeployERC165Library(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ERC165Library, error) {
	parsed, err := ERC165LibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ERC165LibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ERC165Library{ERC165LibraryCaller: ERC165LibraryCaller{contract: contract}, ERC165LibraryTransactor: ERC165LibraryTransactor{contract: contract}, ERC165LibraryFilterer: ERC165LibraryFilterer{contract: contract}}, nil
}

// ERC165Library is an auto generated Go binding around an Ethereum contract.
type ERC165Library struct {
	ERC165LibraryCaller     // Read-only binding to the contract
	ERC165LibraryTransactor // Write-only binding to the contract
	ERC165LibraryFilterer   // Log filterer for contract events
}

// ERC165LibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type ERC165LibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC165LibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ERC165LibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC165LibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ERC165LibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC165LibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ERC165LibrarySession struct {
	Contract     *ERC165Library    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ERC165LibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ERC165LibraryCallerSession struct {
	Contract *ERC165LibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// ERC165LibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ERC165LibraryTransactorSession struct {
	Contract     *ERC165LibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// ERC165LibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type ERC165LibraryRaw struct {
	Contract *ERC165Library // Generic contract binding to access the raw methods on
}

// ERC165LibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ERC165LibraryCallerRaw struct {
	Contract *ERC165LibraryCaller // Generic read-only contract binding to access the raw methods on
}

// ERC165LibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ERC165LibraryTransactorRaw struct {
	Contract *ERC165LibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewERC165Library creates a new instance of ERC165Library, bound to a specific deployed contract.
func NewERC165Library(address common.Address, backend bind.ContractBackend) (*ERC165Library, error) {
	contract, err := bindERC165Library(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ERC165Library{ERC165LibraryCaller: ERC165LibraryCaller{contract: contract}, ERC165LibraryTransactor: ERC165LibraryTransactor{contract: contract}, ERC165LibraryFilterer: ERC165LibraryFilterer{contract: contract}}, nil
}

// NewERC165LibraryCaller creates a new read-only instance of ERC165Library, bound to a specific deployed contract.
func NewERC165LibraryCaller(address common.Address, caller bind.ContractCaller) (*ERC165LibraryCaller, error) {
	contract, err := bindERC165Library(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ERC165LibraryCaller{contract: contract}, nil
}

// NewERC165LibraryTransactor creates a new write-only instance of ERC165Library, bound to a specific deployed contract.
func NewERC165LibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*ERC165LibraryTransactor, error) {
	contract, err := bindERC165Library(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ERC165LibraryTransactor{contract: contract}, nil
}

// NewERC165LibraryFilterer creates a new log filterer instance of ERC165Library, bound to a specific deployed contract.
func NewERC165LibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*ERC165LibraryFilterer, error) {
	contract, err := bindERC165Library(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ERC165LibraryFilterer{contract: contract}, nil
}

// bindERC165Library binds a generic wrapper to an already deployed contract.
func bindERC165Library(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ERC165LibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC165Library *ERC165LibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC165Library.Contract.ERC165LibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC165Library *ERC165LibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC165Library.Contract.ERC165LibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC165Library *ERC165LibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC165Library.Contract.ERC165LibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC165Library *ERC165LibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC165Library.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC165Library *ERC165LibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC165Library.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC165Library *ERC165LibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC165Library.Contract.contract.Transact(opts, method, params...)
}

// ERC20MetaData contains all meta data concerning the ERC20 contract.
var ERC20MetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b50604051620017623803806200176283398181016040528101906200003791906200019f565b81600390805190602001906200004f92919062000071565b5080600490805190602001906200006892919062000071565b505050620003a8565b8280546200007f90620002b9565b90600052602060002090601f016020900481019282620000a35760008555620000ef565b82601f10620000be57805160ff1916838001178555620000ef565b82800160010185558215620000ef579182015b82811115620000ee578251825591602001919060010190620000d1565b5b509050620000fe919062000102565b5090565b5b808211156200011d57600081600090555060010162000103565b5090565b60006200013862000132846200024d565b62000224565b90508281526020810184848401111562000157576200015662000388565b5b6200016484828562000283565b509392505050565b600082601f83011262000184576200018362000383565b5b81516200019684826020860162000121565b91505092915050565b60008060408385031215620001b957620001b862000392565b5b600083015167ffffffffffffffff811115620001da57620001d96200038d565b5b620001e8858286016200016c565b925050602083015167ffffffffffffffff8111156200020c576200020b6200038d565b5b6200021a858286016200016c565b9150509250929050565b60006200023062000243565b90506200023e8282620002ef565b919050565b6000604051905090565b600067ffffffffffffffff8211156200026b576200026a62000354565b5b620002768262000397565b9050602081019050919050565b60005b83811015620002a357808201518184015260208101905062000286565b83811115620002b3576000848401525b50505050565b60006002820490506001821680620002d257607f821691505b60208210811415620002e957620002e862000325565b5b50919050565b620002fa8262000397565b810181811067ffffffffffffffff821117156200031c576200031b62000354565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b6113aa80620003b86000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461016857806370a082311461019857806395d89b41146101c8578063a457c2d7146101e6578063a9059cbb14610216578063dd62ed3e14610246576100a9565b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100fc57806323b872dd1461011a578063313ce5671461014a575b600080fd5b6100b6610276565b6040516100c39190610e45565b60405180910390f35b6100e660048036038101906100e19190610c8f565b610308565b6040516100f39190610e2a565b60405180910390f35b610104610326565b6040516101119190610f47565b60405180910390f35b610134600480360381019061012f9190610c3c565b610330565b6040516101419190610e2a565b60405180910390f35b610152610428565b60405161015f9190610f62565b60405180910390f35b610182600480360381019061017d9190610c8f565b610431565b60405161018f9190610e2a565b60405180910390f35b6101b260048036038101906101ad9190610bcf565b6104dd565b6040516101bf9190610f47565b60405180910390f35b6101d0610525565b6040516101dd9190610e45565b60405180910390f35b61020060048036038101906101fb9190610c8f565b6105b7565b60405161020d9190610e2a565b60405180910390f35b610230600480360381019061022b9190610c8f565b6106a2565b60405161023d9190610e2a565b60405180910390f35b610260600480360381019061025b9190610bfc565b6106c0565b60405161026d9190610f47565b60405180910390f35b60606003805461028590611077565b80601f01602080910402602001604051908101604052809291908181526020018280546102b190611077565b80156102fe5780601f106102d3576101008083540402835291602001916102fe565b820191906000526020600020905b8154815290600101906020018083116102e157829003601f168201915b5050505050905090565b600061031c610315610747565b848461074f565b6001905092915050565b6000600254905090565b600061033d84848461091a565b6000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000610388610747565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610408576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ff90610ec7565b60405180910390fd5b61041c85610414610747565b85840361074f565b60019150509392505050565b60006012905090565b60006104d361043e610747565b84846001600061044c610747565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546104ce9190610f99565b61074f565b6001905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606004805461053490611077565b80601f016020809104026020016040519081016040528092919081815260200182805461056090611077565b80156105ad5780601f10610582576101008083540402835291602001916105ad565b820191906000526020600020905b81548152906001019060200180831161059057829003601f168201915b5050505050905090565b600080600160006105c6610747565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610683576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067a90610f27565b60405180910390fd5b61069761068e610747565b8585840361074f565b600191505092915050565b60006106b66106af610747565b848461091a565b6001905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156107bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b690610f07565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561082f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082690610e87565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161090d9190610f47565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561098a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098190610ee7565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156109fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f190610e67565b60405180910390fd5b610a05838383610b9b565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610a8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8290610ea7565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610b1e9190610f99565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610b829190610f47565b60405180910390a3610b95848484610ba0565b50505050565b505050565b505050565b600081359050610bb481611346565b92915050565b600081359050610bc98161135d565b92915050565b600060208284031215610be557610be4611107565b5b6000610bf384828501610ba5565b91505092915050565b60008060408385031215610c1357610c12611107565b5b6000610c2185828601610ba5565b9250506020610c3285828601610ba5565b9150509250929050565b600080600060608486031215610c5557610c54611107565b5b6000610c6386828701610ba5565b9350506020610c7486828701610ba5565b9250506040610c8586828701610bba565b9150509250925092565b60008060408385031215610ca657610ca5611107565b5b6000610cb485828601610ba5565b9250506020610cc585828601610bba565b9150509250929050565b610cd881611001565b82525050565b6000610ce982610f7d565b610cf38185610f88565b9350610d03818560208601611044565b610d0c8161110c565b840191505092915050565b6000610d24602383610f88565b9150610d2f8261111d565b604082019050919050565b6000610d47602283610f88565b9150610d528261116c565b604082019050919050565b6000610d6a602683610f88565b9150610d75826111bb565b604082019050919050565b6000610d8d602883610f88565b9150610d988261120a565b604082019050919050565b6000610db0602583610f88565b9150610dbb82611259565b604082019050919050565b6000610dd3602483610f88565b9150610dde826112a8565b604082019050919050565b6000610df6602583610f88565b9150610e01826112f7565b604082019050919050565b610e158161102d565b82525050565b610e2481611037565b82525050565b6000602082019050610e3f6000830184610ccf565b92915050565b60006020820190508181036000830152610e5f8184610cde565b905092915050565b60006020820190508181036000830152610e8081610d17565b9050919050565b60006020820190508181036000830152610ea081610d3a565b9050919050565b60006020820190508181036000830152610ec081610d5d565b9050919050565b60006020820190508181036000830152610ee081610d80565b9050919050565b60006020820190508181036000830152610f0081610da3565b9050919050565b60006020820190508181036000830152610f2081610dc6565b9050919050565b60006020820190508181036000830152610f4081610de9565b9050919050565b6000602082019050610f5c6000830184610e0c565b92915050565b6000602082019050610f776000830184610e1b565b92915050565b600081519050919050565b600082825260208201905092915050565b6000610fa48261102d565b9150610faf8361102d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610fe457610fe36110a9565b5b828201905092915050565b6000610ffa8261100d565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b83811015611062578082015181840152602081019050611047565b83811115611071576000848401525b50505050565b6000600282049050600182168061108f57607f821691505b602082108114156110a3576110a26110d8565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600080fd5b6000601f19601f8301169050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206160008201527f6c6c6f77616e6365000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b61134f81610fef565b811461135a57600080fd5b50565b6113668161102d565b811461137157600080fd5b5056fea26469706673582212203a2a4af0e5a4194854ccf6ddb8b38c7a8889d1e6dcb2c165df63f55e3ff7123164736f6c63430008060033",
}

// ERC20ABI is the input ABI used to generate the binding from.
// Deprecated: Use ERC20MetaData.ABI instead.
var ERC20ABI = ERC20MetaData.ABI

// ERC20Bin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ERC20MetaData.Bin instead.
var ERC20Bin = ERC20MetaData.Bin

// DeployERC20 deploys a new Ethereum contract, binding an instance of ERC20 to it.
func DeployERC20(auth *bind.TransactOpts, backend bind.ContractBackend, name_ string, symbol_ string) (common.Address, *types.Transaction, *ERC20, error) {
	parsed, err := ERC20MetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ERC20Bin), backend, name_, symbol_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ERC20{ERC20Caller: ERC20Caller{contract: contract}, ERC20Transactor: ERC20Transactor{contract: contract}, ERC20Filterer: ERC20Filterer{contract: contract}}, nil
}

// ERC20 is an auto generated Go binding around an Ethereum contract.
type ERC20 struct {
	ERC20Caller     // Read-only binding to the contract
	ERC20Transactor // Write-only binding to the contract
	ERC20Filterer   // Log filterer for contract events
}

// ERC20Caller is an auto generated read-only Go binding around an Ethereum contract.
type ERC20Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20Transactor is an auto generated write-only Go binding around an Ethereum contract.
type ERC20Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ERC20Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ERC20Session struct {
	Contract     *ERC20            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ERC20CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ERC20CallerSession struct {
	Contract *ERC20Caller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// ERC20TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ERC20TransactorSession struct {
	Contract     *ERC20Transactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ERC20Raw is an auto generated low-level Go binding around an Ethereum contract.
type ERC20Raw struct {
	Contract *ERC20 // Generic contract binding to access the raw methods on
}

// ERC20CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ERC20CallerRaw struct {
	Contract *ERC20Caller // Generic read-only contract binding to access the raw methods on
}

// ERC20TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ERC20TransactorRaw struct {
	Contract *ERC20Transactor // Generic write-only contract binding to access the raw methods on
}

// NewERC20 creates a new instance of ERC20, bound to a specific deployed contract.
func NewERC20(address common.Address, backend bind.ContractBackend) (*ERC20, error) {
	contract, err := bindERC20(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ERC20{ERC20Caller: ERC20Caller{contract: contract}, ERC20Transactor: ERC20Transactor{contract: contract}, ERC20Filterer: ERC20Filterer{contract: contract}}, nil
}

// NewERC20Caller creates a new read-only instance of ERC20, bound to a specific deployed contract.
func NewERC20Caller(address common.Address, caller bind.ContractCaller) (*ERC20Caller, error) {
	contract, err := bindERC20(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20Caller{contract: contract}, nil
}

// NewERC20Transactor creates a new write-only instance of ERC20, bound to a specific deployed contract.
func NewERC20Transactor(address common.Address, transactor bind.ContractTransactor) (*ERC20Transactor, error) {
	contract, err := bindERC20(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20Transactor{contract: contract}, nil
}

// NewERC20Filterer creates a new log filterer instance of ERC20, bound to a specific deployed contract.
func NewERC20Filterer(address common.Address, filterer bind.ContractFilterer) (*ERC20Filterer, error) {
	contract, err := bindERC20(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ERC20Filterer{contract: contract}, nil
}

// bindERC20 binds a generic wrapper to an already deployed contract.
func bindERC20(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ERC20ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20 *ERC20Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC20.Contract.ERC20Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20 *ERC20Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20.Contract.ERC20Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20 *ERC20Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20.Contract.ERC20Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20 *ERC20CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC20.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20 *ERC20TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20 *ERC20TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_ERC20 *ERC20Caller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ERC20.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_ERC20 *ERC20Session) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _ERC20.Contract.Allowance(&_ERC20.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_ERC20 *ERC20CallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _ERC20.Contract.Allowance(&_ERC20.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_ERC20 *ERC20Caller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ERC20.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_ERC20 *ERC20Session) BalanceOf(account common.Address) (*big.Int, error) {
	return _ERC20.Contract.BalanceOf(&_ERC20.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_ERC20 *ERC20CallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _ERC20.Contract.BalanceOf(&_ERC20.CallOpts, account)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_ERC20 *ERC20Caller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _ERC20.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_ERC20 *ERC20Session) Decimals() (uint8, error) {
	return _ERC20.Contract.Decimals(&_ERC20.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_ERC20 *ERC20CallerSession) Decimals() (uint8, error) {
	return _ERC20.Contract.Decimals(&_ERC20.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ERC20 *ERC20Caller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ERC20.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ERC20 *ERC20Session) Name() (string, error) {
	return _ERC20.Contract.Name(&_ERC20.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ERC20 *ERC20CallerSession) Name() (string, error) {
	return _ERC20.Contract.Name(&_ERC20.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ERC20 *ERC20Caller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ERC20.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ERC20 *ERC20Session) Symbol() (string, error) {
	return _ERC20.Contract.Symbol(&_ERC20.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ERC20 *ERC20CallerSession) Symbol() (string, error) {
	return _ERC20.Contract.Symbol(&_ERC20.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ERC20 *ERC20Caller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ERC20.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ERC20 *ERC20Session) TotalSupply() (*big.Int, error) {
	return _ERC20.Contract.TotalSupply(&_ERC20.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ERC20 *ERC20CallerSession) TotalSupply() (*big.Int, error) {
	return _ERC20.Contract.TotalSupply(&_ERC20.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_ERC20 *ERC20Transactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_ERC20 *ERC20Session) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.Approve(&_ERC20.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_ERC20 *ERC20TransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.Approve(&_ERC20.TransactOpts, spender, amount)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_ERC20 *ERC20Transactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _ERC20.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_ERC20 *ERC20Session) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.DecreaseAllowance(&_ERC20.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_ERC20 *ERC20TransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.DecreaseAllowance(&_ERC20.TransactOpts, spender, subtractedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_ERC20 *ERC20Transactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _ERC20.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_ERC20 *ERC20Session) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.IncreaseAllowance(&_ERC20.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_ERC20 *ERC20TransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.IncreaseAllowance(&_ERC20.TransactOpts, spender, addedValue)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_ERC20 *ERC20Transactor) Transfer(opts *bind.TransactOpts, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20.contract.Transact(opts, "transfer", recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_ERC20 *ERC20Session) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.Transfer(&_ERC20.TransactOpts, recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_ERC20 *ERC20TransactorSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.Transfer(&_ERC20.TransactOpts, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_ERC20 *ERC20Transactor) TransferFrom(opts *bind.TransactOpts, sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20.contract.Transact(opts, "transferFrom", sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_ERC20 *ERC20Session) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.TransferFrom(&_ERC20.TransactOpts, sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_ERC20 *ERC20TransactorSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.TransferFrom(&_ERC20.TransactOpts, sender, recipient, amount)
}

// ERC20ApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the ERC20 contract.
type ERC20ApprovalIterator struct {
	Event *ERC20Approval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20ApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20Approval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20Approval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20ApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20ApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20Approval represents a Approval event raised by the ERC20 contract.
type ERC20Approval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_ERC20 *ERC20Filterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*ERC20ApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _ERC20.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &ERC20ApprovalIterator{contract: _ERC20.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_ERC20 *ERC20Filterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *ERC20Approval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _ERC20.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20Approval)
				if err := _ERC20.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_ERC20 *ERC20Filterer) ParseApproval(log types.Log) (*ERC20Approval, error) {
	event := new(ERC20Approval)
	if err := _ERC20.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20TransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the ERC20 contract.
type ERC20TransferIterator struct {
	Event *ERC20Transfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20TransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20Transfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20Transfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20TransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20TransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20Transfer represents a Transfer event raised by the ERC20 contract.
type ERC20Transfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ERC20 *ERC20Filterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*ERC20TransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ERC20.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ERC20TransferIterator{contract: _ERC20.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ERC20 *ERC20Filterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *ERC20Transfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ERC20.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20Transfer)
				if err := _ERC20.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ERC20 *ERC20Filterer) ParseTransfer(log types.Log) (*ERC20Transfer, error) {
	event := new(ERC20Transfer)
	if err := _ERC20.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20SafeTransferMetaData contains all meta data concerning the ERC20SafeTransfer contract.
var ERC20SafeTransferMetaData = &bind.MetaData{
	ABI: "[]",
}

// ERC20SafeTransferABI is the input ABI used to generate the binding from.
// Deprecated: Use ERC20SafeTransferMetaData.ABI instead.
var ERC20SafeTransferABI = ERC20SafeTransferMetaData.ABI

// ERC20SafeTransfer is an auto generated Go binding around an Ethereum contract.
type ERC20SafeTransfer struct {
	ERC20SafeTransferCaller     // Read-only binding to the contract
	ERC20SafeTransferTransactor // Write-only binding to the contract
	ERC20SafeTransferFilterer   // Log filterer for contract events
}

// ERC20SafeTransferCaller is an auto generated read-only Go binding around an Ethereum contract.
type ERC20SafeTransferCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20SafeTransferTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ERC20SafeTransferTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20SafeTransferFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ERC20SafeTransferFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20SafeTransferSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ERC20SafeTransferSession struct {
	Contract     *ERC20SafeTransfer // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// ERC20SafeTransferCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ERC20SafeTransferCallerSession struct {
	Contract *ERC20SafeTransferCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// ERC20SafeTransferTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ERC20SafeTransferTransactorSession struct {
	Contract     *ERC20SafeTransferTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// ERC20SafeTransferRaw is an auto generated low-level Go binding around an Ethereum contract.
type ERC20SafeTransferRaw struct {
	Contract *ERC20SafeTransfer // Generic contract binding to access the raw methods on
}

// ERC20SafeTransferCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ERC20SafeTransferCallerRaw struct {
	Contract *ERC20SafeTransferCaller // Generic read-only contract binding to access the raw methods on
}

// ERC20SafeTransferTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ERC20SafeTransferTransactorRaw struct {
	Contract *ERC20SafeTransferTransactor // Generic write-only contract binding to access the raw methods on
}

// NewERC20SafeTransfer creates a new instance of ERC20SafeTransfer, bound to a specific deployed contract.
func NewERC20SafeTransfer(address common.Address, backend bind.ContractBackend) (*ERC20SafeTransfer, error) {
	contract, err := bindERC20SafeTransfer(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ERC20SafeTransfer{ERC20SafeTransferCaller: ERC20SafeTransferCaller{contract: contract}, ERC20SafeTransferTransactor: ERC20SafeTransferTransactor{contract: contract}, ERC20SafeTransferFilterer: ERC20SafeTransferFilterer{contract: contract}}, nil
}

// NewERC20SafeTransferCaller creates a new read-only instance of ERC20SafeTransfer, bound to a specific deployed contract.
func NewERC20SafeTransferCaller(address common.Address, caller bind.ContractCaller) (*ERC20SafeTransferCaller, error) {
	contract, err := bindERC20SafeTransfer(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20SafeTransferCaller{contract: contract}, nil
}

// NewERC20SafeTransferTransactor creates a new write-only instance of ERC20SafeTransfer, bound to a specific deployed contract.
func NewERC20SafeTransferTransactor(address common.Address, transactor bind.ContractTransactor) (*ERC20SafeTransferTransactor, error) {
	contract, err := bindERC20SafeTransfer(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20SafeTransferTransactor{contract: contract}, nil
}

// NewERC20SafeTransferFilterer creates a new log filterer instance of ERC20SafeTransfer, bound to a specific deployed contract.
func NewERC20SafeTransferFilterer(address common.Address, filterer bind.ContractFilterer) (*ERC20SafeTransferFilterer, error) {
	contract, err := bindERC20SafeTransfer(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ERC20SafeTransferFilterer{contract: contract}, nil
}

// bindERC20SafeTransfer binds a generic wrapper to an already deployed contract.
func bindERC20SafeTransfer(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ERC20SafeTransferABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20SafeTransfer *ERC20SafeTransferRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC20SafeTransfer.Contract.ERC20SafeTransferCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20SafeTransfer *ERC20SafeTransferRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20SafeTransfer.Contract.ERC20SafeTransferTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20SafeTransfer *ERC20SafeTransferRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20SafeTransfer.Contract.ERC20SafeTransferTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20SafeTransfer *ERC20SafeTransferCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC20SafeTransfer.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20SafeTransfer *ERC20SafeTransferTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20SafeTransfer.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20SafeTransfer *ERC20SafeTransferTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20SafeTransfer.Contract.contract.Transact(opts, method, params...)
}

// ERC721MetaData contains all meta data concerning the ERC721 contract.
var ERC721MetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b50604051620027843803806200278483398181016040528101906200003791906200019f565b81600090805190602001906200004f92919062000071565b5080600190805190602001906200006892919062000071565b505050620003a8565b8280546200007f90620002b9565b90600052602060002090601f016020900481019282620000a35760008555620000ef565b82601f10620000be57805160ff1916838001178555620000ef565b82800160010185558215620000ef579182015b82811115620000ee578251825591602001919060010190620000d1565b5b509050620000fe919062000102565b5090565b5b808211156200011d57600081600090555060010162000103565b5090565b60006200013862000132846200024d565b62000224565b90508281526020810184848401111562000157576200015662000388565b5b6200016484828562000283565b509392505050565b600082601f83011262000184576200018362000383565b5b81516200019684826020860162000121565b91505092915050565b60008060408385031215620001b957620001b862000392565b5b600083015167ffffffffffffffff811115620001da57620001d96200038d565b5b620001e8858286016200016c565b925050602083015167ffffffffffffffff8111156200020c576200020b6200038d565b5b6200021a858286016200016c565b9150509250929050565b60006200023062000243565b90506200023e8282620002ef565b919050565b6000604051905090565b600067ffffffffffffffff8211156200026b576200026a62000354565b5b620002768262000397565b9050602081019050919050565b60005b83811015620002a357808201518184015260208101905062000286565b83811115620002b3576000848401525b50505050565b60006002820490506001821680620002d257607f821691505b60208210811415620002e957620002e862000325565b5b50919050565b620002fa8262000397565b810181811067ffffffffffffffff821117156200031c576200031b62000354565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b6123cc80620003b86000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80636352211e1161008c578063a22cb46511610066578063a22cb46514610224578063b88d4fde14610240578063c87b56dd1461025c578063e985e9c51461028c576100cf565b80636352211e146101a657806370a08231146101d657806395d89b4114610206576100cf565b806301ffc9a7146100d457806306fdde0314610104578063081812fc14610122578063095ea7b31461015257806323b872dd1461016e57806342842e0e1461018a575b600080fd5b6100ee60048036038101906100e99190611657565b6102bc565b6040516100fb91906119dd565b60405180910390f35b61010c61039e565b60405161011991906119f8565b60405180910390f35b61013c600480360381019061013791906116b1565b610430565b6040516101499190611976565b60405180910390f35b61016c60048036038101906101679190611617565b6104b5565b005b61018860048036038101906101839190611501565b6105cd565b005b6101a4600480360381019061019f9190611501565b61062d565b005b6101c060048036038101906101bb91906116b1565b61064d565b6040516101cd9190611976565b60405180910390f35b6101f060048036038101906101eb9190611494565b6106ff565b6040516101fd9190611b9a565b60405180910390f35b61020e6107b7565b60405161021b91906119f8565b60405180910390f35b61023e600480360381019061023991906115d7565b610849565b005b61025a60048036038101906102559190611554565b6109ca565b005b610276600480360381019061027191906116b1565b610a2c565b60405161028391906119f8565b60405180910390f35b6102a660048036038101906102a191906114c1565b610ad3565b6040516102b391906119dd565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061038757507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610397575061039682610b67565b5b9050919050565b6060600080546103ad90611dbf565b80601f01602080910402602001604051908101604052809291908181526020018280546103d990611dbf565b80156104265780601f106103fb57610100808354040283529160200191610426565b820191906000526020600020905b81548152906001019060200180831161040957829003601f168201915b5050505050905090565b600061043b82610bd1565b61047a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047190611afa565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006104c08261064d565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610531576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052890611b5a565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610550610c3d565b73ffffffffffffffffffffffffffffffffffffffff16148061057f575061057e81610579610c3d565b610ad3565b5b6105be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b590611a9a565b60405180910390fd5b6105c88383610c45565b505050565b6105de6105d8610c3d565b82610cfe565b61061d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061490611b7a565b60405180910390fd5b610628838383610ddc565b505050565b610648838383604051806020016040528060008152506109ca565b505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156106f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ed90611ada565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610770576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076790611aba565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600180546107c690611dbf565b80601f01602080910402602001604051908101604052809291908181526020018280546107f290611dbf565b801561083f5780601f106108145761010080835404028352916020019161083f565b820191906000526020600020905b81548152906001019060200180831161082257829003601f168201915b5050505050905090565b610851610c3d565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156108bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b690611a5a565b60405180910390fd5b80600560006108cc610c3d565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff16610979610c3d565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516109be91906119dd565b60405180910390a35050565b6109db6109d5610c3d565b83610cfe565b610a1a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1190611b7a565b60405180910390fd5b610a2684848484611038565b50505050565b6060610a3782610bd1565b610a76576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6d90611b3a565b60405180910390fd5b6000610a80611094565b90506000815111610aa05760405180602001604052806000815250610acb565b80610aaa846110ab565b604051602001610abb929190611952565b6040516020818303038152906040525b915050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610cb88361064d565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000610d0982610bd1565b610d48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3f90611a7a565b60405180910390fd5b6000610d538361064d565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610dc257508373ffffffffffffffffffffffffffffffffffffffff16610daa84610430565b73ffffffffffffffffffffffffffffffffffffffff16145b80610dd35750610dd28185610ad3565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610dfc8261064d565b73ffffffffffffffffffffffffffffffffffffffff1614610e52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4990611b1a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610ec2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eb990611a3a565b60405180910390fd5b610ecd83838361120c565b610ed8600082610c45565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610f289190611cd5565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610f7f9190611c4e565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b611043848484610ddc565b61104f84848484611211565b61108e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108590611a1a565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b606060008214156110f3576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611207565b600082905060005b6000821461112557808061110e90611e22565b915050600a8261111e9190611ca4565b91506110fb565b60008167ffffffffffffffff81111561114157611140611f58565b5b6040519080825280601f01601f1916602001820160405280156111735781602001600182028036833780820191505090505b5090505b600085146112005760018261118c9190611cd5565b9150600a8561119b9190611e6b565b60306111a79190611c4e565b60f81b8183815181106111bd576111bc611f29565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856111f99190611ca4565b9450611177565b8093505050505b919050565b505050565b60006112328473ffffffffffffffffffffffffffffffffffffffff166113a8565b1561139b578373ffffffffffffffffffffffffffffffffffffffff1663150b7a0261125b610c3d565b8786866040518563ffffffff1660e01b815260040161127d9493929190611991565b602060405180830381600087803b15801561129757600080fd5b505af19250505080156112c857506040513d601f19601f820116820180604052508101906112c59190611684565b60015b61134b573d80600081146112f8576040519150601f19603f3d011682016040523d82523d6000602084013e6112fd565b606091505b50600081511415611343576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161133a90611a1a565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506113a0565b600190505b949350505050565b600080823b905060008111915050919050565b60006113ce6113c984611bda565b611bb5565b9050828152602081018484840111156113ea576113e9611f8c565b5b6113f5848285611d7d565b509392505050565b60008135905061140c8161233a565b92915050565b60008135905061142181612351565b92915050565b60008135905061143681612368565b92915050565b60008151905061144b81612368565b92915050565b600082601f83011261146657611465611f87565b5b81356114768482602086016113bb565b91505092915050565b60008135905061148e8161237f565b92915050565b6000602082840312156114aa576114a9611f96565b5b60006114b8848285016113fd565b91505092915050565b600080604083850312156114d8576114d7611f96565b5b60006114e6858286016113fd565b92505060206114f7858286016113fd565b9150509250929050565b60008060006060848603121561151a57611519611f96565b5b6000611528868287016113fd565b9350506020611539868287016113fd565b925050604061154a8682870161147f565b9150509250925092565b6000806000806080858703121561156e5761156d611f96565b5b600061157c878288016113fd565b945050602061158d878288016113fd565b935050604061159e8782880161147f565b925050606085013567ffffffffffffffff8111156115bf576115be611f91565b5b6115cb87828801611451565b91505092959194509250565b600080604083850312156115ee576115ed611f96565b5b60006115fc858286016113fd565b925050602061160d85828601611412565b9150509250929050565b6000806040838503121561162e5761162d611f96565b5b600061163c858286016113fd565b925050602061164d8582860161147f565b9150509250929050565b60006020828403121561166d5761166c611f96565b5b600061167b84828501611427565b91505092915050565b60006020828403121561169a57611699611f96565b5b60006116a88482850161143c565b91505092915050565b6000602082840312156116c7576116c6611f96565b5b60006116d58482850161147f565b91505092915050565b6116e781611d09565b82525050565b6116f681611d1b565b82525050565b600061170782611c0b565b6117118185611c21565b9350611721818560208601611d8c565b61172a81611f9b565b840191505092915050565b600061174082611c16565b61174a8185611c32565b935061175a818560208601611d8c565b61176381611f9b565b840191505092915050565b600061177982611c16565b6117838185611c43565b9350611793818560208601611d8c565b80840191505092915050565b60006117ac603283611c32565b91506117b782611fac565b604082019050919050565b60006117cf602483611c32565b91506117da82611ffb565b604082019050919050565b60006117f2601983611c32565b91506117fd8261204a565b602082019050919050565b6000611815602c83611c32565b915061182082612073565b604082019050919050565b6000611838603883611c32565b9150611843826120c2565b604082019050919050565b600061185b602a83611c32565b915061186682612111565b604082019050919050565b600061187e602983611c32565b915061188982612160565b604082019050919050565b60006118a1602c83611c32565b91506118ac826121af565b604082019050919050565b60006118c4602983611c32565b91506118cf826121fe565b604082019050919050565b60006118e7602f83611c32565b91506118f28261224d565b604082019050919050565b600061190a602183611c32565b91506119158261229c565b604082019050919050565b600061192d603183611c32565b9150611938826122eb565b604082019050919050565b61194c81611d73565b82525050565b600061195e828561176e565b915061196a828461176e565b91508190509392505050565b600060208201905061198b60008301846116de565b92915050565b60006080820190506119a660008301876116de565b6119b360208301866116de565b6119c06040830185611943565b81810360608301526119d281846116fc565b905095945050505050565b60006020820190506119f260008301846116ed565b92915050565b60006020820190508181036000830152611a128184611735565b905092915050565b60006020820190508181036000830152611a338161179f565b9050919050565b60006020820190508181036000830152611a53816117c2565b9050919050565b60006020820190508181036000830152611a73816117e5565b9050919050565b60006020820190508181036000830152611a9381611808565b9050919050565b60006020820190508181036000830152611ab38161182b565b9050919050565b60006020820190508181036000830152611ad38161184e565b9050919050565b60006020820190508181036000830152611af381611871565b9050919050565b60006020820190508181036000830152611b1381611894565b9050919050565b60006020820190508181036000830152611b33816118b7565b9050919050565b60006020820190508181036000830152611b53816118da565b9050919050565b60006020820190508181036000830152611b73816118fd565b9050919050565b60006020820190508181036000830152611b9381611920565b9050919050565b6000602082019050611baf6000830184611943565b92915050565b6000611bbf611bd0565b9050611bcb8282611df1565b919050565b6000604051905090565b600067ffffffffffffffff821115611bf557611bf4611f58565b5b611bfe82611f9b565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000611c5982611d73565b9150611c6483611d73565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611c9957611c98611e9c565b5b828201905092915050565b6000611caf82611d73565b9150611cba83611d73565b925082611cca57611cc9611ecb565b5b828204905092915050565b6000611ce082611d73565b9150611ceb83611d73565b925082821015611cfe57611cfd611e9c565b5b828203905092915050565b6000611d1482611d53565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015611daa578082015181840152602081019050611d8f565b83811115611db9576000848401525b50505050565b60006002820490506001821680611dd757607f821691505b60208210811415611deb57611dea611efa565b5b50919050565b611dfa82611f9b565b810181811067ffffffffffffffff82111715611e1957611e18611f58565b5b80604052505050565b6000611e2d82611d73565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611e6057611e5f611e9c565b5b600182019050919050565b6000611e7682611d73565b9150611e8183611d73565b925082611e9157611e90611ecb565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008201527f73206e6f74206f776e0000000000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b61234381611d09565b811461234e57600080fd5b50565b61235a81611d1b565b811461236557600080fd5b50565b61237181611d27565b811461237c57600080fd5b50565b61238881611d73565b811461239357600080fd5b5056fea264697066735822122095b828e2963cd6d0216e836492e43cde860e6c88fe5acfba1b642156750a386464736f6c63430008060033",
}

// ERC721ABI is the input ABI used to generate the binding from.
// Deprecated: Use ERC721MetaData.ABI instead.
var ERC721ABI = ERC721MetaData.ABI

// ERC721Bin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ERC721MetaData.Bin instead.
var ERC721Bin = ERC721MetaData.Bin

// DeployERC721 deploys a new Ethereum contract, binding an instance of ERC721 to it.
func DeployERC721(auth *bind.TransactOpts, backend bind.ContractBackend, name_ string, symbol_ string) (common.Address, *types.Transaction, *ERC721, error) {
	parsed, err := ERC721MetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ERC721Bin), backend, name_, symbol_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ERC721{ERC721Caller: ERC721Caller{contract: contract}, ERC721Transactor: ERC721Transactor{contract: contract}, ERC721Filterer: ERC721Filterer{contract: contract}}, nil
}

// ERC721 is an auto generated Go binding around an Ethereum contract.
type ERC721 struct {
	ERC721Caller     // Read-only binding to the contract
	ERC721Transactor // Write-only binding to the contract
	ERC721Filterer   // Log filterer for contract events
}

// ERC721Caller is an auto generated read-only Go binding around an Ethereum contract.
type ERC721Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC721Transactor is an auto generated write-only Go binding around an Ethereum contract.
type ERC721Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC721Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ERC721Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC721Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ERC721Session struct {
	Contract     *ERC721           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ERC721CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ERC721CallerSession struct {
	Contract *ERC721Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// ERC721TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ERC721TransactorSession struct {
	Contract     *ERC721Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ERC721Raw is an auto generated low-level Go binding around an Ethereum contract.
type ERC721Raw struct {
	Contract *ERC721 // Generic contract binding to access the raw methods on
}

// ERC721CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ERC721CallerRaw struct {
	Contract *ERC721Caller // Generic read-only contract binding to access the raw methods on
}

// ERC721TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ERC721TransactorRaw struct {
	Contract *ERC721Transactor // Generic write-only contract binding to access the raw methods on
}

// NewERC721 creates a new instance of ERC721, bound to a specific deployed contract.
func NewERC721(address common.Address, backend bind.ContractBackend) (*ERC721, error) {
	contract, err := bindERC721(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ERC721{ERC721Caller: ERC721Caller{contract: contract}, ERC721Transactor: ERC721Transactor{contract: contract}, ERC721Filterer: ERC721Filterer{contract: contract}}, nil
}

// NewERC721Caller creates a new read-only instance of ERC721, bound to a specific deployed contract.
func NewERC721Caller(address common.Address, caller bind.ContractCaller) (*ERC721Caller, error) {
	contract, err := bindERC721(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ERC721Caller{contract: contract}, nil
}

// NewERC721Transactor creates a new write-only instance of ERC721, bound to a specific deployed contract.
func NewERC721Transactor(address common.Address, transactor bind.ContractTransactor) (*ERC721Transactor, error) {
	contract, err := bindERC721(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ERC721Transactor{contract: contract}, nil
}

// NewERC721Filterer creates a new log filterer instance of ERC721, bound to a specific deployed contract.
func NewERC721Filterer(address common.Address, filterer bind.ContractFilterer) (*ERC721Filterer, error) {
	contract, err := bindERC721(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ERC721Filterer{contract: contract}, nil
}

// bindERC721 binds a generic wrapper to an already deployed contract.
func bindERC721(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ERC721ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC721 *ERC721Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC721.Contract.ERC721Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC721 *ERC721Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC721.Contract.ERC721Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC721 *ERC721Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC721.Contract.ERC721Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC721 *ERC721CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC721.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC721 *ERC721TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC721.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC721 *ERC721TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC721.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_ERC721 *ERC721Caller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ERC721.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_ERC721 *ERC721Session) BalanceOf(owner common.Address) (*big.Int, error) {
	return _ERC721.Contract.BalanceOf(&_ERC721.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_ERC721 *ERC721CallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _ERC721.Contract.BalanceOf(&_ERC721.CallOpts, owner)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_ERC721 *ERC721Caller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ERC721.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_ERC721 *ERC721Session) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _ERC721.Contract.GetApproved(&_ERC721.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_ERC721 *ERC721CallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _ERC721.Contract.GetApproved(&_ERC721.CallOpts, tokenId)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_ERC721 *ERC721Caller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _ERC721.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_ERC721 *ERC721Session) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _ERC721.Contract.IsApprovedForAll(&_ERC721.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_ERC721 *ERC721CallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _ERC721.Contract.IsApprovedForAll(&_ERC721.CallOpts, owner, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ERC721 *ERC721Caller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ERC721.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ERC721 *ERC721Session) Name() (string, error) {
	return _ERC721.Contract.Name(&_ERC721.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ERC721 *ERC721CallerSession) Name() (string, error) {
	return _ERC721.Contract.Name(&_ERC721.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_ERC721 *ERC721Caller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ERC721.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_ERC721 *ERC721Session) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _ERC721.Contract.OwnerOf(&_ERC721.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_ERC721 *ERC721CallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _ERC721.Contract.OwnerOf(&_ERC721.CallOpts, tokenId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ERC721 *ERC721Caller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _ERC721.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ERC721 *ERC721Session) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _ERC721.Contract.SupportsInterface(&_ERC721.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ERC721 *ERC721CallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _ERC721.Contract.SupportsInterface(&_ERC721.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ERC721 *ERC721Caller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ERC721.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ERC721 *ERC721Session) Symbol() (string, error) {
	return _ERC721.Contract.Symbol(&_ERC721.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ERC721 *ERC721CallerSession) Symbol() (string, error) {
	return _ERC721.Contract.Symbol(&_ERC721.CallOpts)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_ERC721 *ERC721Caller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _ERC721.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_ERC721 *ERC721Session) TokenURI(tokenId *big.Int) (string, error) {
	return _ERC721.Contract.TokenURI(&_ERC721.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_ERC721 *ERC721CallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _ERC721.Contract.TokenURI(&_ERC721.CallOpts, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_ERC721 *ERC721Transactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ERC721.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_ERC721 *ERC721Session) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ERC721.Contract.Approve(&_ERC721.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_ERC721 *ERC721TransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ERC721.Contract.Approve(&_ERC721.TransactOpts, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_ERC721 *ERC721Transactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ERC721.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_ERC721 *ERC721Session) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ERC721.Contract.SafeTransferFrom(&_ERC721.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_ERC721 *ERC721TransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ERC721.Contract.SafeTransferFrom(&_ERC721.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_ERC721 *ERC721Transactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _ERC721.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_ERC721 *ERC721Session) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _ERC721.Contract.SafeTransferFrom0(&_ERC721.TransactOpts, from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_ERC721 *ERC721TransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _ERC721.Contract.SafeTransferFrom0(&_ERC721.TransactOpts, from, to, tokenId, _data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_ERC721 *ERC721Transactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _ERC721.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_ERC721 *ERC721Session) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _ERC721.Contract.SetApprovalForAll(&_ERC721.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_ERC721 *ERC721TransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _ERC721.Contract.SetApprovalForAll(&_ERC721.TransactOpts, operator, approved)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_ERC721 *ERC721Transactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ERC721.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_ERC721 *ERC721Session) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ERC721.Contract.TransferFrom(&_ERC721.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_ERC721 *ERC721TransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ERC721.Contract.TransferFrom(&_ERC721.TransactOpts, from, to, tokenId)
}

// ERC721ApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the ERC721 contract.
type ERC721ApprovalIterator struct {
	Event *ERC721Approval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC721ApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC721Approval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC721Approval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC721ApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC721ApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC721Approval represents a Approval event raised by the ERC721 contract.
type ERC721Approval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_ERC721 *ERC721Filterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*ERC721ApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ERC721.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &ERC721ApprovalIterator{contract: _ERC721.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_ERC721 *ERC721Filterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *ERC721Approval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ERC721.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC721Approval)
				if err := _ERC721.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_ERC721 *ERC721Filterer) ParseApproval(log types.Log) (*ERC721Approval, error) {
	event := new(ERC721Approval)
	if err := _ERC721.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC721ApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the ERC721 contract.
type ERC721ApprovalForAllIterator struct {
	Event *ERC721ApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC721ApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC721ApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC721ApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC721ApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC721ApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC721ApprovalForAll represents a ApprovalForAll event raised by the ERC721 contract.
type ERC721ApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_ERC721 *ERC721Filterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*ERC721ApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _ERC721.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &ERC721ApprovalForAllIterator{contract: _ERC721.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_ERC721 *ERC721Filterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *ERC721ApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _ERC721.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC721ApprovalForAll)
				if err := _ERC721.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_ERC721 *ERC721Filterer) ParseApprovalForAll(log types.Log) (*ERC721ApprovalForAll, error) {
	event := new(ERC721ApprovalForAll)
	if err := _ERC721.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC721TransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the ERC721 contract.
type ERC721TransferIterator struct {
	Event *ERC721Transfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC721TransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC721Transfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC721Transfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC721TransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC721TransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC721Transfer represents a Transfer event raised by the ERC721 contract.
type ERC721Transfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_ERC721 *ERC721Filterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*ERC721TransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ERC721.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &ERC721TransferIterator{contract: _ERC721.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_ERC721 *ERC721Filterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *ERC721Transfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ERC721.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC721Transfer)
				if err := _ERC721.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_ERC721 *ERC721Filterer) ParseTransfer(log types.Log) (*ERC721Transfer, error) {
	event := new(ERC721Transfer)
	if err := _ERC721.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGMetaData contains all meta data concerning the ETHDKG contract.
var ETHDKGMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"key_share_G1\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"key_share_G1_correctness_proof\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[4]\",\"name\":\"key_share_G2\",\"type\":\"uint256[4]\"}],\"name\":\"KeyShareSubmission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dkgStarts\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"registrationEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shareDistributionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"disputeEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"keyShareSubmissionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mpkSubmissionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gpkjSubmissionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gpkjDisputeEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dkgComplete\",\"type\":\"uint256\"}],\"name\":\"RegistrationOpen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"encrypted_shares\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[2][]\",\"name\":\"commitments\",\"type\":\"uint256[2][]\"}],\"name\":\"ShareDistribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share3\",\"type\":\"uint256\"}],\"name\":\"ValidatorMember\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"validatorCount\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"ethHeight\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"madHeight\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey3\",\"type\":\"uint256\"}],\"name\":\"ValidatorSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"invArray\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"honestIndices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"dishonestIndices\",\"type\":\"uint256[]\"}],\"name\":\"Group_Accusation_GPKj\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[][]\",\"name\":\"encrypted_shares\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256[2][][]\",\"name\":\"commitments\",\"type\":\"uint256[2][][]\"},{\"internalType\":\"uint256\",\"name\":\"dishonest_list_idx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dishonestAddress\",\"type\":\"address\"}],\"name\":\"Group_Accusation_GPKj_Comp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"gpkj\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256[2]\",\"name\":\"sig\",\"type\":\"uint256[2]\"}],\"name\":\"Submit_GPKj\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Successful_Completion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"T_DISPUTE_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"T_DKG_COMPLETE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"T_GPKJDISPUTE_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"T_GPKJ_SUBMISSION_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"T_KEY_SHARE_SUBMISSION_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"T_MPK_SUBMISSION_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"T_REGISTRATION_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"T_SHARE_DISTRIBUTION_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"addresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"commitments_1st_coefficient\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"encrypted_shares\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[2][]\",\"name\":\"commitments\",\"type\":\"uint256[2][]\"}],\"name\":\"distribute_shares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPhaseLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gpkj_submissions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialMessage\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"initialSignatures\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractRegistry\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"initializeEthDKG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isMalicious\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"keyShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"master_public_key\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfRegistrations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"publicKeys\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"public_key\",\"type\":\"uint256[2]\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"shareDistributionHashes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"issuer_list_idx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"disputer_list_idx\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"encrypted_shares\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[2][]\",\"name\":\"commitments\",\"type\":\"uint256[2][]\"},{\"internalType\":\"uint256[2]\",\"name\":\"shared_key\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"shared_key_correctness_proof\",\"type\":\"uint256[2]\"}],\"name\":\"submit_dispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256[2]\",\"name\":\"key_share_G1\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"key_share_G1_correctness_proof\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[4]\",\"name\":\"key_share_G2\",\"type\":\"uint256[4]\"}],\"name\":\"submit_key_share\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"_master_public_key\",\"type\":\"uint256[4]\"}],\"name\":\"submit_master_public_key\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"updatePhaseLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"validatorIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// ETHDKGABI is the input ABI used to generate the binding from.
// Deprecated: Use ETHDKGMetaData.ABI instead.
var ETHDKGABI = ETHDKGMetaData.ABI

// ETHDKG is an auto generated Go binding around an Ethereum contract.
type ETHDKG struct {
	ETHDKGCaller     // Read-only binding to the contract
	ETHDKGTransactor // Write-only binding to the contract
	ETHDKGFilterer   // Log filterer for contract events
}

// ETHDKGCaller is an auto generated read-only Go binding around an Ethereum contract.
type ETHDKGCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETHDKGTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ETHDKGTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETHDKGFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ETHDKGFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETHDKGSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ETHDKGSession struct {
	Contract     *ETHDKG           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ETHDKGCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ETHDKGCallerSession struct {
	Contract *ETHDKGCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// ETHDKGTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ETHDKGTransactorSession struct {
	Contract     *ETHDKGTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ETHDKGRaw is an auto generated low-level Go binding around an Ethereum contract.
type ETHDKGRaw struct {
	Contract *ETHDKG // Generic contract binding to access the raw methods on
}

// ETHDKGCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ETHDKGCallerRaw struct {
	Contract *ETHDKGCaller // Generic read-only contract binding to access the raw methods on
}

// ETHDKGTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ETHDKGTransactorRaw struct {
	Contract *ETHDKGTransactor // Generic write-only contract binding to access the raw methods on
}

// NewETHDKG creates a new instance of ETHDKG, bound to a specific deployed contract.
func NewETHDKG(address common.Address, backend bind.ContractBackend) (*ETHDKG, error) {
	contract, err := bindETHDKG(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ETHDKG{ETHDKGCaller: ETHDKGCaller{contract: contract}, ETHDKGTransactor: ETHDKGTransactor{contract: contract}, ETHDKGFilterer: ETHDKGFilterer{contract: contract}}, nil
}

// NewETHDKGCaller creates a new read-only instance of ETHDKG, bound to a specific deployed contract.
func NewETHDKGCaller(address common.Address, caller bind.ContractCaller) (*ETHDKGCaller, error) {
	contract, err := bindETHDKG(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ETHDKGCaller{contract: contract}, nil
}

// NewETHDKGTransactor creates a new write-only instance of ETHDKG, bound to a specific deployed contract.
func NewETHDKGTransactor(address common.Address, transactor bind.ContractTransactor) (*ETHDKGTransactor, error) {
	contract, err := bindETHDKG(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ETHDKGTransactor{contract: contract}, nil
}

// NewETHDKGFilterer creates a new log filterer instance of ETHDKG, bound to a specific deployed contract.
func NewETHDKGFilterer(address common.Address, filterer bind.ContractFilterer) (*ETHDKGFilterer, error) {
	contract, err := bindETHDKG(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ETHDKGFilterer{contract: contract}, nil
}

// bindETHDKG binds a generic wrapper to an already deployed contract.
func bindETHDKG(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ETHDKGABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ETHDKG *ETHDKGRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ETHDKG.Contract.ETHDKGCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ETHDKG *ETHDKGRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETHDKG.Contract.ETHDKGTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ETHDKG *ETHDKGRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ETHDKG.Contract.ETHDKGTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ETHDKG *ETHDKGCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ETHDKG.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ETHDKG *ETHDKGTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETHDKG.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ETHDKG *ETHDKGTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ETHDKG.Contract.contract.Transact(opts, method, params...)
}

// TDISPUTEEND is a free data retrieval call binding the contract method 0xd3cf6186.
//
// Solidity: function T_DISPUTE_END() view returns(uint256)
func (_ETHDKG *ETHDKGCaller) TDISPUTEEND(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "T_DISPUTE_END")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TDISPUTEEND is a free data retrieval call binding the contract method 0xd3cf6186.
//
// Solidity: function T_DISPUTE_END() view returns(uint256)
func (_ETHDKG *ETHDKGSession) TDISPUTEEND() (*big.Int, error) {
	return _ETHDKG.Contract.TDISPUTEEND(&_ETHDKG.CallOpts)
}

// TDISPUTEEND is a free data retrieval call binding the contract method 0xd3cf6186.
//
// Solidity: function T_DISPUTE_END() view returns(uint256)
func (_ETHDKG *ETHDKGCallerSession) TDISPUTEEND() (*big.Int, error) {
	return _ETHDKG.Contract.TDISPUTEEND(&_ETHDKG.CallOpts)
}

// TDKGCOMPLETE is a free data retrieval call binding the contract method 0x77fbebd1.
//
// Solidity: function T_DKG_COMPLETE() view returns(uint256)
func (_ETHDKG *ETHDKGCaller) TDKGCOMPLETE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "T_DKG_COMPLETE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TDKGCOMPLETE is a free data retrieval call binding the contract method 0x77fbebd1.
//
// Solidity: function T_DKG_COMPLETE() view returns(uint256)
func (_ETHDKG *ETHDKGSession) TDKGCOMPLETE() (*big.Int, error) {
	return _ETHDKG.Contract.TDKGCOMPLETE(&_ETHDKG.CallOpts)
}

// TDKGCOMPLETE is a free data retrieval call binding the contract method 0x77fbebd1.
//
// Solidity: function T_DKG_COMPLETE() view returns(uint256)
func (_ETHDKG *ETHDKGCallerSession) TDKGCOMPLETE() (*big.Int, error) {
	return _ETHDKG.Contract.TDKGCOMPLETE(&_ETHDKG.CallOpts)
}

// TGPKJDISPUTEEND is a free data retrieval call binding the contract method 0xcc78d245.
//
// Solidity: function T_GPKJDISPUTE_END() view returns(uint256)
func (_ETHDKG *ETHDKGCaller) TGPKJDISPUTEEND(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "T_GPKJDISPUTE_END")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TGPKJDISPUTEEND is a free data retrieval call binding the contract method 0xcc78d245.
//
// Solidity: function T_GPKJDISPUTE_END() view returns(uint256)
func (_ETHDKG *ETHDKGSession) TGPKJDISPUTEEND() (*big.Int, error) {
	return _ETHDKG.Contract.TGPKJDISPUTEEND(&_ETHDKG.CallOpts)
}

// TGPKJDISPUTEEND is a free data retrieval call binding the contract method 0xcc78d245.
//
// Solidity: function T_GPKJDISPUTE_END() view returns(uint256)
func (_ETHDKG *ETHDKGCallerSession) TGPKJDISPUTEEND() (*big.Int, error) {
	return _ETHDKG.Contract.TGPKJDISPUTEEND(&_ETHDKG.CallOpts)
}

// TGPKJSUBMISSIONEND is a free data retrieval call binding the contract method 0x9c2aa838.
//
// Solidity: function T_GPKJ_SUBMISSION_END() view returns(uint256)
func (_ETHDKG *ETHDKGCaller) TGPKJSUBMISSIONEND(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "T_GPKJ_SUBMISSION_END")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TGPKJSUBMISSIONEND is a free data retrieval call binding the contract method 0x9c2aa838.
//
// Solidity: function T_GPKJ_SUBMISSION_END() view returns(uint256)
func (_ETHDKG *ETHDKGSession) TGPKJSUBMISSIONEND() (*big.Int, error) {
	return _ETHDKG.Contract.TGPKJSUBMISSIONEND(&_ETHDKG.CallOpts)
}

// TGPKJSUBMISSIONEND is a free data retrieval call binding the contract method 0x9c2aa838.
//
// Solidity: function T_GPKJ_SUBMISSION_END() view returns(uint256)
func (_ETHDKG *ETHDKGCallerSession) TGPKJSUBMISSIONEND() (*big.Int, error) {
	return _ETHDKG.Contract.TGPKJSUBMISSIONEND(&_ETHDKG.CallOpts)
}

// TKEYSHARESUBMISSIONEND is a free data retrieval call binding the contract method 0xe2291ec3.
//
// Solidity: function T_KEY_SHARE_SUBMISSION_END() view returns(uint256)
func (_ETHDKG *ETHDKGCaller) TKEYSHARESUBMISSIONEND(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "T_KEY_SHARE_SUBMISSION_END")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TKEYSHARESUBMISSIONEND is a free data retrieval call binding the contract method 0xe2291ec3.
//
// Solidity: function T_KEY_SHARE_SUBMISSION_END() view returns(uint256)
func (_ETHDKG *ETHDKGSession) TKEYSHARESUBMISSIONEND() (*big.Int, error) {
	return _ETHDKG.Contract.TKEYSHARESUBMISSIONEND(&_ETHDKG.CallOpts)
}

// TKEYSHARESUBMISSIONEND is a free data retrieval call binding the contract method 0xe2291ec3.
//
// Solidity: function T_KEY_SHARE_SUBMISSION_END() view returns(uint256)
func (_ETHDKG *ETHDKGCallerSession) TKEYSHARESUBMISSIONEND() (*big.Int, error) {
	return _ETHDKG.Contract.TKEYSHARESUBMISSIONEND(&_ETHDKG.CallOpts)
}

// TMPKSUBMISSIONEND is a free data retrieval call binding the contract method 0x07f02c54.
//
// Solidity: function T_MPK_SUBMISSION_END() view returns(uint256)
func (_ETHDKG *ETHDKGCaller) TMPKSUBMISSIONEND(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "T_MPK_SUBMISSION_END")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TMPKSUBMISSIONEND is a free data retrieval call binding the contract method 0x07f02c54.
//
// Solidity: function T_MPK_SUBMISSION_END() view returns(uint256)
func (_ETHDKG *ETHDKGSession) TMPKSUBMISSIONEND() (*big.Int, error) {
	return _ETHDKG.Contract.TMPKSUBMISSIONEND(&_ETHDKG.CallOpts)
}

// TMPKSUBMISSIONEND is a free data retrieval call binding the contract method 0x07f02c54.
//
// Solidity: function T_MPK_SUBMISSION_END() view returns(uint256)
func (_ETHDKG *ETHDKGCallerSession) TMPKSUBMISSIONEND() (*big.Int, error) {
	return _ETHDKG.Contract.TMPKSUBMISSIONEND(&_ETHDKG.CallOpts)
}

// TREGISTRATIONEND is a free data retrieval call binding the contract method 0x0de1553f.
//
// Solidity: function T_REGISTRATION_END() view returns(uint256)
func (_ETHDKG *ETHDKGCaller) TREGISTRATIONEND(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "T_REGISTRATION_END")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TREGISTRATIONEND is a free data retrieval call binding the contract method 0x0de1553f.
//
// Solidity: function T_REGISTRATION_END() view returns(uint256)
func (_ETHDKG *ETHDKGSession) TREGISTRATIONEND() (*big.Int, error) {
	return _ETHDKG.Contract.TREGISTRATIONEND(&_ETHDKG.CallOpts)
}

// TREGISTRATIONEND is a free data retrieval call binding the contract method 0x0de1553f.
//
// Solidity: function T_REGISTRATION_END() view returns(uint256)
func (_ETHDKG *ETHDKGCallerSession) TREGISTRATIONEND() (*big.Int, error) {
	return _ETHDKG.Contract.TREGISTRATIONEND(&_ETHDKG.CallOpts)
}

// TSHAREDISTRIBUTIONEND is a free data retrieval call binding the contract method 0xdc614e28.
//
// Solidity: function T_SHARE_DISTRIBUTION_END() view returns(uint256)
func (_ETHDKG *ETHDKGCaller) TSHAREDISTRIBUTIONEND(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "T_SHARE_DISTRIBUTION_END")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TSHAREDISTRIBUTIONEND is a free data retrieval call binding the contract method 0xdc614e28.
//
// Solidity: function T_SHARE_DISTRIBUTION_END() view returns(uint256)
func (_ETHDKG *ETHDKGSession) TSHAREDISTRIBUTIONEND() (*big.Int, error) {
	return _ETHDKG.Contract.TSHAREDISTRIBUTIONEND(&_ETHDKG.CallOpts)
}

// TSHAREDISTRIBUTIONEND is a free data retrieval call binding the contract method 0xdc614e28.
//
// Solidity: function T_SHARE_DISTRIBUTION_END() view returns(uint256)
func (_ETHDKG *ETHDKGCallerSession) TSHAREDISTRIBUTIONEND() (*big.Int, error) {
	return _ETHDKG.Contract.TSHAREDISTRIBUTIONEND(&_ETHDKG.CallOpts)
}

// Addresses is a free data retrieval call binding the contract method 0xedf26d9b.
//
// Solidity: function addresses(uint256 idx) view returns(address)
func (_ETHDKG *ETHDKGCaller) Addresses(opts *bind.CallOpts, idx *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "addresses", idx)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Addresses is a free data retrieval call binding the contract method 0xedf26d9b.
//
// Solidity: function addresses(uint256 idx) view returns(address)
func (_ETHDKG *ETHDKGSession) Addresses(idx *big.Int) (common.Address, error) {
	return _ETHDKG.Contract.Addresses(&_ETHDKG.CallOpts, idx)
}

// Addresses is a free data retrieval call binding the contract method 0xedf26d9b.
//
// Solidity: function addresses(uint256 idx) view returns(address)
func (_ETHDKG *ETHDKGCallerSession) Addresses(idx *big.Int) (common.Address, error) {
	return _ETHDKG.Contract.Addresses(&_ETHDKG.CallOpts, idx)
}

// Commitments1stCoefficient is a free data retrieval call binding the contract method 0x2cf4050b.
//
// Solidity: function commitments_1st_coefficient(address addr, uint256 idx) view returns(uint256)
func (_ETHDKG *ETHDKGCaller) Commitments1stCoefficient(opts *bind.CallOpts, addr common.Address, idx *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "commitments_1st_coefficient", addr, idx)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Commitments1stCoefficient is a free data retrieval call binding the contract method 0x2cf4050b.
//
// Solidity: function commitments_1st_coefficient(address addr, uint256 idx) view returns(uint256)
func (_ETHDKG *ETHDKGSession) Commitments1stCoefficient(addr common.Address, idx *big.Int) (*big.Int, error) {
	return _ETHDKG.Contract.Commitments1stCoefficient(&_ETHDKG.CallOpts, addr, idx)
}

// Commitments1stCoefficient is a free data retrieval call binding the contract method 0x2cf4050b.
//
// Solidity: function commitments_1st_coefficient(address addr, uint256 idx) view returns(uint256)
func (_ETHDKG *ETHDKGCallerSession) Commitments1stCoefficient(addr common.Address, idx *big.Int) (*big.Int, error) {
	return _ETHDKG.Contract.Commitments1stCoefficient(&_ETHDKG.CallOpts, addr, idx)
}

// GetPhaseLength is a free data retrieval call binding the contract method 0x106da57d.
//
// Solidity: function getPhaseLength() view returns(uint256)
func (_ETHDKG *ETHDKGCaller) GetPhaseLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "getPhaseLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPhaseLength is a free data retrieval call binding the contract method 0x106da57d.
//
// Solidity: function getPhaseLength() view returns(uint256)
func (_ETHDKG *ETHDKGSession) GetPhaseLength() (*big.Int, error) {
	return _ETHDKG.Contract.GetPhaseLength(&_ETHDKG.CallOpts)
}

// GetPhaseLength is a free data retrieval call binding the contract method 0x106da57d.
//
// Solidity: function getPhaseLength() view returns(uint256)
func (_ETHDKG *ETHDKGCallerSession) GetPhaseLength() (*big.Int, error) {
	return _ETHDKG.Contract.GetPhaseLength(&_ETHDKG.CallOpts)
}

// GpkjSubmissions is a free data retrieval call binding the contract method 0xfef001a9.
//
// Solidity: function gpkj_submissions(address , uint256 ) view returns(uint256)
func (_ETHDKG *ETHDKGCaller) GpkjSubmissions(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "gpkj_submissions", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GpkjSubmissions is a free data retrieval call binding the contract method 0xfef001a9.
//
// Solidity: function gpkj_submissions(address , uint256 ) view returns(uint256)
func (_ETHDKG *ETHDKGSession) GpkjSubmissions(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _ETHDKG.Contract.GpkjSubmissions(&_ETHDKG.CallOpts, arg0, arg1)
}

// GpkjSubmissions is a free data retrieval call binding the contract method 0xfef001a9.
//
// Solidity: function gpkj_submissions(address , uint256 ) view returns(uint256)
func (_ETHDKG *ETHDKGCallerSession) GpkjSubmissions(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _ETHDKG.Contract.GpkjSubmissions(&_ETHDKG.CallOpts, arg0, arg1)
}

// InitialMessage is a free data retrieval call binding the contract method 0x665f4c81.
//
// Solidity: function initialMessage() view returns(bytes)
func (_ETHDKG *ETHDKGCaller) InitialMessage(opts *bind.CallOpts) ([]byte, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "initialMessage")

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// InitialMessage is a free data retrieval call binding the contract method 0x665f4c81.
//
// Solidity: function initialMessage() view returns(bytes)
func (_ETHDKG *ETHDKGSession) InitialMessage() ([]byte, error) {
	return _ETHDKG.Contract.InitialMessage(&_ETHDKG.CallOpts)
}

// InitialMessage is a free data retrieval call binding the contract method 0x665f4c81.
//
// Solidity: function initialMessage() view returns(bytes)
func (_ETHDKG *ETHDKGCallerSession) InitialMessage() ([]byte, error) {
	return _ETHDKG.Contract.InitialMessage(&_ETHDKG.CallOpts)
}

// InitialSignatures is a free data retrieval call binding the contract method 0xfa055f2f.
//
// Solidity: function initialSignatures(address addr, uint256 idx) view returns(uint256)
func (_ETHDKG *ETHDKGCaller) InitialSignatures(opts *bind.CallOpts, addr common.Address, idx *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "initialSignatures", addr, idx)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// InitialSignatures is a free data retrieval call binding the contract method 0xfa055f2f.
//
// Solidity: function initialSignatures(address addr, uint256 idx) view returns(uint256)
func (_ETHDKG *ETHDKGSession) InitialSignatures(addr common.Address, idx *big.Int) (*big.Int, error) {
	return _ETHDKG.Contract.InitialSignatures(&_ETHDKG.CallOpts, addr, idx)
}

// InitialSignatures is a free data retrieval call binding the contract method 0xfa055f2f.
//
// Solidity: function initialSignatures(address addr, uint256 idx) view returns(uint256)
func (_ETHDKG *ETHDKGCallerSession) InitialSignatures(addr common.Address, idx *big.Int) (*big.Int, error) {
	return _ETHDKG.Contract.InitialSignatures(&_ETHDKG.CallOpts, addr, idx)
}

// IsMalicious is a free data retrieval call binding the contract method 0x9c02514a.
//
// Solidity: function isMalicious(address addr) view returns(bool)
func (_ETHDKG *ETHDKGCaller) IsMalicious(opts *bind.CallOpts, addr common.Address) (bool, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "isMalicious", addr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsMalicious is a free data retrieval call binding the contract method 0x9c02514a.
//
// Solidity: function isMalicious(address addr) view returns(bool)
func (_ETHDKG *ETHDKGSession) IsMalicious(addr common.Address) (bool, error) {
	return _ETHDKG.Contract.IsMalicious(&_ETHDKG.CallOpts, addr)
}

// IsMalicious is a free data retrieval call binding the contract method 0x9c02514a.
//
// Solidity: function isMalicious(address addr) view returns(bool)
func (_ETHDKG *ETHDKGCallerSession) IsMalicious(addr common.Address) (bool, error) {
	return _ETHDKG.Contract.IsMalicious(&_ETHDKG.CallOpts, addr)
}

// KeyShares is a free data retrieval call binding the contract method 0x85c02b1d.
//
// Solidity: function keyShares(address addr, uint256 idx) view returns(uint256)
func (_ETHDKG *ETHDKGCaller) KeyShares(opts *bind.CallOpts, addr common.Address, idx *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "keyShares", addr, idx)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// KeyShares is a free data retrieval call binding the contract method 0x85c02b1d.
//
// Solidity: function keyShares(address addr, uint256 idx) view returns(uint256)
func (_ETHDKG *ETHDKGSession) KeyShares(addr common.Address, idx *big.Int) (*big.Int, error) {
	return _ETHDKG.Contract.KeyShares(&_ETHDKG.CallOpts, addr, idx)
}

// KeyShares is a free data retrieval call binding the contract method 0x85c02b1d.
//
// Solidity: function keyShares(address addr, uint256 idx) view returns(uint256)
func (_ETHDKG *ETHDKGCallerSession) KeyShares(addr common.Address, idx *big.Int) (*big.Int, error) {
	return _ETHDKG.Contract.KeyShares(&_ETHDKG.CallOpts, addr, idx)
}

// MasterPublicKey is a free data retrieval call binding the contract method 0xe6511378.
//
// Solidity: function master_public_key(uint256 ) view returns(uint256)
func (_ETHDKG *ETHDKGCaller) MasterPublicKey(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "master_public_key", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MasterPublicKey is a free data retrieval call binding the contract method 0xe6511378.
//
// Solidity: function master_public_key(uint256 ) view returns(uint256)
func (_ETHDKG *ETHDKGSession) MasterPublicKey(arg0 *big.Int) (*big.Int, error) {
	return _ETHDKG.Contract.MasterPublicKey(&_ETHDKG.CallOpts, arg0)
}

// MasterPublicKey is a free data retrieval call binding the contract method 0xe6511378.
//
// Solidity: function master_public_key(uint256 ) view returns(uint256)
func (_ETHDKG *ETHDKGCallerSession) MasterPublicKey(arg0 *big.Int) (*big.Int, error) {
	return _ETHDKG.Contract.MasterPublicKey(&_ETHDKG.CallOpts, arg0)
}

// NumberOfRegistrations is a free data retrieval call binding the contract method 0xd8f63eb7.
//
// Solidity: function numberOfRegistrations() view returns(uint256)
func (_ETHDKG *ETHDKGCaller) NumberOfRegistrations(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "numberOfRegistrations")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NumberOfRegistrations is a free data retrieval call binding the contract method 0xd8f63eb7.
//
// Solidity: function numberOfRegistrations() view returns(uint256)
func (_ETHDKG *ETHDKGSession) NumberOfRegistrations() (*big.Int, error) {
	return _ETHDKG.Contract.NumberOfRegistrations(&_ETHDKG.CallOpts)
}

// NumberOfRegistrations is a free data retrieval call binding the contract method 0xd8f63eb7.
//
// Solidity: function numberOfRegistrations() view returns(uint256)
func (_ETHDKG *ETHDKGCallerSession) NumberOfRegistrations() (*big.Int, error) {
	return _ETHDKG.Contract.NumberOfRegistrations(&_ETHDKG.CallOpts)
}

// PublicKeys is a free data retrieval call binding the contract method 0x10782555.
//
// Solidity: function publicKeys(address addr, uint256 idx) view returns(uint256)
func (_ETHDKG *ETHDKGCaller) PublicKeys(opts *bind.CallOpts, addr common.Address, idx *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "publicKeys", addr, idx)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PublicKeys is a free data retrieval call binding the contract method 0x10782555.
//
// Solidity: function publicKeys(address addr, uint256 idx) view returns(uint256)
func (_ETHDKG *ETHDKGSession) PublicKeys(addr common.Address, idx *big.Int) (*big.Int, error) {
	return _ETHDKG.Contract.PublicKeys(&_ETHDKG.CallOpts, addr, idx)
}

// PublicKeys is a free data retrieval call binding the contract method 0x10782555.
//
// Solidity: function publicKeys(address addr, uint256 idx) view returns(uint256)
func (_ETHDKG *ETHDKGCallerSession) PublicKeys(addr common.Address, idx *big.Int) (*big.Int, error) {
	return _ETHDKG.Contract.PublicKeys(&_ETHDKG.CallOpts, addr, idx)
}

// ShareDistributionHashes is a free data retrieval call binding the contract method 0x5634145a.
//
// Solidity: function shareDistributionHashes(address addr) view returns(bytes32)
func (_ETHDKG *ETHDKGCaller) ShareDistributionHashes(opts *bind.CallOpts, addr common.Address) ([32]byte, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "shareDistributionHashes", addr)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ShareDistributionHashes is a free data retrieval call binding the contract method 0x5634145a.
//
// Solidity: function shareDistributionHashes(address addr) view returns(bytes32)
func (_ETHDKG *ETHDKGSession) ShareDistributionHashes(addr common.Address) ([32]byte, error) {
	return _ETHDKG.Contract.ShareDistributionHashes(&_ETHDKG.CallOpts, addr)
}

// ShareDistributionHashes is a free data retrieval call binding the contract method 0x5634145a.
//
// Solidity: function shareDistributionHashes(address addr) view returns(bytes32)
func (_ETHDKG *ETHDKGCallerSession) ShareDistributionHashes(addr common.Address) ([32]byte, error) {
	return _ETHDKG.Contract.ShareDistributionHashes(&_ETHDKG.CallOpts, addr)
}

// ValidatorIndex is a free data retrieval call binding the contract method 0x9601ddf9.
//
// Solidity: function validatorIndex(address addr) view returns(uint256)
func (_ETHDKG *ETHDKGCaller) ValidatorIndex(opts *bind.CallOpts, addr common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "validatorIndex", addr)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ValidatorIndex is a free data retrieval call binding the contract method 0x9601ddf9.
//
// Solidity: function validatorIndex(address addr) view returns(uint256)
func (_ETHDKG *ETHDKGSession) ValidatorIndex(addr common.Address) (*big.Int, error) {
	return _ETHDKG.Contract.ValidatorIndex(&_ETHDKG.CallOpts, addr)
}

// ValidatorIndex is a free data retrieval call binding the contract method 0x9601ddf9.
//
// Solidity: function validatorIndex(address addr) view returns(uint256)
func (_ETHDKG *ETHDKGCallerSession) ValidatorIndex(addr common.Address) (*big.Int, error) {
	return _ETHDKG.Contract.ValidatorIndex(&_ETHDKG.CallOpts, addr)
}

// GroupAccusationGPKj is a paid mutator transaction binding the contract method 0xa6872833.
//
// Solidity: function Group_Accusation_GPKj(uint256[] invArray, uint256[] honestIndices, uint256[] dishonestIndices) returns()
func (_ETHDKG *ETHDKGTransactor) GroupAccusationGPKj(opts *bind.TransactOpts, invArray []*big.Int, honestIndices []*big.Int, dishonestIndices []*big.Int) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "Group_Accusation_GPKj", invArray, honestIndices, dishonestIndices)
}

// GroupAccusationGPKj is a paid mutator transaction binding the contract method 0xa6872833.
//
// Solidity: function Group_Accusation_GPKj(uint256[] invArray, uint256[] honestIndices, uint256[] dishonestIndices) returns()
func (_ETHDKG *ETHDKGSession) GroupAccusationGPKj(invArray []*big.Int, honestIndices []*big.Int, dishonestIndices []*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.GroupAccusationGPKj(&_ETHDKG.TransactOpts, invArray, honestIndices, dishonestIndices)
}

// GroupAccusationGPKj is a paid mutator transaction binding the contract method 0xa6872833.
//
// Solidity: function Group_Accusation_GPKj(uint256[] invArray, uint256[] honestIndices, uint256[] dishonestIndices) returns()
func (_ETHDKG *ETHDKGTransactorSession) GroupAccusationGPKj(invArray []*big.Int, honestIndices []*big.Int, dishonestIndices []*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.GroupAccusationGPKj(&_ETHDKG.TransactOpts, invArray, honestIndices, dishonestIndices)
}

// GroupAccusationGPKjComp is a paid mutator transaction binding the contract method 0xd7c47ff2.
//
// Solidity: function Group_Accusation_GPKj_Comp(uint256[][] encrypted_shares, uint256[2][][] commitments, uint256 dishonest_list_idx, address dishonestAddress) returns()
func (_ETHDKG *ETHDKGTransactor) GroupAccusationGPKjComp(opts *bind.TransactOpts, encrypted_shares [][]*big.Int, commitments [][][2]*big.Int, dishonest_list_idx *big.Int, dishonestAddress common.Address) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "Group_Accusation_GPKj_Comp", encrypted_shares, commitments, dishonest_list_idx, dishonestAddress)
}

// GroupAccusationGPKjComp is a paid mutator transaction binding the contract method 0xd7c47ff2.
//
// Solidity: function Group_Accusation_GPKj_Comp(uint256[][] encrypted_shares, uint256[2][][] commitments, uint256 dishonest_list_idx, address dishonestAddress) returns()
func (_ETHDKG *ETHDKGSession) GroupAccusationGPKjComp(encrypted_shares [][]*big.Int, commitments [][][2]*big.Int, dishonest_list_idx *big.Int, dishonestAddress common.Address) (*types.Transaction, error) {
	return _ETHDKG.Contract.GroupAccusationGPKjComp(&_ETHDKG.TransactOpts, encrypted_shares, commitments, dishonest_list_idx, dishonestAddress)
}

// GroupAccusationGPKjComp is a paid mutator transaction binding the contract method 0xd7c47ff2.
//
// Solidity: function Group_Accusation_GPKj_Comp(uint256[][] encrypted_shares, uint256[2][][] commitments, uint256 dishonest_list_idx, address dishonestAddress) returns()
func (_ETHDKG *ETHDKGTransactorSession) GroupAccusationGPKjComp(encrypted_shares [][]*big.Int, commitments [][][2]*big.Int, dishonest_list_idx *big.Int, dishonestAddress common.Address) (*types.Transaction, error) {
	return _ETHDKG.Contract.GroupAccusationGPKjComp(&_ETHDKG.TransactOpts, encrypted_shares, commitments, dishonest_list_idx, dishonestAddress)
}

// SubmitGPKj is a paid mutator transaction binding the contract method 0xdc5e8a0a.
//
// Solidity: function Submit_GPKj(uint256[4] gpkj, uint256[2] sig) returns()
func (_ETHDKG *ETHDKGTransactor) SubmitGPKj(opts *bind.TransactOpts, gpkj [4]*big.Int, sig [2]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "Submit_GPKj", gpkj, sig)
}

// SubmitGPKj is a paid mutator transaction binding the contract method 0xdc5e8a0a.
//
// Solidity: function Submit_GPKj(uint256[4] gpkj, uint256[2] sig) returns()
func (_ETHDKG *ETHDKGSession) SubmitGPKj(gpkj [4]*big.Int, sig [2]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.SubmitGPKj(&_ETHDKG.TransactOpts, gpkj, sig)
}

// SubmitGPKj is a paid mutator transaction binding the contract method 0xdc5e8a0a.
//
// Solidity: function Submit_GPKj(uint256[4] gpkj, uint256[2] sig) returns()
func (_ETHDKG *ETHDKGTransactorSession) SubmitGPKj(gpkj [4]*big.Int, sig [2]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.SubmitGPKj(&_ETHDKG.TransactOpts, gpkj, sig)
}

// SuccessfulCompletion is a paid mutator transaction binding the contract method 0x65c97c01.
//
// Solidity: function Successful_Completion() returns()
func (_ETHDKG *ETHDKGTransactor) SuccessfulCompletion(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "Successful_Completion")
}

// SuccessfulCompletion is a paid mutator transaction binding the contract method 0x65c97c01.
//
// Solidity: function Successful_Completion() returns()
func (_ETHDKG *ETHDKGSession) SuccessfulCompletion() (*types.Transaction, error) {
	return _ETHDKG.Contract.SuccessfulCompletion(&_ETHDKG.TransactOpts)
}

// SuccessfulCompletion is a paid mutator transaction binding the contract method 0x65c97c01.
//
// Solidity: function Successful_Completion() returns()
func (_ETHDKG *ETHDKGTransactorSession) SuccessfulCompletion() (*types.Transaction, error) {
	return _ETHDKG.Contract.SuccessfulCompletion(&_ETHDKG.TransactOpts)
}

// DistributeShares is a paid mutator transaction binding the contract method 0xa080e5e0.
//
// Solidity: function distribute_shares(uint256[] encrypted_shares, uint256[2][] commitments) returns()
func (_ETHDKG *ETHDKGTransactor) DistributeShares(opts *bind.TransactOpts, encrypted_shares []*big.Int, commitments [][2]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "distribute_shares", encrypted_shares, commitments)
}

// DistributeShares is a paid mutator transaction binding the contract method 0xa080e5e0.
//
// Solidity: function distribute_shares(uint256[] encrypted_shares, uint256[2][] commitments) returns()
func (_ETHDKG *ETHDKGSession) DistributeShares(encrypted_shares []*big.Int, commitments [][2]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.DistributeShares(&_ETHDKG.TransactOpts, encrypted_shares, commitments)
}

// DistributeShares is a paid mutator transaction binding the contract method 0xa080e5e0.
//
// Solidity: function distribute_shares(uint256[] encrypted_shares, uint256[2][] commitments) returns()
func (_ETHDKG *ETHDKGTransactorSession) DistributeShares(encrypted_shares []*big.Int, commitments [][2]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.DistributeShares(&_ETHDKG.TransactOpts, encrypted_shares, commitments)
}

// InitializeEthDKG is a paid mutator transaction binding the contract method 0xfd0fe4ef.
//
// Solidity: function initializeEthDKG(address ) returns()
func (_ETHDKG *ETHDKGTransactor) InitializeEthDKG(opts *bind.TransactOpts, arg0 common.Address) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "initializeEthDKG", arg0)
}

// InitializeEthDKG is a paid mutator transaction binding the contract method 0xfd0fe4ef.
//
// Solidity: function initializeEthDKG(address ) returns()
func (_ETHDKG *ETHDKGSession) InitializeEthDKG(arg0 common.Address) (*types.Transaction, error) {
	return _ETHDKG.Contract.InitializeEthDKG(&_ETHDKG.TransactOpts, arg0)
}

// InitializeEthDKG is a paid mutator transaction binding the contract method 0xfd0fe4ef.
//
// Solidity: function initializeEthDKG(address ) returns()
func (_ETHDKG *ETHDKGTransactorSession) InitializeEthDKG(arg0 common.Address) (*types.Transaction, error) {
	return _ETHDKG.Contract.InitializeEthDKG(&_ETHDKG.TransactOpts, arg0)
}

// InitializeState is a paid mutator transaction binding the contract method 0x82571195.
//
// Solidity: function initializeState() returns()
func (_ETHDKG *ETHDKGTransactor) InitializeState(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "initializeState")
}

// InitializeState is a paid mutator transaction binding the contract method 0x82571195.
//
// Solidity: function initializeState() returns()
func (_ETHDKG *ETHDKGSession) InitializeState() (*types.Transaction, error) {
	return _ETHDKG.Contract.InitializeState(&_ETHDKG.TransactOpts)
}

// InitializeState is a paid mutator transaction binding the contract method 0x82571195.
//
// Solidity: function initializeState() returns()
func (_ETHDKG *ETHDKGTransactorSession) InitializeState() (*types.Transaction, error) {
	return _ETHDKG.Contract.InitializeState(&_ETHDKG.TransactOpts)
}

// Register is a paid mutator transaction binding the contract method 0x3442af5c.
//
// Solidity: function register(uint256[2] public_key) returns()
func (_ETHDKG *ETHDKGTransactor) Register(opts *bind.TransactOpts, public_key [2]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "register", public_key)
}

// Register is a paid mutator transaction binding the contract method 0x3442af5c.
//
// Solidity: function register(uint256[2] public_key) returns()
func (_ETHDKG *ETHDKGSession) Register(public_key [2]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.Register(&_ETHDKG.TransactOpts, public_key)
}

// Register is a paid mutator transaction binding the contract method 0x3442af5c.
//
// Solidity: function register(uint256[2] public_key) returns()
func (_ETHDKG *ETHDKGTransactorSession) Register(public_key [2]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.Register(&_ETHDKG.TransactOpts, public_key)
}

// SubmitDispute is a paid mutator transaction binding the contract method 0x2f123ffc.
//
// Solidity: function submit_dispute(address issuer, uint256 issuer_list_idx, uint256 disputer_list_idx, uint256[] encrypted_shares, uint256[2][] commitments, uint256[2] shared_key, uint256[2] shared_key_correctness_proof) returns()
func (_ETHDKG *ETHDKGTransactor) SubmitDispute(opts *bind.TransactOpts, issuer common.Address, issuer_list_idx *big.Int, disputer_list_idx *big.Int, encrypted_shares []*big.Int, commitments [][2]*big.Int, shared_key [2]*big.Int, shared_key_correctness_proof [2]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "submit_dispute", issuer, issuer_list_idx, disputer_list_idx, encrypted_shares, commitments, shared_key, shared_key_correctness_proof)
}

// SubmitDispute is a paid mutator transaction binding the contract method 0x2f123ffc.
//
// Solidity: function submit_dispute(address issuer, uint256 issuer_list_idx, uint256 disputer_list_idx, uint256[] encrypted_shares, uint256[2][] commitments, uint256[2] shared_key, uint256[2] shared_key_correctness_proof) returns()
func (_ETHDKG *ETHDKGSession) SubmitDispute(issuer common.Address, issuer_list_idx *big.Int, disputer_list_idx *big.Int, encrypted_shares []*big.Int, commitments [][2]*big.Int, shared_key [2]*big.Int, shared_key_correctness_proof [2]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.SubmitDispute(&_ETHDKG.TransactOpts, issuer, issuer_list_idx, disputer_list_idx, encrypted_shares, commitments, shared_key, shared_key_correctness_proof)
}

// SubmitDispute is a paid mutator transaction binding the contract method 0x2f123ffc.
//
// Solidity: function submit_dispute(address issuer, uint256 issuer_list_idx, uint256 disputer_list_idx, uint256[] encrypted_shares, uint256[2][] commitments, uint256[2] shared_key, uint256[2] shared_key_correctness_proof) returns()
func (_ETHDKG *ETHDKGTransactorSession) SubmitDispute(issuer common.Address, issuer_list_idx *big.Int, disputer_list_idx *big.Int, encrypted_shares []*big.Int, commitments [][2]*big.Int, shared_key [2]*big.Int, shared_key_correctness_proof [2]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.SubmitDispute(&_ETHDKG.TransactOpts, issuer, issuer_list_idx, disputer_list_idx, encrypted_shares, commitments, shared_key, shared_key_correctness_proof)
}

// SubmitKeyShare is a paid mutator transaction binding the contract method 0x7163525e.
//
// Solidity: function submit_key_share(address issuer, uint256[2] key_share_G1, uint256[2] key_share_G1_correctness_proof, uint256[4] key_share_G2) returns()
func (_ETHDKG *ETHDKGTransactor) SubmitKeyShare(opts *bind.TransactOpts, issuer common.Address, key_share_G1 [2]*big.Int, key_share_G1_correctness_proof [2]*big.Int, key_share_G2 [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "submit_key_share", issuer, key_share_G1, key_share_G1_correctness_proof, key_share_G2)
}

// SubmitKeyShare is a paid mutator transaction binding the contract method 0x7163525e.
//
// Solidity: function submit_key_share(address issuer, uint256[2] key_share_G1, uint256[2] key_share_G1_correctness_proof, uint256[4] key_share_G2) returns()
func (_ETHDKG *ETHDKGSession) SubmitKeyShare(issuer common.Address, key_share_G1 [2]*big.Int, key_share_G1_correctness_proof [2]*big.Int, key_share_G2 [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.SubmitKeyShare(&_ETHDKG.TransactOpts, issuer, key_share_G1, key_share_G1_correctness_proof, key_share_G2)
}

// SubmitKeyShare is a paid mutator transaction binding the contract method 0x7163525e.
//
// Solidity: function submit_key_share(address issuer, uint256[2] key_share_G1, uint256[2] key_share_G1_correctness_proof, uint256[4] key_share_G2) returns()
func (_ETHDKG *ETHDKGTransactorSession) SubmitKeyShare(issuer common.Address, key_share_G1 [2]*big.Int, key_share_G1_correctness_proof [2]*big.Int, key_share_G2 [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.SubmitKeyShare(&_ETHDKG.TransactOpts, issuer, key_share_G1, key_share_G1_correctness_proof, key_share_G2)
}

// SubmitMasterPublicKey is a paid mutator transaction binding the contract method 0xf47ae6a9.
//
// Solidity: function submit_master_public_key(uint256[4] _master_public_key) returns()
func (_ETHDKG *ETHDKGTransactor) SubmitMasterPublicKey(opts *bind.TransactOpts, _master_public_key [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "submit_master_public_key", _master_public_key)
}

// SubmitMasterPublicKey is a paid mutator transaction binding the contract method 0xf47ae6a9.
//
// Solidity: function submit_master_public_key(uint256[4] _master_public_key) returns()
func (_ETHDKG *ETHDKGSession) SubmitMasterPublicKey(_master_public_key [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.SubmitMasterPublicKey(&_ETHDKG.TransactOpts, _master_public_key)
}

// SubmitMasterPublicKey is a paid mutator transaction binding the contract method 0xf47ae6a9.
//
// Solidity: function submit_master_public_key(uint256[4] _master_public_key) returns()
func (_ETHDKG *ETHDKGTransactorSession) SubmitMasterPublicKey(_master_public_key [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.SubmitMasterPublicKey(&_ETHDKG.TransactOpts, _master_public_key)
}

// UpdatePhaseLength is a paid mutator transaction binding the contract method 0x2a702773.
//
// Solidity: function updatePhaseLength(uint256 ) returns()
func (_ETHDKG *ETHDKGTransactor) UpdatePhaseLength(opts *bind.TransactOpts, arg0 *big.Int) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "updatePhaseLength", arg0)
}

// UpdatePhaseLength is a paid mutator transaction binding the contract method 0x2a702773.
//
// Solidity: function updatePhaseLength(uint256 ) returns()
func (_ETHDKG *ETHDKGSession) UpdatePhaseLength(arg0 *big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.UpdatePhaseLength(&_ETHDKG.TransactOpts, arg0)
}

// UpdatePhaseLength is a paid mutator transaction binding the contract method 0x2a702773.
//
// Solidity: function updatePhaseLength(uint256 ) returns()
func (_ETHDKG *ETHDKGTransactorSession) UpdatePhaseLength(arg0 *big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.UpdatePhaseLength(&_ETHDKG.TransactOpts, arg0)
}

// ETHDKGKeyShareSubmissionIterator is returned from FilterKeyShareSubmission and is used to iterate over the raw logs and unpacked data for KeyShareSubmission events raised by the ETHDKG contract.
type ETHDKGKeyShareSubmissionIterator struct {
	Event *ETHDKGKeyShareSubmission // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGKeyShareSubmissionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGKeyShareSubmission)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGKeyShareSubmission)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGKeyShareSubmissionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGKeyShareSubmissionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGKeyShareSubmission represents a KeyShareSubmission event raised by the ETHDKG contract.
type ETHDKGKeyShareSubmission struct {
	Issuer                     common.Address
	KeyShareG1                 [2]*big.Int
	KeyShareG1CorrectnessProof [2]*big.Int
	KeyShareG2                 [4]*big.Int
	Raw                        types.Log // Blockchain specific contextual infos
}

// FilterKeyShareSubmission is a free log retrieval operation binding the contract event 0xb0ee36c3780de716eb6c83687f433ae2558a6923e090fd238b657fb6c896badc.
//
// Solidity: event KeyShareSubmission(address issuer, uint256[2] key_share_G1, uint256[2] key_share_G1_correctness_proof, uint256[4] key_share_G2)
func (_ETHDKG *ETHDKGFilterer) FilterKeyShareSubmission(opts *bind.FilterOpts) (*ETHDKGKeyShareSubmissionIterator, error) {

	logs, sub, err := _ETHDKG.contract.FilterLogs(opts, "KeyShareSubmission")
	if err != nil {
		return nil, err
	}
	return &ETHDKGKeyShareSubmissionIterator{contract: _ETHDKG.contract, event: "KeyShareSubmission", logs: logs, sub: sub}, nil
}

// WatchKeyShareSubmission is a free log subscription operation binding the contract event 0xb0ee36c3780de716eb6c83687f433ae2558a6923e090fd238b657fb6c896badc.
//
// Solidity: event KeyShareSubmission(address issuer, uint256[2] key_share_G1, uint256[2] key_share_G1_correctness_proof, uint256[4] key_share_G2)
func (_ETHDKG *ETHDKGFilterer) WatchKeyShareSubmission(opts *bind.WatchOpts, sink chan<- *ETHDKGKeyShareSubmission) (event.Subscription, error) {

	logs, sub, err := _ETHDKG.contract.WatchLogs(opts, "KeyShareSubmission")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGKeyShareSubmission)
				if err := _ETHDKG.contract.UnpackLog(event, "KeyShareSubmission", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKeyShareSubmission is a log parse operation binding the contract event 0xb0ee36c3780de716eb6c83687f433ae2558a6923e090fd238b657fb6c896badc.
//
// Solidity: event KeyShareSubmission(address issuer, uint256[2] key_share_G1, uint256[2] key_share_G1_correctness_proof, uint256[4] key_share_G2)
func (_ETHDKG *ETHDKGFilterer) ParseKeyShareSubmission(log types.Log) (*ETHDKGKeyShareSubmission, error) {
	event := new(ETHDKGKeyShareSubmission)
	if err := _ETHDKG.contract.UnpackLog(event, "KeyShareSubmission", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGRegistrationOpenIterator is returned from FilterRegistrationOpen and is used to iterate over the raw logs and unpacked data for RegistrationOpen events raised by the ETHDKG contract.
type ETHDKGRegistrationOpenIterator struct {
	Event *ETHDKGRegistrationOpen // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGRegistrationOpenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGRegistrationOpen)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGRegistrationOpen)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGRegistrationOpenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGRegistrationOpenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGRegistrationOpen represents a RegistrationOpen event raised by the ETHDKG contract.
type ETHDKGRegistrationOpen struct {
	DkgStarts              *big.Int
	RegistrationEnds       *big.Int
	ShareDistributionEnds  *big.Int
	DisputeEnds            *big.Int
	KeyShareSubmissionEnds *big.Int
	MpkSubmissionEnds      *big.Int
	GpkjSubmissionEnds     *big.Int
	GpkjDisputeEnds        *big.Int
	DkgComplete            *big.Int
	Raw                    types.Log // Blockchain specific contextual infos
}

// FilterRegistrationOpen is a free log retrieval operation binding the contract event 0x9c6f8368fe7e77e8cb9438744581403bcb3f53298e517f04c1b8475487402e97.
//
// Solidity: event RegistrationOpen(uint256 dkgStarts, uint256 registrationEnds, uint256 shareDistributionEnds, uint256 disputeEnds, uint256 keyShareSubmissionEnds, uint256 mpkSubmissionEnds, uint256 gpkjSubmissionEnds, uint256 gpkjDisputeEnds, uint256 dkgComplete)
func (_ETHDKG *ETHDKGFilterer) FilterRegistrationOpen(opts *bind.FilterOpts) (*ETHDKGRegistrationOpenIterator, error) {

	logs, sub, err := _ETHDKG.contract.FilterLogs(opts, "RegistrationOpen")
	if err != nil {
		return nil, err
	}
	return &ETHDKGRegistrationOpenIterator{contract: _ETHDKG.contract, event: "RegistrationOpen", logs: logs, sub: sub}, nil
}

// WatchRegistrationOpen is a free log subscription operation binding the contract event 0x9c6f8368fe7e77e8cb9438744581403bcb3f53298e517f04c1b8475487402e97.
//
// Solidity: event RegistrationOpen(uint256 dkgStarts, uint256 registrationEnds, uint256 shareDistributionEnds, uint256 disputeEnds, uint256 keyShareSubmissionEnds, uint256 mpkSubmissionEnds, uint256 gpkjSubmissionEnds, uint256 gpkjDisputeEnds, uint256 dkgComplete)
func (_ETHDKG *ETHDKGFilterer) WatchRegistrationOpen(opts *bind.WatchOpts, sink chan<- *ETHDKGRegistrationOpen) (event.Subscription, error) {

	logs, sub, err := _ETHDKG.contract.WatchLogs(opts, "RegistrationOpen")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGRegistrationOpen)
				if err := _ETHDKG.contract.UnpackLog(event, "RegistrationOpen", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegistrationOpen is a log parse operation binding the contract event 0x9c6f8368fe7e77e8cb9438744581403bcb3f53298e517f04c1b8475487402e97.
//
// Solidity: event RegistrationOpen(uint256 dkgStarts, uint256 registrationEnds, uint256 shareDistributionEnds, uint256 disputeEnds, uint256 keyShareSubmissionEnds, uint256 mpkSubmissionEnds, uint256 gpkjSubmissionEnds, uint256 gpkjDisputeEnds, uint256 dkgComplete)
func (_ETHDKG *ETHDKGFilterer) ParseRegistrationOpen(log types.Log) (*ETHDKGRegistrationOpen, error) {
	event := new(ETHDKGRegistrationOpen)
	if err := _ETHDKG.contract.UnpackLog(event, "RegistrationOpen", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGShareDistributionIterator is returned from FilterShareDistribution and is used to iterate over the raw logs and unpacked data for ShareDistribution events raised by the ETHDKG contract.
type ETHDKGShareDistributionIterator struct {
	Event *ETHDKGShareDistribution // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGShareDistributionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGShareDistribution)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGShareDistribution)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGShareDistributionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGShareDistributionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGShareDistribution represents a ShareDistribution event raised by the ETHDKG contract.
type ETHDKGShareDistribution struct {
	Issuer          common.Address
	Index           *big.Int
	EncryptedShares []*big.Int
	Commitments     [][2]*big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterShareDistribution is a free log retrieval operation binding the contract event 0xa84d294194d6169652a99150fd2ef10e18b0d2caa10beeea237bbddcc6e22b10.
//
// Solidity: event ShareDistribution(address issuer, uint256 index, uint256[] encrypted_shares, uint256[2][] commitments)
func (_ETHDKG *ETHDKGFilterer) FilterShareDistribution(opts *bind.FilterOpts) (*ETHDKGShareDistributionIterator, error) {

	logs, sub, err := _ETHDKG.contract.FilterLogs(opts, "ShareDistribution")
	if err != nil {
		return nil, err
	}
	return &ETHDKGShareDistributionIterator{contract: _ETHDKG.contract, event: "ShareDistribution", logs: logs, sub: sub}, nil
}

// WatchShareDistribution is a free log subscription operation binding the contract event 0xa84d294194d6169652a99150fd2ef10e18b0d2caa10beeea237bbddcc6e22b10.
//
// Solidity: event ShareDistribution(address issuer, uint256 index, uint256[] encrypted_shares, uint256[2][] commitments)
func (_ETHDKG *ETHDKGFilterer) WatchShareDistribution(opts *bind.WatchOpts, sink chan<- *ETHDKGShareDistribution) (event.Subscription, error) {

	logs, sub, err := _ETHDKG.contract.WatchLogs(opts, "ShareDistribution")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGShareDistribution)
				if err := _ETHDKG.contract.UnpackLog(event, "ShareDistribution", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseShareDistribution is a log parse operation binding the contract event 0xa84d294194d6169652a99150fd2ef10e18b0d2caa10beeea237bbddcc6e22b10.
//
// Solidity: event ShareDistribution(address issuer, uint256 index, uint256[] encrypted_shares, uint256[2][] commitments)
func (_ETHDKG *ETHDKGFilterer) ParseShareDistribution(log types.Log) (*ETHDKGShareDistribution, error) {
	event := new(ETHDKGShareDistribution)
	if err := _ETHDKG.contract.UnpackLog(event, "ShareDistribution", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGValidatorMemberIterator is returned from FilterValidatorMember and is used to iterate over the raw logs and unpacked data for ValidatorMember events raised by the ETHDKG contract.
type ETHDKGValidatorMemberIterator struct {
	Event *ETHDKGValidatorMember // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGValidatorMemberIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGValidatorMember)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGValidatorMember)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGValidatorMemberIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGValidatorMemberIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGValidatorMember represents a ValidatorMember event raised by the ETHDKG contract.
type ETHDKGValidatorMember struct {
	Account common.Address
	Epoch   *big.Int
	Index   *big.Int
	Share0  *big.Int
	Share1  *big.Int
	Share2  *big.Int
	Share3  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterValidatorMember is a free log retrieval operation binding the contract event 0x113b129fac2dde341b9fbbec2bb79a95b9945b0e80fda711fc8ae5c7b0ea83b0.
//
// Solidity: event ValidatorMember(address account, uint256 epoch, uint256 index, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_ETHDKG *ETHDKGFilterer) FilterValidatorMember(opts *bind.FilterOpts) (*ETHDKGValidatorMemberIterator, error) {

	logs, sub, err := _ETHDKG.contract.FilterLogs(opts, "ValidatorMember")
	if err != nil {
		return nil, err
	}
	return &ETHDKGValidatorMemberIterator{contract: _ETHDKG.contract, event: "ValidatorMember", logs: logs, sub: sub}, nil
}

// WatchValidatorMember is a free log subscription operation binding the contract event 0x113b129fac2dde341b9fbbec2bb79a95b9945b0e80fda711fc8ae5c7b0ea83b0.
//
// Solidity: event ValidatorMember(address account, uint256 epoch, uint256 index, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_ETHDKG *ETHDKGFilterer) WatchValidatorMember(opts *bind.WatchOpts, sink chan<- *ETHDKGValidatorMember) (event.Subscription, error) {

	logs, sub, err := _ETHDKG.contract.WatchLogs(opts, "ValidatorMember")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGValidatorMember)
				if err := _ETHDKG.contract.UnpackLog(event, "ValidatorMember", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorMember is a log parse operation binding the contract event 0x113b129fac2dde341b9fbbec2bb79a95b9945b0e80fda711fc8ae5c7b0ea83b0.
//
// Solidity: event ValidatorMember(address account, uint256 epoch, uint256 index, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_ETHDKG *ETHDKGFilterer) ParseValidatorMember(log types.Log) (*ETHDKGValidatorMember, error) {
	event := new(ETHDKGValidatorMember)
	if err := _ETHDKG.contract.UnpackLog(event, "ValidatorMember", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGValidatorSetIterator is returned from FilterValidatorSet and is used to iterate over the raw logs and unpacked data for ValidatorSet events raised by the ETHDKG contract.
type ETHDKGValidatorSetIterator struct {
	Event *ETHDKGValidatorSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGValidatorSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGValidatorSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGValidatorSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGValidatorSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGValidatorSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGValidatorSet represents a ValidatorSet event raised by the ETHDKG contract.
type ETHDKGValidatorSet struct {
	ValidatorCount uint8
	Epoch          *big.Int
	EthHeight      uint32
	MadHeight      uint32
	GroupKey0      *big.Int
	GroupKey1      *big.Int
	GroupKey2      *big.Int
	GroupKey3      *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterValidatorSet is a free log retrieval operation binding the contract event 0x1c85ff1efe0a905f8feca811e617102cb7ec896aded693eb96366c8ef22bb09f.
//
// Solidity: event ValidatorSet(uint8 validatorCount, uint256 epoch, uint32 ethHeight, uint32 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_ETHDKG *ETHDKGFilterer) FilterValidatorSet(opts *bind.FilterOpts) (*ETHDKGValidatorSetIterator, error) {

	logs, sub, err := _ETHDKG.contract.FilterLogs(opts, "ValidatorSet")
	if err != nil {
		return nil, err
	}
	return &ETHDKGValidatorSetIterator{contract: _ETHDKG.contract, event: "ValidatorSet", logs: logs, sub: sub}, nil
}

// WatchValidatorSet is a free log subscription operation binding the contract event 0x1c85ff1efe0a905f8feca811e617102cb7ec896aded693eb96366c8ef22bb09f.
//
// Solidity: event ValidatorSet(uint8 validatorCount, uint256 epoch, uint32 ethHeight, uint32 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_ETHDKG *ETHDKGFilterer) WatchValidatorSet(opts *bind.WatchOpts, sink chan<- *ETHDKGValidatorSet) (event.Subscription, error) {

	logs, sub, err := _ETHDKG.contract.WatchLogs(opts, "ValidatorSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGValidatorSet)
				if err := _ETHDKG.contract.UnpackLog(event, "ValidatorSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorSet is a log parse operation binding the contract event 0x1c85ff1efe0a905f8feca811e617102cb7ec896aded693eb96366c8ef22bb09f.
//
// Solidity: event ValidatorSet(uint8 validatorCount, uint256 epoch, uint32 ethHeight, uint32 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_ETHDKG *ETHDKGFilterer) ParseValidatorSet(log types.Log) (*ETHDKGValidatorSet, error) {
	event := new(ETHDKGValidatorSet)
	if err := _ETHDKG.contract.UnpackLog(event, "ValidatorSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGEventsMetaData contains all meta data concerning the ETHDKGEvents contract.
var ETHDKGEventsMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"key_share_G1\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"key_share_G1_correctness_proof\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[4]\",\"name\":\"key_share_G2\",\"type\":\"uint256[4]\"}],\"name\":\"KeyShareSubmission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dkgStarts\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"registrationEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shareDistributionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"disputeEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"keyShareSubmissionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mpkSubmissionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gpkjSubmissionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gpkjDisputeEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dkgComplete\",\"type\":\"uint256\"}],\"name\":\"RegistrationOpen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"encrypted_shares\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[2][]\",\"name\":\"commitments\",\"type\":\"uint256[2][]\"}],\"name\":\"ShareDistribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share3\",\"type\":\"uint256\"}],\"name\":\"ValidatorMember\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"validatorCount\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"ethHeight\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"madHeight\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey3\",\"type\":\"uint256\"}],\"name\":\"ValidatorSet\",\"type\":\"event\"}]",
}

// ETHDKGEventsABI is the input ABI used to generate the binding from.
// Deprecated: Use ETHDKGEventsMetaData.ABI instead.
var ETHDKGEventsABI = ETHDKGEventsMetaData.ABI

// ETHDKGEvents is an auto generated Go binding around an Ethereum contract.
type ETHDKGEvents struct {
	ETHDKGEventsCaller     // Read-only binding to the contract
	ETHDKGEventsTransactor // Write-only binding to the contract
	ETHDKGEventsFilterer   // Log filterer for contract events
}

// ETHDKGEventsCaller is an auto generated read-only Go binding around an Ethereum contract.
type ETHDKGEventsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETHDKGEventsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ETHDKGEventsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETHDKGEventsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ETHDKGEventsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETHDKGEventsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ETHDKGEventsSession struct {
	Contract     *ETHDKGEvents     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ETHDKGEventsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ETHDKGEventsCallerSession struct {
	Contract *ETHDKGEventsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// ETHDKGEventsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ETHDKGEventsTransactorSession struct {
	Contract     *ETHDKGEventsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// ETHDKGEventsRaw is an auto generated low-level Go binding around an Ethereum contract.
type ETHDKGEventsRaw struct {
	Contract *ETHDKGEvents // Generic contract binding to access the raw methods on
}

// ETHDKGEventsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ETHDKGEventsCallerRaw struct {
	Contract *ETHDKGEventsCaller // Generic read-only contract binding to access the raw methods on
}

// ETHDKGEventsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ETHDKGEventsTransactorRaw struct {
	Contract *ETHDKGEventsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewETHDKGEvents creates a new instance of ETHDKGEvents, bound to a specific deployed contract.
func NewETHDKGEvents(address common.Address, backend bind.ContractBackend) (*ETHDKGEvents, error) {
	contract, err := bindETHDKGEvents(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ETHDKGEvents{ETHDKGEventsCaller: ETHDKGEventsCaller{contract: contract}, ETHDKGEventsTransactor: ETHDKGEventsTransactor{contract: contract}, ETHDKGEventsFilterer: ETHDKGEventsFilterer{contract: contract}}, nil
}

// NewETHDKGEventsCaller creates a new read-only instance of ETHDKGEvents, bound to a specific deployed contract.
func NewETHDKGEventsCaller(address common.Address, caller bind.ContractCaller) (*ETHDKGEventsCaller, error) {
	contract, err := bindETHDKGEvents(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ETHDKGEventsCaller{contract: contract}, nil
}

// NewETHDKGEventsTransactor creates a new write-only instance of ETHDKGEvents, bound to a specific deployed contract.
func NewETHDKGEventsTransactor(address common.Address, transactor bind.ContractTransactor) (*ETHDKGEventsTransactor, error) {
	contract, err := bindETHDKGEvents(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ETHDKGEventsTransactor{contract: contract}, nil
}

// NewETHDKGEventsFilterer creates a new log filterer instance of ETHDKGEvents, bound to a specific deployed contract.
func NewETHDKGEventsFilterer(address common.Address, filterer bind.ContractFilterer) (*ETHDKGEventsFilterer, error) {
	contract, err := bindETHDKGEvents(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ETHDKGEventsFilterer{contract: contract}, nil
}

// bindETHDKGEvents binds a generic wrapper to an already deployed contract.
func bindETHDKGEvents(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ETHDKGEventsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ETHDKGEvents *ETHDKGEventsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ETHDKGEvents.Contract.ETHDKGEventsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ETHDKGEvents *ETHDKGEventsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETHDKGEvents.Contract.ETHDKGEventsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ETHDKGEvents *ETHDKGEventsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ETHDKGEvents.Contract.ETHDKGEventsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ETHDKGEvents *ETHDKGEventsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ETHDKGEvents.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ETHDKGEvents *ETHDKGEventsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETHDKGEvents.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ETHDKGEvents *ETHDKGEventsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ETHDKGEvents.Contract.contract.Transact(opts, method, params...)
}

// ETHDKGEventsKeyShareSubmissionIterator is returned from FilterKeyShareSubmission and is used to iterate over the raw logs and unpacked data for KeyShareSubmission events raised by the ETHDKGEvents contract.
type ETHDKGEventsKeyShareSubmissionIterator struct {
	Event *ETHDKGEventsKeyShareSubmission // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGEventsKeyShareSubmissionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGEventsKeyShareSubmission)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGEventsKeyShareSubmission)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGEventsKeyShareSubmissionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGEventsKeyShareSubmissionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGEventsKeyShareSubmission represents a KeyShareSubmission event raised by the ETHDKGEvents contract.
type ETHDKGEventsKeyShareSubmission struct {
	Issuer                     common.Address
	KeyShareG1                 [2]*big.Int
	KeyShareG1CorrectnessProof [2]*big.Int
	KeyShareG2                 [4]*big.Int
	Raw                        types.Log // Blockchain specific contextual infos
}

// FilterKeyShareSubmission is a free log retrieval operation binding the contract event 0xb0ee36c3780de716eb6c83687f433ae2558a6923e090fd238b657fb6c896badc.
//
// Solidity: event KeyShareSubmission(address issuer, uint256[2] key_share_G1, uint256[2] key_share_G1_correctness_proof, uint256[4] key_share_G2)
func (_ETHDKGEvents *ETHDKGEventsFilterer) FilterKeyShareSubmission(opts *bind.FilterOpts) (*ETHDKGEventsKeyShareSubmissionIterator, error) {

	logs, sub, err := _ETHDKGEvents.contract.FilterLogs(opts, "KeyShareSubmission")
	if err != nil {
		return nil, err
	}
	return &ETHDKGEventsKeyShareSubmissionIterator{contract: _ETHDKGEvents.contract, event: "KeyShareSubmission", logs: logs, sub: sub}, nil
}

// WatchKeyShareSubmission is a free log subscription operation binding the contract event 0xb0ee36c3780de716eb6c83687f433ae2558a6923e090fd238b657fb6c896badc.
//
// Solidity: event KeyShareSubmission(address issuer, uint256[2] key_share_G1, uint256[2] key_share_G1_correctness_proof, uint256[4] key_share_G2)
func (_ETHDKGEvents *ETHDKGEventsFilterer) WatchKeyShareSubmission(opts *bind.WatchOpts, sink chan<- *ETHDKGEventsKeyShareSubmission) (event.Subscription, error) {

	logs, sub, err := _ETHDKGEvents.contract.WatchLogs(opts, "KeyShareSubmission")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGEventsKeyShareSubmission)
				if err := _ETHDKGEvents.contract.UnpackLog(event, "KeyShareSubmission", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKeyShareSubmission is a log parse operation binding the contract event 0xb0ee36c3780de716eb6c83687f433ae2558a6923e090fd238b657fb6c896badc.
//
// Solidity: event KeyShareSubmission(address issuer, uint256[2] key_share_G1, uint256[2] key_share_G1_correctness_proof, uint256[4] key_share_G2)
func (_ETHDKGEvents *ETHDKGEventsFilterer) ParseKeyShareSubmission(log types.Log) (*ETHDKGEventsKeyShareSubmission, error) {
	event := new(ETHDKGEventsKeyShareSubmission)
	if err := _ETHDKGEvents.contract.UnpackLog(event, "KeyShareSubmission", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGEventsRegistrationOpenIterator is returned from FilterRegistrationOpen and is used to iterate over the raw logs and unpacked data for RegistrationOpen events raised by the ETHDKGEvents contract.
type ETHDKGEventsRegistrationOpenIterator struct {
	Event *ETHDKGEventsRegistrationOpen // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGEventsRegistrationOpenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGEventsRegistrationOpen)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGEventsRegistrationOpen)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGEventsRegistrationOpenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGEventsRegistrationOpenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGEventsRegistrationOpen represents a RegistrationOpen event raised by the ETHDKGEvents contract.
type ETHDKGEventsRegistrationOpen struct {
	DkgStarts              *big.Int
	RegistrationEnds       *big.Int
	ShareDistributionEnds  *big.Int
	DisputeEnds            *big.Int
	KeyShareSubmissionEnds *big.Int
	MpkSubmissionEnds      *big.Int
	GpkjSubmissionEnds     *big.Int
	GpkjDisputeEnds        *big.Int
	DkgComplete            *big.Int
	Raw                    types.Log // Blockchain specific contextual infos
}

// FilterRegistrationOpen is a free log retrieval operation binding the contract event 0x9c6f8368fe7e77e8cb9438744581403bcb3f53298e517f04c1b8475487402e97.
//
// Solidity: event RegistrationOpen(uint256 dkgStarts, uint256 registrationEnds, uint256 shareDistributionEnds, uint256 disputeEnds, uint256 keyShareSubmissionEnds, uint256 mpkSubmissionEnds, uint256 gpkjSubmissionEnds, uint256 gpkjDisputeEnds, uint256 dkgComplete)
func (_ETHDKGEvents *ETHDKGEventsFilterer) FilterRegistrationOpen(opts *bind.FilterOpts) (*ETHDKGEventsRegistrationOpenIterator, error) {

	logs, sub, err := _ETHDKGEvents.contract.FilterLogs(opts, "RegistrationOpen")
	if err != nil {
		return nil, err
	}
	return &ETHDKGEventsRegistrationOpenIterator{contract: _ETHDKGEvents.contract, event: "RegistrationOpen", logs: logs, sub: sub}, nil
}

// WatchRegistrationOpen is a free log subscription operation binding the contract event 0x9c6f8368fe7e77e8cb9438744581403bcb3f53298e517f04c1b8475487402e97.
//
// Solidity: event RegistrationOpen(uint256 dkgStarts, uint256 registrationEnds, uint256 shareDistributionEnds, uint256 disputeEnds, uint256 keyShareSubmissionEnds, uint256 mpkSubmissionEnds, uint256 gpkjSubmissionEnds, uint256 gpkjDisputeEnds, uint256 dkgComplete)
func (_ETHDKGEvents *ETHDKGEventsFilterer) WatchRegistrationOpen(opts *bind.WatchOpts, sink chan<- *ETHDKGEventsRegistrationOpen) (event.Subscription, error) {

	logs, sub, err := _ETHDKGEvents.contract.WatchLogs(opts, "RegistrationOpen")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGEventsRegistrationOpen)
				if err := _ETHDKGEvents.contract.UnpackLog(event, "RegistrationOpen", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegistrationOpen is a log parse operation binding the contract event 0x9c6f8368fe7e77e8cb9438744581403bcb3f53298e517f04c1b8475487402e97.
//
// Solidity: event RegistrationOpen(uint256 dkgStarts, uint256 registrationEnds, uint256 shareDistributionEnds, uint256 disputeEnds, uint256 keyShareSubmissionEnds, uint256 mpkSubmissionEnds, uint256 gpkjSubmissionEnds, uint256 gpkjDisputeEnds, uint256 dkgComplete)
func (_ETHDKGEvents *ETHDKGEventsFilterer) ParseRegistrationOpen(log types.Log) (*ETHDKGEventsRegistrationOpen, error) {
	event := new(ETHDKGEventsRegistrationOpen)
	if err := _ETHDKGEvents.contract.UnpackLog(event, "RegistrationOpen", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGEventsShareDistributionIterator is returned from FilterShareDistribution and is used to iterate over the raw logs and unpacked data for ShareDistribution events raised by the ETHDKGEvents contract.
type ETHDKGEventsShareDistributionIterator struct {
	Event *ETHDKGEventsShareDistribution // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGEventsShareDistributionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGEventsShareDistribution)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGEventsShareDistribution)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGEventsShareDistributionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGEventsShareDistributionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGEventsShareDistribution represents a ShareDistribution event raised by the ETHDKGEvents contract.
type ETHDKGEventsShareDistribution struct {
	Issuer          common.Address
	Index           *big.Int
	EncryptedShares []*big.Int
	Commitments     [][2]*big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterShareDistribution is a free log retrieval operation binding the contract event 0xa84d294194d6169652a99150fd2ef10e18b0d2caa10beeea237bbddcc6e22b10.
//
// Solidity: event ShareDistribution(address issuer, uint256 index, uint256[] encrypted_shares, uint256[2][] commitments)
func (_ETHDKGEvents *ETHDKGEventsFilterer) FilterShareDistribution(opts *bind.FilterOpts) (*ETHDKGEventsShareDistributionIterator, error) {

	logs, sub, err := _ETHDKGEvents.contract.FilterLogs(opts, "ShareDistribution")
	if err != nil {
		return nil, err
	}
	return &ETHDKGEventsShareDistributionIterator{contract: _ETHDKGEvents.contract, event: "ShareDistribution", logs: logs, sub: sub}, nil
}

// WatchShareDistribution is a free log subscription operation binding the contract event 0xa84d294194d6169652a99150fd2ef10e18b0d2caa10beeea237bbddcc6e22b10.
//
// Solidity: event ShareDistribution(address issuer, uint256 index, uint256[] encrypted_shares, uint256[2][] commitments)
func (_ETHDKGEvents *ETHDKGEventsFilterer) WatchShareDistribution(opts *bind.WatchOpts, sink chan<- *ETHDKGEventsShareDistribution) (event.Subscription, error) {

	logs, sub, err := _ETHDKGEvents.contract.WatchLogs(opts, "ShareDistribution")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGEventsShareDistribution)
				if err := _ETHDKGEvents.contract.UnpackLog(event, "ShareDistribution", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseShareDistribution is a log parse operation binding the contract event 0xa84d294194d6169652a99150fd2ef10e18b0d2caa10beeea237bbddcc6e22b10.
//
// Solidity: event ShareDistribution(address issuer, uint256 index, uint256[] encrypted_shares, uint256[2][] commitments)
func (_ETHDKGEvents *ETHDKGEventsFilterer) ParseShareDistribution(log types.Log) (*ETHDKGEventsShareDistribution, error) {
	event := new(ETHDKGEventsShareDistribution)
	if err := _ETHDKGEvents.contract.UnpackLog(event, "ShareDistribution", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGEventsValidatorMemberIterator is returned from FilterValidatorMember and is used to iterate over the raw logs and unpacked data for ValidatorMember events raised by the ETHDKGEvents contract.
type ETHDKGEventsValidatorMemberIterator struct {
	Event *ETHDKGEventsValidatorMember // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGEventsValidatorMemberIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGEventsValidatorMember)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGEventsValidatorMember)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGEventsValidatorMemberIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGEventsValidatorMemberIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGEventsValidatorMember represents a ValidatorMember event raised by the ETHDKGEvents contract.
type ETHDKGEventsValidatorMember struct {
	Account common.Address
	Epoch   *big.Int
	Index   *big.Int
	Share0  *big.Int
	Share1  *big.Int
	Share2  *big.Int
	Share3  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterValidatorMember is a free log retrieval operation binding the contract event 0x113b129fac2dde341b9fbbec2bb79a95b9945b0e80fda711fc8ae5c7b0ea83b0.
//
// Solidity: event ValidatorMember(address account, uint256 epoch, uint256 index, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_ETHDKGEvents *ETHDKGEventsFilterer) FilterValidatorMember(opts *bind.FilterOpts) (*ETHDKGEventsValidatorMemberIterator, error) {

	logs, sub, err := _ETHDKGEvents.contract.FilterLogs(opts, "ValidatorMember")
	if err != nil {
		return nil, err
	}
	return &ETHDKGEventsValidatorMemberIterator{contract: _ETHDKGEvents.contract, event: "ValidatorMember", logs: logs, sub: sub}, nil
}

// WatchValidatorMember is a free log subscription operation binding the contract event 0x113b129fac2dde341b9fbbec2bb79a95b9945b0e80fda711fc8ae5c7b0ea83b0.
//
// Solidity: event ValidatorMember(address account, uint256 epoch, uint256 index, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_ETHDKGEvents *ETHDKGEventsFilterer) WatchValidatorMember(opts *bind.WatchOpts, sink chan<- *ETHDKGEventsValidatorMember) (event.Subscription, error) {

	logs, sub, err := _ETHDKGEvents.contract.WatchLogs(opts, "ValidatorMember")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGEventsValidatorMember)
				if err := _ETHDKGEvents.contract.UnpackLog(event, "ValidatorMember", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorMember is a log parse operation binding the contract event 0x113b129fac2dde341b9fbbec2bb79a95b9945b0e80fda711fc8ae5c7b0ea83b0.
//
// Solidity: event ValidatorMember(address account, uint256 epoch, uint256 index, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_ETHDKGEvents *ETHDKGEventsFilterer) ParseValidatorMember(log types.Log) (*ETHDKGEventsValidatorMember, error) {
	event := new(ETHDKGEventsValidatorMember)
	if err := _ETHDKGEvents.contract.UnpackLog(event, "ValidatorMember", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGEventsValidatorSetIterator is returned from FilterValidatorSet and is used to iterate over the raw logs and unpacked data for ValidatorSet events raised by the ETHDKGEvents contract.
type ETHDKGEventsValidatorSetIterator struct {
	Event *ETHDKGEventsValidatorSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGEventsValidatorSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGEventsValidatorSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGEventsValidatorSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGEventsValidatorSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGEventsValidatorSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGEventsValidatorSet represents a ValidatorSet event raised by the ETHDKGEvents contract.
type ETHDKGEventsValidatorSet struct {
	ValidatorCount uint8
	Epoch          *big.Int
	EthHeight      uint32
	MadHeight      uint32
	GroupKey0      *big.Int
	GroupKey1      *big.Int
	GroupKey2      *big.Int
	GroupKey3      *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterValidatorSet is a free log retrieval operation binding the contract event 0x1c85ff1efe0a905f8feca811e617102cb7ec896aded693eb96366c8ef22bb09f.
//
// Solidity: event ValidatorSet(uint8 validatorCount, uint256 epoch, uint32 ethHeight, uint32 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_ETHDKGEvents *ETHDKGEventsFilterer) FilterValidatorSet(opts *bind.FilterOpts) (*ETHDKGEventsValidatorSetIterator, error) {

	logs, sub, err := _ETHDKGEvents.contract.FilterLogs(opts, "ValidatorSet")
	if err != nil {
		return nil, err
	}
	return &ETHDKGEventsValidatorSetIterator{contract: _ETHDKGEvents.contract, event: "ValidatorSet", logs: logs, sub: sub}, nil
}

// WatchValidatorSet is a free log subscription operation binding the contract event 0x1c85ff1efe0a905f8feca811e617102cb7ec896aded693eb96366c8ef22bb09f.
//
// Solidity: event ValidatorSet(uint8 validatorCount, uint256 epoch, uint32 ethHeight, uint32 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_ETHDKGEvents *ETHDKGEventsFilterer) WatchValidatorSet(opts *bind.WatchOpts, sink chan<- *ETHDKGEventsValidatorSet) (event.Subscription, error) {

	logs, sub, err := _ETHDKGEvents.contract.WatchLogs(opts, "ValidatorSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGEventsValidatorSet)
				if err := _ETHDKGEvents.contract.UnpackLog(event, "ValidatorSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorSet is a log parse operation binding the contract event 0x1c85ff1efe0a905f8feca811e617102cb7ec896aded693eb96366c8ef22bb09f.
//
// Solidity: event ValidatorSet(uint8 validatorCount, uint256 epoch, uint32 ethHeight, uint32 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_ETHDKGEvents *ETHDKGEventsFilterer) ParseValidatorSet(log types.Log) (*ETHDKGEventsValidatorSet, error) {
	event := new(ETHDKGEventsValidatorSet)
	if err := _ETHDKGEvents.contract.UnpackLog(event, "ValidatorSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// EthDKGCompletionFacetMetaData contains all meta data concerning the EthDKGCompletionFacet contract.
var EthDKGCompletionFacetMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"Successful_Completion\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50611642806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806365c97c0114610030575b600080fd5b61003861004e565b60405161004591906111e7565b60405180910390f35b600080610059610a8f565b9050438160190154108015610072575080601a01544311155b6100b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100a890611202565b60405180910390fd5b60008160120160049054906101000a900460ff16610a7b5760006001905060005b83600001805490508110156104385760008460000182815481106100f9576100f8611535565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008560050160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006004811061017c5761017b611535565b5b01541480156101e0575060008560050160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001600481106101dc576101db611535565b5b0154145b8015610241575060008560050160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060026004811061023d5761023c611535565b5b0154145b80156102a2575060008560050160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060036004811061029e5761029d611535565b5b0154145b15610424578460080160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561038f5784600d0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166357b4f82a826040518263ffffffff1660e01b8152600401610358919061115d565b600060405180830381600087803b15801561037257600080fd5b505af1158015610386573d6000803e3d6000fd5b5050505061041f565b84600d0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d2a2c55c826040518263ffffffff1660e01b81526004016103ec919061115d565b600060405180830381600087803b15801561040657600080fd5b505af115801561041a573d6000803e3d6000fd5b505050505b600092505b5080806104309061148e565b9150506100d2565b50806104475760019150610a79565b60018360120160046101000a81548160ff0219169083151502179055506000600184600d0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663900cf0cf6040518163ffffffff1660e01b815260040160206040518083038186803b1580156104d257600080fd5b505afa1580156104e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050a9190611086565b61051491906113e3565b9050600084600d0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e380b228836040518263ffffffff1660e01b815260040161057591906112af565b60206040518083038186803b15801561058d57600080fd5b505afa1580156105a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c591906110b3565b9050600085600d0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634f4ea614846040518263ffffffff1660e01b815260040161062691906112af565b60206040518083038186803b15801561063e57600080fd5b505afa158015610652573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067691906110b3565b90507f1c85ff1efe0a905f8feca811e617102cb7ec896aded693eb96366c8ef22bb09f866000018054905087600d0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663900cf0cf6040518163ffffffff1660e01b815260040160206040518083038186803b15801561070b57600080fd5b505afa15801561071f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107439190611086565b84848a60090160006004811061075c5761075b611535565b5b01548b60090160016004811061077557610774611535565b5b01548c60090160026004811061078e5761078d611535565b5b01548d6009016003600481106107a7576107a6611535565b5b01546040516107bd9897969594939291906112ca565b60405180910390a160005b8660000180549050811015610a745760008760000182815481106107ef576107ee611535565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690507f113b129fac2dde341b9fbbec2bb79a95b9945b0e80fda711fc8ae5c7b0ea83b08189600d0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663900cf0cf6040518163ffffffff1660e01b815260040160206040518083038186803b1580156108a857600080fd5b505afa1580156108bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e09190611086565b6001856108ed9190611359565b8b60050160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006004811061094157610940611535565b5b01548c60050160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060016004811061099757610996611535565b5b01548d60050160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002600481106109ed576109ec611535565b5b01548e60050160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600360048110610a4357610a42611535565b5b0154604051610a589796959493929190611178565b60405180910390a1508080610a6c9061148e565b9150506107c8565b505050505b505b8015610a8a57610a89610abc565b5b505090565b6000807fd2d37756412c577f56b4802b8e643c9a817fa92cc18ff383f317fce7fab4282b90508091505090565b6000610ac6610a8f565b90506000439050816010015481610add9190611359565b8260130181905550816010015482600f01548360130154610afe9190611359565b610b089190611359565b8260140181905550816010015482600f01548360140154610b299190611359565b610b339190611359565b8260150181905550816010015482600f01548360150154610b549190611359565b610b5e9190611359565b8260160181905550816010015482600f01548360160154610b7f9190611359565b610b899190611359565b8260170181905550816010015482600f01548360170154610baa9190611359565b610bb49190611359565b8260180181905550816010015482600f01548360180154610bd59190611359565b610bdf9190611359565b8260190181905550816010015482600f01548360190154610c009190611359565b610c0a9190611359565b82601a01819055507f9c6f8368fe7e77e8cb9438744581403bcb3f53298e517f04c1b8475487402e978183601301548460140154856015015486601601548760170154886018015489601901548a601a0154604051610c7199989796959493929190611222565b60405180910390a160008260120160006101000a81548160ff02191690831515021790555060008260120160016101000a81548160ff02191690831515021790555060008260120160026101000a81548160ff02191690831515021790555060008260120160036101000a81548160ff02191690831515021790555060008260120160046101000a81548160ff021916908315150217905550816009016000610d1a9190611032565b5b60008260000180549050111561102e5760008260000160018460000180549050610d4591906113af565b81548110610d5657610d55611535565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508260010160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000610dd0919061104e565b8260020160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600090558260030160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000610e62919061104e565b8260040160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000610eaf919061104e565b8260050160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000610efc9190611032565b8260060160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000610f49919061104e565b8260080160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff02191690558260070160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000905582600001805480610ff357610ff2611506565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055905550610d1b565b5050565b5060008155600101600081556001016000815560010160009055565b506000815560010160009055565b60008151905061106b816115de565b92915050565b600081519050611080816115f5565b92915050565b60006020828403121561109c5761109b611564565b5b60006110aa8482850161105c565b91505092915050565b6000602082840312156110c9576110c8611564565b5b60006110d784828501611071565b91505092915050565b6110e981611417565b82525050565b6110f881611429565b82525050565b600061110b604583611348565b915061111682611569565b606082019050919050565b61112a81611455565b82525050565b6111398161147c565b82525050565b6111488161145f565b82525050565b6111578161146f565b82525050565b600060208201905061117260008301846110e0565b92915050565b600060e08201905061118d600083018a6110e0565b61119a6020830189611121565b6111a76040830188611121565b6111b46060830187611121565b6111c16080830186611121565b6111ce60a0830185611121565b6111db60c0830184611121565b98975050505050505050565b60006020820190506111fc60008301846110ef565b92915050565b6000602082019050818103600083015261121b816110fe565b9050919050565b600061012082019050611238600083018c611121565b611245602083018b611121565b611252604083018a611121565b61125f6060830189611121565b61126c6080830188611121565b61127960a0830187611121565b61128660c0830186611121565b61129360e0830185611121565b6112a1610100830184611121565b9a9950505050505050505050565b60006020820190506112c46000830184611130565b92915050565b6000610100820190506112e0600083018b61114e565b6112ed602083018a611121565b6112fa604083018961113f565b611307606083018861113f565b6113146080830187611121565b61132160a0830186611121565b61132e60c0830185611121565b61133b60e0830184611121565b9998505050505050505050565b600082825260208201905092915050565b600061136482611455565b915061136f83611455565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156113a4576113a36114d7565b5b828201905092915050565b60006113ba82611455565b91506113c583611455565b9250828210156113d8576113d76114d7565b5b828203905092915050565b60006113ee8261145f565b91506113f98361145f565b92508282101561140c5761140b6114d7565b5b828203905092915050565b600061142282611435565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600060ff82169050919050565b60006114878261145f565b9050919050565b600061149982611455565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156114cc576114cb6114d7565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b7f7375636365737366756c20636f6d706c6574696f6e206973206f6e6c7920616660008201527f7465722077696e646f7720666f722061636375736174696f6e7320686173206360208201527f6c6f736564000000000000000000000000000000000000000000000000000000604082015250565b6115e781611455565b81146115f257600080fd5b50565b6115fe8161145f565b811461160957600080fd5b5056fea2646970667358221220244cdf3a5a101fc53d602f3dc67ab88e53223f8f0afbf8820df38c192ef63de964736f6c63430008060033",
}

// EthDKGCompletionFacetABI is the input ABI used to generate the binding from.
// Deprecated: Use EthDKGCompletionFacetMetaData.ABI instead.
var EthDKGCompletionFacetABI = EthDKGCompletionFacetMetaData.ABI

// EthDKGCompletionFacetBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use EthDKGCompletionFacetMetaData.Bin instead.
var EthDKGCompletionFacetBin = EthDKGCompletionFacetMetaData.Bin

// DeployEthDKGCompletionFacet deploys a new Ethereum contract, binding an instance of EthDKGCompletionFacet to it.
func DeployEthDKGCompletionFacet(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *EthDKGCompletionFacet, error) {
	parsed, err := EthDKGCompletionFacetMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(EthDKGCompletionFacetBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &EthDKGCompletionFacet{EthDKGCompletionFacetCaller: EthDKGCompletionFacetCaller{contract: contract}, EthDKGCompletionFacetTransactor: EthDKGCompletionFacetTransactor{contract: contract}, EthDKGCompletionFacetFilterer: EthDKGCompletionFacetFilterer{contract: contract}}, nil
}

// EthDKGCompletionFacet is an auto generated Go binding around an Ethereum contract.
type EthDKGCompletionFacet struct {
	EthDKGCompletionFacetCaller     // Read-only binding to the contract
	EthDKGCompletionFacetTransactor // Write-only binding to the contract
	EthDKGCompletionFacetFilterer   // Log filterer for contract events
}

// EthDKGCompletionFacetCaller is an auto generated read-only Go binding around an Ethereum contract.
type EthDKGCompletionFacetCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EthDKGCompletionFacetTransactor is an auto generated write-only Go binding around an Ethereum contract.
type EthDKGCompletionFacetTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EthDKGCompletionFacetFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type EthDKGCompletionFacetFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EthDKGCompletionFacetSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type EthDKGCompletionFacetSession struct {
	Contract     *EthDKGCompletionFacet // Generic contract binding to set the session for
	CallOpts     bind.CallOpts          // Call options to use throughout this session
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// EthDKGCompletionFacetCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type EthDKGCompletionFacetCallerSession struct {
	Contract *EthDKGCompletionFacetCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                // Call options to use throughout this session
}

// EthDKGCompletionFacetTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type EthDKGCompletionFacetTransactorSession struct {
	Contract     *EthDKGCompletionFacetTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                // Transaction auth options to use throughout this session
}

// EthDKGCompletionFacetRaw is an auto generated low-level Go binding around an Ethereum contract.
type EthDKGCompletionFacetRaw struct {
	Contract *EthDKGCompletionFacet // Generic contract binding to access the raw methods on
}

// EthDKGCompletionFacetCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type EthDKGCompletionFacetCallerRaw struct {
	Contract *EthDKGCompletionFacetCaller // Generic read-only contract binding to access the raw methods on
}

// EthDKGCompletionFacetTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type EthDKGCompletionFacetTransactorRaw struct {
	Contract *EthDKGCompletionFacetTransactor // Generic write-only contract binding to access the raw methods on
}

// NewEthDKGCompletionFacet creates a new instance of EthDKGCompletionFacet, bound to a specific deployed contract.
func NewEthDKGCompletionFacet(address common.Address, backend bind.ContractBackend) (*EthDKGCompletionFacet, error) {
	contract, err := bindEthDKGCompletionFacet(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &EthDKGCompletionFacet{EthDKGCompletionFacetCaller: EthDKGCompletionFacetCaller{contract: contract}, EthDKGCompletionFacetTransactor: EthDKGCompletionFacetTransactor{contract: contract}, EthDKGCompletionFacetFilterer: EthDKGCompletionFacetFilterer{contract: contract}}, nil
}

// NewEthDKGCompletionFacetCaller creates a new read-only instance of EthDKGCompletionFacet, bound to a specific deployed contract.
func NewEthDKGCompletionFacetCaller(address common.Address, caller bind.ContractCaller) (*EthDKGCompletionFacetCaller, error) {
	contract, err := bindEthDKGCompletionFacet(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &EthDKGCompletionFacetCaller{contract: contract}, nil
}

// NewEthDKGCompletionFacetTransactor creates a new write-only instance of EthDKGCompletionFacet, bound to a specific deployed contract.
func NewEthDKGCompletionFacetTransactor(address common.Address, transactor bind.ContractTransactor) (*EthDKGCompletionFacetTransactor, error) {
	contract, err := bindEthDKGCompletionFacet(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &EthDKGCompletionFacetTransactor{contract: contract}, nil
}

// NewEthDKGCompletionFacetFilterer creates a new log filterer instance of EthDKGCompletionFacet, bound to a specific deployed contract.
func NewEthDKGCompletionFacetFilterer(address common.Address, filterer bind.ContractFilterer) (*EthDKGCompletionFacetFilterer, error) {
	contract, err := bindEthDKGCompletionFacet(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &EthDKGCompletionFacetFilterer{contract: contract}, nil
}

// bindEthDKGCompletionFacet binds a generic wrapper to an already deployed contract.
func bindEthDKGCompletionFacet(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(EthDKGCompletionFacetABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_EthDKGCompletionFacet *EthDKGCompletionFacetRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _EthDKGCompletionFacet.Contract.EthDKGCompletionFacetCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_EthDKGCompletionFacet *EthDKGCompletionFacetRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EthDKGCompletionFacet.Contract.EthDKGCompletionFacetTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_EthDKGCompletionFacet *EthDKGCompletionFacetRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _EthDKGCompletionFacet.Contract.EthDKGCompletionFacetTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_EthDKGCompletionFacet *EthDKGCompletionFacetCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _EthDKGCompletionFacet.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_EthDKGCompletionFacet *EthDKGCompletionFacetTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EthDKGCompletionFacet.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_EthDKGCompletionFacet *EthDKGCompletionFacetTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _EthDKGCompletionFacet.Contract.contract.Transact(opts, method, params...)
}

// SuccessfulCompletion is a paid mutator transaction binding the contract method 0x65c97c01.
//
// Solidity: function Successful_Completion() returns(bool)
func (_EthDKGCompletionFacet *EthDKGCompletionFacetTransactor) SuccessfulCompletion(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EthDKGCompletionFacet.contract.Transact(opts, "Successful_Completion")
}

// SuccessfulCompletion is a paid mutator transaction binding the contract method 0x65c97c01.
//
// Solidity: function Successful_Completion() returns(bool)
func (_EthDKGCompletionFacet *EthDKGCompletionFacetSession) SuccessfulCompletion() (*types.Transaction, error) {
	return _EthDKGCompletionFacet.Contract.SuccessfulCompletion(&_EthDKGCompletionFacet.TransactOpts)
}

// SuccessfulCompletion is a paid mutator transaction binding the contract method 0x65c97c01.
//
// Solidity: function Successful_Completion() returns(bool)
func (_EthDKGCompletionFacet *EthDKGCompletionFacetTransactorSession) SuccessfulCompletion() (*types.Transaction, error) {
	return _EthDKGCompletionFacet.Contract.SuccessfulCompletion(&_EthDKGCompletionFacet.TransactOpts)
}

// EthDKGDiamondMetaData contains all meta data concerning the EthDKGDiamond contract.
var EthDKGDiamondMetaData = &bind.MetaData{
	ABI: "[{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "",
}

// EthDKGDiamondABI is the input ABI used to generate the binding from.
// Deprecated: Use EthDKGDiamondMetaData.ABI instead.
var EthDKGDiamondABI = EthDKGDiamondMetaData.ABI

// EthDKGDiamondBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use EthDKGDiamondMetaData.Bin instead.
var EthDKGDiamondBin = EthDKGDiamondMetaData.Bin

// DeployEthDKGDiamond deploys a new Ethereum contract, binding an instance of EthDKGDiamond to it.
func DeployEthDKGDiamond(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *EthDKGDiamond, error) {
	parsed, err := EthDKGDiamondMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(EthDKGDiamondBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &EthDKGDiamond{EthDKGDiamondCaller: EthDKGDiamondCaller{contract: contract}, EthDKGDiamondTransactor: EthDKGDiamondTransactor{contract: contract}, EthDKGDiamondFilterer: EthDKGDiamondFilterer{contract: contract}}, nil
}

// EthDKGDiamond is an auto generated Go binding around an Ethereum contract.
type EthDKGDiamond struct {
	EthDKGDiamondCaller     // Read-only binding to the contract
	EthDKGDiamondTransactor // Write-only binding to the contract
	EthDKGDiamondFilterer   // Log filterer for contract events
}

// EthDKGDiamondCaller is an auto generated read-only Go binding around an Ethereum contract.
type EthDKGDiamondCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EthDKGDiamondTransactor is an auto generated write-only Go binding around an Ethereum contract.
type EthDKGDiamondTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EthDKGDiamondFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type EthDKGDiamondFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EthDKGDiamondSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type EthDKGDiamondSession struct {
	Contract     *EthDKGDiamond    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// EthDKGDiamondCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type EthDKGDiamondCallerSession struct {
	Contract *EthDKGDiamondCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// EthDKGDiamondTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type EthDKGDiamondTransactorSession struct {
	Contract     *EthDKGDiamondTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// EthDKGDiamondRaw is an auto generated low-level Go binding around an Ethereum contract.
type EthDKGDiamondRaw struct {
	Contract *EthDKGDiamond // Generic contract binding to access the raw methods on
}

// EthDKGDiamondCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type EthDKGDiamondCallerRaw struct {
	Contract *EthDKGDiamondCaller // Generic read-only contract binding to access the raw methods on
}

// EthDKGDiamondTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type EthDKGDiamondTransactorRaw struct {
	Contract *EthDKGDiamondTransactor // Generic write-only contract binding to access the raw methods on
}

// NewEthDKGDiamond creates a new instance of EthDKGDiamond, bound to a specific deployed contract.
func NewEthDKGDiamond(address common.Address, backend bind.ContractBackend) (*EthDKGDiamond, error) {
	contract, err := bindEthDKGDiamond(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &EthDKGDiamond{EthDKGDiamondCaller: EthDKGDiamondCaller{contract: contract}, EthDKGDiamondTransactor: EthDKGDiamondTransactor{contract: contract}, EthDKGDiamondFilterer: EthDKGDiamondFilterer{contract: contract}}, nil
}

// NewEthDKGDiamondCaller creates a new read-only instance of EthDKGDiamond, bound to a specific deployed contract.
func NewEthDKGDiamondCaller(address common.Address, caller bind.ContractCaller) (*EthDKGDiamondCaller, error) {
	contract, err := bindEthDKGDiamond(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &EthDKGDiamondCaller{contract: contract}, nil
}

// NewEthDKGDiamondTransactor creates a new write-only instance of EthDKGDiamond, bound to a specific deployed contract.
func NewEthDKGDiamondTransactor(address common.Address, transactor bind.ContractTransactor) (*EthDKGDiamondTransactor, error) {
	contract, err := bindEthDKGDiamond(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &EthDKGDiamondTransactor{contract: contract}, nil
}

// NewEthDKGDiamondFilterer creates a new log filterer instance of EthDKGDiamond, bound to a specific deployed contract.
func NewEthDKGDiamondFilterer(address common.Address, filterer bind.ContractFilterer) (*EthDKGDiamondFilterer, error) {
	contract, err := bindEthDKGDiamond(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &EthDKGDiamondFilterer{contract: contract}, nil
}

// bindEthDKGDiamond binds a generic wrapper to an already deployed contract.
func bindEthDKGDiamond(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(EthDKGDiamondABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_EthDKGDiamond *EthDKGDiamondRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _EthDKGDiamond.Contract.EthDKGDiamondCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_EthDKGDiamond *EthDKGDiamondRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EthDKGDiamond.Contract.EthDKGDiamondTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_EthDKGDiamond *EthDKGDiamondRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _EthDKGDiamond.Contract.EthDKGDiamondTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_EthDKGDiamond *EthDKGDiamondCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _EthDKGDiamond.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_EthDKGDiamond *EthDKGDiamondTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EthDKGDiamond.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_EthDKGDiamond *EthDKGDiamondTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _EthDKGDiamond.Contract.contract.Transact(opts, method, params...)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_EthDKGDiamond *EthDKGDiamondTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _EthDKGDiamond.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_EthDKGDiamond *EthDKGDiamondSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _EthDKGDiamond.Contract.Fallback(&_EthDKGDiamond.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_EthDKGDiamond *EthDKGDiamondTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _EthDKGDiamond.Contract.Fallback(&_EthDKGDiamond.TransactOpts, calldata)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_EthDKGDiamond *EthDKGDiamondTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EthDKGDiamond.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_EthDKGDiamond *EthDKGDiamondSession) Receive() (*types.Transaction, error) {
	return _EthDKGDiamond.Contract.Receive(&_EthDKGDiamond.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_EthDKGDiamond *EthDKGDiamondTransactorSession) Receive() (*types.Transaction, error) {
	return _EthDKGDiamond.Contract.Receive(&_EthDKGDiamond.TransactOpts)
}

// EthDKGGroupAccusationFacetMetaData contains all meta data concerning the EthDKGGroupAccusationFacet contract.
var EthDKGGroupAccusationFacetMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"invArray\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"honestIndices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"dishonestIndices\",\"type\":\"uint256[]\"}],\"name\":\"Group_Accusation_GPKj\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[][]\",\"name\":\"encrypted_shares\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256[2][][]\",\"name\":\"commitments\",\"type\":\"uint256[2][][]\"},{\"internalType\":\"uint256\",\"name\":\"dishonest_list_idx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dishonestAddress\",\"type\":\"address\"}],\"name\":\"Group_Accusation_GPKj_Comp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50614c33806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063a68728331461003b578063d7c47ff214610057575b600080fd5b610055600480360381019061005091906133f1565b610073565b005b610071600480360381019061006c9190613352565b6108ef565b005b600061007d6117ec565b9050438160180154108015610096575080601901544311155b6100d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100cc90613aa3565b60405180910390fd5b6000600382600001805490506100eb9190613f8c565b905060008160026100fc91906140d4565b905081600361010b91906140d4565b836000018054905061011d91906141c2565b60021415610135576001816101329190613ecc565b90505b6001816101429190613ecc565b85511015610185576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161017c90613c43565b60405180910390fd5b61019785858560000180549050611819565b6101d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101cd90613b63565b60405180910390fd5b60606001826101e59190613ecc565b67ffffffffffffffff8111156101fe576101fd61443c565b5b60405190808252806020026020018201604052801561023757816020015b610224612f82565b81526020019060019003908161021c5790505b50905060606001836102499190613ecc565b67ffffffffffffffff8111156102625761026161443c565b5b6040519080825280602002602001820160405280156102905781602001602082028036833780820191505090505b5090506000806102a78a886000018054905061195e565b6102e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102dd90613ae3565b60405180910390fd5b600095505b6001856102f89190613ecc565b861015610439578886815181106103125761031161440d565b5b602002602001015191508660000160018361032d91906141c2565b8154811061033e5761033d61440d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508660060160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002806020026040519081016040528092919082600280156103e3576020028201915b8154815260200190600101908083116103cf575b50505050508487815181106103fb576103fa61440d565b5b60200260200101819052508183878151811061041a5761041961440d565b5b6020026020010181815250508580610431906142fe565b9650506102eb565b60006104478585888e611a55565b905061051f88600e01805461045b9061429b565b80601f01602080910402602001604051908101604052809291908181526020018280546104879061429b565b80156104d45780601f106104a9576101008083540402835291602001916104d4565b820191906000526020600020905b8154815290600101906020018083116104b757829003601f168201915b5050505050828a600901600480602002604051908101604052809291908260048015610515576020028201915b815481526020019060010190808311610501575b5050505050611b5d565b61055e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055590613ba3565b60405180910390fd5b600096505b88518710156108e25788878151811061057f5761057e61440d565b5b602002602001015192508760000160018461059a91906141c2565b815481106105ab576105aa61440d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169150828487815181106105ec576105eb61440d565b5b6020026020010181815250508760060160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600280602002604051908101604052809291908260028015610670576020028201915b81548152602001906001019080831161065c575b50505050508587815181106106885761068761440d565b5b602002602001018190525061069f8585888e611a55565b905061077788600e0180546106b39061429b565b80601f01602080910402602001604051908101604052809291908181526020018280546106df9061429b565b801561072c5780601f106107015761010080835404028352916020019161072c565b820191906000526020600020905b81548152906001019060200180831161070f57829003601f168201915b5050505050828a60090160048060200260405190810160405280929190826004801561076d576020028201915b815481526020019060010190808311610759575b5050505050611b5d565b610827578760050160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006107c89190612fa4565b60018860080160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506108cf565b8760050160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006108749190612fa4565b60018860080160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b86806108da906142fe565b975050610563565b5050505050505050505050565b60006108f96117ec565b9050438160180154108015610912575080601901544311155b610951576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094890613b43565b60405180910390fd5b600081600001805490509050600060038261096c9190613f8c565b9050600081600261097d91906140d4565b905081600361098c91906140d4565b8361099791906141c2565b600214156109af576001816109ac9190613ecc565b90505b8288511480156109bf5750828751145b6109fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f590613c23565b60405180910390fd5b600091505b82821015610af057600183610a1891906141c2565b888381518110610a2b57610a2a61440d565b5b60200260200101515114610a74576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6b906139e3565b60405180910390fd5b600181610a819190613ecc565b878381518110610a9457610a9361440d565b5b60200260200101515114610add576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad490613b03565b60405180910390fd5b8180610ae8906142fe565b925050610a03565b600091505b82821015610c35576000846000018381548110610b1557610b1461440d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050888381518110610b5557610b5461440d565b5b6020026020010151888481518110610b7057610b6f61440d565b5b6020026020010151604051602001610b89929190613957565b604051602081830303815290604052805190602001208560020160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414610c21576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1890613a63565b60405180910390fd5b508180610c2d906142fe565b925050610af5565b60008460050160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060048110610c8b57610c8a61440d565b5b0154148015610cef575060008460050160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600160048110610ceb57610cea61440d565b5b0154145b8015610d50575060008460050160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600260048110610d4c57610d4b61440d565b5b0154145b8015610db1575060008460050160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600360048110610dad57610dac61440d565b5b0154145b15610dbf57505050506117e6565b8473ffffffffffffffffffffffffffffffffffffffff16846000018781548110610dec57610deb61440d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610e6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e6490613a83565b60405180910390fd5b6000600187610e7c9190613ecc565b90506000610e88612f82565b610e90612f82565b60008b600081518110610ea657610ea561440d565b5b6020026020010151600081518110610ec157610ec061440d565b5b60200260200101519250600190505b87811015610fe057610fcb604051806080016040528085600060028110610efa57610ef961440d565b5b6020020151815260200185600160028110610f1857610f1761440d565b5b602002015181526020018e8481518110610f3557610f3461440d565b5b6020026020010151600081518110610f5057610f4f61440d565b5b6020026020010151600060028110610f6b57610f6a61440d565b5b602002015181526020018e8481518110610f8857610f8761440d565b5b6020026020010151600081518110610fa357610fa261440d565b5b6020026020010151600160028110610fbe57610fbd61440d565b5b6020020151815250611d16565b92508080610fd8906142fe565b915050610ed0565b8b600081518110610ff457610ff361440d565b5b602002602001015160018151811061100f5761100e61440d565b5b60200260200101519150849350600190505b878110156111315761111c60405180608001604052808460006002811061104b5761104a61440d565b5b60200201518152602001846001600281106110695761106861440d565b5b602002015181526020018e84815181106110865761108561440d565b5b60200260200101516001815181106110a1576110a061440d565b5b60200260200101516000600281106110bc576110bb61440d565b5b602002015181526020018e84815181106110d9576110d861440d565b5b60200260200101516001815181106110f4576110f361440d565b5b602002602001015160016002811061110f5761110e61440d565b5b6020020151815250611d16565b91508080611129906142fe565b915050611021565b6111846040518060600160405280846000600281106111535761115261440d565b5b60200201518152602001846001600281106111715761117061440d565b5b6020020151815260200186815250611d74565b915061120f6040518060800160405280856000600281106111a8576111a761440d565b5b60200201518152602001856001600281106111c6576111c561440d565b5b60200201518152602001846000600281106111e4576111e361440d565b5b60200201518152602001846001600281106112025761120161440d565b5b6020020151815250611d16565b9250600296505b85871161148f578b6000815181106112315761123061440d565b5b6020026020010151878151811061124b5761124a61440d565b5b602002602001015191507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000180611284576112836143af565b5b8585099350600190505b8781101561139c576113876040518060800160405280846000600281106112b8576112b761440d565b5b60200201518152602001846001600281106112d6576112d561440d565b5b602002015181526020018e84815181106112f3576112f261440d565b5b60200260200101518a8151811061130d5761130c61440d565b5b60200260200101516000600281106113285761132761440d565b5b602002015181526020018e84815181106113455761134461440d565b5b60200260200101518a8151811061135f5761135e61440d565b5b602002602001015160016002811061137a5761137961440d565b5b6020020151815250611d16565b91508080611394906142fe565b91505061128e565b6113ef6040518060600160405280846000600281106113be576113bd61440d565b5b60200201518152602001846001600281106113dc576113db61440d565b5b6020020151815260200186815250611d74565b915061147a6040518060800160405280856000600281106114135761141261440d565b5b60200201518152602001856001600281106114315761143061440d565b5b602002015181526020018460006002811061144f5761144e61440d565b5b602002015181526020018460016002811061146d5761146c61440d565b5b6020020151815250611d16565b92508680611487906142fe565b975050611216565b60008960050160008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600480602002604051908101604052809291908260048015611509576020028201915b8154815260200190600101908083116114f5575b50505050509050600061167e604051806101800160405280876000600281106115355761153461440d565b5b60200201518152602001876001600281106115535761155261440d565b5b602002015181526020017f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed81526020017f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec81526020017f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d81526020016001815260200160028152602001846000600481106116175761161661440d565b5b60200201518152602001846001600481106116355761163461440d565b5b60200201518152602001846002600481106116535761165261440d565b5b60200201518152602001846003600481106116715761167061440d565b5b6020020151815250611dd2565b90508015611732578a60050160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006116d39190612fa4565b60018b60080160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506117da565b8a60050160008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600061177f9190612fa4565b60018b60080160008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b50505050505050505050505b50505050565b6000807fd2d37756412c577f56b4802b8e643c9a817fa92cc18ff383f317fce7fab4282b90508091505090565b600060019050600080600080851161183457611833614351565b5b610100851061184657611845614351565b5b600092505b86518310156118c6578683815181106118675761186661440d565b5b60200260200101519050600081148061187f57508481115b1561188d57600093506118c6565b6000816001901b831614156118aa57806001901b821791506118b3565b600093506118c6565b82806118be906142fe565b93505061184b565b836118d357505050611957565b600092505b8551831015611953578583815181106118f4576118f361440d565b5b60200260200101519050600081148061190c57508481115b1561191a5760009350611953565b6000816001901b8316141561193757806001901b82179150611940565b60009350611953565b828061194b906142fe565b9350506118d8565b5050505b9392505050565b600080600080600060019050865160018761197991906141c2565b11156119ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119b190613a23565b60405180910390fd5b600193505b85841015611a4857866001856119d591906141c2565b815181106119e6576119e561440d565b5b602002602001015192507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000180611a1f57611a1e6143af565b5b838509915060018214611a355760009050611a48565b8380611a40906142fe565b9450506119bf565b8094505050505092915050565b611a5d612f82565b8351855114611aa1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a9890613bc3565b60405180910390fd5b82855111611ae4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611adb90613ac3565b60405180910390fd5b6000611aef85611e52565b9050611afb838261195e565b611b3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b3190613ae3565b60405180910390fd5b611b42612f82565b611b4e87878787611ecc565b90508092505050949350505050565b6000611b67612f82565b611b7085612168565b9050611d0c60405180610180016040528086600060028110611b9557611b9461440d565b5b6020020151815260200186600160028110611bb357611bb261440d565b5b602002015181526020017f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed81526020017f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec81526020017f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d815260200183600060028110611c6957611c6861440d565b5b6020020151815260200183600160028110611c8757611c8661440d565b5b6020020151815260200185600060048110611ca557611ca461440d565b5b6020020151815260200185600160048110611cc357611cc261440d565b5b6020020151815260200185600260048110611ce157611ce061440d565b5b6020020151815260200185600360048110611cff57611cfe61440d565b5b6020020151815250611dd2565b9150509392505050565b611d1e612f82565b60006040826080856006600019fa905080611d6e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d6590613a03565b60405180910390fd5b50919050565b611d7c612f82565b60006040826060856007600019fa905080611dcc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dc390613c03565b60405180910390fd5b50919050565b6000611ddc612fc0565b6000602082610180866008600019fa905080611e2d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e2490613c63565b60405180910390fd5b600182600060018110611e4357611e4261440d565b5b60200201511492505050919050565b600080600083600081518110611e6b57611e6a61440d565b5b602002602001015190506000600190505b8451811015611ec157848181518110611e9857611e9761440d565b5b6020026020010151925081831115611eae578291505b8080611eb9906142fe565b915050611e7c565b508092505050919050565b611ed4612f82565b8351855114611f18576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f0f90613b23565b60405180910390fd5b611f20612f82565b600081600060028110611f3657611f3561440d565b5b602002018181525050600081600160028110611f5557611f5461440d565b5b602002018181525050600080600080600080611f6f612f82565b600096505b8b51871015612155578b8781518110611f9057611f8f61440d565b5b602002602001015194508a871115611fa757612155565b60019250600095505b8b51861015612045578b8681518110611fcc57611fcb61440d565b5b602002602001015193508a861115611fe357612045565b84841415611ff057612032565b611ffb84868c6122dc565b91507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018061202c5761202b6143af565b5b82840992505b858061203d906142fe565b965050611fb0565b8c87815181106120585761205761440d565b5b602002602001015190506120b56040518060600160405280836000600281106120845761208361440d565b5b60200201518152602001836001600281106120a2576120a161440d565b5b6020020151815260200185815250611d74565b905061214060405180608001604052808a6000600281106120d9576120d861440d565b5b602002015181526020018a6001600281106120f7576120f661440d565b5b60200201518152602001836000600281106121155761211461440d565b5b60200201518152602001836001600281106121335761213261440d565b5b6020020151815250611d16565b9750868061214d906142fe565b975050611f74565b8798505050505050505050949350505050565b612170612f82565b600061218583600060f81b600160f81b61241b565b9050600061219c84600260f81b600360f81b61241b565b905060006121a98361250a565b905060006121b68361250a565b90506122416040518060800160405280846000600281106121da576121d961440d565b5b60200201518152602001846001600281106121f8576121f761440d565b5b60200201518152602001836000600281106122165761221561440d565b5b60200201518152602001836001600281106122345761223361440d565b5b6020020151815250611d16565b945061224c85612b94565b61228b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612282906139c3565b60405180910390fd5b61229485612cdd565b6122d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122ca90613b83565b60405180910390fd5b50505050919050565b600082841415612321576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161231890613be3565b60405180910390fd5b600084905060008486111561234357848661233c91906141c2565b90506123b2565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000180612372576123716143af565b5b60017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000161239f91906141c2565b8309915085856123af91906141c2565b90505b836001826123c091906141c2565b815181106123d1576123d061440d565b5b602002602001015190507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018061240a576124096143af565b5b818309905080925050509392505050565b600080838560405160200161243192919061397b565b6040516020818303038152906040528051906020012060001c90506000838660405160200161246192919061397b565b6040516020818303038152906040528051906020012060001c90507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806124ab576124aa6143af565b5b817f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806124db576124da6143af565b5b7f0e0a77c19a07df2f666ea36f7879462c0a78eb28f5c70b3dd35d438dc58f0d9d850908925050509392505050565b612512612f82565b60008060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780612546576125456143af565b5b85860992507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061257a576125796143af565b5b6004840891507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806125af576125ae6143af565b5b82840990506125bd81612d35565b905060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806125f0576125ef6143af565b5b83840990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780612624576126236143af565b5b83820990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780612658576126576143af565b5b848509935060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061268e5761268d6143af565b5b8577b3c4d79d41a91759a9e4c7e359b6b89eaec68e62effffffd0990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806126da576126d96143af565b5b83820990506126e881612d89565b90507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780612719576127186143af565b5b7759e26bcea0d48bacd4f263f1acdb5c4f5763473177fffffe8208905060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780612767576127666143af565b5b60018308905061277681612d89565b905060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806127a9576127a86143af565b5b847f2042def740cbc01bd03583cf0100e593ba56470b9af68708d2c05d64905353850990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806127fd576127fc6143af565b5b858209905061280b81612d89565b90507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061283c5761283b6143af565b5b60018208905060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780612873576128726143af565b5b84850990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806128a7576128a66143af565b5b84820990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806128db576128da6143af565b5b60038208905060006128ec82612dd0565b90507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061291d5761291c6143af565b5b84850991507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780612951576129506143af565b5b84830991507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780612985576129846143af565b5b600383089150600061299683612dd0565b90506000600160046003846129ab919061412e565b6001866129b8919061412e565b6129c29190613fbd565b6129cc9190613f22565b6129d69190613e38565b9050600060018214156129eb57879050612a01565b60028214156129fc57869050612a00565b8590505b5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780612a3057612a2f6143af565b5b81820994507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780612a6457612a636143af565b5b81860994507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780612a9857612a976143af565b5b600386089450612aa785612e55565b94506000612ab48f612ea9565b90507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780612ae557612ae46143af565b5b8187099550612b07604051806040016040528084815260200188815250612b94565b612b46576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b3d90613a43565b60405180910390fd5b818e600060028110612b5b57612b5a61440d565b5b602002018181525050858e600160028110612b7957612b7861440d565b5b60200201818152505050505050505050505050505050919050565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780612bc557612bc46143af565b5b60037f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780612bf657612bf56143af565b5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780612c2557612c246143af565b5b85600060028110612c3957612c3861440d565b5b602002015186600060028110612c5257612c5161440d565b5b60200201510985600060028110612c6c57612c6b61440d565b5b602002015109087f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780612ca257612ca16143af565b5b83600160028110612cb657612cb561440d565b5b602002015184600160028110612ccf57612cce61440d565b5b602002015109149050919050565b60008082600060028110612cf457612cf361440d565b5b60200201511480612d1d5750600182600060028110612d1657612d1561440d565b5b6020020151145b15612d2b5760009050612d30565b600190505b919050565b6000612d82827f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd457f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47612f00565b9050919050565b600080821415612d9c5760009050612dcb565b817f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47612dc891906141c2565b90505b919050565b600080612e1e837f183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea37f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47612f00565b905060008114612e4a5760018082166002612e399190613fbd565b612e43919061412e565b9150612e4f565b600091505b50919050565b6000612ea2827f0c19139cb84c680a6e14116da060561765e05aa45a1c72a34f082305b61f3f527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47612f00565b9050919050565b6000600190507f183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea3821115612efb577f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4690505b919050565b60008060405160208152602080820152602060408201528560608201528460808201528360a082015260208160c08360055afa9150805192505080612f7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f71906139a3565b60405180910390fd5b509392505050565b6040518060400160405280600290602082028036833780820191505090505090565b5060008155600101600081556001016000815560010160009055565b6040518060200160405280600190602082028036833780820191505090505090565b6000612ff5612ff084613ca8565b613c83565b9050808382526020820190508285602086028201111561301857613017614470565b5b60005b8581101561306657813567ffffffffffffffff81111561303e5761303d61446b565b5b80860161304b8982613288565b8552602085019450602084019350505060018101905061301b565b5050509392505050565b600061308361307e84613cd4565b613c83565b905080838252602082019050828560408602820111156130a6576130a5614470565b5b60005b858110156130d657816130bc88826132e4565b8452602084019350604083019250506001810190506130a9565b5050509392505050565b60006130f36130ee84613d00565b613c83565b9050808382526020820190508285602086028201111561311657613115614470565b5b60005b8581101561316457813567ffffffffffffffff81111561313c5761313b61446b565b5b808601613149898261330f565b85526020850194506020840193505050600181019050613119565b5050509392505050565b600061318161317c84613d2c565b613c83565b9050808285602086028201111561319b5761319a614470565b5b60005b858110156131cb57816131b1888261333d565b84526020840193506020830192505060018101905061319e565b5050509392505050565b60006131e86131e384613d52565b613c83565b9050808382526020820190508285602086028201111561320b5761320a614470565b5b60005b8581101561323b5781613221888261333d565b84526020840193506020830192505060018101905061320e565b5050509392505050565b60008135905061325481614bcf565b92915050565b600082601f83011261326f5761326e61446b565b5b813561327f848260208601612fe2565b91505092915050565b600082601f83011261329d5761329c61446b565b5b81356132ad848260208601613070565b91505092915050565b600082601f8301126132cb576132ca61446b565b5b81356132db8482602086016130e0565b91505092915050565b600082601f8301126132f9576132f861446b565b5b600261330684828561316e565b91505092915050565b600082601f8301126133245761332361446b565b5b81356133348482602086016131d5565b91505092915050565b60008135905061334c81614be6565b92915050565b6000806000806080858703121561336c5761336b61447a565b5b600085013567ffffffffffffffff81111561338a57613389614475565b5b613396878288016132b6565b945050602085013567ffffffffffffffff8111156133b7576133b6614475565b5b6133c38782880161325a565b93505060406133d48782880161333d565b92505060606133e587828801613245565b91505092959194509250565b60008060006060848603121561340a5761340961447a565b5b600084013567ffffffffffffffff81111561342857613427614475565b5b6134348682870161330f565b935050602084013567ffffffffffffffff81111561345557613454614475565b5b6134618682870161330f565b925050604084013567ffffffffffffffff81111561348257613481614475565b5b61348e8682870161330f565b9150509250925092565b60006134a48383613526565b60408301905092915050565b60006134bc8383613948565b60208301905092915050565b60006134d382613da8565b6134dd8185613dfb565b93506134e883613d7e565b8060005b838110156135195781516135008882613498565b975061350b83613dd4565b9250506001810190506134ec565b5085935050505092915050565b61352f81613db3565b6135398184613e06565b925061354482613d8e565b8060005b8381101561357557815161355c87826134b0565b965061356783613de1565b925050600181019050613548565b505050505050565b600061358882613dbe565b6135928185613e11565b935061359d83613d98565b8060005b838110156135ce5781516135b588826134b0565b97506135c083613dee565b9250506001810190506135a1565b5085935050505092915050565b6135ec6135e782614208565b614347565b82525050565b60006135fd82613dc9565b6136078185613e1c565b9350613617818560208601614268565b80840191505092915050565b6000613630601d83613e27565b915061363b82614490565b602082019050919050565b6000613653602983613e27565b915061365e826144b9565b604082019050919050565b6000613676604183613e27565b915061368182614508565b606082019050919050565b6000613699601e83613e27565b91506136a48261457d565b602082019050919050565b60006136bc604483613e27565b91506136c7826145a6565b606082019050919050565b60006136df602483613e27565b91506136ea8261461b565b604082019050919050565b6000613702603383613e27565b915061370d8261466a565b604082019050919050565b6000613725604683613e27565b9150613730826146b9565b606082019050919050565b6000613748604183613e27565b91506137538261472e565b606082019050919050565b600061376b603a83613e27565b9150613776826147a3565b604082019050919050565b600061378e602a83613e27565b9150613799826147f2565b604082019050919050565b60006137b1603c83613e27565b91506137bc82614841565b604082019050919050565b60006137d4602c83613e27565b91506137df82614890565b604082019050919050565b60006137f7603e83613e27565b9150613802826148df565b604082019050919050565b600061381a604083613e27565b91506138258261492e565b604082019050919050565b600061383d602a83613e27565b91506138488261497d565b604082019050919050565b6000613860603583613e27565b915061386b826149cc565b604082019050919050565b6000613883603583613e27565b915061388e82614a1b565b604082019050919050565b60006138a6603483613e27565b91506138b182614a6a565b604082019050919050565b60006138c9602483613e27565b91506138d482614ab9565b604082019050919050565b60006138ec603583613e27565b91506138f782614b08565b604082019050919050565b600061390f602b83613e27565b915061391a82614b57565b604082019050919050565b6000613932601d83613e27565b915061393d82614ba6565b602082019050919050565b6139518161425e565b82525050565b6000613963828561357d565b915061396f82846134c8565b91508190509392505050565b600061398782856135db565b60018201915061399782846135f2565b91508190509392505050565b600060208201905081810360008301526139bc81613623565b9050919050565b600060208201905081810360008301526139dc81613646565b9050919050565b600060208201905081810360008301526139fc81613669565b9050919050565b60006020820190508181036000830152613a1c8161368c565b9050919050565b60006020820190508181036000830152613a3c816136af565b9050919050565b60006020820190508181036000830152613a5c816136d2565b9050919050565b60006020820190508181036000830152613a7c816136f5565b9050919050565b60006020820190508181036000830152613a9c81613718565b9050919050565b60006020820190508181036000830152613abc8161373b565b9050919050565b60006020820190508181036000830152613adc8161375e565b9050919050565b60006020820190508181036000830152613afc81613781565b9050919050565b60006020820190508181036000830152613b1c816137a4565b9050919050565b60006020820190508181036000830152613b3c816137c7565b9050919050565b60006020820190508181036000830152613b5c816137ea565b9050919050565b60006020820190508181036000830152613b7c8161380d565b9050919050565b60006020820190508181036000830152613b9c81613830565b9050919050565b60006020820190508181036000830152613bbc81613853565b9050919050565b60006020820190508181036000830152613bdc81613876565b9050919050565b60006020820190508181036000830152613bfc81613899565b9050919050565b60006020820190508181036000830152613c1c816138bc565b9050919050565b60006020820190508181036000830152613c3c816138df565b9050919050565b60006020820190508181036000830152613c5c81613902565b9050919050565b60006020820190508181036000830152613c7c81613925565b9050919050565b6000613c8d613c9e565b9050613c9982826142cd565b919050565b6000604051905090565b600067ffffffffffffffff821115613cc357613cc261443c565b5b602082029050602081019050919050565b600067ffffffffffffffff821115613cef57613cee61443c565b5b602082029050602081019050919050565b600067ffffffffffffffff821115613d1b57613d1a61443c565b5b602082029050602081019050919050565b600067ffffffffffffffff821115613d4757613d4661443c565b5b602082029050919050565b600067ffffffffffffffff821115613d6d57613d6c61443c565b5b602082029050602081019050919050565b6000819050602082019050919050565b6000819050919050565b6000819050602082019050919050565b600081519050919050565b600060029050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600081905092915050565b600081905092915050565b600081905092915050565b600081905092915050565b600082825260208201905092915050565b6000613e4382614234565b9150613e4e83614234565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03831360008312151615613e8957613e88614380565b5b817f8000000000000000000000000000000000000000000000000000000000000000038312600083121615613ec157613ec0614380565b5b828201905092915050565b6000613ed78261425e565b9150613ee28361425e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613f1757613f16614380565b5b828201905092915050565b6000613f2d82614234565b9150613f3883614234565b925082613f4857613f476143af565b5b600160000383147f800000000000000000000000000000000000000000000000000000000000000083141615613f8157613f80614380565b5b828205905092915050565b6000613f978261425e565b9150613fa28361425e565b925082613fb257613fb16143af565b5b828204905092915050565b6000613fc882614234565b9150613fd383614234565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561401257614011614380565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561404f5761404e614380565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561408c5761408b614380565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156140c9576140c8614380565b5b828202905092915050565b60006140df8261425e565b91506140ea8361425e565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561412357614122614380565b5b828202905092915050565b600061413982614234565b915061414483614234565b9250827f80000000000000000000000000000000000000000000000000000000000000000182126000841215161561417f5761417e614380565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0182136000841216156141b7576141b6614380565b5b828203905092915050565b60006141cd8261425e565b91506141d88361425e565b9250828210156141eb576141ea614380565b5b828203905092915050565b60006142018261423e565b9050919050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b8381101561428657808201518184015260208101905061426b565b83811115614295576000848401525b50505050565b600060028204905060018216806142b357607f821691505b602082108114156142c7576142c66143de565b5b50919050565b6142d68261447f565b810181811067ffffffffffffffff821117156142f5576142f461443c565b5b80604052505050565b60006143098261425e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561433c5761433b614380565b5b600182019050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f6d6f64756c6172206578706f6e656e74696174696f6e2066616c696564000000600082015250565b7f496e76616c6964206861736820706f696e743a206e6f74206f6e20656c6c697060008201527f7469632063757276650000000000000000000000000000000000000000000000602082015250565b7f67706b6a2061636320636f6d70206661696c65643a20696e76616c6964206e7560008201527f6d626572206f6620656e63727970746564207368617265732070726f7669646560208201527f6400000000000000000000000000000000000000000000000000000000000000604082015250565b7f656c6c6970746963206375727665206164646974696f6e206661696c65640000600082015250565b7f636865636b496e7665727365733a20696e73756666696369656e7420696e766560008201527f7273657320666f722067726f7570207369676e61747572652063616c63756c6160208201527f74696f6e00000000000000000000000000000000000000000000000000000000604082015250565b7f496e76616c696420706f696e743a206e6f74206f6e20656c6c6970746963206360008201527f7572766500000000000000000000000000000000000000000000000000000000602082015250565b7f67706b6a2061636320636f6d70206661696c65643a20696e76616c696420736860008201527f61726573206f7220636f6d6d69746d656e747300000000000000000000000000602082015250565b7f67706b6a2061636320636f6d70206661696c65643a20646973686f6e6573742060008201527f696e64657820646f6573206e6f74206d6174636820646973686f6e657374206160208201527f6464726573730000000000000000000000000000000000000000000000000000604082015250565b7f67706b6a2061636375736174696f6e206661696c65642028636f6e747261637460008201527f206973206e6f7420696e2067706b6a2061636375736174696f6e20706861736560208201527f2900000000000000000000000000000000000000000000000000000000000000604082015250565b7f4661696c656420746f206d656574207265717569726564206e756d626572206f60008201527f66207369676e61747572657320666f72207468726573686f6c64000000000000602082015250565b7f696e76417272617920646f6573206e6f7420696e636c75646520636f7272656360008201527f7420696e76657273657300000000000000000000000000000000000000000000602082015250565b7f67706b6a2061636320636f6d70206661696c65643a20696e76616c6964206e7560008201527f6d626572206f6620636f6d6d69746d656e74732070726f766964656400000000602082015250565b7f4d69736d61746368206265747765656e20706f696e7473473120616e6420696e60008201527f6469636573206172726179730000000000000000000000000000000000000000602082015250565b7f67706b6a2061636320636f6d70206661696c65643a20636f6e7472616374206960008201527f73206e6f7420696e2067706b6a2061636375736174696f6e2070686173650000602082015250565b7f686f6e657374496e646963657320616e6420646973686f6e657374496e64696360008201527f657320646f206e6f7420636f6e7461696e20756e6971756520696e6469636573602082015250565b7f44616e6765726f7573206861736820706f696e743a206e6f742073616665206660008201527f6f72207369676e696e6700000000000000000000000000000000000000000000602082015250565b7f686f6e657374496e6469636573206661696c656420746f2070726f647563652060008201527f76616c69642067726f7570207369676e61747572650000000000000000000000602082015250565b7f4d69736d61746368206265747765656e206c656e677468206f66207369676e6160008201527f747572657320616e6420696e6465782061727261790000000000000000000000602082015250565b7f4d7573742068617665206b20213d206a207768656e20636f6d707574696e672060008201527f526a207061727469616c20636f6e7374616e7473000000000000000000000000602082015250565b7f656c6c6970746963206375727665206d756c7469706c69636174696f6e20666160008201527f696c656400000000000000000000000000000000000000000000000000000000602082015250565b7f67706b6a2061636320636f6d70206661696c65643a20696e76616c696420737560008201527f626d697373696f6e206f6620617267756d656e74730000000000000000000000602082015250565b7f496e636f7272656374206e756d626572206f6620686f6e6573742076616c696460008201527f61746f72733b2065786974000000000000000000000000000000000000000000602082015250565b7f656c6c69707469632063757276652070616972696e67206661696c6564000000600082015250565b614bd8816141f6565b8114614be357600080fd5b50565b614bef8161425e565b8114614bfa57600080fd5b5056fea2646970667358221220a1f492bf98b0a8fa945bb3d4476109df1be0659adab20be287788040cd26dc4064736f6c63430008060033",
}

// EthDKGGroupAccusationFacetABI is the input ABI used to generate the binding from.
// Deprecated: Use EthDKGGroupAccusationFacetMetaData.ABI instead.
var EthDKGGroupAccusationFacetABI = EthDKGGroupAccusationFacetMetaData.ABI

// EthDKGGroupAccusationFacetBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use EthDKGGroupAccusationFacetMetaData.Bin instead.
var EthDKGGroupAccusationFacetBin = EthDKGGroupAccusationFacetMetaData.Bin

// DeployEthDKGGroupAccusationFacet deploys a new Ethereum contract, binding an instance of EthDKGGroupAccusationFacet to it.
func DeployEthDKGGroupAccusationFacet(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *EthDKGGroupAccusationFacet, error) {
	parsed, err := EthDKGGroupAccusationFacetMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(EthDKGGroupAccusationFacetBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &EthDKGGroupAccusationFacet{EthDKGGroupAccusationFacetCaller: EthDKGGroupAccusationFacetCaller{contract: contract}, EthDKGGroupAccusationFacetTransactor: EthDKGGroupAccusationFacetTransactor{contract: contract}, EthDKGGroupAccusationFacetFilterer: EthDKGGroupAccusationFacetFilterer{contract: contract}}, nil
}

// EthDKGGroupAccusationFacet is an auto generated Go binding around an Ethereum contract.
type EthDKGGroupAccusationFacet struct {
	EthDKGGroupAccusationFacetCaller     // Read-only binding to the contract
	EthDKGGroupAccusationFacetTransactor // Write-only binding to the contract
	EthDKGGroupAccusationFacetFilterer   // Log filterer for contract events
}

// EthDKGGroupAccusationFacetCaller is an auto generated read-only Go binding around an Ethereum contract.
type EthDKGGroupAccusationFacetCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EthDKGGroupAccusationFacetTransactor is an auto generated write-only Go binding around an Ethereum contract.
type EthDKGGroupAccusationFacetTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EthDKGGroupAccusationFacetFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type EthDKGGroupAccusationFacetFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EthDKGGroupAccusationFacetSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type EthDKGGroupAccusationFacetSession struct {
	Contract     *EthDKGGroupAccusationFacet // Generic contract binding to set the session for
	CallOpts     bind.CallOpts               // Call options to use throughout this session
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// EthDKGGroupAccusationFacetCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type EthDKGGroupAccusationFacetCallerSession struct {
	Contract *EthDKGGroupAccusationFacetCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                     // Call options to use throughout this session
}

// EthDKGGroupAccusationFacetTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type EthDKGGroupAccusationFacetTransactorSession struct {
	Contract     *EthDKGGroupAccusationFacetTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                     // Transaction auth options to use throughout this session
}

// EthDKGGroupAccusationFacetRaw is an auto generated low-level Go binding around an Ethereum contract.
type EthDKGGroupAccusationFacetRaw struct {
	Contract *EthDKGGroupAccusationFacet // Generic contract binding to access the raw methods on
}

// EthDKGGroupAccusationFacetCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type EthDKGGroupAccusationFacetCallerRaw struct {
	Contract *EthDKGGroupAccusationFacetCaller // Generic read-only contract binding to access the raw methods on
}

// EthDKGGroupAccusationFacetTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type EthDKGGroupAccusationFacetTransactorRaw struct {
	Contract *EthDKGGroupAccusationFacetTransactor // Generic write-only contract binding to access the raw methods on
}

// NewEthDKGGroupAccusationFacet creates a new instance of EthDKGGroupAccusationFacet, bound to a specific deployed contract.
func NewEthDKGGroupAccusationFacet(address common.Address, backend bind.ContractBackend) (*EthDKGGroupAccusationFacet, error) {
	contract, err := bindEthDKGGroupAccusationFacet(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &EthDKGGroupAccusationFacet{EthDKGGroupAccusationFacetCaller: EthDKGGroupAccusationFacetCaller{contract: contract}, EthDKGGroupAccusationFacetTransactor: EthDKGGroupAccusationFacetTransactor{contract: contract}, EthDKGGroupAccusationFacetFilterer: EthDKGGroupAccusationFacetFilterer{contract: contract}}, nil
}

// NewEthDKGGroupAccusationFacetCaller creates a new read-only instance of EthDKGGroupAccusationFacet, bound to a specific deployed contract.
func NewEthDKGGroupAccusationFacetCaller(address common.Address, caller bind.ContractCaller) (*EthDKGGroupAccusationFacetCaller, error) {
	contract, err := bindEthDKGGroupAccusationFacet(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &EthDKGGroupAccusationFacetCaller{contract: contract}, nil
}

// NewEthDKGGroupAccusationFacetTransactor creates a new write-only instance of EthDKGGroupAccusationFacet, bound to a specific deployed contract.
func NewEthDKGGroupAccusationFacetTransactor(address common.Address, transactor bind.ContractTransactor) (*EthDKGGroupAccusationFacetTransactor, error) {
	contract, err := bindEthDKGGroupAccusationFacet(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &EthDKGGroupAccusationFacetTransactor{contract: contract}, nil
}

// NewEthDKGGroupAccusationFacetFilterer creates a new log filterer instance of EthDKGGroupAccusationFacet, bound to a specific deployed contract.
func NewEthDKGGroupAccusationFacetFilterer(address common.Address, filterer bind.ContractFilterer) (*EthDKGGroupAccusationFacetFilterer, error) {
	contract, err := bindEthDKGGroupAccusationFacet(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &EthDKGGroupAccusationFacetFilterer{contract: contract}, nil
}

// bindEthDKGGroupAccusationFacet binds a generic wrapper to an already deployed contract.
func bindEthDKGGroupAccusationFacet(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(EthDKGGroupAccusationFacetABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_EthDKGGroupAccusationFacet *EthDKGGroupAccusationFacetRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _EthDKGGroupAccusationFacet.Contract.EthDKGGroupAccusationFacetCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_EthDKGGroupAccusationFacet *EthDKGGroupAccusationFacetRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EthDKGGroupAccusationFacet.Contract.EthDKGGroupAccusationFacetTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_EthDKGGroupAccusationFacet *EthDKGGroupAccusationFacetRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _EthDKGGroupAccusationFacet.Contract.EthDKGGroupAccusationFacetTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_EthDKGGroupAccusationFacet *EthDKGGroupAccusationFacetCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _EthDKGGroupAccusationFacet.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_EthDKGGroupAccusationFacet *EthDKGGroupAccusationFacetTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EthDKGGroupAccusationFacet.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_EthDKGGroupAccusationFacet *EthDKGGroupAccusationFacetTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _EthDKGGroupAccusationFacet.Contract.contract.Transact(opts, method, params...)
}

// GroupAccusationGPKj is a paid mutator transaction binding the contract method 0xa6872833.
//
// Solidity: function Group_Accusation_GPKj(uint256[] invArray, uint256[] honestIndices, uint256[] dishonestIndices) returns()
func (_EthDKGGroupAccusationFacet *EthDKGGroupAccusationFacetTransactor) GroupAccusationGPKj(opts *bind.TransactOpts, invArray []*big.Int, honestIndices []*big.Int, dishonestIndices []*big.Int) (*types.Transaction, error) {
	return _EthDKGGroupAccusationFacet.contract.Transact(opts, "Group_Accusation_GPKj", invArray, honestIndices, dishonestIndices)
}

// GroupAccusationGPKj is a paid mutator transaction binding the contract method 0xa6872833.
//
// Solidity: function Group_Accusation_GPKj(uint256[] invArray, uint256[] honestIndices, uint256[] dishonestIndices) returns()
func (_EthDKGGroupAccusationFacet *EthDKGGroupAccusationFacetSession) GroupAccusationGPKj(invArray []*big.Int, honestIndices []*big.Int, dishonestIndices []*big.Int) (*types.Transaction, error) {
	return _EthDKGGroupAccusationFacet.Contract.GroupAccusationGPKj(&_EthDKGGroupAccusationFacet.TransactOpts, invArray, honestIndices, dishonestIndices)
}

// GroupAccusationGPKj is a paid mutator transaction binding the contract method 0xa6872833.
//
// Solidity: function Group_Accusation_GPKj(uint256[] invArray, uint256[] honestIndices, uint256[] dishonestIndices) returns()
func (_EthDKGGroupAccusationFacet *EthDKGGroupAccusationFacetTransactorSession) GroupAccusationGPKj(invArray []*big.Int, honestIndices []*big.Int, dishonestIndices []*big.Int) (*types.Transaction, error) {
	return _EthDKGGroupAccusationFacet.Contract.GroupAccusationGPKj(&_EthDKGGroupAccusationFacet.TransactOpts, invArray, honestIndices, dishonestIndices)
}

// GroupAccusationGPKjComp is a paid mutator transaction binding the contract method 0xd7c47ff2.
//
// Solidity: function Group_Accusation_GPKj_Comp(uint256[][] encrypted_shares, uint256[2][][] commitments, uint256 dishonest_list_idx, address dishonestAddress) returns()
func (_EthDKGGroupAccusationFacet *EthDKGGroupAccusationFacetTransactor) GroupAccusationGPKjComp(opts *bind.TransactOpts, encrypted_shares [][]*big.Int, commitments [][][2]*big.Int, dishonest_list_idx *big.Int, dishonestAddress common.Address) (*types.Transaction, error) {
	return _EthDKGGroupAccusationFacet.contract.Transact(opts, "Group_Accusation_GPKj_Comp", encrypted_shares, commitments, dishonest_list_idx, dishonestAddress)
}

// GroupAccusationGPKjComp is a paid mutator transaction binding the contract method 0xd7c47ff2.
//
// Solidity: function Group_Accusation_GPKj_Comp(uint256[][] encrypted_shares, uint256[2][][] commitments, uint256 dishonest_list_idx, address dishonestAddress) returns()
func (_EthDKGGroupAccusationFacet *EthDKGGroupAccusationFacetSession) GroupAccusationGPKjComp(encrypted_shares [][]*big.Int, commitments [][][2]*big.Int, dishonest_list_idx *big.Int, dishonestAddress common.Address) (*types.Transaction, error) {
	return _EthDKGGroupAccusationFacet.Contract.GroupAccusationGPKjComp(&_EthDKGGroupAccusationFacet.TransactOpts, encrypted_shares, commitments, dishonest_list_idx, dishonestAddress)
}

// GroupAccusationGPKjComp is a paid mutator transaction binding the contract method 0xd7c47ff2.
//
// Solidity: function Group_Accusation_GPKj_Comp(uint256[][] encrypted_shares, uint256[2][][] commitments, uint256 dishonest_list_idx, address dishonestAddress) returns()
func (_EthDKGGroupAccusationFacet *EthDKGGroupAccusationFacetTransactorSession) GroupAccusationGPKjComp(encrypted_shares [][]*big.Int, commitments [][][2]*big.Int, dishonest_list_idx *big.Int, dishonestAddress common.Address) (*types.Transaction, error) {
	return _EthDKGGroupAccusationFacet.Contract.GroupAccusationGPKjComp(&_EthDKGGroupAccusationFacet.TransactOpts, encrypted_shares, commitments, dishonest_list_idx, dishonestAddress)
}

// EthDKGInformationFacetMetaData contains all meta data concerning the EthDKGInformationFacet contract.
var EthDKGInformationFacetMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"T_DISPUTE_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"T_DKG_COMPLETE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"T_GPKJDISPUTE_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"T_GPKJ_SUBMISSION_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"T_KEY_SHARE_SUBMISSION_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"T_MPK_SUBMISSION_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"T_REGISTRATION_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"T_SHARE_DISTRIBUTION_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"addresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"commitments_1st_coefficient\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPhaseLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"gpkj_submissions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialMessage\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"initialSignatures\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isMalicious\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"keyShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"master_public_key\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfRegistrations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"publicKeys\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"shareDistributionHashes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"validatorIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50610e11806100206000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c80639c02514a116100b8578063dc614e281161007c578063dc614e281461036a578063e2291ec314610388578063e6511378146103a6578063edf26d9b146103d6578063fa055f2f14610406578063fef001a91461043657610137565b80639c02514a146102c25780639c2aa838146102f2578063cc78d24514610310578063d3cf61861461032e578063d8f63eb71461034c57610137565b80635634145a116100ff5780635634145a146101f6578063665f4c811461022657806377fbebd11461024457806385c02b1d146102625780639601ddf91461029257610137565b806307f02c541461013c5780630de1553f1461015a578063106da57d1461017857806310782555146101965780632cf4050b146101c6575b600080fd5b610144610466565b6040516101519190610c11565b60405180910390f35b610162610479565b60405161016f9190610c11565b60405180910390f35b61018061048c565b60405161018d9190610c11565b60405180910390f35b6101b060048036038101906101ab9190610a79565b61049f565b6040516101bd9190610c11565b60405180910390f35b6101e060048036038101906101db9190610a79565b610505565b6040516101ed9190610c11565b60405180910390f35b610210600480360381019061020b9190610a4c565b61056b565b60405161021d9190610bb4565b60405180910390f35b61022e6105bd565b60405161023b9190610bcf565b60405180910390f35b61024c610658565b6040516102599190610c11565b60405180910390f35b61027c60048036038101906102779190610a79565b61066b565b6040516102899190610c11565b60405180910390f35b6102ac60048036038101906102a79190610a4c565b6106d1565b6040516102b99190610c11565b60405180910390f35b6102dc60048036038101906102d79190610a4c565b6107dc565b6040516102e99190610b99565b60405180910390f35b6102fa61083b565b6040516103079190610c11565b60405180910390f35b61031861084e565b6040516103259190610c11565b60405180910390f35b610336610861565b6040516103439190610c11565b60405180910390f35b610354610874565b6040516103619190610c11565b60405180910390f35b61037261088a565b60405161037f9190610c11565b60405180910390f35b61039061089d565b60405161039d9190610c11565b60405180910390f35b6103c060048036038101906103bb9190610ab9565b6108b0565b6040516103cd9190610c11565b60405180910390f35b6103f060048036038101906103eb9190610ab9565b6108d8565b6040516103fd9190610b7e565b60405180910390f35b610420600480360381019061041b9190610a79565b610929565b60405161042d9190610c11565b60405180910390f35b610450600480360381019061044b9190610a79565b61098f565b60405161045d9190610c11565b60405180910390f35b60006104706109f5565b60170154905090565b60006104836109f5565b60130154905090565b60006104966109f5565b60100154905090565b60006104a96109f5565b60010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082600281106104fb576104fa610d3f565b5b0154905092915050565b600061050f6109f5565b60030160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020826002811061056157610560610d3f565b5b0154905092915050565b60006105756109f5565b60020160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606105c76109f5565b600e0180546105d590610cde565b80601f016020809104026020016040519081016040528092919081815260200182805461060190610cde565b801561064e5780601f106106235761010080835404028352916020019161064e565b820191906000526020600020905b81548152906001019060200180831161063157829003601f168201915b5050505050905090565b60006106626109f5565b601a0154905090565b60006106756109f5565b60040160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082600281106106c7576106c6610d3f565b5b0154905092915050565b6000806106dc6109f5565b905060008160070160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508373ffffffffffffffffffffffffffffffffffffffff1682600001828154811061075157610750610d3f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146107d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c990610bf1565b60405180910390fd5b8092505050919050565b60006107e66109f5565b60080160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b60006108456109f5565b60180154905090565b60006108586109f5565b60190154905090565b600061086b6109f5565b60150154905090565b600061087e6109f5565b60000180549050905090565b60006108946109f5565b60140154905090565b60006108a76109f5565b60160154905090565b60006108ba6109f5565b60090182600481106108cf576108ce610d3f565b5b01549050919050565b60006108e26109f5565b60000182815481106108f7576108f6610d3f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006109336109f5565b60060160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020826002811061098557610984610d3f565b5b0154905092915050565b60006109996109f5565b60050160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082600481106109eb576109ea610d3f565b5b0154905092915050565b6000807fd2d37756412c577f56b4802b8e643c9a817fa92cc18ff383f317fce7fab4282b90508091505090565b600081359050610a3181610dad565b92915050565b600081359050610a4681610dc4565b92915050565b600060208284031215610a6257610a61610d6e565b5b6000610a7084828501610a22565b91505092915050565b60008060408385031215610a9057610a8f610d6e565b5b6000610a9e85828601610a22565b9250506020610aaf85828601610a37565b9150509250929050565b600060208284031215610acf57610ace610d6e565b5b6000610add84828501610a37565b91505092915050565b610aef81610c59565b82525050565b610afe81610c6b565b82525050565b610b0d81610c77565b82525050565b6000610b1e82610c2c565b610b288185610c37565b9350610b38818560208601610cab565b610b4181610d73565b840191505092915050565b6000610b59600f83610c48565b9150610b6482610d84565b602082019050919050565b610b7881610ca1565b82525050565b6000602082019050610b936000830184610ae6565b92915050565b6000602082019050610bae6000830184610af5565b92915050565b6000602082019050610bc96000830184610b04565b92915050565b60006020820190508181036000830152610be98184610b13565b905092915050565b60006020820190508181036000830152610c0a81610b4c565b9050919050565b6000602082019050610c266000830184610b6f565b92915050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b6000610c6482610c81565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015610cc9578082015181840152602081019050610cae565b83811115610cd8576000848401525b50505050565b60006002820490506001821680610cf657607f821691505b60208210811415610d0a57610d09610d10565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b6000601f19601f8301169050919050565b7f6e6f7420612076616c696461746f720000000000000000000000000000000000600082015250565b610db681610c59565b8114610dc157600080fd5b50565b610dcd81610ca1565b8114610dd857600080fd5b5056fea2646970667358221220e265c91b371a0dd58cad6875169f4a7870b9974d70fd723e323e7dd85a1e066864736f6c63430008060033",
}

// EthDKGInformationFacetABI is the input ABI used to generate the binding from.
// Deprecated: Use EthDKGInformationFacetMetaData.ABI instead.
var EthDKGInformationFacetABI = EthDKGInformationFacetMetaData.ABI

// EthDKGInformationFacetBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use EthDKGInformationFacetMetaData.Bin instead.
var EthDKGInformationFacetBin = EthDKGInformationFacetMetaData.Bin

// DeployEthDKGInformationFacet deploys a new Ethereum contract, binding an instance of EthDKGInformationFacet to it.
func DeployEthDKGInformationFacet(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *EthDKGInformationFacet, error) {
	parsed, err := EthDKGInformationFacetMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(EthDKGInformationFacetBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &EthDKGInformationFacet{EthDKGInformationFacetCaller: EthDKGInformationFacetCaller{contract: contract}, EthDKGInformationFacetTransactor: EthDKGInformationFacetTransactor{contract: contract}, EthDKGInformationFacetFilterer: EthDKGInformationFacetFilterer{contract: contract}}, nil
}

// EthDKGInformationFacet is an auto generated Go binding around an Ethereum contract.
type EthDKGInformationFacet struct {
	EthDKGInformationFacetCaller     // Read-only binding to the contract
	EthDKGInformationFacetTransactor // Write-only binding to the contract
	EthDKGInformationFacetFilterer   // Log filterer for contract events
}

// EthDKGInformationFacetCaller is an auto generated read-only Go binding around an Ethereum contract.
type EthDKGInformationFacetCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EthDKGInformationFacetTransactor is an auto generated write-only Go binding around an Ethereum contract.
type EthDKGInformationFacetTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EthDKGInformationFacetFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type EthDKGInformationFacetFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EthDKGInformationFacetSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type EthDKGInformationFacetSession struct {
	Contract     *EthDKGInformationFacet // Generic contract binding to set the session for
	CallOpts     bind.CallOpts           // Call options to use throughout this session
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// EthDKGInformationFacetCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type EthDKGInformationFacetCallerSession struct {
	Contract *EthDKGInformationFacetCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                 // Call options to use throughout this session
}

// EthDKGInformationFacetTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type EthDKGInformationFacetTransactorSession struct {
	Contract     *EthDKGInformationFacetTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                 // Transaction auth options to use throughout this session
}

// EthDKGInformationFacetRaw is an auto generated low-level Go binding around an Ethereum contract.
type EthDKGInformationFacetRaw struct {
	Contract *EthDKGInformationFacet // Generic contract binding to access the raw methods on
}

// EthDKGInformationFacetCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type EthDKGInformationFacetCallerRaw struct {
	Contract *EthDKGInformationFacetCaller // Generic read-only contract binding to access the raw methods on
}

// EthDKGInformationFacetTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type EthDKGInformationFacetTransactorRaw struct {
	Contract *EthDKGInformationFacetTransactor // Generic write-only contract binding to access the raw methods on
}

// NewEthDKGInformationFacet creates a new instance of EthDKGInformationFacet, bound to a specific deployed contract.
func NewEthDKGInformationFacet(address common.Address, backend bind.ContractBackend) (*EthDKGInformationFacet, error) {
	contract, err := bindEthDKGInformationFacet(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &EthDKGInformationFacet{EthDKGInformationFacetCaller: EthDKGInformationFacetCaller{contract: contract}, EthDKGInformationFacetTransactor: EthDKGInformationFacetTransactor{contract: contract}, EthDKGInformationFacetFilterer: EthDKGInformationFacetFilterer{contract: contract}}, nil
}

// NewEthDKGInformationFacetCaller creates a new read-only instance of EthDKGInformationFacet, bound to a specific deployed contract.
func NewEthDKGInformationFacetCaller(address common.Address, caller bind.ContractCaller) (*EthDKGInformationFacetCaller, error) {
	contract, err := bindEthDKGInformationFacet(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &EthDKGInformationFacetCaller{contract: contract}, nil
}

// NewEthDKGInformationFacetTransactor creates a new write-only instance of EthDKGInformationFacet, bound to a specific deployed contract.
func NewEthDKGInformationFacetTransactor(address common.Address, transactor bind.ContractTransactor) (*EthDKGInformationFacetTransactor, error) {
	contract, err := bindEthDKGInformationFacet(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &EthDKGInformationFacetTransactor{contract: contract}, nil
}

// NewEthDKGInformationFacetFilterer creates a new log filterer instance of EthDKGInformationFacet, bound to a specific deployed contract.
func NewEthDKGInformationFacetFilterer(address common.Address, filterer bind.ContractFilterer) (*EthDKGInformationFacetFilterer, error) {
	contract, err := bindEthDKGInformationFacet(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &EthDKGInformationFacetFilterer{contract: contract}, nil
}

// bindEthDKGInformationFacet binds a generic wrapper to an already deployed contract.
func bindEthDKGInformationFacet(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(EthDKGInformationFacetABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_EthDKGInformationFacet *EthDKGInformationFacetRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _EthDKGInformationFacet.Contract.EthDKGInformationFacetCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_EthDKGInformationFacet *EthDKGInformationFacetRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EthDKGInformationFacet.Contract.EthDKGInformationFacetTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_EthDKGInformationFacet *EthDKGInformationFacetRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _EthDKGInformationFacet.Contract.EthDKGInformationFacetTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_EthDKGInformationFacet *EthDKGInformationFacetCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _EthDKGInformationFacet.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_EthDKGInformationFacet *EthDKGInformationFacetTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EthDKGInformationFacet.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_EthDKGInformationFacet *EthDKGInformationFacetTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _EthDKGInformationFacet.Contract.contract.Transact(opts, method, params...)
}

// TDISPUTEEND is a free data retrieval call binding the contract method 0xd3cf6186.
//
// Solidity: function T_DISPUTE_END() view returns(uint256)
func (_EthDKGInformationFacet *EthDKGInformationFacetCaller) TDISPUTEEND(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _EthDKGInformationFacet.contract.Call(opts, &out, "T_DISPUTE_END")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TDISPUTEEND is a free data retrieval call binding the contract method 0xd3cf6186.
//
// Solidity: function T_DISPUTE_END() view returns(uint256)
func (_EthDKGInformationFacet *EthDKGInformationFacetSession) TDISPUTEEND() (*big.Int, error) {
	return _EthDKGInformationFacet.Contract.TDISPUTEEND(&_EthDKGInformationFacet.CallOpts)
}

// TDISPUTEEND is a free data retrieval call binding the contract method 0xd3cf6186.
//
// Solidity: function T_DISPUTE_END() view returns(uint256)
func (_EthDKGInformationFacet *EthDKGInformationFacetCallerSession) TDISPUTEEND() (*big.Int, error) {
	return _EthDKGInformationFacet.Contract.TDISPUTEEND(&_EthDKGInformationFacet.CallOpts)
}

// TDKGCOMPLETE is a free data retrieval call binding the contract method 0x77fbebd1.
//
// Solidity: function T_DKG_COMPLETE() view returns(uint256)
func (_EthDKGInformationFacet *EthDKGInformationFacetCaller) TDKGCOMPLETE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _EthDKGInformationFacet.contract.Call(opts, &out, "T_DKG_COMPLETE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TDKGCOMPLETE is a free data retrieval call binding the contract method 0x77fbebd1.
//
// Solidity: function T_DKG_COMPLETE() view returns(uint256)
func (_EthDKGInformationFacet *EthDKGInformationFacetSession) TDKGCOMPLETE() (*big.Int, error) {
	return _EthDKGInformationFacet.Contract.TDKGCOMPLETE(&_EthDKGInformationFacet.CallOpts)
}

// TDKGCOMPLETE is a free data retrieval call binding the contract method 0x77fbebd1.
//
// Solidity: function T_DKG_COMPLETE() view returns(uint256)
func (_EthDKGInformationFacet *EthDKGInformationFacetCallerSession) TDKGCOMPLETE() (*big.Int, error) {
	return _EthDKGInformationFacet.Contract.TDKGCOMPLETE(&_EthDKGInformationFacet.CallOpts)
}

// TGPKJDISPUTEEND is a free data retrieval call binding the contract method 0xcc78d245.
//
// Solidity: function T_GPKJDISPUTE_END() view returns(uint256)
func (_EthDKGInformationFacet *EthDKGInformationFacetCaller) TGPKJDISPUTEEND(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _EthDKGInformationFacet.contract.Call(opts, &out, "T_GPKJDISPUTE_END")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TGPKJDISPUTEEND is a free data retrieval call binding the contract method 0xcc78d245.
//
// Solidity: function T_GPKJDISPUTE_END() view returns(uint256)
func (_EthDKGInformationFacet *EthDKGInformationFacetSession) TGPKJDISPUTEEND() (*big.Int, error) {
	return _EthDKGInformationFacet.Contract.TGPKJDISPUTEEND(&_EthDKGInformationFacet.CallOpts)
}

// TGPKJDISPUTEEND is a free data retrieval call binding the contract method 0xcc78d245.
//
// Solidity: function T_GPKJDISPUTE_END() view returns(uint256)
func (_EthDKGInformationFacet *EthDKGInformationFacetCallerSession) TGPKJDISPUTEEND() (*big.Int, error) {
	return _EthDKGInformationFacet.Contract.TGPKJDISPUTEEND(&_EthDKGInformationFacet.CallOpts)
}

// TGPKJSUBMISSIONEND is a free data retrieval call binding the contract method 0x9c2aa838.
//
// Solidity: function T_GPKJ_SUBMISSION_END() view returns(uint256)
func (_EthDKGInformationFacet *EthDKGInformationFacetCaller) TGPKJSUBMISSIONEND(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _EthDKGInformationFacet.contract.Call(opts, &out, "T_GPKJ_SUBMISSION_END")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TGPKJSUBMISSIONEND is a free data retrieval call binding the contract method 0x9c2aa838.
//
// Solidity: function T_GPKJ_SUBMISSION_END() view returns(uint256)
func (_EthDKGInformationFacet *EthDKGInformationFacetSession) TGPKJSUBMISSIONEND() (*big.Int, error) {
	return _EthDKGInformationFacet.Contract.TGPKJSUBMISSIONEND(&_EthDKGInformationFacet.CallOpts)
}

// TGPKJSUBMISSIONEND is a free data retrieval call binding the contract method 0x9c2aa838.
//
// Solidity: function T_GPKJ_SUBMISSION_END() view returns(uint256)
func (_EthDKGInformationFacet *EthDKGInformationFacetCallerSession) TGPKJSUBMISSIONEND() (*big.Int, error) {
	return _EthDKGInformationFacet.Contract.TGPKJSUBMISSIONEND(&_EthDKGInformationFacet.CallOpts)
}

// TKEYSHARESUBMISSIONEND is a free data retrieval call binding the contract method 0xe2291ec3.
//
// Solidity: function T_KEY_SHARE_SUBMISSION_END() view returns(uint256)
func (_EthDKGInformationFacet *EthDKGInformationFacetCaller) TKEYSHARESUBMISSIONEND(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _EthDKGInformationFacet.contract.Call(opts, &out, "T_KEY_SHARE_SUBMISSION_END")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TKEYSHARESUBMISSIONEND is a free data retrieval call binding the contract method 0xe2291ec3.
//
// Solidity: function T_KEY_SHARE_SUBMISSION_END() view returns(uint256)
func (_EthDKGInformationFacet *EthDKGInformationFacetSession) TKEYSHARESUBMISSIONEND() (*big.Int, error) {
	return _EthDKGInformationFacet.Contract.TKEYSHARESUBMISSIONEND(&_EthDKGInformationFacet.CallOpts)
}

// TKEYSHARESUBMISSIONEND is a free data retrieval call binding the contract method 0xe2291ec3.
//
// Solidity: function T_KEY_SHARE_SUBMISSION_END() view returns(uint256)
func (_EthDKGInformationFacet *EthDKGInformationFacetCallerSession) TKEYSHARESUBMISSIONEND() (*big.Int, error) {
	return _EthDKGInformationFacet.Contract.TKEYSHARESUBMISSIONEND(&_EthDKGInformationFacet.CallOpts)
}

// TMPKSUBMISSIONEND is a free data retrieval call binding the contract method 0x07f02c54.
//
// Solidity: function T_MPK_SUBMISSION_END() view returns(uint256)
func (_EthDKGInformationFacet *EthDKGInformationFacetCaller) TMPKSUBMISSIONEND(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _EthDKGInformationFacet.contract.Call(opts, &out, "T_MPK_SUBMISSION_END")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TMPKSUBMISSIONEND is a free data retrieval call binding the contract method 0x07f02c54.
//
// Solidity: function T_MPK_SUBMISSION_END() view returns(uint256)
func (_EthDKGInformationFacet *EthDKGInformationFacetSession) TMPKSUBMISSIONEND() (*big.Int, error) {
	return _EthDKGInformationFacet.Contract.TMPKSUBMISSIONEND(&_EthDKGInformationFacet.CallOpts)
}

// TMPKSUBMISSIONEND is a free data retrieval call binding the contract method 0x07f02c54.
//
// Solidity: function T_MPK_SUBMISSION_END() view returns(uint256)
func (_EthDKGInformationFacet *EthDKGInformationFacetCallerSession) TMPKSUBMISSIONEND() (*big.Int, error) {
	return _EthDKGInformationFacet.Contract.TMPKSUBMISSIONEND(&_EthDKGInformationFacet.CallOpts)
}

// TREGISTRATIONEND is a free data retrieval call binding the contract method 0x0de1553f.
//
// Solidity: function T_REGISTRATION_END() view returns(uint256)
func (_EthDKGInformationFacet *EthDKGInformationFacetCaller) TREGISTRATIONEND(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _EthDKGInformationFacet.contract.Call(opts, &out, "T_REGISTRATION_END")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TREGISTRATIONEND is a free data retrieval call binding the contract method 0x0de1553f.
//
// Solidity: function T_REGISTRATION_END() view returns(uint256)
func (_EthDKGInformationFacet *EthDKGInformationFacetSession) TREGISTRATIONEND() (*big.Int, error) {
	return _EthDKGInformationFacet.Contract.TREGISTRATIONEND(&_EthDKGInformationFacet.CallOpts)
}

// TREGISTRATIONEND is a free data retrieval call binding the contract method 0x0de1553f.
//
// Solidity: function T_REGISTRATION_END() view returns(uint256)
func (_EthDKGInformationFacet *EthDKGInformationFacetCallerSession) TREGISTRATIONEND() (*big.Int, error) {
	return _EthDKGInformationFacet.Contract.TREGISTRATIONEND(&_EthDKGInformationFacet.CallOpts)
}

// TSHAREDISTRIBUTIONEND is a free data retrieval call binding the contract method 0xdc614e28.
//
// Solidity: function T_SHARE_DISTRIBUTION_END() view returns(uint256)
func (_EthDKGInformationFacet *EthDKGInformationFacetCaller) TSHAREDISTRIBUTIONEND(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _EthDKGInformationFacet.contract.Call(opts, &out, "T_SHARE_DISTRIBUTION_END")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TSHAREDISTRIBUTIONEND is a free data retrieval call binding the contract method 0xdc614e28.
//
// Solidity: function T_SHARE_DISTRIBUTION_END() view returns(uint256)
func (_EthDKGInformationFacet *EthDKGInformationFacetSession) TSHAREDISTRIBUTIONEND() (*big.Int, error) {
	return _EthDKGInformationFacet.Contract.TSHAREDISTRIBUTIONEND(&_EthDKGInformationFacet.CallOpts)
}

// TSHAREDISTRIBUTIONEND is a free data retrieval call binding the contract method 0xdc614e28.
//
// Solidity: function T_SHARE_DISTRIBUTION_END() view returns(uint256)
func (_EthDKGInformationFacet *EthDKGInformationFacetCallerSession) TSHAREDISTRIBUTIONEND() (*big.Int, error) {
	return _EthDKGInformationFacet.Contract.TSHAREDISTRIBUTIONEND(&_EthDKGInformationFacet.CallOpts)
}

// Addresses is a free data retrieval call binding the contract method 0xedf26d9b.
//
// Solidity: function addresses(uint256 idx) view returns(address)
func (_EthDKGInformationFacet *EthDKGInformationFacetCaller) Addresses(opts *bind.CallOpts, idx *big.Int) (common.Address, error) {
	var out []interface{}
	err := _EthDKGInformationFacet.contract.Call(opts, &out, "addresses", idx)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Addresses is a free data retrieval call binding the contract method 0xedf26d9b.
//
// Solidity: function addresses(uint256 idx) view returns(address)
func (_EthDKGInformationFacet *EthDKGInformationFacetSession) Addresses(idx *big.Int) (common.Address, error) {
	return _EthDKGInformationFacet.Contract.Addresses(&_EthDKGInformationFacet.CallOpts, idx)
}

// Addresses is a free data retrieval call binding the contract method 0xedf26d9b.
//
// Solidity: function addresses(uint256 idx) view returns(address)
func (_EthDKGInformationFacet *EthDKGInformationFacetCallerSession) Addresses(idx *big.Int) (common.Address, error) {
	return _EthDKGInformationFacet.Contract.Addresses(&_EthDKGInformationFacet.CallOpts, idx)
}

// Commitments1stCoefficient is a free data retrieval call binding the contract method 0x2cf4050b.
//
// Solidity: function commitments_1st_coefficient(address addr, uint256 idx) view returns(uint256)
func (_EthDKGInformationFacet *EthDKGInformationFacetCaller) Commitments1stCoefficient(opts *bind.CallOpts, addr common.Address, idx *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _EthDKGInformationFacet.contract.Call(opts, &out, "commitments_1st_coefficient", addr, idx)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Commitments1stCoefficient is a free data retrieval call binding the contract method 0x2cf4050b.
//
// Solidity: function commitments_1st_coefficient(address addr, uint256 idx) view returns(uint256)
func (_EthDKGInformationFacet *EthDKGInformationFacetSession) Commitments1stCoefficient(addr common.Address, idx *big.Int) (*big.Int, error) {
	return _EthDKGInformationFacet.Contract.Commitments1stCoefficient(&_EthDKGInformationFacet.CallOpts, addr, idx)
}

// Commitments1stCoefficient is a free data retrieval call binding the contract method 0x2cf4050b.
//
// Solidity: function commitments_1st_coefficient(address addr, uint256 idx) view returns(uint256)
func (_EthDKGInformationFacet *EthDKGInformationFacetCallerSession) Commitments1stCoefficient(addr common.Address, idx *big.Int) (*big.Int, error) {
	return _EthDKGInformationFacet.Contract.Commitments1stCoefficient(&_EthDKGInformationFacet.CallOpts, addr, idx)
}

// GetPhaseLength is a free data retrieval call binding the contract method 0x106da57d.
//
// Solidity: function getPhaseLength() view returns(uint256)
func (_EthDKGInformationFacet *EthDKGInformationFacetCaller) GetPhaseLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _EthDKGInformationFacet.contract.Call(opts, &out, "getPhaseLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPhaseLength is a free data retrieval call binding the contract method 0x106da57d.
//
// Solidity: function getPhaseLength() view returns(uint256)
func (_EthDKGInformationFacet *EthDKGInformationFacetSession) GetPhaseLength() (*big.Int, error) {
	return _EthDKGInformationFacet.Contract.GetPhaseLength(&_EthDKGInformationFacet.CallOpts)
}

// GetPhaseLength is a free data retrieval call binding the contract method 0x106da57d.
//
// Solidity: function getPhaseLength() view returns(uint256)
func (_EthDKGInformationFacet *EthDKGInformationFacetCallerSession) GetPhaseLength() (*big.Int, error) {
	return _EthDKGInformationFacet.Contract.GetPhaseLength(&_EthDKGInformationFacet.CallOpts)
}

// GpkjSubmissions is a free data retrieval call binding the contract method 0xfef001a9.
//
// Solidity: function gpkj_submissions(address addr, uint256 idx) view returns(uint256)
func (_EthDKGInformationFacet *EthDKGInformationFacetCaller) GpkjSubmissions(opts *bind.CallOpts, addr common.Address, idx *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _EthDKGInformationFacet.contract.Call(opts, &out, "gpkj_submissions", addr, idx)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GpkjSubmissions is a free data retrieval call binding the contract method 0xfef001a9.
//
// Solidity: function gpkj_submissions(address addr, uint256 idx) view returns(uint256)
func (_EthDKGInformationFacet *EthDKGInformationFacetSession) GpkjSubmissions(addr common.Address, idx *big.Int) (*big.Int, error) {
	return _EthDKGInformationFacet.Contract.GpkjSubmissions(&_EthDKGInformationFacet.CallOpts, addr, idx)
}

// GpkjSubmissions is a free data retrieval call binding the contract method 0xfef001a9.
//
// Solidity: function gpkj_submissions(address addr, uint256 idx) view returns(uint256)
func (_EthDKGInformationFacet *EthDKGInformationFacetCallerSession) GpkjSubmissions(addr common.Address, idx *big.Int) (*big.Int, error) {
	return _EthDKGInformationFacet.Contract.GpkjSubmissions(&_EthDKGInformationFacet.CallOpts, addr, idx)
}

// InitialMessage is a free data retrieval call binding the contract method 0x665f4c81.
//
// Solidity: function initialMessage() view returns(bytes)
func (_EthDKGInformationFacet *EthDKGInformationFacetCaller) InitialMessage(opts *bind.CallOpts) ([]byte, error) {
	var out []interface{}
	err := _EthDKGInformationFacet.contract.Call(opts, &out, "initialMessage")

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// InitialMessage is a free data retrieval call binding the contract method 0x665f4c81.
//
// Solidity: function initialMessage() view returns(bytes)
func (_EthDKGInformationFacet *EthDKGInformationFacetSession) InitialMessage() ([]byte, error) {
	return _EthDKGInformationFacet.Contract.InitialMessage(&_EthDKGInformationFacet.CallOpts)
}

// InitialMessage is a free data retrieval call binding the contract method 0x665f4c81.
//
// Solidity: function initialMessage() view returns(bytes)
func (_EthDKGInformationFacet *EthDKGInformationFacetCallerSession) InitialMessage() ([]byte, error) {
	return _EthDKGInformationFacet.Contract.InitialMessage(&_EthDKGInformationFacet.CallOpts)
}

// InitialSignatures is a free data retrieval call binding the contract method 0xfa055f2f.
//
// Solidity: function initialSignatures(address addr, uint256 idx) view returns(uint256)
func (_EthDKGInformationFacet *EthDKGInformationFacetCaller) InitialSignatures(opts *bind.CallOpts, addr common.Address, idx *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _EthDKGInformationFacet.contract.Call(opts, &out, "initialSignatures", addr, idx)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// InitialSignatures is a free data retrieval call binding the contract method 0xfa055f2f.
//
// Solidity: function initialSignatures(address addr, uint256 idx) view returns(uint256)
func (_EthDKGInformationFacet *EthDKGInformationFacetSession) InitialSignatures(addr common.Address, idx *big.Int) (*big.Int, error) {
	return _EthDKGInformationFacet.Contract.InitialSignatures(&_EthDKGInformationFacet.CallOpts, addr, idx)
}

// InitialSignatures is a free data retrieval call binding the contract method 0xfa055f2f.
//
// Solidity: function initialSignatures(address addr, uint256 idx) view returns(uint256)
func (_EthDKGInformationFacet *EthDKGInformationFacetCallerSession) InitialSignatures(addr common.Address, idx *big.Int) (*big.Int, error) {
	return _EthDKGInformationFacet.Contract.InitialSignatures(&_EthDKGInformationFacet.CallOpts, addr, idx)
}

// IsMalicious is a free data retrieval call binding the contract method 0x9c02514a.
//
// Solidity: function isMalicious(address addr) view returns(bool)
func (_EthDKGInformationFacet *EthDKGInformationFacetCaller) IsMalicious(opts *bind.CallOpts, addr common.Address) (bool, error) {
	var out []interface{}
	err := _EthDKGInformationFacet.contract.Call(opts, &out, "isMalicious", addr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsMalicious is a free data retrieval call binding the contract method 0x9c02514a.
//
// Solidity: function isMalicious(address addr) view returns(bool)
func (_EthDKGInformationFacet *EthDKGInformationFacetSession) IsMalicious(addr common.Address) (bool, error) {
	return _EthDKGInformationFacet.Contract.IsMalicious(&_EthDKGInformationFacet.CallOpts, addr)
}

// IsMalicious is a free data retrieval call binding the contract method 0x9c02514a.
//
// Solidity: function isMalicious(address addr) view returns(bool)
func (_EthDKGInformationFacet *EthDKGInformationFacetCallerSession) IsMalicious(addr common.Address) (bool, error) {
	return _EthDKGInformationFacet.Contract.IsMalicious(&_EthDKGInformationFacet.CallOpts, addr)
}

// KeyShares is a free data retrieval call binding the contract method 0x85c02b1d.
//
// Solidity: function keyShares(address addr, uint256 idx) view returns(uint256)
func (_EthDKGInformationFacet *EthDKGInformationFacetCaller) KeyShares(opts *bind.CallOpts, addr common.Address, idx *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _EthDKGInformationFacet.contract.Call(opts, &out, "keyShares", addr, idx)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// KeyShares is a free data retrieval call binding the contract method 0x85c02b1d.
//
// Solidity: function keyShares(address addr, uint256 idx) view returns(uint256)
func (_EthDKGInformationFacet *EthDKGInformationFacetSession) KeyShares(addr common.Address, idx *big.Int) (*big.Int, error) {
	return _EthDKGInformationFacet.Contract.KeyShares(&_EthDKGInformationFacet.CallOpts, addr, idx)
}

// KeyShares is a free data retrieval call binding the contract method 0x85c02b1d.
//
// Solidity: function keyShares(address addr, uint256 idx) view returns(uint256)
func (_EthDKGInformationFacet *EthDKGInformationFacetCallerSession) KeyShares(addr common.Address, idx *big.Int) (*big.Int, error) {
	return _EthDKGInformationFacet.Contract.KeyShares(&_EthDKGInformationFacet.CallOpts, addr, idx)
}

// MasterPublicKey is a free data retrieval call binding the contract method 0xe6511378.
//
// Solidity: function master_public_key(uint256 idx) view returns(uint256)
func (_EthDKGInformationFacet *EthDKGInformationFacetCaller) MasterPublicKey(opts *bind.CallOpts, idx *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _EthDKGInformationFacet.contract.Call(opts, &out, "master_public_key", idx)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MasterPublicKey is a free data retrieval call binding the contract method 0xe6511378.
//
// Solidity: function master_public_key(uint256 idx) view returns(uint256)
func (_EthDKGInformationFacet *EthDKGInformationFacetSession) MasterPublicKey(idx *big.Int) (*big.Int, error) {
	return _EthDKGInformationFacet.Contract.MasterPublicKey(&_EthDKGInformationFacet.CallOpts, idx)
}

// MasterPublicKey is a free data retrieval call binding the contract method 0xe6511378.
//
// Solidity: function master_public_key(uint256 idx) view returns(uint256)
func (_EthDKGInformationFacet *EthDKGInformationFacetCallerSession) MasterPublicKey(idx *big.Int) (*big.Int, error) {
	return _EthDKGInformationFacet.Contract.MasterPublicKey(&_EthDKGInformationFacet.CallOpts, idx)
}

// NumberOfRegistrations is a free data retrieval call binding the contract method 0xd8f63eb7.
//
// Solidity: function numberOfRegistrations() view returns(uint256)
func (_EthDKGInformationFacet *EthDKGInformationFacetCaller) NumberOfRegistrations(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _EthDKGInformationFacet.contract.Call(opts, &out, "numberOfRegistrations")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NumberOfRegistrations is a free data retrieval call binding the contract method 0xd8f63eb7.
//
// Solidity: function numberOfRegistrations() view returns(uint256)
func (_EthDKGInformationFacet *EthDKGInformationFacetSession) NumberOfRegistrations() (*big.Int, error) {
	return _EthDKGInformationFacet.Contract.NumberOfRegistrations(&_EthDKGInformationFacet.CallOpts)
}

// NumberOfRegistrations is a free data retrieval call binding the contract method 0xd8f63eb7.
//
// Solidity: function numberOfRegistrations() view returns(uint256)
func (_EthDKGInformationFacet *EthDKGInformationFacetCallerSession) NumberOfRegistrations() (*big.Int, error) {
	return _EthDKGInformationFacet.Contract.NumberOfRegistrations(&_EthDKGInformationFacet.CallOpts)
}

// PublicKeys is a free data retrieval call binding the contract method 0x10782555.
//
// Solidity: function publicKeys(address addr, uint256 idx) view returns(uint256)
func (_EthDKGInformationFacet *EthDKGInformationFacetCaller) PublicKeys(opts *bind.CallOpts, addr common.Address, idx *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _EthDKGInformationFacet.contract.Call(opts, &out, "publicKeys", addr, idx)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PublicKeys is a free data retrieval call binding the contract method 0x10782555.
//
// Solidity: function publicKeys(address addr, uint256 idx) view returns(uint256)
func (_EthDKGInformationFacet *EthDKGInformationFacetSession) PublicKeys(addr common.Address, idx *big.Int) (*big.Int, error) {
	return _EthDKGInformationFacet.Contract.PublicKeys(&_EthDKGInformationFacet.CallOpts, addr, idx)
}

// PublicKeys is a free data retrieval call binding the contract method 0x10782555.
//
// Solidity: function publicKeys(address addr, uint256 idx) view returns(uint256)
func (_EthDKGInformationFacet *EthDKGInformationFacetCallerSession) PublicKeys(addr common.Address, idx *big.Int) (*big.Int, error) {
	return _EthDKGInformationFacet.Contract.PublicKeys(&_EthDKGInformationFacet.CallOpts, addr, idx)
}

// ShareDistributionHashes is a free data retrieval call binding the contract method 0x5634145a.
//
// Solidity: function shareDistributionHashes(address addr) view returns(bytes32)
func (_EthDKGInformationFacet *EthDKGInformationFacetCaller) ShareDistributionHashes(opts *bind.CallOpts, addr common.Address) ([32]byte, error) {
	var out []interface{}
	err := _EthDKGInformationFacet.contract.Call(opts, &out, "shareDistributionHashes", addr)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ShareDistributionHashes is a free data retrieval call binding the contract method 0x5634145a.
//
// Solidity: function shareDistributionHashes(address addr) view returns(bytes32)
func (_EthDKGInformationFacet *EthDKGInformationFacetSession) ShareDistributionHashes(addr common.Address) ([32]byte, error) {
	return _EthDKGInformationFacet.Contract.ShareDistributionHashes(&_EthDKGInformationFacet.CallOpts, addr)
}

// ShareDistributionHashes is a free data retrieval call binding the contract method 0x5634145a.
//
// Solidity: function shareDistributionHashes(address addr) view returns(bytes32)
func (_EthDKGInformationFacet *EthDKGInformationFacetCallerSession) ShareDistributionHashes(addr common.Address) ([32]byte, error) {
	return _EthDKGInformationFacet.Contract.ShareDistributionHashes(&_EthDKGInformationFacet.CallOpts, addr)
}

// ValidatorIndex is a free data retrieval call binding the contract method 0x9601ddf9.
//
// Solidity: function validatorIndex(address addr) view returns(uint256)
func (_EthDKGInformationFacet *EthDKGInformationFacetCaller) ValidatorIndex(opts *bind.CallOpts, addr common.Address) (*big.Int, error) {
	var out []interface{}
	err := _EthDKGInformationFacet.contract.Call(opts, &out, "validatorIndex", addr)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ValidatorIndex is a free data retrieval call binding the contract method 0x9601ddf9.
//
// Solidity: function validatorIndex(address addr) view returns(uint256)
func (_EthDKGInformationFacet *EthDKGInformationFacetSession) ValidatorIndex(addr common.Address) (*big.Int, error) {
	return _EthDKGInformationFacet.Contract.ValidatorIndex(&_EthDKGInformationFacet.CallOpts, addr)
}

// ValidatorIndex is a free data retrieval call binding the contract method 0x9601ddf9.
//
// Solidity: function validatorIndex(address addr) view returns(uint256)
func (_EthDKGInformationFacet *EthDKGInformationFacetCallerSession) ValidatorIndex(addr common.Address) (*big.Int, error) {
	return _EthDKGInformationFacet.Contract.ValidatorIndex(&_EthDKGInformationFacet.CallOpts, addr)
}

// EthDKGInitializeFacetMetaData contains all meta data concerning the EthDKGInitializeFacet contract.
var EthDKGInitializeFacetMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"grantOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractRegistry\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"initializeEthDKG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governance_\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"phaseLength\",\"type\":\"uint256\"}],\"name\":\"updatePhaseLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50600061002561007060201b610ab51760201c565b9050338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061009d565b6000807f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90508091505090565b611917806100ac6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063dc9780591161005b578063dc978059146100d9578063e348da13146100f5578063fad8b32a14610111578063fd0fe4ef1461012d57610088565b80632a7027731461008d57806360536172146100a957806382571195146100b3578063ab033ea9146100bd575b600080fd5b6100a760048036038101906100a2919061122d565b610149565b005b6100b16101f7565b005b6100bb610302565b005b6100d760048036038101906100d291906111a6565b6103a7565b005b6100f360048036038101906100ee91906111a6565b610499565b005b61010f600480360381019061010a91906111a6565b61058b565b005b61012b600480360381019061012691906111a6565b6106ea565b005b61014760048036038101906101429190611200565b610840565b005b6000610153610ab5565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166101e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101da9061140b565b60405180910390fd5b816101ec610ae2565b601001819055505050565b6000610201610ab5565b90508060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610295576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161028c906113cb565b60405180910390fd5b8060020160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600061030c610ab5565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661039c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103939061140b565b60405180910390fd5b6103a4610b0f565b50565b60006103b1610ab5565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610445576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043c9061142b565b60405180910390fd5b600061044f610ab5565b9050828160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b60006104a3610ab5565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610537576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052e9061142b565b60405180910390fd5b6000610541610ab5565b9050828160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b6000610595610ab5565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061064057508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b61067f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610676906113ab565b60405180910390fd5b6000610689610ab5565b905060018160000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550505050565b60006106f4610ab5565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061079f57508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6107de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d5906113ab565b60405180910390fd5b60006107e8610ab5565b90508060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff0219169055505050565b600061084a610ab5565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166108da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d19061140b565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff1663f67187ac6040518060400160405280600d81526020017f76616c696461746f72732f7631000000000000000000000000000000000000008152506040518263ffffffff1660e01b815260040161094a9190611389565b60206040518083038186803b15801561096257600080fd5b505afa158015610976573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099a91906111d3565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610a0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a03906113eb565b60405180910390fd5b6000610a16610ae2565b9050604051602001610a2790611374565b60405160208183030381529060405281600e019080519060200190610a4d929190611085565b508181600d0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060288160100181905550600681600f01819055506004816011018190555050505050565b6000807f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90508091505090565b6000807fd2d37756412c577f56b4802b8e643c9a817fa92cc18ff383f317fce7fab4282b90508091505090565b6000610b19610ae2565b90506000439050816010015481610b3091906114ff565b8260130181905550816010015482600f01548360130154610b5191906114ff565b610b5b91906114ff565b8260140181905550816010015482600f01548360140154610b7c91906114ff565b610b8691906114ff565b8260150181905550816010015482600f01548360150154610ba791906114ff565b610bb191906114ff565b8260160181905550816010015482600f01548360160154610bd291906114ff565b610bdc91906114ff565b8260170181905550816010015482600f01548360170154610bfd91906114ff565b610c0791906114ff565b8260180181905550816010015482600f01548360180154610c2891906114ff565b610c3291906114ff565b8260190181905550816010015482600f01548360190154610c5391906114ff565b610c5d91906114ff565b82601a01819055507f9c6f8368fe7e77e8cb9438744581403bcb3f53298e517f04c1b8475487402e978183601301548460140154856015015486601601548760170154886018015489601901548a601a0154604051610cc49998979695949392919061144b565b60405180910390a160008260120160006101000a81548160ff02191690831515021790555060008260120160016101000a81548160ff02191690831515021790555060008260120160026101000a81548160ff02191690831515021790555060008260120160036101000a81548160ff02191690831515021790555060008260120160046101000a81548160ff021916908315150217905550816009016000610d6d919061110b565b5b6000826000018054905011156110815760008260000160018460000180549050610d989190611555565b81548110610da957610da86116c9565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508260010160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000610e239190611127565b8260020160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600090558260030160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000610eb59190611127565b8260040160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000610f029190611127565b8260050160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000610f4f919061110b565b8260060160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000610f9c9190611127565b8260080160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff02191690558260070160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009055826000018054806110465761104561169a565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055905550610d6e565b5050565b8280546110919061160a565b90600052602060002090601f0160209004810192826110b357600085556110fa565b82601f106110cc57805160ff19168380011785556110fa565b828001600101855582156110fa579182015b828111156110f95782518255916020019190600101906110de565b5b5090506111079190611135565b5090565b5060008155600101600081556001016000815560010160009055565b506000815560010160009055565b5b8082111561114e576000816000905550600101611136565b5090565b6000813590506111618161189c565b92915050565b6000815190506111768161189c565b92915050565b60008135905061118b816118b3565b92915050565b6000813590506111a0816118ca565b92915050565b6000602082840312156111bc576111bb6116f8565b5b60006111ca84828501611152565b91505092915050565b6000602082840312156111e9576111e86116f8565b5b60006111f784828501611167565b91505092915050565b600060208284031215611216576112156116f8565b5b60006112248482850161117c565b91505092915050565b600060208284031215611243576112426116f8565b5b600061125184828501611191565b91505092915050565b6000611265826114d8565b61126f81856114e3565b935061127f8185602086016115d7565b611288816116fd565b840191505092915050565b60006112a0602e836114e3565b91506112ab8261170e565b604082019050919050565b60006112c36025836114e3565b91506112ce8261175d565b604082019050919050565b60006112e6601a836114e3565b91506112f1826117ac565b602082019050919050565b60006113096026836114e3565b9150611314826117d5565b604082019050919050565b600061132c6015836114f4565b915061133782611824565b601582019050919050565b600061134f6025836114e3565b915061135a8261184d565b604082019050919050565b61136e816115cd565b82525050565b600061137f8261131f565b9150819050919050565b600060208201905081810360008301526113a3818461125a565b905092915050565b600060208201905081810360008301526113c481611293565b9050919050565b600060208201905081810360008301526113e4816112b6565b9050919050565b60006020820190508181036000830152611404816112d9565b9050919050565b60006020820190508181036000830152611424816112fc565b9050919050565b6000602082019050818103600083015261144481611342565b9050919050565b600061012082019050611461600083018c611365565b61146e602083018b611365565b61147b604083018a611365565b6114886060830189611365565b6114956080830188611365565b6114a260a0830187611365565b6114af60c0830186611365565b6114bc60e0830185611365565b6114ca610100830184611365565b9a9950505050505050505050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600061150a826115cd565b9150611515836115cd565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561154a5761154961163c565b5b828201905092915050565b6000611560826115cd565b915061156b836115cd565b92508282101561157e5761157d61163c565b5b828203905092915050565b6000611594826115ad565b9050919050565b60006115a682611589565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b838110156115f55780820151818401526020810190506115da565b83811115611604576000848401525b50505050565b6000600282049050600182168061162257607f821691505b602082108114156116365761163561166b565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b6000601f19601f8301169050919050565b7f41636365737320436f6e74726f6c3a206f6e6c79206f776e6572206f72206f7060008201527f657261746f7220616c6c6f776564000000000000000000000000000000000000602082015250565b7f41636365737320436f6e74726f6c3a206f776e657273686970206e6f7420677260008201527f616e746564000000000000000000000000000000000000000000000000000000602082015250565b7f6d697373696e672076616c696461746f72732061646472657373000000000000600082015250565b7f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160008201527f6c6c6f7765640000000000000000000000000000000000000000000000000000602082015250565b7f43727970746f6772617068792069732067726561740000000000000000000000600082015250565b7f41636365737320436f6e74726f6c3a206f6e6c79206f776e657220697320616c60008201527f6c6f776564000000000000000000000000000000000000000000000000000000602082015250565b6118a581611589565b81146118b057600080fd5b50565b6118bc8161159b565b81146118c757600080fd5b50565b6118d3816115cd565b81146118de57600080fd5b5056fea2646970667358221220073bc4e4c7d2900252a2aa67d4bbdf157659af5517e1ce39817b7082306ff33064736f6c63430008060033",
}

// EthDKGInitializeFacetABI is the input ABI used to generate the binding from.
// Deprecated: Use EthDKGInitializeFacetMetaData.ABI instead.
var EthDKGInitializeFacetABI = EthDKGInitializeFacetMetaData.ABI

// EthDKGInitializeFacetBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use EthDKGInitializeFacetMetaData.Bin instead.
var EthDKGInitializeFacetBin = EthDKGInitializeFacetMetaData.Bin

// DeployEthDKGInitializeFacet deploys a new Ethereum contract, binding an instance of EthDKGInitializeFacet to it.
func DeployEthDKGInitializeFacet(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *EthDKGInitializeFacet, error) {
	parsed, err := EthDKGInitializeFacetMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(EthDKGInitializeFacetBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &EthDKGInitializeFacet{EthDKGInitializeFacetCaller: EthDKGInitializeFacetCaller{contract: contract}, EthDKGInitializeFacetTransactor: EthDKGInitializeFacetTransactor{contract: contract}, EthDKGInitializeFacetFilterer: EthDKGInitializeFacetFilterer{contract: contract}}, nil
}

// EthDKGInitializeFacet is an auto generated Go binding around an Ethereum contract.
type EthDKGInitializeFacet struct {
	EthDKGInitializeFacetCaller     // Read-only binding to the contract
	EthDKGInitializeFacetTransactor // Write-only binding to the contract
	EthDKGInitializeFacetFilterer   // Log filterer for contract events
}

// EthDKGInitializeFacetCaller is an auto generated read-only Go binding around an Ethereum contract.
type EthDKGInitializeFacetCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EthDKGInitializeFacetTransactor is an auto generated write-only Go binding around an Ethereum contract.
type EthDKGInitializeFacetTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EthDKGInitializeFacetFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type EthDKGInitializeFacetFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EthDKGInitializeFacetSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type EthDKGInitializeFacetSession struct {
	Contract     *EthDKGInitializeFacet // Generic contract binding to set the session for
	CallOpts     bind.CallOpts          // Call options to use throughout this session
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// EthDKGInitializeFacetCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type EthDKGInitializeFacetCallerSession struct {
	Contract *EthDKGInitializeFacetCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                // Call options to use throughout this session
}

// EthDKGInitializeFacetTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type EthDKGInitializeFacetTransactorSession struct {
	Contract     *EthDKGInitializeFacetTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                // Transaction auth options to use throughout this session
}

// EthDKGInitializeFacetRaw is an auto generated low-level Go binding around an Ethereum contract.
type EthDKGInitializeFacetRaw struct {
	Contract *EthDKGInitializeFacet // Generic contract binding to access the raw methods on
}

// EthDKGInitializeFacetCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type EthDKGInitializeFacetCallerRaw struct {
	Contract *EthDKGInitializeFacetCaller // Generic read-only contract binding to access the raw methods on
}

// EthDKGInitializeFacetTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type EthDKGInitializeFacetTransactorRaw struct {
	Contract *EthDKGInitializeFacetTransactor // Generic write-only contract binding to access the raw methods on
}

// NewEthDKGInitializeFacet creates a new instance of EthDKGInitializeFacet, bound to a specific deployed contract.
func NewEthDKGInitializeFacet(address common.Address, backend bind.ContractBackend) (*EthDKGInitializeFacet, error) {
	contract, err := bindEthDKGInitializeFacet(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &EthDKGInitializeFacet{EthDKGInitializeFacetCaller: EthDKGInitializeFacetCaller{contract: contract}, EthDKGInitializeFacetTransactor: EthDKGInitializeFacetTransactor{contract: contract}, EthDKGInitializeFacetFilterer: EthDKGInitializeFacetFilterer{contract: contract}}, nil
}

// NewEthDKGInitializeFacetCaller creates a new read-only instance of EthDKGInitializeFacet, bound to a specific deployed contract.
func NewEthDKGInitializeFacetCaller(address common.Address, caller bind.ContractCaller) (*EthDKGInitializeFacetCaller, error) {
	contract, err := bindEthDKGInitializeFacet(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &EthDKGInitializeFacetCaller{contract: contract}, nil
}

// NewEthDKGInitializeFacetTransactor creates a new write-only instance of EthDKGInitializeFacet, bound to a specific deployed contract.
func NewEthDKGInitializeFacetTransactor(address common.Address, transactor bind.ContractTransactor) (*EthDKGInitializeFacetTransactor, error) {
	contract, err := bindEthDKGInitializeFacet(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &EthDKGInitializeFacetTransactor{contract: contract}, nil
}

// NewEthDKGInitializeFacetFilterer creates a new log filterer instance of EthDKGInitializeFacet, bound to a specific deployed contract.
func NewEthDKGInitializeFacetFilterer(address common.Address, filterer bind.ContractFilterer) (*EthDKGInitializeFacetFilterer, error) {
	contract, err := bindEthDKGInitializeFacet(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &EthDKGInitializeFacetFilterer{contract: contract}, nil
}

// bindEthDKGInitializeFacet binds a generic wrapper to an already deployed contract.
func bindEthDKGInitializeFacet(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(EthDKGInitializeFacetABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_EthDKGInitializeFacet *EthDKGInitializeFacetRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _EthDKGInitializeFacet.Contract.EthDKGInitializeFacetCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_EthDKGInitializeFacet *EthDKGInitializeFacetRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EthDKGInitializeFacet.Contract.EthDKGInitializeFacetTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_EthDKGInitializeFacet *EthDKGInitializeFacetRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _EthDKGInitializeFacet.Contract.EthDKGInitializeFacetTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_EthDKGInitializeFacet *EthDKGInitializeFacetCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _EthDKGInitializeFacet.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_EthDKGInitializeFacet *EthDKGInitializeFacetTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EthDKGInitializeFacet.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_EthDKGInitializeFacet *EthDKGInitializeFacetTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _EthDKGInitializeFacet.Contract.contract.Transact(opts, method, params...)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_EthDKGInitializeFacet *EthDKGInitializeFacetTransactor) GrantOperator(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _EthDKGInitializeFacet.contract.Transact(opts, "grantOperator", who)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_EthDKGInitializeFacet *EthDKGInitializeFacetSession) GrantOperator(who common.Address) (*types.Transaction, error) {
	return _EthDKGInitializeFacet.Contract.GrantOperator(&_EthDKGInitializeFacet.TransactOpts, who)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_EthDKGInitializeFacet *EthDKGInitializeFacetTransactorSession) GrantOperator(who common.Address) (*types.Transaction, error) {
	return _EthDKGInitializeFacet.Contract.GrantOperator(&_EthDKGInitializeFacet.TransactOpts, who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_EthDKGInitializeFacet *EthDKGInitializeFacetTransactor) GrantOwner(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _EthDKGInitializeFacet.contract.Transact(opts, "grantOwner", who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_EthDKGInitializeFacet *EthDKGInitializeFacetSession) GrantOwner(who common.Address) (*types.Transaction, error) {
	return _EthDKGInitializeFacet.Contract.GrantOwner(&_EthDKGInitializeFacet.TransactOpts, who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_EthDKGInitializeFacet *EthDKGInitializeFacetTransactorSession) GrantOwner(who common.Address) (*types.Transaction, error) {
	return _EthDKGInitializeFacet.Contract.GrantOwner(&_EthDKGInitializeFacet.TransactOpts, who)
}

// InitializeEthDKG is a paid mutator transaction binding the contract method 0xfd0fe4ef.
//
// Solidity: function initializeEthDKG(address registry) returns()
func (_EthDKGInitializeFacet *EthDKGInitializeFacetTransactor) InitializeEthDKG(opts *bind.TransactOpts, registry common.Address) (*types.Transaction, error) {
	return _EthDKGInitializeFacet.contract.Transact(opts, "initializeEthDKG", registry)
}

// InitializeEthDKG is a paid mutator transaction binding the contract method 0xfd0fe4ef.
//
// Solidity: function initializeEthDKG(address registry) returns()
func (_EthDKGInitializeFacet *EthDKGInitializeFacetSession) InitializeEthDKG(registry common.Address) (*types.Transaction, error) {
	return _EthDKGInitializeFacet.Contract.InitializeEthDKG(&_EthDKGInitializeFacet.TransactOpts, registry)
}

// InitializeEthDKG is a paid mutator transaction binding the contract method 0xfd0fe4ef.
//
// Solidity: function initializeEthDKG(address registry) returns()
func (_EthDKGInitializeFacet *EthDKGInitializeFacetTransactorSession) InitializeEthDKG(registry common.Address) (*types.Transaction, error) {
	return _EthDKGInitializeFacet.Contract.InitializeEthDKG(&_EthDKGInitializeFacet.TransactOpts, registry)
}

// InitializeState is a paid mutator transaction binding the contract method 0x82571195.
//
// Solidity: function initializeState() returns()
func (_EthDKGInitializeFacet *EthDKGInitializeFacetTransactor) InitializeState(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EthDKGInitializeFacet.contract.Transact(opts, "initializeState")
}

// InitializeState is a paid mutator transaction binding the contract method 0x82571195.
//
// Solidity: function initializeState() returns()
func (_EthDKGInitializeFacet *EthDKGInitializeFacetSession) InitializeState() (*types.Transaction, error) {
	return _EthDKGInitializeFacet.Contract.InitializeState(&_EthDKGInitializeFacet.TransactOpts)
}

// InitializeState is a paid mutator transaction binding the contract method 0x82571195.
//
// Solidity: function initializeState() returns()
func (_EthDKGInitializeFacet *EthDKGInitializeFacetTransactorSession) InitializeState() (*types.Transaction, error) {
	return _EthDKGInitializeFacet.Contract.InitializeState(&_EthDKGInitializeFacet.TransactOpts)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_EthDKGInitializeFacet *EthDKGInitializeFacetTransactor) RevokeOperator(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _EthDKGInitializeFacet.contract.Transact(opts, "revokeOperator", who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_EthDKGInitializeFacet *EthDKGInitializeFacetSession) RevokeOperator(who common.Address) (*types.Transaction, error) {
	return _EthDKGInitializeFacet.Contract.RevokeOperator(&_EthDKGInitializeFacet.TransactOpts, who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_EthDKGInitializeFacet *EthDKGInitializeFacetTransactorSession) RevokeOperator(who common.Address) (*types.Transaction, error) {
	return _EthDKGInitializeFacet.Contract.RevokeOperator(&_EthDKGInitializeFacet.TransactOpts, who)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_EthDKGInitializeFacet *EthDKGInitializeFacetTransactor) SetGovernance(opts *bind.TransactOpts, governance_ common.Address) (*types.Transaction, error) {
	return _EthDKGInitializeFacet.contract.Transact(opts, "setGovernance", governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_EthDKGInitializeFacet *EthDKGInitializeFacetSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _EthDKGInitializeFacet.Contract.SetGovernance(&_EthDKGInitializeFacet.TransactOpts, governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_EthDKGInitializeFacet *EthDKGInitializeFacetTransactorSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _EthDKGInitializeFacet.Contract.SetGovernance(&_EthDKGInitializeFacet.TransactOpts, governance_)
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_EthDKGInitializeFacet *EthDKGInitializeFacetTransactor) TakeOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EthDKGInitializeFacet.contract.Transact(opts, "takeOwnership")
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_EthDKGInitializeFacet *EthDKGInitializeFacetSession) TakeOwnership() (*types.Transaction, error) {
	return _EthDKGInitializeFacet.Contract.TakeOwnership(&_EthDKGInitializeFacet.TransactOpts)
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_EthDKGInitializeFacet *EthDKGInitializeFacetTransactorSession) TakeOwnership() (*types.Transaction, error) {
	return _EthDKGInitializeFacet.Contract.TakeOwnership(&_EthDKGInitializeFacet.TransactOpts)
}

// UpdatePhaseLength is a paid mutator transaction binding the contract method 0x2a702773.
//
// Solidity: function updatePhaseLength(uint256 phaseLength) returns()
func (_EthDKGInitializeFacet *EthDKGInitializeFacetTransactor) UpdatePhaseLength(opts *bind.TransactOpts, phaseLength *big.Int) (*types.Transaction, error) {
	return _EthDKGInitializeFacet.contract.Transact(opts, "updatePhaseLength", phaseLength)
}

// UpdatePhaseLength is a paid mutator transaction binding the contract method 0x2a702773.
//
// Solidity: function updatePhaseLength(uint256 phaseLength) returns()
func (_EthDKGInitializeFacet *EthDKGInitializeFacetSession) UpdatePhaseLength(phaseLength *big.Int) (*types.Transaction, error) {
	return _EthDKGInitializeFacet.Contract.UpdatePhaseLength(&_EthDKGInitializeFacet.TransactOpts, phaseLength)
}

// UpdatePhaseLength is a paid mutator transaction binding the contract method 0x2a702773.
//
// Solidity: function updatePhaseLength(uint256 phaseLength) returns()
func (_EthDKGInitializeFacet *EthDKGInitializeFacetTransactorSession) UpdatePhaseLength(phaseLength *big.Int) (*types.Transaction, error) {
	return _EthDKGInitializeFacet.Contract.UpdatePhaseLength(&_EthDKGInitializeFacet.TransactOpts, phaseLength)
}

// EthDKGLibraryMetaData contains all meta data concerning the EthDKGLibrary contract.
var EthDKGLibraryMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"key_share_G1\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"key_share_G1_correctness_proof\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[4]\",\"name\":\"key_share_G2\",\"type\":\"uint256[4]\"}],\"name\":\"KeyShareSubmission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dkgStarts\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"registrationEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shareDistributionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"disputeEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"keyShareSubmissionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mpkSubmissionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gpkjSubmissionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gpkjDisputeEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dkgComplete\",\"type\":\"uint256\"}],\"name\":\"RegistrationOpen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"encrypted_shares\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[2][]\",\"name\":\"commitments\",\"type\":\"uint256[2][]\"}],\"name\":\"ShareDistribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share3\",\"type\":\"uint256\"}],\"name\":\"ValidatorMember\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"validatorCount\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"ethHeight\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"madHeight\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey3\",\"type\":\"uint256\"}],\"name\":\"ValidatorSet\",\"type\":\"event\"}]",
	Bin: "0x60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c6e05d7b14ec6e57c43c2fe9365cb1fa29770b3823d553f7d1159a757df4a53364736f6c63430008060033",
}

// EthDKGLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use EthDKGLibraryMetaData.ABI instead.
var EthDKGLibraryABI = EthDKGLibraryMetaData.ABI

// EthDKGLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use EthDKGLibraryMetaData.Bin instead.
var EthDKGLibraryBin = EthDKGLibraryMetaData.Bin

// DeployEthDKGLibrary deploys a new Ethereum contract, binding an instance of EthDKGLibrary to it.
func DeployEthDKGLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *EthDKGLibrary, error) {
	parsed, err := EthDKGLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(EthDKGLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &EthDKGLibrary{EthDKGLibraryCaller: EthDKGLibraryCaller{contract: contract}, EthDKGLibraryTransactor: EthDKGLibraryTransactor{contract: contract}, EthDKGLibraryFilterer: EthDKGLibraryFilterer{contract: contract}}, nil
}

// EthDKGLibrary is an auto generated Go binding around an Ethereum contract.
type EthDKGLibrary struct {
	EthDKGLibraryCaller     // Read-only binding to the contract
	EthDKGLibraryTransactor // Write-only binding to the contract
	EthDKGLibraryFilterer   // Log filterer for contract events
}

// EthDKGLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type EthDKGLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EthDKGLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type EthDKGLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EthDKGLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type EthDKGLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EthDKGLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type EthDKGLibrarySession struct {
	Contract     *EthDKGLibrary    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// EthDKGLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type EthDKGLibraryCallerSession struct {
	Contract *EthDKGLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// EthDKGLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type EthDKGLibraryTransactorSession struct {
	Contract     *EthDKGLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// EthDKGLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type EthDKGLibraryRaw struct {
	Contract *EthDKGLibrary // Generic contract binding to access the raw methods on
}

// EthDKGLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type EthDKGLibraryCallerRaw struct {
	Contract *EthDKGLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// EthDKGLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type EthDKGLibraryTransactorRaw struct {
	Contract *EthDKGLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewEthDKGLibrary creates a new instance of EthDKGLibrary, bound to a specific deployed contract.
func NewEthDKGLibrary(address common.Address, backend bind.ContractBackend) (*EthDKGLibrary, error) {
	contract, err := bindEthDKGLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &EthDKGLibrary{EthDKGLibraryCaller: EthDKGLibraryCaller{contract: contract}, EthDKGLibraryTransactor: EthDKGLibraryTransactor{contract: contract}, EthDKGLibraryFilterer: EthDKGLibraryFilterer{contract: contract}}, nil
}

// NewEthDKGLibraryCaller creates a new read-only instance of EthDKGLibrary, bound to a specific deployed contract.
func NewEthDKGLibraryCaller(address common.Address, caller bind.ContractCaller) (*EthDKGLibraryCaller, error) {
	contract, err := bindEthDKGLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &EthDKGLibraryCaller{contract: contract}, nil
}

// NewEthDKGLibraryTransactor creates a new write-only instance of EthDKGLibrary, bound to a specific deployed contract.
func NewEthDKGLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*EthDKGLibraryTransactor, error) {
	contract, err := bindEthDKGLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &EthDKGLibraryTransactor{contract: contract}, nil
}

// NewEthDKGLibraryFilterer creates a new log filterer instance of EthDKGLibrary, bound to a specific deployed contract.
func NewEthDKGLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*EthDKGLibraryFilterer, error) {
	contract, err := bindEthDKGLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &EthDKGLibraryFilterer{contract: contract}, nil
}

// bindEthDKGLibrary binds a generic wrapper to an already deployed contract.
func bindEthDKGLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(EthDKGLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_EthDKGLibrary *EthDKGLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _EthDKGLibrary.Contract.EthDKGLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_EthDKGLibrary *EthDKGLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EthDKGLibrary.Contract.EthDKGLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_EthDKGLibrary *EthDKGLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _EthDKGLibrary.Contract.EthDKGLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_EthDKGLibrary *EthDKGLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _EthDKGLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_EthDKGLibrary *EthDKGLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EthDKGLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_EthDKGLibrary *EthDKGLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _EthDKGLibrary.Contract.contract.Transact(opts, method, params...)
}

// EthDKGLibraryKeyShareSubmissionIterator is returned from FilterKeyShareSubmission and is used to iterate over the raw logs and unpacked data for KeyShareSubmission events raised by the EthDKGLibrary contract.
type EthDKGLibraryKeyShareSubmissionIterator struct {
	Event *EthDKGLibraryKeyShareSubmission // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EthDKGLibraryKeyShareSubmissionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EthDKGLibraryKeyShareSubmission)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EthDKGLibraryKeyShareSubmission)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EthDKGLibraryKeyShareSubmissionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EthDKGLibraryKeyShareSubmissionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EthDKGLibraryKeyShareSubmission represents a KeyShareSubmission event raised by the EthDKGLibrary contract.
type EthDKGLibraryKeyShareSubmission struct {
	Issuer                     common.Address
	KeyShareG1                 [2]*big.Int
	KeyShareG1CorrectnessProof [2]*big.Int
	KeyShareG2                 [4]*big.Int
	Raw                        types.Log // Blockchain specific contextual infos
}

// FilterKeyShareSubmission is a free log retrieval operation binding the contract event 0xb0ee36c3780de716eb6c83687f433ae2558a6923e090fd238b657fb6c896badc.
//
// Solidity: event KeyShareSubmission(address issuer, uint256[2] key_share_G1, uint256[2] key_share_G1_correctness_proof, uint256[4] key_share_G2)
func (_EthDKGLibrary *EthDKGLibraryFilterer) FilterKeyShareSubmission(opts *bind.FilterOpts) (*EthDKGLibraryKeyShareSubmissionIterator, error) {

	logs, sub, err := _EthDKGLibrary.contract.FilterLogs(opts, "KeyShareSubmission")
	if err != nil {
		return nil, err
	}
	return &EthDKGLibraryKeyShareSubmissionIterator{contract: _EthDKGLibrary.contract, event: "KeyShareSubmission", logs: logs, sub: sub}, nil
}

// WatchKeyShareSubmission is a free log subscription operation binding the contract event 0xb0ee36c3780de716eb6c83687f433ae2558a6923e090fd238b657fb6c896badc.
//
// Solidity: event KeyShareSubmission(address issuer, uint256[2] key_share_G1, uint256[2] key_share_G1_correctness_proof, uint256[4] key_share_G2)
func (_EthDKGLibrary *EthDKGLibraryFilterer) WatchKeyShareSubmission(opts *bind.WatchOpts, sink chan<- *EthDKGLibraryKeyShareSubmission) (event.Subscription, error) {

	logs, sub, err := _EthDKGLibrary.contract.WatchLogs(opts, "KeyShareSubmission")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EthDKGLibraryKeyShareSubmission)
				if err := _EthDKGLibrary.contract.UnpackLog(event, "KeyShareSubmission", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKeyShareSubmission is a log parse operation binding the contract event 0xb0ee36c3780de716eb6c83687f433ae2558a6923e090fd238b657fb6c896badc.
//
// Solidity: event KeyShareSubmission(address issuer, uint256[2] key_share_G1, uint256[2] key_share_G1_correctness_proof, uint256[4] key_share_G2)
func (_EthDKGLibrary *EthDKGLibraryFilterer) ParseKeyShareSubmission(log types.Log) (*EthDKGLibraryKeyShareSubmission, error) {
	event := new(EthDKGLibraryKeyShareSubmission)
	if err := _EthDKGLibrary.contract.UnpackLog(event, "KeyShareSubmission", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// EthDKGLibraryRegistrationOpenIterator is returned from FilterRegistrationOpen and is used to iterate over the raw logs and unpacked data for RegistrationOpen events raised by the EthDKGLibrary contract.
type EthDKGLibraryRegistrationOpenIterator struct {
	Event *EthDKGLibraryRegistrationOpen // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EthDKGLibraryRegistrationOpenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EthDKGLibraryRegistrationOpen)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EthDKGLibraryRegistrationOpen)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EthDKGLibraryRegistrationOpenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EthDKGLibraryRegistrationOpenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EthDKGLibraryRegistrationOpen represents a RegistrationOpen event raised by the EthDKGLibrary contract.
type EthDKGLibraryRegistrationOpen struct {
	DkgStarts              *big.Int
	RegistrationEnds       *big.Int
	ShareDistributionEnds  *big.Int
	DisputeEnds            *big.Int
	KeyShareSubmissionEnds *big.Int
	MpkSubmissionEnds      *big.Int
	GpkjSubmissionEnds     *big.Int
	GpkjDisputeEnds        *big.Int
	DkgComplete            *big.Int
	Raw                    types.Log // Blockchain specific contextual infos
}

// FilterRegistrationOpen is a free log retrieval operation binding the contract event 0x9c6f8368fe7e77e8cb9438744581403bcb3f53298e517f04c1b8475487402e97.
//
// Solidity: event RegistrationOpen(uint256 dkgStarts, uint256 registrationEnds, uint256 shareDistributionEnds, uint256 disputeEnds, uint256 keyShareSubmissionEnds, uint256 mpkSubmissionEnds, uint256 gpkjSubmissionEnds, uint256 gpkjDisputeEnds, uint256 dkgComplete)
func (_EthDKGLibrary *EthDKGLibraryFilterer) FilterRegistrationOpen(opts *bind.FilterOpts) (*EthDKGLibraryRegistrationOpenIterator, error) {

	logs, sub, err := _EthDKGLibrary.contract.FilterLogs(opts, "RegistrationOpen")
	if err != nil {
		return nil, err
	}
	return &EthDKGLibraryRegistrationOpenIterator{contract: _EthDKGLibrary.contract, event: "RegistrationOpen", logs: logs, sub: sub}, nil
}

// WatchRegistrationOpen is a free log subscription operation binding the contract event 0x9c6f8368fe7e77e8cb9438744581403bcb3f53298e517f04c1b8475487402e97.
//
// Solidity: event RegistrationOpen(uint256 dkgStarts, uint256 registrationEnds, uint256 shareDistributionEnds, uint256 disputeEnds, uint256 keyShareSubmissionEnds, uint256 mpkSubmissionEnds, uint256 gpkjSubmissionEnds, uint256 gpkjDisputeEnds, uint256 dkgComplete)
func (_EthDKGLibrary *EthDKGLibraryFilterer) WatchRegistrationOpen(opts *bind.WatchOpts, sink chan<- *EthDKGLibraryRegistrationOpen) (event.Subscription, error) {

	logs, sub, err := _EthDKGLibrary.contract.WatchLogs(opts, "RegistrationOpen")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EthDKGLibraryRegistrationOpen)
				if err := _EthDKGLibrary.contract.UnpackLog(event, "RegistrationOpen", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegistrationOpen is a log parse operation binding the contract event 0x9c6f8368fe7e77e8cb9438744581403bcb3f53298e517f04c1b8475487402e97.
//
// Solidity: event RegistrationOpen(uint256 dkgStarts, uint256 registrationEnds, uint256 shareDistributionEnds, uint256 disputeEnds, uint256 keyShareSubmissionEnds, uint256 mpkSubmissionEnds, uint256 gpkjSubmissionEnds, uint256 gpkjDisputeEnds, uint256 dkgComplete)
func (_EthDKGLibrary *EthDKGLibraryFilterer) ParseRegistrationOpen(log types.Log) (*EthDKGLibraryRegistrationOpen, error) {
	event := new(EthDKGLibraryRegistrationOpen)
	if err := _EthDKGLibrary.contract.UnpackLog(event, "RegistrationOpen", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// EthDKGLibraryShareDistributionIterator is returned from FilterShareDistribution and is used to iterate over the raw logs and unpacked data for ShareDistribution events raised by the EthDKGLibrary contract.
type EthDKGLibraryShareDistributionIterator struct {
	Event *EthDKGLibraryShareDistribution // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EthDKGLibraryShareDistributionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EthDKGLibraryShareDistribution)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EthDKGLibraryShareDistribution)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EthDKGLibraryShareDistributionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EthDKGLibraryShareDistributionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EthDKGLibraryShareDistribution represents a ShareDistribution event raised by the EthDKGLibrary contract.
type EthDKGLibraryShareDistribution struct {
	Issuer          common.Address
	Index           *big.Int
	EncryptedShares []*big.Int
	Commitments     [][2]*big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterShareDistribution is a free log retrieval operation binding the contract event 0xa84d294194d6169652a99150fd2ef10e18b0d2caa10beeea237bbddcc6e22b10.
//
// Solidity: event ShareDistribution(address issuer, uint256 index, uint256[] encrypted_shares, uint256[2][] commitments)
func (_EthDKGLibrary *EthDKGLibraryFilterer) FilterShareDistribution(opts *bind.FilterOpts) (*EthDKGLibraryShareDistributionIterator, error) {

	logs, sub, err := _EthDKGLibrary.contract.FilterLogs(opts, "ShareDistribution")
	if err != nil {
		return nil, err
	}
	return &EthDKGLibraryShareDistributionIterator{contract: _EthDKGLibrary.contract, event: "ShareDistribution", logs: logs, sub: sub}, nil
}

// WatchShareDistribution is a free log subscription operation binding the contract event 0xa84d294194d6169652a99150fd2ef10e18b0d2caa10beeea237bbddcc6e22b10.
//
// Solidity: event ShareDistribution(address issuer, uint256 index, uint256[] encrypted_shares, uint256[2][] commitments)
func (_EthDKGLibrary *EthDKGLibraryFilterer) WatchShareDistribution(opts *bind.WatchOpts, sink chan<- *EthDKGLibraryShareDistribution) (event.Subscription, error) {

	logs, sub, err := _EthDKGLibrary.contract.WatchLogs(opts, "ShareDistribution")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EthDKGLibraryShareDistribution)
				if err := _EthDKGLibrary.contract.UnpackLog(event, "ShareDistribution", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseShareDistribution is a log parse operation binding the contract event 0xa84d294194d6169652a99150fd2ef10e18b0d2caa10beeea237bbddcc6e22b10.
//
// Solidity: event ShareDistribution(address issuer, uint256 index, uint256[] encrypted_shares, uint256[2][] commitments)
func (_EthDKGLibrary *EthDKGLibraryFilterer) ParseShareDistribution(log types.Log) (*EthDKGLibraryShareDistribution, error) {
	event := new(EthDKGLibraryShareDistribution)
	if err := _EthDKGLibrary.contract.UnpackLog(event, "ShareDistribution", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// EthDKGLibraryValidatorMemberIterator is returned from FilterValidatorMember and is used to iterate over the raw logs and unpacked data for ValidatorMember events raised by the EthDKGLibrary contract.
type EthDKGLibraryValidatorMemberIterator struct {
	Event *EthDKGLibraryValidatorMember // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EthDKGLibraryValidatorMemberIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EthDKGLibraryValidatorMember)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EthDKGLibraryValidatorMember)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EthDKGLibraryValidatorMemberIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EthDKGLibraryValidatorMemberIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EthDKGLibraryValidatorMember represents a ValidatorMember event raised by the EthDKGLibrary contract.
type EthDKGLibraryValidatorMember struct {
	Account common.Address
	Epoch   *big.Int
	Index   *big.Int
	Share0  *big.Int
	Share1  *big.Int
	Share2  *big.Int
	Share3  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterValidatorMember is a free log retrieval operation binding the contract event 0x113b129fac2dde341b9fbbec2bb79a95b9945b0e80fda711fc8ae5c7b0ea83b0.
//
// Solidity: event ValidatorMember(address account, uint256 epoch, uint256 index, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_EthDKGLibrary *EthDKGLibraryFilterer) FilterValidatorMember(opts *bind.FilterOpts) (*EthDKGLibraryValidatorMemberIterator, error) {

	logs, sub, err := _EthDKGLibrary.contract.FilterLogs(opts, "ValidatorMember")
	if err != nil {
		return nil, err
	}
	return &EthDKGLibraryValidatorMemberIterator{contract: _EthDKGLibrary.contract, event: "ValidatorMember", logs: logs, sub: sub}, nil
}

// WatchValidatorMember is a free log subscription operation binding the contract event 0x113b129fac2dde341b9fbbec2bb79a95b9945b0e80fda711fc8ae5c7b0ea83b0.
//
// Solidity: event ValidatorMember(address account, uint256 epoch, uint256 index, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_EthDKGLibrary *EthDKGLibraryFilterer) WatchValidatorMember(opts *bind.WatchOpts, sink chan<- *EthDKGLibraryValidatorMember) (event.Subscription, error) {

	logs, sub, err := _EthDKGLibrary.contract.WatchLogs(opts, "ValidatorMember")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EthDKGLibraryValidatorMember)
				if err := _EthDKGLibrary.contract.UnpackLog(event, "ValidatorMember", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorMember is a log parse operation binding the contract event 0x113b129fac2dde341b9fbbec2bb79a95b9945b0e80fda711fc8ae5c7b0ea83b0.
//
// Solidity: event ValidatorMember(address account, uint256 epoch, uint256 index, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_EthDKGLibrary *EthDKGLibraryFilterer) ParseValidatorMember(log types.Log) (*EthDKGLibraryValidatorMember, error) {
	event := new(EthDKGLibraryValidatorMember)
	if err := _EthDKGLibrary.contract.UnpackLog(event, "ValidatorMember", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// EthDKGLibraryValidatorSetIterator is returned from FilterValidatorSet and is used to iterate over the raw logs and unpacked data for ValidatorSet events raised by the EthDKGLibrary contract.
type EthDKGLibraryValidatorSetIterator struct {
	Event *EthDKGLibraryValidatorSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EthDKGLibraryValidatorSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EthDKGLibraryValidatorSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EthDKGLibraryValidatorSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EthDKGLibraryValidatorSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EthDKGLibraryValidatorSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EthDKGLibraryValidatorSet represents a ValidatorSet event raised by the EthDKGLibrary contract.
type EthDKGLibraryValidatorSet struct {
	ValidatorCount uint8
	Epoch          *big.Int
	EthHeight      uint32
	MadHeight      uint32
	GroupKey0      *big.Int
	GroupKey1      *big.Int
	GroupKey2      *big.Int
	GroupKey3      *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterValidatorSet is a free log retrieval operation binding the contract event 0x1c85ff1efe0a905f8feca811e617102cb7ec896aded693eb96366c8ef22bb09f.
//
// Solidity: event ValidatorSet(uint8 validatorCount, uint256 epoch, uint32 ethHeight, uint32 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_EthDKGLibrary *EthDKGLibraryFilterer) FilterValidatorSet(opts *bind.FilterOpts) (*EthDKGLibraryValidatorSetIterator, error) {

	logs, sub, err := _EthDKGLibrary.contract.FilterLogs(opts, "ValidatorSet")
	if err != nil {
		return nil, err
	}
	return &EthDKGLibraryValidatorSetIterator{contract: _EthDKGLibrary.contract, event: "ValidatorSet", logs: logs, sub: sub}, nil
}

// WatchValidatorSet is a free log subscription operation binding the contract event 0x1c85ff1efe0a905f8feca811e617102cb7ec896aded693eb96366c8ef22bb09f.
//
// Solidity: event ValidatorSet(uint8 validatorCount, uint256 epoch, uint32 ethHeight, uint32 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_EthDKGLibrary *EthDKGLibraryFilterer) WatchValidatorSet(opts *bind.WatchOpts, sink chan<- *EthDKGLibraryValidatorSet) (event.Subscription, error) {

	logs, sub, err := _EthDKGLibrary.contract.WatchLogs(opts, "ValidatorSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EthDKGLibraryValidatorSet)
				if err := _EthDKGLibrary.contract.UnpackLog(event, "ValidatorSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorSet is a log parse operation binding the contract event 0x1c85ff1efe0a905f8feca811e617102cb7ec896aded693eb96366c8ef22bb09f.
//
// Solidity: event ValidatorSet(uint8 validatorCount, uint256 epoch, uint32 ethHeight, uint32 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_EthDKGLibrary *EthDKGLibraryFilterer) ParseValidatorSet(log types.Log) (*EthDKGLibraryValidatorSet, error) {
	event := new(EthDKGLibraryValidatorSet)
	if err := _EthDKGLibrary.contract.UnpackLog(event, "ValidatorSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// EthDKGMiscFacetMetaData contains all meta data concerning the EthDKGMiscFacet contract.
var EthDKGMiscFacetMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"gpkj\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256[2]\",\"name\":\"sig\",\"type\":\"uint256[2]\"}],\"name\":\"Submit_GPKj\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"encrypted_shares\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[2][]\",\"name\":\"commitments\",\"type\":\"uint256[2][]\"}],\"name\":\"distribute_shares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"public_key\",\"type\":\"uint256[2]\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256[2]\",\"name\":\"key_share_G1\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"key_share_G1_correctness_proof\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[4]\",\"name\":\"key_share_G2\",\"type\":\"uint256[4]\"}],\"name\":\"submit_key_share\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b506152af806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80633442af5c146100515780637163525e1461006d578063a080e5e014610089578063dc5e8a0a146100a5575b600080fd5b61006b6004803603810190610066919061337f565b6100c1565b005b61008760048036038101906100829190613317565b610550565b005b6100a3600480360381019061009e91906133ec565b610cd1565b005b6100bf60048036038101906100ba91906133ac565b611205565b005b60006100cb6116b7565b90506000826000600281106100e3576100e2614982565b5b60200201511415610129576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161012090613f41565b60405180910390fd5b60008260016002811061013f5761013e614982565b5b60200201511415610185576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161017c90613e81565b60405180910390fd5b80601301544311156101cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101c390613ee1565b60405180910390fd5b60008160010160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006002811061022257610221614982565b5b015414610264576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025b90613dc1565b60405180910390fd5b61026d826116e4565b6102ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102a390613f21565b60405180910390fd5b80600d0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166335c6a1636040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561031857600080fd5b505af115801561032c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103509190613464565b5080600d0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663facd743b336040518263ffffffff1660e01b81526004016103ae9190613d0d565b60206040518083038186803b1580156103c657600080fd5b505afa1580156103da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103fe9190613464565b61043d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043490613e21565b60405180910390fd5b80600001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818160010160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209060026104f2929190612f6d565b5060018160000180549050610507919061472b565b8160070160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b600061055a6116b7565b9050438160150154108015610573575080601601544311155b6105b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a990614001565b60405180910390fd5b8060120160019054906101000a900460ff166108365760006001905060005b82600001805490508110156108025760008360000182815481106105f8576105f7614982565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000801b8460020160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414156107ee578360080160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156107595783600d0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166357b4f82a826040518263ffffffff1660e01b81526004016107229190613d0d565b600060405180830381600087803b15801561073c57600080fd5b505af1158015610750573d6000803e3d6000fd5b505050506107e9565b83600d0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d2a2c55c826040518263ffffffff1660e01b81526004016107b69190613d0d565b600060405180830381600087803b1580156107d057600080fd5b505af11580156107e4573d6000803e3d6000fd5b505050505b600092505b5080806107fa90614873565b9150506105d1565b50806108175761081061182d565b5050610ccb565b60018260120160016101000a81548160ff021916908315150217905550505b60008160040160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006002811061088c5761088b614982565b5b0154146108995750610ccb565b6000801b8160020160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415610920576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091790613fa1565b60405180910390fd5b610a1360405180604001604052807f062a0ad5cf656709286b38ae4fb927fc901c5f9cf9623bfd0b6d22d30f95a1f381526020017f1b4af7018d896f006d7e5c23d05903b5d2698da94674e546e51f77b6df70ffac8152508560405180604001604052806001815260200160028152508460030160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600280602002604051908101604052809291908260028015610a08576020028201915b8154815260200190600101908083116109f4575b505050505087611da3565b610a52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4990613fe1565b60405180910390fd5b610bfc60405180610180016040528086600060028110610a7557610a74614982565b5b6020020151815260200186600160028110610a9357610a92614982565b5b602002015181526020017f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed81526020017f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec81526020017f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d81526020017f062a0ad5cf656709286b38ae4fb927fc901c5f9cf9623bfd0b6d22d30f95a1f381526020017f1b4af7018d896f006d7e5c23d05903b5d2698da94674e546e51f77b6df70ffac815260200184600060048110610b9557610b94614982565b5b6020020151815260200184600160048110610bb357610bb2614982565b5b6020020151815260200184600260048110610bd157610bd0614982565b5b6020020151815260200184600360048110610bef57610bee614982565b5b60200201518152506120e6565b610c3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3290613f01565b60405180910390fd5b838160040160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020906002610c8b929190612f6d565b507fb0ee36c3780de716eb6c83687f433ae2558a6923e090fd238b657fb6c896badc85858585604051610cc19493929190613d28565b60405180910390a1505b50505050565b6000610cdb6116b7565b9050438160130154108015610cf4575080601401544311155b610d33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2a90613e01565b60405180910390fd5b60008160030160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060028110610d8957610d88614982565b5b0154148015610ded575060008160030160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600160028110610de957610de8614982565b5b0154145b610e2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e23906140e1565b60405180910390fd5b8060120160009054906101000a900460ff16610e8157806011015481600001805490501015610e6357610e5d61182d565b50611201565b60018160120160006101000a81548160ff0219169083151502179055505b6000816000018054905090506000600382610e9c91906144f5565b90506000816002610ead919061463d565b9050816003610ebc919061463d565b83610ec7919061472b565b60021415610edf57600181610edc9190614435565b90505b60008460010160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060028110610f3557610f34614982565b5b01541415610f78576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6f90614061565b60405180910390fd5b600183610f85919061472b565b865114610fc7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fbe90613f61565b60405180910390fd5b600181610fd49190614435565b855114611016576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100d90614081565b60405180910390fd5b600091505b8082116110985761104585838151811061103857611037614982565b5b60200260200101516116e4565b611084576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161107b90614101565b60405180910390fd5b6001826110919190614435565b915061101b565b85856040516020016110ab929190613cc1565b604051602081830303815290604052805190602001208460020160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508460008151811061111a57611119614982565b5b60200260200101518460030160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020906002611171929190612f6d565b507fa84d294194d6169652a99150fd2ef10e18b0d2caa10beeea237bbddcc6e22b103360018660070160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111e29190614435565b88886040516111f49493929190613d6e565b60405180910390a1505050505b5050565b600061120f6116b7565b9050438160170154108015611228575080601801544311155b611267576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161125e90613ec1565b60405180910390fd5b8060120160039054906101000a900460ff166113365760008160090160006004811061129657611295614982565b5b01541480156112bd57506000816009016001600481106112b9576112b8614982565b5b0154145b80156112e157506000816009016002600481106112dd576112dc614982565b5b0154145b8015611305575060008160090160036004811061130157611300614982565b5b0154145b156113185761131261182d565b506116b3565b60018160120160036101000a81548160ff0219169083151502179055505b60008160050160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006004811061138c5761138b614982565b5b01541480156113f0575060008160050160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001600481106113ec576113eb614982565b5b0154145b8015611451575060008160050160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060026004811061144d5761144c614982565b5b0154145b80156114b2575060008160050160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003600481106114ae576114ad614982565b5b0154145b6114f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114e8906140c1565b60405180910390fd5b6114fa826116e4565b611539576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161153090613f81565b60405180910390fd5b6115d081600e01805461154b90614810565b80601f016020809104026020016040519081016040528092919081815260200182805461157790614810565b80156115c45780601f10611599576101008083540402835291602001916115c4565b820191906000526020600020905b8154815290600101906020018083116115a757829003601f168201915b50505050508385612166565b61160f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160690614021565b60405180910390fd5b828160050160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090600461165f929190612fad565b50818160060160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209060026116b0929190612f6d565b50505b5050565b6000807fd2d37756412c577f56b4802b8e643c9a817fa92cc18ff383f317fce7fab4282b90508091505090565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780611715576117146148f5565b5b60037f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780611746576117456148f5565b5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780611775576117746148f5565b5b8560006002811061178957611788614982565b5b6020020151866000600281106117a2576117a1614982565b5b602002015109856000600281106117bc576117bb614982565b5b602002015109087f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806117f2576117f16148f5565b5b8360016002811061180657611805614982565b5b60200201518460016002811061181f5761181e614982565b5b602002015109149050919050565b60006118376116b7565b9050600043905081601001548161184e9190614435565b8260130181905550816010015482600f0154836013015461186f9190614435565b6118799190614435565b8260140181905550816010015482600f0154836014015461189a9190614435565b6118a49190614435565b8260150181905550816010015482600f015483601501546118c59190614435565b6118cf9190614435565b8260160181905550816010015482600f015483601601546118f09190614435565b6118fa9190614435565b8260170181905550816010015482600f0154836017015461191b9190614435565b6119259190614435565b8260180181905550816010015482600f015483601801546119469190614435565b6119509190614435565b8260190181905550816010015482600f015483601901546119719190614435565b61197b9190614435565b82601a01819055507f9c6f8368fe7e77e8cb9438744581403bcb3f53298e517f04c1b8475487402e978183601301548460140154856015015486601601548760170154886018015489601901548a601a01546040516119e299989796959493929190614121565b60405180910390a160008260120160006101000a81548160ff02191690831515021790555060008260120160016101000a81548160ff02191690831515021790555060008260120160026101000a81548160ff02191690831515021790555060008260120160036101000a81548160ff02191690831515021790555060008260120160046101000a81548160ff021916908315150217905550816009016000611a8b9190612fed565b5b600082600001805490501115611d9f5760008260000160018460000180549050611ab6919061472b565b81548110611ac757611ac6614982565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508260010160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000611b419190613009565b8260020160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600090558260030160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000611bd39190613009565b8260040160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000611c209190613009565b8260050160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000611c6d9190612fed565b8260060160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000611cba9190613009565b8260080160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff02191690558260070160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000905582600001805480611d6457611d63614953565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055905550611a8c565b5050565b6000611dad613017565b611db5613017565b611e2060405180606001604052808a600060028110611dd757611dd6614982565b5b602002015181526020018a600160028110611df557611df4614982565b5b6020020151815260200186600160028110611e1357611e12614982565b5b602002015181525061231f565b9150611e8d604051806060016040528089600060028110611e4457611e43614982565b5b6020020151815260200189600160028110611e6257611e61614982565b5b6020020151815260200186600060028110611e8057611e7f614982565b5b602002015181525061231f565b90506000611f1a604051806080016040528085600060028110611eb357611eb2614982565b5b6020020151815260200185600160028110611ed157611ed0614982565b5b6020020151815260200184600060028110611eef57611eee614982565b5b6020020151815260200184600160028110611f0d57611f0c614982565b5b602002015181525061237d565b9050611f87604051806060016040528089600060028110611f3e57611f3d614982565b5b6020020151815260200189600160028110611f5c57611f5b614982565b5b6020020151815260200187600160028110611f7a57611f79614982565b5b602002015181525061231f565b9250611ff4604051806060016040528088600060028110611fab57611faa614982565b5b6020020151815260200188600160028110611fc957611fc8614982565b5b6020020151815260200187600060028110611fe757611fe6614982565b5b602002015181525061231f565b9150600061208160405180608001604052808660006002811061201a57612019614982565b5b602002015181526020018660016002811061203857612037614982565b5b602002015181526020018560006002811061205657612055614982565b5b602002015181526020018560016002811061207457612073614982565b5b602002015181525061237d565b905060008a8a8a8a86866040516020016120a096959493929190613c51565b6040516020818303038152906040528051906020012060001c9050866000600281106120cf576120ce614982565b5b602002015181149550505050505095945050505050565b60006120f0613039565b6000602082610180866008600019fa905080612141576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612138906140a1565b60405180910390fd5b60018260006001811061215757612156614982565b5b60200201511492505050919050565b6000612170613017565b612179856123db565b90506123156040518061018001604052808660006002811061219e5761219d614982565b5b60200201518152602001866001600281106121bc576121bb614982565b5b602002015181526020017f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed81526020017f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec81526020017f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d81526020018360006002811061227257612271614982565b5b60200201518152602001836001600281106122905761228f614982565b5b60200201518152602001856000600481106122ae576122ad614982565b5b60200201518152602001856001600481106122cc576122cb614982565b5b60200201518152602001856002600481106122ea576122e9614982565b5b602002015181526020018560036004811061230857612307614982565b5b60200201518152506120e6565b9150509392505050565b612327613017565b60006040826060856007600019fa905080612377576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161236e90614041565b60405180910390fd5b50919050565b612385613017565b60006040826080856006600019fa9050806123d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123cc90613e61565b60405180910390fd5b50919050565b6123e3613017565b60006123f883600060f81b600160f81b61254f565b9050600061240f84600260f81b600360f81b61254f565b9050600061241c8361263e565b905060006124298361263e565b90506124b460405180608001604052808460006002811061244d5761244c614982565b5b602002015181526020018460016002811061246b5761246a614982565b5b602002015181526020018360006002811061248957612488614982565b5b60200201518152602001836001600281106124a7576124a6614982565b5b602002015181525061237d565b94506124bf856116e4565b6124fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124f590613e41565b60405180910390fd5b61250785612cc8565b612546576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161253d90613fc1565b60405180910390fd5b50505050919050565b6000808385604051602001612565929190613ce5565b6040516020818303038152906040528051906020012060001c905060008386604051602001612595929190613ce5565b6040516020818303038152906040528051906020012060001c90507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806125df576125de6148f5565b5b817f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061260f5761260e6148f5565b5b7f0e0a77c19a07df2f666ea36f7879462c0a78eb28f5c70b3dd35d438dc58f0d9d850908925050509392505050565b612646613017565b60008060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061267a576126796148f5565b5b85860992507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806126ae576126ad6148f5565b5b6004840891507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806126e3576126e26148f5565b5b82840990506126f181612d20565b905060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780612724576127236148f5565b5b83840990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780612758576127576148f5565b5b83820990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061278c5761278b6148f5565b5b848509935060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806127c2576127c16148f5565b5b8577b3c4d79d41a91759a9e4c7e359b6b89eaec68e62effffffd0990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061280e5761280d6148f5565b5b838209905061281c81612d74565b90507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061284d5761284c6148f5565b5b7759e26bcea0d48bacd4f263f1acdb5c4f5763473177fffffe8208905060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061289b5761289a6148f5565b5b6001830890506128aa81612d74565b905060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806128dd576128dc6148f5565b5b847f2042def740cbc01bd03583cf0100e593ba56470b9af68708d2c05d64905353850990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780612931576129306148f5565b5b858209905061293f81612d74565b90507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806129705761296f6148f5565b5b60018208905060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806129a7576129a66148f5565b5b84850990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806129db576129da6148f5565b5b84820990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780612a0f57612a0e6148f5565b5b6003820890506000612a2082612dbb565b90507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780612a5157612a506148f5565b5b84850991507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780612a8557612a846148f5565b5b84830991507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780612ab957612ab86148f5565b5b6003830891506000612aca83612dbb565b9050600060016004600384612adf9190614697565b600186612aec9190614697565b612af69190614526565b612b00919061448b565b612b0a91906143a1565b905060006001821415612b1f57879050612b35565b6002821415612b3057869050612b34565b8590505b5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780612b6457612b636148f5565b5b81820994507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780612b9857612b976148f5565b5b81860994507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780612bcc57612bcb6148f5565b5b600386089450612bdb85612e40565b94506000612be88f612e94565b90507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780612c1957612c186148f5565b5b8187099550612c3b6040518060400160405280848152602001888152506116e4565b612c7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c7190613ea1565b60405180910390fd5b818e600060028110612c8f57612c8e614982565b5b602002018181525050858e600160028110612cad57612cac614982565b5b60200201818152505050505050505050505050505050919050565b60008082600060028110612cdf57612cde614982565b5b60200201511480612d085750600182600060028110612d0157612d00614982565b5b6020020151145b15612d165760009050612d1b565b600190505b919050565b6000612d6d827f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd457f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47612eeb565b9050919050565b600080821415612d875760009050612db6565b817f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47612db3919061472b565b90505b919050565b600080612e09837f183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea37f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47612eeb565b905060008114612e355760018082166002612e249190614526565b612e2e9190614697565b9150612e3a565b600091505b50919050565b6000612e8d827f0c19139cb84c680a6e14116da060561765e05aa45a1c72a34f082305b61f3f527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47612eeb565b9050919050565b6000600190507f183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea3821115612ee6577f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4690505b919050565b60008060405160208152602080820152602060408201528560608201528460808201528360a082015260208160c08360055afa9150805192505080612f65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f5c90613de1565b60405180910390fd5b509392505050565b8260028101928215612f9c579160200282015b82811115612f9b578251825591602001919060010190612f80565b5b509050612fa9919061305b565b5090565b8260048101928215612fdc579160200282015b82811115612fdb578251825591602001919060010190612fc0565b5b509050612fe9919061305b565b5090565b5060008155600101600081556001016000815560010160009055565b506000815560010160009055565b6040518060400160405280600290602082028036833780820191505090505090565b6040518060200160405280600190602082028036833780820191505090505090565b5b8082111561307457600081600090555060010161305c565b5090565b600061308b613086846141d3565b6141ae565b905080838252602082019050828560408602820111156130ae576130ad6149e5565b5b60005b858110156130de57816130c48882613269565b8452602084019350604083019250506001810190506130b1565b5050509392505050565b60006130fb6130f6846141ff565b6141ae565b90508082856020860282011115613115576131146149e5565b5b60005b85811015613145578161312b8882613302565b845260208401935060208301925050600181019050613118565b5050509392505050565b600061316261315d84614225565b6141ae565b9050808285602086028201111561317c5761317b6149e5565b5b60005b858110156131ac57816131928882613302565b84526020840193506020830192505060018101905061317f565b5050509392505050565b60006131c96131c48461424b565b6141ae565b905080838252602082019050828560208602820111156131ec576131eb6149e5565b5b60005b8581101561321c57816132028882613302565b8452602084019350602083019250506001810190506131ef565b5050509392505050565b60008135905061323581615234565b92915050565b600082601f8301126132505761324f6149e0565b5b8135613260848260208601613078565b91505092915050565b600082601f83011261327e5761327d6149e0565b5b600261328b8482856130e8565b91505092915050565b600082601f8301126132a9576132a86149e0565b5b60046132b684828561314f565b91505092915050565b600082601f8301126132d4576132d36149e0565b5b81356132e48482602086016131b6565b91505092915050565b6000815190506132fc8161524b565b92915050565b60008135905061331181615262565b92915050565b6000806000806101208587031215613332576133316149ef565b5b600061334087828801613226565b945050602061335187828801613269565b935050606061336287828801613269565b92505060a061337387828801613294565b91505092959194509250565b600060408284031215613395576133946149ef565b5b60006133a384828501613269565b91505092915050565b60008060c083850312156133c3576133c26149ef565b5b60006133d185828601613294565b92505060806133e285828601613269565b9150509250929050565b60008060408385031215613403576134026149ef565b5b600083013567ffffffffffffffff811115613421576134206149ea565b5b61342d858286016132bf565b925050602083013567ffffffffffffffff81111561344e5761344d6149ea565b5b61345a8582860161323b565b9150509250929050565b60006020828403121561347a576134796149ef565b5b6000613488848285016132ed565b91505092915050565b600061349d83836135bc565b60408301905092915050565b60006134b5838361366a565b60408301905092915050565b60006134cd8383613c24565b60208301905092915050565b60006134e58383613c42565b60208301905092915050565b6134fa8161475f565b82525050565b600061350b826142ab565b6135158185614316565b935061352083614277565b8060005b838110156135515781516135388882613491565b9750613543836142e2565b925050600181019050613524565b5085935050505092915050565b6000613569826142ab565b6135738185614327565b935061357e83614277565b8060005b838110156135af57815161359688826134a9565b97506135a1836142e2565b925050600181019050613582565b5085935050505092915050565b6135c5816142b6565b6135cf8184614332565b92506135da82614287565b8060005b8381101561360b5781516135f287826134c1565b96506135fd836142ef565b9250506001810190506135de565b505050505050565b61361c816142b6565b613626818461433d565b925061363182614287565b8060005b8381101561366257815161364987826134c1565b9650613654836142ef565b925050600181019050613635565b505050505050565b613673816142b6565b61367d8184614348565b925061368882614287565b8060005b838110156136b95781516136a087826134d9565b96506136ab836142ef565b92505060018101905061368c565b505050505050565b6136ca816142b6565b6136d48184614353565b92506136df82614287565b8060005b838110156137105781516136f787826134d9565b9650613702836142ef565b9250506001810190506136e3565b505050505050565b613721816142c1565b61372b818461435e565b925061373682614291565b8060005b8381101561376757815161374e87826134c1565b9650613759836142fc565b92505060018101905061373a565b505050505050565b600061377a826142cc565b6137848185614369565b935061378f8361429b565b8060005b838110156137c05781516137a788826134c1565b97506137b283614309565b925050600181019050613793565b5085935050505092915050565b60006137d8826142cc565b6137e2818561437a565b93506137ed8361429b565b8060005b8381101561381e57815161380588826134d9565b975061381083614309565b9250506001810190506137f1565b5085935050505092915050565b61383c6138378261477d565b6148bc565b82525050565b600061384d826142d7565b6138578185614385565b93506138678185602086016147dd565b80840191505092915050565b6000613880603d83614390565b915061388b82614a05565b604082019050919050565b60006138a3601d83614390565b91506138ae82614a54565b602082019050919050565b60006138c6604783614390565b91506138d182614a7d565b606082019050919050565b60006138e9601583614390565b91506138f482614af2565b602082019050919050565b600061390c602983614390565b915061391782614b1b565b604082019050919050565b600061392f601e83614390565b915061393a82614b6a565b602082019050919050565b6000613952602883614390565b915061395d82614b93565b604082019050919050565b6000613975602483614390565b915061398082614be2565b604082019050919050565b6000613998604583614390565b91506139a382614c31565b606082019050919050565b60006139bb603b83614390565b91506139c682614ca6565b604082019050919050565b60006139de603483614390565b91506139e982614cf5565b604082019050919050565b6000613a01603683614390565b9150613a0c82614d44565b604082019050919050565b6000613a24602883614390565b9150613a2f82614d93565b604082019050919050565b6000613a47604783614390565b9150613a5282614de2565b606082019050919050565b6000613a6a602083614390565b9150613a7582614e57565b602082019050919050565b6000613a8d603283614390565b9150613a9882614e80565b604082019050919050565b6000613ab0602a83614390565b9150613abb82614ecf565b604082019050919050565b6000613ad3603483614390565b9150613ade82614f1e565b604082019050919050565b6000613af6604583614390565b9150613b0182614f6d565b606082019050919050565b6000613b19604a83614390565b9150613b2482614fe2565b606082019050919050565b6000613b3c602483614390565b9150613b4782615057565b604082019050919050565b6000613b5f603f83614390565b9150613b6a826150a6565b604082019050919050565b6000613b82603b83614390565b9150613b8d826150f5565b604082019050919050565b6000613ba5601d83614390565b9150613bb082615144565b602082019050919050565b6000613bc8602f83614390565b9150613bd38261516d565b604082019050919050565b6000613beb601a83614390565b9150613bf6826151bc565b602082019050919050565b6000613c0e603583614390565b9150613c19826151e5565b604082019050919050565b613c2d816147d3565b82525050565b613c3c816147d3565b82525050565b613c4b816147d3565b82525050565b6000613c5d82896136c1565b604082019150613c6d82886136c1565b604082019150613c7d82876136c1565b604082019150613c8d82866136c1565b604082019150613c9d82856136c1565b604082019150613cad82846136c1565b604082019150819050979650505050505050565b6000613ccd82856137cd565b9150613cd9828461355e565b91508190509392505050565b6000613cf1828561382b565b600182019150613d018284613842565b91508190509392505050565b6000602082019050613d2260008301846134f1565b92915050565b600061012082019050613d3e60008301876134f1565b613d4b6020830186613613565b613d586060830185613613565b613d6560a0830184613718565b95945050505050565b6000608082019050613d8360008301876134f1565b613d906020830186613c33565b8181036040830152613da2818561376f565b90508181036060830152613db68184613500565b905095945050505050565b60006020820190508181036000830152613dda81613873565b9050919050565b60006020820190508181036000830152613dfa81613896565b9050919050565b60006020820190508181036000830152613e1a816138b9565b9050919050565b60006020820190508181036000830152613e3a816138dc565b9050919050565b60006020820190508181036000830152613e5a816138ff565b9050919050565b60006020820190508181036000830152613e7a81613922565b9050919050565b60006020820190508181036000830152613e9a81613945565b9050919050565b60006020820190508181036000830152613eba81613968565b9050919050565b60006020820190508181036000830152613eda8161398b565b9050919050565b60006020820190508181036000830152613efa816139ae565b9050919050565b60006020820190508181036000830152613f1a816139d1565b9050919050565b60006020820190508181036000830152613f3a816139f4565b9050919050565b60006020820190508181036000830152613f5a81613a17565b9050919050565b60006020820190508181036000830152613f7a81613a3a565b9050919050565b60006020820190508181036000830152613f9a81613a5d565b9050919050565b60006020820190508181036000830152613fba81613a80565b9050919050565b60006020820190508181036000830152613fda81613aa3565b9050919050565b60006020820190508181036000830152613ffa81613ac6565b9050919050565b6000602082019050818103600083015261401a81613ae9565b9050919050565b6000602082019050818103600083015261403a81613b0c565b9050919050565b6000602082019050818103600083015261405a81613b2f565b9050919050565b6000602082019050818103600083015261407a81613b52565b9050919050565b6000602082019050818103600083015261409a81613b75565b9050919050565b600060208201905081810360008301526140ba81613b98565b9050919050565b600060208201905081810360008301526140da81613bbb565b9050919050565b600060208201905081810360008301526140fa81613bde565b9050919050565b6000602082019050818103600083015261411a81613c01565b9050919050565b600061012082019050614137600083018c613c33565b614144602083018b613c33565b614151604083018a613c33565b61415e6060830189613c33565b61416b6080830188613c33565b61417860a0830187613c33565b61418560c0830186613c33565b61419260e0830185613c33565b6141a0610100830184613c33565b9a9950505050505050505050565b60006141b86141c9565b90506141c48282614842565b919050565b6000604051905090565b600067ffffffffffffffff8211156141ee576141ed6149b1565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561421a576142196149b1565b5b602082029050919050565b600067ffffffffffffffff8211156142405761423f6149b1565b5b602082029050919050565b600067ffffffffffffffff821115614266576142656149b1565b5b602082029050602081019050919050565b6000819050602082019050919050565b6000819050919050565b6000819050919050565b6000819050602082019050919050565b600081519050919050565b600060029050919050565b600060049050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600081905092915050565b600081905092915050565b600081905092915050565b600081905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600081905092915050565b600082825260208201905092915050565b60006143ac826147a9565b91506143b7836147a9565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038313600083121516156143f2576143f16148c6565b5b817f800000000000000000000000000000000000000000000000000000000000000003831260008312161561442a576144296148c6565b5b828201905092915050565b6000614440826147d3565b915061444b836147d3565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156144805761447f6148c6565b5b828201905092915050565b6000614496826147a9565b91506144a1836147a9565b9250826144b1576144b06148f5565b5b600160000383147f8000000000000000000000000000000000000000000000000000000000000000831416156144ea576144e96148c6565b5b828205905092915050565b6000614500826147d3565b915061450b836147d3565b92508261451b5761451a6148f5565b5b828204905092915050565b6000614531826147a9565b915061453c836147a9565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561457b5761457a6148c6565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156145b8576145b76148c6565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156145f5576145f46148c6565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615614632576146316148c6565b5b828202905092915050565b6000614648826147d3565b9150614653836147d3565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561468c5761468b6148c6565b5b828202905092915050565b60006146a2826147a9565b91506146ad836147a9565b9250827f8000000000000000000000000000000000000000000000000000000000000000018212600084121516156146e8576146e76148c6565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0182136000841216156147205761471f6148c6565b5b828203905092915050565b6000614736826147d3565b9150614741836147d3565b925082821015614754576147536148c6565b5b828203905092915050565b600061476a826147b3565b9050919050565b60008115159050919050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b838110156147fb5780820151818401526020810190506147e0565b8381111561480a576000848401525b50505050565b6000600282049050600182168061482857607f821691505b6020821081141561483c5761483b614924565b5b50919050565b61484b826149f4565b810181811067ffffffffffffffff8211171561486a576148696149b1565b5b80604052505050565b600061487e826147d3565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156148b1576148b06148c6565b5b600182019050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f726567697374726174696f6e206661696c656420286163636f756e7420616c7260008201527f6561647920726567697374657265642061207075626c6963206b657929000000602082015250565b7f6d6f64756c6172206578706f6e656e74696174696f6e2066616c696564000000600082015250565b7f736861726520646973747269627574696f6e206661696c65642028636f6e747260008201527f616374206973206e6f7420696e20736861726520646973747269627574696f6e60208201527f2070686173652900000000000000000000000000000000000000000000000000604082015250565b7f76616c696461746f72206e6f7420616c6c6f7765640000000000000000000000600082015250565b7f496e76616c6964206861736820706f696e743a206e6f74206f6e20656c6c697060008201527f7469632063757276650000000000000000000000000000000000000000000000602082015250565b7f656c6c6970746963206375727665206164646974696f6e206661696c65640000600082015250565b7f726567697374726174696f6e206661696c656420287075626c6963206b65795b60008201527f315d203d3d203029000000000000000000000000000000000000000000000000602082015250565b7f496e76616c696420706f696e743a206e6f74206f6e20656c6c6970746963206360008201527f7572766500000000000000000000000000000000000000000000000000000000602082015250565b7f67706b6a206b6579207375626d697373696f6e206661696c65642028636f6e7460008201527f72616374206973206e6f7420696e2067706b6a2064657269766174696f6e207060208201527f6861736529000000000000000000000000000000000000000000000000000000604082015250565b7f726567697374726174696f6e206661696c65642028636f6e747261637420697360008201527f206e6f7420696e20726567697374726174696f6e207068617365290000000000602082015250565b7f6b6579207368617265207375626d697373696f6e206661696c65642028696e7660008201527f616c6964206b6579207368617265202847322929000000000000000000000000602082015250565b7f726567697374726174696f6e206661696c656420287075626c6963206b65792060008201527f6e6f74206f6e20656c6c69707469632063757276652900000000000000000000602082015250565b7f726567697374726174696f6e206661696c656420287075626c6963206b65795b60008201527f305d203d3d203029000000000000000000000000000000000000000000000000602082015250565b7f736861726520646973747269627574696f6e206661696c65642028696e76616c60008201527f6964206e756d626572206f6620656e637279707465642073686172657320707260208201527f6f76696465642900000000000000000000000000000000000000000000000000604082015250565b7f496e76616c6964207369676e617475726520286e6f74206f6e20637572766529600082015250565b7f6b6579207368617265207375626d697373696f6e206661696c6564202869737360008201527f756572206e6f74207175616c6966696564290000000000000000000000000000602082015250565b7f44616e6765726f7573206861736820706f696e743a206e6f742073616665206660008201527f6f72207369676e696e6700000000000000000000000000000000000000000000602082015250565b7f6b6579207368617265207375626d697373696f6e206661696c65642028696e7660008201527f616c6964206b6579207368617265202847312929000000000000000000000000602082015250565b7f6b6579207368617265207375626d697373696f6e206661696c65642028636f6e60008201527f7472616374206973206e6f7420696e206b65792064657269766174696f6e207060208201527f6861736529000000000000000000000000000000000000000000000000000000604082015250565b7f47504b6a207375626d697373696f6e206661696c656420287369676e6174757260008201527f6520766572696669636174696f6e206661696c65642064756520746f20696e7660208201527f616c69642067706b6a2900000000000000000000000000000000000000000000604082015250565b7f656c6c6970746963206375727665206d756c7469706c69636174696f6e20666160008201527f696c656400000000000000000000000000000000000000000000000000000000602082015250565b7f736861726520646973747269627574696f6e206661696c65642028657468657260008201527f65756d206163636f756e7420686173206e6f7420726567697374657265642900602082015250565b7f6b65792073686172696e67206661696c65642028696e76616c6964206e756d6260008201527f6572206f6620636f6d6d69746d656e74732070726f7669646564290000000000602082015250565b7f656c6c69707469632063757276652070616972696e67206661696c6564000000600082015250565b7f47504b6a207375626d697373696f6e206661696c65642028616c72656164792060008201527f7375626d69747465642067706b6a290000000000000000000000000000000000602082015250565b7f73686172657320616c7265616479206469737472696275746564000000000000600082015250565b7f6b65792073686172696e67206661696c65642028636f6d6d69746d656e74206e60008201527f6f74206f6e20656c6c6970746963206375727665290000000000000000000000602082015250565b61523d8161475f565b811461524857600080fd5b50565b61525481614771565b811461525f57600080fd5b50565b61526b816147d3565b811461527657600080fd5b5056fea26469706673582212201ba0b1275be7b14f45a8ff16aee389fa915c76858b2423808154de21871127d964736f6c63430008060033",
}

// EthDKGMiscFacetABI is the input ABI used to generate the binding from.
// Deprecated: Use EthDKGMiscFacetMetaData.ABI instead.
var EthDKGMiscFacetABI = EthDKGMiscFacetMetaData.ABI

// EthDKGMiscFacetBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use EthDKGMiscFacetMetaData.Bin instead.
var EthDKGMiscFacetBin = EthDKGMiscFacetMetaData.Bin

// DeployEthDKGMiscFacet deploys a new Ethereum contract, binding an instance of EthDKGMiscFacet to it.
func DeployEthDKGMiscFacet(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *EthDKGMiscFacet, error) {
	parsed, err := EthDKGMiscFacetMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(EthDKGMiscFacetBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &EthDKGMiscFacet{EthDKGMiscFacetCaller: EthDKGMiscFacetCaller{contract: contract}, EthDKGMiscFacetTransactor: EthDKGMiscFacetTransactor{contract: contract}, EthDKGMiscFacetFilterer: EthDKGMiscFacetFilterer{contract: contract}}, nil
}

// EthDKGMiscFacet is an auto generated Go binding around an Ethereum contract.
type EthDKGMiscFacet struct {
	EthDKGMiscFacetCaller     // Read-only binding to the contract
	EthDKGMiscFacetTransactor // Write-only binding to the contract
	EthDKGMiscFacetFilterer   // Log filterer for contract events
}

// EthDKGMiscFacetCaller is an auto generated read-only Go binding around an Ethereum contract.
type EthDKGMiscFacetCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EthDKGMiscFacetTransactor is an auto generated write-only Go binding around an Ethereum contract.
type EthDKGMiscFacetTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EthDKGMiscFacetFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type EthDKGMiscFacetFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EthDKGMiscFacetSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type EthDKGMiscFacetSession struct {
	Contract     *EthDKGMiscFacet  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// EthDKGMiscFacetCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type EthDKGMiscFacetCallerSession struct {
	Contract *EthDKGMiscFacetCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// EthDKGMiscFacetTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type EthDKGMiscFacetTransactorSession struct {
	Contract     *EthDKGMiscFacetTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// EthDKGMiscFacetRaw is an auto generated low-level Go binding around an Ethereum contract.
type EthDKGMiscFacetRaw struct {
	Contract *EthDKGMiscFacet // Generic contract binding to access the raw methods on
}

// EthDKGMiscFacetCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type EthDKGMiscFacetCallerRaw struct {
	Contract *EthDKGMiscFacetCaller // Generic read-only contract binding to access the raw methods on
}

// EthDKGMiscFacetTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type EthDKGMiscFacetTransactorRaw struct {
	Contract *EthDKGMiscFacetTransactor // Generic write-only contract binding to access the raw methods on
}

// NewEthDKGMiscFacet creates a new instance of EthDKGMiscFacet, bound to a specific deployed contract.
func NewEthDKGMiscFacet(address common.Address, backend bind.ContractBackend) (*EthDKGMiscFacet, error) {
	contract, err := bindEthDKGMiscFacet(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &EthDKGMiscFacet{EthDKGMiscFacetCaller: EthDKGMiscFacetCaller{contract: contract}, EthDKGMiscFacetTransactor: EthDKGMiscFacetTransactor{contract: contract}, EthDKGMiscFacetFilterer: EthDKGMiscFacetFilterer{contract: contract}}, nil
}

// NewEthDKGMiscFacetCaller creates a new read-only instance of EthDKGMiscFacet, bound to a specific deployed contract.
func NewEthDKGMiscFacetCaller(address common.Address, caller bind.ContractCaller) (*EthDKGMiscFacetCaller, error) {
	contract, err := bindEthDKGMiscFacet(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &EthDKGMiscFacetCaller{contract: contract}, nil
}

// NewEthDKGMiscFacetTransactor creates a new write-only instance of EthDKGMiscFacet, bound to a specific deployed contract.
func NewEthDKGMiscFacetTransactor(address common.Address, transactor bind.ContractTransactor) (*EthDKGMiscFacetTransactor, error) {
	contract, err := bindEthDKGMiscFacet(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &EthDKGMiscFacetTransactor{contract: contract}, nil
}

// NewEthDKGMiscFacetFilterer creates a new log filterer instance of EthDKGMiscFacet, bound to a specific deployed contract.
func NewEthDKGMiscFacetFilterer(address common.Address, filterer bind.ContractFilterer) (*EthDKGMiscFacetFilterer, error) {
	contract, err := bindEthDKGMiscFacet(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &EthDKGMiscFacetFilterer{contract: contract}, nil
}

// bindEthDKGMiscFacet binds a generic wrapper to an already deployed contract.
func bindEthDKGMiscFacet(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(EthDKGMiscFacetABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_EthDKGMiscFacet *EthDKGMiscFacetRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _EthDKGMiscFacet.Contract.EthDKGMiscFacetCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_EthDKGMiscFacet *EthDKGMiscFacetRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EthDKGMiscFacet.Contract.EthDKGMiscFacetTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_EthDKGMiscFacet *EthDKGMiscFacetRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _EthDKGMiscFacet.Contract.EthDKGMiscFacetTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_EthDKGMiscFacet *EthDKGMiscFacetCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _EthDKGMiscFacet.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_EthDKGMiscFacet *EthDKGMiscFacetTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EthDKGMiscFacet.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_EthDKGMiscFacet *EthDKGMiscFacetTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _EthDKGMiscFacet.Contract.contract.Transact(opts, method, params...)
}

// SubmitGPKj is a paid mutator transaction binding the contract method 0xdc5e8a0a.
//
// Solidity: function Submit_GPKj(uint256[4] gpkj, uint256[2] sig) returns()
func (_EthDKGMiscFacet *EthDKGMiscFacetTransactor) SubmitGPKj(opts *bind.TransactOpts, gpkj [4]*big.Int, sig [2]*big.Int) (*types.Transaction, error) {
	return _EthDKGMiscFacet.contract.Transact(opts, "Submit_GPKj", gpkj, sig)
}

// SubmitGPKj is a paid mutator transaction binding the contract method 0xdc5e8a0a.
//
// Solidity: function Submit_GPKj(uint256[4] gpkj, uint256[2] sig) returns()
func (_EthDKGMiscFacet *EthDKGMiscFacetSession) SubmitGPKj(gpkj [4]*big.Int, sig [2]*big.Int) (*types.Transaction, error) {
	return _EthDKGMiscFacet.Contract.SubmitGPKj(&_EthDKGMiscFacet.TransactOpts, gpkj, sig)
}

// SubmitGPKj is a paid mutator transaction binding the contract method 0xdc5e8a0a.
//
// Solidity: function Submit_GPKj(uint256[4] gpkj, uint256[2] sig) returns()
func (_EthDKGMiscFacet *EthDKGMiscFacetTransactorSession) SubmitGPKj(gpkj [4]*big.Int, sig [2]*big.Int) (*types.Transaction, error) {
	return _EthDKGMiscFacet.Contract.SubmitGPKj(&_EthDKGMiscFacet.TransactOpts, gpkj, sig)
}

// DistributeShares is a paid mutator transaction binding the contract method 0xa080e5e0.
//
// Solidity: function distribute_shares(uint256[] encrypted_shares, uint256[2][] commitments) returns()
func (_EthDKGMiscFacet *EthDKGMiscFacetTransactor) DistributeShares(opts *bind.TransactOpts, encrypted_shares []*big.Int, commitments [][2]*big.Int) (*types.Transaction, error) {
	return _EthDKGMiscFacet.contract.Transact(opts, "distribute_shares", encrypted_shares, commitments)
}

// DistributeShares is a paid mutator transaction binding the contract method 0xa080e5e0.
//
// Solidity: function distribute_shares(uint256[] encrypted_shares, uint256[2][] commitments) returns()
func (_EthDKGMiscFacet *EthDKGMiscFacetSession) DistributeShares(encrypted_shares []*big.Int, commitments [][2]*big.Int) (*types.Transaction, error) {
	return _EthDKGMiscFacet.Contract.DistributeShares(&_EthDKGMiscFacet.TransactOpts, encrypted_shares, commitments)
}

// DistributeShares is a paid mutator transaction binding the contract method 0xa080e5e0.
//
// Solidity: function distribute_shares(uint256[] encrypted_shares, uint256[2][] commitments) returns()
func (_EthDKGMiscFacet *EthDKGMiscFacetTransactorSession) DistributeShares(encrypted_shares []*big.Int, commitments [][2]*big.Int) (*types.Transaction, error) {
	return _EthDKGMiscFacet.Contract.DistributeShares(&_EthDKGMiscFacet.TransactOpts, encrypted_shares, commitments)
}

// Register is a paid mutator transaction binding the contract method 0x3442af5c.
//
// Solidity: function register(uint256[2] public_key) returns()
func (_EthDKGMiscFacet *EthDKGMiscFacetTransactor) Register(opts *bind.TransactOpts, public_key [2]*big.Int) (*types.Transaction, error) {
	return _EthDKGMiscFacet.contract.Transact(opts, "register", public_key)
}

// Register is a paid mutator transaction binding the contract method 0x3442af5c.
//
// Solidity: function register(uint256[2] public_key) returns()
func (_EthDKGMiscFacet *EthDKGMiscFacetSession) Register(public_key [2]*big.Int) (*types.Transaction, error) {
	return _EthDKGMiscFacet.Contract.Register(&_EthDKGMiscFacet.TransactOpts, public_key)
}

// Register is a paid mutator transaction binding the contract method 0x3442af5c.
//
// Solidity: function register(uint256[2] public_key) returns()
func (_EthDKGMiscFacet *EthDKGMiscFacetTransactorSession) Register(public_key [2]*big.Int) (*types.Transaction, error) {
	return _EthDKGMiscFacet.Contract.Register(&_EthDKGMiscFacet.TransactOpts, public_key)
}

// SubmitKeyShare is a paid mutator transaction binding the contract method 0x7163525e.
//
// Solidity: function submit_key_share(address issuer, uint256[2] key_share_G1, uint256[2] key_share_G1_correctness_proof, uint256[4] key_share_G2) returns()
func (_EthDKGMiscFacet *EthDKGMiscFacetTransactor) SubmitKeyShare(opts *bind.TransactOpts, issuer common.Address, key_share_G1 [2]*big.Int, key_share_G1_correctness_proof [2]*big.Int, key_share_G2 [4]*big.Int) (*types.Transaction, error) {
	return _EthDKGMiscFacet.contract.Transact(opts, "submit_key_share", issuer, key_share_G1, key_share_G1_correctness_proof, key_share_G2)
}

// SubmitKeyShare is a paid mutator transaction binding the contract method 0x7163525e.
//
// Solidity: function submit_key_share(address issuer, uint256[2] key_share_G1, uint256[2] key_share_G1_correctness_proof, uint256[4] key_share_G2) returns()
func (_EthDKGMiscFacet *EthDKGMiscFacetSession) SubmitKeyShare(issuer common.Address, key_share_G1 [2]*big.Int, key_share_G1_correctness_proof [2]*big.Int, key_share_G2 [4]*big.Int) (*types.Transaction, error) {
	return _EthDKGMiscFacet.Contract.SubmitKeyShare(&_EthDKGMiscFacet.TransactOpts, issuer, key_share_G1, key_share_G1_correctness_proof, key_share_G2)
}

// SubmitKeyShare is a paid mutator transaction binding the contract method 0x7163525e.
//
// Solidity: function submit_key_share(address issuer, uint256[2] key_share_G1, uint256[2] key_share_G1_correctness_proof, uint256[4] key_share_G2) returns()
func (_EthDKGMiscFacet *EthDKGMiscFacetTransactorSession) SubmitKeyShare(issuer common.Address, key_share_G1 [2]*big.Int, key_share_G1_correctness_proof [2]*big.Int, key_share_G2 [4]*big.Int) (*types.Transaction, error) {
	return _EthDKGMiscFacet.Contract.SubmitKeyShare(&_EthDKGMiscFacet.TransactOpts, issuer, key_share_G1, key_share_G1_correctness_proof, key_share_G2)
}

// EthDKGSubmitDisputeFacetMetaData contains all meta data concerning the EthDKGSubmitDisputeFacet contract.
var EthDKGSubmitDisputeFacetMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"issuer_list_idx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"disputer_list_idx\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"encrypted_shares\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[2][]\",\"name\":\"commitments\",\"type\":\"uint256[2][]\"},{\"internalType\":\"uint256[2]\",\"name\":\"shared_key\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"shared_key_correctness_proof\",\"type\":\"uint256[2]\"}],\"name\":\"submit_dispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b506119f0806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80632f123ffc14610030575b600080fd5b61004a60048036038101906100459190610fb7565b61004c565b005b6000610056610971565b905043816014015410801561006f575080601501544311155b6100ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100a590611424565b60405180910390fd5b8773ffffffffffffffffffffffffffffffffffffffff168160000188815481106100db576100da611755565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614801561019457503373ffffffffffffffffffffffffffffffffffffffff1681600001878154811061015157610150611755565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b6101d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ca90611444565b60405180910390fd5b6000801b8160020160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414156102255750610968565b8484604051602001610238929190611394565b604051602081830303815290604052805190602001208160020160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054146102d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102c790611404565b60405180910390fd5b6103eb60405180604001604052806001815260200160028152508260010160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600280602002604051908101604052809291908260028015610362576020028201915b81548152602001906001019080831161034e575b50505050508360010160008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002806020026040519081016040528092919082600280156103df576020028201915b8154815260200190600101908083116103cb575b5050505050868661099e565b61042a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042190611464565b60405180910390fd5b60008060018861043a91906115f6565b9050888810156104665786888151811061045757610456611755565b5b60200260200101519150610490565b86600189610474919061164c565b8151811061048557610484611755565b5b602002602001015191505b846000600281106104a4576104a3611755565b5b6020020151816040516020016104bb9291906113b8565b6040516020818303038152906040528051906020012060001c8218915060008190506000876000815181106104f3576104f2611755565b5b60200260200101519050600061058860405180606001604052808b60018151811061052157610520611755565b5b602002602001015160006002811061053c5761053b611755565b5b602002015181526020018b60018151811061055a57610559611755565b5b602002602001015160016002811061057557610574611755565b5b6020020151815260200185815250610ce1565b90506106136040518060800160405280846000600281106105ac576105ab611755565b5b60200201518152602001846001600281106105ca576105c9611755565b5b60200201518152602001836000600281106105e8576105e7611755565b5b602002015181526020018360016002811061060657610605611755565b5b6020020151815250610d3f565b91506000600290505b8951811015610781577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018061065457610653611726565b5b85850993506106e060405180606001604052808c848151811061067a57610679611755565b5b602002602001015160006002811061069557610694611755565b5b602002015181526020018c84815181106106b2576106b1611755565b5b60200260200101516001600281106106cd576106cc611755565b5b6020020151815260200186815250610ce1565b915061076b60405180608001604052808560006002811061070457610703611755565b5b602002015181526020018560016002811061072257610721611755565b5b60200201518152602001846000600281106107405761073f611755565b5b602002015181526020018460016002811061075e5761075d611755565b5b6020020151815250610d3f565b925060018161077a91906115f6565b905061061c565b506107a76040518060600160405280600181526020016002815260200187815250610ce1565b9050806000600281106107bd576107bc611755565b5b6020020151826000600281106107d6576107d5611755565b5b60200201511415806108185750806001600281106107f7576107f6611755565b5b6020020151826001600281106108105761080f611755565b5b602002015114155b156108c1578560020160008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000905560018660080160008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610961565b8560020160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000905560018660080160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b5050505050505b50505050505050565b6000807fd2d37756412c577f56b4802b8e643c9a817fa92cc18ff383f317fce7fab4282b90508091505090565b60006109a8610d9d565b6109b0610d9d565b610a1b60405180606001604052808a6000600281106109d2576109d1611755565b5b602002015181526020018a6001600281106109f0576109ef611755565b5b6020020151815260200186600160028110610a0e57610a0d611755565b5b6020020151815250610ce1565b9150610a88604051806060016040528089600060028110610a3f57610a3e611755565b5b6020020151815260200189600160028110610a5d57610a5c611755565b5b6020020151815260200186600060028110610a7b57610a7a611755565b5b6020020151815250610ce1565b90506000610b15604051806080016040528085600060028110610aae57610aad611755565b5b6020020151815260200185600160028110610acc57610acb611755565b5b6020020151815260200184600060028110610aea57610ae9611755565b5b6020020151815260200184600160028110610b0857610b07611755565b5b6020020151815250610d3f565b9050610b82604051806060016040528089600060028110610b3957610b38611755565b5b6020020151815260200189600160028110610b5757610b56611755565b5b6020020151815260200187600160028110610b7557610b74611755565b5b6020020151815250610ce1565b9250610bef604051806060016040528088600060028110610ba657610ba5611755565b5b6020020151815260200188600160028110610bc457610bc3611755565b5b6020020151815260200187600060028110610be257610be1611755565b5b6020020151815250610ce1565b91506000610c7c604051806080016040528086600060028110610c1557610c14611755565b5b6020020151815260200186600160028110610c3357610c32611755565b5b6020020151815260200185600060028110610c5157610c50611755565b5b6020020151815260200185600160028110610c6f57610c6e611755565b5b6020020151815250610d3f565b905060008a8a8a8a8686604051602001610c9b96959493929190611324565b6040516020818303038152906040528051906020012060001c905086600060028110610cca57610cc9611755565b5b602002015181149550505050505095945050505050565b610ce9610d9d565b60006040826060856007600019fa905080610d39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3090611484565b60405180910390fd5b50919050565b610d47610d9d565b60006040826080856006600019fa905080610d97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8e906113e4565b60405180910390fd5b50919050565b6040518060400160405280600290602082028036833780820191505090505090565b6000610dd2610dcd846114c9565b6114a4565b90508083825260208201905082856040860282011115610df557610df46117b8565b5b60005b85811015610e255781610e0b8882610f49565b845260208401935060408301925050600181019050610df8565b5050509392505050565b6000610e42610e3d846114f5565b6114a4565b90508082856020860282011115610e5c57610e5b6117b8565b5b60005b85811015610e8c5781610e728882610fa2565b845260208401935060208301925050600181019050610e5f565b5050509392505050565b6000610ea9610ea48461151b565b6114a4565b90508083825260208201905082856020860282011115610ecc57610ecb6117b8565b5b60005b85811015610efc5781610ee28882610fa2565b845260208401935060208301925050600181019050610ecf565b5050509392505050565b600081359050610f158161198c565b92915050565b600082601f830112610f3057610f2f6117b3565b5b8135610f40848260208601610dbf565b91505092915050565b600082601f830112610f5e57610f5d6117b3565b5b6002610f6b848285610e2f565b91505092915050565b600082601f830112610f8957610f886117b3565b5b8135610f99848260208601610e96565b91505092915050565b600081359050610fb1816119a3565b92915050565b6000806000806000806000610120888a031215610fd757610fd66117c2565b5b6000610fe58a828b01610f06565b9750506020610ff68a828b01610fa2565b96505060406110078a828b01610fa2565b955050606088013567ffffffffffffffff811115611028576110276117bd565b5b6110348a828b01610f74565b945050608088013567ffffffffffffffff811115611055576110546117bd565b5b6110618a828b01610f1b565b93505060a06110728a828b01610f49565b92505060e06110838a828b01610f49565b91505092959891949750929550565b600061109e8383611120565b60408301905092915050565b60006110b683836112fe565b60208301905092915050565b60006110cd82611571565b6110d781856115b9565b93506110e283611547565b8060005b838110156111135781516110fa8882611092565b975061110583611592565b9250506001810190506110e6565b5085935050505092915050565b6111298161157c565b61113381846115c4565b925061113e82611557565b8060005b8381101561116f57815161115687826110aa565b96506111618361159f565b925050600181019050611142565b505050505050565b6111808161157c565b61118a81846115cf565b925061119582611557565b8060005b838110156111c65781516111ad87826110aa565b96506111b88361159f565b925050600181019050611199565b505050505050565b60006111d982611587565b6111e381856115da565b93506111ee83611561565b8060005b8381101561121f57815161120688826110aa565b9750611211836115ac565b9250506001810190506111f2565b5085935050505092915050565b6000611239601e836115e5565b9150611244826117d8565b602082019050919050565b600061125c6036836115e5565b915061126782611801565b604082019050919050565b600061127f6031836115e5565b915061128a82611850565b604082019050919050565b60006112a26025836115e5565b91506112ad8261189f565b604082019050919050565b60006112c5602c836115e5565b91506112d0826118ee565b604082019050919050565b60006112e86024836115e5565b91506112f38261193d565b604082019050919050565b611307816116b2565b82525050565b61131e611319826116b2565b6116ed565b82525050565b60006113308289611177565b6040820191506113408288611177565b6040820191506113508287611177565b6040820191506113608286611177565b6040820191506113708285611177565b6040820191506113808284611177565b604082019150819050979650505050505050565b60006113a082856111ce565b91506113ac82846110c2565b91508190509392505050565b60006113c4828561130d565b6020820191506113d4828461130d565b6020820191508190509392505050565b600060208201905081810360008301526113fd8161122c565b9050919050565b6000602082019050818103600083015261141d8161124f565b9050919050565b6000602082019050818103600083015261143d81611272565b9050919050565b6000602082019050818103600083015261145d81611295565b9050919050565b6000602082019050818103600083015261147d816112b8565b9050919050565b6000602082019050818103600083015261149d816112db565b9050919050565b60006114ae6114bf565b90506114ba82826116bc565b919050565b6000604051905090565b600067ffffffffffffffff8211156114e4576114e3611784565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156115105761150f611784565b5b602082029050919050565b600067ffffffffffffffff82111561153657611535611784565b5b602082029050602081019050919050565b6000819050602082019050919050565b6000819050919050565b6000819050602082019050919050565b600081519050919050565b600060029050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600081905092915050565b600081905092915050565b600081905092915050565b600081905092915050565b600082825260208201905092915050565b6000611601826116b2565b915061160c836116b2565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611641576116406116f7565b5b828201905092915050565b6000611657826116b2565b9150611662836116b2565b925082821015611675576116746116f7565b5b828203905092915050565b600061168b82611692565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6116c5826117c7565b810181811067ffffffffffffffff821117156116e4576116e3611784565b5b80604052505050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f656c6c6970746963206375727665206164646974696f6e206661696c65640000600082015250565b7f64697370757465206661696c65642028696e76616c6964207265706c6179206f60008201527f662073686172696e67207472616e73616374696f6e2900000000000000000000602082015250565b7f64697370757465206661696c65642028636f6e7472616374206973206e6f742060008201527f696e206469737075746520706861736529000000000000000000000000000000602082015250565b7f64697370757465206661696c65642028696e76616c6964206c69737420696e6460008201527f6963657329000000000000000000000000000000000000000000000000000000602082015250565b7f64697370757465206661696c65642028696e76616c696420736861726564206b60008201527f6579206f722070726f6f66290000000000000000000000000000000000000000602082015250565b7f656c6c6970746963206375727665206d756c7469706c69636174696f6e20666160008201527f696c656400000000000000000000000000000000000000000000000000000000602082015250565b61199581611680565b81146119a057600080fd5b50565b6119ac816116b2565b81146119b757600080fd5b5056fea2646970667358221220981e727311679cd932480fa566885b3ed1ae707db5b40cb22d4cebefac8cb8fc64736f6c63430008060033",
}

// EthDKGSubmitDisputeFacetABI is the input ABI used to generate the binding from.
// Deprecated: Use EthDKGSubmitDisputeFacetMetaData.ABI instead.
var EthDKGSubmitDisputeFacetABI = EthDKGSubmitDisputeFacetMetaData.ABI

// EthDKGSubmitDisputeFacetBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use EthDKGSubmitDisputeFacetMetaData.Bin instead.
var EthDKGSubmitDisputeFacetBin = EthDKGSubmitDisputeFacetMetaData.Bin

// DeployEthDKGSubmitDisputeFacet deploys a new Ethereum contract, binding an instance of EthDKGSubmitDisputeFacet to it.
func DeployEthDKGSubmitDisputeFacet(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *EthDKGSubmitDisputeFacet, error) {
	parsed, err := EthDKGSubmitDisputeFacetMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(EthDKGSubmitDisputeFacetBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &EthDKGSubmitDisputeFacet{EthDKGSubmitDisputeFacetCaller: EthDKGSubmitDisputeFacetCaller{contract: contract}, EthDKGSubmitDisputeFacetTransactor: EthDKGSubmitDisputeFacetTransactor{contract: contract}, EthDKGSubmitDisputeFacetFilterer: EthDKGSubmitDisputeFacetFilterer{contract: contract}}, nil
}

// EthDKGSubmitDisputeFacet is an auto generated Go binding around an Ethereum contract.
type EthDKGSubmitDisputeFacet struct {
	EthDKGSubmitDisputeFacetCaller     // Read-only binding to the contract
	EthDKGSubmitDisputeFacetTransactor // Write-only binding to the contract
	EthDKGSubmitDisputeFacetFilterer   // Log filterer for contract events
}

// EthDKGSubmitDisputeFacetCaller is an auto generated read-only Go binding around an Ethereum contract.
type EthDKGSubmitDisputeFacetCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EthDKGSubmitDisputeFacetTransactor is an auto generated write-only Go binding around an Ethereum contract.
type EthDKGSubmitDisputeFacetTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EthDKGSubmitDisputeFacetFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type EthDKGSubmitDisputeFacetFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EthDKGSubmitDisputeFacetSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type EthDKGSubmitDisputeFacetSession struct {
	Contract     *EthDKGSubmitDisputeFacet // Generic contract binding to set the session for
	CallOpts     bind.CallOpts             // Call options to use throughout this session
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// EthDKGSubmitDisputeFacetCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type EthDKGSubmitDisputeFacetCallerSession struct {
	Contract *EthDKGSubmitDisputeFacetCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                   // Call options to use throughout this session
}

// EthDKGSubmitDisputeFacetTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type EthDKGSubmitDisputeFacetTransactorSession struct {
	Contract     *EthDKGSubmitDisputeFacetTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                   // Transaction auth options to use throughout this session
}

// EthDKGSubmitDisputeFacetRaw is an auto generated low-level Go binding around an Ethereum contract.
type EthDKGSubmitDisputeFacetRaw struct {
	Contract *EthDKGSubmitDisputeFacet // Generic contract binding to access the raw methods on
}

// EthDKGSubmitDisputeFacetCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type EthDKGSubmitDisputeFacetCallerRaw struct {
	Contract *EthDKGSubmitDisputeFacetCaller // Generic read-only contract binding to access the raw methods on
}

// EthDKGSubmitDisputeFacetTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type EthDKGSubmitDisputeFacetTransactorRaw struct {
	Contract *EthDKGSubmitDisputeFacetTransactor // Generic write-only contract binding to access the raw methods on
}

// NewEthDKGSubmitDisputeFacet creates a new instance of EthDKGSubmitDisputeFacet, bound to a specific deployed contract.
func NewEthDKGSubmitDisputeFacet(address common.Address, backend bind.ContractBackend) (*EthDKGSubmitDisputeFacet, error) {
	contract, err := bindEthDKGSubmitDisputeFacet(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &EthDKGSubmitDisputeFacet{EthDKGSubmitDisputeFacetCaller: EthDKGSubmitDisputeFacetCaller{contract: contract}, EthDKGSubmitDisputeFacetTransactor: EthDKGSubmitDisputeFacetTransactor{contract: contract}, EthDKGSubmitDisputeFacetFilterer: EthDKGSubmitDisputeFacetFilterer{contract: contract}}, nil
}

// NewEthDKGSubmitDisputeFacetCaller creates a new read-only instance of EthDKGSubmitDisputeFacet, bound to a specific deployed contract.
func NewEthDKGSubmitDisputeFacetCaller(address common.Address, caller bind.ContractCaller) (*EthDKGSubmitDisputeFacetCaller, error) {
	contract, err := bindEthDKGSubmitDisputeFacet(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &EthDKGSubmitDisputeFacetCaller{contract: contract}, nil
}

// NewEthDKGSubmitDisputeFacetTransactor creates a new write-only instance of EthDKGSubmitDisputeFacet, bound to a specific deployed contract.
func NewEthDKGSubmitDisputeFacetTransactor(address common.Address, transactor bind.ContractTransactor) (*EthDKGSubmitDisputeFacetTransactor, error) {
	contract, err := bindEthDKGSubmitDisputeFacet(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &EthDKGSubmitDisputeFacetTransactor{contract: contract}, nil
}

// NewEthDKGSubmitDisputeFacetFilterer creates a new log filterer instance of EthDKGSubmitDisputeFacet, bound to a specific deployed contract.
func NewEthDKGSubmitDisputeFacetFilterer(address common.Address, filterer bind.ContractFilterer) (*EthDKGSubmitDisputeFacetFilterer, error) {
	contract, err := bindEthDKGSubmitDisputeFacet(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &EthDKGSubmitDisputeFacetFilterer{contract: contract}, nil
}

// bindEthDKGSubmitDisputeFacet binds a generic wrapper to an already deployed contract.
func bindEthDKGSubmitDisputeFacet(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(EthDKGSubmitDisputeFacetABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_EthDKGSubmitDisputeFacet *EthDKGSubmitDisputeFacetRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _EthDKGSubmitDisputeFacet.Contract.EthDKGSubmitDisputeFacetCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_EthDKGSubmitDisputeFacet *EthDKGSubmitDisputeFacetRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EthDKGSubmitDisputeFacet.Contract.EthDKGSubmitDisputeFacetTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_EthDKGSubmitDisputeFacet *EthDKGSubmitDisputeFacetRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _EthDKGSubmitDisputeFacet.Contract.EthDKGSubmitDisputeFacetTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_EthDKGSubmitDisputeFacet *EthDKGSubmitDisputeFacetCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _EthDKGSubmitDisputeFacet.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_EthDKGSubmitDisputeFacet *EthDKGSubmitDisputeFacetTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EthDKGSubmitDisputeFacet.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_EthDKGSubmitDisputeFacet *EthDKGSubmitDisputeFacetTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _EthDKGSubmitDisputeFacet.Contract.contract.Transact(opts, method, params...)
}

// SubmitDispute is a paid mutator transaction binding the contract method 0x2f123ffc.
//
// Solidity: function submit_dispute(address issuer, uint256 issuer_list_idx, uint256 disputer_list_idx, uint256[] encrypted_shares, uint256[2][] commitments, uint256[2] shared_key, uint256[2] shared_key_correctness_proof) returns()
func (_EthDKGSubmitDisputeFacet *EthDKGSubmitDisputeFacetTransactor) SubmitDispute(opts *bind.TransactOpts, issuer common.Address, issuer_list_idx *big.Int, disputer_list_idx *big.Int, encrypted_shares []*big.Int, commitments [][2]*big.Int, shared_key [2]*big.Int, shared_key_correctness_proof [2]*big.Int) (*types.Transaction, error) {
	return _EthDKGSubmitDisputeFacet.contract.Transact(opts, "submit_dispute", issuer, issuer_list_idx, disputer_list_idx, encrypted_shares, commitments, shared_key, shared_key_correctness_proof)
}

// SubmitDispute is a paid mutator transaction binding the contract method 0x2f123ffc.
//
// Solidity: function submit_dispute(address issuer, uint256 issuer_list_idx, uint256 disputer_list_idx, uint256[] encrypted_shares, uint256[2][] commitments, uint256[2] shared_key, uint256[2] shared_key_correctness_proof) returns()
func (_EthDKGSubmitDisputeFacet *EthDKGSubmitDisputeFacetSession) SubmitDispute(issuer common.Address, issuer_list_idx *big.Int, disputer_list_idx *big.Int, encrypted_shares []*big.Int, commitments [][2]*big.Int, shared_key [2]*big.Int, shared_key_correctness_proof [2]*big.Int) (*types.Transaction, error) {
	return _EthDKGSubmitDisputeFacet.Contract.SubmitDispute(&_EthDKGSubmitDisputeFacet.TransactOpts, issuer, issuer_list_idx, disputer_list_idx, encrypted_shares, commitments, shared_key, shared_key_correctness_proof)
}

// SubmitDispute is a paid mutator transaction binding the contract method 0x2f123ffc.
//
// Solidity: function submit_dispute(address issuer, uint256 issuer_list_idx, uint256 disputer_list_idx, uint256[] encrypted_shares, uint256[2][] commitments, uint256[2] shared_key, uint256[2] shared_key_correctness_proof) returns()
func (_EthDKGSubmitDisputeFacet *EthDKGSubmitDisputeFacetTransactorSession) SubmitDispute(issuer common.Address, issuer_list_idx *big.Int, disputer_list_idx *big.Int, encrypted_shares []*big.Int, commitments [][2]*big.Int, shared_key [2]*big.Int, shared_key_correctness_proof [2]*big.Int) (*types.Transaction, error) {
	return _EthDKGSubmitDisputeFacet.Contract.SubmitDispute(&_EthDKGSubmitDisputeFacet.TransactOpts, issuer, issuer_list_idx, disputer_list_idx, encrypted_shares, commitments, shared_key, shared_key_correctness_proof)
}

// EthDKGSubmitMPKFacetMetaData contains all meta data concerning the EthDKGSubmitMPKFacet contract.
var EthDKGSubmitMPKFacetMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"_master_public_key\",\"type\":\"uint256[4]\"}],\"name\":\"submit_master_public_key\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50611135806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063f47ae6a914610030575b600080fd5b61004a60048036038101906100459190610b92565b610060565b6040516100579190610ca7565b60405180910390f35b60008061006b61093f565b9050438160160154108015610084575080601701544311155b6100c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100ba90610ce2565b60405180910390fd5b8060120160029054906101000a900460ff1661026c5760006001905060005b826000018054905081101561023c57600083600001828154811061010957610108610f05565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008460040160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006002811061018c5761018b610f05565b5b01541415610228576000925083600d0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d2a2c55c826040518263ffffffff1660e01b81526004016101f59190610c8c565b600060405180830381600087803b15801561020f57600080fd5b505af1158015610223573d6000803e3d6000fd5b505050505b50808061023490610e8d565b9150506100e2565b508061024d5760019250505061093a565b60018260120160026101000a81548160ff021916908315150217905550505b60008160090160006004811061028557610284610f05565b5b01541415806102ad57506000816009016001600481106102a8576102a7610f05565b5b015414155b806102d157506000816009016002600481106102cc576102cb610f05565b5b015414155b806102f557506000816009016003600481106102f0576102ef610f05565b5b015414155b1561030457600091505061093a565b6000816000018054905090506000805b83600001828154811061032a57610329610f05565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506001826103649190610dbe565b915082821080156103b857506000801b8460020160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b6103145760008460040160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600280602002604051908101604052809291908260028015610436576020028201915b815481526020019060010190808311610422575b5050505050905060008160006002811061045357610452610f05565b5b60200201511415610499576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049090610d22565b60405180910390fd5b60008560040160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600280602002604051908101604052809291908260028015610513576020028201915b8154815260200190600101908083116104ff575b505050505090505b848410156107325785600001848154811061053957610538610f05565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1692506000801b8660020160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414156105b75761071e565b8560040160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060028060200260405190810160405280929190826002801561062f576020028201915b81548152602001906001019080831161061b575b5050505050915060008260006002811061064c5761064b610f05565b5b60200201511415610692576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068990610d22565b60405180910390fd5b61071b6040518060800160405280836000600281106106b4576106b3610f05565b5b60200201518152602001836001600281106106d2576106d1610f05565b5b60200201518152602001846000600281106106f0576106ef610f05565b5b602002015181526020018460016002811061070e5761070d610f05565b5b602002015181525061096c565b90505b60018461072b9190610dbe565b935061051b565b6108dc6040518061018001604052808360006002811061075557610754610f05565b5b602002015181526020018360016002811061077357610772610f05565b5b602002015181526020017f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed81526020017f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec81526020017f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d81526020017f062a0ad5cf656709286b38ae4fb927fc901c5f9cf9623bfd0b6d22d30f95a1f381526020017f1b4af7018d896f006d7e5c23d05903b5d2698da94674e546e51f77b6df70ffac81526020018a60006004811061087557610874610f05565b5b602002015181526020018a60016004811061089357610892610f05565b5b602002015181526020018a6002600481106108b1576108b0610f05565b5b602002015181526020018a6003600481106108cf576108ce610f05565b5b60200201518152506109ca565b61091b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091290610d02565b60405180910390fd5b878660090190600461092e929190610a4a565b50600096505050505050505b919050565b6000807fd2d37756412c577f56b4802b8e643c9a817fa92cc18ff383f317fce7fab4282b90508091505090565b610974610a8a565b60006040826080856006600019fa9050806109c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109bb90610cc2565b60405180910390fd5b50919050565b60006109d4610aac565b6000602082610180866008600019fa905080610a25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1c90610d42565b60405180910390fd5b600182600060018110610a3b57610a3a610f05565b5b60200201511492505050919050565b8260048101928215610a79579160200282015b82811115610a78578251825591602001919060010190610a5d565b5b509050610a869190610ace565b5090565b6040518060400160405280600290602082028036833780820191505090505090565b6040518060200160405280600190602082028036833780820191505090505090565b5b80821115610ae7576000816000905550600101610acf565b5090565b6000610afe610af984610d87565b610d62565b90508082856020860282011115610b1857610b17610f68565b5b60005b85811015610b485781610b2e8882610b7d565b845260208401935060208301925050600181019050610b1b565b5050509392505050565b600082601f830112610b6757610b66610f63565b5b6004610b74848285610aeb565b91505092915050565b600081359050610b8c816110e8565b92915050565b600060808284031215610ba857610ba7610f6d565b5b6000610bb684828501610b52565b91505092915050565b610bc881610e14565b82525050565b610bd781610e26565b82525050565b6000610bea601e83610dad565b9150610bf582610f83565b602082019050919050565b6000610c0d604683610dad565b9150610c1882610fac565b606082019050919050565b6000610c30603383610dad565b9150610c3b82611021565b604082019050919050565b6000610c53603083610dad565b9150610c5e82611070565b604082019050919050565b6000610c76601d83610dad565b9150610c81826110bf565b602082019050919050565b6000602082019050610ca16000830184610bbf565b92915050565b6000602082019050610cbc6000830184610bce565b92915050565b60006020820190508181036000830152610cdb81610bdd565b9050919050565b60006020820190508181036000830152610cfb81610c00565b9050919050565b60006020820190508181036000830152610d1b81610c23565b9050919050565b60006020820190508181036000830152610d3b81610c46565b9050919050565b60006020820190508181036000830152610d5b81610c69565b9050919050565b6000610d6c610d7d565b9050610d788282610e5c565b919050565b6000604051905090565b600067ffffffffffffffff821115610da257610da1610f34565b5b602082029050919050565b600082825260208201905092915050565b6000610dc982610e52565b9150610dd483610e52565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610e0957610e08610ed6565b5b828201905092915050565b6000610e1f82610e32565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b610e6582610f72565b810181811067ffffffffffffffff82111715610e8457610e83610f34565b5b80604052505050565b6000610e9882610e52565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610ecb57610eca610ed6565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f656c6c6970746963206375727665206164646974696f6e206661696c65640000600082015250565b7f6d6173746572206b6579207375626d697373696f6e206661696c65642028636f60008201527f6e7472616374206973206e6f7420696e206d706b2064657269766174696f6e2060208201527f7068617365290000000000000000000000000000000000000000000000000000604082015250565b7f6d6173746572206b6579207375626d697373696f6e206661696c65642028706160008201527f6972696e6720636865636b206661696c65642900000000000000000000000000602082015250565b7f6d6173746572206b6579207375626d697373696f6e206661696c656420286b6560008201527f79207368617265206d697373696e672900000000000000000000000000000000602082015250565b7f656c6c69707469632063757276652070616972696e67206661696c6564000000600082015250565b6110f181610e52565b81146110fc57600080fd5b5056fea2646970667358221220989a14e42c8a196d2560b22ebb63f5a8e497fa2665c15530111a40ebbb88cc7164736f6c63430008060033",
}

// EthDKGSubmitMPKFacetABI is the input ABI used to generate the binding from.
// Deprecated: Use EthDKGSubmitMPKFacetMetaData.ABI instead.
var EthDKGSubmitMPKFacetABI = EthDKGSubmitMPKFacetMetaData.ABI

// EthDKGSubmitMPKFacetBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use EthDKGSubmitMPKFacetMetaData.Bin instead.
var EthDKGSubmitMPKFacetBin = EthDKGSubmitMPKFacetMetaData.Bin

// DeployEthDKGSubmitMPKFacet deploys a new Ethereum contract, binding an instance of EthDKGSubmitMPKFacet to it.
func DeployEthDKGSubmitMPKFacet(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *EthDKGSubmitMPKFacet, error) {
	parsed, err := EthDKGSubmitMPKFacetMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(EthDKGSubmitMPKFacetBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &EthDKGSubmitMPKFacet{EthDKGSubmitMPKFacetCaller: EthDKGSubmitMPKFacetCaller{contract: contract}, EthDKGSubmitMPKFacetTransactor: EthDKGSubmitMPKFacetTransactor{contract: contract}, EthDKGSubmitMPKFacetFilterer: EthDKGSubmitMPKFacetFilterer{contract: contract}}, nil
}

// EthDKGSubmitMPKFacet is an auto generated Go binding around an Ethereum contract.
type EthDKGSubmitMPKFacet struct {
	EthDKGSubmitMPKFacetCaller     // Read-only binding to the contract
	EthDKGSubmitMPKFacetTransactor // Write-only binding to the contract
	EthDKGSubmitMPKFacetFilterer   // Log filterer for contract events
}

// EthDKGSubmitMPKFacetCaller is an auto generated read-only Go binding around an Ethereum contract.
type EthDKGSubmitMPKFacetCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EthDKGSubmitMPKFacetTransactor is an auto generated write-only Go binding around an Ethereum contract.
type EthDKGSubmitMPKFacetTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EthDKGSubmitMPKFacetFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type EthDKGSubmitMPKFacetFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EthDKGSubmitMPKFacetSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type EthDKGSubmitMPKFacetSession struct {
	Contract     *EthDKGSubmitMPKFacet // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// EthDKGSubmitMPKFacetCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type EthDKGSubmitMPKFacetCallerSession struct {
	Contract *EthDKGSubmitMPKFacetCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// EthDKGSubmitMPKFacetTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type EthDKGSubmitMPKFacetTransactorSession struct {
	Contract     *EthDKGSubmitMPKFacetTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// EthDKGSubmitMPKFacetRaw is an auto generated low-level Go binding around an Ethereum contract.
type EthDKGSubmitMPKFacetRaw struct {
	Contract *EthDKGSubmitMPKFacet // Generic contract binding to access the raw methods on
}

// EthDKGSubmitMPKFacetCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type EthDKGSubmitMPKFacetCallerRaw struct {
	Contract *EthDKGSubmitMPKFacetCaller // Generic read-only contract binding to access the raw methods on
}

// EthDKGSubmitMPKFacetTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type EthDKGSubmitMPKFacetTransactorRaw struct {
	Contract *EthDKGSubmitMPKFacetTransactor // Generic write-only contract binding to access the raw methods on
}

// NewEthDKGSubmitMPKFacet creates a new instance of EthDKGSubmitMPKFacet, bound to a specific deployed contract.
func NewEthDKGSubmitMPKFacet(address common.Address, backend bind.ContractBackend) (*EthDKGSubmitMPKFacet, error) {
	contract, err := bindEthDKGSubmitMPKFacet(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &EthDKGSubmitMPKFacet{EthDKGSubmitMPKFacetCaller: EthDKGSubmitMPKFacetCaller{contract: contract}, EthDKGSubmitMPKFacetTransactor: EthDKGSubmitMPKFacetTransactor{contract: contract}, EthDKGSubmitMPKFacetFilterer: EthDKGSubmitMPKFacetFilterer{contract: contract}}, nil
}

// NewEthDKGSubmitMPKFacetCaller creates a new read-only instance of EthDKGSubmitMPKFacet, bound to a specific deployed contract.
func NewEthDKGSubmitMPKFacetCaller(address common.Address, caller bind.ContractCaller) (*EthDKGSubmitMPKFacetCaller, error) {
	contract, err := bindEthDKGSubmitMPKFacet(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &EthDKGSubmitMPKFacetCaller{contract: contract}, nil
}

// NewEthDKGSubmitMPKFacetTransactor creates a new write-only instance of EthDKGSubmitMPKFacet, bound to a specific deployed contract.
func NewEthDKGSubmitMPKFacetTransactor(address common.Address, transactor bind.ContractTransactor) (*EthDKGSubmitMPKFacetTransactor, error) {
	contract, err := bindEthDKGSubmitMPKFacet(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &EthDKGSubmitMPKFacetTransactor{contract: contract}, nil
}

// NewEthDKGSubmitMPKFacetFilterer creates a new log filterer instance of EthDKGSubmitMPKFacet, bound to a specific deployed contract.
func NewEthDKGSubmitMPKFacetFilterer(address common.Address, filterer bind.ContractFilterer) (*EthDKGSubmitMPKFacetFilterer, error) {
	contract, err := bindEthDKGSubmitMPKFacet(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &EthDKGSubmitMPKFacetFilterer{contract: contract}, nil
}

// bindEthDKGSubmitMPKFacet binds a generic wrapper to an already deployed contract.
func bindEthDKGSubmitMPKFacet(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(EthDKGSubmitMPKFacetABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_EthDKGSubmitMPKFacet *EthDKGSubmitMPKFacetRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _EthDKGSubmitMPKFacet.Contract.EthDKGSubmitMPKFacetCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_EthDKGSubmitMPKFacet *EthDKGSubmitMPKFacetRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EthDKGSubmitMPKFacet.Contract.EthDKGSubmitMPKFacetTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_EthDKGSubmitMPKFacet *EthDKGSubmitMPKFacetRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _EthDKGSubmitMPKFacet.Contract.EthDKGSubmitMPKFacetTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_EthDKGSubmitMPKFacet *EthDKGSubmitMPKFacetCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _EthDKGSubmitMPKFacet.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_EthDKGSubmitMPKFacet *EthDKGSubmitMPKFacetTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EthDKGSubmitMPKFacet.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_EthDKGSubmitMPKFacet *EthDKGSubmitMPKFacetTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _EthDKGSubmitMPKFacet.Contract.contract.Transact(opts, method, params...)
}

// SubmitMasterPublicKey is a paid mutator transaction binding the contract method 0xf47ae6a9.
//
// Solidity: function submit_master_public_key(uint256[4] _master_public_key) returns(bool)
func (_EthDKGSubmitMPKFacet *EthDKGSubmitMPKFacetTransactor) SubmitMasterPublicKey(opts *bind.TransactOpts, _master_public_key [4]*big.Int) (*types.Transaction, error) {
	return _EthDKGSubmitMPKFacet.contract.Transact(opts, "submit_master_public_key", _master_public_key)
}

// SubmitMasterPublicKey is a paid mutator transaction binding the contract method 0xf47ae6a9.
//
// Solidity: function submit_master_public_key(uint256[4] _master_public_key) returns(bool)
func (_EthDKGSubmitMPKFacet *EthDKGSubmitMPKFacetSession) SubmitMasterPublicKey(_master_public_key [4]*big.Int) (*types.Transaction, error) {
	return _EthDKGSubmitMPKFacet.Contract.SubmitMasterPublicKey(&_EthDKGSubmitMPKFacet.TransactOpts, _master_public_key)
}

// SubmitMasterPublicKey is a paid mutator transaction binding the contract method 0xf47ae6a9.
//
// Solidity: function submit_master_public_key(uint256[4] _master_public_key) returns(bool)
func (_EthDKGSubmitMPKFacet *EthDKGSubmitMPKFacetTransactorSession) SubmitMasterPublicKey(_master_public_key [4]*big.Int) (*types.Transaction, error) {
	return _EthDKGSubmitMPKFacet.Contract.SubmitMasterPublicKey(&_EthDKGSubmitMPKFacet.TransactOpts, _master_public_key)
}

// EthSafeTransferMetaData contains all meta data concerning the EthSafeTransfer contract.
var EthSafeTransferMetaData = &bind.MetaData{
	ABI: "[]",
}

// EthSafeTransferABI is the input ABI used to generate the binding from.
// Deprecated: Use EthSafeTransferMetaData.ABI instead.
var EthSafeTransferABI = EthSafeTransferMetaData.ABI

// EthSafeTransfer is an auto generated Go binding around an Ethereum contract.
type EthSafeTransfer struct {
	EthSafeTransferCaller     // Read-only binding to the contract
	EthSafeTransferTransactor // Write-only binding to the contract
	EthSafeTransferFilterer   // Log filterer for contract events
}

// EthSafeTransferCaller is an auto generated read-only Go binding around an Ethereum contract.
type EthSafeTransferCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EthSafeTransferTransactor is an auto generated write-only Go binding around an Ethereum contract.
type EthSafeTransferTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EthSafeTransferFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type EthSafeTransferFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EthSafeTransferSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type EthSafeTransferSession struct {
	Contract     *EthSafeTransfer  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// EthSafeTransferCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type EthSafeTransferCallerSession struct {
	Contract *EthSafeTransferCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// EthSafeTransferTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type EthSafeTransferTransactorSession struct {
	Contract     *EthSafeTransferTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// EthSafeTransferRaw is an auto generated low-level Go binding around an Ethereum contract.
type EthSafeTransferRaw struct {
	Contract *EthSafeTransfer // Generic contract binding to access the raw methods on
}

// EthSafeTransferCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type EthSafeTransferCallerRaw struct {
	Contract *EthSafeTransferCaller // Generic read-only contract binding to access the raw methods on
}

// EthSafeTransferTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type EthSafeTransferTransactorRaw struct {
	Contract *EthSafeTransferTransactor // Generic write-only contract binding to access the raw methods on
}

// NewEthSafeTransfer creates a new instance of EthSafeTransfer, bound to a specific deployed contract.
func NewEthSafeTransfer(address common.Address, backend bind.ContractBackend) (*EthSafeTransfer, error) {
	contract, err := bindEthSafeTransfer(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &EthSafeTransfer{EthSafeTransferCaller: EthSafeTransferCaller{contract: contract}, EthSafeTransferTransactor: EthSafeTransferTransactor{contract: contract}, EthSafeTransferFilterer: EthSafeTransferFilterer{contract: contract}}, nil
}

// NewEthSafeTransferCaller creates a new read-only instance of EthSafeTransfer, bound to a specific deployed contract.
func NewEthSafeTransferCaller(address common.Address, caller bind.ContractCaller) (*EthSafeTransferCaller, error) {
	contract, err := bindEthSafeTransfer(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &EthSafeTransferCaller{contract: contract}, nil
}

// NewEthSafeTransferTransactor creates a new write-only instance of EthSafeTransfer, bound to a specific deployed contract.
func NewEthSafeTransferTransactor(address common.Address, transactor bind.ContractTransactor) (*EthSafeTransferTransactor, error) {
	contract, err := bindEthSafeTransfer(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &EthSafeTransferTransactor{contract: contract}, nil
}

// NewEthSafeTransferFilterer creates a new log filterer instance of EthSafeTransfer, bound to a specific deployed contract.
func NewEthSafeTransferFilterer(address common.Address, filterer bind.ContractFilterer) (*EthSafeTransferFilterer, error) {
	contract, err := bindEthSafeTransfer(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &EthSafeTransferFilterer{contract: contract}, nil
}

// bindEthSafeTransfer binds a generic wrapper to an already deployed contract.
func bindEthSafeTransfer(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(EthSafeTransferABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_EthSafeTransfer *EthSafeTransferRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _EthSafeTransfer.Contract.EthSafeTransferCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_EthSafeTransfer *EthSafeTransferRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EthSafeTransfer.Contract.EthSafeTransferTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_EthSafeTransfer *EthSafeTransferRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _EthSafeTransfer.Contract.EthSafeTransferTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_EthSafeTransfer *EthSafeTransferCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _EthSafeTransfer.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_EthSafeTransfer *EthSafeTransferTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EthSafeTransfer.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_EthSafeTransfer *EthSafeTransferTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _EthSafeTransfer.Contract.contract.Transact(opts, method, params...)
}

// GovernanceMetaData contains all meta data concerning the Governance contract.
var GovernanceMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"getGovernance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isAllowedProposal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governance_\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// GovernanceABI is the input ABI used to generate the binding from.
// Deprecated: Use GovernanceMetaData.ABI instead.
var GovernanceABI = GovernanceMetaData.ABI

// Governance is an auto generated Go binding around an Ethereum contract.
type Governance struct {
	GovernanceCaller     // Read-only binding to the contract
	GovernanceTransactor // Write-only binding to the contract
	GovernanceFilterer   // Log filterer for contract events
}

// GovernanceCaller is an auto generated read-only Go binding around an Ethereum contract.
type GovernanceCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovernanceTransactor is an auto generated write-only Go binding around an Ethereum contract.
type GovernanceTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovernanceFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type GovernanceFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovernanceSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type GovernanceSession struct {
	Contract     *Governance       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// GovernanceCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type GovernanceCallerSession struct {
	Contract *GovernanceCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// GovernanceTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type GovernanceTransactorSession struct {
	Contract     *GovernanceTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// GovernanceRaw is an auto generated low-level Go binding around an Ethereum contract.
type GovernanceRaw struct {
	Contract *Governance // Generic contract binding to access the raw methods on
}

// GovernanceCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type GovernanceCallerRaw struct {
	Contract *GovernanceCaller // Generic read-only contract binding to access the raw methods on
}

// GovernanceTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type GovernanceTransactorRaw struct {
	Contract *GovernanceTransactor // Generic write-only contract binding to access the raw methods on
}

// NewGovernance creates a new instance of Governance, bound to a specific deployed contract.
func NewGovernance(address common.Address, backend bind.ContractBackend) (*Governance, error) {
	contract, err := bindGovernance(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Governance{GovernanceCaller: GovernanceCaller{contract: contract}, GovernanceTransactor: GovernanceTransactor{contract: contract}, GovernanceFilterer: GovernanceFilterer{contract: contract}}, nil
}

// NewGovernanceCaller creates a new read-only instance of Governance, bound to a specific deployed contract.
func NewGovernanceCaller(address common.Address, caller bind.ContractCaller) (*GovernanceCaller, error) {
	contract, err := bindGovernance(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &GovernanceCaller{contract: contract}, nil
}

// NewGovernanceTransactor creates a new write-only instance of Governance, bound to a specific deployed contract.
func NewGovernanceTransactor(address common.Address, transactor bind.ContractTransactor) (*GovernanceTransactor, error) {
	contract, err := bindGovernance(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &GovernanceTransactor{contract: contract}, nil
}

// NewGovernanceFilterer creates a new log filterer instance of Governance, bound to a specific deployed contract.
func NewGovernanceFilterer(address common.Address, filterer bind.ContractFilterer) (*GovernanceFilterer, error) {
	contract, err := bindGovernance(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &GovernanceFilterer{contract: contract}, nil
}

// bindGovernance binds a generic wrapper to an already deployed contract.
func bindGovernance(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(GovernanceABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Governance *GovernanceRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Governance.Contract.GovernanceCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Governance *GovernanceRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Governance.Contract.GovernanceTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Governance *GovernanceRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Governance.Contract.GovernanceTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Governance *GovernanceCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Governance.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Governance *GovernanceTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Governance.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Governance *GovernanceTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Governance.Contract.contract.Transact(opts, method, params...)
}

// GetGovernance is a free data retrieval call binding the contract method 0x289b3c0d.
//
// Solidity: function getGovernance() view returns(address)
func (_Governance *GovernanceCaller) GetGovernance(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Governance.contract.Call(opts, &out, "getGovernance")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetGovernance is a free data retrieval call binding the contract method 0x289b3c0d.
//
// Solidity: function getGovernance() view returns(address)
func (_Governance *GovernanceSession) GetGovernance() (common.Address, error) {
	return _Governance.Contract.GetGovernance(&_Governance.CallOpts)
}

// GetGovernance is a free data retrieval call binding the contract method 0x289b3c0d.
//
// Solidity: function getGovernance() view returns(address)
func (_Governance *GovernanceCallerSession) GetGovernance() (common.Address, error) {
	return _Governance.Contract.GetGovernance(&_Governance.CallOpts)
}

// IsAllowedProposal is a free data retrieval call binding the contract method 0x3771165e.
//
// Solidity: function isAllowedProposal(address addr) view returns(bool)
func (_Governance *GovernanceCaller) IsAllowedProposal(opts *bind.CallOpts, addr common.Address) (bool, error) {
	var out []interface{}
	err := _Governance.contract.Call(opts, &out, "isAllowedProposal", addr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsAllowedProposal is a free data retrieval call binding the contract method 0x3771165e.
//
// Solidity: function isAllowedProposal(address addr) view returns(bool)
func (_Governance *GovernanceSession) IsAllowedProposal(addr common.Address) (bool, error) {
	return _Governance.Contract.IsAllowedProposal(&_Governance.CallOpts, addr)
}

// IsAllowedProposal is a free data retrieval call binding the contract method 0x3771165e.
//
// Solidity: function isAllowedProposal(address addr) view returns(bool)
func (_Governance *GovernanceCallerSession) IsAllowedProposal(addr common.Address) (bool, error) {
	return _Governance.Contract.IsAllowedProposal(&_Governance.CallOpts, addr)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_Governance *GovernanceTransactor) SetGovernance(opts *bind.TransactOpts, governance_ common.Address) (*types.Transaction, error) {
	return _Governance.contract.Transact(opts, "setGovernance", governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_Governance *GovernanceSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _Governance.Contract.SetGovernance(&_Governance.TransactOpts, governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_Governance *GovernanceTransactorSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _Governance.Contract.SetGovernance(&_Governance.TransactOpts, governance_)
}

// GovernanceManagerMetaData contains all meta data concerning the GovernanceManager contract.
var GovernanceManagerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Stake_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"MinerStake_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"allowedProposal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalID_\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinerStakeTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalID_\",\"type\":\"uint256\"}],\"name\":\"getProposal\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"logic\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"voteCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockEndVote\",\"type\":\"uint256\"}],\"internalType\":\"structGovernanceStorage.Proposal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalID_\",\"type\":\"uint256\"}],\"name\":\"isProposalExecuted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"logic_\",\"type\":\"address\"}],\"name\":\"propose\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalID_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"voteAsMiner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalID_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"voteAsStaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x6080604052600080553480156200001557600080fd5b50604051620017da380380620017da83398181016040528101906200003b9190620000ee565b81600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506a5ccf4630096a8c5d000000600381905550505062000188565b600081519050620000e8816200016e565b92915050565b6000806040838503121562000108576200010762000169565b5b60006200011885828601620000d7565b92505060206200012b85828601620000d7565b9150509250929050565b6000620001428262000149565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b620001798162000135565b81146200018557600080fd5b50565b61164280620001986000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063a35d463311610066578063a35d463314610120578063c7f758a81461013c578063d00c1aec1461016c578063f4f580001461019c578063fe0d94c1146101ba57610093565b806301267951146100985780632590edcb146100c857806385e52ffe146100e65780638b0441e214610102575b600080fd5b6100b260048036038101906100ad9190610df9565b6101d6565b6040516100bf9190611214565b60405180910390f35b6100d0610336565b6040516100dd91906110ac565b60405180910390f35b61010060048036038101906100fb9190610e80565b610360565b005b61010a610397565b60405161011791906110ac565b60405180910390f35b61013a60048036038101906101359190610e80565b6103c1565b005b61015660048036038101906101519190610e26565b6103f8565b60405161016391906111f9565b60405180910390f35b61018660048036038101906101819190610e26565b6104f4565b60405161019391906110fe565b60405180910390f35b6101a461056b565b6040516101b191906110ac565b60405180910390f35b6101d460048036038101906101cf9190610e26565b610591565b005b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610247576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023e90611199565b60405180910390fd5b600060405180608001604052806000151581526020018473ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016202a3004361028f9190611256565b815250905061029c610940565b9150806005600084815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600101556060820151816002015590505050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905061039281848461095f565b505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506103f381848461095f565b505050565b610400610d7a565b81610409610d71565b101561044a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044190611139565b60405180910390fd5b600560008381526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815250509050919050565b6000816104ff610d71565b1015610540576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053790611139565b60405180910390fd5b6005600083815260200190815260200160002060000160009054906101000a900460ff169050919050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b8061059a610d71565b10156105db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d290611139565b60405180910390fd5b6000600560008381526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815250509050600354816040015110156106cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106c2906111d9565b60405180910390fd5b600015158160000151151514610716576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070d906111b9565b60405180910390fd5b6001816000019015159081151581525050806005600084815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010155606082015181600201559050506000816020015173ffffffffffffffffffffffffffffffffffffffff1682602001516040516024016107eb91906110ac565b6040516020818303038152906040527f4b64e492000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516108759190611095565b600060405180830381855af49150503d80600081146108b0576040519150601f19603f3d011682016040523d82523d6000602084013e6108b5565b606091505b50509050806108f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f090611159565b60405180910390fd5b6000600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b6000805490506001816109539190611256565b90508060008190555090565b81610968610d71565b10156109a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a090611139565b60405180910390fd5b6000600560008481526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815260200160028201548152505090504381606001511015610a97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8e90611119565b60405180910390fd5b600015158160000151151514610ae2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad9906111b9565b60405180910390fd5b600015156004600085815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060009054906101000a900460ff16151514610b97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8e90611179565b60405180910390fd5b60016004600085815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060006101000a81548160ff02191690831515021790555060008473ffffffffffffffffffffffffffffffffffffffff16630cc65dfb33856001438760600151610c4391906112ac565b610c4d9190611256565b6040518463ffffffff1660e01b8152600401610c6b939291906110c7565b602060405180830381600087803b158015610c8557600080fd5b505af1158015610c99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cbd9190610e53565b90508082604001818151610cd19190611256565b91508181525050816005600086815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010155606082015181600201559050505050505050565b60008054905090565b6040518060800160405280600015158152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b600081359050610dc9816115de565b92915050565b600081359050610dde816115f5565b92915050565b600081519050610df3816115f5565b92915050565b600060208284031215610e0f57610e0e61138a565b5b6000610e1d84828501610dba565b91505092915050565b600060208284031215610e3c57610e3b61138a565b5b6000610e4a84828501610dcf565b91505092915050565b600060208284031215610e6957610e6861138a565b5b6000610e7784828501610de4565b91505092915050565b60008060408385031215610e9757610e9661138a565b5b6000610ea585828601610dcf565b9250506020610eb685828601610dcf565b9150509250929050565b610ec9816112e0565b82525050565b610ed8816112e0565b82525050565b610ee7816112f2565b82525050565b610ef6816112f2565b82525050565b6000610f078261122f565b610f11818561123a565b9350610f21818560208601611328565b80840191505092915050565b6000610f3a603783611245565b9150610f458261138f565b604082019050919050565b6000610f5d602683611245565b9150610f68826113de565b604082019050919050565b6000610f80603483611245565b9150610f8b8261142d565b604082019050919050565b6000610fa3603583611245565b9150610fae8261147c565b604082019050919050565b6000610fc6604983611245565b9150610fd1826114cb565b606082019050919050565b6000610fe9603a83611245565b9150610ff482611540565b604082019050919050565b600061100c603683611245565b91506110178261158f565b604082019050919050565b6080820160008201516110386000850182610ede565b50602082015161104b6020850182610ec0565b50604082015161105e6040850182611077565b5060608201516110716060850182611077565b50505050565b6110808161131e565b82525050565b61108f8161131e565b82525050565b60006110a18284610efc565b915081905092915050565b60006020820190506110c16000830184610ecf565b92915050565b60006060820190506110dc6000830186610ecf565b6110e96020830185611086565b6110f66040830184611086565b949350505050565b60006020820190506111136000830184610eed565b92915050565b6000602082019050818103600083015261113281610f2d565b9050919050565b6000602082019050818103600083015261115281610f50565b9050919050565b6000602082019050818103600083015261117281610f73565b9050919050565b6000602082019050818103600083015261119281610f96565b9050919050565b600060208201905081810360008301526111b281610fb9565b9050919050565b600060208201905081810360008301526111d281610fdc565b9050919050565b600060208201905081810360008301526111f281610fff565b9050919050565b600060808201905061120e6000830184611022565b92915050565b60006020820190506112296000830184611086565b92915050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b60006112618261131e565b915061126c8361131e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156112a1576112a061135b565b5b828201905092915050565b60006112b78261131e565b91506112c28361131e565b9250828210156112d5576112d461135b565b5b828203905092915050565b60006112eb826112fe565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b8381101561134657808201518184015260208101905061132b565b83811115611355576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600080fd5b7f476f7665726e616e63654d616e616765723a2043616e6e6f7420766f7465206f60008201527f6e20746869732070726f706f73616c20616e796d6f7265000000000000000000602082015250565b7f476f7665726e616e63654d616e616765723a20496e76616c69642070726f706f60008201527f73616c2049440000000000000000000000000000000000000000000000000000602082015250565b7f476f7665726e616e63654d616e616765723a2043414c4c204641494c4544207460008201527f6f2070726f706f73616c20657865637574652829000000000000000000000000602082015250565b7f476f7665726e616e63654d616e616765723a20596f7520616c7265616479207660008201527f6f746564206f6e20746869732070726f706f73616c0000000000000000000000602082015250565b7f476f7665726e616e63654d616e616765723a204c6f676963206164647265737360008201527f206d75737420626520646966666572656e742066726f6d20746865207a65726f60208201527f2061646472657373210000000000000000000000000000000000000000000000604082015250565b7f476f7665726e616e63654d616e616765723a20546869732070726f706f73616c60008201527f20686173206265656e20657865637574656420616c7265616479000000000000602082015250565b7f476f7665726e616e63654d616e616765723a2050726f706f73616c20646f657360008201527f206e6f74206861766520656e6f75676820766f74657300000000000000000000602082015250565b6115e7816112e0565b81146115f257600080fd5b50565b6115fe8161131e565b811461160957600080fd5b5056fea2646970667358221220f258abcba76f5f1632818abbc0bc5184d49132ec9b5e785bc8523aea23de116b64736f6c63430008060033",
}

// GovernanceManagerABI is the input ABI used to generate the binding from.
// Deprecated: Use GovernanceManagerMetaData.ABI instead.
var GovernanceManagerABI = GovernanceManagerMetaData.ABI

// GovernanceManagerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use GovernanceManagerMetaData.Bin instead.
var GovernanceManagerBin = GovernanceManagerMetaData.Bin

// DeployGovernanceManager deploys a new Ethereum contract, binding an instance of GovernanceManager to it.
func DeployGovernanceManager(auth *bind.TransactOpts, backend bind.ContractBackend, Stake_ common.Address, MinerStake_ common.Address) (common.Address, *types.Transaction, *GovernanceManager, error) {
	parsed, err := GovernanceManagerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(GovernanceManagerBin), backend, Stake_, MinerStake_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &GovernanceManager{GovernanceManagerCaller: GovernanceManagerCaller{contract: contract}, GovernanceManagerTransactor: GovernanceManagerTransactor{contract: contract}, GovernanceManagerFilterer: GovernanceManagerFilterer{contract: contract}}, nil
}

// GovernanceManager is an auto generated Go binding around an Ethereum contract.
type GovernanceManager struct {
	GovernanceManagerCaller     // Read-only binding to the contract
	GovernanceManagerTransactor // Write-only binding to the contract
	GovernanceManagerFilterer   // Log filterer for contract events
}

// GovernanceManagerCaller is an auto generated read-only Go binding around an Ethereum contract.
type GovernanceManagerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovernanceManagerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type GovernanceManagerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovernanceManagerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type GovernanceManagerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovernanceManagerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type GovernanceManagerSession struct {
	Contract     *GovernanceManager // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// GovernanceManagerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type GovernanceManagerCallerSession struct {
	Contract *GovernanceManagerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// GovernanceManagerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type GovernanceManagerTransactorSession struct {
	Contract     *GovernanceManagerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// GovernanceManagerRaw is an auto generated low-level Go binding around an Ethereum contract.
type GovernanceManagerRaw struct {
	Contract *GovernanceManager // Generic contract binding to access the raw methods on
}

// GovernanceManagerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type GovernanceManagerCallerRaw struct {
	Contract *GovernanceManagerCaller // Generic read-only contract binding to access the raw methods on
}

// GovernanceManagerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type GovernanceManagerTransactorRaw struct {
	Contract *GovernanceManagerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewGovernanceManager creates a new instance of GovernanceManager, bound to a specific deployed contract.
func NewGovernanceManager(address common.Address, backend bind.ContractBackend) (*GovernanceManager, error) {
	contract, err := bindGovernanceManager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &GovernanceManager{GovernanceManagerCaller: GovernanceManagerCaller{contract: contract}, GovernanceManagerTransactor: GovernanceManagerTransactor{contract: contract}, GovernanceManagerFilterer: GovernanceManagerFilterer{contract: contract}}, nil
}

// NewGovernanceManagerCaller creates a new read-only instance of GovernanceManager, bound to a specific deployed contract.
func NewGovernanceManagerCaller(address common.Address, caller bind.ContractCaller) (*GovernanceManagerCaller, error) {
	contract, err := bindGovernanceManager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &GovernanceManagerCaller{contract: contract}, nil
}

// NewGovernanceManagerTransactor creates a new write-only instance of GovernanceManager, bound to a specific deployed contract.
func NewGovernanceManagerTransactor(address common.Address, transactor bind.ContractTransactor) (*GovernanceManagerTransactor, error) {
	contract, err := bindGovernanceManager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &GovernanceManagerTransactor{contract: contract}, nil
}

// NewGovernanceManagerFilterer creates a new log filterer instance of GovernanceManager, bound to a specific deployed contract.
func NewGovernanceManagerFilterer(address common.Address, filterer bind.ContractFilterer) (*GovernanceManagerFilterer, error) {
	contract, err := bindGovernanceManager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &GovernanceManagerFilterer{contract: contract}, nil
}

// bindGovernanceManager binds a generic wrapper to an already deployed contract.
func bindGovernanceManager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(GovernanceManagerABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_GovernanceManager *GovernanceManagerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _GovernanceManager.Contract.GovernanceManagerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_GovernanceManager *GovernanceManagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GovernanceManager.Contract.GovernanceManagerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_GovernanceManager *GovernanceManagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _GovernanceManager.Contract.GovernanceManagerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_GovernanceManager *GovernanceManagerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _GovernanceManager.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_GovernanceManager *GovernanceManagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GovernanceManager.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_GovernanceManager *GovernanceManagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _GovernanceManager.Contract.contract.Transact(opts, method, params...)
}

// AllowedProposal is a free data retrieval call binding the contract method 0xf4f58000.
//
// Solidity: function allowedProposal() view returns(address)
func (_GovernanceManager *GovernanceManagerCaller) AllowedProposal(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _GovernanceManager.contract.Call(opts, &out, "allowedProposal")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AllowedProposal is a free data retrieval call binding the contract method 0xf4f58000.
//
// Solidity: function allowedProposal() view returns(address)
func (_GovernanceManager *GovernanceManagerSession) AllowedProposal() (common.Address, error) {
	return _GovernanceManager.Contract.AllowedProposal(&_GovernanceManager.CallOpts)
}

// AllowedProposal is a free data retrieval call binding the contract method 0xf4f58000.
//
// Solidity: function allowedProposal() view returns(address)
func (_GovernanceManager *GovernanceManagerCallerSession) AllowedProposal() (common.Address, error) {
	return _GovernanceManager.Contract.AllowedProposal(&_GovernanceManager.CallOpts)
}

// GetMinerStakeTokenAddress is a free data retrieval call binding the contract method 0x2590edcb.
//
// Solidity: function getMinerStakeTokenAddress() view returns(address)
func (_GovernanceManager *GovernanceManagerCaller) GetMinerStakeTokenAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _GovernanceManager.contract.Call(opts, &out, "getMinerStakeTokenAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetMinerStakeTokenAddress is a free data retrieval call binding the contract method 0x2590edcb.
//
// Solidity: function getMinerStakeTokenAddress() view returns(address)
func (_GovernanceManager *GovernanceManagerSession) GetMinerStakeTokenAddress() (common.Address, error) {
	return _GovernanceManager.Contract.GetMinerStakeTokenAddress(&_GovernanceManager.CallOpts)
}

// GetMinerStakeTokenAddress is a free data retrieval call binding the contract method 0x2590edcb.
//
// Solidity: function getMinerStakeTokenAddress() view returns(address)
func (_GovernanceManager *GovernanceManagerCallerSession) GetMinerStakeTokenAddress() (common.Address, error) {
	return _GovernanceManager.Contract.GetMinerStakeTokenAddress(&_GovernanceManager.CallOpts)
}

// GetProposal is a free data retrieval call binding the contract method 0xc7f758a8.
//
// Solidity: function getProposal(uint256 proposalID_) view returns((bool,address,uint256,uint256))
func (_GovernanceManager *GovernanceManagerCaller) GetProposal(opts *bind.CallOpts, proposalID_ *big.Int) (GovernanceStorageProposal, error) {
	var out []interface{}
	err := _GovernanceManager.contract.Call(opts, &out, "getProposal", proposalID_)

	if err != nil {
		return *new(GovernanceStorageProposal), err
	}

	out0 := *abi.ConvertType(out[0], new(GovernanceStorageProposal)).(*GovernanceStorageProposal)

	return out0, err

}

// GetProposal is a free data retrieval call binding the contract method 0xc7f758a8.
//
// Solidity: function getProposal(uint256 proposalID_) view returns((bool,address,uint256,uint256))
func (_GovernanceManager *GovernanceManagerSession) GetProposal(proposalID_ *big.Int) (GovernanceStorageProposal, error) {
	return _GovernanceManager.Contract.GetProposal(&_GovernanceManager.CallOpts, proposalID_)
}

// GetProposal is a free data retrieval call binding the contract method 0xc7f758a8.
//
// Solidity: function getProposal(uint256 proposalID_) view returns((bool,address,uint256,uint256))
func (_GovernanceManager *GovernanceManagerCallerSession) GetProposal(proposalID_ *big.Int) (GovernanceStorageProposal, error) {
	return _GovernanceManager.Contract.GetProposal(&_GovernanceManager.CallOpts, proposalID_)
}

// GetStakeTokenAddress is a free data retrieval call binding the contract method 0x8b0441e2.
//
// Solidity: function getStakeTokenAddress() view returns(address)
func (_GovernanceManager *GovernanceManagerCaller) GetStakeTokenAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _GovernanceManager.contract.Call(opts, &out, "getStakeTokenAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetStakeTokenAddress is a free data retrieval call binding the contract method 0x8b0441e2.
//
// Solidity: function getStakeTokenAddress() view returns(address)
func (_GovernanceManager *GovernanceManagerSession) GetStakeTokenAddress() (common.Address, error) {
	return _GovernanceManager.Contract.GetStakeTokenAddress(&_GovernanceManager.CallOpts)
}

// GetStakeTokenAddress is a free data retrieval call binding the contract method 0x8b0441e2.
//
// Solidity: function getStakeTokenAddress() view returns(address)
func (_GovernanceManager *GovernanceManagerCallerSession) GetStakeTokenAddress() (common.Address, error) {
	return _GovernanceManager.Contract.GetStakeTokenAddress(&_GovernanceManager.CallOpts)
}

// IsProposalExecuted is a free data retrieval call binding the contract method 0xd00c1aec.
//
// Solidity: function isProposalExecuted(uint256 proposalID_) view returns(bool)
func (_GovernanceManager *GovernanceManagerCaller) IsProposalExecuted(opts *bind.CallOpts, proposalID_ *big.Int) (bool, error) {
	var out []interface{}
	err := _GovernanceManager.contract.Call(opts, &out, "isProposalExecuted", proposalID_)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsProposalExecuted is a free data retrieval call binding the contract method 0xd00c1aec.
//
// Solidity: function isProposalExecuted(uint256 proposalID_) view returns(bool)
func (_GovernanceManager *GovernanceManagerSession) IsProposalExecuted(proposalID_ *big.Int) (bool, error) {
	return _GovernanceManager.Contract.IsProposalExecuted(&_GovernanceManager.CallOpts, proposalID_)
}

// IsProposalExecuted is a free data retrieval call binding the contract method 0xd00c1aec.
//
// Solidity: function isProposalExecuted(uint256 proposalID_) view returns(bool)
func (_GovernanceManager *GovernanceManagerCallerSession) IsProposalExecuted(proposalID_ *big.Int) (bool, error) {
	return _GovernanceManager.Contract.IsProposalExecuted(&_GovernanceManager.CallOpts, proposalID_)
}

// Execute is a paid mutator transaction binding the contract method 0xfe0d94c1.
//
// Solidity: function execute(uint256 proposalID_) returns()
func (_GovernanceManager *GovernanceManagerTransactor) Execute(opts *bind.TransactOpts, proposalID_ *big.Int) (*types.Transaction, error) {
	return _GovernanceManager.contract.Transact(opts, "execute", proposalID_)
}

// Execute is a paid mutator transaction binding the contract method 0xfe0d94c1.
//
// Solidity: function execute(uint256 proposalID_) returns()
func (_GovernanceManager *GovernanceManagerSession) Execute(proposalID_ *big.Int) (*types.Transaction, error) {
	return _GovernanceManager.Contract.Execute(&_GovernanceManager.TransactOpts, proposalID_)
}

// Execute is a paid mutator transaction binding the contract method 0xfe0d94c1.
//
// Solidity: function execute(uint256 proposalID_) returns()
func (_GovernanceManager *GovernanceManagerTransactorSession) Execute(proposalID_ *big.Int) (*types.Transaction, error) {
	return _GovernanceManager.Contract.Execute(&_GovernanceManager.TransactOpts, proposalID_)
}

// Propose is a paid mutator transaction binding the contract method 0x01267951.
//
// Solidity: function propose(address logic_) returns(uint256 proposalID)
func (_GovernanceManager *GovernanceManagerTransactor) Propose(opts *bind.TransactOpts, logic_ common.Address) (*types.Transaction, error) {
	return _GovernanceManager.contract.Transact(opts, "propose", logic_)
}

// Propose is a paid mutator transaction binding the contract method 0x01267951.
//
// Solidity: function propose(address logic_) returns(uint256 proposalID)
func (_GovernanceManager *GovernanceManagerSession) Propose(logic_ common.Address) (*types.Transaction, error) {
	return _GovernanceManager.Contract.Propose(&_GovernanceManager.TransactOpts, logic_)
}

// Propose is a paid mutator transaction binding the contract method 0x01267951.
//
// Solidity: function propose(address logic_) returns(uint256 proposalID)
func (_GovernanceManager *GovernanceManagerTransactorSession) Propose(logic_ common.Address) (*types.Transaction, error) {
	return _GovernanceManager.Contract.Propose(&_GovernanceManager.TransactOpts, logic_)
}

// VoteAsMiner is a paid mutator transaction binding the contract method 0x85e52ffe.
//
// Solidity: function voteAsMiner(uint256 proposalID_, uint256 tokenID_) returns()
func (_GovernanceManager *GovernanceManagerTransactor) VoteAsMiner(opts *bind.TransactOpts, proposalID_ *big.Int, tokenID_ *big.Int) (*types.Transaction, error) {
	return _GovernanceManager.contract.Transact(opts, "voteAsMiner", proposalID_, tokenID_)
}

// VoteAsMiner is a paid mutator transaction binding the contract method 0x85e52ffe.
//
// Solidity: function voteAsMiner(uint256 proposalID_, uint256 tokenID_) returns()
func (_GovernanceManager *GovernanceManagerSession) VoteAsMiner(proposalID_ *big.Int, tokenID_ *big.Int) (*types.Transaction, error) {
	return _GovernanceManager.Contract.VoteAsMiner(&_GovernanceManager.TransactOpts, proposalID_, tokenID_)
}

// VoteAsMiner is a paid mutator transaction binding the contract method 0x85e52ffe.
//
// Solidity: function voteAsMiner(uint256 proposalID_, uint256 tokenID_) returns()
func (_GovernanceManager *GovernanceManagerTransactorSession) VoteAsMiner(proposalID_ *big.Int, tokenID_ *big.Int) (*types.Transaction, error) {
	return _GovernanceManager.Contract.VoteAsMiner(&_GovernanceManager.TransactOpts, proposalID_, tokenID_)
}

// VoteAsStaker is a paid mutator transaction binding the contract method 0xa35d4633.
//
// Solidity: function voteAsStaker(uint256 proposalID_, uint256 tokenID_) returns()
func (_GovernanceManager *GovernanceManagerTransactor) VoteAsStaker(opts *bind.TransactOpts, proposalID_ *big.Int, tokenID_ *big.Int) (*types.Transaction, error) {
	return _GovernanceManager.contract.Transact(opts, "voteAsStaker", proposalID_, tokenID_)
}

// VoteAsStaker is a paid mutator transaction binding the contract method 0xa35d4633.
//
// Solidity: function voteAsStaker(uint256 proposalID_, uint256 tokenID_) returns()
func (_GovernanceManager *GovernanceManagerSession) VoteAsStaker(proposalID_ *big.Int, tokenID_ *big.Int) (*types.Transaction, error) {
	return _GovernanceManager.Contract.VoteAsStaker(&_GovernanceManager.TransactOpts, proposalID_, tokenID_)
}

// VoteAsStaker is a paid mutator transaction binding the contract method 0xa35d4633.
//
// Solidity: function voteAsStaker(uint256 proposalID_, uint256 tokenID_) returns()
func (_GovernanceManager *GovernanceManagerTransactorSession) VoteAsStaker(proposalID_ *big.Int, tokenID_ *big.Int) (*types.Transaction, error) {
	return _GovernanceManager.Contract.VoteAsStaker(&_GovernanceManager.TransactOpts, proposalID_, tokenID_)
}

// GovernanceMaxLockMetaData contains all meta data concerning the GovernanceMaxLock contract.
var GovernanceMaxLockMetaData = &bind.MetaData{
	ABI: "[]",
}

// GovernanceMaxLockABI is the input ABI used to generate the binding from.
// Deprecated: Use GovernanceMaxLockMetaData.ABI instead.
var GovernanceMaxLockABI = GovernanceMaxLockMetaData.ABI

// GovernanceMaxLock is an auto generated Go binding around an Ethereum contract.
type GovernanceMaxLock struct {
	GovernanceMaxLockCaller     // Read-only binding to the contract
	GovernanceMaxLockTransactor // Write-only binding to the contract
	GovernanceMaxLockFilterer   // Log filterer for contract events
}

// GovernanceMaxLockCaller is an auto generated read-only Go binding around an Ethereum contract.
type GovernanceMaxLockCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovernanceMaxLockTransactor is an auto generated write-only Go binding around an Ethereum contract.
type GovernanceMaxLockTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovernanceMaxLockFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type GovernanceMaxLockFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovernanceMaxLockSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type GovernanceMaxLockSession struct {
	Contract     *GovernanceMaxLock // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// GovernanceMaxLockCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type GovernanceMaxLockCallerSession struct {
	Contract *GovernanceMaxLockCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// GovernanceMaxLockTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type GovernanceMaxLockTransactorSession struct {
	Contract     *GovernanceMaxLockTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// GovernanceMaxLockRaw is an auto generated low-level Go binding around an Ethereum contract.
type GovernanceMaxLockRaw struct {
	Contract *GovernanceMaxLock // Generic contract binding to access the raw methods on
}

// GovernanceMaxLockCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type GovernanceMaxLockCallerRaw struct {
	Contract *GovernanceMaxLockCaller // Generic read-only contract binding to access the raw methods on
}

// GovernanceMaxLockTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type GovernanceMaxLockTransactorRaw struct {
	Contract *GovernanceMaxLockTransactor // Generic write-only contract binding to access the raw methods on
}

// NewGovernanceMaxLock creates a new instance of GovernanceMaxLock, bound to a specific deployed contract.
func NewGovernanceMaxLock(address common.Address, backend bind.ContractBackend) (*GovernanceMaxLock, error) {
	contract, err := bindGovernanceMaxLock(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &GovernanceMaxLock{GovernanceMaxLockCaller: GovernanceMaxLockCaller{contract: contract}, GovernanceMaxLockTransactor: GovernanceMaxLockTransactor{contract: contract}, GovernanceMaxLockFilterer: GovernanceMaxLockFilterer{contract: contract}}, nil
}

// NewGovernanceMaxLockCaller creates a new read-only instance of GovernanceMaxLock, bound to a specific deployed contract.
func NewGovernanceMaxLockCaller(address common.Address, caller bind.ContractCaller) (*GovernanceMaxLockCaller, error) {
	contract, err := bindGovernanceMaxLock(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &GovernanceMaxLockCaller{contract: contract}, nil
}

// NewGovernanceMaxLockTransactor creates a new write-only instance of GovernanceMaxLock, bound to a specific deployed contract.
func NewGovernanceMaxLockTransactor(address common.Address, transactor bind.ContractTransactor) (*GovernanceMaxLockTransactor, error) {
	contract, err := bindGovernanceMaxLock(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &GovernanceMaxLockTransactor{contract: contract}, nil
}

// NewGovernanceMaxLockFilterer creates a new log filterer instance of GovernanceMaxLock, bound to a specific deployed contract.
func NewGovernanceMaxLockFilterer(address common.Address, filterer bind.ContractFilterer) (*GovernanceMaxLockFilterer, error) {
	contract, err := bindGovernanceMaxLock(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &GovernanceMaxLockFilterer{contract: contract}, nil
}

// bindGovernanceMaxLock binds a generic wrapper to an already deployed contract.
func bindGovernanceMaxLock(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(GovernanceMaxLockABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_GovernanceMaxLock *GovernanceMaxLockRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _GovernanceMaxLock.Contract.GovernanceMaxLockCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_GovernanceMaxLock *GovernanceMaxLockRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GovernanceMaxLock.Contract.GovernanceMaxLockTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_GovernanceMaxLock *GovernanceMaxLockRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _GovernanceMaxLock.Contract.GovernanceMaxLockTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_GovernanceMaxLock *GovernanceMaxLockCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _GovernanceMaxLock.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_GovernanceMaxLock *GovernanceMaxLockTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GovernanceMaxLock.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_GovernanceMaxLock *GovernanceMaxLockTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _GovernanceMaxLock.Contract.contract.Transact(opts, method, params...)
}

// GovernanceProposalMetaData contains all meta data concerning the GovernanceProposal contract.
var GovernanceProposalMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"allowedProposal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callback\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"self\",\"type\":\"address\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// GovernanceProposalABI is the input ABI used to generate the binding from.
// Deprecated: Use GovernanceProposalMetaData.ABI instead.
var GovernanceProposalABI = GovernanceProposalMetaData.ABI

// GovernanceProposal is an auto generated Go binding around an Ethereum contract.
type GovernanceProposal struct {
	GovernanceProposalCaller     // Read-only binding to the contract
	GovernanceProposalTransactor // Write-only binding to the contract
	GovernanceProposalFilterer   // Log filterer for contract events
}

// GovernanceProposalCaller is an auto generated read-only Go binding around an Ethereum contract.
type GovernanceProposalCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovernanceProposalTransactor is an auto generated write-only Go binding around an Ethereum contract.
type GovernanceProposalTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovernanceProposalFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type GovernanceProposalFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovernanceProposalSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type GovernanceProposalSession struct {
	Contract     *GovernanceProposal // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// GovernanceProposalCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type GovernanceProposalCallerSession struct {
	Contract *GovernanceProposalCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// GovernanceProposalTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type GovernanceProposalTransactorSession struct {
	Contract     *GovernanceProposalTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// GovernanceProposalRaw is an auto generated low-level Go binding around an Ethereum contract.
type GovernanceProposalRaw struct {
	Contract *GovernanceProposal // Generic contract binding to access the raw methods on
}

// GovernanceProposalCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type GovernanceProposalCallerRaw struct {
	Contract *GovernanceProposalCaller // Generic read-only contract binding to access the raw methods on
}

// GovernanceProposalTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type GovernanceProposalTransactorRaw struct {
	Contract *GovernanceProposalTransactor // Generic write-only contract binding to access the raw methods on
}

// NewGovernanceProposal creates a new instance of GovernanceProposal, bound to a specific deployed contract.
func NewGovernanceProposal(address common.Address, backend bind.ContractBackend) (*GovernanceProposal, error) {
	contract, err := bindGovernanceProposal(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &GovernanceProposal{GovernanceProposalCaller: GovernanceProposalCaller{contract: contract}, GovernanceProposalTransactor: GovernanceProposalTransactor{contract: contract}, GovernanceProposalFilterer: GovernanceProposalFilterer{contract: contract}}, nil
}

// NewGovernanceProposalCaller creates a new read-only instance of GovernanceProposal, bound to a specific deployed contract.
func NewGovernanceProposalCaller(address common.Address, caller bind.ContractCaller) (*GovernanceProposalCaller, error) {
	contract, err := bindGovernanceProposal(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &GovernanceProposalCaller{contract: contract}, nil
}

// NewGovernanceProposalTransactor creates a new write-only instance of GovernanceProposal, bound to a specific deployed contract.
func NewGovernanceProposalTransactor(address common.Address, transactor bind.ContractTransactor) (*GovernanceProposalTransactor, error) {
	contract, err := bindGovernanceProposal(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &GovernanceProposalTransactor{contract: contract}, nil
}

// NewGovernanceProposalFilterer creates a new log filterer instance of GovernanceProposal, bound to a specific deployed contract.
func NewGovernanceProposalFilterer(address common.Address, filterer bind.ContractFilterer) (*GovernanceProposalFilterer, error) {
	contract, err := bindGovernanceProposal(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &GovernanceProposalFilterer{contract: contract}, nil
}

// bindGovernanceProposal binds a generic wrapper to an already deployed contract.
func bindGovernanceProposal(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(GovernanceProposalABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_GovernanceProposal *GovernanceProposalRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _GovernanceProposal.Contract.GovernanceProposalCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_GovernanceProposal *GovernanceProposalRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GovernanceProposal.Contract.GovernanceProposalTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_GovernanceProposal *GovernanceProposalRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _GovernanceProposal.Contract.GovernanceProposalTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_GovernanceProposal *GovernanceProposalCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _GovernanceProposal.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_GovernanceProposal *GovernanceProposalTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GovernanceProposal.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_GovernanceProposal *GovernanceProposalTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _GovernanceProposal.Contract.contract.Transact(opts, method, params...)
}

// AllowedProposal is a free data retrieval call binding the contract method 0xf4f58000.
//
// Solidity: function allowedProposal() view returns(address)
func (_GovernanceProposal *GovernanceProposalCaller) AllowedProposal(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _GovernanceProposal.contract.Call(opts, &out, "allowedProposal")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AllowedProposal is a free data retrieval call binding the contract method 0xf4f58000.
//
// Solidity: function allowedProposal() view returns(address)
func (_GovernanceProposal *GovernanceProposalSession) AllowedProposal() (common.Address, error) {
	return _GovernanceProposal.Contract.AllowedProposal(&_GovernanceProposal.CallOpts)
}

// AllowedProposal is a free data retrieval call binding the contract method 0xf4f58000.
//
// Solidity: function allowedProposal() view returns(address)
func (_GovernanceProposal *GovernanceProposalCallerSession) AllowedProposal() (common.Address, error) {
	return _GovernanceProposal.Contract.AllowedProposal(&_GovernanceProposal.CallOpts)
}

// Callback is a paid mutator transaction binding the contract method 0x083b2732.
//
// Solidity: function callback() returns(bool)
func (_GovernanceProposal *GovernanceProposalTransactor) Callback(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GovernanceProposal.contract.Transact(opts, "callback")
}

// Callback is a paid mutator transaction binding the contract method 0x083b2732.
//
// Solidity: function callback() returns(bool)
func (_GovernanceProposal *GovernanceProposalSession) Callback() (*types.Transaction, error) {
	return _GovernanceProposal.Contract.Callback(&_GovernanceProposal.TransactOpts)
}

// Callback is a paid mutator transaction binding the contract method 0x083b2732.
//
// Solidity: function callback() returns(bool)
func (_GovernanceProposal *GovernanceProposalTransactorSession) Callback() (*types.Transaction, error) {
	return _GovernanceProposal.Contract.Callback(&_GovernanceProposal.TransactOpts)
}

// Execute is a paid mutator transaction binding the contract method 0x4b64e492.
//
// Solidity: function execute(address self) returns(bool)
func (_GovernanceProposal *GovernanceProposalTransactor) Execute(opts *bind.TransactOpts, self common.Address) (*types.Transaction, error) {
	return _GovernanceProposal.contract.Transact(opts, "execute", self)
}

// Execute is a paid mutator transaction binding the contract method 0x4b64e492.
//
// Solidity: function execute(address self) returns(bool)
func (_GovernanceProposal *GovernanceProposalSession) Execute(self common.Address) (*types.Transaction, error) {
	return _GovernanceProposal.Contract.Execute(&_GovernanceProposal.TransactOpts, self)
}

// Execute is a paid mutator transaction binding the contract method 0x4b64e492.
//
// Solidity: function execute(address self) returns(bool)
func (_GovernanceProposal *GovernanceProposalTransactorSession) Execute(self common.Address) (*types.Transaction, error) {
	return _GovernanceProposal.Contract.Execute(&_GovernanceProposal.TransactOpts, self)
}

// GovernanceProposeEvictValidatorsMetaData contains all meta data concerning the GovernanceProposeEvictValidators contract.
var GovernanceProposeEvictValidatorsMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"allowedProposal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callback\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"self\",\"type\":\"address\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040526000805534801561001457600080fd5b50610486806100246000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063083b2732146100465780634b64e49214610064578063f4f5800014610094575b600080fd5b61004e6100b2565b60405161005b9190610312565b60405180910390f35b61007e60048036038101906100799190610241565b6100bb565b60405161008b9190610312565b60405180910390f35b61009c610206565b6040516100a991906102f7565b60405180910390f35b60006001905090565b6000806000905060008173ffffffffffffffffffffffffffffffffffffffff16846040516024016100ec91906102f7565b6040516020818303038152906040527f7f466ae3000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161017691906102e0565b6000604051808303816000865af19150503d80600081146101b3576040519150601f19603f3d011682016040523d82523d6000602084013e6101b8565b606091505b50509050806101fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101f39061032d565b60405180910390fd5b8092505050919050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008135905061023b81610439565b92915050565b600060208284031215610257576102566103e5565b5b60006102658482850161022c565b91505092915050565b61027781610374565b82525050565b61028681610386565b82525050565b60006102978261034d565b6102a18185610358565b93506102b18185602086016103b2565b80840191505092915050565b60006102ca602d83610363565b91506102d5826103ea565b604082019050919050565b60006102ec828461028c565b915081905092915050565b600060208201905061030c600083018461026e565b92915050565b6000602082019050610327600083018461027d565b92915050565b60006020820190508181036000830152610346816102bd565b9050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600061037f82610392565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60005b838110156103d05780820151818401526020810190506103b5565b838111156103df576000848401525b50505050565b600080fd5b7f476f7665726e616e636550726f706f73654d6f64696679536e617073686f743a60008201527f2043414c4c204641494c45442100000000000000000000000000000000000000602082015250565b61044281610374565b811461044d57600080fd5b5056fea2646970667358221220e98850ad501b0ddc4d901e0ea117904ff066edeca0cbf8b8a8cf22588b5275b264736f6c63430008060033",
}

// GovernanceProposeEvictValidatorsABI is the input ABI used to generate the binding from.
// Deprecated: Use GovernanceProposeEvictValidatorsMetaData.ABI instead.
var GovernanceProposeEvictValidatorsABI = GovernanceProposeEvictValidatorsMetaData.ABI

// GovernanceProposeEvictValidatorsBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use GovernanceProposeEvictValidatorsMetaData.Bin instead.
var GovernanceProposeEvictValidatorsBin = GovernanceProposeEvictValidatorsMetaData.Bin

// DeployGovernanceProposeEvictValidators deploys a new Ethereum contract, binding an instance of GovernanceProposeEvictValidators to it.
func DeployGovernanceProposeEvictValidators(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *GovernanceProposeEvictValidators, error) {
	parsed, err := GovernanceProposeEvictValidatorsMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(GovernanceProposeEvictValidatorsBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &GovernanceProposeEvictValidators{GovernanceProposeEvictValidatorsCaller: GovernanceProposeEvictValidatorsCaller{contract: contract}, GovernanceProposeEvictValidatorsTransactor: GovernanceProposeEvictValidatorsTransactor{contract: contract}, GovernanceProposeEvictValidatorsFilterer: GovernanceProposeEvictValidatorsFilterer{contract: contract}}, nil
}

// GovernanceProposeEvictValidators is an auto generated Go binding around an Ethereum contract.
type GovernanceProposeEvictValidators struct {
	GovernanceProposeEvictValidatorsCaller     // Read-only binding to the contract
	GovernanceProposeEvictValidatorsTransactor // Write-only binding to the contract
	GovernanceProposeEvictValidatorsFilterer   // Log filterer for contract events
}

// GovernanceProposeEvictValidatorsCaller is an auto generated read-only Go binding around an Ethereum contract.
type GovernanceProposeEvictValidatorsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovernanceProposeEvictValidatorsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type GovernanceProposeEvictValidatorsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovernanceProposeEvictValidatorsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type GovernanceProposeEvictValidatorsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovernanceProposeEvictValidatorsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type GovernanceProposeEvictValidatorsSession struct {
	Contract     *GovernanceProposeEvictValidators // Generic contract binding to set the session for
	CallOpts     bind.CallOpts                     // Call options to use throughout this session
	TransactOpts bind.TransactOpts                 // Transaction auth options to use throughout this session
}

// GovernanceProposeEvictValidatorsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type GovernanceProposeEvictValidatorsCallerSession struct {
	Contract *GovernanceProposeEvictValidatorsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                           // Call options to use throughout this session
}

// GovernanceProposeEvictValidatorsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type GovernanceProposeEvictValidatorsTransactorSession struct {
	Contract     *GovernanceProposeEvictValidatorsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                           // Transaction auth options to use throughout this session
}

// GovernanceProposeEvictValidatorsRaw is an auto generated low-level Go binding around an Ethereum contract.
type GovernanceProposeEvictValidatorsRaw struct {
	Contract *GovernanceProposeEvictValidators // Generic contract binding to access the raw methods on
}

// GovernanceProposeEvictValidatorsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type GovernanceProposeEvictValidatorsCallerRaw struct {
	Contract *GovernanceProposeEvictValidatorsCaller // Generic read-only contract binding to access the raw methods on
}

// GovernanceProposeEvictValidatorsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type GovernanceProposeEvictValidatorsTransactorRaw struct {
	Contract *GovernanceProposeEvictValidatorsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewGovernanceProposeEvictValidators creates a new instance of GovernanceProposeEvictValidators, bound to a specific deployed contract.
func NewGovernanceProposeEvictValidators(address common.Address, backend bind.ContractBackend) (*GovernanceProposeEvictValidators, error) {
	contract, err := bindGovernanceProposeEvictValidators(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &GovernanceProposeEvictValidators{GovernanceProposeEvictValidatorsCaller: GovernanceProposeEvictValidatorsCaller{contract: contract}, GovernanceProposeEvictValidatorsTransactor: GovernanceProposeEvictValidatorsTransactor{contract: contract}, GovernanceProposeEvictValidatorsFilterer: GovernanceProposeEvictValidatorsFilterer{contract: contract}}, nil
}

// NewGovernanceProposeEvictValidatorsCaller creates a new read-only instance of GovernanceProposeEvictValidators, bound to a specific deployed contract.
func NewGovernanceProposeEvictValidatorsCaller(address common.Address, caller bind.ContractCaller) (*GovernanceProposeEvictValidatorsCaller, error) {
	contract, err := bindGovernanceProposeEvictValidators(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &GovernanceProposeEvictValidatorsCaller{contract: contract}, nil
}

// NewGovernanceProposeEvictValidatorsTransactor creates a new write-only instance of GovernanceProposeEvictValidators, bound to a specific deployed contract.
func NewGovernanceProposeEvictValidatorsTransactor(address common.Address, transactor bind.ContractTransactor) (*GovernanceProposeEvictValidatorsTransactor, error) {
	contract, err := bindGovernanceProposeEvictValidators(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &GovernanceProposeEvictValidatorsTransactor{contract: contract}, nil
}

// NewGovernanceProposeEvictValidatorsFilterer creates a new log filterer instance of GovernanceProposeEvictValidators, bound to a specific deployed contract.
func NewGovernanceProposeEvictValidatorsFilterer(address common.Address, filterer bind.ContractFilterer) (*GovernanceProposeEvictValidatorsFilterer, error) {
	contract, err := bindGovernanceProposeEvictValidators(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &GovernanceProposeEvictValidatorsFilterer{contract: contract}, nil
}

// bindGovernanceProposeEvictValidators binds a generic wrapper to an already deployed contract.
func bindGovernanceProposeEvictValidators(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(GovernanceProposeEvictValidatorsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_GovernanceProposeEvictValidators *GovernanceProposeEvictValidatorsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _GovernanceProposeEvictValidators.Contract.GovernanceProposeEvictValidatorsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_GovernanceProposeEvictValidators *GovernanceProposeEvictValidatorsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GovernanceProposeEvictValidators.Contract.GovernanceProposeEvictValidatorsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_GovernanceProposeEvictValidators *GovernanceProposeEvictValidatorsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _GovernanceProposeEvictValidators.Contract.GovernanceProposeEvictValidatorsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_GovernanceProposeEvictValidators *GovernanceProposeEvictValidatorsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _GovernanceProposeEvictValidators.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_GovernanceProposeEvictValidators *GovernanceProposeEvictValidatorsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GovernanceProposeEvictValidators.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_GovernanceProposeEvictValidators *GovernanceProposeEvictValidatorsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _GovernanceProposeEvictValidators.Contract.contract.Transact(opts, method, params...)
}

// AllowedProposal is a free data retrieval call binding the contract method 0xf4f58000.
//
// Solidity: function allowedProposal() view returns(address)
func (_GovernanceProposeEvictValidators *GovernanceProposeEvictValidatorsCaller) AllowedProposal(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _GovernanceProposeEvictValidators.contract.Call(opts, &out, "allowedProposal")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AllowedProposal is a free data retrieval call binding the contract method 0xf4f58000.
//
// Solidity: function allowedProposal() view returns(address)
func (_GovernanceProposeEvictValidators *GovernanceProposeEvictValidatorsSession) AllowedProposal() (common.Address, error) {
	return _GovernanceProposeEvictValidators.Contract.AllowedProposal(&_GovernanceProposeEvictValidators.CallOpts)
}

// AllowedProposal is a free data retrieval call binding the contract method 0xf4f58000.
//
// Solidity: function allowedProposal() view returns(address)
func (_GovernanceProposeEvictValidators *GovernanceProposeEvictValidatorsCallerSession) AllowedProposal() (common.Address, error) {
	return _GovernanceProposeEvictValidators.Contract.AllowedProposal(&_GovernanceProposeEvictValidators.CallOpts)
}

// Callback is a paid mutator transaction binding the contract method 0x083b2732.
//
// Solidity: function callback() returns(bool)
func (_GovernanceProposeEvictValidators *GovernanceProposeEvictValidatorsTransactor) Callback(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GovernanceProposeEvictValidators.contract.Transact(opts, "callback")
}

// Callback is a paid mutator transaction binding the contract method 0x083b2732.
//
// Solidity: function callback() returns(bool)
func (_GovernanceProposeEvictValidators *GovernanceProposeEvictValidatorsSession) Callback() (*types.Transaction, error) {
	return _GovernanceProposeEvictValidators.Contract.Callback(&_GovernanceProposeEvictValidators.TransactOpts)
}

// Callback is a paid mutator transaction binding the contract method 0x083b2732.
//
// Solidity: function callback() returns(bool)
func (_GovernanceProposeEvictValidators *GovernanceProposeEvictValidatorsTransactorSession) Callback() (*types.Transaction, error) {
	return _GovernanceProposeEvictValidators.Contract.Callback(&_GovernanceProposeEvictValidators.TransactOpts)
}

// Execute is a paid mutator transaction binding the contract method 0x4b64e492.
//
// Solidity: function execute(address self) returns(bool)
func (_GovernanceProposeEvictValidators *GovernanceProposeEvictValidatorsTransactor) Execute(opts *bind.TransactOpts, self common.Address) (*types.Transaction, error) {
	return _GovernanceProposeEvictValidators.contract.Transact(opts, "execute", self)
}

// Execute is a paid mutator transaction binding the contract method 0x4b64e492.
//
// Solidity: function execute(address self) returns(bool)
func (_GovernanceProposeEvictValidators *GovernanceProposeEvictValidatorsSession) Execute(self common.Address) (*types.Transaction, error) {
	return _GovernanceProposeEvictValidators.Contract.Execute(&_GovernanceProposeEvictValidators.TransactOpts, self)
}

// Execute is a paid mutator transaction binding the contract method 0x4b64e492.
//
// Solidity: function execute(address self) returns(bool)
func (_GovernanceProposeEvictValidators *GovernanceProposeEvictValidatorsTransactorSession) Execute(self common.Address) (*types.Transaction, error) {
	return _GovernanceProposeEvictValidators.Contract.Execute(&_GovernanceProposeEvictValidators.TransactOpts, self)
}

// GovernanceProposeModifySnapshotMetaData contains all meta data concerning the GovernanceProposeModifySnapshot contract.
var GovernanceProposeModifySnapshotMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"allowedProposal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callback\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"self\",\"type\":\"address\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040526000805534801561001457600080fd5b50610486806100246000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063083b2732146100465780634b64e49214610064578063f4f5800014610094575b600080fd5b61004e6100b2565b60405161005b9190610312565b60405180910390f35b61007e60048036038101906100799190610241565b6100bb565b60405161008b9190610312565b60405180910390f35b61009c610206565b6040516100a991906102f7565b60405180910390f35b60006001905090565b6000806000905060008173ffffffffffffffffffffffffffffffffffffffff16846040516024016100ec91906102f7565b6040516020818303038152906040527f7f466ae3000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161017691906102e0565b6000604051808303816000865af19150503d80600081146101b3576040519150601f19603f3d011682016040523d82523d6000602084013e6101b8565b606091505b50509050806101fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101f39061032d565b60405180910390fd5b8092505050919050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008135905061023b81610439565b92915050565b600060208284031215610257576102566103e5565b5b60006102658482850161022c565b91505092915050565b61027781610374565b82525050565b61028681610386565b82525050565b60006102978261034d565b6102a18185610358565b93506102b18185602086016103b2565b80840191505092915050565b60006102ca602d83610363565b91506102d5826103ea565b604082019050919050565b60006102ec828461028c565b915081905092915050565b600060208201905061030c600083018461026e565b92915050565b6000602082019050610327600083018461027d565b92915050565b60006020820190508181036000830152610346816102bd565b9050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600061037f82610392565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60005b838110156103d05780820151818401526020810190506103b5565b838111156103df576000848401525b50505050565b600080fd5b7f476f7665726e616e636550726f706f73654d6f64696679536e617073686f743a60008201527f2043414c4c204641494c45442100000000000000000000000000000000000000602082015250565b61044281610374565b811461044d57600080fd5b5056fea264697066735822122028a2eb8c14f82169308ef8597027cf867f8bbdabe4f71deedf8c35949fd8b85e64736f6c63430008060033",
}

// GovernanceProposeModifySnapshotABI is the input ABI used to generate the binding from.
// Deprecated: Use GovernanceProposeModifySnapshotMetaData.ABI instead.
var GovernanceProposeModifySnapshotABI = GovernanceProposeModifySnapshotMetaData.ABI

// GovernanceProposeModifySnapshotBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use GovernanceProposeModifySnapshotMetaData.Bin instead.
var GovernanceProposeModifySnapshotBin = GovernanceProposeModifySnapshotMetaData.Bin

// DeployGovernanceProposeModifySnapshot deploys a new Ethereum contract, binding an instance of GovernanceProposeModifySnapshot to it.
func DeployGovernanceProposeModifySnapshot(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *GovernanceProposeModifySnapshot, error) {
	parsed, err := GovernanceProposeModifySnapshotMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(GovernanceProposeModifySnapshotBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &GovernanceProposeModifySnapshot{GovernanceProposeModifySnapshotCaller: GovernanceProposeModifySnapshotCaller{contract: contract}, GovernanceProposeModifySnapshotTransactor: GovernanceProposeModifySnapshotTransactor{contract: contract}, GovernanceProposeModifySnapshotFilterer: GovernanceProposeModifySnapshotFilterer{contract: contract}}, nil
}

// GovernanceProposeModifySnapshot is an auto generated Go binding around an Ethereum contract.
type GovernanceProposeModifySnapshot struct {
	GovernanceProposeModifySnapshotCaller     // Read-only binding to the contract
	GovernanceProposeModifySnapshotTransactor // Write-only binding to the contract
	GovernanceProposeModifySnapshotFilterer   // Log filterer for contract events
}

// GovernanceProposeModifySnapshotCaller is an auto generated read-only Go binding around an Ethereum contract.
type GovernanceProposeModifySnapshotCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovernanceProposeModifySnapshotTransactor is an auto generated write-only Go binding around an Ethereum contract.
type GovernanceProposeModifySnapshotTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovernanceProposeModifySnapshotFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type GovernanceProposeModifySnapshotFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovernanceProposeModifySnapshotSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type GovernanceProposeModifySnapshotSession struct {
	Contract     *GovernanceProposeModifySnapshot // Generic contract binding to set the session for
	CallOpts     bind.CallOpts                    // Call options to use throughout this session
	TransactOpts bind.TransactOpts                // Transaction auth options to use throughout this session
}

// GovernanceProposeModifySnapshotCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type GovernanceProposeModifySnapshotCallerSession struct {
	Contract *GovernanceProposeModifySnapshotCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                          // Call options to use throughout this session
}

// GovernanceProposeModifySnapshotTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type GovernanceProposeModifySnapshotTransactorSession struct {
	Contract     *GovernanceProposeModifySnapshotTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                          // Transaction auth options to use throughout this session
}

// GovernanceProposeModifySnapshotRaw is an auto generated low-level Go binding around an Ethereum contract.
type GovernanceProposeModifySnapshotRaw struct {
	Contract *GovernanceProposeModifySnapshot // Generic contract binding to access the raw methods on
}

// GovernanceProposeModifySnapshotCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type GovernanceProposeModifySnapshotCallerRaw struct {
	Contract *GovernanceProposeModifySnapshotCaller // Generic read-only contract binding to access the raw methods on
}

// GovernanceProposeModifySnapshotTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type GovernanceProposeModifySnapshotTransactorRaw struct {
	Contract *GovernanceProposeModifySnapshotTransactor // Generic write-only contract binding to access the raw methods on
}

// NewGovernanceProposeModifySnapshot creates a new instance of GovernanceProposeModifySnapshot, bound to a specific deployed contract.
func NewGovernanceProposeModifySnapshot(address common.Address, backend bind.ContractBackend) (*GovernanceProposeModifySnapshot, error) {
	contract, err := bindGovernanceProposeModifySnapshot(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &GovernanceProposeModifySnapshot{GovernanceProposeModifySnapshotCaller: GovernanceProposeModifySnapshotCaller{contract: contract}, GovernanceProposeModifySnapshotTransactor: GovernanceProposeModifySnapshotTransactor{contract: contract}, GovernanceProposeModifySnapshotFilterer: GovernanceProposeModifySnapshotFilterer{contract: contract}}, nil
}

// NewGovernanceProposeModifySnapshotCaller creates a new read-only instance of GovernanceProposeModifySnapshot, bound to a specific deployed contract.
func NewGovernanceProposeModifySnapshotCaller(address common.Address, caller bind.ContractCaller) (*GovernanceProposeModifySnapshotCaller, error) {
	contract, err := bindGovernanceProposeModifySnapshot(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &GovernanceProposeModifySnapshotCaller{contract: contract}, nil
}

// NewGovernanceProposeModifySnapshotTransactor creates a new write-only instance of GovernanceProposeModifySnapshot, bound to a specific deployed contract.
func NewGovernanceProposeModifySnapshotTransactor(address common.Address, transactor bind.ContractTransactor) (*GovernanceProposeModifySnapshotTransactor, error) {
	contract, err := bindGovernanceProposeModifySnapshot(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &GovernanceProposeModifySnapshotTransactor{contract: contract}, nil
}

// NewGovernanceProposeModifySnapshotFilterer creates a new log filterer instance of GovernanceProposeModifySnapshot, bound to a specific deployed contract.
func NewGovernanceProposeModifySnapshotFilterer(address common.Address, filterer bind.ContractFilterer) (*GovernanceProposeModifySnapshotFilterer, error) {
	contract, err := bindGovernanceProposeModifySnapshot(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &GovernanceProposeModifySnapshotFilterer{contract: contract}, nil
}

// bindGovernanceProposeModifySnapshot binds a generic wrapper to an already deployed contract.
func bindGovernanceProposeModifySnapshot(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(GovernanceProposeModifySnapshotABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_GovernanceProposeModifySnapshot *GovernanceProposeModifySnapshotRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _GovernanceProposeModifySnapshot.Contract.GovernanceProposeModifySnapshotCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_GovernanceProposeModifySnapshot *GovernanceProposeModifySnapshotRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GovernanceProposeModifySnapshot.Contract.GovernanceProposeModifySnapshotTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_GovernanceProposeModifySnapshot *GovernanceProposeModifySnapshotRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _GovernanceProposeModifySnapshot.Contract.GovernanceProposeModifySnapshotTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_GovernanceProposeModifySnapshot *GovernanceProposeModifySnapshotCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _GovernanceProposeModifySnapshot.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_GovernanceProposeModifySnapshot *GovernanceProposeModifySnapshotTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GovernanceProposeModifySnapshot.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_GovernanceProposeModifySnapshot *GovernanceProposeModifySnapshotTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _GovernanceProposeModifySnapshot.Contract.contract.Transact(opts, method, params...)
}

// AllowedProposal is a free data retrieval call binding the contract method 0xf4f58000.
//
// Solidity: function allowedProposal() view returns(address)
func (_GovernanceProposeModifySnapshot *GovernanceProposeModifySnapshotCaller) AllowedProposal(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _GovernanceProposeModifySnapshot.contract.Call(opts, &out, "allowedProposal")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AllowedProposal is a free data retrieval call binding the contract method 0xf4f58000.
//
// Solidity: function allowedProposal() view returns(address)
func (_GovernanceProposeModifySnapshot *GovernanceProposeModifySnapshotSession) AllowedProposal() (common.Address, error) {
	return _GovernanceProposeModifySnapshot.Contract.AllowedProposal(&_GovernanceProposeModifySnapshot.CallOpts)
}

// AllowedProposal is a free data retrieval call binding the contract method 0xf4f58000.
//
// Solidity: function allowedProposal() view returns(address)
func (_GovernanceProposeModifySnapshot *GovernanceProposeModifySnapshotCallerSession) AllowedProposal() (common.Address, error) {
	return _GovernanceProposeModifySnapshot.Contract.AllowedProposal(&_GovernanceProposeModifySnapshot.CallOpts)
}

// Callback is a paid mutator transaction binding the contract method 0x083b2732.
//
// Solidity: function callback() returns(bool)
func (_GovernanceProposeModifySnapshot *GovernanceProposeModifySnapshotTransactor) Callback(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GovernanceProposeModifySnapshot.contract.Transact(opts, "callback")
}

// Callback is a paid mutator transaction binding the contract method 0x083b2732.
//
// Solidity: function callback() returns(bool)
func (_GovernanceProposeModifySnapshot *GovernanceProposeModifySnapshotSession) Callback() (*types.Transaction, error) {
	return _GovernanceProposeModifySnapshot.Contract.Callback(&_GovernanceProposeModifySnapshot.TransactOpts)
}

// Callback is a paid mutator transaction binding the contract method 0x083b2732.
//
// Solidity: function callback() returns(bool)
func (_GovernanceProposeModifySnapshot *GovernanceProposeModifySnapshotTransactorSession) Callback() (*types.Transaction, error) {
	return _GovernanceProposeModifySnapshot.Contract.Callback(&_GovernanceProposeModifySnapshot.TransactOpts)
}

// Execute is a paid mutator transaction binding the contract method 0x4b64e492.
//
// Solidity: function execute(address self) returns(bool)
func (_GovernanceProposeModifySnapshot *GovernanceProposeModifySnapshotTransactor) Execute(opts *bind.TransactOpts, self common.Address) (*types.Transaction, error) {
	return _GovernanceProposeModifySnapshot.contract.Transact(opts, "execute", self)
}

// Execute is a paid mutator transaction binding the contract method 0x4b64e492.
//
// Solidity: function execute(address self) returns(bool)
func (_GovernanceProposeModifySnapshot *GovernanceProposeModifySnapshotSession) Execute(self common.Address) (*types.Transaction, error) {
	return _GovernanceProposeModifySnapshot.Contract.Execute(&_GovernanceProposeModifySnapshot.TransactOpts, self)
}

// Execute is a paid mutator transaction binding the contract method 0x4b64e492.
//
// Solidity: function execute(address self) returns(bool)
func (_GovernanceProposeModifySnapshot *GovernanceProposeModifySnapshotTransactorSession) Execute(self common.Address) (*types.Transaction, error) {
	return _GovernanceProposeModifySnapshot.Contract.Execute(&_GovernanceProposeModifySnapshot.TransactOpts, self)
}

// GovernanceProposeRestartETHDKGMetaData contains all meta data concerning the GovernanceProposeRestartETHDKG contract.
var GovernanceProposeRestartETHDKGMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"allowedProposal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callback\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"self\",\"type\":\"address\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040526000805534801561001457600080fd5b50610c18806100246000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063083b2732146100465780634b64e49214610064578063f4f5800014610094575b600080fd5b61004e6100b2565b60405161005b91906108f6565b60405180910390f35b61007e60048036038101906100799190610816565b6100c3565b60405161008b91906108f6565b60405180910390f35b61009c61020e565b6040516100a991906108db565b60405180910390f35b60006100bc610234565b6001905090565b6000806000905060008173ffffffffffffffffffffffffffffffffffffffff16846040516024016100f491906108db565b6040516020818303038152906040527f7f466ae3000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161017e91906108c4565b6000604051808303816000865af19150503d80600081146101bb576040519150601f19603f3d011682016040523d82523d6000602084013e6101c0565b606091505b5050905080610204576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101fb90610911565b60405180910390fd5b8092505050919050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600061023e6107aa565b9050600043905081601001548161025591906109e5565b8260130181905550816010015482600f0154836013015461027691906109e5565b61028091906109e5565b8260140181905550816010015482600f015483601401546102a191906109e5565b6102ab91906109e5565b8260150181905550816010015482600f015483601501546102cc91906109e5565b6102d691906109e5565b8260160181905550816010015482600f015483601601546102f791906109e5565b61030191906109e5565b8260170181905550816010015482600f0154836017015461032291906109e5565b61032c91906109e5565b8260180181905550816010015482600f0154836018015461034d91906109e5565b61035791906109e5565b8260190181905550816010015482600f0154836019015461037891906109e5565b61038291906109e5565b82601a01819055507f9c6f8368fe7e77e8cb9438744581403bcb3f53298e517f04c1b8475487402e978183601301548460140154856015015486601601548760170154886018015489601901548a601a01546040516103e999989796959493929190610931565b60405180910390a160008260120160006101000a81548160ff02191690831515021790555060008260120160016101000a81548160ff02191690831515021790555060008260120160026101000a81548160ff02191690831515021790555060008260120160036101000a81548160ff02191690831515021790555060008260120160046101000a81548160ff02191690831515021790555081600901600061049291906107d7565b5b6000826000018054905011156107a657600082600001600184600001805490506104bd9190610a3b565b815481106104ce576104cd610b48565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508260010160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600061054891906107f3565b8260020160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600090558260030160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006105da91906107f3565b8260040160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600061062791906107f3565b8260050160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600061067491906107d7565b8260060160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006106c191906107f3565b8260080160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff02191690558260070160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600090558260000180548061076b5761076a610b19565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055905550610493565b5050565b6000807fd2d37756412c577f56b4802b8e643c9a817fa92cc18ff383f317fce7fab4282b90508091505090565b5060008155600101600081556001016000815560010160009055565b506000815560010160009055565b60008135905061081081610bcb565b92915050565b60006020828403121561082c5761082b610b77565b5b600061083a84828501610801565b91505092915050565b61084c81610a6f565b82525050565b61085b81610a81565b82525050565b600061086c826109be565b61087681856109c9565b9350610886818560208601610ab7565b80840191505092915050565b600061089f602d836109d4565b91506108aa82610b7c565b604082019050919050565b6108be81610aad565b82525050565b60006108d08284610861565b915081905092915050565b60006020820190506108f06000830184610843565b92915050565b600060208201905061090b6000830184610852565b92915050565b6000602082019050818103600083015261092a81610892565b9050919050565b600061012082019050610947600083018c6108b5565b610954602083018b6108b5565b610961604083018a6108b5565b61096e60608301896108b5565b61097b60808301886108b5565b61098860a08301876108b5565b61099560c08301866108b5565b6109a260e08301856108b5565b6109b06101008301846108b5565b9a9950505050505050505050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b60006109f082610aad565b91506109fb83610aad565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610a3057610a2f610aea565b5b828201905092915050565b6000610a4682610aad565b9150610a5183610aad565b925082821015610a6457610a63610aea565b5b828203905092915050565b6000610a7a82610a8d565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015610ad5578082015181840152602081019050610aba565b83811115610ae4576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b7f476f7665726e616e636550726f706f73654d6f64696679536e617073686f743a60008201527f2043414c4c204641494c45442100000000000000000000000000000000000000602082015250565b610bd481610a6f565b8114610bdf57600080fd5b5056fea264697066735822122014de316f28ff5627c551b38c096aa21313a17c52e0e9c7e62cb6d50bf9e73c5964736f6c63430008060033",
}

// GovernanceProposeRestartETHDKGABI is the input ABI used to generate the binding from.
// Deprecated: Use GovernanceProposeRestartETHDKGMetaData.ABI instead.
var GovernanceProposeRestartETHDKGABI = GovernanceProposeRestartETHDKGMetaData.ABI

// GovernanceProposeRestartETHDKGBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use GovernanceProposeRestartETHDKGMetaData.Bin instead.
var GovernanceProposeRestartETHDKGBin = GovernanceProposeRestartETHDKGMetaData.Bin

// DeployGovernanceProposeRestartETHDKG deploys a new Ethereum contract, binding an instance of GovernanceProposeRestartETHDKG to it.
func DeployGovernanceProposeRestartETHDKG(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *GovernanceProposeRestartETHDKG, error) {
	parsed, err := GovernanceProposeRestartETHDKGMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(GovernanceProposeRestartETHDKGBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &GovernanceProposeRestartETHDKG{GovernanceProposeRestartETHDKGCaller: GovernanceProposeRestartETHDKGCaller{contract: contract}, GovernanceProposeRestartETHDKGTransactor: GovernanceProposeRestartETHDKGTransactor{contract: contract}, GovernanceProposeRestartETHDKGFilterer: GovernanceProposeRestartETHDKGFilterer{contract: contract}}, nil
}

// GovernanceProposeRestartETHDKG is an auto generated Go binding around an Ethereum contract.
type GovernanceProposeRestartETHDKG struct {
	GovernanceProposeRestartETHDKGCaller     // Read-only binding to the contract
	GovernanceProposeRestartETHDKGTransactor // Write-only binding to the contract
	GovernanceProposeRestartETHDKGFilterer   // Log filterer for contract events
}

// GovernanceProposeRestartETHDKGCaller is an auto generated read-only Go binding around an Ethereum contract.
type GovernanceProposeRestartETHDKGCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovernanceProposeRestartETHDKGTransactor is an auto generated write-only Go binding around an Ethereum contract.
type GovernanceProposeRestartETHDKGTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovernanceProposeRestartETHDKGFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type GovernanceProposeRestartETHDKGFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovernanceProposeRestartETHDKGSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type GovernanceProposeRestartETHDKGSession struct {
	Contract     *GovernanceProposeRestartETHDKG // Generic contract binding to set the session for
	CallOpts     bind.CallOpts                   // Call options to use throughout this session
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// GovernanceProposeRestartETHDKGCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type GovernanceProposeRestartETHDKGCallerSession struct {
	Contract *GovernanceProposeRestartETHDKGCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                         // Call options to use throughout this session
}

// GovernanceProposeRestartETHDKGTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type GovernanceProposeRestartETHDKGTransactorSession struct {
	Contract     *GovernanceProposeRestartETHDKGTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                         // Transaction auth options to use throughout this session
}

// GovernanceProposeRestartETHDKGRaw is an auto generated low-level Go binding around an Ethereum contract.
type GovernanceProposeRestartETHDKGRaw struct {
	Contract *GovernanceProposeRestartETHDKG // Generic contract binding to access the raw methods on
}

// GovernanceProposeRestartETHDKGCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type GovernanceProposeRestartETHDKGCallerRaw struct {
	Contract *GovernanceProposeRestartETHDKGCaller // Generic read-only contract binding to access the raw methods on
}

// GovernanceProposeRestartETHDKGTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type GovernanceProposeRestartETHDKGTransactorRaw struct {
	Contract *GovernanceProposeRestartETHDKGTransactor // Generic write-only contract binding to access the raw methods on
}

// NewGovernanceProposeRestartETHDKG creates a new instance of GovernanceProposeRestartETHDKG, bound to a specific deployed contract.
func NewGovernanceProposeRestartETHDKG(address common.Address, backend bind.ContractBackend) (*GovernanceProposeRestartETHDKG, error) {
	contract, err := bindGovernanceProposeRestartETHDKG(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &GovernanceProposeRestartETHDKG{GovernanceProposeRestartETHDKGCaller: GovernanceProposeRestartETHDKGCaller{contract: contract}, GovernanceProposeRestartETHDKGTransactor: GovernanceProposeRestartETHDKGTransactor{contract: contract}, GovernanceProposeRestartETHDKGFilterer: GovernanceProposeRestartETHDKGFilterer{contract: contract}}, nil
}

// NewGovernanceProposeRestartETHDKGCaller creates a new read-only instance of GovernanceProposeRestartETHDKG, bound to a specific deployed contract.
func NewGovernanceProposeRestartETHDKGCaller(address common.Address, caller bind.ContractCaller) (*GovernanceProposeRestartETHDKGCaller, error) {
	contract, err := bindGovernanceProposeRestartETHDKG(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &GovernanceProposeRestartETHDKGCaller{contract: contract}, nil
}

// NewGovernanceProposeRestartETHDKGTransactor creates a new write-only instance of GovernanceProposeRestartETHDKG, bound to a specific deployed contract.
func NewGovernanceProposeRestartETHDKGTransactor(address common.Address, transactor bind.ContractTransactor) (*GovernanceProposeRestartETHDKGTransactor, error) {
	contract, err := bindGovernanceProposeRestartETHDKG(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &GovernanceProposeRestartETHDKGTransactor{contract: contract}, nil
}

// NewGovernanceProposeRestartETHDKGFilterer creates a new log filterer instance of GovernanceProposeRestartETHDKG, bound to a specific deployed contract.
func NewGovernanceProposeRestartETHDKGFilterer(address common.Address, filterer bind.ContractFilterer) (*GovernanceProposeRestartETHDKGFilterer, error) {
	contract, err := bindGovernanceProposeRestartETHDKG(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &GovernanceProposeRestartETHDKGFilterer{contract: contract}, nil
}

// bindGovernanceProposeRestartETHDKG binds a generic wrapper to an already deployed contract.
func bindGovernanceProposeRestartETHDKG(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(GovernanceProposeRestartETHDKGABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_GovernanceProposeRestartETHDKG *GovernanceProposeRestartETHDKGRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _GovernanceProposeRestartETHDKG.Contract.GovernanceProposeRestartETHDKGCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_GovernanceProposeRestartETHDKG *GovernanceProposeRestartETHDKGRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GovernanceProposeRestartETHDKG.Contract.GovernanceProposeRestartETHDKGTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_GovernanceProposeRestartETHDKG *GovernanceProposeRestartETHDKGRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _GovernanceProposeRestartETHDKG.Contract.GovernanceProposeRestartETHDKGTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_GovernanceProposeRestartETHDKG *GovernanceProposeRestartETHDKGCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _GovernanceProposeRestartETHDKG.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_GovernanceProposeRestartETHDKG *GovernanceProposeRestartETHDKGTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GovernanceProposeRestartETHDKG.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_GovernanceProposeRestartETHDKG *GovernanceProposeRestartETHDKGTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _GovernanceProposeRestartETHDKG.Contract.contract.Transact(opts, method, params...)
}

// AllowedProposal is a free data retrieval call binding the contract method 0xf4f58000.
//
// Solidity: function allowedProposal() view returns(address)
func (_GovernanceProposeRestartETHDKG *GovernanceProposeRestartETHDKGCaller) AllowedProposal(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _GovernanceProposeRestartETHDKG.contract.Call(opts, &out, "allowedProposal")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AllowedProposal is a free data retrieval call binding the contract method 0xf4f58000.
//
// Solidity: function allowedProposal() view returns(address)
func (_GovernanceProposeRestartETHDKG *GovernanceProposeRestartETHDKGSession) AllowedProposal() (common.Address, error) {
	return _GovernanceProposeRestartETHDKG.Contract.AllowedProposal(&_GovernanceProposeRestartETHDKG.CallOpts)
}

// AllowedProposal is a free data retrieval call binding the contract method 0xf4f58000.
//
// Solidity: function allowedProposal() view returns(address)
func (_GovernanceProposeRestartETHDKG *GovernanceProposeRestartETHDKGCallerSession) AllowedProposal() (common.Address, error) {
	return _GovernanceProposeRestartETHDKG.Contract.AllowedProposal(&_GovernanceProposeRestartETHDKG.CallOpts)
}

// Callback is a paid mutator transaction binding the contract method 0x083b2732.
//
// Solidity: function callback() returns(bool)
func (_GovernanceProposeRestartETHDKG *GovernanceProposeRestartETHDKGTransactor) Callback(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GovernanceProposeRestartETHDKG.contract.Transact(opts, "callback")
}

// Callback is a paid mutator transaction binding the contract method 0x083b2732.
//
// Solidity: function callback() returns(bool)
func (_GovernanceProposeRestartETHDKG *GovernanceProposeRestartETHDKGSession) Callback() (*types.Transaction, error) {
	return _GovernanceProposeRestartETHDKG.Contract.Callback(&_GovernanceProposeRestartETHDKG.TransactOpts)
}

// Callback is a paid mutator transaction binding the contract method 0x083b2732.
//
// Solidity: function callback() returns(bool)
func (_GovernanceProposeRestartETHDKG *GovernanceProposeRestartETHDKGTransactorSession) Callback() (*types.Transaction, error) {
	return _GovernanceProposeRestartETHDKG.Contract.Callback(&_GovernanceProposeRestartETHDKG.TransactOpts)
}

// Execute is a paid mutator transaction binding the contract method 0x4b64e492.
//
// Solidity: function execute(address self) returns(bool)
func (_GovernanceProposeRestartETHDKG *GovernanceProposeRestartETHDKGTransactor) Execute(opts *bind.TransactOpts, self common.Address) (*types.Transaction, error) {
	return _GovernanceProposeRestartETHDKG.contract.Transact(opts, "execute", self)
}

// Execute is a paid mutator transaction binding the contract method 0x4b64e492.
//
// Solidity: function execute(address self) returns(bool)
func (_GovernanceProposeRestartETHDKG *GovernanceProposeRestartETHDKGSession) Execute(self common.Address) (*types.Transaction, error) {
	return _GovernanceProposeRestartETHDKG.Contract.Execute(&_GovernanceProposeRestartETHDKG.TransactOpts, self)
}

// Execute is a paid mutator transaction binding the contract method 0x4b64e492.
//
// Solidity: function execute(address self) returns(bool)
func (_GovernanceProposeRestartETHDKG *GovernanceProposeRestartETHDKGTransactorSession) Execute(self common.Address) (*types.Transaction, error) {
	return _GovernanceProposeRestartETHDKG.Contract.Execute(&_GovernanceProposeRestartETHDKG.TransactOpts, self)
}

// GovernanceStorageMetaData contains all meta data concerning the GovernanceStorage contract.
var GovernanceStorageMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"allowedProposal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// GovernanceStorageABI is the input ABI used to generate the binding from.
// Deprecated: Use GovernanceStorageMetaData.ABI instead.
var GovernanceStorageABI = GovernanceStorageMetaData.ABI

// GovernanceStorage is an auto generated Go binding around an Ethereum contract.
type GovernanceStorage struct {
	GovernanceStorageCaller     // Read-only binding to the contract
	GovernanceStorageTransactor // Write-only binding to the contract
	GovernanceStorageFilterer   // Log filterer for contract events
}

// GovernanceStorageCaller is an auto generated read-only Go binding around an Ethereum contract.
type GovernanceStorageCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovernanceStorageTransactor is an auto generated write-only Go binding around an Ethereum contract.
type GovernanceStorageTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovernanceStorageFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type GovernanceStorageFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovernanceStorageSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type GovernanceStorageSession struct {
	Contract     *GovernanceStorage // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// GovernanceStorageCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type GovernanceStorageCallerSession struct {
	Contract *GovernanceStorageCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// GovernanceStorageTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type GovernanceStorageTransactorSession struct {
	Contract     *GovernanceStorageTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// GovernanceStorageRaw is an auto generated low-level Go binding around an Ethereum contract.
type GovernanceStorageRaw struct {
	Contract *GovernanceStorage // Generic contract binding to access the raw methods on
}

// GovernanceStorageCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type GovernanceStorageCallerRaw struct {
	Contract *GovernanceStorageCaller // Generic read-only contract binding to access the raw methods on
}

// GovernanceStorageTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type GovernanceStorageTransactorRaw struct {
	Contract *GovernanceStorageTransactor // Generic write-only contract binding to access the raw methods on
}

// NewGovernanceStorage creates a new instance of GovernanceStorage, bound to a specific deployed contract.
func NewGovernanceStorage(address common.Address, backend bind.ContractBackend) (*GovernanceStorage, error) {
	contract, err := bindGovernanceStorage(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &GovernanceStorage{GovernanceStorageCaller: GovernanceStorageCaller{contract: contract}, GovernanceStorageTransactor: GovernanceStorageTransactor{contract: contract}, GovernanceStorageFilterer: GovernanceStorageFilterer{contract: contract}}, nil
}

// NewGovernanceStorageCaller creates a new read-only instance of GovernanceStorage, bound to a specific deployed contract.
func NewGovernanceStorageCaller(address common.Address, caller bind.ContractCaller) (*GovernanceStorageCaller, error) {
	contract, err := bindGovernanceStorage(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &GovernanceStorageCaller{contract: contract}, nil
}

// NewGovernanceStorageTransactor creates a new write-only instance of GovernanceStorage, bound to a specific deployed contract.
func NewGovernanceStorageTransactor(address common.Address, transactor bind.ContractTransactor) (*GovernanceStorageTransactor, error) {
	contract, err := bindGovernanceStorage(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &GovernanceStorageTransactor{contract: contract}, nil
}

// NewGovernanceStorageFilterer creates a new log filterer instance of GovernanceStorage, bound to a specific deployed contract.
func NewGovernanceStorageFilterer(address common.Address, filterer bind.ContractFilterer) (*GovernanceStorageFilterer, error) {
	contract, err := bindGovernanceStorage(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &GovernanceStorageFilterer{contract: contract}, nil
}

// bindGovernanceStorage binds a generic wrapper to an already deployed contract.
func bindGovernanceStorage(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(GovernanceStorageABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_GovernanceStorage *GovernanceStorageRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _GovernanceStorage.Contract.GovernanceStorageCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_GovernanceStorage *GovernanceStorageRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GovernanceStorage.Contract.GovernanceStorageTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_GovernanceStorage *GovernanceStorageRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _GovernanceStorage.Contract.GovernanceStorageTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_GovernanceStorage *GovernanceStorageCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _GovernanceStorage.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_GovernanceStorage *GovernanceStorageTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GovernanceStorage.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_GovernanceStorage *GovernanceStorageTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _GovernanceStorage.Contract.contract.Transact(opts, method, params...)
}

// AllowedProposal is a free data retrieval call binding the contract method 0xf4f58000.
//
// Solidity: function allowedProposal() view returns(address)
func (_GovernanceStorage *GovernanceStorageCaller) AllowedProposal(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _GovernanceStorage.contract.Call(opts, &out, "allowedProposal")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AllowedProposal is a free data retrieval call binding the contract method 0xf4f58000.
//
// Solidity: function allowedProposal() view returns(address)
func (_GovernanceStorage *GovernanceStorageSession) AllowedProposal() (common.Address, error) {
	return _GovernanceStorage.Contract.AllowedProposal(&_GovernanceStorage.CallOpts)
}

// AllowedProposal is a free data retrieval call binding the contract method 0xf4f58000.
//
// Solidity: function allowedProposal() view returns(address)
func (_GovernanceStorage *GovernanceStorageCallerSession) AllowedProposal() (common.Address, error) {
	return _GovernanceStorage.Contract.AllowedProposal(&_GovernanceStorage.CallOpts)
}

// GovernorMetaData contains all meta data concerning the Governor contract.
var GovernorMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"ValueUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"name\":\"updateValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// GovernorABI is the input ABI used to generate the binding from.
// Deprecated: Use GovernorMetaData.ABI instead.
var GovernorABI = GovernorMetaData.ABI

// Governor is an auto generated Go binding around an Ethereum contract.
type Governor struct {
	GovernorCaller     // Read-only binding to the contract
	GovernorTransactor // Write-only binding to the contract
	GovernorFilterer   // Log filterer for contract events
}

// GovernorCaller is an auto generated read-only Go binding around an Ethereum contract.
type GovernorCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovernorTransactor is an auto generated write-only Go binding around an Ethereum contract.
type GovernorTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovernorFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type GovernorFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovernorSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type GovernorSession struct {
	Contract     *Governor         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// GovernorCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type GovernorCallerSession struct {
	Contract *GovernorCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// GovernorTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type GovernorTransactorSession struct {
	Contract     *GovernorTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// GovernorRaw is an auto generated low-level Go binding around an Ethereum contract.
type GovernorRaw struct {
	Contract *Governor // Generic contract binding to access the raw methods on
}

// GovernorCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type GovernorCallerRaw struct {
	Contract *GovernorCaller // Generic read-only contract binding to access the raw methods on
}

// GovernorTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type GovernorTransactorRaw struct {
	Contract *GovernorTransactor // Generic write-only contract binding to access the raw methods on
}

// NewGovernor creates a new instance of Governor, bound to a specific deployed contract.
func NewGovernor(address common.Address, backend bind.ContractBackend) (*Governor, error) {
	contract, err := bindGovernor(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Governor{GovernorCaller: GovernorCaller{contract: contract}, GovernorTransactor: GovernorTransactor{contract: contract}, GovernorFilterer: GovernorFilterer{contract: contract}}, nil
}

// NewGovernorCaller creates a new read-only instance of Governor, bound to a specific deployed contract.
func NewGovernorCaller(address common.Address, caller bind.ContractCaller) (*GovernorCaller, error) {
	contract, err := bindGovernor(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &GovernorCaller{contract: contract}, nil
}

// NewGovernorTransactor creates a new write-only instance of Governor, bound to a specific deployed contract.
func NewGovernorTransactor(address common.Address, transactor bind.ContractTransactor) (*GovernorTransactor, error) {
	contract, err := bindGovernor(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &GovernorTransactor{contract: contract}, nil
}

// NewGovernorFilterer creates a new log filterer instance of Governor, bound to a specific deployed contract.
func NewGovernorFilterer(address common.Address, filterer bind.ContractFilterer) (*GovernorFilterer, error) {
	contract, err := bindGovernor(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &GovernorFilterer{contract: contract}, nil
}

// bindGovernor binds a generic wrapper to an already deployed contract.
func bindGovernor(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(GovernorABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Governor *GovernorRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Governor.Contract.GovernorCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Governor *GovernorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Governor.Contract.GovernorTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Governor *GovernorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Governor.Contract.GovernorTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Governor *GovernorCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Governor.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Governor *GovernorTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Governor.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Governor *GovernorTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Governor.Contract.contract.Transact(opts, method, params...)
}

// UpdateValue is a paid mutator transaction binding the contract method 0x46512486.
//
// Solidity: function updateValue(uint256 epoch, uint256 key, bytes32 value) returns()
func (_Governor *GovernorTransactor) UpdateValue(opts *bind.TransactOpts, epoch *big.Int, key *big.Int, value [32]byte) (*types.Transaction, error) {
	return _Governor.contract.Transact(opts, "updateValue", epoch, key, value)
}

// UpdateValue is a paid mutator transaction binding the contract method 0x46512486.
//
// Solidity: function updateValue(uint256 epoch, uint256 key, bytes32 value) returns()
func (_Governor *GovernorSession) UpdateValue(epoch *big.Int, key *big.Int, value [32]byte) (*types.Transaction, error) {
	return _Governor.Contract.UpdateValue(&_Governor.TransactOpts, epoch, key, value)
}

// UpdateValue is a paid mutator transaction binding the contract method 0x46512486.
//
// Solidity: function updateValue(uint256 epoch, uint256 key, bytes32 value) returns()
func (_Governor *GovernorTransactorSession) UpdateValue(epoch *big.Int, key *big.Int, value [32]byte) (*types.Transaction, error) {
	return _Governor.Contract.UpdateValue(&_Governor.TransactOpts, epoch, key, value)
}

// GovernorValueUpdatedIterator is returned from FilterValueUpdated and is used to iterate over the raw logs and unpacked data for ValueUpdated events raised by the Governor contract.
type GovernorValueUpdatedIterator struct {
	Event *GovernorValueUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GovernorValueUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GovernorValueUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GovernorValueUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GovernorValueUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GovernorValueUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GovernorValueUpdated represents a ValueUpdated event raised by the Governor contract.
type GovernorValueUpdated struct {
	Epoch *big.Int
	Key   *big.Int
	Value [32]byte
	Who   common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterValueUpdated is a free log retrieval operation binding the contract event 0x36dcd0e03525dedd9d5c21a263ef5f35d030298b5c48f1a713006aefc064ad05.
//
// Solidity: event ValueUpdated(uint256 indexed epoch, uint256 indexed key, bytes32 indexed value, address who)
func (_Governor *GovernorFilterer) FilterValueUpdated(opts *bind.FilterOpts, epoch []*big.Int, key []*big.Int, value [][32]byte) (*GovernorValueUpdatedIterator, error) {

	var epochRule []interface{}
	for _, epochItem := range epoch {
		epochRule = append(epochRule, epochItem)
	}
	var keyRule []interface{}
	for _, keyItem := range key {
		keyRule = append(keyRule, keyItem)
	}
	var valueRule []interface{}
	for _, valueItem := range value {
		valueRule = append(valueRule, valueItem)
	}

	logs, sub, err := _Governor.contract.FilterLogs(opts, "ValueUpdated", epochRule, keyRule, valueRule)
	if err != nil {
		return nil, err
	}
	return &GovernorValueUpdatedIterator{contract: _Governor.contract, event: "ValueUpdated", logs: logs, sub: sub}, nil
}

// WatchValueUpdated is a free log subscription operation binding the contract event 0x36dcd0e03525dedd9d5c21a263ef5f35d030298b5c48f1a713006aefc064ad05.
//
// Solidity: event ValueUpdated(uint256 indexed epoch, uint256 indexed key, bytes32 indexed value, address who)
func (_Governor *GovernorFilterer) WatchValueUpdated(opts *bind.WatchOpts, sink chan<- *GovernorValueUpdated, epoch []*big.Int, key []*big.Int, value [][32]byte) (event.Subscription, error) {

	var epochRule []interface{}
	for _, epochItem := range epoch {
		epochRule = append(epochRule, epochItem)
	}
	var keyRule []interface{}
	for _, keyItem := range key {
		keyRule = append(keyRule, keyItem)
	}
	var valueRule []interface{}
	for _, valueItem := range value {
		valueRule = append(valueRule, valueItem)
	}

	logs, sub, err := _Governor.contract.WatchLogs(opts, "ValueUpdated", epochRule, keyRule, valueRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GovernorValueUpdated)
				if err := _Governor.contract.UnpackLog(event, "ValueUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValueUpdated is a log parse operation binding the contract event 0x36dcd0e03525dedd9d5c21a263ef5f35d030298b5c48f1a713006aefc064ad05.
//
// Solidity: event ValueUpdated(uint256 indexed epoch, uint256 indexed key, bytes32 indexed value, address who)
func (_Governor *GovernorFilterer) ParseValueUpdated(log types.Log) (*GovernorValueUpdated, error) {
	event := new(GovernorValueUpdated)
	if err := _Governor.contract.UnpackLog(event, "ValueUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GovernorEventsMetaData contains all meta data concerning the GovernorEvents contract.
var GovernorEventsMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"ValueUpdated\",\"type\":\"event\"}]",
}

// GovernorEventsABI is the input ABI used to generate the binding from.
// Deprecated: Use GovernorEventsMetaData.ABI instead.
var GovernorEventsABI = GovernorEventsMetaData.ABI

// GovernorEvents is an auto generated Go binding around an Ethereum contract.
type GovernorEvents struct {
	GovernorEventsCaller     // Read-only binding to the contract
	GovernorEventsTransactor // Write-only binding to the contract
	GovernorEventsFilterer   // Log filterer for contract events
}

// GovernorEventsCaller is an auto generated read-only Go binding around an Ethereum contract.
type GovernorEventsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovernorEventsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type GovernorEventsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovernorEventsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type GovernorEventsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovernorEventsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type GovernorEventsSession struct {
	Contract     *GovernorEvents   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// GovernorEventsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type GovernorEventsCallerSession struct {
	Contract *GovernorEventsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// GovernorEventsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type GovernorEventsTransactorSession struct {
	Contract     *GovernorEventsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// GovernorEventsRaw is an auto generated low-level Go binding around an Ethereum contract.
type GovernorEventsRaw struct {
	Contract *GovernorEvents // Generic contract binding to access the raw methods on
}

// GovernorEventsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type GovernorEventsCallerRaw struct {
	Contract *GovernorEventsCaller // Generic read-only contract binding to access the raw methods on
}

// GovernorEventsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type GovernorEventsTransactorRaw struct {
	Contract *GovernorEventsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewGovernorEvents creates a new instance of GovernorEvents, bound to a specific deployed contract.
func NewGovernorEvents(address common.Address, backend bind.ContractBackend) (*GovernorEvents, error) {
	contract, err := bindGovernorEvents(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &GovernorEvents{GovernorEventsCaller: GovernorEventsCaller{contract: contract}, GovernorEventsTransactor: GovernorEventsTransactor{contract: contract}, GovernorEventsFilterer: GovernorEventsFilterer{contract: contract}}, nil
}

// NewGovernorEventsCaller creates a new read-only instance of GovernorEvents, bound to a specific deployed contract.
func NewGovernorEventsCaller(address common.Address, caller bind.ContractCaller) (*GovernorEventsCaller, error) {
	contract, err := bindGovernorEvents(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &GovernorEventsCaller{contract: contract}, nil
}

// NewGovernorEventsTransactor creates a new write-only instance of GovernorEvents, bound to a specific deployed contract.
func NewGovernorEventsTransactor(address common.Address, transactor bind.ContractTransactor) (*GovernorEventsTransactor, error) {
	contract, err := bindGovernorEvents(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &GovernorEventsTransactor{contract: contract}, nil
}

// NewGovernorEventsFilterer creates a new log filterer instance of GovernorEvents, bound to a specific deployed contract.
func NewGovernorEventsFilterer(address common.Address, filterer bind.ContractFilterer) (*GovernorEventsFilterer, error) {
	contract, err := bindGovernorEvents(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &GovernorEventsFilterer{contract: contract}, nil
}

// bindGovernorEvents binds a generic wrapper to an already deployed contract.
func bindGovernorEvents(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(GovernorEventsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_GovernorEvents *GovernorEventsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _GovernorEvents.Contract.GovernorEventsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_GovernorEvents *GovernorEventsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GovernorEvents.Contract.GovernorEventsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_GovernorEvents *GovernorEventsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _GovernorEvents.Contract.GovernorEventsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_GovernorEvents *GovernorEventsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _GovernorEvents.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_GovernorEvents *GovernorEventsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GovernorEvents.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_GovernorEvents *GovernorEventsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _GovernorEvents.Contract.contract.Transact(opts, method, params...)
}

// GovernorEventsValueUpdatedIterator is returned from FilterValueUpdated and is used to iterate over the raw logs and unpacked data for ValueUpdated events raised by the GovernorEvents contract.
type GovernorEventsValueUpdatedIterator struct {
	Event *GovernorEventsValueUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GovernorEventsValueUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GovernorEventsValueUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GovernorEventsValueUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GovernorEventsValueUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GovernorEventsValueUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GovernorEventsValueUpdated represents a ValueUpdated event raised by the GovernorEvents contract.
type GovernorEventsValueUpdated struct {
	Epoch *big.Int
	Key   *big.Int
	Value [32]byte
	Who   common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterValueUpdated is a free log retrieval operation binding the contract event 0x36dcd0e03525dedd9d5c21a263ef5f35d030298b5c48f1a713006aefc064ad05.
//
// Solidity: event ValueUpdated(uint256 indexed epoch, uint256 indexed key, bytes32 indexed value, address who)
func (_GovernorEvents *GovernorEventsFilterer) FilterValueUpdated(opts *bind.FilterOpts, epoch []*big.Int, key []*big.Int, value [][32]byte) (*GovernorEventsValueUpdatedIterator, error) {

	var epochRule []interface{}
	for _, epochItem := range epoch {
		epochRule = append(epochRule, epochItem)
	}
	var keyRule []interface{}
	for _, keyItem := range key {
		keyRule = append(keyRule, keyItem)
	}
	var valueRule []interface{}
	for _, valueItem := range value {
		valueRule = append(valueRule, valueItem)
	}

	logs, sub, err := _GovernorEvents.contract.FilterLogs(opts, "ValueUpdated", epochRule, keyRule, valueRule)
	if err != nil {
		return nil, err
	}
	return &GovernorEventsValueUpdatedIterator{contract: _GovernorEvents.contract, event: "ValueUpdated", logs: logs, sub: sub}, nil
}

// WatchValueUpdated is a free log subscription operation binding the contract event 0x36dcd0e03525dedd9d5c21a263ef5f35d030298b5c48f1a713006aefc064ad05.
//
// Solidity: event ValueUpdated(uint256 indexed epoch, uint256 indexed key, bytes32 indexed value, address who)
func (_GovernorEvents *GovernorEventsFilterer) WatchValueUpdated(opts *bind.WatchOpts, sink chan<- *GovernorEventsValueUpdated, epoch []*big.Int, key []*big.Int, value [][32]byte) (event.Subscription, error) {

	var epochRule []interface{}
	for _, epochItem := range epoch {
		epochRule = append(epochRule, epochItem)
	}
	var keyRule []interface{}
	for _, keyItem := range key {
		keyRule = append(keyRule, keyItem)
	}
	var valueRule []interface{}
	for _, valueItem := range value {
		valueRule = append(valueRule, valueItem)
	}

	logs, sub, err := _GovernorEvents.contract.WatchLogs(opts, "ValueUpdated", epochRule, keyRule, valueRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GovernorEventsValueUpdated)
				if err := _GovernorEvents.contract.UnpackLog(event, "ValueUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValueUpdated is a log parse operation binding the contract event 0x36dcd0e03525dedd9d5c21a263ef5f35d030298b5c48f1a713006aefc064ad05.
//
// Solidity: event ValueUpdated(uint256 indexed epoch, uint256 indexed key, bytes32 indexed value, address who)
func (_GovernorEvents *GovernorEventsFilterer) ParseValueUpdated(log types.Log) (*GovernorEventsValueUpdated, error) {
	event := new(GovernorEventsValueUpdated)
	if err := _GovernorEvents.contract.UnpackLog(event, "ValueUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ICBCloserMetaData contains all meta data concerning the ICBCloser contract.
var ICBCloserMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"resetCB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// ICBCloserABI is the input ABI used to generate the binding from.
// Deprecated: Use ICBCloserMetaData.ABI instead.
var ICBCloserABI = ICBCloserMetaData.ABI

// ICBCloser is an auto generated Go binding around an Ethereum contract.
type ICBCloser struct {
	ICBCloserCaller     // Read-only binding to the contract
	ICBCloserTransactor // Write-only binding to the contract
	ICBCloserFilterer   // Log filterer for contract events
}

// ICBCloserCaller is an auto generated read-only Go binding around an Ethereum contract.
type ICBCloserCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ICBCloserTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ICBCloserTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ICBCloserFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ICBCloserFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ICBCloserSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ICBCloserSession struct {
	Contract     *ICBCloser        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ICBCloserCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ICBCloserCallerSession struct {
	Contract *ICBCloserCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// ICBCloserTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ICBCloserTransactorSession struct {
	Contract     *ICBCloserTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// ICBCloserRaw is an auto generated low-level Go binding around an Ethereum contract.
type ICBCloserRaw struct {
	Contract *ICBCloser // Generic contract binding to access the raw methods on
}

// ICBCloserCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ICBCloserCallerRaw struct {
	Contract *ICBCloserCaller // Generic read-only contract binding to access the raw methods on
}

// ICBCloserTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ICBCloserTransactorRaw struct {
	Contract *ICBCloserTransactor // Generic write-only contract binding to access the raw methods on
}

// NewICBCloser creates a new instance of ICBCloser, bound to a specific deployed contract.
func NewICBCloser(address common.Address, backend bind.ContractBackend) (*ICBCloser, error) {
	contract, err := bindICBCloser(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ICBCloser{ICBCloserCaller: ICBCloserCaller{contract: contract}, ICBCloserTransactor: ICBCloserTransactor{contract: contract}, ICBCloserFilterer: ICBCloserFilterer{contract: contract}}, nil
}

// NewICBCloserCaller creates a new read-only instance of ICBCloser, bound to a specific deployed contract.
func NewICBCloserCaller(address common.Address, caller bind.ContractCaller) (*ICBCloserCaller, error) {
	contract, err := bindICBCloser(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ICBCloserCaller{contract: contract}, nil
}

// NewICBCloserTransactor creates a new write-only instance of ICBCloser, bound to a specific deployed contract.
func NewICBCloserTransactor(address common.Address, transactor bind.ContractTransactor) (*ICBCloserTransactor, error) {
	contract, err := bindICBCloser(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ICBCloserTransactor{contract: contract}, nil
}

// NewICBCloserFilterer creates a new log filterer instance of ICBCloser, bound to a specific deployed contract.
func NewICBCloserFilterer(address common.Address, filterer bind.ContractFilterer) (*ICBCloserFilterer, error) {
	contract, err := bindICBCloser(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ICBCloserFilterer{contract: contract}, nil
}

// bindICBCloser binds a generic wrapper to an already deployed contract.
func bindICBCloser(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ICBCloserABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ICBCloser *ICBCloserRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ICBCloser.Contract.ICBCloserCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ICBCloser *ICBCloserRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ICBCloser.Contract.ICBCloserTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ICBCloser *ICBCloserRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ICBCloser.Contract.ICBCloserTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ICBCloser *ICBCloserCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ICBCloser.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ICBCloser *ICBCloserTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ICBCloser.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ICBCloser *ICBCloserTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ICBCloser.Contract.contract.Transact(opts, method, params...)
}

// ResetCB is a paid mutator transaction binding the contract method 0x057615d2.
//
// Solidity: function resetCB() returns()
func (_ICBCloser *ICBCloserTransactor) ResetCB(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ICBCloser.contract.Transact(opts, "resetCB")
}

// ResetCB is a paid mutator transaction binding the contract method 0x057615d2.
//
// Solidity: function resetCB() returns()
func (_ICBCloser *ICBCloserSession) ResetCB() (*types.Transaction, error) {
	return _ICBCloser.Contract.ResetCB(&_ICBCloser.TransactOpts)
}

// ResetCB is a paid mutator transaction binding the contract method 0x057615d2.
//
// Solidity: function resetCB() returns()
func (_ICBCloser *ICBCloserTransactorSession) ResetCB() (*types.Transaction, error) {
	return _ICBCloser.Contract.ResetCB(&_ICBCloser.TransactOpts)
}

// ICBOpenerMetaData contains all meta data concerning the ICBOpener contract.
var ICBOpenerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"tripCB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// ICBOpenerABI is the input ABI used to generate the binding from.
// Deprecated: Use ICBOpenerMetaData.ABI instead.
var ICBOpenerABI = ICBOpenerMetaData.ABI

// ICBOpener is an auto generated Go binding around an Ethereum contract.
type ICBOpener struct {
	ICBOpenerCaller     // Read-only binding to the contract
	ICBOpenerTransactor // Write-only binding to the contract
	ICBOpenerFilterer   // Log filterer for contract events
}

// ICBOpenerCaller is an auto generated read-only Go binding around an Ethereum contract.
type ICBOpenerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ICBOpenerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ICBOpenerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ICBOpenerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ICBOpenerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ICBOpenerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ICBOpenerSession struct {
	Contract     *ICBOpener        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ICBOpenerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ICBOpenerCallerSession struct {
	Contract *ICBOpenerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// ICBOpenerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ICBOpenerTransactorSession struct {
	Contract     *ICBOpenerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// ICBOpenerRaw is an auto generated low-level Go binding around an Ethereum contract.
type ICBOpenerRaw struct {
	Contract *ICBOpener // Generic contract binding to access the raw methods on
}

// ICBOpenerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ICBOpenerCallerRaw struct {
	Contract *ICBOpenerCaller // Generic read-only contract binding to access the raw methods on
}

// ICBOpenerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ICBOpenerTransactorRaw struct {
	Contract *ICBOpenerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewICBOpener creates a new instance of ICBOpener, bound to a specific deployed contract.
func NewICBOpener(address common.Address, backend bind.ContractBackend) (*ICBOpener, error) {
	contract, err := bindICBOpener(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ICBOpener{ICBOpenerCaller: ICBOpenerCaller{contract: contract}, ICBOpenerTransactor: ICBOpenerTransactor{contract: contract}, ICBOpenerFilterer: ICBOpenerFilterer{contract: contract}}, nil
}

// NewICBOpenerCaller creates a new read-only instance of ICBOpener, bound to a specific deployed contract.
func NewICBOpenerCaller(address common.Address, caller bind.ContractCaller) (*ICBOpenerCaller, error) {
	contract, err := bindICBOpener(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ICBOpenerCaller{contract: contract}, nil
}

// NewICBOpenerTransactor creates a new write-only instance of ICBOpener, bound to a specific deployed contract.
func NewICBOpenerTransactor(address common.Address, transactor bind.ContractTransactor) (*ICBOpenerTransactor, error) {
	contract, err := bindICBOpener(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ICBOpenerTransactor{contract: contract}, nil
}

// NewICBOpenerFilterer creates a new log filterer instance of ICBOpener, bound to a specific deployed contract.
func NewICBOpenerFilterer(address common.Address, filterer bind.ContractFilterer) (*ICBOpenerFilterer, error) {
	contract, err := bindICBOpener(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ICBOpenerFilterer{contract: contract}, nil
}

// bindICBOpener binds a generic wrapper to an already deployed contract.
func bindICBOpener(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ICBOpenerABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ICBOpener *ICBOpenerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ICBOpener.Contract.ICBOpenerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ICBOpener *ICBOpenerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ICBOpener.Contract.ICBOpenerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ICBOpener *ICBOpenerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ICBOpener.Contract.ICBOpenerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ICBOpener *ICBOpenerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ICBOpener.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ICBOpener *ICBOpenerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ICBOpener.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ICBOpener *ICBOpenerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ICBOpener.Contract.contract.Transact(opts, method, params...)
}

// TripCB is a paid mutator transaction binding the contract method 0xadfdc03f.
//
// Solidity: function tripCB() returns()
func (_ICBOpener *ICBOpenerTransactor) TripCB(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ICBOpener.contract.Transact(opts, "tripCB")
}

// TripCB is a paid mutator transaction binding the contract method 0xadfdc03f.
//
// Solidity: function tripCB() returns()
func (_ICBOpener *ICBOpenerSession) TripCB() (*types.Transaction, error) {
	return _ICBOpener.Contract.TripCB(&_ICBOpener.TransactOpts)
}

// TripCB is a paid mutator transaction binding the contract method 0xadfdc03f.
//
// Solidity: function tripCB() returns()
func (_ICBOpener *ICBOpenerTransactorSession) TripCB() (*types.Transaction, error) {
	return _ICBOpener.Contract.TripCB(&_ICBOpener.TransactOpts)
}

// IERC165MetaData contains all meta data concerning the IERC165 contract.
var IERC165MetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// IERC165ABI is the input ABI used to generate the binding from.
// Deprecated: Use IERC165MetaData.ABI instead.
var IERC165ABI = IERC165MetaData.ABI

// IERC165 is an auto generated Go binding around an Ethereum contract.
type IERC165 struct {
	IERC165Caller     // Read-only binding to the contract
	IERC165Transactor // Write-only binding to the contract
	IERC165Filterer   // Log filterer for contract events
}

// IERC165Caller is an auto generated read-only Go binding around an Ethereum contract.
type IERC165Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC165Transactor is an auto generated write-only Go binding around an Ethereum contract.
type IERC165Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC165Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IERC165Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC165Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IERC165Session struct {
	Contract     *IERC165          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IERC165CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IERC165CallerSession struct {
	Contract *IERC165Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// IERC165TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IERC165TransactorSession struct {
	Contract     *IERC165Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// IERC165Raw is an auto generated low-level Go binding around an Ethereum contract.
type IERC165Raw struct {
	Contract *IERC165 // Generic contract binding to access the raw methods on
}

// IERC165CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IERC165CallerRaw struct {
	Contract *IERC165Caller // Generic read-only contract binding to access the raw methods on
}

// IERC165TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IERC165TransactorRaw struct {
	Contract *IERC165Transactor // Generic write-only contract binding to access the raw methods on
}

// NewIERC165 creates a new instance of IERC165, bound to a specific deployed contract.
func NewIERC165(address common.Address, backend bind.ContractBackend) (*IERC165, error) {
	contract, err := bindIERC165(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IERC165{IERC165Caller: IERC165Caller{contract: contract}, IERC165Transactor: IERC165Transactor{contract: contract}, IERC165Filterer: IERC165Filterer{contract: contract}}, nil
}

// NewIERC165Caller creates a new read-only instance of IERC165, bound to a specific deployed contract.
func NewIERC165Caller(address common.Address, caller bind.ContractCaller) (*IERC165Caller, error) {
	contract, err := bindIERC165(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IERC165Caller{contract: contract}, nil
}

// NewIERC165Transactor creates a new write-only instance of IERC165, bound to a specific deployed contract.
func NewIERC165Transactor(address common.Address, transactor bind.ContractTransactor) (*IERC165Transactor, error) {
	contract, err := bindIERC165(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IERC165Transactor{contract: contract}, nil
}

// NewIERC165Filterer creates a new log filterer instance of IERC165, bound to a specific deployed contract.
func NewIERC165Filterer(address common.Address, filterer bind.ContractFilterer) (*IERC165Filterer, error) {
	contract, err := bindIERC165(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IERC165Filterer{contract: contract}, nil
}

// bindIERC165 binds a generic wrapper to an already deployed contract.
func bindIERC165(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IERC165ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC165 *IERC165Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC165.Contract.IERC165Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC165 *IERC165Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC165.Contract.IERC165Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC165 *IERC165Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC165.Contract.IERC165Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC165 *IERC165CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC165.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC165 *IERC165TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC165.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC165 *IERC165TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC165.Contract.contract.Transact(opts, method, params...)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_IERC165 *IERC165Caller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _IERC165.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_IERC165 *IERC165Session) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _IERC165.Contract.SupportsInterface(&_IERC165.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_IERC165 *IERC165CallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _IERC165.Contract.SupportsInterface(&_IERC165.CallOpts, interfaceId)
}

// IERC20MetaData contains all meta data concerning the IERC20 contract.
var IERC20MetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// IERC20ABI is the input ABI used to generate the binding from.
// Deprecated: Use IERC20MetaData.ABI instead.
var IERC20ABI = IERC20MetaData.ABI

// IERC20 is an auto generated Go binding around an Ethereum contract.
type IERC20 struct {
	IERC20Caller     // Read-only binding to the contract
	IERC20Transactor // Write-only binding to the contract
	IERC20Filterer   // Log filterer for contract events
}

// IERC20Caller is an auto generated read-only Go binding around an Ethereum contract.
type IERC20Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20Transactor is an auto generated write-only Go binding around an Ethereum contract.
type IERC20Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IERC20Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IERC20Session struct {
	Contract     *IERC20           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IERC20CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IERC20CallerSession struct {
	Contract *IERC20Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// IERC20TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IERC20TransactorSession struct {
	Contract     *IERC20Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IERC20Raw is an auto generated low-level Go binding around an Ethereum contract.
type IERC20Raw struct {
	Contract *IERC20 // Generic contract binding to access the raw methods on
}

// IERC20CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IERC20CallerRaw struct {
	Contract *IERC20Caller // Generic read-only contract binding to access the raw methods on
}

// IERC20TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IERC20TransactorRaw struct {
	Contract *IERC20Transactor // Generic write-only contract binding to access the raw methods on
}

// NewIERC20 creates a new instance of IERC20, bound to a specific deployed contract.
func NewIERC20(address common.Address, backend bind.ContractBackend) (*IERC20, error) {
	contract, err := bindIERC20(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IERC20{IERC20Caller: IERC20Caller{contract: contract}, IERC20Transactor: IERC20Transactor{contract: contract}, IERC20Filterer: IERC20Filterer{contract: contract}}, nil
}

// NewIERC20Caller creates a new read-only instance of IERC20, bound to a specific deployed contract.
func NewIERC20Caller(address common.Address, caller bind.ContractCaller) (*IERC20Caller, error) {
	contract, err := bindIERC20(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IERC20Caller{contract: contract}, nil
}

// NewIERC20Transactor creates a new write-only instance of IERC20, bound to a specific deployed contract.
func NewIERC20Transactor(address common.Address, transactor bind.ContractTransactor) (*IERC20Transactor, error) {
	contract, err := bindIERC20(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IERC20Transactor{contract: contract}, nil
}

// NewIERC20Filterer creates a new log filterer instance of IERC20, bound to a specific deployed contract.
func NewIERC20Filterer(address common.Address, filterer bind.ContractFilterer) (*IERC20Filterer, error) {
	contract, err := bindIERC20(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IERC20Filterer{contract: contract}, nil
}

// bindIERC20 binds a generic wrapper to an already deployed contract.
func bindIERC20(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IERC20ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC20 *IERC20Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC20.Contract.IERC20Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC20 *IERC20Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC20.Contract.IERC20Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC20 *IERC20Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC20.Contract.IERC20Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC20 *IERC20CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC20.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC20 *IERC20TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC20.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC20 *IERC20TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC20.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IERC20 *IERC20Caller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IERC20.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IERC20 *IERC20Session) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _IERC20.Contract.Allowance(&_IERC20.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IERC20 *IERC20CallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _IERC20.Contract.Allowance(&_IERC20.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20 *IERC20Caller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IERC20.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20 *IERC20Session) BalanceOf(account common.Address) (*big.Int, error) {
	return _IERC20.Contract.BalanceOf(&_IERC20.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20 *IERC20CallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _IERC20.Contract.BalanceOf(&_IERC20.CallOpts, account)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IERC20 *IERC20Caller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IERC20.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IERC20 *IERC20Session) TotalSupply() (*big.Int, error) {
	return _IERC20.Contract.TotalSupply(&_IERC20.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IERC20 *IERC20CallerSession) TotalSupply() (*big.Int, error) {
	return _IERC20.Contract.TotalSupply(&_IERC20.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20 *IERC20Transactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20 *IERC20Session) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.Approve(&_IERC20.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20 *IERC20TransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.Approve(&_IERC20.TransactOpts, spender, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_IERC20 *IERC20Transactor) Transfer(opts *bind.TransactOpts, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.contract.Transact(opts, "transfer", recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_IERC20 *IERC20Session) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.Transfer(&_IERC20.TransactOpts, recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_IERC20 *IERC20TransactorSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.Transfer(&_IERC20.TransactOpts, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_IERC20 *IERC20Transactor) TransferFrom(opts *bind.TransactOpts, sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.contract.Transact(opts, "transferFrom", sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_IERC20 *IERC20Session) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.TransferFrom(&_IERC20.TransactOpts, sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_IERC20 *IERC20TransactorSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.TransferFrom(&_IERC20.TransactOpts, sender, recipient, amount)
}

// IERC20ApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the IERC20 contract.
type IERC20ApprovalIterator struct {
	Event *IERC20Approval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC20ApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC20Approval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC20Approval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC20ApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC20ApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC20Approval represents a Approval event raised by the IERC20 contract.
type IERC20Approval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IERC20 *IERC20Filterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*IERC20ApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _IERC20.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &IERC20ApprovalIterator{contract: _IERC20.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IERC20 *IERC20Filterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *IERC20Approval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _IERC20.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC20Approval)
				if err := _IERC20.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IERC20 *IERC20Filterer) ParseApproval(log types.Log) (*IERC20Approval, error) {
	event := new(IERC20Approval)
	if err := _IERC20.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC20TransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the IERC20 contract.
type IERC20TransferIterator struct {
	Event *IERC20Transfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC20TransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC20Transfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC20Transfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC20TransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC20TransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC20Transfer represents a Transfer event raised by the IERC20 contract.
type IERC20Transfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IERC20 *IERC20Filterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*IERC20TransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IERC20.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &IERC20TransferIterator{contract: _IERC20.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IERC20 *IERC20Filterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *IERC20Transfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IERC20.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC20Transfer)
				if err := _IERC20.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IERC20 *IERC20Filterer) ParseTransfer(log types.Log) (*IERC20Transfer, error) {
	event := new(IERC20Transfer)
	if err := _IERC20.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC20MetadataMetaData contains all meta data concerning the IERC20Metadata contract.
var IERC20MetadataMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// IERC20MetadataABI is the input ABI used to generate the binding from.
// Deprecated: Use IERC20MetadataMetaData.ABI instead.
var IERC20MetadataABI = IERC20MetadataMetaData.ABI

// IERC20Metadata is an auto generated Go binding around an Ethereum contract.
type IERC20Metadata struct {
	IERC20MetadataCaller     // Read-only binding to the contract
	IERC20MetadataTransactor // Write-only binding to the contract
	IERC20MetadataFilterer   // Log filterer for contract events
}

// IERC20MetadataCaller is an auto generated read-only Go binding around an Ethereum contract.
type IERC20MetadataCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20MetadataTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IERC20MetadataTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20MetadataFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IERC20MetadataFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20MetadataSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IERC20MetadataSession struct {
	Contract     *IERC20Metadata   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IERC20MetadataCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IERC20MetadataCallerSession struct {
	Contract *IERC20MetadataCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// IERC20MetadataTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IERC20MetadataTransactorSession struct {
	Contract     *IERC20MetadataTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// IERC20MetadataRaw is an auto generated low-level Go binding around an Ethereum contract.
type IERC20MetadataRaw struct {
	Contract *IERC20Metadata // Generic contract binding to access the raw methods on
}

// IERC20MetadataCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IERC20MetadataCallerRaw struct {
	Contract *IERC20MetadataCaller // Generic read-only contract binding to access the raw methods on
}

// IERC20MetadataTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IERC20MetadataTransactorRaw struct {
	Contract *IERC20MetadataTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIERC20Metadata creates a new instance of IERC20Metadata, bound to a specific deployed contract.
func NewIERC20Metadata(address common.Address, backend bind.ContractBackend) (*IERC20Metadata, error) {
	contract, err := bindIERC20Metadata(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IERC20Metadata{IERC20MetadataCaller: IERC20MetadataCaller{contract: contract}, IERC20MetadataTransactor: IERC20MetadataTransactor{contract: contract}, IERC20MetadataFilterer: IERC20MetadataFilterer{contract: contract}}, nil
}

// NewIERC20MetadataCaller creates a new read-only instance of IERC20Metadata, bound to a specific deployed contract.
func NewIERC20MetadataCaller(address common.Address, caller bind.ContractCaller) (*IERC20MetadataCaller, error) {
	contract, err := bindIERC20Metadata(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IERC20MetadataCaller{contract: contract}, nil
}

// NewIERC20MetadataTransactor creates a new write-only instance of IERC20Metadata, bound to a specific deployed contract.
func NewIERC20MetadataTransactor(address common.Address, transactor bind.ContractTransactor) (*IERC20MetadataTransactor, error) {
	contract, err := bindIERC20Metadata(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IERC20MetadataTransactor{contract: contract}, nil
}

// NewIERC20MetadataFilterer creates a new log filterer instance of IERC20Metadata, bound to a specific deployed contract.
func NewIERC20MetadataFilterer(address common.Address, filterer bind.ContractFilterer) (*IERC20MetadataFilterer, error) {
	contract, err := bindIERC20Metadata(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IERC20MetadataFilterer{contract: contract}, nil
}

// bindIERC20Metadata binds a generic wrapper to an already deployed contract.
func bindIERC20Metadata(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IERC20MetadataABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC20Metadata *IERC20MetadataRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC20Metadata.Contract.IERC20MetadataCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC20Metadata *IERC20MetadataRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC20Metadata.Contract.IERC20MetadataTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC20Metadata *IERC20MetadataRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC20Metadata.Contract.IERC20MetadataTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC20Metadata *IERC20MetadataCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC20Metadata.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC20Metadata *IERC20MetadataTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC20Metadata.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC20Metadata *IERC20MetadataTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC20Metadata.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IERC20Metadata *IERC20MetadataCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IERC20Metadata.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IERC20Metadata *IERC20MetadataSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _IERC20Metadata.Contract.Allowance(&_IERC20Metadata.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IERC20Metadata *IERC20MetadataCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _IERC20Metadata.Contract.Allowance(&_IERC20Metadata.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20Metadata *IERC20MetadataCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IERC20Metadata.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20Metadata *IERC20MetadataSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _IERC20Metadata.Contract.BalanceOf(&_IERC20Metadata.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20Metadata *IERC20MetadataCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _IERC20Metadata.Contract.BalanceOf(&_IERC20Metadata.CallOpts, account)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_IERC20Metadata *IERC20MetadataCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _IERC20Metadata.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_IERC20Metadata *IERC20MetadataSession) Decimals() (uint8, error) {
	return _IERC20Metadata.Contract.Decimals(&_IERC20Metadata.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_IERC20Metadata *IERC20MetadataCallerSession) Decimals() (uint8, error) {
	return _IERC20Metadata.Contract.Decimals(&_IERC20Metadata.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_IERC20Metadata *IERC20MetadataCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _IERC20Metadata.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_IERC20Metadata *IERC20MetadataSession) Name() (string, error) {
	return _IERC20Metadata.Contract.Name(&_IERC20Metadata.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_IERC20Metadata *IERC20MetadataCallerSession) Name() (string, error) {
	return _IERC20Metadata.Contract.Name(&_IERC20Metadata.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_IERC20Metadata *IERC20MetadataCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _IERC20Metadata.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_IERC20Metadata *IERC20MetadataSession) Symbol() (string, error) {
	return _IERC20Metadata.Contract.Symbol(&_IERC20Metadata.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_IERC20Metadata *IERC20MetadataCallerSession) Symbol() (string, error) {
	return _IERC20Metadata.Contract.Symbol(&_IERC20Metadata.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IERC20Metadata *IERC20MetadataCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IERC20Metadata.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IERC20Metadata *IERC20MetadataSession) TotalSupply() (*big.Int, error) {
	return _IERC20Metadata.Contract.TotalSupply(&_IERC20Metadata.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IERC20Metadata *IERC20MetadataCallerSession) TotalSupply() (*big.Int, error) {
	return _IERC20Metadata.Contract.TotalSupply(&_IERC20Metadata.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20Metadata *IERC20MetadataTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Metadata.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20Metadata *IERC20MetadataSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Metadata.Contract.Approve(&_IERC20Metadata.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20Metadata *IERC20MetadataTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Metadata.Contract.Approve(&_IERC20Metadata.TransactOpts, spender, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_IERC20Metadata *IERC20MetadataTransactor) Transfer(opts *bind.TransactOpts, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Metadata.contract.Transact(opts, "transfer", recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_IERC20Metadata *IERC20MetadataSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Metadata.Contract.Transfer(&_IERC20Metadata.TransactOpts, recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_IERC20Metadata *IERC20MetadataTransactorSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Metadata.Contract.Transfer(&_IERC20Metadata.TransactOpts, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_IERC20Metadata *IERC20MetadataTransactor) TransferFrom(opts *bind.TransactOpts, sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Metadata.contract.Transact(opts, "transferFrom", sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_IERC20Metadata *IERC20MetadataSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Metadata.Contract.TransferFrom(&_IERC20Metadata.TransactOpts, sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_IERC20Metadata *IERC20MetadataTransactorSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Metadata.Contract.TransferFrom(&_IERC20Metadata.TransactOpts, sender, recipient, amount)
}

// IERC20MetadataApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the IERC20Metadata contract.
type IERC20MetadataApprovalIterator struct {
	Event *IERC20MetadataApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC20MetadataApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC20MetadataApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC20MetadataApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC20MetadataApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC20MetadataApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC20MetadataApproval represents a Approval event raised by the IERC20Metadata contract.
type IERC20MetadataApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IERC20Metadata *IERC20MetadataFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*IERC20MetadataApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _IERC20Metadata.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &IERC20MetadataApprovalIterator{contract: _IERC20Metadata.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IERC20Metadata *IERC20MetadataFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *IERC20MetadataApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _IERC20Metadata.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC20MetadataApproval)
				if err := _IERC20Metadata.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IERC20Metadata *IERC20MetadataFilterer) ParseApproval(log types.Log) (*IERC20MetadataApproval, error) {
	event := new(IERC20MetadataApproval)
	if err := _IERC20Metadata.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC20MetadataTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the IERC20Metadata contract.
type IERC20MetadataTransferIterator struct {
	Event *IERC20MetadataTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC20MetadataTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC20MetadataTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC20MetadataTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC20MetadataTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC20MetadataTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC20MetadataTransfer represents a Transfer event raised by the IERC20Metadata contract.
type IERC20MetadataTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IERC20Metadata *IERC20MetadataFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*IERC20MetadataTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IERC20Metadata.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &IERC20MetadataTransferIterator{contract: _IERC20Metadata.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IERC20Metadata *IERC20MetadataFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *IERC20MetadataTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IERC20Metadata.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC20MetadataTransfer)
				if err := _IERC20Metadata.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IERC20Metadata *IERC20MetadataFilterer) ParseTransfer(log types.Log) (*IERC20MetadataTransfer, error) {
	event := new(IERC20MetadataTransfer)
	if err := _IERC20Metadata.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC20TransferableMetaData contains all meta data concerning the IERC20Transferable contract.
var IERC20TransferableMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// IERC20TransferableABI is the input ABI used to generate the binding from.
// Deprecated: Use IERC20TransferableMetaData.ABI instead.
var IERC20TransferableABI = IERC20TransferableMetaData.ABI

// IERC20Transferable is an auto generated Go binding around an Ethereum contract.
type IERC20Transferable struct {
	IERC20TransferableCaller     // Read-only binding to the contract
	IERC20TransferableTransactor // Write-only binding to the contract
	IERC20TransferableFilterer   // Log filterer for contract events
}

// IERC20TransferableCaller is an auto generated read-only Go binding around an Ethereum contract.
type IERC20TransferableCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20TransferableTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IERC20TransferableTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20TransferableFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IERC20TransferableFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20TransferableSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IERC20TransferableSession struct {
	Contract     *IERC20Transferable // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// IERC20TransferableCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IERC20TransferableCallerSession struct {
	Contract *IERC20TransferableCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// IERC20TransferableTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IERC20TransferableTransactorSession struct {
	Contract     *IERC20TransferableTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// IERC20TransferableRaw is an auto generated low-level Go binding around an Ethereum contract.
type IERC20TransferableRaw struct {
	Contract *IERC20Transferable // Generic contract binding to access the raw methods on
}

// IERC20TransferableCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IERC20TransferableCallerRaw struct {
	Contract *IERC20TransferableCaller // Generic read-only contract binding to access the raw methods on
}

// IERC20TransferableTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IERC20TransferableTransactorRaw struct {
	Contract *IERC20TransferableTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIERC20Transferable creates a new instance of IERC20Transferable, bound to a specific deployed contract.
func NewIERC20Transferable(address common.Address, backend bind.ContractBackend) (*IERC20Transferable, error) {
	contract, err := bindIERC20Transferable(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IERC20Transferable{IERC20TransferableCaller: IERC20TransferableCaller{contract: contract}, IERC20TransferableTransactor: IERC20TransferableTransactor{contract: contract}, IERC20TransferableFilterer: IERC20TransferableFilterer{contract: contract}}, nil
}

// NewIERC20TransferableCaller creates a new read-only instance of IERC20Transferable, bound to a specific deployed contract.
func NewIERC20TransferableCaller(address common.Address, caller bind.ContractCaller) (*IERC20TransferableCaller, error) {
	contract, err := bindIERC20Transferable(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IERC20TransferableCaller{contract: contract}, nil
}

// NewIERC20TransferableTransactor creates a new write-only instance of IERC20Transferable, bound to a specific deployed contract.
func NewIERC20TransferableTransactor(address common.Address, transactor bind.ContractTransactor) (*IERC20TransferableTransactor, error) {
	contract, err := bindIERC20Transferable(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IERC20TransferableTransactor{contract: contract}, nil
}

// NewIERC20TransferableFilterer creates a new log filterer instance of IERC20Transferable, bound to a specific deployed contract.
func NewIERC20TransferableFilterer(address common.Address, filterer bind.ContractFilterer) (*IERC20TransferableFilterer, error) {
	contract, err := bindIERC20Transferable(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IERC20TransferableFilterer{contract: contract}, nil
}

// bindIERC20Transferable binds a generic wrapper to an already deployed contract.
func bindIERC20Transferable(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IERC20TransferableABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC20Transferable *IERC20TransferableRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC20Transferable.Contract.IERC20TransferableCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC20Transferable *IERC20TransferableRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC20Transferable.Contract.IERC20TransferableTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC20Transferable *IERC20TransferableRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC20Transferable.Contract.IERC20TransferableTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC20Transferable *IERC20TransferableCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC20Transferable.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC20Transferable *IERC20TransferableTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC20Transferable.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC20Transferable *IERC20TransferableTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC20Transferable.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20Transferable *IERC20TransferableCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IERC20Transferable.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20Transferable *IERC20TransferableSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _IERC20Transferable.Contract.BalanceOf(&_IERC20Transferable.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20Transferable *IERC20TransferableCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _IERC20Transferable.Contract.BalanceOf(&_IERC20Transferable.CallOpts, account)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20Transferable *IERC20TransferableTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Transferable.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20Transferable *IERC20TransferableSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Transferable.Contract.Approve(&_IERC20Transferable.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20Transferable *IERC20TransferableTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Transferable.Contract.Approve(&_IERC20Transferable.TransactOpts, spender, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_IERC20Transferable *IERC20TransferableTransactor) Transfer(opts *bind.TransactOpts, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Transferable.contract.Transact(opts, "transfer", recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_IERC20Transferable *IERC20TransferableSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Transferable.Contract.Transfer(&_IERC20Transferable.TransactOpts, recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_IERC20Transferable *IERC20TransferableTransactorSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Transferable.Contract.Transfer(&_IERC20Transferable.TransactOpts, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_IERC20Transferable *IERC20TransferableTransactor) TransferFrom(opts *bind.TransactOpts, sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Transferable.contract.Transact(opts, "transferFrom", sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_IERC20Transferable *IERC20TransferableSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Transferable.Contract.TransferFrom(&_IERC20Transferable.TransactOpts, sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_IERC20Transferable *IERC20TransferableTransactorSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Transferable.Contract.TransferFrom(&_IERC20Transferable.TransactOpts, sender, recipient, amount)
}

// IERC721MetaData contains all meta data concerning the IERC721 contract.
var IERC721MetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// IERC721ABI is the input ABI used to generate the binding from.
// Deprecated: Use IERC721MetaData.ABI instead.
var IERC721ABI = IERC721MetaData.ABI

// IERC721 is an auto generated Go binding around an Ethereum contract.
type IERC721 struct {
	IERC721Caller     // Read-only binding to the contract
	IERC721Transactor // Write-only binding to the contract
	IERC721Filterer   // Log filterer for contract events
}

// IERC721Caller is an auto generated read-only Go binding around an Ethereum contract.
type IERC721Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721Transactor is an auto generated write-only Go binding around an Ethereum contract.
type IERC721Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IERC721Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IERC721Session struct {
	Contract     *IERC721          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IERC721CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IERC721CallerSession struct {
	Contract *IERC721Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// IERC721TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IERC721TransactorSession struct {
	Contract     *IERC721Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// IERC721Raw is an auto generated low-level Go binding around an Ethereum contract.
type IERC721Raw struct {
	Contract *IERC721 // Generic contract binding to access the raw methods on
}

// IERC721CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IERC721CallerRaw struct {
	Contract *IERC721Caller // Generic read-only contract binding to access the raw methods on
}

// IERC721TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IERC721TransactorRaw struct {
	Contract *IERC721Transactor // Generic write-only contract binding to access the raw methods on
}

// NewIERC721 creates a new instance of IERC721, bound to a specific deployed contract.
func NewIERC721(address common.Address, backend bind.ContractBackend) (*IERC721, error) {
	contract, err := bindIERC721(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IERC721{IERC721Caller: IERC721Caller{contract: contract}, IERC721Transactor: IERC721Transactor{contract: contract}, IERC721Filterer: IERC721Filterer{contract: contract}}, nil
}

// NewIERC721Caller creates a new read-only instance of IERC721, bound to a specific deployed contract.
func NewIERC721Caller(address common.Address, caller bind.ContractCaller) (*IERC721Caller, error) {
	contract, err := bindIERC721(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IERC721Caller{contract: contract}, nil
}

// NewIERC721Transactor creates a new write-only instance of IERC721, bound to a specific deployed contract.
func NewIERC721Transactor(address common.Address, transactor bind.ContractTransactor) (*IERC721Transactor, error) {
	contract, err := bindIERC721(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IERC721Transactor{contract: contract}, nil
}

// NewIERC721Filterer creates a new log filterer instance of IERC721, bound to a specific deployed contract.
func NewIERC721Filterer(address common.Address, filterer bind.ContractFilterer) (*IERC721Filterer, error) {
	contract, err := bindIERC721(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IERC721Filterer{contract: contract}, nil
}

// bindIERC721 binds a generic wrapper to an already deployed contract.
func bindIERC721(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IERC721ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC721 *IERC721Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC721.Contract.IERC721Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC721 *IERC721Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC721.Contract.IERC721Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC721 *IERC721Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC721.Contract.IERC721Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC721 *IERC721CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC721.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC721 *IERC721TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC721.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC721 *IERC721TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC721.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256 balance)
func (_IERC721 *IERC721Caller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IERC721.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256 balance)
func (_IERC721 *IERC721Session) BalanceOf(owner common.Address) (*big.Int, error) {
	return _IERC721.Contract.BalanceOf(&_IERC721.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256 balance)
func (_IERC721 *IERC721CallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _IERC721.Contract.BalanceOf(&_IERC721.CallOpts, owner)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address operator)
func (_IERC721 *IERC721Caller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _IERC721.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address operator)
func (_IERC721 *IERC721Session) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _IERC721.Contract.GetApproved(&_IERC721.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address operator)
func (_IERC721 *IERC721CallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _IERC721.Contract.GetApproved(&_IERC721.CallOpts, tokenId)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_IERC721 *IERC721Caller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _IERC721.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_IERC721 *IERC721Session) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _IERC721.Contract.IsApprovedForAll(&_IERC721.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_IERC721 *IERC721CallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _IERC721.Contract.IsApprovedForAll(&_IERC721.CallOpts, owner, operator)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address owner)
func (_IERC721 *IERC721Caller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _IERC721.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address owner)
func (_IERC721 *IERC721Session) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _IERC721.Contract.OwnerOf(&_IERC721.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address owner)
func (_IERC721 *IERC721CallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _IERC721.Contract.OwnerOf(&_IERC721.CallOpts, tokenId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_IERC721 *IERC721Caller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _IERC721.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_IERC721 *IERC721Session) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _IERC721.Contract.SupportsInterface(&_IERC721.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_IERC721 *IERC721CallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _IERC721.Contract.SupportsInterface(&_IERC721.CallOpts, interfaceId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_IERC721 *IERC721Transactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_IERC721 *IERC721Session) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721.Contract.Approve(&_IERC721.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_IERC721 *IERC721TransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721.Contract.Approve(&_IERC721.TransactOpts, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_IERC721 *IERC721Transactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_IERC721 *IERC721Session) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721.Contract.SafeTransferFrom(&_IERC721.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_IERC721 *IERC721TransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721.Contract.SafeTransferFrom(&_IERC721.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_IERC721 *IERC721Transactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _IERC721.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_IERC721 *IERC721Session) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _IERC721.Contract.SafeTransferFrom0(&_IERC721.TransactOpts, from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_IERC721 *IERC721TransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _IERC721.Contract.SafeTransferFrom0(&_IERC721.TransactOpts, from, to, tokenId, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool _approved) returns()
func (_IERC721 *IERC721Transactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, _approved bool) (*types.Transaction, error) {
	return _IERC721.contract.Transact(opts, "setApprovalForAll", operator, _approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool _approved) returns()
func (_IERC721 *IERC721Session) SetApprovalForAll(operator common.Address, _approved bool) (*types.Transaction, error) {
	return _IERC721.Contract.SetApprovalForAll(&_IERC721.TransactOpts, operator, _approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool _approved) returns()
func (_IERC721 *IERC721TransactorSession) SetApprovalForAll(operator common.Address, _approved bool) (*types.Transaction, error) {
	return _IERC721.Contract.SetApprovalForAll(&_IERC721.TransactOpts, operator, _approved)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_IERC721 *IERC721Transactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_IERC721 *IERC721Session) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721.Contract.TransferFrom(&_IERC721.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_IERC721 *IERC721TransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721.Contract.TransferFrom(&_IERC721.TransactOpts, from, to, tokenId)
}

// IERC721ApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the IERC721 contract.
type IERC721ApprovalIterator struct {
	Event *IERC721Approval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC721ApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC721Approval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC721Approval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC721ApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC721ApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC721Approval represents a Approval event raised by the IERC721 contract.
type IERC721Approval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_IERC721 *IERC721Filterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*IERC721ApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _IERC721.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &IERC721ApprovalIterator{contract: _IERC721.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_IERC721 *IERC721Filterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *IERC721Approval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _IERC721.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC721Approval)
				if err := _IERC721.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_IERC721 *IERC721Filterer) ParseApproval(log types.Log) (*IERC721Approval, error) {
	event := new(IERC721Approval)
	if err := _IERC721.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC721ApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the IERC721 contract.
type IERC721ApprovalForAllIterator struct {
	Event *IERC721ApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC721ApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC721ApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC721ApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC721ApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC721ApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC721ApprovalForAll represents a ApprovalForAll event raised by the IERC721 contract.
type IERC721ApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_IERC721 *IERC721Filterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*IERC721ApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _IERC721.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &IERC721ApprovalForAllIterator{contract: _IERC721.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_IERC721 *IERC721Filterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *IERC721ApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _IERC721.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC721ApprovalForAll)
				if err := _IERC721.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_IERC721 *IERC721Filterer) ParseApprovalForAll(log types.Log) (*IERC721ApprovalForAll, error) {
	event := new(IERC721ApprovalForAll)
	if err := _IERC721.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC721TransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the IERC721 contract.
type IERC721TransferIterator struct {
	Event *IERC721Transfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC721TransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC721Transfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC721Transfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC721TransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC721TransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC721Transfer represents a Transfer event raised by the IERC721 contract.
type IERC721Transfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_IERC721 *IERC721Filterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*IERC721TransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _IERC721.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &IERC721TransferIterator{contract: _IERC721.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_IERC721 *IERC721Filterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *IERC721Transfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _IERC721.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC721Transfer)
				if err := _IERC721.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_IERC721 *IERC721Filterer) ParseTransfer(log types.Log) (*IERC721Transfer, error) {
	event := new(IERC721Transfer)
	if err := _IERC721.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC721MetadataMetaData contains all meta data concerning the IERC721Metadata contract.
var IERC721MetadataMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// IERC721MetadataABI is the input ABI used to generate the binding from.
// Deprecated: Use IERC721MetadataMetaData.ABI instead.
var IERC721MetadataABI = IERC721MetadataMetaData.ABI

// IERC721Metadata is an auto generated Go binding around an Ethereum contract.
type IERC721Metadata struct {
	IERC721MetadataCaller     // Read-only binding to the contract
	IERC721MetadataTransactor // Write-only binding to the contract
	IERC721MetadataFilterer   // Log filterer for contract events
}

// IERC721MetadataCaller is an auto generated read-only Go binding around an Ethereum contract.
type IERC721MetadataCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721MetadataTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IERC721MetadataTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721MetadataFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IERC721MetadataFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721MetadataSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IERC721MetadataSession struct {
	Contract     *IERC721Metadata  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IERC721MetadataCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IERC721MetadataCallerSession struct {
	Contract *IERC721MetadataCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// IERC721MetadataTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IERC721MetadataTransactorSession struct {
	Contract     *IERC721MetadataTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// IERC721MetadataRaw is an auto generated low-level Go binding around an Ethereum contract.
type IERC721MetadataRaw struct {
	Contract *IERC721Metadata // Generic contract binding to access the raw methods on
}

// IERC721MetadataCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IERC721MetadataCallerRaw struct {
	Contract *IERC721MetadataCaller // Generic read-only contract binding to access the raw methods on
}

// IERC721MetadataTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IERC721MetadataTransactorRaw struct {
	Contract *IERC721MetadataTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIERC721Metadata creates a new instance of IERC721Metadata, bound to a specific deployed contract.
func NewIERC721Metadata(address common.Address, backend bind.ContractBackend) (*IERC721Metadata, error) {
	contract, err := bindIERC721Metadata(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IERC721Metadata{IERC721MetadataCaller: IERC721MetadataCaller{contract: contract}, IERC721MetadataTransactor: IERC721MetadataTransactor{contract: contract}, IERC721MetadataFilterer: IERC721MetadataFilterer{contract: contract}}, nil
}

// NewIERC721MetadataCaller creates a new read-only instance of IERC721Metadata, bound to a specific deployed contract.
func NewIERC721MetadataCaller(address common.Address, caller bind.ContractCaller) (*IERC721MetadataCaller, error) {
	contract, err := bindIERC721Metadata(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IERC721MetadataCaller{contract: contract}, nil
}

// NewIERC721MetadataTransactor creates a new write-only instance of IERC721Metadata, bound to a specific deployed contract.
func NewIERC721MetadataTransactor(address common.Address, transactor bind.ContractTransactor) (*IERC721MetadataTransactor, error) {
	contract, err := bindIERC721Metadata(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IERC721MetadataTransactor{contract: contract}, nil
}

// NewIERC721MetadataFilterer creates a new log filterer instance of IERC721Metadata, bound to a specific deployed contract.
func NewIERC721MetadataFilterer(address common.Address, filterer bind.ContractFilterer) (*IERC721MetadataFilterer, error) {
	contract, err := bindIERC721Metadata(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IERC721MetadataFilterer{contract: contract}, nil
}

// bindIERC721Metadata binds a generic wrapper to an already deployed contract.
func bindIERC721Metadata(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IERC721MetadataABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC721Metadata *IERC721MetadataRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC721Metadata.Contract.IERC721MetadataCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC721Metadata *IERC721MetadataRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC721Metadata.Contract.IERC721MetadataTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC721Metadata *IERC721MetadataRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC721Metadata.Contract.IERC721MetadataTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC721Metadata *IERC721MetadataCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC721Metadata.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC721Metadata *IERC721MetadataTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC721Metadata.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC721Metadata *IERC721MetadataTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC721Metadata.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256 balance)
func (_IERC721Metadata *IERC721MetadataCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IERC721Metadata.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256 balance)
func (_IERC721Metadata *IERC721MetadataSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _IERC721Metadata.Contract.BalanceOf(&_IERC721Metadata.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256 balance)
func (_IERC721Metadata *IERC721MetadataCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _IERC721Metadata.Contract.BalanceOf(&_IERC721Metadata.CallOpts, owner)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address operator)
func (_IERC721Metadata *IERC721MetadataCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _IERC721Metadata.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address operator)
func (_IERC721Metadata *IERC721MetadataSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _IERC721Metadata.Contract.GetApproved(&_IERC721Metadata.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address operator)
func (_IERC721Metadata *IERC721MetadataCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _IERC721Metadata.Contract.GetApproved(&_IERC721Metadata.CallOpts, tokenId)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_IERC721Metadata *IERC721MetadataCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _IERC721Metadata.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_IERC721Metadata *IERC721MetadataSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _IERC721Metadata.Contract.IsApprovedForAll(&_IERC721Metadata.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_IERC721Metadata *IERC721MetadataCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _IERC721Metadata.Contract.IsApprovedForAll(&_IERC721Metadata.CallOpts, owner, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_IERC721Metadata *IERC721MetadataCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _IERC721Metadata.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_IERC721Metadata *IERC721MetadataSession) Name() (string, error) {
	return _IERC721Metadata.Contract.Name(&_IERC721Metadata.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_IERC721Metadata *IERC721MetadataCallerSession) Name() (string, error) {
	return _IERC721Metadata.Contract.Name(&_IERC721Metadata.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address owner)
func (_IERC721Metadata *IERC721MetadataCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _IERC721Metadata.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address owner)
func (_IERC721Metadata *IERC721MetadataSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _IERC721Metadata.Contract.OwnerOf(&_IERC721Metadata.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address owner)
func (_IERC721Metadata *IERC721MetadataCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _IERC721Metadata.Contract.OwnerOf(&_IERC721Metadata.CallOpts, tokenId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_IERC721Metadata *IERC721MetadataCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _IERC721Metadata.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_IERC721Metadata *IERC721MetadataSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _IERC721Metadata.Contract.SupportsInterface(&_IERC721Metadata.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_IERC721Metadata *IERC721MetadataCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _IERC721Metadata.Contract.SupportsInterface(&_IERC721Metadata.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_IERC721Metadata *IERC721MetadataCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _IERC721Metadata.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_IERC721Metadata *IERC721MetadataSession) Symbol() (string, error) {
	return _IERC721Metadata.Contract.Symbol(&_IERC721Metadata.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_IERC721Metadata *IERC721MetadataCallerSession) Symbol() (string, error) {
	return _IERC721Metadata.Contract.Symbol(&_IERC721Metadata.CallOpts)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_IERC721Metadata *IERC721MetadataCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _IERC721Metadata.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_IERC721Metadata *IERC721MetadataSession) TokenURI(tokenId *big.Int) (string, error) {
	return _IERC721Metadata.Contract.TokenURI(&_IERC721Metadata.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_IERC721Metadata *IERC721MetadataCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _IERC721Metadata.Contract.TokenURI(&_IERC721Metadata.CallOpts, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_IERC721Metadata *IERC721MetadataTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721Metadata.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_IERC721Metadata *IERC721MetadataSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721Metadata.Contract.Approve(&_IERC721Metadata.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_IERC721Metadata *IERC721MetadataTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721Metadata.Contract.Approve(&_IERC721Metadata.TransactOpts, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_IERC721Metadata *IERC721MetadataTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721Metadata.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_IERC721Metadata *IERC721MetadataSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721Metadata.Contract.SafeTransferFrom(&_IERC721Metadata.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_IERC721Metadata *IERC721MetadataTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721Metadata.Contract.SafeTransferFrom(&_IERC721Metadata.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_IERC721Metadata *IERC721MetadataTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _IERC721Metadata.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_IERC721Metadata *IERC721MetadataSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _IERC721Metadata.Contract.SafeTransferFrom0(&_IERC721Metadata.TransactOpts, from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_IERC721Metadata *IERC721MetadataTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _IERC721Metadata.Contract.SafeTransferFrom0(&_IERC721Metadata.TransactOpts, from, to, tokenId, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool _approved) returns()
func (_IERC721Metadata *IERC721MetadataTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, _approved bool) (*types.Transaction, error) {
	return _IERC721Metadata.contract.Transact(opts, "setApprovalForAll", operator, _approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool _approved) returns()
func (_IERC721Metadata *IERC721MetadataSession) SetApprovalForAll(operator common.Address, _approved bool) (*types.Transaction, error) {
	return _IERC721Metadata.Contract.SetApprovalForAll(&_IERC721Metadata.TransactOpts, operator, _approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool _approved) returns()
func (_IERC721Metadata *IERC721MetadataTransactorSession) SetApprovalForAll(operator common.Address, _approved bool) (*types.Transaction, error) {
	return _IERC721Metadata.Contract.SetApprovalForAll(&_IERC721Metadata.TransactOpts, operator, _approved)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_IERC721Metadata *IERC721MetadataTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721Metadata.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_IERC721Metadata *IERC721MetadataSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721Metadata.Contract.TransferFrom(&_IERC721Metadata.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_IERC721Metadata *IERC721MetadataTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721Metadata.Contract.TransferFrom(&_IERC721Metadata.TransactOpts, from, to, tokenId)
}

// IERC721MetadataApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the IERC721Metadata contract.
type IERC721MetadataApprovalIterator struct {
	Event *IERC721MetadataApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC721MetadataApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC721MetadataApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC721MetadataApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC721MetadataApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC721MetadataApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC721MetadataApproval represents a Approval event raised by the IERC721Metadata contract.
type IERC721MetadataApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_IERC721Metadata *IERC721MetadataFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*IERC721MetadataApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _IERC721Metadata.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &IERC721MetadataApprovalIterator{contract: _IERC721Metadata.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_IERC721Metadata *IERC721MetadataFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *IERC721MetadataApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _IERC721Metadata.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC721MetadataApproval)
				if err := _IERC721Metadata.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_IERC721Metadata *IERC721MetadataFilterer) ParseApproval(log types.Log) (*IERC721MetadataApproval, error) {
	event := new(IERC721MetadataApproval)
	if err := _IERC721Metadata.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC721MetadataApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the IERC721Metadata contract.
type IERC721MetadataApprovalForAllIterator struct {
	Event *IERC721MetadataApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC721MetadataApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC721MetadataApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC721MetadataApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC721MetadataApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC721MetadataApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC721MetadataApprovalForAll represents a ApprovalForAll event raised by the IERC721Metadata contract.
type IERC721MetadataApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_IERC721Metadata *IERC721MetadataFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*IERC721MetadataApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _IERC721Metadata.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &IERC721MetadataApprovalForAllIterator{contract: _IERC721Metadata.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_IERC721Metadata *IERC721MetadataFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *IERC721MetadataApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _IERC721Metadata.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC721MetadataApprovalForAll)
				if err := _IERC721Metadata.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_IERC721Metadata *IERC721MetadataFilterer) ParseApprovalForAll(log types.Log) (*IERC721MetadataApprovalForAll, error) {
	event := new(IERC721MetadataApprovalForAll)
	if err := _IERC721Metadata.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC721MetadataTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the IERC721Metadata contract.
type IERC721MetadataTransferIterator struct {
	Event *IERC721MetadataTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC721MetadataTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC721MetadataTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC721MetadataTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC721MetadataTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC721MetadataTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC721MetadataTransfer represents a Transfer event raised by the IERC721Metadata contract.
type IERC721MetadataTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_IERC721Metadata *IERC721MetadataFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*IERC721MetadataTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _IERC721Metadata.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &IERC721MetadataTransferIterator{contract: _IERC721Metadata.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_IERC721Metadata *IERC721MetadataFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *IERC721MetadataTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _IERC721Metadata.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC721MetadataTransfer)
				if err := _IERC721Metadata.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_IERC721Metadata *IERC721MetadataFilterer) ParseTransfer(log types.Log) (*IERC721MetadataTransfer, error) {
	event := new(IERC721MetadataTransfer)
	if err := _IERC721Metadata.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC721ReceiverMetaData contains all meta data concerning the IERC721Receiver contract.
var IERC721ReceiverMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// IERC721ReceiverABI is the input ABI used to generate the binding from.
// Deprecated: Use IERC721ReceiverMetaData.ABI instead.
var IERC721ReceiverABI = IERC721ReceiverMetaData.ABI

// IERC721Receiver is an auto generated Go binding around an Ethereum contract.
type IERC721Receiver struct {
	IERC721ReceiverCaller     // Read-only binding to the contract
	IERC721ReceiverTransactor // Write-only binding to the contract
	IERC721ReceiverFilterer   // Log filterer for contract events
}

// IERC721ReceiverCaller is an auto generated read-only Go binding around an Ethereum contract.
type IERC721ReceiverCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721ReceiverTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IERC721ReceiverTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721ReceiverFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IERC721ReceiverFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721ReceiverSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IERC721ReceiverSession struct {
	Contract     *IERC721Receiver  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IERC721ReceiverCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IERC721ReceiverCallerSession struct {
	Contract *IERC721ReceiverCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// IERC721ReceiverTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IERC721ReceiverTransactorSession struct {
	Contract     *IERC721ReceiverTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// IERC721ReceiverRaw is an auto generated low-level Go binding around an Ethereum contract.
type IERC721ReceiverRaw struct {
	Contract *IERC721Receiver // Generic contract binding to access the raw methods on
}

// IERC721ReceiverCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IERC721ReceiverCallerRaw struct {
	Contract *IERC721ReceiverCaller // Generic read-only contract binding to access the raw methods on
}

// IERC721ReceiverTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IERC721ReceiverTransactorRaw struct {
	Contract *IERC721ReceiverTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIERC721Receiver creates a new instance of IERC721Receiver, bound to a specific deployed contract.
func NewIERC721Receiver(address common.Address, backend bind.ContractBackend) (*IERC721Receiver, error) {
	contract, err := bindIERC721Receiver(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IERC721Receiver{IERC721ReceiverCaller: IERC721ReceiverCaller{contract: contract}, IERC721ReceiverTransactor: IERC721ReceiverTransactor{contract: contract}, IERC721ReceiverFilterer: IERC721ReceiverFilterer{contract: contract}}, nil
}

// NewIERC721ReceiverCaller creates a new read-only instance of IERC721Receiver, bound to a specific deployed contract.
func NewIERC721ReceiverCaller(address common.Address, caller bind.ContractCaller) (*IERC721ReceiverCaller, error) {
	contract, err := bindIERC721Receiver(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IERC721ReceiverCaller{contract: contract}, nil
}

// NewIERC721ReceiverTransactor creates a new write-only instance of IERC721Receiver, bound to a specific deployed contract.
func NewIERC721ReceiverTransactor(address common.Address, transactor bind.ContractTransactor) (*IERC721ReceiverTransactor, error) {
	contract, err := bindIERC721Receiver(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IERC721ReceiverTransactor{contract: contract}, nil
}

// NewIERC721ReceiverFilterer creates a new log filterer instance of IERC721Receiver, bound to a specific deployed contract.
func NewIERC721ReceiverFilterer(address common.Address, filterer bind.ContractFilterer) (*IERC721ReceiverFilterer, error) {
	contract, err := bindIERC721Receiver(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IERC721ReceiverFilterer{contract: contract}, nil
}

// bindIERC721Receiver binds a generic wrapper to an already deployed contract.
func bindIERC721Receiver(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IERC721ReceiverABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC721Receiver *IERC721ReceiverRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC721Receiver.Contract.IERC721ReceiverCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC721Receiver *IERC721ReceiverRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC721Receiver.Contract.IERC721ReceiverTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC721Receiver *IERC721ReceiverRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC721Receiver.Contract.IERC721ReceiverTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC721Receiver *IERC721ReceiverCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC721Receiver.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC721Receiver *IERC721ReceiverTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC721Receiver.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC721Receiver *IERC721ReceiverTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC721Receiver.Contract.contract.Transact(opts, method, params...)
}

// OnERC721Received is a paid mutator transaction binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address operator, address from, uint256 tokenId, bytes data) returns(bytes4)
func (_IERC721Receiver *IERC721ReceiverTransactor) OnERC721Received(opts *bind.TransactOpts, operator common.Address, from common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _IERC721Receiver.contract.Transact(opts, "onERC721Received", operator, from, tokenId, data)
}

// OnERC721Received is a paid mutator transaction binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address operator, address from, uint256 tokenId, bytes data) returns(bytes4)
func (_IERC721Receiver *IERC721ReceiverSession) OnERC721Received(operator common.Address, from common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _IERC721Receiver.Contract.OnERC721Received(&_IERC721Receiver.TransactOpts, operator, from, tokenId, data)
}

// OnERC721Received is a paid mutator transaction binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address operator, address from, uint256 tokenId, bytes data) returns(bytes4)
func (_IERC721Receiver *IERC721ReceiverTransactorSession) OnERC721Received(operator common.Address, from common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _IERC721Receiver.Contract.OnERC721Received(&_IERC721Receiver.TransactOpts, operator, from, tokenId, data)
}

// IERC721TransferableMetaData contains all meta data concerning the IERC721Transferable contract.
var IERC721TransferableMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// IERC721TransferableABI is the input ABI used to generate the binding from.
// Deprecated: Use IERC721TransferableMetaData.ABI instead.
var IERC721TransferableABI = IERC721TransferableMetaData.ABI

// IERC721Transferable is an auto generated Go binding around an Ethereum contract.
type IERC721Transferable struct {
	IERC721TransferableCaller     // Read-only binding to the contract
	IERC721TransferableTransactor // Write-only binding to the contract
	IERC721TransferableFilterer   // Log filterer for contract events
}

// IERC721TransferableCaller is an auto generated read-only Go binding around an Ethereum contract.
type IERC721TransferableCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721TransferableTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IERC721TransferableTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721TransferableFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IERC721TransferableFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721TransferableSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IERC721TransferableSession struct {
	Contract     *IERC721Transferable // Generic contract binding to set the session for
	CallOpts     bind.CallOpts        // Call options to use throughout this session
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// IERC721TransferableCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IERC721TransferableCallerSession struct {
	Contract *IERC721TransferableCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts              // Call options to use throughout this session
}

// IERC721TransferableTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IERC721TransferableTransactorSession struct {
	Contract     *IERC721TransferableTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts              // Transaction auth options to use throughout this session
}

// IERC721TransferableRaw is an auto generated low-level Go binding around an Ethereum contract.
type IERC721TransferableRaw struct {
	Contract *IERC721Transferable // Generic contract binding to access the raw methods on
}

// IERC721TransferableCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IERC721TransferableCallerRaw struct {
	Contract *IERC721TransferableCaller // Generic read-only contract binding to access the raw methods on
}

// IERC721TransferableTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IERC721TransferableTransactorRaw struct {
	Contract *IERC721TransferableTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIERC721Transferable creates a new instance of IERC721Transferable, bound to a specific deployed contract.
func NewIERC721Transferable(address common.Address, backend bind.ContractBackend) (*IERC721Transferable, error) {
	contract, err := bindIERC721Transferable(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IERC721Transferable{IERC721TransferableCaller: IERC721TransferableCaller{contract: contract}, IERC721TransferableTransactor: IERC721TransferableTransactor{contract: contract}, IERC721TransferableFilterer: IERC721TransferableFilterer{contract: contract}}, nil
}

// NewIERC721TransferableCaller creates a new read-only instance of IERC721Transferable, bound to a specific deployed contract.
func NewIERC721TransferableCaller(address common.Address, caller bind.ContractCaller) (*IERC721TransferableCaller, error) {
	contract, err := bindIERC721Transferable(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IERC721TransferableCaller{contract: contract}, nil
}

// NewIERC721TransferableTransactor creates a new write-only instance of IERC721Transferable, bound to a specific deployed contract.
func NewIERC721TransferableTransactor(address common.Address, transactor bind.ContractTransactor) (*IERC721TransferableTransactor, error) {
	contract, err := bindIERC721Transferable(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IERC721TransferableTransactor{contract: contract}, nil
}

// NewIERC721TransferableFilterer creates a new log filterer instance of IERC721Transferable, bound to a specific deployed contract.
func NewIERC721TransferableFilterer(address common.Address, filterer bind.ContractFilterer) (*IERC721TransferableFilterer, error) {
	contract, err := bindIERC721Transferable(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IERC721TransferableFilterer{contract: contract}, nil
}

// bindIERC721Transferable binds a generic wrapper to an already deployed contract.
func bindIERC721Transferable(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IERC721TransferableABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC721Transferable *IERC721TransferableRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC721Transferable.Contract.IERC721TransferableCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC721Transferable *IERC721TransferableRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC721Transferable.Contract.IERC721TransferableTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC721Transferable *IERC721TransferableRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC721Transferable.Contract.IERC721TransferableTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC721Transferable *IERC721TransferableCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC721Transferable.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC721Transferable *IERC721TransferableTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC721Transferable.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC721Transferable *IERC721TransferableTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC721Transferable.Contract.contract.Transact(opts, method, params...)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_IERC721Transferable *IERC721TransferableTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721Transferable.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_IERC721Transferable *IERC721TransferableSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721Transferable.Contract.SafeTransferFrom(&_IERC721Transferable.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_IERC721Transferable *IERC721TransferableTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721Transferable.Contract.SafeTransferFrom(&_IERC721Transferable.TransactOpts, from, to, tokenId)
}

// IMagicEthTransferMetaData contains all meta data concerning the IMagicEthTransfer contract.
var IMagicEthTransferMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"magic_\",\"type\":\"uint8\"}],\"name\":\"depositEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]",
}

// IMagicEthTransferABI is the input ABI used to generate the binding from.
// Deprecated: Use IMagicEthTransferMetaData.ABI instead.
var IMagicEthTransferABI = IMagicEthTransferMetaData.ABI

// IMagicEthTransfer is an auto generated Go binding around an Ethereum contract.
type IMagicEthTransfer struct {
	IMagicEthTransferCaller     // Read-only binding to the contract
	IMagicEthTransferTransactor // Write-only binding to the contract
	IMagicEthTransferFilterer   // Log filterer for contract events
}

// IMagicEthTransferCaller is an auto generated read-only Go binding around an Ethereum contract.
type IMagicEthTransferCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IMagicEthTransferTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IMagicEthTransferTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IMagicEthTransferFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IMagicEthTransferFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IMagicEthTransferSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IMagicEthTransferSession struct {
	Contract     *IMagicEthTransfer // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// IMagicEthTransferCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IMagicEthTransferCallerSession struct {
	Contract *IMagicEthTransferCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// IMagicEthTransferTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IMagicEthTransferTransactorSession struct {
	Contract     *IMagicEthTransferTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// IMagicEthTransferRaw is an auto generated low-level Go binding around an Ethereum contract.
type IMagicEthTransferRaw struct {
	Contract *IMagicEthTransfer // Generic contract binding to access the raw methods on
}

// IMagicEthTransferCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IMagicEthTransferCallerRaw struct {
	Contract *IMagicEthTransferCaller // Generic read-only contract binding to access the raw methods on
}

// IMagicEthTransferTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IMagicEthTransferTransactorRaw struct {
	Contract *IMagicEthTransferTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIMagicEthTransfer creates a new instance of IMagicEthTransfer, bound to a specific deployed contract.
func NewIMagicEthTransfer(address common.Address, backend bind.ContractBackend) (*IMagicEthTransfer, error) {
	contract, err := bindIMagicEthTransfer(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IMagicEthTransfer{IMagicEthTransferCaller: IMagicEthTransferCaller{contract: contract}, IMagicEthTransferTransactor: IMagicEthTransferTransactor{contract: contract}, IMagicEthTransferFilterer: IMagicEthTransferFilterer{contract: contract}}, nil
}

// NewIMagicEthTransferCaller creates a new read-only instance of IMagicEthTransfer, bound to a specific deployed contract.
func NewIMagicEthTransferCaller(address common.Address, caller bind.ContractCaller) (*IMagicEthTransferCaller, error) {
	contract, err := bindIMagicEthTransfer(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IMagicEthTransferCaller{contract: contract}, nil
}

// NewIMagicEthTransferTransactor creates a new write-only instance of IMagicEthTransfer, bound to a specific deployed contract.
func NewIMagicEthTransferTransactor(address common.Address, transactor bind.ContractTransactor) (*IMagicEthTransferTransactor, error) {
	contract, err := bindIMagicEthTransfer(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IMagicEthTransferTransactor{contract: contract}, nil
}

// NewIMagicEthTransferFilterer creates a new log filterer instance of IMagicEthTransfer, bound to a specific deployed contract.
func NewIMagicEthTransferFilterer(address common.Address, filterer bind.ContractFilterer) (*IMagicEthTransferFilterer, error) {
	contract, err := bindIMagicEthTransfer(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IMagicEthTransferFilterer{contract: contract}, nil
}

// bindIMagicEthTransfer binds a generic wrapper to an already deployed contract.
func bindIMagicEthTransfer(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IMagicEthTransferABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IMagicEthTransfer *IMagicEthTransferRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IMagicEthTransfer.Contract.IMagicEthTransferCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IMagicEthTransfer *IMagicEthTransferRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IMagicEthTransfer.Contract.IMagicEthTransferTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IMagicEthTransfer *IMagicEthTransferRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IMagicEthTransfer.Contract.IMagicEthTransferTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IMagicEthTransfer *IMagicEthTransferCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IMagicEthTransfer.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IMagicEthTransfer *IMagicEthTransferTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IMagicEthTransfer.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IMagicEthTransfer *IMagicEthTransferTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IMagicEthTransfer.Contract.contract.Transact(opts, method, params...)
}

// DepositEth is a paid mutator transaction binding the contract method 0x99a89ecc.
//
// Solidity: function depositEth(uint8 magic_) payable returns()
func (_IMagicEthTransfer *IMagicEthTransferTransactor) DepositEth(opts *bind.TransactOpts, magic_ uint8) (*types.Transaction, error) {
	return _IMagicEthTransfer.contract.Transact(opts, "depositEth", magic_)
}

// DepositEth is a paid mutator transaction binding the contract method 0x99a89ecc.
//
// Solidity: function depositEth(uint8 magic_) payable returns()
func (_IMagicEthTransfer *IMagicEthTransferSession) DepositEth(magic_ uint8) (*types.Transaction, error) {
	return _IMagicEthTransfer.Contract.DepositEth(&_IMagicEthTransfer.TransactOpts, magic_)
}

// DepositEth is a paid mutator transaction binding the contract method 0x99a89ecc.
//
// Solidity: function depositEth(uint8 magic_) payable returns()
func (_IMagicEthTransfer *IMagicEthTransferTransactorSession) DepositEth(magic_ uint8) (*types.Transaction, error) {
	return _IMagicEthTransfer.Contract.DepositEth(&_IMagicEthTransfer.TransactOpts, magic_)
}

// IMagicTokenTransferMetaData contains all meta data concerning the IMagicTokenTransfer contract.
var IMagicTokenTransferMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"magic_\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]",
}

// IMagicTokenTransferABI is the input ABI used to generate the binding from.
// Deprecated: Use IMagicTokenTransferMetaData.ABI instead.
var IMagicTokenTransferABI = IMagicTokenTransferMetaData.ABI

// IMagicTokenTransfer is an auto generated Go binding around an Ethereum contract.
type IMagicTokenTransfer struct {
	IMagicTokenTransferCaller     // Read-only binding to the contract
	IMagicTokenTransferTransactor // Write-only binding to the contract
	IMagicTokenTransferFilterer   // Log filterer for contract events
}

// IMagicTokenTransferCaller is an auto generated read-only Go binding around an Ethereum contract.
type IMagicTokenTransferCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IMagicTokenTransferTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IMagicTokenTransferTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IMagicTokenTransferFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IMagicTokenTransferFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IMagicTokenTransferSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IMagicTokenTransferSession struct {
	Contract     *IMagicTokenTransfer // Generic contract binding to set the session for
	CallOpts     bind.CallOpts        // Call options to use throughout this session
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// IMagicTokenTransferCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IMagicTokenTransferCallerSession struct {
	Contract *IMagicTokenTransferCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts              // Call options to use throughout this session
}

// IMagicTokenTransferTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IMagicTokenTransferTransactorSession struct {
	Contract     *IMagicTokenTransferTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts              // Transaction auth options to use throughout this session
}

// IMagicTokenTransferRaw is an auto generated low-level Go binding around an Ethereum contract.
type IMagicTokenTransferRaw struct {
	Contract *IMagicTokenTransfer // Generic contract binding to access the raw methods on
}

// IMagicTokenTransferCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IMagicTokenTransferCallerRaw struct {
	Contract *IMagicTokenTransferCaller // Generic read-only contract binding to access the raw methods on
}

// IMagicTokenTransferTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IMagicTokenTransferTransactorRaw struct {
	Contract *IMagicTokenTransferTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIMagicTokenTransfer creates a new instance of IMagicTokenTransfer, bound to a specific deployed contract.
func NewIMagicTokenTransfer(address common.Address, backend bind.ContractBackend) (*IMagicTokenTransfer, error) {
	contract, err := bindIMagicTokenTransfer(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IMagicTokenTransfer{IMagicTokenTransferCaller: IMagicTokenTransferCaller{contract: contract}, IMagicTokenTransferTransactor: IMagicTokenTransferTransactor{contract: contract}, IMagicTokenTransferFilterer: IMagicTokenTransferFilterer{contract: contract}}, nil
}

// NewIMagicTokenTransferCaller creates a new read-only instance of IMagicTokenTransfer, bound to a specific deployed contract.
func NewIMagicTokenTransferCaller(address common.Address, caller bind.ContractCaller) (*IMagicTokenTransferCaller, error) {
	contract, err := bindIMagicTokenTransfer(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IMagicTokenTransferCaller{contract: contract}, nil
}

// NewIMagicTokenTransferTransactor creates a new write-only instance of IMagicTokenTransfer, bound to a specific deployed contract.
func NewIMagicTokenTransferTransactor(address common.Address, transactor bind.ContractTransactor) (*IMagicTokenTransferTransactor, error) {
	contract, err := bindIMagicTokenTransfer(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IMagicTokenTransferTransactor{contract: contract}, nil
}

// NewIMagicTokenTransferFilterer creates a new log filterer instance of IMagicTokenTransfer, bound to a specific deployed contract.
func NewIMagicTokenTransferFilterer(address common.Address, filterer bind.ContractFilterer) (*IMagicTokenTransferFilterer, error) {
	contract, err := bindIMagicTokenTransfer(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IMagicTokenTransferFilterer{contract: contract}, nil
}

// bindIMagicTokenTransfer binds a generic wrapper to an already deployed contract.
func bindIMagicTokenTransfer(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IMagicTokenTransferABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IMagicTokenTransfer *IMagicTokenTransferRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IMagicTokenTransfer.Contract.IMagicTokenTransferCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IMagicTokenTransfer *IMagicTokenTransferRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IMagicTokenTransfer.Contract.IMagicTokenTransferTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IMagicTokenTransfer *IMagicTokenTransferRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IMagicTokenTransfer.Contract.IMagicTokenTransferTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IMagicTokenTransfer *IMagicTokenTransferCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IMagicTokenTransfer.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IMagicTokenTransfer *IMagicTokenTransferTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IMagicTokenTransfer.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IMagicTokenTransfer *IMagicTokenTransferTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IMagicTokenTransfer.Contract.contract.Transact(opts, method, params...)
}

// DepositToken is a paid mutator transaction binding the contract method 0x8191f5e5.
//
// Solidity: function depositToken(uint8 magic_, uint256 amount_) payable returns()
func (_IMagicTokenTransfer *IMagicTokenTransferTransactor) DepositToken(opts *bind.TransactOpts, magic_ uint8, amount_ *big.Int) (*types.Transaction, error) {
	return _IMagicTokenTransfer.contract.Transact(opts, "depositToken", magic_, amount_)
}

// DepositToken is a paid mutator transaction binding the contract method 0x8191f5e5.
//
// Solidity: function depositToken(uint8 magic_, uint256 amount_) payable returns()
func (_IMagicTokenTransfer *IMagicTokenTransferSession) DepositToken(magic_ uint8, amount_ *big.Int) (*types.Transaction, error) {
	return _IMagicTokenTransfer.Contract.DepositToken(&_IMagicTokenTransfer.TransactOpts, magic_, amount_)
}

// DepositToken is a paid mutator transaction binding the contract method 0x8191f5e5.
//
// Solidity: function depositToken(uint8 magic_, uint256 amount_) payable returns()
func (_IMagicTokenTransfer *IMagicTokenTransferTransactorSession) DepositToken(magic_ uint8, amount_ *big.Int) (*types.Transaction, error) {
	return _IMagicTokenTransfer.Contract.DepositToken(&_IMagicTokenTransfer.TransactOpts, magic_, amount_)
}

// INFTStakeMetaData contains all meta data concerning the INFTStake contract.
var INFTStakeMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration_\",\"type\":\"uint256\"}],\"name\":\"lockPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"numberShares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// INFTStakeABI is the input ABI used to generate the binding from.
// Deprecated: Use INFTStakeMetaData.ABI instead.
var INFTStakeABI = INFTStakeMetaData.ABI

// INFTStake is an auto generated Go binding around an Ethereum contract.
type INFTStake struct {
	INFTStakeCaller     // Read-only binding to the contract
	INFTStakeTransactor // Write-only binding to the contract
	INFTStakeFilterer   // Log filterer for contract events
}

// INFTStakeCaller is an auto generated read-only Go binding around an Ethereum contract.
type INFTStakeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// INFTStakeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type INFTStakeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// INFTStakeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type INFTStakeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// INFTStakeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type INFTStakeSession struct {
	Contract     *INFTStake        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// INFTStakeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type INFTStakeCallerSession struct {
	Contract *INFTStakeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// INFTStakeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type INFTStakeTransactorSession struct {
	Contract     *INFTStakeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// INFTStakeRaw is an auto generated low-level Go binding around an Ethereum contract.
type INFTStakeRaw struct {
	Contract *INFTStake // Generic contract binding to access the raw methods on
}

// INFTStakeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type INFTStakeCallerRaw struct {
	Contract *INFTStakeCaller // Generic read-only contract binding to access the raw methods on
}

// INFTStakeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type INFTStakeTransactorRaw struct {
	Contract *INFTStakeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewINFTStake creates a new instance of INFTStake, bound to a specific deployed contract.
func NewINFTStake(address common.Address, backend bind.ContractBackend) (*INFTStake, error) {
	contract, err := bindINFTStake(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &INFTStake{INFTStakeCaller: INFTStakeCaller{contract: contract}, INFTStakeTransactor: INFTStakeTransactor{contract: contract}, INFTStakeFilterer: INFTStakeFilterer{contract: contract}}, nil
}

// NewINFTStakeCaller creates a new read-only instance of INFTStake, bound to a specific deployed contract.
func NewINFTStakeCaller(address common.Address, caller bind.ContractCaller) (*INFTStakeCaller, error) {
	contract, err := bindINFTStake(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &INFTStakeCaller{contract: contract}, nil
}

// NewINFTStakeTransactor creates a new write-only instance of INFTStake, bound to a specific deployed contract.
func NewINFTStakeTransactor(address common.Address, transactor bind.ContractTransactor) (*INFTStakeTransactor, error) {
	contract, err := bindINFTStake(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &INFTStakeTransactor{contract: contract}, nil
}

// NewINFTStakeFilterer creates a new log filterer instance of INFTStake, bound to a specific deployed contract.
func NewINFTStakeFilterer(address common.Address, filterer bind.ContractFilterer) (*INFTStakeFilterer, error) {
	contract, err := bindINFTStake(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &INFTStakeFilterer{contract: contract}, nil
}

// bindINFTStake binds a generic wrapper to an already deployed contract.
func bindINFTStake(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(INFTStakeABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_INFTStake *INFTStakeRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _INFTStake.Contract.INFTStakeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_INFTStake *INFTStakeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _INFTStake.Contract.INFTStakeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_INFTStake *INFTStakeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _INFTStake.Contract.INFTStakeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_INFTStake *INFTStakeCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _INFTStake.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_INFTStake *INFTStakeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _INFTStake.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_INFTStake *INFTStakeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _INFTStake.Contract.contract.Transact(opts, method, params...)
}

// LockPosition is a paid mutator transaction binding the contract method 0x0cc65dfb.
//
// Solidity: function lockPosition(address caller_, uint256 tokenID_, uint256 lockDuration_) returns(uint256 numberShares)
func (_INFTStake *INFTStakeTransactor) LockPosition(opts *bind.TransactOpts, caller_ common.Address, tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.contract.Transact(opts, "lockPosition", caller_, tokenID_, lockDuration_)
}

// LockPosition is a paid mutator transaction binding the contract method 0x0cc65dfb.
//
// Solidity: function lockPosition(address caller_, uint256 tokenID_, uint256 lockDuration_) returns(uint256 numberShares)
func (_INFTStake *INFTStakeSession) LockPosition(caller_ common.Address, tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.Contract.LockPosition(&_INFTStake.TransactOpts, caller_, tokenID_, lockDuration_)
}

// LockPosition is a paid mutator transaction binding the contract method 0x0cc65dfb.
//
// Solidity: function lockPosition(address caller_, uint256 tokenID_, uint256 lockDuration_) returns(uint256 numberShares)
func (_INFTStake *INFTStakeTransactorSession) LockPosition(caller_ common.Address, tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.Contract.LockPosition(&_INFTStake.TransactOpts, caller_, tokenID_, lockDuration_)
}

// MadByteMetaData contains all meta data concerning the MadByte contract.
var MadByteMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"madStaking_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minerStaking_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lpStaking_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"foundation_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"to0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"to1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"to2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"to3\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositReceivedBN\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolBalance_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numEth_\",\"type\":\"uint256\"}],\"name\":\"EthtoMB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolBalance_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numMB_\",\"type\":\"uint256\"}],\"name\":\"MBtoEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"numEth\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minEth_\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"numEth\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minEth_\",\"type\":\"uint256\"}],\"name\":\"burnTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"numEth\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"depositTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"to0_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to1_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to2_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to3_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"depositToBN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distribute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minerAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpStakingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"foundationAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositID\",\"type\":\"uint256\"}],\"name\":\"getDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositID\",\"type\":\"uint256\"}],\"name\":\"getDepositOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"to0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to3\",\"type\":\"uint256\"}],\"internalType\":\"structMadByte.BNAddress\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalMadBytesDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minMB_\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nuMB\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minMB_\",\"type\":\"uint256\"}],\"name\":\"mintDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minMB_\",\"type\":\"uint256\"}],\"name\":\"mintTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nuMB\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"foundation_\",\"type\":\"address\"}],\"name\":\"setFoundation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpStaking_\",\"type\":\"address\"}],\"name\":\"setLPStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"madStaking_\",\"type\":\"address\"}],\"name\":\"setMadStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minerStaking_\",\"type\":\"address\"}],\"name\":\"setMinerStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minerStakingSplit_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"madStakingSplit_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpStakingSplit_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee_\",\"type\":\"uint256\"}],\"name\":\"setSplits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"virtualMintDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x6080604052600060075561014d60085561014c60095561014c600a556003600b556000600c556000600d553480156200003757600080fd5b5060405162004b0e38038062004b0e83398181016040528101906200005d91906200031e565b846040518060400160405280600781526020017f4d616442797465000000000000000000000000000000000000000000000000008152506040518060400160405280600281526020017f4d420000000000000000000000000000000000000000000000000000000000008152508160039080519060200190620000e292919062000257565b508060049080519060200190620000fb92919062000257565b50505080600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050600260068190555083601160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082601260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081601360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080601460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050506200045e565b8280546200026590620003da565b90600052602060002090601f016020900481019282620002895760008555620002d5565b82601f10620002a457805160ff1916838001178555620002d5565b82800160010185558215620002d5579182015b82811115620002d4578251825591602001919060010190620002b7565b5b509050620002e49190620002e8565b5090565b5b8082111562000303576000816000905550600101620002e9565b5090565b600081519050620003188162000444565b92915050565b600080600080600060a086880312156200033d576200033c6200043f565b5b60006200034d8882890162000307565b9550506020620003608882890162000307565b9450506040620003738882890162000307565b9350506060620003868882890162000307565b9250506080620003998882890162000307565b9150509295509295909350565b6000620003b382620003ba565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006002820490506001821680620003f357607f821691505b602082108114156200040a576200040962000410565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600080fd5b6200044f81620003a6565b81146200045b57600080fd5b50565b6146a0806200046e6000396000f3fe6080604052600436106101f95760003560e01c806395d89b411161010d578063abd70aa2116100a0578063cf04ada01161006f578063cf04ada0146107de578063db3543f51461081c578063dd62ed3e14610845578063e4fc6b6d14610882578063ffaad6a5146108b0576101f9565b8063abd70aa214610710578063b3113b2a1461073b578063b390c0ab14610764578063b6b55f25146107a1576101f9565b80639f9fb968116100dc5780639f9fb96814610629578063a0712d6814610666578063a457c2d714610696578063a9059cbb146106d3576101f9565b806395d89b411461055b5780639b057203146105865780639f1d6c19146105c35780639f8a3402146105ec576101f9565b806339509351116101905780636e9960c31161015f5780636e9960c314610478578063704b6c02146104a357806370a08231146104cc578063767bc1bf146105095780637ef5da0414610532576101f9565b806339509351146103a3578063449a52f8146103e057806360f89f19146104105780636957dc0e1461044d576101f9565b806323b872dd116101cc57806323b872dd146102ce5780632444b15c1461030b578063313ce5671461034857806334afbf6014610373576101f9565b806306fdde03146101fe578063095ea7b314610229578063142c514e1461026657806318160ddd146102a3575b600080fd5b34801561020a57600080fd5b506102136108ed565b6040516102209190613638565b60405180910390f35b34801561023557600080fd5b50610250600480360381019061024b9190612f05565b61097f565b60405161025d919061361d565b60405180910390f35b34801561027257600080fd5b5061028d60048036038101906102889190612f05565b61099d565b60405161029a919061399a565b60405180910390f35b3480156102af57600080fd5b506102b8610a41565b6040516102c5919061399a565b60405180910390f35b3480156102da57600080fd5b506102f560048036038101906102f09190612eb2565b610a4b565b604051610302919061361d565b60405180910390f35b34801561031757600080fd5b50610332600480360381019061032d91906130bf565b610b43565b60405161033f919061399a565b60405180910390f35b34801561035457600080fd5b5061035d610b5d565b60405161036a9190613a4d565b60405180910390f35b61038d60048036038101906103889190612f05565b610b66565b60405161039a919061399a565b60405180910390f35b3480156103af57600080fd5b506103ca60048036038101906103c59190612f05565b610b7b565b6040516103d7919061361d565b60405180910390f35b6103fa60048036038101906103f59190612f05565b610c27565b604051610407919061399a565b60405180910390f35b34801561041c57600080fd5b5061043760048036038101906104329190612fc5565b610c3c565b604051610444919061399a565b60405180910390f35b34801561045957600080fd5b50610462610c50565b60405161046f919061399a565b60405180910390f35b34801561048457600080fd5b5061048d610c5a565b60405161049a91906135d9565b60405180910390f35b3480156104af57600080fd5b506104ca60048036038101906104c59190612e45565b610c84565b005b3480156104d857600080fd5b506104f360048036038101906104ee9190612e45565b610d20565b604051610500919061399a565b60405180910390f35b34801561051557600080fd5b50610530600480360381019061052b9190613058565b610d68565b005b34801561053e57600080fd5b5061055960048036038101906105549190612e45565b610e7f565b005b34801561056757600080fd5b50610570610f53565b60405161057d9190613638565b60405180910390f35b34801561059257600080fd5b506105ad60048036038101906105a89190612f45565b610fe5565b6040516105ba919061399a565b60405180910390f35b3480156105cf57600080fd5b506105ea60048036038101906105e59190612e45565b610ffc565b005b3480156105f857600080fd5b50610613600480360381019061060e9190613005565b6110d0565b604051610620919061399a565b60405180910390f35b34801561063557600080fd5b50610650600480360381019061064b9190612f98565b6110e6565b60405161065d919061399a565b60405180910390f35b610680600480360381019061067b9190612f98565b611148565b60405161068d919061399a565b60405180910390f35b3480156106a257600080fd5b506106bd60048036038101906106b89190612f05565b61115c565b6040516106ca919061361d565b60405180910390f35b3480156106df57600080fd5b506106fa60048036038101906106f59190612f05565b611247565b604051610707919061361d565b60405180910390f35b34801561071c57600080fd5b50610725611265565b604051610732919061399a565b60405180910390f35b34801561074757600080fd5b50610762600480360381019061075d9190612e45565b61126f565b005b34801561077057600080fd5b5061078b60048036038101906107869190612fc5565b611343565b604051610798919061399a565b60405180910390f35b3480156107ad57600080fd5b506107c860048036038101906107c39190612f98565b611359565b6040516107d5919061399a565b60405180910390f35b3480156107ea57600080fd5b5061080560048036038101906108009190612f98565b61136c565b6040516108139291906135f4565b60405180910390f35b34801561082857600080fd5b50610843600480360381019061083e9190612e45565b611441565b005b34801561085157600080fd5b5061086c60048036038101906108679190612e72565b611515565b604051610879919061399a565b60405180910390f35b34801561088e57600080fd5b5061089761159c565b6040516108a794939291906139b5565b60405180910390f35b3480156108bc57600080fd5b506108d760048036038101906108d29190612f05565b6115b8565b6040516108e4919061399a565b60405180910390f35b6060600380546108fc90613d9d565b80601f016020809104026020016040519081016040528092919081815260200182805461092890613d9d565b80156109755780601f1061094a57610100808354040283529160200191610975565b820191906000526020600020905b81548152906001019060200180831161095857829003601f168201915b5050505050905090565b600061099361098c6115cc565b84846115d4565b6001905092915050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a269061387a565b60405180910390fd5b610a39838361179f565b905092915050565b6000600254905090565b6000610a58848484611923565b6000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000610aa36115cc565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610b23576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1a9061379a565b60405180910390fd5b610b3785610b2f6115cc565b8584036115d4565b60019150509392505050565b6000610b528686868686611ba4565b905095945050505050565b60006012905090565b6000610b73838334611d27565b905092915050565b6000610c1d610b886115cc565b848460016000610b966115cc565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610c189190613a8f565b6115d4565b6001905092915050565b6000610c34833484611f10565b905092915050565b6000610c488383611fe2565b905092915050565b6000600d54905090565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0b9061387a565b60405180910390fd5b610d1d81612013565b50565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610df8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610def9061387a565b60405180910390fd5b6103e881838587610e099190613a8f565b610e139190613a8f565b610e1d9190613a8f565b14610e5d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e549061389a565b60405180910390fd5b836008819055508260098190555081600a8190555080600b8190555050505050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610f0f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f069061387a565b60405180910390fd5b80601260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b606060048054610f6290613d9d565b80601f0160208091040260200160405190810160405280929190818152602001828054610f8e90613d9d565b8015610fdb5780601f10610fb057610100808354040283529160200191610fdb565b820191906000526020600020905b815481529060010190602001808311610fbe57829003601f168201915b5050505050905090565b6000610ff333858585612057565b90509392505050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461108c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110839061387a565b60405180910390fd5b80601160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60006110dd84848461212c565b90509392505050565b6000600c5482111561112d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611124906136fa565b60405180910390fd5b600e6000838152602001908152602001600020549050919050565b6000611155333484611f10565b9050919050565b6000806001600061116b6115cc565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015611228576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121f9061393a565b60405180910390fd5b61123c6112336115cc565b858584036115d4565b600191505092915050565b600061125b6112546115cc565b8484611923565b6001905092915050565b6000600754905090565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146112ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112f69061387a565b60405180910390fd5b80601360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600061135133338585612057565b905092915050565b600061136533836121aa565b9050919050565b6000611376612df3565b600c548311156113bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113b2906136fa565b60405180910390fd5b600f600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166010600085815260200190815260200160002080604051806080016040529081600082015481526020016001820154815260200160028201548152602001600382015481525050905091509150915091565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146114d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114c89061387a565b60405180910390fd5b80601460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000806000806115aa612376565b935093509350935090919293565b60006115c483836121aa565b905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611644576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161163b906138ba565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156116b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116ab906136ba565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051611792919061399a565b60405180910390a3505050565b60006117aa83612529565b156117ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117e19061381a565b60405180910390fd5b6000821161182d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118249061391a565b60405180910390fd5b60006001600c5461183e9190613a8f565b905082600e60008381526020019081526020016000208190555083600f600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600d60008282546118bc9190613a8f565b9250508190555080600c819055508373ffffffffffffffffffffffffffffffffffffffff16817f5b063c6569a91e8133fc6cd71d31a4ca5c65c652fd53ae093f46107754f0854185604051611911919061399a565b60405180910390a38091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611993576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161198a9061385a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611a03576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119fa9061365a565b60405180910390fd5b611a0e83838361253c565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611a94576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a8b9061371a565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611b279190613a8f565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611b8b919061399a565b60405180910390a3611b9e848484612541565b50505050565b6000808211611be8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bdf9061391a565b60405180910390fd5b611bf182612546565b611c30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c279061367a565b60405180910390fd5b60006001600c54611c419190613a8f565b905082600e600083815260200190815260200160002081905550604051806080016040528088815260200187815260200186815260200185815250601060008381526020019081526020016000206000820151816000015560208201518160010155604082015181600201556060820151816003015590505082600d6000828254611ccc9190613a8f565b9250508190555080600c81905550807fbc042d1da385bbdd954b3996e43a972c725a235e533042d3cf3ba68dba57a1638888888888604051611d129594939291906139fa565b60405180910390a28091505095945050505050565b6000611d3284612529565b15611d72576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d699061381a565b60405180910390fd5b6004821015611db6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dad906138da565b60405180910390fd5b600482611dc39190613ae5565b91506000611dd360075484611fe2565b905083811015611e18576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e0f9061375a565b60405180910390fd5b60006001600c54611e299190613a8f565b905081600e60008381526020019081526020016000208190555085600f600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600d6000828254611ea79190613a8f565b9250508190555080600c819055508573ffffffffffffffffffffffffffffffffffffffff16817f5b063c6569a91e8133fc6cd71d31a4ca5c65c652fd53ae093f46107754f0854184604051611efc919061399a565b60405180910390a380925050509392505050565b60006004831015611f56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f4d906138da565b60405180910390fd5b600483611f639190613ae5565b925060006007549050611f768185611fe2565b915082821015611fbb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fb29061395a565b60405180910390fd5b8381611fc79190613a8f565b905080600781905550611fda85836125ca565b509392505050565b6000611fed8361272a565b6120018385611ffc9190613a8f565b61272a565b61200b9190613ce1565b905092915050565b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008083141561209c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612093906138fa565b60405180910390fd5b600060075490506120b5816120af610a41565b8661212c565b9150828210156120fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120f19061383a565b60405180910390fd5b81816121069190613ce1565b90508060078190555061211986856127b0565b6121238583612987565b50949350505050565b600081831015612171576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612168906137fa565b60405180910390fd5b6121a18461218984866121849190613ce1565b612abd565b61219286612abd565b61219c9190613ce1565b612b62565b90509392505050565b60006121b583612529565b156121f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121ec9061381a565b60405180910390fd5b60008211612238576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161222f9061391a565b60405180910390fd5b61224182612546565b612280576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612277906137ba565b60405180910390fd5b60006001600c546122919190613a8f565b905082600e60008381526020019081526020016000208190555083600f600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600d600082825461230f9190613a8f565b9250508190555080600c819055508373ffffffffffffffffffffffffffffffffffffffff16817f5b063c6569a91e8133fc6cd71d31a4ca5c65c652fd53ae093f46107754f0854185604051612364919061399a565b60405180910390a38091505092915050565b600080600080600160065414156123c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123b99061377a565b60405180910390fd5b600160068190555060006007549050600081476123df9190613ce1565b90506103e8600b54826123f29190613c87565b6123fc9190613ae5565b92506103e86009548261240f9190613c87565b6124199190613ae5565b94506103e8600a548261242c9190613c87565b6124369190613ae5565b93508284866124459190613a8f565b61244f9190613a8f565b8161245a9190613ce1565b9550612488601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684612b7d565b6124b4601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1687612b7d565b6124e0601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1686612b7d565b61250c601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685612b7d565b8147101561251957600080fd5b5050600260068190555090919293565b600080823b905060008111915050919050565b505050565b505050565b60008082141561258b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612582906138fa565b60405180910390fd5b61259f600754612599610a41565b8461212c565b600760008282546125b09190613ce1565b925050819055506125c133836127b0565b60019050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561263a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126319061397a565b60405180910390fd5b6126466000838361253c565b80600260008282546126589190613a8f565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546126ad9190613a8f565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051612712919061399a565b60405180910390a361272660008383612541565b5050565b600061277d71016f578c4e0a0610001239056923109ffb90600261275768878678326eac90000086612bf4565b6127619190613b69565b61276b9190613a8f565b619c406127789190613c87565b612c1c565b696aeec3532e7de04e5e608360c96127959190613c87565b61279f9190613a8f565b6127a99190613ce1565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612820576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612817906137da565b60405180910390fd5b61282c8260008361253c565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156128b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128a99061369a565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260008282546129099190613ce1565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161296e919061399a565b60405180910390a361298283600084612541565b505050565b600081141561299557612ab9565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612a05576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129fc906136da565b60405180910390fd5b600082905060008173ffffffffffffffffffffffffffffffffffffffff1683604051612a30906135c4565b60006040518083038185875af1925050503d8060008114612a6d576040519150601f19603f3d011682016040523d82523d6000602084013e612a72565b606091505b5050905080612ab6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612aad9061373a565b60405180910390fd5b50505b5050565b60006101916aa6ad4a39178da801881960612b30846a01aaaeaf658ec6babcbcc0612ae89190613c87565b73b1ccb5245c201cfb692f9ee5debda1883be3b090600287612b0a9190613b69565b612b149190613a8f565b612b1e9190613ce1565b619c40612b2b9190613c87565b612c1c565b8460c9612b3d9190613c87565b612b479190613a8f565b612b519190613ce1565b612b5b9190613ae5565b9050919050565b6000818311612b7357829050612b77565b8190505b92915050565b8173ffffffffffffffffffffffffffffffffffffffff166399a89ecc82612ba2612dcf565b6040518363ffffffff1660e01b8152600401612bbe9190613a4d565b6000604051808303818588803b158015612bd757600080fd5b505af1158015612beb573d6000803e3d6000fd5b50505050505050565b6000612c008383612b62565b612c0a8484612dd8565b612c149190613ce1565b905092915050565b600080821415612c2f5760009050612dca565b6000829050600191507001000000000000000000000000000000008110612c5f57608081901c9050604082901b91505b680100000000000000008110612c7e57604081901c9050602082901b91505b6401000000008110612c9957602081901c9050601082901b91505b620100008110612cb257601081901c9050600882901b91505b6101008110612cca57600881901c9050600482901b91505b60108110612ce157600481901c9050600282901b91505b60088110612cf157600182901b91505b6001828481612d0357612d02613dfe565b5b048301901c91506001828481612d1c57612d1b613dfe565b5b048301901c91506001828481612d3557612d34613dfe565b5b048301901c91506001828481612d4e57612d4d613dfe565b5b048301901c91506001828481612d6757612d66613dfe565b5b048301901c91506001828481612d8057612d7f613dfe565b5b048301901c91506001828481612d9957612d98613dfe565b5b048301901c91506000828481612db257612db1613dfe565b5b04905080831015612dc35782612dc5565b805b925050505b919050565b6000602a905090565b6000818310612de957829050612ded565b8190505b92915050565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b600081359050612e2a8161463c565b92915050565b600081359050612e3f81614653565b92915050565b600060208284031215612e5b57612e5a613e5c565b5b6000612e6984828501612e1b565b91505092915050565b60008060408385031215612e8957612e88613e5c565b5b6000612e9785828601612e1b565b9250506020612ea885828601612e1b565b9150509250929050565b600080600060608486031215612ecb57612eca613e5c565b5b6000612ed986828701612e1b565b9350506020612eea86828701612e1b565b9250506040612efb86828701612e30565b9150509250925092565b60008060408385031215612f1c57612f1b613e5c565b5b6000612f2a85828601612e1b565b9250506020612f3b85828601612e30565b9150509250929050565b600080600060608486031215612f5e57612f5d613e5c565b5b6000612f6c86828701612e1b565b9350506020612f7d86828701612e30565b9250506040612f8e86828701612e30565b9150509250925092565b600060208284031215612fae57612fad613e5c565b5b6000612fbc84828501612e30565b91505092915050565b60008060408385031215612fdc57612fdb613e5c565b5b6000612fea85828601612e30565b9250506020612ffb85828601612e30565b9150509250929050565b60008060006060848603121561301e5761301d613e5c565b5b600061302c86828701612e30565b935050602061303d86828701612e30565b925050604061304e86828701612e30565b9150509250925092565b6000806000806080858703121561307257613071613e5c565b5b600061308087828801612e30565b945050602061309187828801612e30565b93505060406130a287828801612e30565b92505060606130b387828801612e30565b91505092959194509250565b600080600080600060a086880312156130db576130da613e5c565b5b60006130e988828901612e30565b95505060206130fa88828901612e30565b945050604061310b88828901612e30565b935050606061311c88828901612e30565b925050608061312d88828901612e30565b9150509295509295909350565b61314381613d15565b82525050565b61315281613d27565b82525050565b600061316382613a68565b61316d8185613a7e565b935061317d818560208601613d6a565b61318681613e61565b840191505092915050565b600061319e602383613a7e565b91506131a982613e7f565b604082019050919050565b60006131c1601983613a7e565b91506131cc82613ece565b602082019050919050565b60006131e4602283613a7e565b91506131ef82613ef7565b604082019050919050565b6000613207602283613a7e565b915061321282613f46565b604082019050919050565b600061322a603383613a7e565b915061323582613f95565b604082019050919050565b600061324d601c83613a7e565b915061325882613fe4565b602082019050919050565b6000613270602683613a7e565b915061327b8261400d565b604082019050919050565b6000613293602183613a7e565b915061329e8261405c565b604082019050919050565b60006132b6604b83613a7e565b91506132c1826140ab565b606082019050919050565b60006132d9602183613a7e565b91506132e482614120565b604082019050919050565b60006132fc602883613a7e565b91506133078261416f565b604082019050919050565b600061331f602883613a7e565b915061332a826141be565b604082019050919050565b6000613342602183613a7e565b915061334d8261420d565b604082019050919050565b6000613365604c83613a7e565b91506133708261425c565b606082019050919050565b6000613388603183613a7e565b9150613393826142d1565b604082019050919050565b60006133ab602883613a7e565b91506133b682614320565b604082019050919050565b60006133ce602583613a7e565b91506133d98261436f565b604082019050919050565b60006133f1600d83613a7e565b91506133fc826143be565b602082019050919050565b6000613414600083613a73565b915061341f826143e7565b600082019050919050565b6000613437603583613a7e565b9150613442826143ea565b604082019050919050565b600061345a602483613a7e565b915061346582614439565b604082019050919050565b600061347d602083613a7e565b915061348882614488565b602082019050919050565b60006134a0604483613a7e565b91506134ab826144b1565b606082019050919050565b60006134c3603683613a7e565b91506134ce82614526565b604082019050919050565b60006134e6602583613a7e565b91506134f182614575565b604082019050919050565b6000613509602883613a7e565b9150613514826145c4565b604082019050919050565b600061352c601f83613a7e565b915061353782614613565b602082019050919050565b6080820160008201516135586000850182613597565b50602082015161356b6020850182613597565b50604082015161357e6040850182613597565b5060608201516135916060850182613597565b50505050565b6135a081613d53565b82525050565b6135af81613d53565b82525050565b6135be81613d5d565b82525050565b60006135cf82613407565b9150819050919050565b60006020820190506135ee600083018461313a565b92915050565b600060a082019050613609600083018561313a565b6136166020830184613542565b9392505050565b60006020820190506136326000830184613149565b92915050565b600060208201905081810360008301526136528184613158565b905092915050565b6000602082019050818103600083015261367381613191565b9050919050565b60006020820190508181036000830152613693816131b4565b9050919050565b600060208201905081810360008301526136b3816131d7565b9050919050565b600060208201905081810360008301526136d3816131fa565b9050919050565b600060208201905081810360008301526136f38161321d565b9050919050565b6000602082019050818103600083015261371381613240565b9050919050565b6000602082019050818103600083015261373381613263565b9050919050565b6000602082019050818103600083015261375381613286565b9050919050565b60006020820190508181036000830152613773816132a9565b9050919050565b60006020820190508181036000830152613793816132cc565b9050919050565b600060208201905081810360008301526137b3816132ef565b9050919050565b600060208201905081810360008301526137d381613312565b9050919050565b600060208201905081810360008301526137f381613335565b9050919050565b6000602082019050818103600083015261381381613358565b9050919050565b600060208201905081810360008301526138338161337b565b9050919050565b600060208201905081810360008301526138538161339e565b9050919050565b60006020820190508181036000830152613873816133c1565b9050919050565b60006020820190508181036000830152613893816133e4565b9050919050565b600060208201905081810360008301526138b38161342a565b9050919050565b600060208201905081810360008301526138d38161344d565b9050919050565b600060208201905081810360008301526138f381613470565b9050919050565b6000602082019050818103600083015261391381613493565b9050919050565b60006020820190508181036000830152613933816134b6565b9050919050565b60006020820190508181036000830152613953816134d9565b9050919050565b60006020820190508181036000830152613973816134fc565b9050919050565b600060208201905081810360008301526139938161351f565b9050919050565b60006020820190506139af60008301846135a6565b92915050565b60006080820190506139ca60008301876135a6565b6139d760208301866135a6565b6139e460408301856135a6565b6139f160608301846135a6565b95945050505050565b600060a082019050613a0f60008301886135a6565b613a1c60208301876135a6565b613a2960408301866135a6565b613a3660608301856135a6565b613a4360808301846135a6565b9695505050505050565b6000602082019050613a6260008301846135b5565b92915050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000613a9a82613d53565b9150613aa583613d53565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613ada57613ad9613dcf565b5b828201905092915050565b6000613af082613d53565b9150613afb83613d53565b925082613b0b57613b0a613dfe565b5b828204905092915050565b6000808291508390505b6001851115613b6057808604811115613b3c57613b3b613dcf565b5b6001851615613b4b5780820291505b8081029050613b5985613e72565b9450613b20565b94509492505050565b6000613b7482613d53565b9150613b7f83613d5d565b9250613bac7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484613bb4565b905092915050565b600082613bc45760019050613c80565b81613bd25760009050613c80565b8160018114613be85760028114613bf257613c21565b6001915050613c80565b60ff841115613c0457613c03613dcf565b5b8360020a915084821115613c1b57613c1a613dcf565b5b50613c80565b5060208310610133831016604e8410600b8410161715613c565782820a905083811115613c5157613c50613dcf565b5b613c80565b613c638484846001613b16565b92509050818404811115613c7a57613c79613dcf565b5b81810290505b9392505050565b6000613c9282613d53565b9150613c9d83613d53565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613cd657613cd5613dcf565b5b828202905092915050565b6000613cec82613d53565b9150613cf783613d53565b925082821015613d0a57613d09613dcf565b5b828203905092915050565b6000613d2082613d33565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b83811015613d88578082015181840152602081019050613d6d565b83811115613d97576000848401525b50505050565b60006002820490506001821680613db557607f821691505b60208210811415613dc957613dc8613e2d565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600080fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f4d6164427974653a205472616e73666572206661696c65642100000000000000600082015250565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f457468536166655472616e736665723a2063616e6e6f74207472616e7366657260008201527f2045544820746f20616464726573732030783000000000000000000000000000602082015250565b7f4d6164427974653a20496e76616c6964206465706f7369742049442100000000600082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b7f457468536166655472616e736665723a205472616e73666572206661696c656460008201527f2e00000000000000000000000000000000000000000000000000000000000000602082015250565b7f4d6164427974653a20636f756c64206e6f74206d696e74206465706f7369742060008201527f77697468206d696e696d756d204d6164427974657320676976656e207468652060208201527f65746865722073656e7421000000000000000000000000000000000000000000604082015250565b7f4d757465783a20436f756c646e2774206163717569726520746865206c6f636b60008201527f2100000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206160008201527f6c6c6f77616e6365000000000000000000000000000000000000000000000000602082015250565b7f4d6164427974653a204275726e206661696c656420647572696e67207468652060008201527f6465706f73697421000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b7f4d6164427974653a20546865206e756d626572206f6620746f6b656e7320746f60008201527f206265206275726e65642069732067726561746572207468616e20746865205460208201527f6f74616c20537570706c79210000000000000000000000000000000000000000604082015250565b7f4d6164427974653a20436f6e7472616374732063616e6e6f74206d616b65204d60008201527f61644279746573206465706f7369747321000000000000000000000000000000602082015250565b7f4d6164427974653a20436f756c646e2774206275726e20746865206d696e457460008201527f6820616d6f756e74000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f4d7573742062652061646d696e00000000000000000000000000000000000000600082015250565b50565b7f4d6164427974653a20416c6c207468652073706c69742076616c756573206d7560008201527f73742073756d20746f206d6164556e69744f6e65210000000000000000000000602082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4d6164427974653a207265717569726573206174206c65617374203420574549600082015250565b7f4d6164427974653a20546865206e756d626572206f66204d616442797465732060008201527f746f206265206275726e2073686f756c6420626520677265617465722074686160208201527f6e20302100000000000000000000000000000000000000000000000000000000604082015250565b7f4d6164427974653a20546865206465706f73697420616d6f756e74206d75737460008201527f2062652067726561746572207468616e207a65726f2100000000000000000000602082015250565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b7f4d6164427974653a20636f756c64206e6f74206d696e74206d696e696d756d2060008201527f4d61644279746573000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b61464581613d15565b811461465057600080fd5b50565b61465c81613d53565b811461466757600080fd5b5056fea26469706673582212206c1201cfee75d83f1bcc97b1738b44e35693b83608e2763ddc1889e5bf9456f264736f6c63430008060033",
}

// MadByteABI is the input ABI used to generate the binding from.
// Deprecated: Use MadByteMetaData.ABI instead.
var MadByteABI = MadByteMetaData.ABI

// MadByteBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MadByteMetaData.Bin instead.
var MadByteBin = MadByteMetaData.Bin

// DeployMadByte deploys a new Ethereum contract, binding an instance of MadByte to it.
func DeployMadByte(auth *bind.TransactOpts, backend bind.ContractBackend, admin_ common.Address, madStaking_ common.Address, minerStaking_ common.Address, lpStaking_ common.Address, foundation_ common.Address) (common.Address, *types.Transaction, *MadByte, error) {
	parsed, err := MadByteMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MadByteBin), backend, admin_, madStaking_, minerStaking_, lpStaking_, foundation_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MadByte{MadByteCaller: MadByteCaller{contract: contract}, MadByteTransactor: MadByteTransactor{contract: contract}, MadByteFilterer: MadByteFilterer{contract: contract}}, nil
}

// MadByte is an auto generated Go binding around an Ethereum contract.
type MadByte struct {
	MadByteCaller     // Read-only binding to the contract
	MadByteTransactor // Write-only binding to the contract
	MadByteFilterer   // Log filterer for contract events
}

// MadByteCaller is an auto generated read-only Go binding around an Ethereum contract.
type MadByteCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MadByteTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MadByteTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MadByteFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MadByteFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MadByteSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MadByteSession struct {
	Contract     *MadByte          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MadByteCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MadByteCallerSession struct {
	Contract *MadByteCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// MadByteTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MadByteTransactorSession struct {
	Contract     *MadByteTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// MadByteRaw is an auto generated low-level Go binding around an Ethereum contract.
type MadByteRaw struct {
	Contract *MadByte // Generic contract binding to access the raw methods on
}

// MadByteCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MadByteCallerRaw struct {
	Contract *MadByteCaller // Generic read-only contract binding to access the raw methods on
}

// MadByteTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MadByteTransactorRaw struct {
	Contract *MadByteTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMadByte creates a new instance of MadByte, bound to a specific deployed contract.
func NewMadByte(address common.Address, backend bind.ContractBackend) (*MadByte, error) {
	contract, err := bindMadByte(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MadByte{MadByteCaller: MadByteCaller{contract: contract}, MadByteTransactor: MadByteTransactor{contract: contract}, MadByteFilterer: MadByteFilterer{contract: contract}}, nil
}

// NewMadByteCaller creates a new read-only instance of MadByte, bound to a specific deployed contract.
func NewMadByteCaller(address common.Address, caller bind.ContractCaller) (*MadByteCaller, error) {
	contract, err := bindMadByte(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MadByteCaller{contract: contract}, nil
}

// NewMadByteTransactor creates a new write-only instance of MadByte, bound to a specific deployed contract.
func NewMadByteTransactor(address common.Address, transactor bind.ContractTransactor) (*MadByteTransactor, error) {
	contract, err := bindMadByte(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MadByteTransactor{contract: contract}, nil
}

// NewMadByteFilterer creates a new log filterer instance of MadByte, bound to a specific deployed contract.
func NewMadByteFilterer(address common.Address, filterer bind.ContractFilterer) (*MadByteFilterer, error) {
	contract, err := bindMadByte(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MadByteFilterer{contract: contract}, nil
}

// bindMadByte binds a generic wrapper to an already deployed contract.
func bindMadByte(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MadByteABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MadByte *MadByteRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MadByte.Contract.MadByteCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MadByte *MadByteRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MadByte.Contract.MadByteTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MadByte *MadByteRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MadByte.Contract.MadByteTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MadByte *MadByteCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MadByte.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MadByte *MadByteTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MadByte.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MadByte *MadByteTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MadByte.Contract.contract.Transact(opts, method, params...)
}

// EthtoMB is a free data retrieval call binding the contract method 0x60f89f19.
//
// Solidity: function EthtoMB(uint256 poolBalance_, uint256 numEth_) pure returns(uint256)
func (_MadByte *MadByteCaller) EthtoMB(opts *bind.CallOpts, poolBalance_ *big.Int, numEth_ *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _MadByte.contract.Call(opts, &out, "EthtoMB", poolBalance_, numEth_)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EthtoMB is a free data retrieval call binding the contract method 0x60f89f19.
//
// Solidity: function EthtoMB(uint256 poolBalance_, uint256 numEth_) pure returns(uint256)
func (_MadByte *MadByteSession) EthtoMB(poolBalance_ *big.Int, numEth_ *big.Int) (*big.Int, error) {
	return _MadByte.Contract.EthtoMB(&_MadByte.CallOpts, poolBalance_, numEth_)
}

// EthtoMB is a free data retrieval call binding the contract method 0x60f89f19.
//
// Solidity: function EthtoMB(uint256 poolBalance_, uint256 numEth_) pure returns(uint256)
func (_MadByte *MadByteCallerSession) EthtoMB(poolBalance_ *big.Int, numEth_ *big.Int) (*big.Int, error) {
	return _MadByte.Contract.EthtoMB(&_MadByte.CallOpts, poolBalance_, numEth_)
}

// MBtoEth is a free data retrieval call binding the contract method 0x9f8a3402.
//
// Solidity: function MBtoEth(uint256 poolBalance_, uint256 totalSupply_, uint256 numMB_) pure returns(uint256 numEth)
func (_MadByte *MadByteCaller) MBtoEth(opts *bind.CallOpts, poolBalance_ *big.Int, totalSupply_ *big.Int, numMB_ *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _MadByte.contract.Call(opts, &out, "MBtoEth", poolBalance_, totalSupply_, numMB_)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MBtoEth is a free data retrieval call binding the contract method 0x9f8a3402.
//
// Solidity: function MBtoEth(uint256 poolBalance_, uint256 totalSupply_, uint256 numMB_) pure returns(uint256 numEth)
func (_MadByte *MadByteSession) MBtoEth(poolBalance_ *big.Int, totalSupply_ *big.Int, numMB_ *big.Int) (*big.Int, error) {
	return _MadByte.Contract.MBtoEth(&_MadByte.CallOpts, poolBalance_, totalSupply_, numMB_)
}

// MBtoEth is a free data retrieval call binding the contract method 0x9f8a3402.
//
// Solidity: function MBtoEth(uint256 poolBalance_, uint256 totalSupply_, uint256 numMB_) pure returns(uint256 numEth)
func (_MadByte *MadByteCallerSession) MBtoEth(poolBalance_ *big.Int, totalSupply_ *big.Int, numMB_ *big.Int) (*big.Int, error) {
	return _MadByte.Contract.MBtoEth(&_MadByte.CallOpts, poolBalance_, totalSupply_, numMB_)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_MadByte *MadByteCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _MadByte.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_MadByte *MadByteSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _MadByte.Contract.Allowance(&_MadByte.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_MadByte *MadByteCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _MadByte.Contract.Allowance(&_MadByte.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_MadByte *MadByteCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _MadByte.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_MadByte *MadByteSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _MadByte.Contract.BalanceOf(&_MadByte.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_MadByte *MadByteCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _MadByte.Contract.BalanceOf(&_MadByte.CallOpts, account)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_MadByte *MadByteCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _MadByte.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_MadByte *MadByteSession) Decimals() (uint8, error) {
	return _MadByte.Contract.Decimals(&_MadByte.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_MadByte *MadByteCallerSession) Decimals() (uint8, error) {
	return _MadByte.Contract.Decimals(&_MadByte.CallOpts)
}

// GetAdmin is a free data retrieval call binding the contract method 0x6e9960c3.
//
// Solidity: function getAdmin() view returns(address)
func (_MadByte *MadByteCaller) GetAdmin(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MadByte.contract.Call(opts, &out, "getAdmin")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetAdmin is a free data retrieval call binding the contract method 0x6e9960c3.
//
// Solidity: function getAdmin() view returns(address)
func (_MadByte *MadByteSession) GetAdmin() (common.Address, error) {
	return _MadByte.Contract.GetAdmin(&_MadByte.CallOpts)
}

// GetAdmin is a free data retrieval call binding the contract method 0x6e9960c3.
//
// Solidity: function getAdmin() view returns(address)
func (_MadByte *MadByteCallerSession) GetAdmin() (common.Address, error) {
	return _MadByte.Contract.GetAdmin(&_MadByte.CallOpts)
}

// GetDeposit is a free data retrieval call binding the contract method 0x9f9fb968.
//
// Solidity: function getDeposit(uint256 depositID) view returns(uint256)
func (_MadByte *MadByteCaller) GetDeposit(opts *bind.CallOpts, depositID *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _MadByte.contract.Call(opts, &out, "getDeposit", depositID)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetDeposit is a free data retrieval call binding the contract method 0x9f9fb968.
//
// Solidity: function getDeposit(uint256 depositID) view returns(uint256)
func (_MadByte *MadByteSession) GetDeposit(depositID *big.Int) (*big.Int, error) {
	return _MadByte.Contract.GetDeposit(&_MadByte.CallOpts, depositID)
}

// GetDeposit is a free data retrieval call binding the contract method 0x9f9fb968.
//
// Solidity: function getDeposit(uint256 depositID) view returns(uint256)
func (_MadByte *MadByteCallerSession) GetDeposit(depositID *big.Int) (*big.Int, error) {
	return _MadByte.Contract.GetDeposit(&_MadByte.CallOpts, depositID)
}

// GetDepositOwner is a free data retrieval call binding the contract method 0xcf04ada0.
//
// Solidity: function getDepositOwner(uint256 depositID) view returns(address, (uint256,uint256,uint256,uint256))
func (_MadByte *MadByteCaller) GetDepositOwner(opts *bind.CallOpts, depositID *big.Int) (common.Address, MadByteBNAddress, error) {
	var out []interface{}
	err := _MadByte.contract.Call(opts, &out, "getDepositOwner", depositID)

	if err != nil {
		return *new(common.Address), *new(MadByteBNAddress), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	out1 := *abi.ConvertType(out[1], new(MadByteBNAddress)).(*MadByteBNAddress)

	return out0, out1, err

}

// GetDepositOwner is a free data retrieval call binding the contract method 0xcf04ada0.
//
// Solidity: function getDepositOwner(uint256 depositID) view returns(address, (uint256,uint256,uint256,uint256))
func (_MadByte *MadByteSession) GetDepositOwner(depositID *big.Int) (common.Address, MadByteBNAddress, error) {
	return _MadByte.Contract.GetDepositOwner(&_MadByte.CallOpts, depositID)
}

// GetDepositOwner is a free data retrieval call binding the contract method 0xcf04ada0.
//
// Solidity: function getDepositOwner(uint256 depositID) view returns(address, (uint256,uint256,uint256,uint256))
func (_MadByte *MadByteCallerSession) GetDepositOwner(depositID *big.Int) (common.Address, MadByteBNAddress, error) {
	return _MadByte.Contract.GetDepositOwner(&_MadByte.CallOpts, depositID)
}

// GetPoolBalance is a free data retrieval call binding the contract method 0xabd70aa2.
//
// Solidity: function getPoolBalance() view returns(uint256)
func (_MadByte *MadByteCaller) GetPoolBalance(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _MadByte.contract.Call(opts, &out, "getPoolBalance")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPoolBalance is a free data retrieval call binding the contract method 0xabd70aa2.
//
// Solidity: function getPoolBalance() view returns(uint256)
func (_MadByte *MadByteSession) GetPoolBalance() (*big.Int, error) {
	return _MadByte.Contract.GetPoolBalance(&_MadByte.CallOpts)
}

// GetPoolBalance is a free data retrieval call binding the contract method 0xabd70aa2.
//
// Solidity: function getPoolBalance() view returns(uint256)
func (_MadByte *MadByteCallerSession) GetPoolBalance() (*big.Int, error) {
	return _MadByte.Contract.GetPoolBalance(&_MadByte.CallOpts)
}

// GetTotalMadBytesDeposited is a free data retrieval call binding the contract method 0x6957dc0e.
//
// Solidity: function getTotalMadBytesDeposited() view returns(uint256)
func (_MadByte *MadByteCaller) GetTotalMadBytesDeposited(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _MadByte.contract.Call(opts, &out, "getTotalMadBytesDeposited")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalMadBytesDeposited is a free data retrieval call binding the contract method 0x6957dc0e.
//
// Solidity: function getTotalMadBytesDeposited() view returns(uint256)
func (_MadByte *MadByteSession) GetTotalMadBytesDeposited() (*big.Int, error) {
	return _MadByte.Contract.GetTotalMadBytesDeposited(&_MadByte.CallOpts)
}

// GetTotalMadBytesDeposited is a free data retrieval call binding the contract method 0x6957dc0e.
//
// Solidity: function getTotalMadBytesDeposited() view returns(uint256)
func (_MadByte *MadByteCallerSession) GetTotalMadBytesDeposited() (*big.Int, error) {
	return _MadByte.Contract.GetTotalMadBytesDeposited(&_MadByte.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_MadByte *MadByteCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _MadByte.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_MadByte *MadByteSession) Name() (string, error) {
	return _MadByte.Contract.Name(&_MadByte.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_MadByte *MadByteCallerSession) Name() (string, error) {
	return _MadByte.Contract.Name(&_MadByte.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_MadByte *MadByteCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _MadByte.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_MadByte *MadByteSession) Symbol() (string, error) {
	return _MadByte.Contract.Symbol(&_MadByte.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_MadByte *MadByteCallerSession) Symbol() (string, error) {
	return _MadByte.Contract.Symbol(&_MadByte.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_MadByte *MadByteCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _MadByte.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_MadByte *MadByteSession) TotalSupply() (*big.Int, error) {
	return _MadByte.Contract.TotalSupply(&_MadByte.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_MadByte *MadByteCallerSession) TotalSupply() (*big.Int, error) {
	return _MadByte.Contract.TotalSupply(&_MadByte.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_MadByte *MadByteTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MadByte.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_MadByte *MadByteSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.Approve(&_MadByte.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_MadByte *MadByteTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.Approve(&_MadByte.TransactOpts, spender, amount)
}

// Burn is a paid mutator transaction binding the contract method 0xb390c0ab.
//
// Solidity: function burn(uint256 amount_, uint256 minEth_) returns(uint256 numEth)
func (_MadByte *MadByteTransactor) Burn(opts *bind.TransactOpts, amount_ *big.Int, minEth_ *big.Int) (*types.Transaction, error) {
	return _MadByte.contract.Transact(opts, "burn", amount_, minEth_)
}

// Burn is a paid mutator transaction binding the contract method 0xb390c0ab.
//
// Solidity: function burn(uint256 amount_, uint256 minEth_) returns(uint256 numEth)
func (_MadByte *MadByteSession) Burn(amount_ *big.Int, minEth_ *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.Burn(&_MadByte.TransactOpts, amount_, minEth_)
}

// Burn is a paid mutator transaction binding the contract method 0xb390c0ab.
//
// Solidity: function burn(uint256 amount_, uint256 minEth_) returns(uint256 numEth)
func (_MadByte *MadByteTransactorSession) Burn(amount_ *big.Int, minEth_ *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.Burn(&_MadByte.TransactOpts, amount_, minEth_)
}

// BurnTo is a paid mutator transaction binding the contract method 0x9b057203.
//
// Solidity: function burnTo(address to_, uint256 amount_, uint256 minEth_) returns(uint256 numEth)
func (_MadByte *MadByteTransactor) BurnTo(opts *bind.TransactOpts, to_ common.Address, amount_ *big.Int, minEth_ *big.Int) (*types.Transaction, error) {
	return _MadByte.contract.Transact(opts, "burnTo", to_, amount_, minEth_)
}

// BurnTo is a paid mutator transaction binding the contract method 0x9b057203.
//
// Solidity: function burnTo(address to_, uint256 amount_, uint256 minEth_) returns(uint256 numEth)
func (_MadByte *MadByteSession) BurnTo(to_ common.Address, amount_ *big.Int, minEth_ *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.BurnTo(&_MadByte.TransactOpts, to_, amount_, minEth_)
}

// BurnTo is a paid mutator transaction binding the contract method 0x9b057203.
//
// Solidity: function burnTo(address to_, uint256 amount_, uint256 minEth_) returns(uint256 numEth)
func (_MadByte *MadByteTransactorSession) BurnTo(to_ common.Address, amount_ *big.Int, minEth_ *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.BurnTo(&_MadByte.TransactOpts, to_, amount_, minEth_)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_MadByte *MadByteTransactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _MadByte.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_MadByte *MadByteSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.DecreaseAllowance(&_MadByte.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_MadByte *MadByteTransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.DecreaseAllowance(&_MadByte.TransactOpts, spender, subtractedValue)
}

// Deposit is a paid mutator transaction binding the contract method 0xb6b55f25.
//
// Solidity: function deposit(uint256 amount_) returns(uint256)
func (_MadByte *MadByteTransactor) Deposit(opts *bind.TransactOpts, amount_ *big.Int) (*types.Transaction, error) {
	return _MadByte.contract.Transact(opts, "deposit", amount_)
}

// Deposit is a paid mutator transaction binding the contract method 0xb6b55f25.
//
// Solidity: function deposit(uint256 amount_) returns(uint256)
func (_MadByte *MadByteSession) Deposit(amount_ *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.Deposit(&_MadByte.TransactOpts, amount_)
}

// Deposit is a paid mutator transaction binding the contract method 0xb6b55f25.
//
// Solidity: function deposit(uint256 amount_) returns(uint256)
func (_MadByte *MadByteTransactorSession) Deposit(amount_ *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.Deposit(&_MadByte.TransactOpts, amount_)
}

// DepositTo is a paid mutator transaction binding the contract method 0xffaad6a5.
//
// Solidity: function depositTo(address to_, uint256 amount_) returns(uint256)
func (_MadByte *MadByteTransactor) DepositTo(opts *bind.TransactOpts, to_ common.Address, amount_ *big.Int) (*types.Transaction, error) {
	return _MadByte.contract.Transact(opts, "depositTo", to_, amount_)
}

// DepositTo is a paid mutator transaction binding the contract method 0xffaad6a5.
//
// Solidity: function depositTo(address to_, uint256 amount_) returns(uint256)
func (_MadByte *MadByteSession) DepositTo(to_ common.Address, amount_ *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.DepositTo(&_MadByte.TransactOpts, to_, amount_)
}

// DepositTo is a paid mutator transaction binding the contract method 0xffaad6a5.
//
// Solidity: function depositTo(address to_, uint256 amount_) returns(uint256)
func (_MadByte *MadByteTransactorSession) DepositTo(to_ common.Address, amount_ *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.DepositTo(&_MadByte.TransactOpts, to_, amount_)
}

// DepositToBN is a paid mutator transaction binding the contract method 0x2444b15c.
//
// Solidity: function depositToBN(uint256 to0_, uint256 to1_, uint256 to2_, uint256 to3_, uint256 amount_) returns(uint256)
func (_MadByte *MadByteTransactor) DepositToBN(opts *bind.TransactOpts, to0_ *big.Int, to1_ *big.Int, to2_ *big.Int, to3_ *big.Int, amount_ *big.Int) (*types.Transaction, error) {
	return _MadByte.contract.Transact(opts, "depositToBN", to0_, to1_, to2_, to3_, amount_)
}

// DepositToBN is a paid mutator transaction binding the contract method 0x2444b15c.
//
// Solidity: function depositToBN(uint256 to0_, uint256 to1_, uint256 to2_, uint256 to3_, uint256 amount_) returns(uint256)
func (_MadByte *MadByteSession) DepositToBN(to0_ *big.Int, to1_ *big.Int, to2_ *big.Int, to3_ *big.Int, amount_ *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.DepositToBN(&_MadByte.TransactOpts, to0_, to1_, to2_, to3_, amount_)
}

// DepositToBN is a paid mutator transaction binding the contract method 0x2444b15c.
//
// Solidity: function depositToBN(uint256 to0_, uint256 to1_, uint256 to2_, uint256 to3_, uint256 amount_) returns(uint256)
func (_MadByte *MadByteTransactorSession) DepositToBN(to0_ *big.Int, to1_ *big.Int, to2_ *big.Int, to3_ *big.Int, amount_ *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.DepositToBN(&_MadByte.TransactOpts, to0_, to1_, to2_, to3_, amount_)
}

// Distribute is a paid mutator transaction binding the contract method 0xe4fc6b6d.
//
// Solidity: function distribute() returns(uint256 minerAmount, uint256 stakingAmount, uint256 lpStakingAmount, uint256 foundationAmount)
func (_MadByte *MadByteTransactor) Distribute(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MadByte.contract.Transact(opts, "distribute")
}

// Distribute is a paid mutator transaction binding the contract method 0xe4fc6b6d.
//
// Solidity: function distribute() returns(uint256 minerAmount, uint256 stakingAmount, uint256 lpStakingAmount, uint256 foundationAmount)
func (_MadByte *MadByteSession) Distribute() (*types.Transaction, error) {
	return _MadByte.Contract.Distribute(&_MadByte.TransactOpts)
}

// Distribute is a paid mutator transaction binding the contract method 0xe4fc6b6d.
//
// Solidity: function distribute() returns(uint256 minerAmount, uint256 stakingAmount, uint256 lpStakingAmount, uint256 foundationAmount)
func (_MadByte *MadByteTransactorSession) Distribute() (*types.Transaction, error) {
	return _MadByte.Contract.Distribute(&_MadByte.TransactOpts)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_MadByte *MadByteTransactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _MadByte.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_MadByte *MadByteSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.IncreaseAllowance(&_MadByte.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_MadByte *MadByteTransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.IncreaseAllowance(&_MadByte.TransactOpts, spender, addedValue)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 minMB_) payable returns(uint256 nuMB)
func (_MadByte *MadByteTransactor) Mint(opts *bind.TransactOpts, minMB_ *big.Int) (*types.Transaction, error) {
	return _MadByte.contract.Transact(opts, "mint", minMB_)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 minMB_) payable returns(uint256 nuMB)
func (_MadByte *MadByteSession) Mint(minMB_ *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.Mint(&_MadByte.TransactOpts, minMB_)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 minMB_) payable returns(uint256 nuMB)
func (_MadByte *MadByteTransactorSession) Mint(minMB_ *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.Mint(&_MadByte.TransactOpts, minMB_)
}

// MintDeposit is a paid mutator transaction binding the contract method 0x34afbf60.
//
// Solidity: function mintDeposit(address to_, uint256 minMB_) payable returns(uint256)
func (_MadByte *MadByteTransactor) MintDeposit(opts *bind.TransactOpts, to_ common.Address, minMB_ *big.Int) (*types.Transaction, error) {
	return _MadByte.contract.Transact(opts, "mintDeposit", to_, minMB_)
}

// MintDeposit is a paid mutator transaction binding the contract method 0x34afbf60.
//
// Solidity: function mintDeposit(address to_, uint256 minMB_) payable returns(uint256)
func (_MadByte *MadByteSession) MintDeposit(to_ common.Address, minMB_ *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.MintDeposit(&_MadByte.TransactOpts, to_, minMB_)
}

// MintDeposit is a paid mutator transaction binding the contract method 0x34afbf60.
//
// Solidity: function mintDeposit(address to_, uint256 minMB_) payable returns(uint256)
func (_MadByte *MadByteTransactorSession) MintDeposit(to_ common.Address, minMB_ *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.MintDeposit(&_MadByte.TransactOpts, to_, minMB_)
}

// MintTo is a paid mutator transaction binding the contract method 0x449a52f8.
//
// Solidity: function mintTo(address to_, uint256 minMB_) payable returns(uint256 nuMB)
func (_MadByte *MadByteTransactor) MintTo(opts *bind.TransactOpts, to_ common.Address, minMB_ *big.Int) (*types.Transaction, error) {
	return _MadByte.contract.Transact(opts, "mintTo", to_, minMB_)
}

// MintTo is a paid mutator transaction binding the contract method 0x449a52f8.
//
// Solidity: function mintTo(address to_, uint256 minMB_) payable returns(uint256 nuMB)
func (_MadByte *MadByteSession) MintTo(to_ common.Address, minMB_ *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.MintTo(&_MadByte.TransactOpts, to_, minMB_)
}

// MintTo is a paid mutator transaction binding the contract method 0x449a52f8.
//
// Solidity: function mintTo(address to_, uint256 minMB_) payable returns(uint256 nuMB)
func (_MadByte *MadByteTransactorSession) MintTo(to_ common.Address, minMB_ *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.MintTo(&_MadByte.TransactOpts, to_, minMB_)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address admin_) returns()
func (_MadByte *MadByteTransactor) SetAdmin(opts *bind.TransactOpts, admin_ common.Address) (*types.Transaction, error) {
	return _MadByte.contract.Transact(opts, "setAdmin", admin_)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address admin_) returns()
func (_MadByte *MadByteSession) SetAdmin(admin_ common.Address) (*types.Transaction, error) {
	return _MadByte.Contract.SetAdmin(&_MadByte.TransactOpts, admin_)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address admin_) returns()
func (_MadByte *MadByteTransactorSession) SetAdmin(admin_ common.Address) (*types.Transaction, error) {
	return _MadByte.Contract.SetAdmin(&_MadByte.TransactOpts, admin_)
}

// SetFoundation is a paid mutator transaction binding the contract method 0xdb3543f5.
//
// Solidity: function setFoundation(address foundation_) returns()
func (_MadByte *MadByteTransactor) SetFoundation(opts *bind.TransactOpts, foundation_ common.Address) (*types.Transaction, error) {
	return _MadByte.contract.Transact(opts, "setFoundation", foundation_)
}

// SetFoundation is a paid mutator transaction binding the contract method 0xdb3543f5.
//
// Solidity: function setFoundation(address foundation_) returns()
func (_MadByte *MadByteSession) SetFoundation(foundation_ common.Address) (*types.Transaction, error) {
	return _MadByte.Contract.SetFoundation(&_MadByte.TransactOpts, foundation_)
}

// SetFoundation is a paid mutator transaction binding the contract method 0xdb3543f5.
//
// Solidity: function setFoundation(address foundation_) returns()
func (_MadByte *MadByteTransactorSession) SetFoundation(foundation_ common.Address) (*types.Transaction, error) {
	return _MadByte.Contract.SetFoundation(&_MadByte.TransactOpts, foundation_)
}

// SetLPStaking is a paid mutator transaction binding the contract method 0xb3113b2a.
//
// Solidity: function setLPStaking(address lpStaking_) returns()
func (_MadByte *MadByteTransactor) SetLPStaking(opts *bind.TransactOpts, lpStaking_ common.Address) (*types.Transaction, error) {
	return _MadByte.contract.Transact(opts, "setLPStaking", lpStaking_)
}

// SetLPStaking is a paid mutator transaction binding the contract method 0xb3113b2a.
//
// Solidity: function setLPStaking(address lpStaking_) returns()
func (_MadByte *MadByteSession) SetLPStaking(lpStaking_ common.Address) (*types.Transaction, error) {
	return _MadByte.Contract.SetLPStaking(&_MadByte.TransactOpts, lpStaking_)
}

// SetLPStaking is a paid mutator transaction binding the contract method 0xb3113b2a.
//
// Solidity: function setLPStaking(address lpStaking_) returns()
func (_MadByte *MadByteTransactorSession) SetLPStaking(lpStaking_ common.Address) (*types.Transaction, error) {
	return _MadByte.Contract.SetLPStaking(&_MadByte.TransactOpts, lpStaking_)
}

// SetMadStaking is a paid mutator transaction binding the contract method 0x9f1d6c19.
//
// Solidity: function setMadStaking(address madStaking_) returns()
func (_MadByte *MadByteTransactor) SetMadStaking(opts *bind.TransactOpts, madStaking_ common.Address) (*types.Transaction, error) {
	return _MadByte.contract.Transact(opts, "setMadStaking", madStaking_)
}

// SetMadStaking is a paid mutator transaction binding the contract method 0x9f1d6c19.
//
// Solidity: function setMadStaking(address madStaking_) returns()
func (_MadByte *MadByteSession) SetMadStaking(madStaking_ common.Address) (*types.Transaction, error) {
	return _MadByte.Contract.SetMadStaking(&_MadByte.TransactOpts, madStaking_)
}

// SetMadStaking is a paid mutator transaction binding the contract method 0x9f1d6c19.
//
// Solidity: function setMadStaking(address madStaking_) returns()
func (_MadByte *MadByteTransactorSession) SetMadStaking(madStaking_ common.Address) (*types.Transaction, error) {
	return _MadByte.Contract.SetMadStaking(&_MadByte.TransactOpts, madStaking_)
}

// SetMinerStaking is a paid mutator transaction binding the contract method 0x7ef5da04.
//
// Solidity: function setMinerStaking(address minerStaking_) returns()
func (_MadByte *MadByteTransactor) SetMinerStaking(opts *bind.TransactOpts, minerStaking_ common.Address) (*types.Transaction, error) {
	return _MadByte.contract.Transact(opts, "setMinerStaking", minerStaking_)
}

// SetMinerStaking is a paid mutator transaction binding the contract method 0x7ef5da04.
//
// Solidity: function setMinerStaking(address minerStaking_) returns()
func (_MadByte *MadByteSession) SetMinerStaking(minerStaking_ common.Address) (*types.Transaction, error) {
	return _MadByte.Contract.SetMinerStaking(&_MadByte.TransactOpts, minerStaking_)
}

// SetMinerStaking is a paid mutator transaction binding the contract method 0x7ef5da04.
//
// Solidity: function setMinerStaking(address minerStaking_) returns()
func (_MadByte *MadByteTransactorSession) SetMinerStaking(minerStaking_ common.Address) (*types.Transaction, error) {
	return _MadByte.Contract.SetMinerStaking(&_MadByte.TransactOpts, minerStaking_)
}

// SetSplits is a paid mutator transaction binding the contract method 0x767bc1bf.
//
// Solidity: function setSplits(uint256 minerStakingSplit_, uint256 madStakingSplit_, uint256 lpStakingSplit_, uint256 protocolFee_) returns()
func (_MadByte *MadByteTransactor) SetSplits(opts *bind.TransactOpts, minerStakingSplit_ *big.Int, madStakingSplit_ *big.Int, lpStakingSplit_ *big.Int, protocolFee_ *big.Int) (*types.Transaction, error) {
	return _MadByte.contract.Transact(opts, "setSplits", minerStakingSplit_, madStakingSplit_, lpStakingSplit_, protocolFee_)
}

// SetSplits is a paid mutator transaction binding the contract method 0x767bc1bf.
//
// Solidity: function setSplits(uint256 minerStakingSplit_, uint256 madStakingSplit_, uint256 lpStakingSplit_, uint256 protocolFee_) returns()
func (_MadByte *MadByteSession) SetSplits(minerStakingSplit_ *big.Int, madStakingSplit_ *big.Int, lpStakingSplit_ *big.Int, protocolFee_ *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.SetSplits(&_MadByte.TransactOpts, minerStakingSplit_, madStakingSplit_, lpStakingSplit_, protocolFee_)
}

// SetSplits is a paid mutator transaction binding the contract method 0x767bc1bf.
//
// Solidity: function setSplits(uint256 minerStakingSplit_, uint256 madStakingSplit_, uint256 lpStakingSplit_, uint256 protocolFee_) returns()
func (_MadByte *MadByteTransactorSession) SetSplits(minerStakingSplit_ *big.Int, madStakingSplit_ *big.Int, lpStakingSplit_ *big.Int, protocolFee_ *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.SetSplits(&_MadByte.TransactOpts, minerStakingSplit_, madStakingSplit_, lpStakingSplit_, protocolFee_)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_MadByte *MadByteTransactor) Transfer(opts *bind.TransactOpts, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MadByte.contract.Transact(opts, "transfer", recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_MadByte *MadByteSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.Transfer(&_MadByte.TransactOpts, recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_MadByte *MadByteTransactorSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.Transfer(&_MadByte.TransactOpts, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_MadByte *MadByteTransactor) TransferFrom(opts *bind.TransactOpts, sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MadByte.contract.Transact(opts, "transferFrom", sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_MadByte *MadByteSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.TransferFrom(&_MadByte.TransactOpts, sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_MadByte *MadByteTransactorSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.TransferFrom(&_MadByte.TransactOpts, sender, recipient, amount)
}

// VirtualMintDeposit is a paid mutator transaction binding the contract method 0x142c514e.
//
// Solidity: function virtualMintDeposit(address to_, uint256 amount_) returns(uint256)
func (_MadByte *MadByteTransactor) VirtualMintDeposit(opts *bind.TransactOpts, to_ common.Address, amount_ *big.Int) (*types.Transaction, error) {
	return _MadByte.contract.Transact(opts, "virtualMintDeposit", to_, amount_)
}

// VirtualMintDeposit is a paid mutator transaction binding the contract method 0x142c514e.
//
// Solidity: function virtualMintDeposit(address to_, uint256 amount_) returns(uint256)
func (_MadByte *MadByteSession) VirtualMintDeposit(to_ common.Address, amount_ *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.VirtualMintDeposit(&_MadByte.TransactOpts, to_, amount_)
}

// VirtualMintDeposit is a paid mutator transaction binding the contract method 0x142c514e.
//
// Solidity: function virtualMintDeposit(address to_, uint256 amount_) returns(uint256)
func (_MadByte *MadByteTransactorSession) VirtualMintDeposit(to_ common.Address, amount_ *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.VirtualMintDeposit(&_MadByte.TransactOpts, to_, amount_)
}

// MadByteApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the MadByte contract.
type MadByteApprovalIterator struct {
	Event *MadByteApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MadByteApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MadByteApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MadByteApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MadByteApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MadByteApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MadByteApproval represents a Approval event raised by the MadByte contract.
type MadByteApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_MadByte *MadByteFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*MadByteApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _MadByte.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &MadByteApprovalIterator{contract: _MadByte.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_MadByte *MadByteFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *MadByteApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _MadByte.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MadByteApproval)
				if err := _MadByte.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_MadByte *MadByteFilterer) ParseApproval(log types.Log) (*MadByteApproval, error) {
	event := new(MadByteApproval)
	if err := _MadByte.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MadByteDepositReceivedIterator is returned from FilterDepositReceived and is used to iterate over the raw logs and unpacked data for DepositReceived events raised by the MadByte contract.
type MadByteDepositReceivedIterator struct {
	Event *MadByteDepositReceived // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MadByteDepositReceivedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MadByteDepositReceived)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MadByteDepositReceived)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MadByteDepositReceivedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MadByteDepositReceivedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MadByteDepositReceived represents a DepositReceived event raised by the MadByte contract.
type MadByteDepositReceived struct {
	DepositID *big.Int
	Depositor common.Address
	Amount    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterDepositReceived is a free log retrieval operation binding the contract event 0x5b063c6569a91e8133fc6cd71d31a4ca5c65c652fd53ae093f46107754f08541.
//
// Solidity: event DepositReceived(uint256 indexed depositID, address indexed depositor, uint256 amount)
func (_MadByte *MadByteFilterer) FilterDepositReceived(opts *bind.FilterOpts, depositID []*big.Int, depositor []common.Address) (*MadByteDepositReceivedIterator, error) {

	var depositIDRule []interface{}
	for _, depositIDItem := range depositID {
		depositIDRule = append(depositIDRule, depositIDItem)
	}
	var depositorRule []interface{}
	for _, depositorItem := range depositor {
		depositorRule = append(depositorRule, depositorItem)
	}

	logs, sub, err := _MadByte.contract.FilterLogs(opts, "DepositReceived", depositIDRule, depositorRule)
	if err != nil {
		return nil, err
	}
	return &MadByteDepositReceivedIterator{contract: _MadByte.contract, event: "DepositReceived", logs: logs, sub: sub}, nil
}

// WatchDepositReceived is a free log subscription operation binding the contract event 0x5b063c6569a91e8133fc6cd71d31a4ca5c65c652fd53ae093f46107754f08541.
//
// Solidity: event DepositReceived(uint256 indexed depositID, address indexed depositor, uint256 amount)
func (_MadByte *MadByteFilterer) WatchDepositReceived(opts *bind.WatchOpts, sink chan<- *MadByteDepositReceived, depositID []*big.Int, depositor []common.Address) (event.Subscription, error) {

	var depositIDRule []interface{}
	for _, depositIDItem := range depositID {
		depositIDRule = append(depositIDRule, depositIDItem)
	}
	var depositorRule []interface{}
	for _, depositorItem := range depositor {
		depositorRule = append(depositorRule, depositorItem)
	}

	logs, sub, err := _MadByte.contract.WatchLogs(opts, "DepositReceived", depositIDRule, depositorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MadByteDepositReceived)
				if err := _MadByte.contract.UnpackLog(event, "DepositReceived", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDepositReceived is a log parse operation binding the contract event 0x5b063c6569a91e8133fc6cd71d31a4ca5c65c652fd53ae093f46107754f08541.
//
// Solidity: event DepositReceived(uint256 indexed depositID, address indexed depositor, uint256 amount)
func (_MadByte *MadByteFilterer) ParseDepositReceived(log types.Log) (*MadByteDepositReceived, error) {
	event := new(MadByteDepositReceived)
	if err := _MadByte.contract.UnpackLog(event, "DepositReceived", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MadByteDepositReceivedBNIterator is returned from FilterDepositReceivedBN and is used to iterate over the raw logs and unpacked data for DepositReceivedBN events raised by the MadByte contract.
type MadByteDepositReceivedBNIterator struct {
	Event *MadByteDepositReceivedBN // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MadByteDepositReceivedBNIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MadByteDepositReceivedBN)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MadByteDepositReceivedBN)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MadByteDepositReceivedBNIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MadByteDepositReceivedBNIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MadByteDepositReceivedBN represents a DepositReceivedBN event raised by the MadByte contract.
type MadByteDepositReceivedBN struct {
	DepositID *big.Int
	To0       *big.Int
	To1       *big.Int
	To2       *big.Int
	To3       *big.Int
	Amount    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterDepositReceivedBN is a free log retrieval operation binding the contract event 0xbc042d1da385bbdd954b3996e43a972c725a235e533042d3cf3ba68dba57a163.
//
// Solidity: event DepositReceivedBN(uint256 indexed depositID, uint256 to0, uint256 to1, uint256 to2, uint256 to3, uint256 amount)
func (_MadByte *MadByteFilterer) FilterDepositReceivedBN(opts *bind.FilterOpts, depositID []*big.Int) (*MadByteDepositReceivedBNIterator, error) {

	var depositIDRule []interface{}
	for _, depositIDItem := range depositID {
		depositIDRule = append(depositIDRule, depositIDItem)
	}

	logs, sub, err := _MadByte.contract.FilterLogs(opts, "DepositReceivedBN", depositIDRule)
	if err != nil {
		return nil, err
	}
	return &MadByteDepositReceivedBNIterator{contract: _MadByte.contract, event: "DepositReceivedBN", logs: logs, sub: sub}, nil
}

// WatchDepositReceivedBN is a free log subscription operation binding the contract event 0xbc042d1da385bbdd954b3996e43a972c725a235e533042d3cf3ba68dba57a163.
//
// Solidity: event DepositReceivedBN(uint256 indexed depositID, uint256 to0, uint256 to1, uint256 to2, uint256 to3, uint256 amount)
func (_MadByte *MadByteFilterer) WatchDepositReceivedBN(opts *bind.WatchOpts, sink chan<- *MadByteDepositReceivedBN, depositID []*big.Int) (event.Subscription, error) {

	var depositIDRule []interface{}
	for _, depositIDItem := range depositID {
		depositIDRule = append(depositIDRule, depositIDItem)
	}

	logs, sub, err := _MadByte.contract.WatchLogs(opts, "DepositReceivedBN", depositIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MadByteDepositReceivedBN)
				if err := _MadByte.contract.UnpackLog(event, "DepositReceivedBN", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDepositReceivedBN is a log parse operation binding the contract event 0xbc042d1da385bbdd954b3996e43a972c725a235e533042d3cf3ba68dba57a163.
//
// Solidity: event DepositReceivedBN(uint256 indexed depositID, uint256 to0, uint256 to1, uint256 to2, uint256 to3, uint256 amount)
func (_MadByte *MadByteFilterer) ParseDepositReceivedBN(log types.Log) (*MadByteDepositReceivedBN, error) {
	event := new(MadByteDepositReceivedBN)
	if err := _MadByte.contract.UnpackLog(event, "DepositReceivedBN", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MadByteTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the MadByte contract.
type MadByteTransferIterator struct {
	Event *MadByteTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MadByteTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MadByteTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MadByteTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MadByteTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MadByteTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MadByteTransfer represents a Transfer event raised by the MadByte contract.
type MadByteTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_MadByte *MadByteFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*MadByteTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MadByte.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &MadByteTransferIterator{contract: _MadByte.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_MadByte *MadByteFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *MadByteTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MadByte.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MadByteTransfer)
				if err := _MadByte.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_MadByte *MadByteFilterer) ParseTransfer(log types.Log) (*MadByteTransfer, error) {
	event := new(MadByteTransfer)
	if err := _MadByte.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MagicEthTransferMetaData contains all meta data concerning the MagicEthTransfer contract.
var MagicEthTransferMetaData = &bind.MetaData{
	ABI: "[]",
}

// MagicEthTransferABI is the input ABI used to generate the binding from.
// Deprecated: Use MagicEthTransferMetaData.ABI instead.
var MagicEthTransferABI = MagicEthTransferMetaData.ABI

// MagicEthTransfer is an auto generated Go binding around an Ethereum contract.
type MagicEthTransfer struct {
	MagicEthTransferCaller     // Read-only binding to the contract
	MagicEthTransferTransactor // Write-only binding to the contract
	MagicEthTransferFilterer   // Log filterer for contract events
}

// MagicEthTransferCaller is an auto generated read-only Go binding around an Ethereum contract.
type MagicEthTransferCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MagicEthTransferTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MagicEthTransferTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MagicEthTransferFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MagicEthTransferFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MagicEthTransferSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MagicEthTransferSession struct {
	Contract     *MagicEthTransfer // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MagicEthTransferCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MagicEthTransferCallerSession struct {
	Contract *MagicEthTransferCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// MagicEthTransferTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MagicEthTransferTransactorSession struct {
	Contract     *MagicEthTransferTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// MagicEthTransferRaw is an auto generated low-level Go binding around an Ethereum contract.
type MagicEthTransferRaw struct {
	Contract *MagicEthTransfer // Generic contract binding to access the raw methods on
}

// MagicEthTransferCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MagicEthTransferCallerRaw struct {
	Contract *MagicEthTransferCaller // Generic read-only contract binding to access the raw methods on
}

// MagicEthTransferTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MagicEthTransferTransactorRaw struct {
	Contract *MagicEthTransferTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMagicEthTransfer creates a new instance of MagicEthTransfer, bound to a specific deployed contract.
func NewMagicEthTransfer(address common.Address, backend bind.ContractBackend) (*MagicEthTransfer, error) {
	contract, err := bindMagicEthTransfer(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MagicEthTransfer{MagicEthTransferCaller: MagicEthTransferCaller{contract: contract}, MagicEthTransferTransactor: MagicEthTransferTransactor{contract: contract}, MagicEthTransferFilterer: MagicEthTransferFilterer{contract: contract}}, nil
}

// NewMagicEthTransferCaller creates a new read-only instance of MagicEthTransfer, bound to a specific deployed contract.
func NewMagicEthTransferCaller(address common.Address, caller bind.ContractCaller) (*MagicEthTransferCaller, error) {
	contract, err := bindMagicEthTransfer(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MagicEthTransferCaller{contract: contract}, nil
}

// NewMagicEthTransferTransactor creates a new write-only instance of MagicEthTransfer, bound to a specific deployed contract.
func NewMagicEthTransferTransactor(address common.Address, transactor bind.ContractTransactor) (*MagicEthTransferTransactor, error) {
	contract, err := bindMagicEthTransfer(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MagicEthTransferTransactor{contract: contract}, nil
}

// NewMagicEthTransferFilterer creates a new log filterer instance of MagicEthTransfer, bound to a specific deployed contract.
func NewMagicEthTransferFilterer(address common.Address, filterer bind.ContractFilterer) (*MagicEthTransferFilterer, error) {
	contract, err := bindMagicEthTransfer(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MagicEthTransferFilterer{contract: contract}, nil
}

// bindMagicEthTransfer binds a generic wrapper to an already deployed contract.
func bindMagicEthTransfer(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MagicEthTransferABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MagicEthTransfer *MagicEthTransferRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MagicEthTransfer.Contract.MagicEthTransferCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MagicEthTransfer *MagicEthTransferRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MagicEthTransfer.Contract.MagicEthTransferTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MagicEthTransfer *MagicEthTransferRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MagicEthTransfer.Contract.MagicEthTransferTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MagicEthTransfer *MagicEthTransferCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MagicEthTransfer.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MagicEthTransfer *MagicEthTransferTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MagicEthTransfer.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MagicEthTransfer *MagicEthTransferTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MagicEthTransfer.Contract.contract.Transact(opts, method, params...)
}

// MagicTokenTransferMetaData contains all meta data concerning the MagicTokenTransfer contract.
var MagicTokenTransferMetaData = &bind.MetaData{
	ABI: "[]",
}

// MagicTokenTransferABI is the input ABI used to generate the binding from.
// Deprecated: Use MagicTokenTransferMetaData.ABI instead.
var MagicTokenTransferABI = MagicTokenTransferMetaData.ABI

// MagicTokenTransfer is an auto generated Go binding around an Ethereum contract.
type MagicTokenTransfer struct {
	MagicTokenTransferCaller     // Read-only binding to the contract
	MagicTokenTransferTransactor // Write-only binding to the contract
	MagicTokenTransferFilterer   // Log filterer for contract events
}

// MagicTokenTransferCaller is an auto generated read-only Go binding around an Ethereum contract.
type MagicTokenTransferCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MagicTokenTransferTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MagicTokenTransferTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MagicTokenTransferFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MagicTokenTransferFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MagicTokenTransferSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MagicTokenTransferSession struct {
	Contract     *MagicTokenTransfer // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// MagicTokenTransferCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MagicTokenTransferCallerSession struct {
	Contract *MagicTokenTransferCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// MagicTokenTransferTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MagicTokenTransferTransactorSession struct {
	Contract     *MagicTokenTransferTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// MagicTokenTransferRaw is an auto generated low-level Go binding around an Ethereum contract.
type MagicTokenTransferRaw struct {
	Contract *MagicTokenTransfer // Generic contract binding to access the raw methods on
}

// MagicTokenTransferCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MagicTokenTransferCallerRaw struct {
	Contract *MagicTokenTransferCaller // Generic read-only contract binding to access the raw methods on
}

// MagicTokenTransferTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MagicTokenTransferTransactorRaw struct {
	Contract *MagicTokenTransferTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMagicTokenTransfer creates a new instance of MagicTokenTransfer, bound to a specific deployed contract.
func NewMagicTokenTransfer(address common.Address, backend bind.ContractBackend) (*MagicTokenTransfer, error) {
	contract, err := bindMagicTokenTransfer(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MagicTokenTransfer{MagicTokenTransferCaller: MagicTokenTransferCaller{contract: contract}, MagicTokenTransferTransactor: MagicTokenTransferTransactor{contract: contract}, MagicTokenTransferFilterer: MagicTokenTransferFilterer{contract: contract}}, nil
}

// NewMagicTokenTransferCaller creates a new read-only instance of MagicTokenTransfer, bound to a specific deployed contract.
func NewMagicTokenTransferCaller(address common.Address, caller bind.ContractCaller) (*MagicTokenTransferCaller, error) {
	contract, err := bindMagicTokenTransfer(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MagicTokenTransferCaller{contract: contract}, nil
}

// NewMagicTokenTransferTransactor creates a new write-only instance of MagicTokenTransfer, bound to a specific deployed contract.
func NewMagicTokenTransferTransactor(address common.Address, transactor bind.ContractTransactor) (*MagicTokenTransferTransactor, error) {
	contract, err := bindMagicTokenTransfer(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MagicTokenTransferTransactor{contract: contract}, nil
}

// NewMagicTokenTransferFilterer creates a new log filterer instance of MagicTokenTransfer, bound to a specific deployed contract.
func NewMagicTokenTransferFilterer(address common.Address, filterer bind.ContractFilterer) (*MagicTokenTransferFilterer, error) {
	contract, err := bindMagicTokenTransfer(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MagicTokenTransferFilterer{contract: contract}, nil
}

// bindMagicTokenTransfer binds a generic wrapper to an already deployed contract.
func bindMagicTokenTransfer(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MagicTokenTransferABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MagicTokenTransfer *MagicTokenTransferRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MagicTokenTransfer.Contract.MagicTokenTransferCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MagicTokenTransfer *MagicTokenTransferRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MagicTokenTransfer.Contract.MagicTokenTransferTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MagicTokenTransfer *MagicTokenTransferRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MagicTokenTransfer.Contract.MagicTokenTransferTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MagicTokenTransfer *MagicTokenTransferCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MagicTokenTransfer.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MagicTokenTransfer *MagicTokenTransferTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MagicTokenTransfer.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MagicTokenTransfer *MagicTokenTransferTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MagicTokenTransfer.Contract.contract.Transact(opts, method, params...)
}

// MagicValueMetaData contains all meta data concerning the MagicValue contract.
var MagicValueMetaData = &bind.MetaData{
	ABI: "[]",
}

// MagicValueABI is the input ABI used to generate the binding from.
// Deprecated: Use MagicValueMetaData.ABI instead.
var MagicValueABI = MagicValueMetaData.ABI

// MagicValue is an auto generated Go binding around an Ethereum contract.
type MagicValue struct {
	MagicValueCaller     // Read-only binding to the contract
	MagicValueTransactor // Write-only binding to the contract
	MagicValueFilterer   // Log filterer for contract events
}

// MagicValueCaller is an auto generated read-only Go binding around an Ethereum contract.
type MagicValueCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MagicValueTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MagicValueTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MagicValueFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MagicValueFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MagicValueSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MagicValueSession struct {
	Contract     *MagicValue       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MagicValueCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MagicValueCallerSession struct {
	Contract *MagicValueCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// MagicValueTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MagicValueTransactorSession struct {
	Contract     *MagicValueTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// MagicValueRaw is an auto generated low-level Go binding around an Ethereum contract.
type MagicValueRaw struct {
	Contract *MagicValue // Generic contract binding to access the raw methods on
}

// MagicValueCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MagicValueCallerRaw struct {
	Contract *MagicValueCaller // Generic read-only contract binding to access the raw methods on
}

// MagicValueTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MagicValueTransactorRaw struct {
	Contract *MagicValueTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMagicValue creates a new instance of MagicValue, bound to a specific deployed contract.
func NewMagicValue(address common.Address, backend bind.ContractBackend) (*MagicValue, error) {
	contract, err := bindMagicValue(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MagicValue{MagicValueCaller: MagicValueCaller{contract: contract}, MagicValueTransactor: MagicValueTransactor{contract: contract}, MagicValueFilterer: MagicValueFilterer{contract: contract}}, nil
}

// NewMagicValueCaller creates a new read-only instance of MagicValue, bound to a specific deployed contract.
func NewMagicValueCaller(address common.Address, caller bind.ContractCaller) (*MagicValueCaller, error) {
	contract, err := bindMagicValue(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MagicValueCaller{contract: contract}, nil
}

// NewMagicValueTransactor creates a new write-only instance of MagicValue, bound to a specific deployed contract.
func NewMagicValueTransactor(address common.Address, transactor bind.ContractTransactor) (*MagicValueTransactor, error) {
	contract, err := bindMagicValue(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MagicValueTransactor{contract: contract}, nil
}

// NewMagicValueFilterer creates a new log filterer instance of MagicValue, bound to a specific deployed contract.
func NewMagicValueFilterer(address common.Address, filterer bind.ContractFilterer) (*MagicValueFilterer, error) {
	contract, err := bindMagicValue(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MagicValueFilterer{contract: contract}, nil
}

// bindMagicValue binds a generic wrapper to an already deployed contract.
func bindMagicValue(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MagicValueABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MagicValue *MagicValueRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MagicValue.Contract.MagicValueCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MagicValue *MagicValueRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MagicValue.Contract.MagicValueTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MagicValue *MagicValueRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MagicValue.Contract.MagicValueTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MagicValue *MagicValueCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MagicValue.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MagicValue *MagicValueTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MagicValue.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MagicValue *MagicValueTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MagicValue.Contract.contract.Transact(opts, method, params...)
}

// MerkleProofLibraryMetaData contains all meta data concerning the MerkleProofLibrary contract.
var MerkleProofLibraryMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e25070259627857cc6c6998efd8b5f281aa9f13536530d2575096ae346ee678b64736f6c63430008060033",
}

// MerkleProofLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use MerkleProofLibraryMetaData.ABI instead.
var MerkleProofLibraryABI = MerkleProofLibraryMetaData.ABI

// MerkleProofLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MerkleProofLibraryMetaData.Bin instead.
var MerkleProofLibraryBin = MerkleProofLibraryMetaData.Bin

// DeployMerkleProofLibrary deploys a new Ethereum contract, binding an instance of MerkleProofLibrary to it.
func DeployMerkleProofLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *MerkleProofLibrary, error) {
	parsed, err := MerkleProofLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MerkleProofLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MerkleProofLibrary{MerkleProofLibraryCaller: MerkleProofLibraryCaller{contract: contract}, MerkleProofLibraryTransactor: MerkleProofLibraryTransactor{contract: contract}, MerkleProofLibraryFilterer: MerkleProofLibraryFilterer{contract: contract}}, nil
}

// MerkleProofLibrary is an auto generated Go binding around an Ethereum contract.
type MerkleProofLibrary struct {
	MerkleProofLibraryCaller     // Read-only binding to the contract
	MerkleProofLibraryTransactor // Write-only binding to the contract
	MerkleProofLibraryFilterer   // Log filterer for contract events
}

// MerkleProofLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type MerkleProofLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MerkleProofLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MerkleProofLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MerkleProofLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MerkleProofLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MerkleProofLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MerkleProofLibrarySession struct {
	Contract     *MerkleProofLibrary // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// MerkleProofLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MerkleProofLibraryCallerSession struct {
	Contract *MerkleProofLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// MerkleProofLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MerkleProofLibraryTransactorSession struct {
	Contract     *MerkleProofLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// MerkleProofLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type MerkleProofLibraryRaw struct {
	Contract *MerkleProofLibrary // Generic contract binding to access the raw methods on
}

// MerkleProofLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MerkleProofLibraryCallerRaw struct {
	Contract *MerkleProofLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// MerkleProofLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MerkleProofLibraryTransactorRaw struct {
	Contract *MerkleProofLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMerkleProofLibrary creates a new instance of MerkleProofLibrary, bound to a specific deployed contract.
func NewMerkleProofLibrary(address common.Address, backend bind.ContractBackend) (*MerkleProofLibrary, error) {
	contract, err := bindMerkleProofLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MerkleProofLibrary{MerkleProofLibraryCaller: MerkleProofLibraryCaller{contract: contract}, MerkleProofLibraryTransactor: MerkleProofLibraryTransactor{contract: contract}, MerkleProofLibraryFilterer: MerkleProofLibraryFilterer{contract: contract}}, nil
}

// NewMerkleProofLibraryCaller creates a new read-only instance of MerkleProofLibrary, bound to a specific deployed contract.
func NewMerkleProofLibraryCaller(address common.Address, caller bind.ContractCaller) (*MerkleProofLibraryCaller, error) {
	contract, err := bindMerkleProofLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MerkleProofLibraryCaller{contract: contract}, nil
}

// NewMerkleProofLibraryTransactor creates a new write-only instance of MerkleProofLibrary, bound to a specific deployed contract.
func NewMerkleProofLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*MerkleProofLibraryTransactor, error) {
	contract, err := bindMerkleProofLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MerkleProofLibraryTransactor{contract: contract}, nil
}

// NewMerkleProofLibraryFilterer creates a new log filterer instance of MerkleProofLibrary, bound to a specific deployed contract.
func NewMerkleProofLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*MerkleProofLibraryFilterer, error) {
	contract, err := bindMerkleProofLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MerkleProofLibraryFilterer{contract: contract}, nil
}

// bindMerkleProofLibrary binds a generic wrapper to an already deployed contract.
func bindMerkleProofLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MerkleProofLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MerkleProofLibrary *MerkleProofLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MerkleProofLibrary.Contract.MerkleProofLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MerkleProofLibrary *MerkleProofLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MerkleProofLibrary.Contract.MerkleProofLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MerkleProofLibrary *MerkleProofLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MerkleProofLibrary.Contract.MerkleProofLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MerkleProofLibrary *MerkleProofLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MerkleProofLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MerkleProofLibrary *MerkleProofLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MerkleProofLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MerkleProofLibrary *MerkleProofLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MerkleProofLibrary.Contract.contract.Transact(opts, method, params...)
}

// MerkleProofParserLibraryMetaData contains all meta data concerning the MerkleProofParserLibrary contract.
var MerkleProofParserLibraryMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204cd9f776334b8cf094775467a0205cb208b3b76b19e78404cb22e6a03c797c5a64736f6c63430008060033",
}

// MerkleProofParserLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use MerkleProofParserLibraryMetaData.ABI instead.
var MerkleProofParserLibraryABI = MerkleProofParserLibraryMetaData.ABI

// MerkleProofParserLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MerkleProofParserLibraryMetaData.Bin instead.
var MerkleProofParserLibraryBin = MerkleProofParserLibraryMetaData.Bin

// DeployMerkleProofParserLibrary deploys a new Ethereum contract, binding an instance of MerkleProofParserLibrary to it.
func DeployMerkleProofParserLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *MerkleProofParserLibrary, error) {
	parsed, err := MerkleProofParserLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MerkleProofParserLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MerkleProofParserLibrary{MerkleProofParserLibraryCaller: MerkleProofParserLibraryCaller{contract: contract}, MerkleProofParserLibraryTransactor: MerkleProofParserLibraryTransactor{contract: contract}, MerkleProofParserLibraryFilterer: MerkleProofParserLibraryFilterer{contract: contract}}, nil
}

// MerkleProofParserLibrary is an auto generated Go binding around an Ethereum contract.
type MerkleProofParserLibrary struct {
	MerkleProofParserLibraryCaller     // Read-only binding to the contract
	MerkleProofParserLibraryTransactor // Write-only binding to the contract
	MerkleProofParserLibraryFilterer   // Log filterer for contract events
}

// MerkleProofParserLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type MerkleProofParserLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MerkleProofParserLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MerkleProofParserLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MerkleProofParserLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MerkleProofParserLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MerkleProofParserLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MerkleProofParserLibrarySession struct {
	Contract     *MerkleProofParserLibrary // Generic contract binding to set the session for
	CallOpts     bind.CallOpts             // Call options to use throughout this session
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// MerkleProofParserLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MerkleProofParserLibraryCallerSession struct {
	Contract *MerkleProofParserLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                   // Call options to use throughout this session
}

// MerkleProofParserLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MerkleProofParserLibraryTransactorSession struct {
	Contract     *MerkleProofParserLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                   // Transaction auth options to use throughout this session
}

// MerkleProofParserLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type MerkleProofParserLibraryRaw struct {
	Contract *MerkleProofParserLibrary // Generic contract binding to access the raw methods on
}

// MerkleProofParserLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MerkleProofParserLibraryCallerRaw struct {
	Contract *MerkleProofParserLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// MerkleProofParserLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MerkleProofParserLibraryTransactorRaw struct {
	Contract *MerkleProofParserLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMerkleProofParserLibrary creates a new instance of MerkleProofParserLibrary, bound to a specific deployed contract.
func NewMerkleProofParserLibrary(address common.Address, backend bind.ContractBackend) (*MerkleProofParserLibrary, error) {
	contract, err := bindMerkleProofParserLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MerkleProofParserLibrary{MerkleProofParserLibraryCaller: MerkleProofParserLibraryCaller{contract: contract}, MerkleProofParserLibraryTransactor: MerkleProofParserLibraryTransactor{contract: contract}, MerkleProofParserLibraryFilterer: MerkleProofParserLibraryFilterer{contract: contract}}, nil
}

// NewMerkleProofParserLibraryCaller creates a new read-only instance of MerkleProofParserLibrary, bound to a specific deployed contract.
func NewMerkleProofParserLibraryCaller(address common.Address, caller bind.ContractCaller) (*MerkleProofParserLibraryCaller, error) {
	contract, err := bindMerkleProofParserLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MerkleProofParserLibraryCaller{contract: contract}, nil
}

// NewMerkleProofParserLibraryTransactor creates a new write-only instance of MerkleProofParserLibrary, bound to a specific deployed contract.
func NewMerkleProofParserLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*MerkleProofParserLibraryTransactor, error) {
	contract, err := bindMerkleProofParserLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MerkleProofParserLibraryTransactor{contract: contract}, nil
}

// NewMerkleProofParserLibraryFilterer creates a new log filterer instance of MerkleProofParserLibrary, bound to a specific deployed contract.
func NewMerkleProofParserLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*MerkleProofParserLibraryFilterer, error) {
	contract, err := bindMerkleProofParserLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MerkleProofParserLibraryFilterer{contract: contract}, nil
}

// bindMerkleProofParserLibrary binds a generic wrapper to an already deployed contract.
func bindMerkleProofParserLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MerkleProofParserLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MerkleProofParserLibrary *MerkleProofParserLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MerkleProofParserLibrary.Contract.MerkleProofParserLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MerkleProofParserLibrary *MerkleProofParserLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MerkleProofParserLibrary.Contract.MerkleProofParserLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MerkleProofParserLibrary *MerkleProofParserLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MerkleProofParserLibrary.Contract.MerkleProofParserLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MerkleProofParserLibrary *MerkleProofParserLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MerkleProofParserLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MerkleProofParserLibrary *MerkleProofParserLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MerkleProofParserLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MerkleProofParserLibrary *MerkleProofParserLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MerkleProofParserLibrary.Contract.contract.Transact(opts, method, params...)
}

// MigrateETHDKGMetaData contains all meta data concerning the MigrateETHDKG contract.
var MigrateETHDKGMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"grantOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_ethHeight\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_madHeight\",\"type\":\"uint32\"},{\"internalType\":\"uint256[4]\",\"name\":\"_master_public_key\",\"type\":\"uint256[4]\"},{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[4][]\",\"name\":\"_gpkj\",\"type\":\"uint256[4][]\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governance_\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50600061002561007060201b6109e61760201c565b9050338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061009d565b6000807f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90508091505090565b6114a3806100ac6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80636053617214610067578063ab033ea914610071578063d35d5cbf1461008d578063dc978059146100a9578063e348da13146100c5578063fad8b32a146100e1575b600080fd5b61006f6100fd565b005b61008b60048036038101906100869190610d34565b610208565b005b6100a760048036038101906100a29190610d61565b6102fa565b005b6100c360048036038101906100be9190610d34565b61063f565b005b6100df60048036038101906100da9190610d34565b610731565b005b6100fb60048036038101906100f69190610d34565b610890565b005b60006101076109e6565b90508060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461019b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161019290610f7f565b60405180910390fd5b8060020160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60006102126109e6565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146102a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161029d90610fbf565b60405180910390fd5b60006102b06109e6565b9050828160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b60006103046109e6565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610394576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038b90610f9f565b60405180910390fd5b600061039e610a13565b9050838160000190805190602001906103b8929190610a40565b5084816009019060046103cc929190610aca565b507f1c85ff1efe0a905f8feca811e617102cb7ec896aded693eb96366c8ef22bb09f84518989898960006004811061040757610406611269565b5b60200201518a6001600481106104205761041f611269565b5b60200201518b60026004811061043957610438611269565b5b60200201518c60036004811061045257610451611269565b5b602002015160405161046b989796959493929190610fdf565b60405180910390a160005b845181101561063457600085828151811061049457610493611269565b5b602002602001015190508482815181106104b1576104b0611269565b5b60200260200101518360050160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020906004610508929190610aca565b507f113b129fac2dde341b9fbbec2bb79a95b9945b0e80fda711fc8ae5c7b0ea83b0818b6001856105399190611111565b88868151811061054c5761054b611269565b5b602002602001015160006004811061056757610566611269565b5b602002015189878151811061057f5761057e611269565b5b602002602001015160016004811061059a57610599611269565b5b60200201518a88815181106105b2576105b1611269565b5b60200260200101516002600481106105cd576105cc611269565b5b60200201518b89815181106105e5576105e4611269565b5b6020026020010151600360048110610600576105ff611269565b5b60200201516040516106189796959493929190610ef0565b60405180910390a150808061062c906111f1565b915050610476565b505050505050505050565b60006106496109e6565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146106dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d490610fbf565b60405180910390fd5b60006106e76109e6565b9050828160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b600061073b6109e6565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806107e657508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610825576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081c90610f5f565b60405180910390fd5b600061082f6109e6565b905060018160000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550505050565b600061089a6109e6565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061094557508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610984576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097b90610f5f565b60405180910390fd5b600061098e6109e6565b90508060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff0219169055505050565b6000807f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90508091505090565b6000807fd2d37756412c577f56b4802b8e643c9a817fa92cc18ff383f317fce7fab4282b90508091505090565b828054828255906000526020600020908101928215610ab9579160200282015b82811115610ab85782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a60565b5b509050610ac69190610b0a565b5090565b8260048101928215610af9579160200282015b82811115610af8578251825591602001919060010190610add565b5b509050610b069190610b0a565b5090565b5b80821115610b23576000816000905550600101610b0b565b5090565b6000610b3a610b3584611082565b61105d565b90508083825260208201905082856020860282011115610b5d57610b5c6112cc565b5b60005b85811015610b8d5781610b738882610c6e565b845260208401935060208301925050600181019050610b60565b5050509392505050565b6000610baa610ba5846110ae565b61105d565b90508083825260208201905082856080860282011115610bcd57610bcc6112cc565b5b60005b85811015610bfd5781610be38882610cdf565b845260208401935060808301925050600181019050610bd0565b5050509392505050565b6000610c1a610c15846110da565b61105d565b90508082856020860282011115610c3457610c336112cc565b5b60005b85811015610c645781610c4a8882610d0a565b845260208401935060208301925050600181019050610c37565b5050509392505050565b600081359050610c7d81611428565b92915050565b600082601f830112610c9857610c976112c7565b5b8135610ca8848260208601610b27565b91505092915050565b600082601f830112610cc657610cc56112c7565b5b8135610cd6848260208601610b97565b91505092915050565b600082601f830112610cf457610cf36112c7565b5b6004610d01848285610c07565b91505092915050565b600081359050610d198161143f565b92915050565b600081359050610d2e81611456565b92915050565b600060208284031215610d4a57610d496112d6565b5b6000610d5884828501610c6e565b91505092915050565b6000806000806000806101208789031215610d7f57610d7e6112d6565b5b6000610d8d89828a01610d0a565b9650506020610d9e89828a01610d1f565b9550506040610daf89828a01610d1f565b9450506060610dc089828a01610cdf565b93505060e087013567ffffffffffffffff811115610de157610de06112d1565b5b610ded89828a01610c83565b92505061010087013567ffffffffffffffff811115610e0f57610e0e6112d1565b5b610e1b89828a01610cb1565b9150509295509295509295565b610e3181611167565b82525050565b6000610e44602e83611100565b9150610e4f826112ec565b604082019050919050565b6000610e67602583611100565b9150610e728261133b565b604082019050919050565b6000610e8a602683611100565b9150610e958261138a565b604082019050919050565b6000610ead602583611100565b9150610eb8826113d9565b604082019050919050565b610ecc81611199565b82525050565b610edb816111a3565b82525050565b610eea816111b3565b82525050565b600060e082019050610f05600083018a610e28565b610f126020830189610ec3565b610f1f6040830188610ec3565b610f2c6060830187610ec3565b610f396080830186610ec3565b610f4660a0830185610ec3565b610f5360c0830184610ec3565b98975050505050505050565b60006020820190508181036000830152610f7881610e37565b9050919050565b60006020820190508181036000830152610f9881610e5a565b9050919050565b60006020820190508181036000830152610fb881610e7d565b9050919050565b60006020820190508181036000830152610fd881610ea0565b9050919050565b600061010082019050610ff5600083018b610ee1565b611002602083018a610ec3565b61100f6040830189610ed2565b61101c6060830188610ed2565b6110296080830187610ec3565b61103660a0830186610ec3565b61104360c0830185610ec3565b61105060e0830184610ec3565b9998505050505050505050565b6000611067611078565b905061107382826111c0565b919050565b6000604051905090565b600067ffffffffffffffff82111561109d5761109c611298565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156110c9576110c8611298565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156110f5576110f4611298565b5b602082029050919050565b600082825260208201905092915050565b600061111c82611199565b915061112783611199565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561115c5761115b61123a565b5b828201905092915050565b600061117282611179565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600060ff82169050919050565b6111c9826112db565b810181811067ffffffffffffffff821117156111e8576111e7611298565b5b80604052505050565b60006111fc82611199565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561122f5761122e61123a565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f41636365737320436f6e74726f6c3a206f6e6c79206f776e6572206f72206f7060008201527f657261746f7220616c6c6f776564000000000000000000000000000000000000602082015250565b7f41636365737320436f6e74726f6c3a206f776e657273686970206e6f7420677260008201527f616e746564000000000000000000000000000000000000000000000000000000602082015250565b7f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160008201527f6c6c6f7765640000000000000000000000000000000000000000000000000000602082015250565b7f41636365737320436f6e74726f6c3a206f6e6c79206f776e657220697320616c60008201527f6c6f776564000000000000000000000000000000000000000000000000000000602082015250565b61143181611167565b811461143c57600080fd5b50565b61144881611199565b811461145357600080fd5b50565b61145f816111a3565b811461146a57600080fd5b5056fea2646970667358221220836da369adb956cc9c0c4cbeddefedd4b5a4d8fa861160a94ab8e64f0c16906664736f6c63430008060033",
}

// MigrateETHDKGABI is the input ABI used to generate the binding from.
// Deprecated: Use MigrateETHDKGMetaData.ABI instead.
var MigrateETHDKGABI = MigrateETHDKGMetaData.ABI

// MigrateETHDKGBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MigrateETHDKGMetaData.Bin instead.
var MigrateETHDKGBin = MigrateETHDKGMetaData.Bin

// DeployMigrateETHDKG deploys a new Ethereum contract, binding an instance of MigrateETHDKG to it.
func DeployMigrateETHDKG(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *MigrateETHDKG, error) {
	parsed, err := MigrateETHDKGMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MigrateETHDKGBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MigrateETHDKG{MigrateETHDKGCaller: MigrateETHDKGCaller{contract: contract}, MigrateETHDKGTransactor: MigrateETHDKGTransactor{contract: contract}, MigrateETHDKGFilterer: MigrateETHDKGFilterer{contract: contract}}, nil
}

// MigrateETHDKG is an auto generated Go binding around an Ethereum contract.
type MigrateETHDKG struct {
	MigrateETHDKGCaller     // Read-only binding to the contract
	MigrateETHDKGTransactor // Write-only binding to the contract
	MigrateETHDKGFilterer   // Log filterer for contract events
}

// MigrateETHDKGCaller is an auto generated read-only Go binding around an Ethereum contract.
type MigrateETHDKGCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MigrateETHDKGTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MigrateETHDKGTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MigrateETHDKGFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MigrateETHDKGFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MigrateETHDKGSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MigrateETHDKGSession struct {
	Contract     *MigrateETHDKG    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MigrateETHDKGCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MigrateETHDKGCallerSession struct {
	Contract *MigrateETHDKGCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// MigrateETHDKGTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MigrateETHDKGTransactorSession struct {
	Contract     *MigrateETHDKGTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// MigrateETHDKGRaw is an auto generated low-level Go binding around an Ethereum contract.
type MigrateETHDKGRaw struct {
	Contract *MigrateETHDKG // Generic contract binding to access the raw methods on
}

// MigrateETHDKGCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MigrateETHDKGCallerRaw struct {
	Contract *MigrateETHDKGCaller // Generic read-only contract binding to access the raw methods on
}

// MigrateETHDKGTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MigrateETHDKGTransactorRaw struct {
	Contract *MigrateETHDKGTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMigrateETHDKG creates a new instance of MigrateETHDKG, bound to a specific deployed contract.
func NewMigrateETHDKG(address common.Address, backend bind.ContractBackend) (*MigrateETHDKG, error) {
	contract, err := bindMigrateETHDKG(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MigrateETHDKG{MigrateETHDKGCaller: MigrateETHDKGCaller{contract: contract}, MigrateETHDKGTransactor: MigrateETHDKGTransactor{contract: contract}, MigrateETHDKGFilterer: MigrateETHDKGFilterer{contract: contract}}, nil
}

// NewMigrateETHDKGCaller creates a new read-only instance of MigrateETHDKG, bound to a specific deployed contract.
func NewMigrateETHDKGCaller(address common.Address, caller bind.ContractCaller) (*MigrateETHDKGCaller, error) {
	contract, err := bindMigrateETHDKG(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MigrateETHDKGCaller{contract: contract}, nil
}

// NewMigrateETHDKGTransactor creates a new write-only instance of MigrateETHDKG, bound to a specific deployed contract.
func NewMigrateETHDKGTransactor(address common.Address, transactor bind.ContractTransactor) (*MigrateETHDKGTransactor, error) {
	contract, err := bindMigrateETHDKG(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MigrateETHDKGTransactor{contract: contract}, nil
}

// NewMigrateETHDKGFilterer creates a new log filterer instance of MigrateETHDKG, bound to a specific deployed contract.
func NewMigrateETHDKGFilterer(address common.Address, filterer bind.ContractFilterer) (*MigrateETHDKGFilterer, error) {
	contract, err := bindMigrateETHDKG(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MigrateETHDKGFilterer{contract: contract}, nil
}

// bindMigrateETHDKG binds a generic wrapper to an already deployed contract.
func bindMigrateETHDKG(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MigrateETHDKGABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MigrateETHDKG *MigrateETHDKGRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MigrateETHDKG.Contract.MigrateETHDKGCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MigrateETHDKG *MigrateETHDKGRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MigrateETHDKG.Contract.MigrateETHDKGTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MigrateETHDKG *MigrateETHDKGRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MigrateETHDKG.Contract.MigrateETHDKGTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MigrateETHDKG *MigrateETHDKGCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MigrateETHDKG.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MigrateETHDKG *MigrateETHDKGTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MigrateETHDKG.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MigrateETHDKG *MigrateETHDKGTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MigrateETHDKG.Contract.contract.Transact(opts, method, params...)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_MigrateETHDKG *MigrateETHDKGTransactor) GrantOperator(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _MigrateETHDKG.contract.Transact(opts, "grantOperator", who)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_MigrateETHDKG *MigrateETHDKGSession) GrantOperator(who common.Address) (*types.Transaction, error) {
	return _MigrateETHDKG.Contract.GrantOperator(&_MigrateETHDKG.TransactOpts, who)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_MigrateETHDKG *MigrateETHDKGTransactorSession) GrantOperator(who common.Address) (*types.Transaction, error) {
	return _MigrateETHDKG.Contract.GrantOperator(&_MigrateETHDKG.TransactOpts, who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_MigrateETHDKG *MigrateETHDKGTransactor) GrantOwner(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _MigrateETHDKG.contract.Transact(opts, "grantOwner", who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_MigrateETHDKG *MigrateETHDKGSession) GrantOwner(who common.Address) (*types.Transaction, error) {
	return _MigrateETHDKG.Contract.GrantOwner(&_MigrateETHDKG.TransactOpts, who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_MigrateETHDKG *MigrateETHDKGTransactorSession) GrantOwner(who common.Address) (*types.Transaction, error) {
	return _MigrateETHDKG.Contract.GrantOwner(&_MigrateETHDKG.TransactOpts, who)
}

// Migrate is a paid mutator transaction binding the contract method 0xd35d5cbf.
//
// Solidity: function migrate(uint256 _epoch, uint32 _ethHeight, uint32 _madHeight, uint256[4] _master_public_key, address[] _addresses, uint256[4][] _gpkj) returns()
func (_MigrateETHDKG *MigrateETHDKGTransactor) Migrate(opts *bind.TransactOpts, _epoch *big.Int, _ethHeight uint32, _madHeight uint32, _master_public_key [4]*big.Int, _addresses []common.Address, _gpkj [][4]*big.Int) (*types.Transaction, error) {
	return _MigrateETHDKG.contract.Transact(opts, "migrate", _epoch, _ethHeight, _madHeight, _master_public_key, _addresses, _gpkj)
}

// Migrate is a paid mutator transaction binding the contract method 0xd35d5cbf.
//
// Solidity: function migrate(uint256 _epoch, uint32 _ethHeight, uint32 _madHeight, uint256[4] _master_public_key, address[] _addresses, uint256[4][] _gpkj) returns()
func (_MigrateETHDKG *MigrateETHDKGSession) Migrate(_epoch *big.Int, _ethHeight uint32, _madHeight uint32, _master_public_key [4]*big.Int, _addresses []common.Address, _gpkj [][4]*big.Int) (*types.Transaction, error) {
	return _MigrateETHDKG.Contract.Migrate(&_MigrateETHDKG.TransactOpts, _epoch, _ethHeight, _madHeight, _master_public_key, _addresses, _gpkj)
}

// Migrate is a paid mutator transaction binding the contract method 0xd35d5cbf.
//
// Solidity: function migrate(uint256 _epoch, uint32 _ethHeight, uint32 _madHeight, uint256[4] _master_public_key, address[] _addresses, uint256[4][] _gpkj) returns()
func (_MigrateETHDKG *MigrateETHDKGTransactorSession) Migrate(_epoch *big.Int, _ethHeight uint32, _madHeight uint32, _master_public_key [4]*big.Int, _addresses []common.Address, _gpkj [][4]*big.Int) (*types.Transaction, error) {
	return _MigrateETHDKG.Contract.Migrate(&_MigrateETHDKG.TransactOpts, _epoch, _ethHeight, _madHeight, _master_public_key, _addresses, _gpkj)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_MigrateETHDKG *MigrateETHDKGTransactor) RevokeOperator(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _MigrateETHDKG.contract.Transact(opts, "revokeOperator", who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_MigrateETHDKG *MigrateETHDKGSession) RevokeOperator(who common.Address) (*types.Transaction, error) {
	return _MigrateETHDKG.Contract.RevokeOperator(&_MigrateETHDKG.TransactOpts, who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_MigrateETHDKG *MigrateETHDKGTransactorSession) RevokeOperator(who common.Address) (*types.Transaction, error) {
	return _MigrateETHDKG.Contract.RevokeOperator(&_MigrateETHDKG.TransactOpts, who)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_MigrateETHDKG *MigrateETHDKGTransactor) SetGovernance(opts *bind.TransactOpts, governance_ common.Address) (*types.Transaction, error) {
	return _MigrateETHDKG.contract.Transact(opts, "setGovernance", governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_MigrateETHDKG *MigrateETHDKGSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _MigrateETHDKG.Contract.SetGovernance(&_MigrateETHDKG.TransactOpts, governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_MigrateETHDKG *MigrateETHDKGTransactorSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _MigrateETHDKG.Contract.SetGovernance(&_MigrateETHDKG.TransactOpts, governance_)
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_MigrateETHDKG *MigrateETHDKGTransactor) TakeOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MigrateETHDKG.contract.Transact(opts, "takeOwnership")
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_MigrateETHDKG *MigrateETHDKGSession) TakeOwnership() (*types.Transaction, error) {
	return _MigrateETHDKG.Contract.TakeOwnership(&_MigrateETHDKG.TransactOpts)
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_MigrateETHDKG *MigrateETHDKGTransactorSession) TakeOwnership() (*types.Transaction, error) {
	return _MigrateETHDKG.Contract.TakeOwnership(&_MigrateETHDKG.TransactOpts)
}

// MigrateParticipantsFacetMetaData contains all meta data concerning the MigrateParticipantsFacet contract.
var MigrateParticipantsFacetMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256[2]\",\"name\":\"_madID\",\"type\":\"uint256[2]\"}],\"name\":\"addValidatorImmediate\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"grantOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256[2]\",\"name\":\"_madID\",\"type\":\"uint256[2]\"}],\"name\":\"removeValidatorImmediate\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governance_\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "",
}

// MigrateParticipantsFacetABI is the input ABI used to generate the binding from.
// Deprecated: Use MigrateParticipantsFacetMetaData.ABI instead.
var MigrateParticipantsFacetABI = MigrateParticipantsFacetMetaData.ABI

// MigrateParticipantsFacetBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MigrateParticipantsFacetMetaData.Bin instead.
var MigrateParticipantsFacetBin = MigrateParticipantsFacetMetaData.Bin

// DeployMigrateParticipantsFacet deploys a new Ethereum contract, binding an instance of MigrateParticipantsFacet to it.
func DeployMigrateParticipantsFacet(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *MigrateParticipantsFacet, error) {
	parsed, err := MigrateParticipantsFacetMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MigrateParticipantsFacetBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MigrateParticipantsFacet{MigrateParticipantsFacetCaller: MigrateParticipantsFacetCaller{contract: contract}, MigrateParticipantsFacetTransactor: MigrateParticipantsFacetTransactor{contract: contract}, MigrateParticipantsFacetFilterer: MigrateParticipantsFacetFilterer{contract: contract}}, nil
}

// MigrateParticipantsFacet is an auto generated Go binding around an Ethereum contract.
type MigrateParticipantsFacet struct {
	MigrateParticipantsFacetCaller     // Read-only binding to the contract
	MigrateParticipantsFacetTransactor // Write-only binding to the contract
	MigrateParticipantsFacetFilterer   // Log filterer for contract events
}

// MigrateParticipantsFacetCaller is an auto generated read-only Go binding around an Ethereum contract.
type MigrateParticipantsFacetCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MigrateParticipantsFacetTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MigrateParticipantsFacetTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MigrateParticipantsFacetFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MigrateParticipantsFacetFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MigrateParticipantsFacetSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MigrateParticipantsFacetSession struct {
	Contract     *MigrateParticipantsFacet // Generic contract binding to set the session for
	CallOpts     bind.CallOpts             // Call options to use throughout this session
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// MigrateParticipantsFacetCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MigrateParticipantsFacetCallerSession struct {
	Contract *MigrateParticipantsFacetCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                   // Call options to use throughout this session
}

// MigrateParticipantsFacetTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MigrateParticipantsFacetTransactorSession struct {
	Contract     *MigrateParticipantsFacetTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                   // Transaction auth options to use throughout this session
}

// MigrateParticipantsFacetRaw is an auto generated low-level Go binding around an Ethereum contract.
type MigrateParticipantsFacetRaw struct {
	Contract *MigrateParticipantsFacet // Generic contract binding to access the raw methods on
}

// MigrateParticipantsFacetCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MigrateParticipantsFacetCallerRaw struct {
	Contract *MigrateParticipantsFacetCaller // Generic read-only contract binding to access the raw methods on
}

// MigrateParticipantsFacetTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MigrateParticipantsFacetTransactorRaw struct {
	Contract *MigrateParticipantsFacetTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMigrateParticipantsFacet creates a new instance of MigrateParticipantsFacet, bound to a specific deployed contract.
func NewMigrateParticipantsFacet(address common.Address, backend bind.ContractBackend) (*MigrateParticipantsFacet, error) {
	contract, err := bindMigrateParticipantsFacet(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MigrateParticipantsFacet{MigrateParticipantsFacetCaller: MigrateParticipantsFacetCaller{contract: contract}, MigrateParticipantsFacetTransactor: MigrateParticipantsFacetTransactor{contract: contract}, MigrateParticipantsFacetFilterer: MigrateParticipantsFacetFilterer{contract: contract}}, nil
}

// NewMigrateParticipantsFacetCaller creates a new read-only instance of MigrateParticipantsFacet, bound to a specific deployed contract.
func NewMigrateParticipantsFacetCaller(address common.Address, caller bind.ContractCaller) (*MigrateParticipantsFacetCaller, error) {
	contract, err := bindMigrateParticipantsFacet(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MigrateParticipantsFacetCaller{contract: contract}, nil
}

// NewMigrateParticipantsFacetTransactor creates a new write-only instance of MigrateParticipantsFacet, bound to a specific deployed contract.
func NewMigrateParticipantsFacetTransactor(address common.Address, transactor bind.ContractTransactor) (*MigrateParticipantsFacetTransactor, error) {
	contract, err := bindMigrateParticipantsFacet(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MigrateParticipantsFacetTransactor{contract: contract}, nil
}

// NewMigrateParticipantsFacetFilterer creates a new log filterer instance of MigrateParticipantsFacet, bound to a specific deployed contract.
func NewMigrateParticipantsFacetFilterer(address common.Address, filterer bind.ContractFilterer) (*MigrateParticipantsFacetFilterer, error) {
	contract, err := bindMigrateParticipantsFacet(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MigrateParticipantsFacetFilterer{contract: contract}, nil
}

// bindMigrateParticipantsFacet binds a generic wrapper to an already deployed contract.
func bindMigrateParticipantsFacet(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MigrateParticipantsFacetABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MigrateParticipantsFacet *MigrateParticipantsFacetRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MigrateParticipantsFacet.Contract.MigrateParticipantsFacetCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MigrateParticipantsFacet *MigrateParticipantsFacetRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.Contract.MigrateParticipantsFacetTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MigrateParticipantsFacet *MigrateParticipantsFacetRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.Contract.MigrateParticipantsFacetTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MigrateParticipantsFacet *MigrateParticipantsFacetCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MigrateParticipantsFacet.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MigrateParticipantsFacet *MigrateParticipantsFacetTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MigrateParticipantsFacet *MigrateParticipantsFacetTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.Contract.contract.Transact(opts, method, params...)
}

// AddValidatorImmediate is a paid mutator transaction binding the contract method 0x71612d07.
//
// Solidity: function addValidatorImmediate(address _validator, uint256[2] _madID) returns(uint8)
func (_MigrateParticipantsFacet *MigrateParticipantsFacetTransactor) AddValidatorImmediate(opts *bind.TransactOpts, _validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.contract.Transact(opts, "addValidatorImmediate", _validator, _madID)
}

// AddValidatorImmediate is a paid mutator transaction binding the contract method 0x71612d07.
//
// Solidity: function addValidatorImmediate(address _validator, uint256[2] _madID) returns(uint8)
func (_MigrateParticipantsFacet *MigrateParticipantsFacetSession) AddValidatorImmediate(_validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.Contract.AddValidatorImmediate(&_MigrateParticipantsFacet.TransactOpts, _validator, _madID)
}

// AddValidatorImmediate is a paid mutator transaction binding the contract method 0x71612d07.
//
// Solidity: function addValidatorImmediate(address _validator, uint256[2] _madID) returns(uint8)
func (_MigrateParticipantsFacet *MigrateParticipantsFacetTransactorSession) AddValidatorImmediate(_validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.Contract.AddValidatorImmediate(&_MigrateParticipantsFacet.TransactOpts, _validator, _madID)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_MigrateParticipantsFacet *MigrateParticipantsFacetTransactor) GrantOperator(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.contract.Transact(opts, "grantOperator", who)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_MigrateParticipantsFacet *MigrateParticipantsFacetSession) GrantOperator(who common.Address) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.Contract.GrantOperator(&_MigrateParticipantsFacet.TransactOpts, who)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_MigrateParticipantsFacet *MigrateParticipantsFacetTransactorSession) GrantOperator(who common.Address) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.Contract.GrantOperator(&_MigrateParticipantsFacet.TransactOpts, who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_MigrateParticipantsFacet *MigrateParticipantsFacetTransactor) GrantOwner(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.contract.Transact(opts, "grantOwner", who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_MigrateParticipantsFacet *MigrateParticipantsFacetSession) GrantOwner(who common.Address) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.Contract.GrantOwner(&_MigrateParticipantsFacet.TransactOpts, who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_MigrateParticipantsFacet *MigrateParticipantsFacetTransactorSession) GrantOwner(who common.Address) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.Contract.GrantOwner(&_MigrateParticipantsFacet.TransactOpts, who)
}

// RemoveValidatorImmediate is a paid mutator transaction binding the contract method 0x06246a1d.
//
// Solidity: function removeValidatorImmediate(address _validator, uint256[2] _madID) returns(uint8)
func (_MigrateParticipantsFacet *MigrateParticipantsFacetTransactor) RemoveValidatorImmediate(opts *bind.TransactOpts, _validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.contract.Transact(opts, "removeValidatorImmediate", _validator, _madID)
}

// RemoveValidatorImmediate is a paid mutator transaction binding the contract method 0x06246a1d.
//
// Solidity: function removeValidatorImmediate(address _validator, uint256[2] _madID) returns(uint8)
func (_MigrateParticipantsFacet *MigrateParticipantsFacetSession) RemoveValidatorImmediate(_validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.Contract.RemoveValidatorImmediate(&_MigrateParticipantsFacet.TransactOpts, _validator, _madID)
}

// RemoveValidatorImmediate is a paid mutator transaction binding the contract method 0x06246a1d.
//
// Solidity: function removeValidatorImmediate(address _validator, uint256[2] _madID) returns(uint8)
func (_MigrateParticipantsFacet *MigrateParticipantsFacetTransactorSession) RemoveValidatorImmediate(_validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.Contract.RemoveValidatorImmediate(&_MigrateParticipantsFacet.TransactOpts, _validator, _madID)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_MigrateParticipantsFacet *MigrateParticipantsFacetTransactor) RevokeOperator(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.contract.Transact(opts, "revokeOperator", who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_MigrateParticipantsFacet *MigrateParticipantsFacetSession) RevokeOperator(who common.Address) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.Contract.RevokeOperator(&_MigrateParticipantsFacet.TransactOpts, who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_MigrateParticipantsFacet *MigrateParticipantsFacetTransactorSession) RevokeOperator(who common.Address) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.Contract.RevokeOperator(&_MigrateParticipantsFacet.TransactOpts, who)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_MigrateParticipantsFacet *MigrateParticipantsFacetTransactor) SetGovernance(opts *bind.TransactOpts, governance_ common.Address) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.contract.Transact(opts, "setGovernance", governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_MigrateParticipantsFacet *MigrateParticipantsFacetSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.Contract.SetGovernance(&_MigrateParticipantsFacet.TransactOpts, governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_MigrateParticipantsFacet *MigrateParticipantsFacetTransactorSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.Contract.SetGovernance(&_MigrateParticipantsFacet.TransactOpts, governance_)
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_MigrateParticipantsFacet *MigrateParticipantsFacetTransactor) Start(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.contract.Transact(opts, "start")
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_MigrateParticipantsFacet *MigrateParticipantsFacetSession) Start() (*types.Transaction, error) {
	return _MigrateParticipantsFacet.Contract.Start(&_MigrateParticipantsFacet.TransactOpts)
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_MigrateParticipantsFacet *MigrateParticipantsFacetTransactorSession) Start() (*types.Transaction, error) {
	return _MigrateParticipantsFacet.Contract.Start(&_MigrateParticipantsFacet.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_MigrateParticipantsFacet *MigrateParticipantsFacetTransactor) Stop(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.contract.Transact(opts, "stop")
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_MigrateParticipantsFacet *MigrateParticipantsFacetSession) Stop() (*types.Transaction, error) {
	return _MigrateParticipantsFacet.Contract.Stop(&_MigrateParticipantsFacet.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_MigrateParticipantsFacet *MigrateParticipantsFacetTransactorSession) Stop() (*types.Transaction, error) {
	return _MigrateParticipantsFacet.Contract.Stop(&_MigrateParticipantsFacet.TransactOpts)
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_MigrateParticipantsFacet *MigrateParticipantsFacetTransactor) TakeOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.contract.Transact(opts, "takeOwnership")
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_MigrateParticipantsFacet *MigrateParticipantsFacetSession) TakeOwnership() (*types.Transaction, error) {
	return _MigrateParticipantsFacet.Contract.TakeOwnership(&_MigrateParticipantsFacet.TransactOpts)
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_MigrateParticipantsFacet *MigrateParticipantsFacetTransactorSession) TakeOwnership() (*types.Transaction, error) {
	return _MigrateParticipantsFacet.Contract.TakeOwnership(&_MigrateParticipantsFacet.TransactOpts)
}

// MigrateSnapshotsFacetMetaData contains all meta data concerning the MigrateSnapshotsFacet contract.
var MigrateSnapshotsFacetMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"grantOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governance_\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signatureGroup\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_bclaims\",\"type\":\"bytes\"}],\"name\":\"snapshot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50600061002561007060201b6109601760201c565b9050338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061009d565b6000807f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90508091505090565b61111f806100ac6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806360536172146100675780637d7335b014610071578063ab033ea91461008d578063dc978059146100a9578063e348da13146100c5578063fad8b32a146100e1575b600080fd5b61006f6100fd565b005b61008b60048036038101906100869190610bf2565b610208565b005b6100a760048036038101906100a29190610bc5565b6104c7565b005b6100c360048036038101906100be9190610bc5565b6105b9565b005b6100df60048036038101906100da9190610bc5565b6106ab565b005b6100fb60048036038101906100f69190610bc5565b61080a565b005b6000610107610960565b90508060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461019b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161019290610d51565b60405180910390fd5b8060020160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000610212610960565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166102a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161029990610d71565b60405180910390fd5b60006102ac61098d565b905060006102ff85858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505060086109ba565b9050600061035286868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050600c6109ba565b905060008360000160008b8152602001908152602001600020905060018160000160006101000a81548160ff021916908315150217905550868682600101919061039d929190610aa2565b5088888260020191906103b1929190610aa2565b50438160030160006101000a81548163ffffffff021916908363ffffffff160217905550818160030160046101000a81548163ffffffff021916908363ffffffff160217905550828160000160016101000a81548163ffffffff021916908363ffffffff16021790555060008460010160009054906101000a900460ff161561043957600190505b60008560010160006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff168b7f6d438b6b835d16cdae6efdc0259fdfba17e6aa32dae81863a2467866f85f724a86868960010160009054906101000a900460ff166040516104b293929190610db1565b60405180910390a35050505050505050505050565b60006104d1610960565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610565576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055c90610d91565b60405180910390fd5b600061056f610960565b9050828160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b60006105c3610960565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610657576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064e90610d91565b60405180910390fd5b6000610661610960565b9050828160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b60006106b5610960565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061076057508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b61079f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079690610d31565b60405180910390fd5b60006107a9610960565b905060018160000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550505050565b6000610814610960565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806108bf57508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6108fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f590610d31565b60405180910390fd5b6000610908610960565b90508060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff0219169055505050565b6000807f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90508091505090565b6000807fd02b08f6836233a79224d6de3c3df078574b0f84d75d2a48f85a5a3cacc7291590508091505090565b6000826003836109ca9190610df9565b815181106109db576109da610f37565b5b602001015160f81c60f81b60f81c60ff169050826002836109fc9190610df9565b81518110610a0d57610a0c610f37565b5b602001015160f81c60f81b60f81c60ff1660088263ffffffff16901b17905082600183610a3a9190610df9565b81518110610a4b57610a4a610f37565b5b602001015160f81c60f81b60f81c60ff1660088263ffffffff16901b179050828281518110610a7d57610a7c610f37565b5b602001015160f81c60f81b60f81c60ff1660088263ffffffff16901b17905092915050565b828054610aae90610ea7565b90600052602060002090601f016020900481019282610ad05760008555610b17565b82601f10610ae957803560ff1916838001178555610b17565b82800160010185558215610b17579182015b82811115610b16578235825591602001919060010190610afb565b5b509050610b249190610b28565b5090565b5b80821115610b41576000816000905550600101610b29565b5090565b600081359050610b54816110bb565b92915050565b60008083601f840112610b7057610b6f610f6b565b5b8235905067ffffffffffffffff811115610b8d57610b8c610f66565b5b602083019150836001820283011115610ba957610ba8610f70565b5b9250929050565b600081359050610bbf816110d2565b92915050565b600060208284031215610bdb57610bda610f7a565b5b6000610be984828501610b45565b91505092915050565b600080600080600060608688031215610c0e57610c0d610f7a565b5b6000610c1c88828901610bb0565b955050602086013567ffffffffffffffff811115610c3d57610c3c610f75565b5b610c4988828901610b5a565b9450945050604086013567ffffffffffffffff811115610c6c57610c6b610f75565b5b610c7888828901610b5a565b92509250509295509295909350565b610c9081610e61565b82525050565b6000610ca3602e83610de8565b9150610cae82610f7f565b604082019050919050565b6000610cc6602583610de8565b9150610cd182610fce565b604082019050919050565b6000610ce9602683610de8565b9150610cf48261101d565b604082019050919050565b6000610d0c602583610de8565b9150610d178261106c565b604082019050919050565b610d2b81610e97565b82525050565b60006020820190508181036000830152610d4a81610c96565b9050919050565b60006020820190508181036000830152610d6a81610cb9565b9050919050565b60006020820190508181036000830152610d8a81610cdc565b9050919050565b60006020820190508181036000830152610daa81610cff565b9050919050565b6000606082019050610dc66000830186610d22565b610dd36020830185610d22565b610de06040830184610c87565b949350505050565b600082825260208201905092915050565b6000610e0482610e8d565b9150610e0f83610e8d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610e4457610e43610ed9565b5b828201905092915050565b6000610e5a82610e6d565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b60006002820490506001821680610ebf57607f821691505b60208210811415610ed357610ed2610f08565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b7f41636365737320436f6e74726f6c3a206f6e6c79206f776e6572206f72206f7060008201527f657261746f7220616c6c6f776564000000000000000000000000000000000000602082015250565b7f41636365737320436f6e74726f6c3a206f776e657273686970206e6f7420677260008201527f616e746564000000000000000000000000000000000000000000000000000000602082015250565b7f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160008201527f6c6c6f7765640000000000000000000000000000000000000000000000000000602082015250565b7f41636365737320436f6e74726f6c3a206f6e6c79206f776e657220697320616c60008201527f6c6f776564000000000000000000000000000000000000000000000000000000602082015250565b6110c481610e4f565b81146110cf57600080fd5b50565b6110db81610e8d565b81146110e657600080fd5b5056fea26469706673582212201f31a87a11c22bbe81ff4f33ea0b6c8e331bd35a18f188a38a134535a17bfccf64736f6c63430008060033",
}

// MigrateSnapshotsFacetABI is the input ABI used to generate the binding from.
// Deprecated: Use MigrateSnapshotsFacetMetaData.ABI instead.
var MigrateSnapshotsFacetABI = MigrateSnapshotsFacetMetaData.ABI

// MigrateSnapshotsFacetBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MigrateSnapshotsFacetMetaData.Bin instead.
var MigrateSnapshotsFacetBin = MigrateSnapshotsFacetMetaData.Bin

// DeployMigrateSnapshotsFacet deploys a new Ethereum contract, binding an instance of MigrateSnapshotsFacet to it.
func DeployMigrateSnapshotsFacet(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *MigrateSnapshotsFacet, error) {
	parsed, err := MigrateSnapshotsFacetMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MigrateSnapshotsFacetBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MigrateSnapshotsFacet{MigrateSnapshotsFacetCaller: MigrateSnapshotsFacetCaller{contract: contract}, MigrateSnapshotsFacetTransactor: MigrateSnapshotsFacetTransactor{contract: contract}, MigrateSnapshotsFacetFilterer: MigrateSnapshotsFacetFilterer{contract: contract}}, nil
}

// MigrateSnapshotsFacet is an auto generated Go binding around an Ethereum contract.
type MigrateSnapshotsFacet struct {
	MigrateSnapshotsFacetCaller     // Read-only binding to the contract
	MigrateSnapshotsFacetTransactor // Write-only binding to the contract
	MigrateSnapshotsFacetFilterer   // Log filterer for contract events
}

// MigrateSnapshotsFacetCaller is an auto generated read-only Go binding around an Ethereum contract.
type MigrateSnapshotsFacetCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MigrateSnapshotsFacetTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MigrateSnapshotsFacetTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MigrateSnapshotsFacetFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MigrateSnapshotsFacetFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MigrateSnapshotsFacetSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MigrateSnapshotsFacetSession struct {
	Contract     *MigrateSnapshotsFacet // Generic contract binding to set the session for
	CallOpts     bind.CallOpts          // Call options to use throughout this session
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// MigrateSnapshotsFacetCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MigrateSnapshotsFacetCallerSession struct {
	Contract *MigrateSnapshotsFacetCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                // Call options to use throughout this session
}

// MigrateSnapshotsFacetTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MigrateSnapshotsFacetTransactorSession struct {
	Contract     *MigrateSnapshotsFacetTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                // Transaction auth options to use throughout this session
}

// MigrateSnapshotsFacetRaw is an auto generated low-level Go binding around an Ethereum contract.
type MigrateSnapshotsFacetRaw struct {
	Contract *MigrateSnapshotsFacet // Generic contract binding to access the raw methods on
}

// MigrateSnapshotsFacetCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MigrateSnapshotsFacetCallerRaw struct {
	Contract *MigrateSnapshotsFacetCaller // Generic read-only contract binding to access the raw methods on
}

// MigrateSnapshotsFacetTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MigrateSnapshotsFacetTransactorRaw struct {
	Contract *MigrateSnapshotsFacetTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMigrateSnapshotsFacet creates a new instance of MigrateSnapshotsFacet, bound to a specific deployed contract.
func NewMigrateSnapshotsFacet(address common.Address, backend bind.ContractBackend) (*MigrateSnapshotsFacet, error) {
	contract, err := bindMigrateSnapshotsFacet(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MigrateSnapshotsFacet{MigrateSnapshotsFacetCaller: MigrateSnapshotsFacetCaller{contract: contract}, MigrateSnapshotsFacetTransactor: MigrateSnapshotsFacetTransactor{contract: contract}, MigrateSnapshotsFacetFilterer: MigrateSnapshotsFacetFilterer{contract: contract}}, nil
}

// NewMigrateSnapshotsFacetCaller creates a new read-only instance of MigrateSnapshotsFacet, bound to a specific deployed contract.
func NewMigrateSnapshotsFacetCaller(address common.Address, caller bind.ContractCaller) (*MigrateSnapshotsFacetCaller, error) {
	contract, err := bindMigrateSnapshotsFacet(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MigrateSnapshotsFacetCaller{contract: contract}, nil
}

// NewMigrateSnapshotsFacetTransactor creates a new write-only instance of MigrateSnapshotsFacet, bound to a specific deployed contract.
func NewMigrateSnapshotsFacetTransactor(address common.Address, transactor bind.ContractTransactor) (*MigrateSnapshotsFacetTransactor, error) {
	contract, err := bindMigrateSnapshotsFacet(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MigrateSnapshotsFacetTransactor{contract: contract}, nil
}

// NewMigrateSnapshotsFacetFilterer creates a new log filterer instance of MigrateSnapshotsFacet, bound to a specific deployed contract.
func NewMigrateSnapshotsFacetFilterer(address common.Address, filterer bind.ContractFilterer) (*MigrateSnapshotsFacetFilterer, error) {
	contract, err := bindMigrateSnapshotsFacet(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MigrateSnapshotsFacetFilterer{contract: contract}, nil
}

// bindMigrateSnapshotsFacet binds a generic wrapper to an already deployed contract.
func bindMigrateSnapshotsFacet(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MigrateSnapshotsFacetABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MigrateSnapshotsFacet.Contract.MigrateSnapshotsFacetCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MigrateSnapshotsFacet.Contract.MigrateSnapshotsFacetTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MigrateSnapshotsFacet.Contract.MigrateSnapshotsFacetTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MigrateSnapshotsFacet.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MigrateSnapshotsFacet.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MigrateSnapshotsFacet.Contract.contract.Transact(opts, method, params...)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetTransactor) GrantOperator(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _MigrateSnapshotsFacet.contract.Transact(opts, "grantOperator", who)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetSession) GrantOperator(who common.Address) (*types.Transaction, error) {
	return _MigrateSnapshotsFacet.Contract.GrantOperator(&_MigrateSnapshotsFacet.TransactOpts, who)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetTransactorSession) GrantOperator(who common.Address) (*types.Transaction, error) {
	return _MigrateSnapshotsFacet.Contract.GrantOperator(&_MigrateSnapshotsFacet.TransactOpts, who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetTransactor) GrantOwner(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _MigrateSnapshotsFacet.contract.Transact(opts, "grantOwner", who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetSession) GrantOwner(who common.Address) (*types.Transaction, error) {
	return _MigrateSnapshotsFacet.Contract.GrantOwner(&_MigrateSnapshotsFacet.TransactOpts, who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetTransactorSession) GrantOwner(who common.Address) (*types.Transaction, error) {
	return _MigrateSnapshotsFacet.Contract.GrantOwner(&_MigrateSnapshotsFacet.TransactOpts, who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetTransactor) RevokeOperator(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _MigrateSnapshotsFacet.contract.Transact(opts, "revokeOperator", who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetSession) RevokeOperator(who common.Address) (*types.Transaction, error) {
	return _MigrateSnapshotsFacet.Contract.RevokeOperator(&_MigrateSnapshotsFacet.TransactOpts, who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetTransactorSession) RevokeOperator(who common.Address) (*types.Transaction, error) {
	return _MigrateSnapshotsFacet.Contract.RevokeOperator(&_MigrateSnapshotsFacet.TransactOpts, who)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetTransactor) SetGovernance(opts *bind.TransactOpts, governance_ common.Address) (*types.Transaction, error) {
	return _MigrateSnapshotsFacet.contract.Transact(opts, "setGovernance", governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _MigrateSnapshotsFacet.Contract.SetGovernance(&_MigrateSnapshotsFacet.TransactOpts, governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetTransactorSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _MigrateSnapshotsFacet.Contract.SetGovernance(&_MigrateSnapshotsFacet.TransactOpts, governance_)
}

// Snapshot is a paid mutator transaction binding the contract method 0x7d7335b0.
//
// Solidity: function snapshot(uint256 snapshotId, bytes _signatureGroup, bytes _bclaims) returns()
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetTransactor) Snapshot(opts *bind.TransactOpts, snapshotId *big.Int, _signatureGroup []byte, _bclaims []byte) (*types.Transaction, error) {
	return _MigrateSnapshotsFacet.contract.Transact(opts, "snapshot", snapshotId, _signatureGroup, _bclaims)
}

// Snapshot is a paid mutator transaction binding the contract method 0x7d7335b0.
//
// Solidity: function snapshot(uint256 snapshotId, bytes _signatureGroup, bytes _bclaims) returns()
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetSession) Snapshot(snapshotId *big.Int, _signatureGroup []byte, _bclaims []byte) (*types.Transaction, error) {
	return _MigrateSnapshotsFacet.Contract.Snapshot(&_MigrateSnapshotsFacet.TransactOpts, snapshotId, _signatureGroup, _bclaims)
}

// Snapshot is a paid mutator transaction binding the contract method 0x7d7335b0.
//
// Solidity: function snapshot(uint256 snapshotId, bytes _signatureGroup, bytes _bclaims) returns()
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetTransactorSession) Snapshot(snapshotId *big.Int, _signatureGroup []byte, _bclaims []byte) (*types.Transaction, error) {
	return _MigrateSnapshotsFacet.Contract.Snapshot(&_MigrateSnapshotsFacet.TransactOpts, snapshotId, _signatureGroup, _bclaims)
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetTransactor) TakeOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MigrateSnapshotsFacet.contract.Transact(opts, "takeOwnership")
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetSession) TakeOwnership() (*types.Transaction, error) {
	return _MigrateSnapshotsFacet.Contract.TakeOwnership(&_MigrateSnapshotsFacet.TransactOpts)
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetTransactorSession) TakeOwnership() (*types.Transaction, error) {
	return _MigrateSnapshotsFacet.Contract.TakeOwnership(&_MigrateSnapshotsFacet.TransactOpts)
}

// MigrateStakingFacetMetaData contains all meta data concerning the MigrateStakingFacet contract.
var MigrateStakingFacetMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"grantOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockedReward\",\"type\":\"uint256\"}],\"name\":\"setBalancesFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governance_\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "",
}

// MigrateStakingFacetABI is the input ABI used to generate the binding from.
// Deprecated: Use MigrateStakingFacetMetaData.ABI instead.
var MigrateStakingFacetABI = MigrateStakingFacetMetaData.ABI

// MigrateStakingFacetBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MigrateStakingFacetMetaData.Bin instead.
var MigrateStakingFacetBin = MigrateStakingFacetMetaData.Bin

// DeployMigrateStakingFacet deploys a new Ethereum contract, binding an instance of MigrateStakingFacet to it.
func DeployMigrateStakingFacet(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *MigrateStakingFacet, error) {
	parsed, err := MigrateStakingFacetMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MigrateStakingFacetBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MigrateStakingFacet{MigrateStakingFacetCaller: MigrateStakingFacetCaller{contract: contract}, MigrateStakingFacetTransactor: MigrateStakingFacetTransactor{contract: contract}, MigrateStakingFacetFilterer: MigrateStakingFacetFilterer{contract: contract}}, nil
}

// MigrateStakingFacet is an auto generated Go binding around an Ethereum contract.
type MigrateStakingFacet struct {
	MigrateStakingFacetCaller     // Read-only binding to the contract
	MigrateStakingFacetTransactor // Write-only binding to the contract
	MigrateStakingFacetFilterer   // Log filterer for contract events
}

// MigrateStakingFacetCaller is an auto generated read-only Go binding around an Ethereum contract.
type MigrateStakingFacetCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MigrateStakingFacetTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MigrateStakingFacetTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MigrateStakingFacetFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MigrateStakingFacetFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MigrateStakingFacetSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MigrateStakingFacetSession struct {
	Contract     *MigrateStakingFacet // Generic contract binding to set the session for
	CallOpts     bind.CallOpts        // Call options to use throughout this session
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// MigrateStakingFacetCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MigrateStakingFacetCallerSession struct {
	Contract *MigrateStakingFacetCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts              // Call options to use throughout this session
}

// MigrateStakingFacetTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MigrateStakingFacetTransactorSession struct {
	Contract     *MigrateStakingFacetTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts              // Transaction auth options to use throughout this session
}

// MigrateStakingFacetRaw is an auto generated low-level Go binding around an Ethereum contract.
type MigrateStakingFacetRaw struct {
	Contract *MigrateStakingFacet // Generic contract binding to access the raw methods on
}

// MigrateStakingFacetCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MigrateStakingFacetCallerRaw struct {
	Contract *MigrateStakingFacetCaller // Generic read-only contract binding to access the raw methods on
}

// MigrateStakingFacetTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MigrateStakingFacetTransactorRaw struct {
	Contract *MigrateStakingFacetTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMigrateStakingFacet creates a new instance of MigrateStakingFacet, bound to a specific deployed contract.
func NewMigrateStakingFacet(address common.Address, backend bind.ContractBackend) (*MigrateStakingFacet, error) {
	contract, err := bindMigrateStakingFacet(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MigrateStakingFacet{MigrateStakingFacetCaller: MigrateStakingFacetCaller{contract: contract}, MigrateStakingFacetTransactor: MigrateStakingFacetTransactor{contract: contract}, MigrateStakingFacetFilterer: MigrateStakingFacetFilterer{contract: contract}}, nil
}

// NewMigrateStakingFacetCaller creates a new read-only instance of MigrateStakingFacet, bound to a specific deployed contract.
func NewMigrateStakingFacetCaller(address common.Address, caller bind.ContractCaller) (*MigrateStakingFacetCaller, error) {
	contract, err := bindMigrateStakingFacet(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MigrateStakingFacetCaller{contract: contract}, nil
}

// NewMigrateStakingFacetTransactor creates a new write-only instance of MigrateStakingFacet, bound to a specific deployed contract.
func NewMigrateStakingFacetTransactor(address common.Address, transactor bind.ContractTransactor) (*MigrateStakingFacetTransactor, error) {
	contract, err := bindMigrateStakingFacet(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MigrateStakingFacetTransactor{contract: contract}, nil
}

// NewMigrateStakingFacetFilterer creates a new log filterer instance of MigrateStakingFacet, bound to a specific deployed contract.
func NewMigrateStakingFacetFilterer(address common.Address, filterer bind.ContractFilterer) (*MigrateStakingFacetFilterer, error) {
	contract, err := bindMigrateStakingFacet(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MigrateStakingFacetFilterer{contract: contract}, nil
}

// bindMigrateStakingFacet binds a generic wrapper to an already deployed contract.
func bindMigrateStakingFacet(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MigrateStakingFacetABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MigrateStakingFacet *MigrateStakingFacetRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MigrateStakingFacet.Contract.MigrateStakingFacetCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MigrateStakingFacet *MigrateStakingFacetRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MigrateStakingFacet.Contract.MigrateStakingFacetTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MigrateStakingFacet *MigrateStakingFacetRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MigrateStakingFacet.Contract.MigrateStakingFacetTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MigrateStakingFacet *MigrateStakingFacetCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MigrateStakingFacet.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MigrateStakingFacet *MigrateStakingFacetTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MigrateStakingFacet.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MigrateStakingFacet *MigrateStakingFacetTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MigrateStakingFacet.Contract.contract.Transact(opts, method, params...)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_MigrateStakingFacet *MigrateStakingFacetTransactor) GrantOperator(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _MigrateStakingFacet.contract.Transact(opts, "grantOperator", who)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_MigrateStakingFacet *MigrateStakingFacetSession) GrantOperator(who common.Address) (*types.Transaction, error) {
	return _MigrateStakingFacet.Contract.GrantOperator(&_MigrateStakingFacet.TransactOpts, who)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_MigrateStakingFacet *MigrateStakingFacetTransactorSession) GrantOperator(who common.Address) (*types.Transaction, error) {
	return _MigrateStakingFacet.Contract.GrantOperator(&_MigrateStakingFacet.TransactOpts, who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_MigrateStakingFacet *MigrateStakingFacetTransactor) GrantOwner(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _MigrateStakingFacet.contract.Transact(opts, "grantOwner", who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_MigrateStakingFacet *MigrateStakingFacetSession) GrantOwner(who common.Address) (*types.Transaction, error) {
	return _MigrateStakingFacet.Contract.GrantOwner(&_MigrateStakingFacet.TransactOpts, who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_MigrateStakingFacet *MigrateStakingFacetTransactorSession) GrantOwner(who common.Address) (*types.Transaction, error) {
	return _MigrateStakingFacet.Contract.GrantOwner(&_MigrateStakingFacet.TransactOpts, who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_MigrateStakingFacet *MigrateStakingFacetTransactor) RevokeOperator(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _MigrateStakingFacet.contract.Transact(opts, "revokeOperator", who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_MigrateStakingFacet *MigrateStakingFacetSession) RevokeOperator(who common.Address) (*types.Transaction, error) {
	return _MigrateStakingFacet.Contract.RevokeOperator(&_MigrateStakingFacet.TransactOpts, who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_MigrateStakingFacet *MigrateStakingFacetTransactorSession) RevokeOperator(who common.Address) (*types.Transaction, error) {
	return _MigrateStakingFacet.Contract.RevokeOperator(&_MigrateStakingFacet.TransactOpts, who)
}

// SetBalancesFor is a paid mutator transaction binding the contract method 0xe86a737d.
//
// Solidity: function setBalancesFor(address who, uint256 lockedStake, uint256 unlockedStake, uint256 unlockedReward) returns()
func (_MigrateStakingFacet *MigrateStakingFacetTransactor) SetBalancesFor(opts *bind.TransactOpts, who common.Address, lockedStake *big.Int, unlockedStake *big.Int, unlockedReward *big.Int) (*types.Transaction, error) {
	return _MigrateStakingFacet.contract.Transact(opts, "setBalancesFor", who, lockedStake, unlockedStake, unlockedReward)
}

// SetBalancesFor is a paid mutator transaction binding the contract method 0xe86a737d.
//
// Solidity: function setBalancesFor(address who, uint256 lockedStake, uint256 unlockedStake, uint256 unlockedReward) returns()
func (_MigrateStakingFacet *MigrateStakingFacetSession) SetBalancesFor(who common.Address, lockedStake *big.Int, unlockedStake *big.Int, unlockedReward *big.Int) (*types.Transaction, error) {
	return _MigrateStakingFacet.Contract.SetBalancesFor(&_MigrateStakingFacet.TransactOpts, who, lockedStake, unlockedStake, unlockedReward)
}

// SetBalancesFor is a paid mutator transaction binding the contract method 0xe86a737d.
//
// Solidity: function setBalancesFor(address who, uint256 lockedStake, uint256 unlockedStake, uint256 unlockedReward) returns()
func (_MigrateStakingFacet *MigrateStakingFacetTransactorSession) SetBalancesFor(who common.Address, lockedStake *big.Int, unlockedStake *big.Int, unlockedReward *big.Int) (*types.Transaction, error) {
	return _MigrateStakingFacet.Contract.SetBalancesFor(&_MigrateStakingFacet.TransactOpts, who, lockedStake, unlockedStake, unlockedReward)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_MigrateStakingFacet *MigrateStakingFacetTransactor) SetGovernance(opts *bind.TransactOpts, governance_ common.Address) (*types.Transaction, error) {
	return _MigrateStakingFacet.contract.Transact(opts, "setGovernance", governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_MigrateStakingFacet *MigrateStakingFacetSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _MigrateStakingFacet.Contract.SetGovernance(&_MigrateStakingFacet.TransactOpts, governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_MigrateStakingFacet *MigrateStakingFacetTransactorSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _MigrateStakingFacet.Contract.SetGovernance(&_MigrateStakingFacet.TransactOpts, governance_)
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_MigrateStakingFacet *MigrateStakingFacetTransactor) Start(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MigrateStakingFacet.contract.Transact(opts, "start")
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_MigrateStakingFacet *MigrateStakingFacetSession) Start() (*types.Transaction, error) {
	return _MigrateStakingFacet.Contract.Start(&_MigrateStakingFacet.TransactOpts)
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_MigrateStakingFacet *MigrateStakingFacetTransactorSession) Start() (*types.Transaction, error) {
	return _MigrateStakingFacet.Contract.Start(&_MigrateStakingFacet.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_MigrateStakingFacet *MigrateStakingFacetTransactor) Stop(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MigrateStakingFacet.contract.Transact(opts, "stop")
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_MigrateStakingFacet *MigrateStakingFacetSession) Stop() (*types.Transaction, error) {
	return _MigrateStakingFacet.Contract.Stop(&_MigrateStakingFacet.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_MigrateStakingFacet *MigrateStakingFacetTransactorSession) Stop() (*types.Transaction, error) {
	return _MigrateStakingFacet.Contract.Stop(&_MigrateStakingFacet.TransactOpts)
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_MigrateStakingFacet *MigrateStakingFacetTransactor) TakeOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MigrateStakingFacet.contract.Transact(opts, "takeOwnership")
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_MigrateStakingFacet *MigrateStakingFacetSession) TakeOwnership() (*types.Transaction, error) {
	return _MigrateStakingFacet.Contract.TakeOwnership(&_MigrateStakingFacet.TransactOpts)
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_MigrateStakingFacet *MigrateStakingFacetTransactorSession) TakeOwnership() (*types.Transaction, error) {
	return _MigrateStakingFacet.Contract.TakeOwnership(&_MigrateStakingFacet.TransactOpts)
}

// MintableERC20MetaData contains all meta data concerning the MintableERC20 contract.
var MintableERC20MetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// MintableERC20ABI is the input ABI used to generate the binding from.
// Deprecated: Use MintableERC20MetaData.ABI instead.
var MintableERC20ABI = MintableERC20MetaData.ABI

// MintableERC20 is an auto generated Go binding around an Ethereum contract.
type MintableERC20 struct {
	MintableERC20Caller     // Read-only binding to the contract
	MintableERC20Transactor // Write-only binding to the contract
	MintableERC20Filterer   // Log filterer for contract events
}

// MintableERC20Caller is an auto generated read-only Go binding around an Ethereum contract.
type MintableERC20Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MintableERC20Transactor is an auto generated write-only Go binding around an Ethereum contract.
type MintableERC20Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MintableERC20Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MintableERC20Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MintableERC20Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MintableERC20Session struct {
	Contract     *MintableERC20    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MintableERC20CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MintableERC20CallerSession struct {
	Contract *MintableERC20Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// MintableERC20TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MintableERC20TransactorSession struct {
	Contract     *MintableERC20Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// MintableERC20Raw is an auto generated low-level Go binding around an Ethereum contract.
type MintableERC20Raw struct {
	Contract *MintableERC20 // Generic contract binding to access the raw methods on
}

// MintableERC20CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MintableERC20CallerRaw struct {
	Contract *MintableERC20Caller // Generic read-only contract binding to access the raw methods on
}

// MintableERC20TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MintableERC20TransactorRaw struct {
	Contract *MintableERC20Transactor // Generic write-only contract binding to access the raw methods on
}

// NewMintableERC20 creates a new instance of MintableERC20, bound to a specific deployed contract.
func NewMintableERC20(address common.Address, backend bind.ContractBackend) (*MintableERC20, error) {
	contract, err := bindMintableERC20(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MintableERC20{MintableERC20Caller: MintableERC20Caller{contract: contract}, MintableERC20Transactor: MintableERC20Transactor{contract: contract}, MintableERC20Filterer: MintableERC20Filterer{contract: contract}}, nil
}

// NewMintableERC20Caller creates a new read-only instance of MintableERC20, bound to a specific deployed contract.
func NewMintableERC20Caller(address common.Address, caller bind.ContractCaller) (*MintableERC20Caller, error) {
	contract, err := bindMintableERC20(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MintableERC20Caller{contract: contract}, nil
}

// NewMintableERC20Transactor creates a new write-only instance of MintableERC20, bound to a specific deployed contract.
func NewMintableERC20Transactor(address common.Address, transactor bind.ContractTransactor) (*MintableERC20Transactor, error) {
	contract, err := bindMintableERC20(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MintableERC20Transactor{contract: contract}, nil
}

// NewMintableERC20Filterer creates a new log filterer instance of MintableERC20, bound to a specific deployed contract.
func NewMintableERC20Filterer(address common.Address, filterer bind.ContractFilterer) (*MintableERC20Filterer, error) {
	contract, err := bindMintableERC20(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MintableERC20Filterer{contract: contract}, nil
}

// bindMintableERC20 binds a generic wrapper to an already deployed contract.
func bindMintableERC20(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MintableERC20ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MintableERC20 *MintableERC20Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MintableERC20.Contract.MintableERC20Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MintableERC20 *MintableERC20Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MintableERC20.Contract.MintableERC20Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MintableERC20 *MintableERC20Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MintableERC20.Contract.MintableERC20Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MintableERC20 *MintableERC20CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MintableERC20.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MintableERC20 *MintableERC20TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MintableERC20.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MintableERC20 *MintableERC20TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MintableERC20.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address src, address who) view returns(uint256)
func (_MintableERC20 *MintableERC20Caller) Allowance(opts *bind.CallOpts, src common.Address, who common.Address) (*big.Int, error) {
	var out []interface{}
	err := _MintableERC20.contract.Call(opts, &out, "allowance", src, who)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address src, address who) view returns(uint256)
func (_MintableERC20 *MintableERC20Session) Allowance(src common.Address, who common.Address) (*big.Int, error) {
	return _MintableERC20.Contract.Allowance(&_MintableERC20.CallOpts, src, who)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address src, address who) view returns(uint256)
func (_MintableERC20 *MintableERC20CallerSession) Allowance(src common.Address, who common.Address) (*big.Int, error) {
	return _MintableERC20.Contract.Allowance(&_MintableERC20.CallOpts, src, who)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address who) view returns(uint256)
func (_MintableERC20 *MintableERC20Caller) BalanceOf(opts *bind.CallOpts, who common.Address) (*big.Int, error) {
	var out []interface{}
	err := _MintableERC20.contract.Call(opts, &out, "balanceOf", who)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address who) view returns(uint256)
func (_MintableERC20 *MintableERC20Session) BalanceOf(who common.Address) (*big.Int, error) {
	return _MintableERC20.Contract.BalanceOf(&_MintableERC20.CallOpts, who)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address who) view returns(uint256)
func (_MintableERC20 *MintableERC20CallerSession) BalanceOf(who common.Address) (*big.Int, error) {
	return _MintableERC20.Contract.BalanceOf(&_MintableERC20.CallOpts, who)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_MintableERC20 *MintableERC20Caller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _MintableERC20.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_MintableERC20 *MintableERC20Session) TotalSupply() (*big.Int, error) {
	return _MintableERC20.Contract.TotalSupply(&_MintableERC20.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_MintableERC20 *MintableERC20CallerSession) TotalSupply() (*big.Int, error) {
	return _MintableERC20.Contract.TotalSupply(&_MintableERC20.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address who, uint256 wad) returns(bool)
func (_MintableERC20 *MintableERC20Transactor) Approve(opts *bind.TransactOpts, who common.Address, wad *big.Int) (*types.Transaction, error) {
	return _MintableERC20.contract.Transact(opts, "approve", who, wad)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address who, uint256 wad) returns(bool)
func (_MintableERC20 *MintableERC20Session) Approve(who common.Address, wad *big.Int) (*types.Transaction, error) {
	return _MintableERC20.Contract.Approve(&_MintableERC20.TransactOpts, who, wad)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address who, uint256 wad) returns(bool)
func (_MintableERC20 *MintableERC20TransactorSession) Approve(who common.Address, wad *big.Int) (*types.Transaction, error) {
	return _MintableERC20.Contract.Approve(&_MintableERC20.TransactOpts, who, wad)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_MintableERC20 *MintableERC20Transactor) GrantOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _MintableERC20.contract.Transact(opts, "grantOperator", _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_MintableERC20 *MintableERC20Session) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _MintableERC20.Contract.GrantOperator(&_MintableERC20.TransactOpts, _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_MintableERC20 *MintableERC20TransactorSession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _MintableERC20.Contract.GrantOperator(&_MintableERC20.TransactOpts, _operator)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address guy, uint256 wad) returns()
func (_MintableERC20 *MintableERC20Transactor) Mint(opts *bind.TransactOpts, guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _MintableERC20.contract.Transact(opts, "mint", guy, wad)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address guy, uint256 wad) returns()
func (_MintableERC20 *MintableERC20Session) Mint(guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _MintableERC20.Contract.Mint(&_MintableERC20.TransactOpts, guy, wad)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address guy, uint256 wad) returns()
func (_MintableERC20 *MintableERC20TransactorSession) Mint(guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _MintableERC20.Contract.Mint(&_MintableERC20.TransactOpts, guy, wad)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address dst, uint256 wad) returns(bool)
func (_MintableERC20 *MintableERC20Transactor) Transfer(opts *bind.TransactOpts, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _MintableERC20.contract.Transact(opts, "transfer", dst, wad)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address dst, uint256 wad) returns(bool)
func (_MintableERC20 *MintableERC20Session) Transfer(dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _MintableERC20.Contract.Transfer(&_MintableERC20.TransactOpts, dst, wad)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address dst, uint256 wad) returns(bool)
func (_MintableERC20 *MintableERC20TransactorSession) Transfer(dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _MintableERC20.Contract.Transfer(&_MintableERC20.TransactOpts, dst, wad)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address src, address dst, uint256 wad) returns(bool)
func (_MintableERC20 *MintableERC20Transactor) TransferFrom(opts *bind.TransactOpts, src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _MintableERC20.contract.Transact(opts, "transferFrom", src, dst, wad)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address src, address dst, uint256 wad) returns(bool)
func (_MintableERC20 *MintableERC20Session) TransferFrom(src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _MintableERC20.Contract.TransferFrom(&_MintableERC20.TransactOpts, src, dst, wad)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address src, address dst, uint256 wad) returns(bool)
func (_MintableERC20 *MintableERC20TransactorSession) TransferFrom(src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _MintableERC20.Contract.TransferFrom(&_MintableERC20.TransactOpts, src, dst, wad)
}

// MutexMetaData contains all meta data concerning the Mutex contract.
var MutexMetaData = &bind.MetaData{
	ABI: "[]",
}

// MutexABI is the input ABI used to generate the binding from.
// Deprecated: Use MutexMetaData.ABI instead.
var MutexABI = MutexMetaData.ABI

// Mutex is an auto generated Go binding around an Ethereum contract.
type Mutex struct {
	MutexCaller     // Read-only binding to the contract
	MutexTransactor // Write-only binding to the contract
	MutexFilterer   // Log filterer for contract events
}

// MutexCaller is an auto generated read-only Go binding around an Ethereum contract.
type MutexCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MutexTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MutexTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MutexFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MutexFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MutexSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MutexSession struct {
	Contract     *Mutex            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MutexCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MutexCallerSession struct {
	Contract *MutexCaller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// MutexTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MutexTransactorSession struct {
	Contract     *MutexTransactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MutexRaw is an auto generated low-level Go binding around an Ethereum contract.
type MutexRaw struct {
	Contract *Mutex // Generic contract binding to access the raw methods on
}

// MutexCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MutexCallerRaw struct {
	Contract *MutexCaller // Generic read-only contract binding to access the raw methods on
}

// MutexTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MutexTransactorRaw struct {
	Contract *MutexTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMutex creates a new instance of Mutex, bound to a specific deployed contract.
func NewMutex(address common.Address, backend bind.ContractBackend) (*Mutex, error) {
	contract, err := bindMutex(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Mutex{MutexCaller: MutexCaller{contract: contract}, MutexTransactor: MutexTransactor{contract: contract}, MutexFilterer: MutexFilterer{contract: contract}}, nil
}

// NewMutexCaller creates a new read-only instance of Mutex, bound to a specific deployed contract.
func NewMutexCaller(address common.Address, caller bind.ContractCaller) (*MutexCaller, error) {
	contract, err := bindMutex(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MutexCaller{contract: contract}, nil
}

// NewMutexTransactor creates a new write-only instance of Mutex, bound to a specific deployed contract.
func NewMutexTransactor(address common.Address, transactor bind.ContractTransactor) (*MutexTransactor, error) {
	contract, err := bindMutex(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MutexTransactor{contract: contract}, nil
}

// NewMutexFilterer creates a new log filterer instance of Mutex, bound to a specific deployed contract.
func NewMutexFilterer(address common.Address, filterer bind.ContractFilterer) (*MutexFilterer, error) {
	contract, err := bindMutex(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MutexFilterer{contract: contract}, nil
}

// bindMutex binds a generic wrapper to an already deployed contract.
func bindMutex(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MutexABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Mutex *MutexRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Mutex.Contract.MutexCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Mutex *MutexRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Mutex.Contract.MutexTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Mutex *MutexRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Mutex.Contract.MutexTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Mutex *MutexCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Mutex.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Mutex *MutexTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Mutex.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Mutex *MutexTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Mutex.Contract.contract.Transact(opts, method, params...)
}

// PClaimsParserLibraryMetaData contains all meta data concerning the PClaimsParserLibrary contract.
var PClaimsParserLibraryMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203955692f1034693770b38146b585d44dcdc487edbf18426b853f747a886d9a2b64736f6c63430008060033",
}

// PClaimsParserLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use PClaimsParserLibraryMetaData.ABI instead.
var PClaimsParserLibraryABI = PClaimsParserLibraryMetaData.ABI

// PClaimsParserLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use PClaimsParserLibraryMetaData.Bin instead.
var PClaimsParserLibraryBin = PClaimsParserLibraryMetaData.Bin

// DeployPClaimsParserLibrary deploys a new Ethereum contract, binding an instance of PClaimsParserLibrary to it.
func DeployPClaimsParserLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *PClaimsParserLibrary, error) {
	parsed, err := PClaimsParserLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(PClaimsParserLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &PClaimsParserLibrary{PClaimsParserLibraryCaller: PClaimsParserLibraryCaller{contract: contract}, PClaimsParserLibraryTransactor: PClaimsParserLibraryTransactor{contract: contract}, PClaimsParserLibraryFilterer: PClaimsParserLibraryFilterer{contract: contract}}, nil
}

// PClaimsParserLibrary is an auto generated Go binding around an Ethereum contract.
type PClaimsParserLibrary struct {
	PClaimsParserLibraryCaller     // Read-only binding to the contract
	PClaimsParserLibraryTransactor // Write-only binding to the contract
	PClaimsParserLibraryFilterer   // Log filterer for contract events
}

// PClaimsParserLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type PClaimsParserLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PClaimsParserLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PClaimsParserLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PClaimsParserLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PClaimsParserLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PClaimsParserLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PClaimsParserLibrarySession struct {
	Contract     *PClaimsParserLibrary // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// PClaimsParserLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PClaimsParserLibraryCallerSession struct {
	Contract *PClaimsParserLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// PClaimsParserLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PClaimsParserLibraryTransactorSession struct {
	Contract     *PClaimsParserLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// PClaimsParserLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type PClaimsParserLibraryRaw struct {
	Contract *PClaimsParserLibrary // Generic contract binding to access the raw methods on
}

// PClaimsParserLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PClaimsParserLibraryCallerRaw struct {
	Contract *PClaimsParserLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// PClaimsParserLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PClaimsParserLibraryTransactorRaw struct {
	Contract *PClaimsParserLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPClaimsParserLibrary creates a new instance of PClaimsParserLibrary, bound to a specific deployed contract.
func NewPClaimsParserLibrary(address common.Address, backend bind.ContractBackend) (*PClaimsParserLibrary, error) {
	contract, err := bindPClaimsParserLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &PClaimsParserLibrary{PClaimsParserLibraryCaller: PClaimsParserLibraryCaller{contract: contract}, PClaimsParserLibraryTransactor: PClaimsParserLibraryTransactor{contract: contract}, PClaimsParserLibraryFilterer: PClaimsParserLibraryFilterer{contract: contract}}, nil
}

// NewPClaimsParserLibraryCaller creates a new read-only instance of PClaimsParserLibrary, bound to a specific deployed contract.
func NewPClaimsParserLibraryCaller(address common.Address, caller bind.ContractCaller) (*PClaimsParserLibraryCaller, error) {
	contract, err := bindPClaimsParserLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PClaimsParserLibraryCaller{contract: contract}, nil
}

// NewPClaimsParserLibraryTransactor creates a new write-only instance of PClaimsParserLibrary, bound to a specific deployed contract.
func NewPClaimsParserLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*PClaimsParserLibraryTransactor, error) {
	contract, err := bindPClaimsParserLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PClaimsParserLibraryTransactor{contract: contract}, nil
}

// NewPClaimsParserLibraryFilterer creates a new log filterer instance of PClaimsParserLibrary, bound to a specific deployed contract.
func NewPClaimsParserLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*PClaimsParserLibraryFilterer, error) {
	contract, err := bindPClaimsParserLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PClaimsParserLibraryFilterer{contract: contract}, nil
}

// bindPClaimsParserLibrary binds a generic wrapper to an already deployed contract.
func bindPClaimsParserLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(PClaimsParserLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PClaimsParserLibrary *PClaimsParserLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PClaimsParserLibrary.Contract.PClaimsParserLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PClaimsParserLibrary *PClaimsParserLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PClaimsParserLibrary.Contract.PClaimsParserLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PClaimsParserLibrary *PClaimsParserLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PClaimsParserLibrary.Contract.PClaimsParserLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PClaimsParserLibrary *PClaimsParserLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PClaimsParserLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PClaimsParserLibrary *PClaimsParserLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PClaimsParserLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PClaimsParserLibrary *PClaimsParserLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PClaimsParserLibrary.Contract.contract.Transact(opts, method, params...)
}

// ParticipantsMetaData contains all meta data concerning the Participants contract.
var ParticipantsMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"madID\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"madID\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"pkHash\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorLeft\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"pkHash\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorQueued\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256[2]\",\"name\":\"_madID\",\"type\":\"uint256[2]\"}],\"name\":\"addValidator\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmValidators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"getValidatorPublicKey\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractRegistry\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"initializeParticipants\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256[2]\",\"name\":\"_madID\",\"type\":\"uint256[2]\"}],\"name\":\"removeValidator\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_chainId\",\"type\":\"uint32\"}],\"name\":\"setChainId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"max\",\"type\":\"uint8\"}],\"name\":\"setValidatorMaxCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorMaxCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// ParticipantsABI is the input ABI used to generate the binding from.
// Deprecated: Use ParticipantsMetaData.ABI instead.
var ParticipantsABI = ParticipantsMetaData.ABI

// Participants is an auto generated Go binding around an Ethereum contract.
type Participants struct {
	ParticipantsCaller     // Read-only binding to the contract
	ParticipantsTransactor // Write-only binding to the contract
	ParticipantsFilterer   // Log filterer for contract events
}

// ParticipantsCaller is an auto generated read-only Go binding around an Ethereum contract.
type ParticipantsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ParticipantsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ParticipantsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ParticipantsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ParticipantsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ParticipantsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ParticipantsSession struct {
	Contract     *Participants     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ParticipantsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ParticipantsCallerSession struct {
	Contract *ParticipantsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// ParticipantsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ParticipantsTransactorSession struct {
	Contract     *ParticipantsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// ParticipantsRaw is an auto generated low-level Go binding around an Ethereum contract.
type ParticipantsRaw struct {
	Contract *Participants // Generic contract binding to access the raw methods on
}

// ParticipantsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ParticipantsCallerRaw struct {
	Contract *ParticipantsCaller // Generic read-only contract binding to access the raw methods on
}

// ParticipantsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ParticipantsTransactorRaw struct {
	Contract *ParticipantsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewParticipants creates a new instance of Participants, bound to a specific deployed contract.
func NewParticipants(address common.Address, backend bind.ContractBackend) (*Participants, error) {
	contract, err := bindParticipants(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Participants{ParticipantsCaller: ParticipantsCaller{contract: contract}, ParticipantsTransactor: ParticipantsTransactor{contract: contract}, ParticipantsFilterer: ParticipantsFilterer{contract: contract}}, nil
}

// NewParticipantsCaller creates a new read-only instance of Participants, bound to a specific deployed contract.
func NewParticipantsCaller(address common.Address, caller bind.ContractCaller) (*ParticipantsCaller, error) {
	contract, err := bindParticipants(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ParticipantsCaller{contract: contract}, nil
}

// NewParticipantsTransactor creates a new write-only instance of Participants, bound to a specific deployed contract.
func NewParticipantsTransactor(address common.Address, transactor bind.ContractTransactor) (*ParticipantsTransactor, error) {
	contract, err := bindParticipants(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ParticipantsTransactor{contract: contract}, nil
}

// NewParticipantsFilterer creates a new log filterer instance of Participants, bound to a specific deployed contract.
func NewParticipantsFilterer(address common.Address, filterer bind.ContractFilterer) (*ParticipantsFilterer, error) {
	contract, err := bindParticipants(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ParticipantsFilterer{contract: contract}, nil
}

// bindParticipants binds a generic wrapper to an already deployed contract.
func bindParticipants(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ParticipantsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Participants *ParticipantsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Participants.Contract.ParticipantsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Participants *ParticipantsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Participants.Contract.ParticipantsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Participants *ParticipantsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Participants.Contract.ParticipantsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Participants *ParticipantsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Participants.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Participants *ParticipantsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Participants.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Participants *ParticipantsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Participants.Contract.contract.Transact(opts, method, params...)
}

// GetChainId is a free data retrieval call binding the contract method 0x3408e470.
//
// Solidity: function getChainId() view returns(uint32)
func (_Participants *ParticipantsCaller) GetChainId(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _Participants.contract.Call(opts, &out, "getChainId")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// GetChainId is a free data retrieval call binding the contract method 0x3408e470.
//
// Solidity: function getChainId() view returns(uint32)
func (_Participants *ParticipantsSession) GetChainId() (uint32, error) {
	return _Participants.Contract.GetChainId(&_Participants.CallOpts)
}

// GetChainId is a free data retrieval call binding the contract method 0x3408e470.
//
// Solidity: function getChainId() view returns(uint32)
func (_Participants *ParticipantsCallerSession) GetChainId() (uint32, error) {
	return _Participants.Contract.GetChainId(&_Participants.CallOpts)
}

// GetValidatorPublicKey is a free data retrieval call binding the contract method 0x4e6f4a22.
//
// Solidity: function getValidatorPublicKey(address _validator) view returns(uint256[2])
func (_Participants *ParticipantsCaller) GetValidatorPublicKey(opts *bind.CallOpts, _validator common.Address) ([2]*big.Int, error) {
	var out []interface{}
	err := _Participants.contract.Call(opts, &out, "getValidatorPublicKey", _validator)

	if err != nil {
		return *new([2]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([2]*big.Int)).(*[2]*big.Int)

	return out0, err

}

// GetValidatorPublicKey is a free data retrieval call binding the contract method 0x4e6f4a22.
//
// Solidity: function getValidatorPublicKey(address _validator) view returns(uint256[2])
func (_Participants *ParticipantsSession) GetValidatorPublicKey(_validator common.Address) ([2]*big.Int, error) {
	return _Participants.Contract.GetValidatorPublicKey(&_Participants.CallOpts, _validator)
}

// GetValidatorPublicKey is a free data retrieval call binding the contract method 0x4e6f4a22.
//
// Solidity: function getValidatorPublicKey(address _validator) view returns(uint256[2])
func (_Participants *ParticipantsCallerSession) GetValidatorPublicKey(_validator common.Address) ([2]*big.Int, error) {
	return _Participants.Contract.GetValidatorPublicKey(&_Participants.CallOpts, _validator)
}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() view returns(address[])
func (_Participants *ParticipantsCaller) GetValidators(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _Participants.contract.Call(opts, &out, "getValidators")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() view returns(address[])
func (_Participants *ParticipantsSession) GetValidators() ([]common.Address, error) {
	return _Participants.Contract.GetValidators(&_Participants.CallOpts)
}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() view returns(address[])
func (_Participants *ParticipantsCallerSession) GetValidators() ([]common.Address, error) {
	return _Participants.Contract.GetValidators(&_Participants.CallOpts)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address validator) view returns(bool)
func (_Participants *ParticipantsCaller) IsValidator(opts *bind.CallOpts, validator common.Address) (bool, error) {
	var out []interface{}
	err := _Participants.contract.Call(opts, &out, "isValidator", validator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address validator) view returns(bool)
func (_Participants *ParticipantsSession) IsValidator(validator common.Address) (bool, error) {
	return _Participants.Contract.IsValidator(&_Participants.CallOpts, validator)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address validator) view returns(bool)
func (_Participants *ParticipantsCallerSession) IsValidator(validator common.Address) (bool, error) {
	return _Participants.Contract.IsValidator(&_Participants.CallOpts, validator)
}

// AddValidator is a paid mutator transaction binding the contract method 0xeb6320c7.
//
// Solidity: function addValidator(address _validator, uint256[2] _madID) returns(uint8)
func (_Participants *ParticipantsTransactor) AddValidator(opts *bind.TransactOpts, _validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _Participants.contract.Transact(opts, "addValidator", _validator, _madID)
}

// AddValidator is a paid mutator transaction binding the contract method 0xeb6320c7.
//
// Solidity: function addValidator(address _validator, uint256[2] _madID) returns(uint8)
func (_Participants *ParticipantsSession) AddValidator(_validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _Participants.Contract.AddValidator(&_Participants.TransactOpts, _validator, _madID)
}

// AddValidator is a paid mutator transaction binding the contract method 0xeb6320c7.
//
// Solidity: function addValidator(address _validator, uint256[2] _madID) returns(uint8)
func (_Participants *ParticipantsTransactorSession) AddValidator(_validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _Participants.Contract.AddValidator(&_Participants.TransactOpts, _validator, _madID)
}

// ConfirmValidators is a paid mutator transaction binding the contract method 0x35c6a163.
//
// Solidity: function confirmValidators() returns(bool)
func (_Participants *ParticipantsTransactor) ConfirmValidators(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Participants.contract.Transact(opts, "confirmValidators")
}

// ConfirmValidators is a paid mutator transaction binding the contract method 0x35c6a163.
//
// Solidity: function confirmValidators() returns(bool)
func (_Participants *ParticipantsSession) ConfirmValidators() (*types.Transaction, error) {
	return _Participants.Contract.ConfirmValidators(&_Participants.TransactOpts)
}

// ConfirmValidators is a paid mutator transaction binding the contract method 0x35c6a163.
//
// Solidity: function confirmValidators() returns(bool)
func (_Participants *ParticipantsTransactorSession) ConfirmValidators() (*types.Transaction, error) {
	return _Participants.Contract.ConfirmValidators(&_Participants.TransactOpts)
}

// InitializeParticipants is a paid mutator transaction binding the contract method 0xee8420dd.
//
// Solidity: function initializeParticipants(address registry) returns()
func (_Participants *ParticipantsTransactor) InitializeParticipants(opts *bind.TransactOpts, registry common.Address) (*types.Transaction, error) {
	return _Participants.contract.Transact(opts, "initializeParticipants", registry)
}

// InitializeParticipants is a paid mutator transaction binding the contract method 0xee8420dd.
//
// Solidity: function initializeParticipants(address registry) returns()
func (_Participants *ParticipantsSession) InitializeParticipants(registry common.Address) (*types.Transaction, error) {
	return _Participants.Contract.InitializeParticipants(&_Participants.TransactOpts, registry)
}

// InitializeParticipants is a paid mutator transaction binding the contract method 0xee8420dd.
//
// Solidity: function initializeParticipants(address registry) returns()
func (_Participants *ParticipantsTransactorSession) InitializeParticipants(registry common.Address) (*types.Transaction, error) {
	return _Participants.Contract.InitializeParticipants(&_Participants.TransactOpts, registry)
}

// RemoveValidator is a paid mutator transaction binding the contract method 0x844469b2.
//
// Solidity: function removeValidator(address _validator, uint256[2] _madID) returns(uint8)
func (_Participants *ParticipantsTransactor) RemoveValidator(opts *bind.TransactOpts, _validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _Participants.contract.Transact(opts, "removeValidator", _validator, _madID)
}

// RemoveValidator is a paid mutator transaction binding the contract method 0x844469b2.
//
// Solidity: function removeValidator(address _validator, uint256[2] _madID) returns(uint8)
func (_Participants *ParticipantsSession) RemoveValidator(_validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _Participants.Contract.RemoveValidator(&_Participants.TransactOpts, _validator, _madID)
}

// RemoveValidator is a paid mutator transaction binding the contract method 0x844469b2.
//
// Solidity: function removeValidator(address _validator, uint256[2] _madID) returns(uint8)
func (_Participants *ParticipantsTransactorSession) RemoveValidator(_validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _Participants.Contract.RemoveValidator(&_Participants.TransactOpts, _validator, _madID)
}

// SetChainId is a paid mutator transaction binding the contract method 0xa179f124.
//
// Solidity: function setChainId(uint32 _chainId) returns()
func (_Participants *ParticipantsTransactor) SetChainId(opts *bind.TransactOpts, _chainId uint32) (*types.Transaction, error) {
	return _Participants.contract.Transact(opts, "setChainId", _chainId)
}

// SetChainId is a paid mutator transaction binding the contract method 0xa179f124.
//
// Solidity: function setChainId(uint32 _chainId) returns()
func (_Participants *ParticipantsSession) SetChainId(_chainId uint32) (*types.Transaction, error) {
	return _Participants.Contract.SetChainId(&_Participants.TransactOpts, _chainId)
}

// SetChainId is a paid mutator transaction binding the contract method 0xa179f124.
//
// Solidity: function setChainId(uint32 _chainId) returns()
func (_Participants *ParticipantsTransactorSession) SetChainId(_chainId uint32) (*types.Transaction, error) {
	return _Participants.Contract.SetChainId(&_Participants.TransactOpts, _chainId)
}

// SetValidatorMaxCount is a paid mutator transaction binding the contract method 0x2cab37f7.
//
// Solidity: function setValidatorMaxCount(uint8 max) returns()
func (_Participants *ParticipantsTransactor) SetValidatorMaxCount(opts *bind.TransactOpts, max uint8) (*types.Transaction, error) {
	return _Participants.contract.Transact(opts, "setValidatorMaxCount", max)
}

// SetValidatorMaxCount is a paid mutator transaction binding the contract method 0x2cab37f7.
//
// Solidity: function setValidatorMaxCount(uint8 max) returns()
func (_Participants *ParticipantsSession) SetValidatorMaxCount(max uint8) (*types.Transaction, error) {
	return _Participants.Contract.SetValidatorMaxCount(&_Participants.TransactOpts, max)
}

// SetValidatorMaxCount is a paid mutator transaction binding the contract method 0x2cab37f7.
//
// Solidity: function setValidatorMaxCount(uint8 max) returns()
func (_Participants *ParticipantsTransactorSession) SetValidatorMaxCount(max uint8) (*types.Transaction, error) {
	return _Participants.Contract.SetValidatorMaxCount(&_Participants.TransactOpts, max)
}

// ValidatorCount is a paid mutator transaction binding the contract method 0x0f43a677.
//
// Solidity: function validatorCount() returns(uint8)
func (_Participants *ParticipantsTransactor) ValidatorCount(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Participants.contract.Transact(opts, "validatorCount")
}

// ValidatorCount is a paid mutator transaction binding the contract method 0x0f43a677.
//
// Solidity: function validatorCount() returns(uint8)
func (_Participants *ParticipantsSession) ValidatorCount() (*types.Transaction, error) {
	return _Participants.Contract.ValidatorCount(&_Participants.TransactOpts)
}

// ValidatorCount is a paid mutator transaction binding the contract method 0x0f43a677.
//
// Solidity: function validatorCount() returns(uint8)
func (_Participants *ParticipantsTransactorSession) ValidatorCount() (*types.Transaction, error) {
	return _Participants.Contract.ValidatorCount(&_Participants.TransactOpts)
}

// ValidatorMaxCount is a paid mutator transaction binding the contract method 0x09f0d45d.
//
// Solidity: function validatorMaxCount() returns(uint8)
func (_Participants *ParticipantsTransactor) ValidatorMaxCount(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Participants.contract.Transact(opts, "validatorMaxCount")
}

// ValidatorMaxCount is a paid mutator transaction binding the contract method 0x09f0d45d.
//
// Solidity: function validatorMaxCount() returns(uint8)
func (_Participants *ParticipantsSession) ValidatorMaxCount() (*types.Transaction, error) {
	return _Participants.Contract.ValidatorMaxCount(&_Participants.TransactOpts)
}

// ValidatorMaxCount is a paid mutator transaction binding the contract method 0x09f0d45d.
//
// Solidity: function validatorMaxCount() returns(uint8)
func (_Participants *ParticipantsTransactorSession) ValidatorMaxCount() (*types.Transaction, error) {
	return _Participants.Contract.ValidatorMaxCount(&_Participants.TransactOpts)
}

// ParticipantsValidatorCreatedIterator is returned from FilterValidatorCreated and is used to iterate over the raw logs and unpacked data for ValidatorCreated events raised by the Participants contract.
type ParticipantsValidatorCreatedIterator struct {
	Event *ParticipantsValidatorCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParticipantsValidatorCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParticipantsValidatorCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParticipantsValidatorCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParticipantsValidatorCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParticipantsValidatorCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParticipantsValidatorCreated represents a ValidatorCreated event raised by the Participants contract.
type ParticipantsValidatorCreated struct {
	Validator common.Address
	Signer    common.Address
	MadID     [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorCreated is a free log retrieval operation binding the contract event 0xef5e89a9416c26e0a0a37c1f630958c8c88d9efad59f553f94cff0bed0a268d3.
//
// Solidity: event ValidatorCreated(address indexed validator, address indexed signer, uint256[2] madID)
func (_Participants *ParticipantsFilterer) FilterValidatorCreated(opts *bind.FilterOpts, validator []common.Address, signer []common.Address) (*ParticipantsValidatorCreatedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var signerRule []interface{}
	for _, signerItem := range signer {
		signerRule = append(signerRule, signerItem)
	}

	logs, sub, err := _Participants.contract.FilterLogs(opts, "ValidatorCreated", validatorRule, signerRule)
	if err != nil {
		return nil, err
	}
	return &ParticipantsValidatorCreatedIterator{contract: _Participants.contract, event: "ValidatorCreated", logs: logs, sub: sub}, nil
}

// WatchValidatorCreated is a free log subscription operation binding the contract event 0xef5e89a9416c26e0a0a37c1f630958c8c88d9efad59f553f94cff0bed0a268d3.
//
// Solidity: event ValidatorCreated(address indexed validator, address indexed signer, uint256[2] madID)
func (_Participants *ParticipantsFilterer) WatchValidatorCreated(opts *bind.WatchOpts, sink chan<- *ParticipantsValidatorCreated, validator []common.Address, signer []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var signerRule []interface{}
	for _, signerItem := range signer {
		signerRule = append(signerRule, signerItem)
	}

	logs, sub, err := _Participants.contract.WatchLogs(opts, "ValidatorCreated", validatorRule, signerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParticipantsValidatorCreated)
				if err := _Participants.contract.UnpackLog(event, "ValidatorCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorCreated is a log parse operation binding the contract event 0xef5e89a9416c26e0a0a37c1f630958c8c88d9efad59f553f94cff0bed0a268d3.
//
// Solidity: event ValidatorCreated(address indexed validator, address indexed signer, uint256[2] madID)
func (_Participants *ParticipantsFilterer) ParseValidatorCreated(log types.Log) (*ParticipantsValidatorCreated, error) {
	event := new(ParticipantsValidatorCreated)
	if err := _Participants.contract.UnpackLog(event, "ValidatorCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ParticipantsValidatorJoinedIterator is returned from FilterValidatorJoined and is used to iterate over the raw logs and unpacked data for ValidatorJoined events raised by the Participants contract.
type ParticipantsValidatorJoinedIterator struct {
	Event *ParticipantsValidatorJoined // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParticipantsValidatorJoinedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParticipantsValidatorJoined)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParticipantsValidatorJoined)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParticipantsValidatorJoinedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParticipantsValidatorJoinedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParticipantsValidatorJoined represents a ValidatorJoined event raised by the Participants contract.
type ParticipantsValidatorJoined struct {
	Validator common.Address
	MadID     [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorJoined is a free log retrieval operation binding the contract event 0x8c25e214c5693ebaf8008875bacedeb9e0aafd393864a314ed1801b2a4e13dd9.
//
// Solidity: event ValidatorJoined(address indexed validator, uint256[2] madID)
func (_Participants *ParticipantsFilterer) FilterValidatorJoined(opts *bind.FilterOpts, validator []common.Address) (*ParticipantsValidatorJoinedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _Participants.contract.FilterLogs(opts, "ValidatorJoined", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ParticipantsValidatorJoinedIterator{contract: _Participants.contract, event: "ValidatorJoined", logs: logs, sub: sub}, nil
}

// WatchValidatorJoined is a free log subscription operation binding the contract event 0x8c25e214c5693ebaf8008875bacedeb9e0aafd393864a314ed1801b2a4e13dd9.
//
// Solidity: event ValidatorJoined(address indexed validator, uint256[2] madID)
func (_Participants *ParticipantsFilterer) WatchValidatorJoined(opts *bind.WatchOpts, sink chan<- *ParticipantsValidatorJoined, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _Participants.contract.WatchLogs(opts, "ValidatorJoined", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParticipantsValidatorJoined)
				if err := _Participants.contract.UnpackLog(event, "ValidatorJoined", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorJoined is a log parse operation binding the contract event 0x8c25e214c5693ebaf8008875bacedeb9e0aafd393864a314ed1801b2a4e13dd9.
//
// Solidity: event ValidatorJoined(address indexed validator, uint256[2] madID)
func (_Participants *ParticipantsFilterer) ParseValidatorJoined(log types.Log) (*ParticipantsValidatorJoined, error) {
	event := new(ParticipantsValidatorJoined)
	if err := _Participants.contract.UnpackLog(event, "ValidatorJoined", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ParticipantsValidatorLeftIterator is returned from FilterValidatorLeft and is used to iterate over the raw logs and unpacked data for ValidatorLeft events raised by the Participants contract.
type ParticipantsValidatorLeftIterator struct {
	Event *ParticipantsValidatorLeft // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParticipantsValidatorLeftIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParticipantsValidatorLeft)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParticipantsValidatorLeft)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParticipantsValidatorLeftIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParticipantsValidatorLeftIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParticipantsValidatorLeft represents a ValidatorLeft event raised by the Participants contract.
type ParticipantsValidatorLeft struct {
	Validator common.Address
	PkHash    [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorLeft is a free log retrieval operation binding the contract event 0x319bbadb03b94aedc69babb34a28675536a9cb30f4bbde343e1d0018c44ebd94.
//
// Solidity: event ValidatorLeft(address indexed validator, uint256[2] pkHash)
func (_Participants *ParticipantsFilterer) FilterValidatorLeft(opts *bind.FilterOpts, validator []common.Address) (*ParticipantsValidatorLeftIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _Participants.contract.FilterLogs(opts, "ValidatorLeft", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ParticipantsValidatorLeftIterator{contract: _Participants.contract, event: "ValidatorLeft", logs: logs, sub: sub}, nil
}

// WatchValidatorLeft is a free log subscription operation binding the contract event 0x319bbadb03b94aedc69babb34a28675536a9cb30f4bbde343e1d0018c44ebd94.
//
// Solidity: event ValidatorLeft(address indexed validator, uint256[2] pkHash)
func (_Participants *ParticipantsFilterer) WatchValidatorLeft(opts *bind.WatchOpts, sink chan<- *ParticipantsValidatorLeft, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _Participants.contract.WatchLogs(opts, "ValidatorLeft", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParticipantsValidatorLeft)
				if err := _Participants.contract.UnpackLog(event, "ValidatorLeft", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorLeft is a log parse operation binding the contract event 0x319bbadb03b94aedc69babb34a28675536a9cb30f4bbde343e1d0018c44ebd94.
//
// Solidity: event ValidatorLeft(address indexed validator, uint256[2] pkHash)
func (_Participants *ParticipantsFilterer) ParseValidatorLeft(log types.Log) (*ParticipantsValidatorLeft, error) {
	event := new(ParticipantsValidatorLeft)
	if err := _Participants.contract.UnpackLog(event, "ValidatorLeft", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ParticipantsValidatorQueuedIterator is returned from FilterValidatorQueued and is used to iterate over the raw logs and unpacked data for ValidatorQueued events raised by the Participants contract.
type ParticipantsValidatorQueuedIterator struct {
	Event *ParticipantsValidatorQueued // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParticipantsValidatorQueuedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParticipantsValidatorQueued)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParticipantsValidatorQueued)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParticipantsValidatorQueuedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParticipantsValidatorQueuedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParticipantsValidatorQueued represents a ValidatorQueued event raised by the Participants contract.
type ParticipantsValidatorQueued struct {
	Validator common.Address
	PkHash    [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorQueued is a free log retrieval operation binding the contract event 0xb4389eb1c66b46169245bc8c147e4b13a2b88adcaa44d001b0fadf25890b773d.
//
// Solidity: event ValidatorQueued(address indexed validator, uint256[2] pkHash)
func (_Participants *ParticipantsFilterer) FilterValidatorQueued(opts *bind.FilterOpts, validator []common.Address) (*ParticipantsValidatorQueuedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _Participants.contract.FilterLogs(opts, "ValidatorQueued", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ParticipantsValidatorQueuedIterator{contract: _Participants.contract, event: "ValidatorQueued", logs: logs, sub: sub}, nil
}

// WatchValidatorQueued is a free log subscription operation binding the contract event 0xb4389eb1c66b46169245bc8c147e4b13a2b88adcaa44d001b0fadf25890b773d.
//
// Solidity: event ValidatorQueued(address indexed validator, uint256[2] pkHash)
func (_Participants *ParticipantsFilterer) WatchValidatorQueued(opts *bind.WatchOpts, sink chan<- *ParticipantsValidatorQueued, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _Participants.contract.WatchLogs(opts, "ValidatorQueued", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParticipantsValidatorQueued)
				if err := _Participants.contract.UnpackLog(event, "ValidatorQueued", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorQueued is a log parse operation binding the contract event 0xb4389eb1c66b46169245bc8c147e4b13a2b88adcaa44d001b0fadf25890b773d.
//
// Solidity: event ValidatorQueued(address indexed validator, uint256[2] pkHash)
func (_Participants *ParticipantsFilterer) ParseValidatorQueued(log types.Log) (*ParticipantsValidatorQueued, error) {
	event := new(ParticipantsValidatorQueued)
	if err := _Participants.contract.UnpackLog(event, "ValidatorQueued", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ParticipantsEventsMetaData contains all meta data concerning the ParticipantsEvents contract.
var ParticipantsEventsMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"madID\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"madID\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"pkHash\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorLeft\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"pkHash\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorQueued\",\"type\":\"event\"}]",
}

// ParticipantsEventsABI is the input ABI used to generate the binding from.
// Deprecated: Use ParticipantsEventsMetaData.ABI instead.
var ParticipantsEventsABI = ParticipantsEventsMetaData.ABI

// ParticipantsEvents is an auto generated Go binding around an Ethereum contract.
type ParticipantsEvents struct {
	ParticipantsEventsCaller     // Read-only binding to the contract
	ParticipantsEventsTransactor // Write-only binding to the contract
	ParticipantsEventsFilterer   // Log filterer for contract events
}

// ParticipantsEventsCaller is an auto generated read-only Go binding around an Ethereum contract.
type ParticipantsEventsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ParticipantsEventsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ParticipantsEventsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ParticipantsEventsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ParticipantsEventsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ParticipantsEventsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ParticipantsEventsSession struct {
	Contract     *ParticipantsEvents // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// ParticipantsEventsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ParticipantsEventsCallerSession struct {
	Contract *ParticipantsEventsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// ParticipantsEventsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ParticipantsEventsTransactorSession struct {
	Contract     *ParticipantsEventsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// ParticipantsEventsRaw is an auto generated low-level Go binding around an Ethereum contract.
type ParticipantsEventsRaw struct {
	Contract *ParticipantsEvents // Generic contract binding to access the raw methods on
}

// ParticipantsEventsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ParticipantsEventsCallerRaw struct {
	Contract *ParticipantsEventsCaller // Generic read-only contract binding to access the raw methods on
}

// ParticipantsEventsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ParticipantsEventsTransactorRaw struct {
	Contract *ParticipantsEventsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewParticipantsEvents creates a new instance of ParticipantsEvents, bound to a specific deployed contract.
func NewParticipantsEvents(address common.Address, backend bind.ContractBackend) (*ParticipantsEvents, error) {
	contract, err := bindParticipantsEvents(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ParticipantsEvents{ParticipantsEventsCaller: ParticipantsEventsCaller{contract: contract}, ParticipantsEventsTransactor: ParticipantsEventsTransactor{contract: contract}, ParticipantsEventsFilterer: ParticipantsEventsFilterer{contract: contract}}, nil
}

// NewParticipantsEventsCaller creates a new read-only instance of ParticipantsEvents, bound to a specific deployed contract.
func NewParticipantsEventsCaller(address common.Address, caller bind.ContractCaller) (*ParticipantsEventsCaller, error) {
	contract, err := bindParticipantsEvents(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ParticipantsEventsCaller{contract: contract}, nil
}

// NewParticipantsEventsTransactor creates a new write-only instance of ParticipantsEvents, bound to a specific deployed contract.
func NewParticipantsEventsTransactor(address common.Address, transactor bind.ContractTransactor) (*ParticipantsEventsTransactor, error) {
	contract, err := bindParticipantsEvents(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ParticipantsEventsTransactor{contract: contract}, nil
}

// NewParticipantsEventsFilterer creates a new log filterer instance of ParticipantsEvents, bound to a specific deployed contract.
func NewParticipantsEventsFilterer(address common.Address, filterer bind.ContractFilterer) (*ParticipantsEventsFilterer, error) {
	contract, err := bindParticipantsEvents(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ParticipantsEventsFilterer{contract: contract}, nil
}

// bindParticipantsEvents binds a generic wrapper to an already deployed contract.
func bindParticipantsEvents(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ParticipantsEventsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ParticipantsEvents *ParticipantsEventsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ParticipantsEvents.Contract.ParticipantsEventsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ParticipantsEvents *ParticipantsEventsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ParticipantsEvents.Contract.ParticipantsEventsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ParticipantsEvents *ParticipantsEventsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ParticipantsEvents.Contract.ParticipantsEventsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ParticipantsEvents *ParticipantsEventsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ParticipantsEvents.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ParticipantsEvents *ParticipantsEventsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ParticipantsEvents.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ParticipantsEvents *ParticipantsEventsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ParticipantsEvents.Contract.contract.Transact(opts, method, params...)
}

// ParticipantsEventsValidatorCreatedIterator is returned from FilterValidatorCreated and is used to iterate over the raw logs and unpacked data for ValidatorCreated events raised by the ParticipantsEvents contract.
type ParticipantsEventsValidatorCreatedIterator struct {
	Event *ParticipantsEventsValidatorCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParticipantsEventsValidatorCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParticipantsEventsValidatorCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParticipantsEventsValidatorCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParticipantsEventsValidatorCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParticipantsEventsValidatorCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParticipantsEventsValidatorCreated represents a ValidatorCreated event raised by the ParticipantsEvents contract.
type ParticipantsEventsValidatorCreated struct {
	Validator common.Address
	Signer    common.Address
	MadID     [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorCreated is a free log retrieval operation binding the contract event 0xef5e89a9416c26e0a0a37c1f630958c8c88d9efad59f553f94cff0bed0a268d3.
//
// Solidity: event ValidatorCreated(address indexed validator, address indexed signer, uint256[2] madID)
func (_ParticipantsEvents *ParticipantsEventsFilterer) FilterValidatorCreated(opts *bind.FilterOpts, validator []common.Address, signer []common.Address) (*ParticipantsEventsValidatorCreatedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var signerRule []interface{}
	for _, signerItem := range signer {
		signerRule = append(signerRule, signerItem)
	}

	logs, sub, err := _ParticipantsEvents.contract.FilterLogs(opts, "ValidatorCreated", validatorRule, signerRule)
	if err != nil {
		return nil, err
	}
	return &ParticipantsEventsValidatorCreatedIterator{contract: _ParticipantsEvents.contract, event: "ValidatorCreated", logs: logs, sub: sub}, nil
}

// WatchValidatorCreated is a free log subscription operation binding the contract event 0xef5e89a9416c26e0a0a37c1f630958c8c88d9efad59f553f94cff0bed0a268d3.
//
// Solidity: event ValidatorCreated(address indexed validator, address indexed signer, uint256[2] madID)
func (_ParticipantsEvents *ParticipantsEventsFilterer) WatchValidatorCreated(opts *bind.WatchOpts, sink chan<- *ParticipantsEventsValidatorCreated, validator []common.Address, signer []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var signerRule []interface{}
	for _, signerItem := range signer {
		signerRule = append(signerRule, signerItem)
	}

	logs, sub, err := _ParticipantsEvents.contract.WatchLogs(opts, "ValidatorCreated", validatorRule, signerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParticipantsEventsValidatorCreated)
				if err := _ParticipantsEvents.contract.UnpackLog(event, "ValidatorCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorCreated is a log parse operation binding the contract event 0xef5e89a9416c26e0a0a37c1f630958c8c88d9efad59f553f94cff0bed0a268d3.
//
// Solidity: event ValidatorCreated(address indexed validator, address indexed signer, uint256[2] madID)
func (_ParticipantsEvents *ParticipantsEventsFilterer) ParseValidatorCreated(log types.Log) (*ParticipantsEventsValidatorCreated, error) {
	event := new(ParticipantsEventsValidatorCreated)
	if err := _ParticipantsEvents.contract.UnpackLog(event, "ValidatorCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ParticipantsEventsValidatorJoinedIterator is returned from FilterValidatorJoined and is used to iterate over the raw logs and unpacked data for ValidatorJoined events raised by the ParticipantsEvents contract.
type ParticipantsEventsValidatorJoinedIterator struct {
	Event *ParticipantsEventsValidatorJoined // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParticipantsEventsValidatorJoinedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParticipantsEventsValidatorJoined)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParticipantsEventsValidatorJoined)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParticipantsEventsValidatorJoinedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParticipantsEventsValidatorJoinedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParticipantsEventsValidatorJoined represents a ValidatorJoined event raised by the ParticipantsEvents contract.
type ParticipantsEventsValidatorJoined struct {
	Validator common.Address
	MadID     [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorJoined is a free log retrieval operation binding the contract event 0x8c25e214c5693ebaf8008875bacedeb9e0aafd393864a314ed1801b2a4e13dd9.
//
// Solidity: event ValidatorJoined(address indexed validator, uint256[2] madID)
func (_ParticipantsEvents *ParticipantsEventsFilterer) FilterValidatorJoined(opts *bind.FilterOpts, validator []common.Address) (*ParticipantsEventsValidatorJoinedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ParticipantsEvents.contract.FilterLogs(opts, "ValidatorJoined", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ParticipantsEventsValidatorJoinedIterator{contract: _ParticipantsEvents.contract, event: "ValidatorJoined", logs: logs, sub: sub}, nil
}

// WatchValidatorJoined is a free log subscription operation binding the contract event 0x8c25e214c5693ebaf8008875bacedeb9e0aafd393864a314ed1801b2a4e13dd9.
//
// Solidity: event ValidatorJoined(address indexed validator, uint256[2] madID)
func (_ParticipantsEvents *ParticipantsEventsFilterer) WatchValidatorJoined(opts *bind.WatchOpts, sink chan<- *ParticipantsEventsValidatorJoined, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ParticipantsEvents.contract.WatchLogs(opts, "ValidatorJoined", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParticipantsEventsValidatorJoined)
				if err := _ParticipantsEvents.contract.UnpackLog(event, "ValidatorJoined", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorJoined is a log parse operation binding the contract event 0x8c25e214c5693ebaf8008875bacedeb9e0aafd393864a314ed1801b2a4e13dd9.
//
// Solidity: event ValidatorJoined(address indexed validator, uint256[2] madID)
func (_ParticipantsEvents *ParticipantsEventsFilterer) ParseValidatorJoined(log types.Log) (*ParticipantsEventsValidatorJoined, error) {
	event := new(ParticipantsEventsValidatorJoined)
	if err := _ParticipantsEvents.contract.UnpackLog(event, "ValidatorJoined", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ParticipantsEventsValidatorLeftIterator is returned from FilterValidatorLeft and is used to iterate over the raw logs and unpacked data for ValidatorLeft events raised by the ParticipantsEvents contract.
type ParticipantsEventsValidatorLeftIterator struct {
	Event *ParticipantsEventsValidatorLeft // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParticipantsEventsValidatorLeftIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParticipantsEventsValidatorLeft)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParticipantsEventsValidatorLeft)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParticipantsEventsValidatorLeftIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParticipantsEventsValidatorLeftIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParticipantsEventsValidatorLeft represents a ValidatorLeft event raised by the ParticipantsEvents contract.
type ParticipantsEventsValidatorLeft struct {
	Validator common.Address
	PkHash    [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorLeft is a free log retrieval operation binding the contract event 0x319bbadb03b94aedc69babb34a28675536a9cb30f4bbde343e1d0018c44ebd94.
//
// Solidity: event ValidatorLeft(address indexed validator, uint256[2] pkHash)
func (_ParticipantsEvents *ParticipantsEventsFilterer) FilterValidatorLeft(opts *bind.FilterOpts, validator []common.Address) (*ParticipantsEventsValidatorLeftIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ParticipantsEvents.contract.FilterLogs(opts, "ValidatorLeft", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ParticipantsEventsValidatorLeftIterator{contract: _ParticipantsEvents.contract, event: "ValidatorLeft", logs: logs, sub: sub}, nil
}

// WatchValidatorLeft is a free log subscription operation binding the contract event 0x319bbadb03b94aedc69babb34a28675536a9cb30f4bbde343e1d0018c44ebd94.
//
// Solidity: event ValidatorLeft(address indexed validator, uint256[2] pkHash)
func (_ParticipantsEvents *ParticipantsEventsFilterer) WatchValidatorLeft(opts *bind.WatchOpts, sink chan<- *ParticipantsEventsValidatorLeft, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ParticipantsEvents.contract.WatchLogs(opts, "ValidatorLeft", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParticipantsEventsValidatorLeft)
				if err := _ParticipantsEvents.contract.UnpackLog(event, "ValidatorLeft", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorLeft is a log parse operation binding the contract event 0x319bbadb03b94aedc69babb34a28675536a9cb30f4bbde343e1d0018c44ebd94.
//
// Solidity: event ValidatorLeft(address indexed validator, uint256[2] pkHash)
func (_ParticipantsEvents *ParticipantsEventsFilterer) ParseValidatorLeft(log types.Log) (*ParticipantsEventsValidatorLeft, error) {
	event := new(ParticipantsEventsValidatorLeft)
	if err := _ParticipantsEvents.contract.UnpackLog(event, "ValidatorLeft", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ParticipantsEventsValidatorQueuedIterator is returned from FilterValidatorQueued and is used to iterate over the raw logs and unpacked data for ValidatorQueued events raised by the ParticipantsEvents contract.
type ParticipantsEventsValidatorQueuedIterator struct {
	Event *ParticipantsEventsValidatorQueued // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParticipantsEventsValidatorQueuedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParticipantsEventsValidatorQueued)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParticipantsEventsValidatorQueued)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParticipantsEventsValidatorQueuedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParticipantsEventsValidatorQueuedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParticipantsEventsValidatorQueued represents a ValidatorQueued event raised by the ParticipantsEvents contract.
type ParticipantsEventsValidatorQueued struct {
	Validator common.Address
	PkHash    [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorQueued is a free log retrieval operation binding the contract event 0xb4389eb1c66b46169245bc8c147e4b13a2b88adcaa44d001b0fadf25890b773d.
//
// Solidity: event ValidatorQueued(address indexed validator, uint256[2] pkHash)
func (_ParticipantsEvents *ParticipantsEventsFilterer) FilterValidatorQueued(opts *bind.FilterOpts, validator []common.Address) (*ParticipantsEventsValidatorQueuedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ParticipantsEvents.contract.FilterLogs(opts, "ValidatorQueued", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ParticipantsEventsValidatorQueuedIterator{contract: _ParticipantsEvents.contract, event: "ValidatorQueued", logs: logs, sub: sub}, nil
}

// WatchValidatorQueued is a free log subscription operation binding the contract event 0xb4389eb1c66b46169245bc8c147e4b13a2b88adcaa44d001b0fadf25890b773d.
//
// Solidity: event ValidatorQueued(address indexed validator, uint256[2] pkHash)
func (_ParticipantsEvents *ParticipantsEventsFilterer) WatchValidatorQueued(opts *bind.WatchOpts, sink chan<- *ParticipantsEventsValidatorQueued, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ParticipantsEvents.contract.WatchLogs(opts, "ValidatorQueued", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParticipantsEventsValidatorQueued)
				if err := _ParticipantsEvents.contract.UnpackLog(event, "ValidatorQueued", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorQueued is a log parse operation binding the contract event 0xb4389eb1c66b46169245bc8c147e4b13a2b88adcaa44d001b0fadf25890b773d.
//
// Solidity: event ValidatorQueued(address indexed validator, uint256[2] pkHash)
func (_ParticipantsEvents *ParticipantsEventsFilterer) ParseValidatorQueued(log types.Log) (*ParticipantsEventsValidatorQueued, error) {
	event := new(ParticipantsEventsValidatorQueued)
	if err := _ParticipantsEvents.contract.UnpackLog(event, "ValidatorQueued", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ParticipantsFacetMetaData contains all meta data concerning the ParticipantsFacet contract.
var ParticipantsFacetMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"madID\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"madID\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"pkHash\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorLeft\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"pkHash\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorQueued\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256[2]\",\"name\":\"_madID\",\"type\":\"uint256[2]\"}],\"name\":\"addValidator\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmValidators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"getValidatorPublicKey\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"grantOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractRegistry\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"initializeParticipants\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256[2]\",\"name\":\"_madID\",\"type\":\"uint256[2]\"}],\"name\":\"removeValidator\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_chainId\",\"type\":\"uint32\"}],\"name\":\"setChainId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governance_\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"max\",\"type\":\"uint8\"}],\"name\":\"setValidatorMaxCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorMaxCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b506000620000296200007560201b62000ffd1760201c565b9050338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050620000a2565b6000807f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90508091505090565b61386780620000b26000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c8063a179f124116100ad578063e348da1311610071578063e348da13146102aa578063eb6320c7146102c6578063ee8420dd146102f6578063facd743b14610312578063fad8b32a1461034257610121565b8063a179f1241461022e578063ab033ea91461024a578063b7ab4db514610266578063be9a655514610284578063dc9780591461028e57610121565b80633408e470116100f45780633408e4701461018857806335c6a163146101a65780634e6f4a22146101c457806360536172146101f4578063844469b2146101fe57610121565b806307da68f51461012657806309f0d45d146101305780630f43a6771461014e5780632cab37f71461016c575b600080fd5b61012e61035e565b005b6101386103fb565b6040516101459190613066565b60405180910390f35b61015661041b565b6040516101639190613066565b60405180910390f35b61018660048036038101906101819190612892565b61043b565b005b610190610462565b60405161019d919061304b565b60405180910390f35b6101ae610471565b6040516101bb9190612d53565b60405180910390f35b6101de60048036038101906101d9919061279e565b610480565b6040516101eb9190612d38565b60405180910390f35b6101fc610498565b005b610218600480360381019061021391906127f8565b6105a3565b6040516102259190613066565b60405180910390f35b61024860048036038101906102439190612865565b61065c565b005b610264600480360381019061025f919061279e565b610703565b005b61026e6107f5565b60405161027b9190612d16565b60405180910390f35b61028c61088c565b005b6102a860048036038101906102a3919061279e565b610929565b005b6102c460048036038101906102bf919061279e565b610a1b565b005b6102e060048036038101906102db91906127f8565b610b7a565b6040516102ed9190613066565b60405180910390f35b610310600480360381019061030b9190612838565b610c06565b005b61032c6004803603810190610327919061279e565b610e95565b6040516103399190612d53565b60405180910390f35b61035c6004803603810190610357919061279e565b610ea7565b005b6000610368610ffd565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166103f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ef90612f50565b60405180910390fd5b50565b600061040561102a565b60040160019054906101000a900460ff16905090565b600061042561102a565b60040160009054906101000a900460ff16905090565b8061044461102a565b60040160016101000a81548160ff021916908360ff16021790555050565b600061046c611057565b905090565b600061047b61107a565b905090565b610488612686565b6104918261117a565b9050919050565b60006104a2610ffd565b90508060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610536576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052d90612df0565b60405180910390fd5b8060020160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610613576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a90612eb0565b60405180910390fd5b61065483836002806020026040519081016040528092919082600260200280828437600081840152601f19601f8201169050808301925050505050506112a1565b905092915050565b6000610666610ffd565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166106f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ed90612f50565b60405180910390fd5b6106ff82611824565b5050565b600061070d610ffd565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146107a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079890612ff0565b60405180910390fd5b60006107ab610ffd565b9050828160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b60606107ff61102a565b60000180548060200260200160405190810160405280929190818152602001828054801561088257602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610838575b5050505050905090565b6000610896610ffd565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610926576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091d90612f50565b60405180910390fd5b50565b6000610933610ffd565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146109c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109be90612ff0565b60405180910390fd5b60006109d1610ffd565b9050828160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b6000610a25610ffd565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610ad057508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610b0f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0690612db0565b60405180910390fd5b6000610b19610ffd565b905060018160000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550505050565b6000610bbd83836002806020026040519081016040528092919082600260200280828437600081840152601f19601f820116905080830192505050505050611851565b610bfc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bf390612fb0565b60405180910390fd5b6000905092915050565b6000610c10610ffd565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610ca4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9b90612ff0565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610d14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0b90612e90565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff1663f67187ac6040518060400160405280600981526020017f657468646b672f763100000000000000000000000000000000000000000000008152506040518263ffffffff1660e01b8152600401610d849190612d6e565b60206040518083038186803b158015610d9c57600080fd5b505afa158015610db0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd491906127cb565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610e46576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3d90613010565b60405180910390fd5b80610e4f61102a565b60090160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b6000610ea082611bf3565b9050919050565b6000610eb1610ffd565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610f5c57508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610f9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f9290612db0565b60405180910390fd5b6000610fa5610ffd565b90508060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff0219169055505050565b6000807f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90508091505090565b6000807f310970b1d84cbb8af371a12019b396e9511a9b44411c1dabeec3e3d59d9a50f690508091505090565b6000611061611c72565b60000160009054906101000a900463ffffffff16905090565b60008061108561102a565b90505b8060040160019054906101000a900460ff1660ff168160040160009054906101000a900460ff1660ff161080156110ca575060006110c882600601611c9f565b115b156111725760006110dd82600601611ce2565b905060008260030160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600280602002604051908101604052809291908260028015611159576020028201915b815481526020019060010190808311611145575b5050505050905061116a8282611ea3565b505050611088565b600191505090565b611182612686565b600061118c61102a565b90508060020160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661121c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121390612ef0565b60405180910390fd5b8060030160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600280602002604051908101604052809291908260028015611294576020028201915b815481526020019060010190808311611280575b5050505050915050919050565b6000806112ac61102a565b90508060020160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661133c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161133390612f90565b60405180910390fd5b60008160010160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008260030160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002806020026040519081016040528092919082600280156113fc576020028201915b8154815260200190600101908083116113e8575b50505050509050846000600281106114175761141661334a565b5b6020020151816000600281106114305761142f61334a565b5b602002015114611475576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161146c90612f10565b60405180910390fd5b846001600281106114895761148861334a565b5b6020020151816001600281106114a2576114a161334a565b5b6020020151146114e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114de90612f10565b60405180910390fd5b8260010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600090558260020160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff02191690558260030160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006115ca91906126a8565b6000600184600001805490506115e09190613159565b905060008460000182815481106115fa576115f961334a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050838560010160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508460000182815481106116835761168261334a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168560000185815481106116c4576116c361334a565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550846000018054806117205761171f61331b565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055905560006117608961219b565b905060008111156117945761177589826121f0565b5060018660040160026101000a81548160ff0219169083151502179055505b8873ffffffffffffffffffffffffffffffffffffffff167f319bbadb03b94aedc69babb34a28675536a9cb30f4bbde343e1d0018c44ebd94896040516117da9190612d38565b60405180910390a285600401600081819054906101000a900460ff166117ff9061326b565b91906101000a81548160ff021916908360ff1602179055965050505050505092915050565b8061182d611c72565b60000160006101000a81548163ffffffff021916908363ffffffff16021790555050565b60008061185c61102a565b905060006118686123dd565b90508160020160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156118f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f090612f30565b60405180910390fd5b80600001546119078661219b565b1015611948576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161193f90612e10565b60405180910390fd5b8160040160019054906101000a900460ff1660ff168260040160009054906101000a900460ff1660ff161015611b8b5781600001859080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600182600001805490506119f19190613159565b8260010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060018260020160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550838260030160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020906002611ae09291906126b6565b5060018260040160026101000a81548160ff02191690831515021790555081600401600081819054906101000a900460ff1680929190611b1f906132c2565b91906101000a81548160ff021916908360ff160217905550508473ffffffffffffffffffffffffffffffffffffffff167f8c25e214c5693ebaf8008875bacedeb9e0aafd393864a314ed1801b2a4e13dd985604051611b7e9190612d38565b60405180910390a2611be7565b611b98826006018661240a565b8473ffffffffffffffffffffffffffffffffffffffff167fb4389eb1c66b46169245bc8c147e4b13a2b88adcaa44d001b0fadf25890b773d85604051611bde9190612d38565b60405180910390a25b60019250505092915050565b600080611bfe61102a565b90508060020160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff168015611c6a5750611c5e6125ae565b611c678461219b565b10155b915050919050565b6000807fa53f90683b42ecb37674e5c8c5c9cabf849818fdc2fdfb57bbe3c738f7b50d0e90508091505090565b60008160020160009054906101000a900463ffffffff168260020160049054906101000a900463ffffffff16611cd5919061318d565b63ffffffff169050919050565b60008160020160009054906101000a900463ffffffff1663ffffffff168260020160049054906101000a900463ffffffff1663ffffffff1611611d5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d5190612dd0565b60405180910390fd5b8160010160008360020160009054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160010160008360020160009054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690558160000160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff021916905581600201600081819054906101000a900463ffffffff1680929190611e7f90613295565b91906101000a81548163ffffffff021916908363ffffffff16021790555050919050565b600080611eae61102a565b90508060020160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16158015611f3357508060040160019054906101000a900460ff1660ff168160040160009054906101000a900460ff1660ff16105b611f72576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f6990612e70565b60405180910390fd5b80600001849080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018160000180549050611feb9190613159565b8160010160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060018160020160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550828160030160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209060026120da9291906126b6565b5060018160040160026101000a81548160ff02191690831515021790555080600401600081819054906101000a900460ff1680929190612119906132c2565b91906101000a81548160ff021916908360ff160217905550508373ffffffffffffffffffffffffffffffffffffffff167f8c25e214c5693ebaf8008875bacedeb9e0aafd393864a314ed1801b2a4e13dd9846040516121789190612d38565b60405180910390a28060040160009054906101000a900460ff1691505092915050565b60006121a56123dd565b60090160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549050919050565b6000806121fb6123dd565b905060008160090160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060010160009054906101000a900460ff16612293576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161228a90612fd0565b60405180910390fd5b83816000015410156122da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122d190612ed0565b60405180910390fd5b6122e26125c1565b81600201541115612328576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161231f90612e30565b60405180910390fd5b61233f8482600401546125d490919063ffffffff16565b816004018190555061235e84826000015461262d90919063ffffffff16565b816000018190555060008160010160006101000a81548160ff0219169083151502179055508473ffffffffffffffffffffffffffffffffffffffff167f252a696583e35c4d61332829d3bb2a8236f2500140258f089951799c9b999a9c856040516123c99190613030565b60405180910390a260019250505092915050565b6000807f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237ef90508091505090565b8160000160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615612499576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161249090612f70565b60405180910390fd5b808260010160008460020160049054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555081600201600481819054906101000a900463ffffffff168092919061258b90613295565b91906101000a81548163ffffffff021916908363ffffffff160217905550505050565b60006125b86123dd565b60000154905090565b60006125cb611c72565b60010154905090565b60008282846125e39190613103565b9150811015612627576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161261e90612e50565b60405180910390fd5b92915050565b600082828461263c9190613159565b9150811115612680576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161267790612d90565b60405180910390fd5b92915050565b6040518060400160405280600290602082028036833780820191505090505090565b506000815560010160009055565b82600281019282156126e5579160200282015b828111156126e45782518255916020019190600101906126c9565b5b5090506126f291906126f6565b5090565b5b8082111561270f5760008160009055506001016126f7565b5090565b600081359050612722816137d5565b92915050565b600081519050612737816137d5565b92915050565b60008190508260206002028201111561275957612758613379565b5b92915050565b60008135905061276e816137ec565b92915050565b60008135905061278381613803565b92915050565b6000813590506127988161381a565b92915050565b6000602082840312156127b4576127b361337e565b5b60006127c284828501612713565b91505092915050565b6000602082840312156127e1576127e061337e565b5b60006127ef84828501612728565b91505092915050565b6000806060838503121561280f5761280e61337e565b5b600061281d85828601612713565b925050602061282e8582860161273d565b9150509250929050565b60006020828403121561284e5761284d61337e565b5b600061285c8482850161275f565b91505092915050565b60006020828403121561287b5761287a61337e565b5b600061288984828501612774565b91505092915050565b6000602082840312156128a8576128a761337e565b5b60006128b684828501612789565b91505092915050565b60006128cb83836128ef565b60208301905092915050565b60006128e38383612cda565b60208301905092915050565b6128f8816131c1565b82525050565b60006129098261309b565b61291381856130d6565b935061291e83613081565b8060005b8381101561294f57815161293688826128bf565b9750612941836130bc565b925050600181019050612922565b5085935050505092915050565b612965816130a6565b61296f81846130e7565b925061297a82613091565b8060005b838110156129ab57815161299287826128d7565b965061299d836130c9565b92505060018101905061297e565b505050505050565b6129bc816131d3565b82525050565b60006129cd826130b1565b6129d781856130f2565b93506129e7818560208601613238565b6129f081613383565b840191505092915050565b6000612a086015836130f2565b9150612a1382613394565b602082019050919050565b6000612a2b602e836130f2565b9150612a36826133bd565b604082019050919050565b6000612a4e600e836130f2565b9150612a598261340c565b602082019050919050565b6000612a716025836130f2565b9150612a7c82613435565b604082019050919050565b6000612a946012836130f2565b9150612a9f82613484565b602082019050919050565b6000612ab76009836130f2565b9150612ac2826134ad565b602082019050919050565b6000612ada6014836130f2565b9150612ae5826134d6565b602082019050919050565b6000612afd601a836130f2565b9150612b08826134ff565b602082019050919050565b6000612b206014836130f2565b9150612b2b82613528565b602082019050919050565b6000612b43601b836130f2565b9150612b4e82613551565b602082019050919050565b6000612b666029836130f2565b9150612b718261357a565b604082019050919050565b6000612b896016836130f2565b9150612b94826135c9565b602082019050919050565b6000612bac6022836130f2565b9150612bb7826135f2565b604082019050919050565b6000612bcf6019836130f2565b9150612bda82613641565b602082019050919050565b6000612bf26026836130f2565b9150612bfd8261366a565b604082019050919050565b6000612c156016836130f2565b9150612c20826136b9565b602082019050919050565b6000612c386015836130f2565b9150612c43826136e2565b602082019050919050565b6000612c5b6016836130f2565b9150612c668261370b565b602082019050919050565b6000612c7e601a836130f2565b9150612c8982613734565b602082019050919050565b6000612ca16025836130f2565b9150612cac8261375d565b604082019050919050565b6000612cc46016836130f2565b9150612ccf826137ac565b602082019050919050565b612ce381613211565b82525050565b612cf281613211565b82525050565b612d018161321b565b82525050565b612d108161322b565b82525050565b60006020820190508181036000830152612d3081846128fe565b905092915050565b6000604082019050612d4d600083018461295c565b92915050565b6000602082019050612d6860008301846129b3565b92915050565b60006020820190508181036000830152612d8881846129c2565b905092915050565b60006020820190508181036000830152612da9816129fb565b9050919050565b60006020820190508181036000830152612dc981612a1e565b9050919050565b60006020820190508181036000830152612de981612a41565b9050919050565b60006020820190508181036000830152612e0981612a64565b9050919050565b60006020820190508181036000830152612e2981612a87565b9050919050565b60006020820190508181036000830152612e4981612aaa565b9050919050565b60006020820190508181036000830152612e6981612acd565b9050919050565b60006020820190508181036000830152612e8981612af0565b9050919050565b60006020820190508181036000830152612ea981612b13565b9050919050565b60006020820190508181036000830152612ec981612b36565b9050919050565b60006020820190508181036000830152612ee981612b59565b9050919050565b60006020820190508181036000830152612f0981612b7c565b9050919050565b60006020820190508181036000830152612f2981612b9f565b9050919050565b60006020820190508181036000830152612f4981612bc2565b9050919050565b60006020820190508181036000830152612f6981612be5565b9050919050565b60006020820190508181036000830152612f8981612c08565b9050919050565b60006020820190508181036000830152612fa981612c2b565b9050919050565b60006020820190508181036000830152612fc981612c4e565b9050919050565b60006020820190508181036000830152612fe981612c71565b9050919050565b6000602082019050818103600083015261300981612c94565b9050919050565b6000602082019050818103600083015261302981612cb7565b9050919050565b60006020820190506130456000830184612ce9565b92915050565b60006020820190506130606000830184612cf8565b92915050565b600060208201905061307b6000830184612d07565b92915050565b6000819050602082019050919050565b6000819050919050565b600081519050919050565b600060029050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600061310e82613211565b915061311983613211565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561314e5761314d6132ec565b5b828201905092915050565b600061316482613211565b915061316f83613211565b925082821015613182576131816132ec565b5b828203905092915050565b60006131988261321b565b91506131a38361321b565b9250828210156131b6576131b56132ec565b5b828203905092915050565b60006131cc826131f1565b9050919050565b60008115159050919050565b60006131ea826131c1565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600060ff82169050919050565b60005b8381101561325657808201518184015260208101905061323b565b83811115613265576000848401525b50505050565b60006132768261322b565b9150600082141561328a576132896132ec565b5b600182039050919050565b60006132a08261321b565b915063ffffffff8214156132b7576132b66132ec565b5b600182019050919050565b60006132cd8261322b565b915060ff8214156132e1576132e06132ec565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f64732d6d6174682d7375622d756e646572666c6f770000000000000000000000600082015250565b7f41636365737320436f6e74726f6c3a206f6e6c79206f776e6572206f72206f7060008201527f657261746f7220616c6c6f776564000000000000000000000000000000000000602082015250565b7f717565756520697320656d707479000000000000000000000000000000000000600082015250565b7f41636365737320436f6e74726f6c3a206f776e657273686970206e6f7420677260008201527f616e746564000000000000000000000000000000000000000000000000000000602082015250565b7f696e73756666696369656e74207374616b650000000000000000000000000000600082015250565b7f4e6f742072656164790000000000000000000000000000000000000000000000600082015250565b7f64732d6d6174682d6164642d6f766572666c6f77000000000000000000000000600082015250565b7f43616e277420616464206d6f72652076616c696461746f72732e000000000000600082015250565b7f6e696c2072656769737472792061646472657373000000000000000000000000600082015250565b7f4f6e6c792073656c662072656d6f76616c20737570706f727465640000000000600082015250565b7f5374616b6520756e6c6f636b207265717565737465642067726561746572207460008201527f68616e207374616b650000000000000000000000000000000000000000000000602082015250565b7f56616c696461746f72206e6f742070726573656e742e00000000000000000000600082015250565b7f56616c696461746f7220646f65736e2774206d61746368207075626c6963206b60008201527f6579000000000000000000000000000000000000000000000000000000000000602082015250565b7f76616c696461746f7220616c72656164792070726573656e7400000000000000600082015250565b7f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160008201527f6c6c6f7765640000000000000000000000000000000000000000000000000000602082015250565b7f6475706c696361746573206e6f7420616c6c6f77656400000000000000000000600082015250565b7f56616c696461746f72206e6f742070726573656e740000000000000000000000600082015250565b7f6661696c656420746f20616464206f7220717565756500000000000000000000600082015250565b7f5374616b6520756e6c6f636b206e6f7420726571756573746564000000000000600082015250565b7f41636365737320436f6e74726f6c3a206f6e6c79206f776e657220697320616c60008201527f6c6f776564000000000000000000000000000000000000000000000000000000602082015250565b7f6d697373696e6720657468646b67206164647265737300000000000000000000600082015250565b6137de816131c1565b81146137e957600080fd5b50565b6137f5816131df565b811461380057600080fd5b50565b61380c8161321b565b811461381757600080fd5b50565b6138238161322b565b811461382e57600080fd5b5056fea264697066735822122024fc352ed97e6c8035d041cd41977f4bfacaec122fe8b7a88a63592eb05f44e064736f6c63430008060033",
}

// ParticipantsFacetABI is the input ABI used to generate the binding from.
// Deprecated: Use ParticipantsFacetMetaData.ABI instead.
var ParticipantsFacetABI = ParticipantsFacetMetaData.ABI

// ParticipantsFacetBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ParticipantsFacetMetaData.Bin instead.
var ParticipantsFacetBin = ParticipantsFacetMetaData.Bin

// DeployParticipantsFacet deploys a new Ethereum contract, binding an instance of ParticipantsFacet to it.
func DeployParticipantsFacet(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ParticipantsFacet, error) {
	parsed, err := ParticipantsFacetMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ParticipantsFacetBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ParticipantsFacet{ParticipantsFacetCaller: ParticipantsFacetCaller{contract: contract}, ParticipantsFacetTransactor: ParticipantsFacetTransactor{contract: contract}, ParticipantsFacetFilterer: ParticipantsFacetFilterer{contract: contract}}, nil
}

// ParticipantsFacet is an auto generated Go binding around an Ethereum contract.
type ParticipantsFacet struct {
	ParticipantsFacetCaller     // Read-only binding to the contract
	ParticipantsFacetTransactor // Write-only binding to the contract
	ParticipantsFacetFilterer   // Log filterer for contract events
}

// ParticipantsFacetCaller is an auto generated read-only Go binding around an Ethereum contract.
type ParticipantsFacetCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ParticipantsFacetTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ParticipantsFacetTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ParticipantsFacetFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ParticipantsFacetFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ParticipantsFacetSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ParticipantsFacetSession struct {
	Contract     *ParticipantsFacet // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// ParticipantsFacetCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ParticipantsFacetCallerSession struct {
	Contract *ParticipantsFacetCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// ParticipantsFacetTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ParticipantsFacetTransactorSession struct {
	Contract     *ParticipantsFacetTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// ParticipantsFacetRaw is an auto generated low-level Go binding around an Ethereum contract.
type ParticipantsFacetRaw struct {
	Contract *ParticipantsFacet // Generic contract binding to access the raw methods on
}

// ParticipantsFacetCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ParticipantsFacetCallerRaw struct {
	Contract *ParticipantsFacetCaller // Generic read-only contract binding to access the raw methods on
}

// ParticipantsFacetTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ParticipantsFacetTransactorRaw struct {
	Contract *ParticipantsFacetTransactor // Generic write-only contract binding to access the raw methods on
}

// NewParticipantsFacet creates a new instance of ParticipantsFacet, bound to a specific deployed contract.
func NewParticipantsFacet(address common.Address, backend bind.ContractBackend) (*ParticipantsFacet, error) {
	contract, err := bindParticipantsFacet(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ParticipantsFacet{ParticipantsFacetCaller: ParticipantsFacetCaller{contract: contract}, ParticipantsFacetTransactor: ParticipantsFacetTransactor{contract: contract}, ParticipantsFacetFilterer: ParticipantsFacetFilterer{contract: contract}}, nil
}

// NewParticipantsFacetCaller creates a new read-only instance of ParticipantsFacet, bound to a specific deployed contract.
func NewParticipantsFacetCaller(address common.Address, caller bind.ContractCaller) (*ParticipantsFacetCaller, error) {
	contract, err := bindParticipantsFacet(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ParticipantsFacetCaller{contract: contract}, nil
}

// NewParticipantsFacetTransactor creates a new write-only instance of ParticipantsFacet, bound to a specific deployed contract.
func NewParticipantsFacetTransactor(address common.Address, transactor bind.ContractTransactor) (*ParticipantsFacetTransactor, error) {
	contract, err := bindParticipantsFacet(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ParticipantsFacetTransactor{contract: contract}, nil
}

// NewParticipantsFacetFilterer creates a new log filterer instance of ParticipantsFacet, bound to a specific deployed contract.
func NewParticipantsFacetFilterer(address common.Address, filterer bind.ContractFilterer) (*ParticipantsFacetFilterer, error) {
	contract, err := bindParticipantsFacet(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ParticipantsFacetFilterer{contract: contract}, nil
}

// bindParticipantsFacet binds a generic wrapper to an already deployed contract.
func bindParticipantsFacet(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ParticipantsFacetABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ParticipantsFacet *ParticipantsFacetRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ParticipantsFacet.Contract.ParticipantsFacetCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ParticipantsFacet *ParticipantsFacetRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.ParticipantsFacetTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ParticipantsFacet *ParticipantsFacetRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.ParticipantsFacetTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ParticipantsFacet *ParticipantsFacetCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ParticipantsFacet.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ParticipantsFacet *ParticipantsFacetTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ParticipantsFacet *ParticipantsFacetTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.contract.Transact(opts, method, params...)
}

// GetChainId is a free data retrieval call binding the contract method 0x3408e470.
//
// Solidity: function getChainId() view returns(uint32)
func (_ParticipantsFacet *ParticipantsFacetCaller) GetChainId(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _ParticipantsFacet.contract.Call(opts, &out, "getChainId")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// GetChainId is a free data retrieval call binding the contract method 0x3408e470.
//
// Solidity: function getChainId() view returns(uint32)
func (_ParticipantsFacet *ParticipantsFacetSession) GetChainId() (uint32, error) {
	return _ParticipantsFacet.Contract.GetChainId(&_ParticipantsFacet.CallOpts)
}

// GetChainId is a free data retrieval call binding the contract method 0x3408e470.
//
// Solidity: function getChainId() view returns(uint32)
func (_ParticipantsFacet *ParticipantsFacetCallerSession) GetChainId() (uint32, error) {
	return _ParticipantsFacet.Contract.GetChainId(&_ParticipantsFacet.CallOpts)
}

// GetValidatorPublicKey is a free data retrieval call binding the contract method 0x4e6f4a22.
//
// Solidity: function getValidatorPublicKey(address _validator) view returns(uint256[2])
func (_ParticipantsFacet *ParticipantsFacetCaller) GetValidatorPublicKey(opts *bind.CallOpts, _validator common.Address) ([2]*big.Int, error) {
	var out []interface{}
	err := _ParticipantsFacet.contract.Call(opts, &out, "getValidatorPublicKey", _validator)

	if err != nil {
		return *new([2]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([2]*big.Int)).(*[2]*big.Int)

	return out0, err

}

// GetValidatorPublicKey is a free data retrieval call binding the contract method 0x4e6f4a22.
//
// Solidity: function getValidatorPublicKey(address _validator) view returns(uint256[2])
func (_ParticipantsFacet *ParticipantsFacetSession) GetValidatorPublicKey(_validator common.Address) ([2]*big.Int, error) {
	return _ParticipantsFacet.Contract.GetValidatorPublicKey(&_ParticipantsFacet.CallOpts, _validator)
}

// GetValidatorPublicKey is a free data retrieval call binding the contract method 0x4e6f4a22.
//
// Solidity: function getValidatorPublicKey(address _validator) view returns(uint256[2])
func (_ParticipantsFacet *ParticipantsFacetCallerSession) GetValidatorPublicKey(_validator common.Address) ([2]*big.Int, error) {
	return _ParticipantsFacet.Contract.GetValidatorPublicKey(&_ParticipantsFacet.CallOpts, _validator)
}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() view returns(address[])
func (_ParticipantsFacet *ParticipantsFacetCaller) GetValidators(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _ParticipantsFacet.contract.Call(opts, &out, "getValidators")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() view returns(address[])
func (_ParticipantsFacet *ParticipantsFacetSession) GetValidators() ([]common.Address, error) {
	return _ParticipantsFacet.Contract.GetValidators(&_ParticipantsFacet.CallOpts)
}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() view returns(address[])
func (_ParticipantsFacet *ParticipantsFacetCallerSession) GetValidators() ([]common.Address, error) {
	return _ParticipantsFacet.Contract.GetValidators(&_ParticipantsFacet.CallOpts)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address validator) view returns(bool)
func (_ParticipantsFacet *ParticipantsFacetCaller) IsValidator(opts *bind.CallOpts, validator common.Address) (bool, error) {
	var out []interface{}
	err := _ParticipantsFacet.contract.Call(opts, &out, "isValidator", validator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address validator) view returns(bool)
func (_ParticipantsFacet *ParticipantsFacetSession) IsValidator(validator common.Address) (bool, error) {
	return _ParticipantsFacet.Contract.IsValidator(&_ParticipantsFacet.CallOpts, validator)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address validator) view returns(bool)
func (_ParticipantsFacet *ParticipantsFacetCallerSession) IsValidator(validator common.Address) (bool, error) {
	return _ParticipantsFacet.Contract.IsValidator(&_ParticipantsFacet.CallOpts, validator)
}

// ValidatorCount is a free data retrieval call binding the contract method 0x0f43a677.
//
// Solidity: function validatorCount() view returns(uint8)
func (_ParticipantsFacet *ParticipantsFacetCaller) ValidatorCount(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _ParticipantsFacet.contract.Call(opts, &out, "validatorCount")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// ValidatorCount is a free data retrieval call binding the contract method 0x0f43a677.
//
// Solidity: function validatorCount() view returns(uint8)
func (_ParticipantsFacet *ParticipantsFacetSession) ValidatorCount() (uint8, error) {
	return _ParticipantsFacet.Contract.ValidatorCount(&_ParticipantsFacet.CallOpts)
}

// ValidatorCount is a free data retrieval call binding the contract method 0x0f43a677.
//
// Solidity: function validatorCount() view returns(uint8)
func (_ParticipantsFacet *ParticipantsFacetCallerSession) ValidatorCount() (uint8, error) {
	return _ParticipantsFacet.Contract.ValidatorCount(&_ParticipantsFacet.CallOpts)
}

// ValidatorMaxCount is a free data retrieval call binding the contract method 0x09f0d45d.
//
// Solidity: function validatorMaxCount() view returns(uint8)
func (_ParticipantsFacet *ParticipantsFacetCaller) ValidatorMaxCount(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _ParticipantsFacet.contract.Call(opts, &out, "validatorMaxCount")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// ValidatorMaxCount is a free data retrieval call binding the contract method 0x09f0d45d.
//
// Solidity: function validatorMaxCount() view returns(uint8)
func (_ParticipantsFacet *ParticipantsFacetSession) ValidatorMaxCount() (uint8, error) {
	return _ParticipantsFacet.Contract.ValidatorMaxCount(&_ParticipantsFacet.CallOpts)
}

// ValidatorMaxCount is a free data retrieval call binding the contract method 0x09f0d45d.
//
// Solidity: function validatorMaxCount() view returns(uint8)
func (_ParticipantsFacet *ParticipantsFacetCallerSession) ValidatorMaxCount() (uint8, error) {
	return _ParticipantsFacet.Contract.ValidatorMaxCount(&_ParticipantsFacet.CallOpts)
}

// AddValidator is a paid mutator transaction binding the contract method 0xeb6320c7.
//
// Solidity: function addValidator(address _validator, uint256[2] _madID) returns(uint8)
func (_ParticipantsFacet *ParticipantsFacetTransactor) AddValidator(opts *bind.TransactOpts, _validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _ParticipantsFacet.contract.Transact(opts, "addValidator", _validator, _madID)
}

// AddValidator is a paid mutator transaction binding the contract method 0xeb6320c7.
//
// Solidity: function addValidator(address _validator, uint256[2] _madID) returns(uint8)
func (_ParticipantsFacet *ParticipantsFacetSession) AddValidator(_validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.AddValidator(&_ParticipantsFacet.TransactOpts, _validator, _madID)
}

// AddValidator is a paid mutator transaction binding the contract method 0xeb6320c7.
//
// Solidity: function addValidator(address _validator, uint256[2] _madID) returns(uint8)
func (_ParticipantsFacet *ParticipantsFacetTransactorSession) AddValidator(_validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.AddValidator(&_ParticipantsFacet.TransactOpts, _validator, _madID)
}

// ConfirmValidators is a paid mutator transaction binding the contract method 0x35c6a163.
//
// Solidity: function confirmValidators() returns(bool)
func (_ParticipantsFacet *ParticipantsFacetTransactor) ConfirmValidators(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ParticipantsFacet.contract.Transact(opts, "confirmValidators")
}

// ConfirmValidators is a paid mutator transaction binding the contract method 0x35c6a163.
//
// Solidity: function confirmValidators() returns(bool)
func (_ParticipantsFacet *ParticipantsFacetSession) ConfirmValidators() (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.ConfirmValidators(&_ParticipantsFacet.TransactOpts)
}

// ConfirmValidators is a paid mutator transaction binding the contract method 0x35c6a163.
//
// Solidity: function confirmValidators() returns(bool)
func (_ParticipantsFacet *ParticipantsFacetTransactorSession) ConfirmValidators() (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.ConfirmValidators(&_ParticipantsFacet.TransactOpts)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_ParticipantsFacet *ParticipantsFacetTransactor) GrantOperator(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _ParticipantsFacet.contract.Transact(opts, "grantOperator", who)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_ParticipantsFacet *ParticipantsFacetSession) GrantOperator(who common.Address) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.GrantOperator(&_ParticipantsFacet.TransactOpts, who)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_ParticipantsFacet *ParticipantsFacetTransactorSession) GrantOperator(who common.Address) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.GrantOperator(&_ParticipantsFacet.TransactOpts, who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_ParticipantsFacet *ParticipantsFacetTransactor) GrantOwner(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _ParticipantsFacet.contract.Transact(opts, "grantOwner", who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_ParticipantsFacet *ParticipantsFacetSession) GrantOwner(who common.Address) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.GrantOwner(&_ParticipantsFacet.TransactOpts, who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_ParticipantsFacet *ParticipantsFacetTransactorSession) GrantOwner(who common.Address) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.GrantOwner(&_ParticipantsFacet.TransactOpts, who)
}

// InitializeParticipants is a paid mutator transaction binding the contract method 0xee8420dd.
//
// Solidity: function initializeParticipants(address registry) returns()
func (_ParticipantsFacet *ParticipantsFacetTransactor) InitializeParticipants(opts *bind.TransactOpts, registry common.Address) (*types.Transaction, error) {
	return _ParticipantsFacet.contract.Transact(opts, "initializeParticipants", registry)
}

// InitializeParticipants is a paid mutator transaction binding the contract method 0xee8420dd.
//
// Solidity: function initializeParticipants(address registry) returns()
func (_ParticipantsFacet *ParticipantsFacetSession) InitializeParticipants(registry common.Address) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.InitializeParticipants(&_ParticipantsFacet.TransactOpts, registry)
}

// InitializeParticipants is a paid mutator transaction binding the contract method 0xee8420dd.
//
// Solidity: function initializeParticipants(address registry) returns()
func (_ParticipantsFacet *ParticipantsFacetTransactorSession) InitializeParticipants(registry common.Address) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.InitializeParticipants(&_ParticipantsFacet.TransactOpts, registry)
}

// RemoveValidator is a paid mutator transaction binding the contract method 0x844469b2.
//
// Solidity: function removeValidator(address _validator, uint256[2] _madID) returns(uint8)
func (_ParticipantsFacet *ParticipantsFacetTransactor) RemoveValidator(opts *bind.TransactOpts, _validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _ParticipantsFacet.contract.Transact(opts, "removeValidator", _validator, _madID)
}

// RemoveValidator is a paid mutator transaction binding the contract method 0x844469b2.
//
// Solidity: function removeValidator(address _validator, uint256[2] _madID) returns(uint8)
func (_ParticipantsFacet *ParticipantsFacetSession) RemoveValidator(_validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.RemoveValidator(&_ParticipantsFacet.TransactOpts, _validator, _madID)
}

// RemoveValidator is a paid mutator transaction binding the contract method 0x844469b2.
//
// Solidity: function removeValidator(address _validator, uint256[2] _madID) returns(uint8)
func (_ParticipantsFacet *ParticipantsFacetTransactorSession) RemoveValidator(_validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.RemoveValidator(&_ParticipantsFacet.TransactOpts, _validator, _madID)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_ParticipantsFacet *ParticipantsFacetTransactor) RevokeOperator(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _ParticipantsFacet.contract.Transact(opts, "revokeOperator", who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_ParticipantsFacet *ParticipantsFacetSession) RevokeOperator(who common.Address) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.RevokeOperator(&_ParticipantsFacet.TransactOpts, who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_ParticipantsFacet *ParticipantsFacetTransactorSession) RevokeOperator(who common.Address) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.RevokeOperator(&_ParticipantsFacet.TransactOpts, who)
}

// SetChainId is a paid mutator transaction binding the contract method 0xa179f124.
//
// Solidity: function setChainId(uint32 _chainId) returns()
func (_ParticipantsFacet *ParticipantsFacetTransactor) SetChainId(opts *bind.TransactOpts, _chainId uint32) (*types.Transaction, error) {
	return _ParticipantsFacet.contract.Transact(opts, "setChainId", _chainId)
}

// SetChainId is a paid mutator transaction binding the contract method 0xa179f124.
//
// Solidity: function setChainId(uint32 _chainId) returns()
func (_ParticipantsFacet *ParticipantsFacetSession) SetChainId(_chainId uint32) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.SetChainId(&_ParticipantsFacet.TransactOpts, _chainId)
}

// SetChainId is a paid mutator transaction binding the contract method 0xa179f124.
//
// Solidity: function setChainId(uint32 _chainId) returns()
func (_ParticipantsFacet *ParticipantsFacetTransactorSession) SetChainId(_chainId uint32) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.SetChainId(&_ParticipantsFacet.TransactOpts, _chainId)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_ParticipantsFacet *ParticipantsFacetTransactor) SetGovernance(opts *bind.TransactOpts, governance_ common.Address) (*types.Transaction, error) {
	return _ParticipantsFacet.contract.Transact(opts, "setGovernance", governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_ParticipantsFacet *ParticipantsFacetSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.SetGovernance(&_ParticipantsFacet.TransactOpts, governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_ParticipantsFacet *ParticipantsFacetTransactorSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.SetGovernance(&_ParticipantsFacet.TransactOpts, governance_)
}

// SetValidatorMaxCount is a paid mutator transaction binding the contract method 0x2cab37f7.
//
// Solidity: function setValidatorMaxCount(uint8 max) returns()
func (_ParticipantsFacet *ParticipantsFacetTransactor) SetValidatorMaxCount(opts *bind.TransactOpts, max uint8) (*types.Transaction, error) {
	return _ParticipantsFacet.contract.Transact(opts, "setValidatorMaxCount", max)
}

// SetValidatorMaxCount is a paid mutator transaction binding the contract method 0x2cab37f7.
//
// Solidity: function setValidatorMaxCount(uint8 max) returns()
func (_ParticipantsFacet *ParticipantsFacetSession) SetValidatorMaxCount(max uint8) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.SetValidatorMaxCount(&_ParticipantsFacet.TransactOpts, max)
}

// SetValidatorMaxCount is a paid mutator transaction binding the contract method 0x2cab37f7.
//
// Solidity: function setValidatorMaxCount(uint8 max) returns()
func (_ParticipantsFacet *ParticipantsFacetTransactorSession) SetValidatorMaxCount(max uint8) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.SetValidatorMaxCount(&_ParticipantsFacet.TransactOpts, max)
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_ParticipantsFacet *ParticipantsFacetTransactor) Start(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ParticipantsFacet.contract.Transact(opts, "start")
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_ParticipantsFacet *ParticipantsFacetSession) Start() (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.Start(&_ParticipantsFacet.TransactOpts)
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_ParticipantsFacet *ParticipantsFacetTransactorSession) Start() (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.Start(&_ParticipantsFacet.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_ParticipantsFacet *ParticipantsFacetTransactor) Stop(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ParticipantsFacet.contract.Transact(opts, "stop")
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_ParticipantsFacet *ParticipantsFacetSession) Stop() (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.Stop(&_ParticipantsFacet.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_ParticipantsFacet *ParticipantsFacetTransactorSession) Stop() (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.Stop(&_ParticipantsFacet.TransactOpts)
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_ParticipantsFacet *ParticipantsFacetTransactor) TakeOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ParticipantsFacet.contract.Transact(opts, "takeOwnership")
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_ParticipantsFacet *ParticipantsFacetSession) TakeOwnership() (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.TakeOwnership(&_ParticipantsFacet.TransactOpts)
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_ParticipantsFacet *ParticipantsFacetTransactorSession) TakeOwnership() (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.TakeOwnership(&_ParticipantsFacet.TransactOpts)
}

// ParticipantsFacetValidatorCreatedIterator is returned from FilterValidatorCreated and is used to iterate over the raw logs and unpacked data for ValidatorCreated events raised by the ParticipantsFacet contract.
type ParticipantsFacetValidatorCreatedIterator struct {
	Event *ParticipantsFacetValidatorCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParticipantsFacetValidatorCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParticipantsFacetValidatorCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParticipantsFacetValidatorCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParticipantsFacetValidatorCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParticipantsFacetValidatorCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParticipantsFacetValidatorCreated represents a ValidatorCreated event raised by the ParticipantsFacet contract.
type ParticipantsFacetValidatorCreated struct {
	Validator common.Address
	Signer    common.Address
	MadID     [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorCreated is a free log retrieval operation binding the contract event 0xef5e89a9416c26e0a0a37c1f630958c8c88d9efad59f553f94cff0bed0a268d3.
//
// Solidity: event ValidatorCreated(address indexed validator, address indexed signer, uint256[2] madID)
func (_ParticipantsFacet *ParticipantsFacetFilterer) FilterValidatorCreated(opts *bind.FilterOpts, validator []common.Address, signer []common.Address) (*ParticipantsFacetValidatorCreatedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var signerRule []interface{}
	for _, signerItem := range signer {
		signerRule = append(signerRule, signerItem)
	}

	logs, sub, err := _ParticipantsFacet.contract.FilterLogs(opts, "ValidatorCreated", validatorRule, signerRule)
	if err != nil {
		return nil, err
	}
	return &ParticipantsFacetValidatorCreatedIterator{contract: _ParticipantsFacet.contract, event: "ValidatorCreated", logs: logs, sub: sub}, nil
}

// WatchValidatorCreated is a free log subscription operation binding the contract event 0xef5e89a9416c26e0a0a37c1f630958c8c88d9efad59f553f94cff0bed0a268d3.
//
// Solidity: event ValidatorCreated(address indexed validator, address indexed signer, uint256[2] madID)
func (_ParticipantsFacet *ParticipantsFacetFilterer) WatchValidatorCreated(opts *bind.WatchOpts, sink chan<- *ParticipantsFacetValidatorCreated, validator []common.Address, signer []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var signerRule []interface{}
	for _, signerItem := range signer {
		signerRule = append(signerRule, signerItem)
	}

	logs, sub, err := _ParticipantsFacet.contract.WatchLogs(opts, "ValidatorCreated", validatorRule, signerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParticipantsFacetValidatorCreated)
				if err := _ParticipantsFacet.contract.UnpackLog(event, "ValidatorCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorCreated is a log parse operation binding the contract event 0xef5e89a9416c26e0a0a37c1f630958c8c88d9efad59f553f94cff0bed0a268d3.
//
// Solidity: event ValidatorCreated(address indexed validator, address indexed signer, uint256[2] madID)
func (_ParticipantsFacet *ParticipantsFacetFilterer) ParseValidatorCreated(log types.Log) (*ParticipantsFacetValidatorCreated, error) {
	event := new(ParticipantsFacetValidatorCreated)
	if err := _ParticipantsFacet.contract.UnpackLog(event, "ValidatorCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ParticipantsFacetValidatorJoinedIterator is returned from FilterValidatorJoined and is used to iterate over the raw logs and unpacked data for ValidatorJoined events raised by the ParticipantsFacet contract.
type ParticipantsFacetValidatorJoinedIterator struct {
	Event *ParticipantsFacetValidatorJoined // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParticipantsFacetValidatorJoinedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParticipantsFacetValidatorJoined)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParticipantsFacetValidatorJoined)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParticipantsFacetValidatorJoinedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParticipantsFacetValidatorJoinedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParticipantsFacetValidatorJoined represents a ValidatorJoined event raised by the ParticipantsFacet contract.
type ParticipantsFacetValidatorJoined struct {
	Validator common.Address
	MadID     [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorJoined is a free log retrieval operation binding the contract event 0x8c25e214c5693ebaf8008875bacedeb9e0aafd393864a314ed1801b2a4e13dd9.
//
// Solidity: event ValidatorJoined(address indexed validator, uint256[2] madID)
func (_ParticipantsFacet *ParticipantsFacetFilterer) FilterValidatorJoined(opts *bind.FilterOpts, validator []common.Address) (*ParticipantsFacetValidatorJoinedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ParticipantsFacet.contract.FilterLogs(opts, "ValidatorJoined", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ParticipantsFacetValidatorJoinedIterator{contract: _ParticipantsFacet.contract, event: "ValidatorJoined", logs: logs, sub: sub}, nil
}

// WatchValidatorJoined is a free log subscription operation binding the contract event 0x8c25e214c5693ebaf8008875bacedeb9e0aafd393864a314ed1801b2a4e13dd9.
//
// Solidity: event ValidatorJoined(address indexed validator, uint256[2] madID)
func (_ParticipantsFacet *ParticipantsFacetFilterer) WatchValidatorJoined(opts *bind.WatchOpts, sink chan<- *ParticipantsFacetValidatorJoined, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ParticipantsFacet.contract.WatchLogs(opts, "ValidatorJoined", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParticipantsFacetValidatorJoined)
				if err := _ParticipantsFacet.contract.UnpackLog(event, "ValidatorJoined", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorJoined is a log parse operation binding the contract event 0x8c25e214c5693ebaf8008875bacedeb9e0aafd393864a314ed1801b2a4e13dd9.
//
// Solidity: event ValidatorJoined(address indexed validator, uint256[2] madID)
func (_ParticipantsFacet *ParticipantsFacetFilterer) ParseValidatorJoined(log types.Log) (*ParticipantsFacetValidatorJoined, error) {
	event := new(ParticipantsFacetValidatorJoined)
	if err := _ParticipantsFacet.contract.UnpackLog(event, "ValidatorJoined", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ParticipantsFacetValidatorLeftIterator is returned from FilterValidatorLeft and is used to iterate over the raw logs and unpacked data for ValidatorLeft events raised by the ParticipantsFacet contract.
type ParticipantsFacetValidatorLeftIterator struct {
	Event *ParticipantsFacetValidatorLeft // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParticipantsFacetValidatorLeftIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParticipantsFacetValidatorLeft)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParticipantsFacetValidatorLeft)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParticipantsFacetValidatorLeftIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParticipantsFacetValidatorLeftIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParticipantsFacetValidatorLeft represents a ValidatorLeft event raised by the ParticipantsFacet contract.
type ParticipantsFacetValidatorLeft struct {
	Validator common.Address
	PkHash    [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorLeft is a free log retrieval operation binding the contract event 0x319bbadb03b94aedc69babb34a28675536a9cb30f4bbde343e1d0018c44ebd94.
//
// Solidity: event ValidatorLeft(address indexed validator, uint256[2] pkHash)
func (_ParticipantsFacet *ParticipantsFacetFilterer) FilterValidatorLeft(opts *bind.FilterOpts, validator []common.Address) (*ParticipantsFacetValidatorLeftIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ParticipantsFacet.contract.FilterLogs(opts, "ValidatorLeft", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ParticipantsFacetValidatorLeftIterator{contract: _ParticipantsFacet.contract, event: "ValidatorLeft", logs: logs, sub: sub}, nil
}

// WatchValidatorLeft is a free log subscription operation binding the contract event 0x319bbadb03b94aedc69babb34a28675536a9cb30f4bbde343e1d0018c44ebd94.
//
// Solidity: event ValidatorLeft(address indexed validator, uint256[2] pkHash)
func (_ParticipantsFacet *ParticipantsFacetFilterer) WatchValidatorLeft(opts *bind.WatchOpts, sink chan<- *ParticipantsFacetValidatorLeft, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ParticipantsFacet.contract.WatchLogs(opts, "ValidatorLeft", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParticipantsFacetValidatorLeft)
				if err := _ParticipantsFacet.contract.UnpackLog(event, "ValidatorLeft", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorLeft is a log parse operation binding the contract event 0x319bbadb03b94aedc69babb34a28675536a9cb30f4bbde343e1d0018c44ebd94.
//
// Solidity: event ValidatorLeft(address indexed validator, uint256[2] pkHash)
func (_ParticipantsFacet *ParticipantsFacetFilterer) ParseValidatorLeft(log types.Log) (*ParticipantsFacetValidatorLeft, error) {
	event := new(ParticipantsFacetValidatorLeft)
	if err := _ParticipantsFacet.contract.UnpackLog(event, "ValidatorLeft", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ParticipantsFacetValidatorQueuedIterator is returned from FilterValidatorQueued and is used to iterate over the raw logs and unpacked data for ValidatorQueued events raised by the ParticipantsFacet contract.
type ParticipantsFacetValidatorQueuedIterator struct {
	Event *ParticipantsFacetValidatorQueued // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParticipantsFacetValidatorQueuedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParticipantsFacetValidatorQueued)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParticipantsFacetValidatorQueued)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParticipantsFacetValidatorQueuedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParticipantsFacetValidatorQueuedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParticipantsFacetValidatorQueued represents a ValidatorQueued event raised by the ParticipantsFacet contract.
type ParticipantsFacetValidatorQueued struct {
	Validator common.Address
	PkHash    [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorQueued is a free log retrieval operation binding the contract event 0xb4389eb1c66b46169245bc8c147e4b13a2b88adcaa44d001b0fadf25890b773d.
//
// Solidity: event ValidatorQueued(address indexed validator, uint256[2] pkHash)
func (_ParticipantsFacet *ParticipantsFacetFilterer) FilterValidatorQueued(opts *bind.FilterOpts, validator []common.Address) (*ParticipantsFacetValidatorQueuedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ParticipantsFacet.contract.FilterLogs(opts, "ValidatorQueued", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ParticipantsFacetValidatorQueuedIterator{contract: _ParticipantsFacet.contract, event: "ValidatorQueued", logs: logs, sub: sub}, nil
}

// WatchValidatorQueued is a free log subscription operation binding the contract event 0xb4389eb1c66b46169245bc8c147e4b13a2b88adcaa44d001b0fadf25890b773d.
//
// Solidity: event ValidatorQueued(address indexed validator, uint256[2] pkHash)
func (_ParticipantsFacet *ParticipantsFacetFilterer) WatchValidatorQueued(opts *bind.WatchOpts, sink chan<- *ParticipantsFacetValidatorQueued, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ParticipantsFacet.contract.WatchLogs(opts, "ValidatorQueued", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParticipantsFacetValidatorQueued)
				if err := _ParticipantsFacet.contract.UnpackLog(event, "ValidatorQueued", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorQueued is a log parse operation binding the contract event 0xb4389eb1c66b46169245bc8c147e4b13a2b88adcaa44d001b0fadf25890b773d.
//
// Solidity: event ValidatorQueued(address indexed validator, uint256[2] pkHash)
func (_ParticipantsFacet *ParticipantsFacetFilterer) ParseValidatorQueued(log types.Log) (*ParticipantsFacetValidatorQueued, error) {
	event := new(ParticipantsFacetValidatorQueued)
	if err := _ParticipantsFacet.contract.UnpackLog(event, "ValidatorQueued", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ParticipantsLibraryMetaData contains all meta data concerning the ParticipantsLibrary contract.
var ParticipantsLibraryMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"madID\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"madID\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"pkHash\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorLeft\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"pkHash\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorQueued\",\"type\":\"event\"}]",
	Bin: "0x60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122038fefcf1dbb9c5976c355319de25f2f094d57aacdeb3af6b76a118a47d70bb3c64736f6c63430008060033",
}

// ParticipantsLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use ParticipantsLibraryMetaData.ABI instead.
var ParticipantsLibraryABI = ParticipantsLibraryMetaData.ABI

// ParticipantsLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ParticipantsLibraryMetaData.Bin instead.
var ParticipantsLibraryBin = ParticipantsLibraryMetaData.Bin

// DeployParticipantsLibrary deploys a new Ethereum contract, binding an instance of ParticipantsLibrary to it.
func DeployParticipantsLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ParticipantsLibrary, error) {
	parsed, err := ParticipantsLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ParticipantsLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ParticipantsLibrary{ParticipantsLibraryCaller: ParticipantsLibraryCaller{contract: contract}, ParticipantsLibraryTransactor: ParticipantsLibraryTransactor{contract: contract}, ParticipantsLibraryFilterer: ParticipantsLibraryFilterer{contract: contract}}, nil
}

// ParticipantsLibrary is an auto generated Go binding around an Ethereum contract.
type ParticipantsLibrary struct {
	ParticipantsLibraryCaller     // Read-only binding to the contract
	ParticipantsLibraryTransactor // Write-only binding to the contract
	ParticipantsLibraryFilterer   // Log filterer for contract events
}

// ParticipantsLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type ParticipantsLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ParticipantsLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ParticipantsLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ParticipantsLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ParticipantsLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ParticipantsLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ParticipantsLibrarySession struct {
	Contract     *ParticipantsLibrary // Generic contract binding to set the session for
	CallOpts     bind.CallOpts        // Call options to use throughout this session
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// ParticipantsLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ParticipantsLibraryCallerSession struct {
	Contract *ParticipantsLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts              // Call options to use throughout this session
}

// ParticipantsLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ParticipantsLibraryTransactorSession struct {
	Contract     *ParticipantsLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts              // Transaction auth options to use throughout this session
}

// ParticipantsLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type ParticipantsLibraryRaw struct {
	Contract *ParticipantsLibrary // Generic contract binding to access the raw methods on
}

// ParticipantsLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ParticipantsLibraryCallerRaw struct {
	Contract *ParticipantsLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// ParticipantsLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ParticipantsLibraryTransactorRaw struct {
	Contract *ParticipantsLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewParticipantsLibrary creates a new instance of ParticipantsLibrary, bound to a specific deployed contract.
func NewParticipantsLibrary(address common.Address, backend bind.ContractBackend) (*ParticipantsLibrary, error) {
	contract, err := bindParticipantsLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ParticipantsLibrary{ParticipantsLibraryCaller: ParticipantsLibraryCaller{contract: contract}, ParticipantsLibraryTransactor: ParticipantsLibraryTransactor{contract: contract}, ParticipantsLibraryFilterer: ParticipantsLibraryFilterer{contract: contract}}, nil
}

// NewParticipantsLibraryCaller creates a new read-only instance of ParticipantsLibrary, bound to a specific deployed contract.
func NewParticipantsLibraryCaller(address common.Address, caller bind.ContractCaller) (*ParticipantsLibraryCaller, error) {
	contract, err := bindParticipantsLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ParticipantsLibraryCaller{contract: contract}, nil
}

// NewParticipantsLibraryTransactor creates a new write-only instance of ParticipantsLibrary, bound to a specific deployed contract.
func NewParticipantsLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*ParticipantsLibraryTransactor, error) {
	contract, err := bindParticipantsLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ParticipantsLibraryTransactor{contract: contract}, nil
}

// NewParticipantsLibraryFilterer creates a new log filterer instance of ParticipantsLibrary, bound to a specific deployed contract.
func NewParticipantsLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*ParticipantsLibraryFilterer, error) {
	contract, err := bindParticipantsLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ParticipantsLibraryFilterer{contract: contract}, nil
}

// bindParticipantsLibrary binds a generic wrapper to an already deployed contract.
func bindParticipantsLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ParticipantsLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ParticipantsLibrary *ParticipantsLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ParticipantsLibrary.Contract.ParticipantsLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ParticipantsLibrary *ParticipantsLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ParticipantsLibrary.Contract.ParticipantsLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ParticipantsLibrary *ParticipantsLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ParticipantsLibrary.Contract.ParticipantsLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ParticipantsLibrary *ParticipantsLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ParticipantsLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ParticipantsLibrary *ParticipantsLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ParticipantsLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ParticipantsLibrary *ParticipantsLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ParticipantsLibrary.Contract.contract.Transact(opts, method, params...)
}

// ParticipantsLibraryValidatorCreatedIterator is returned from FilterValidatorCreated and is used to iterate over the raw logs and unpacked data for ValidatorCreated events raised by the ParticipantsLibrary contract.
type ParticipantsLibraryValidatorCreatedIterator struct {
	Event *ParticipantsLibraryValidatorCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParticipantsLibraryValidatorCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParticipantsLibraryValidatorCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParticipantsLibraryValidatorCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParticipantsLibraryValidatorCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParticipantsLibraryValidatorCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParticipantsLibraryValidatorCreated represents a ValidatorCreated event raised by the ParticipantsLibrary contract.
type ParticipantsLibraryValidatorCreated struct {
	Validator common.Address
	Signer    common.Address
	MadID     [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorCreated is a free log retrieval operation binding the contract event 0xef5e89a9416c26e0a0a37c1f630958c8c88d9efad59f553f94cff0bed0a268d3.
//
// Solidity: event ValidatorCreated(address indexed validator, address indexed signer, uint256[2] madID)
func (_ParticipantsLibrary *ParticipantsLibraryFilterer) FilterValidatorCreated(opts *bind.FilterOpts, validator []common.Address, signer []common.Address) (*ParticipantsLibraryValidatorCreatedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var signerRule []interface{}
	for _, signerItem := range signer {
		signerRule = append(signerRule, signerItem)
	}

	logs, sub, err := _ParticipantsLibrary.contract.FilterLogs(opts, "ValidatorCreated", validatorRule, signerRule)
	if err != nil {
		return nil, err
	}
	return &ParticipantsLibraryValidatorCreatedIterator{contract: _ParticipantsLibrary.contract, event: "ValidatorCreated", logs: logs, sub: sub}, nil
}

// WatchValidatorCreated is a free log subscription operation binding the contract event 0xef5e89a9416c26e0a0a37c1f630958c8c88d9efad59f553f94cff0bed0a268d3.
//
// Solidity: event ValidatorCreated(address indexed validator, address indexed signer, uint256[2] madID)
func (_ParticipantsLibrary *ParticipantsLibraryFilterer) WatchValidatorCreated(opts *bind.WatchOpts, sink chan<- *ParticipantsLibraryValidatorCreated, validator []common.Address, signer []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var signerRule []interface{}
	for _, signerItem := range signer {
		signerRule = append(signerRule, signerItem)
	}

	logs, sub, err := _ParticipantsLibrary.contract.WatchLogs(opts, "ValidatorCreated", validatorRule, signerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParticipantsLibraryValidatorCreated)
				if err := _ParticipantsLibrary.contract.UnpackLog(event, "ValidatorCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorCreated is a log parse operation binding the contract event 0xef5e89a9416c26e0a0a37c1f630958c8c88d9efad59f553f94cff0bed0a268d3.
//
// Solidity: event ValidatorCreated(address indexed validator, address indexed signer, uint256[2] madID)
func (_ParticipantsLibrary *ParticipantsLibraryFilterer) ParseValidatorCreated(log types.Log) (*ParticipantsLibraryValidatorCreated, error) {
	event := new(ParticipantsLibraryValidatorCreated)
	if err := _ParticipantsLibrary.contract.UnpackLog(event, "ValidatorCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ParticipantsLibraryValidatorJoinedIterator is returned from FilterValidatorJoined and is used to iterate over the raw logs and unpacked data for ValidatorJoined events raised by the ParticipantsLibrary contract.
type ParticipantsLibraryValidatorJoinedIterator struct {
	Event *ParticipantsLibraryValidatorJoined // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParticipantsLibraryValidatorJoinedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParticipantsLibraryValidatorJoined)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParticipantsLibraryValidatorJoined)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParticipantsLibraryValidatorJoinedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParticipantsLibraryValidatorJoinedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParticipantsLibraryValidatorJoined represents a ValidatorJoined event raised by the ParticipantsLibrary contract.
type ParticipantsLibraryValidatorJoined struct {
	Validator common.Address
	MadID     [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorJoined is a free log retrieval operation binding the contract event 0x8c25e214c5693ebaf8008875bacedeb9e0aafd393864a314ed1801b2a4e13dd9.
//
// Solidity: event ValidatorJoined(address indexed validator, uint256[2] madID)
func (_ParticipantsLibrary *ParticipantsLibraryFilterer) FilterValidatorJoined(opts *bind.FilterOpts, validator []common.Address) (*ParticipantsLibraryValidatorJoinedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ParticipantsLibrary.contract.FilterLogs(opts, "ValidatorJoined", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ParticipantsLibraryValidatorJoinedIterator{contract: _ParticipantsLibrary.contract, event: "ValidatorJoined", logs: logs, sub: sub}, nil
}

// WatchValidatorJoined is a free log subscription operation binding the contract event 0x8c25e214c5693ebaf8008875bacedeb9e0aafd393864a314ed1801b2a4e13dd9.
//
// Solidity: event ValidatorJoined(address indexed validator, uint256[2] madID)
func (_ParticipantsLibrary *ParticipantsLibraryFilterer) WatchValidatorJoined(opts *bind.WatchOpts, sink chan<- *ParticipantsLibraryValidatorJoined, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ParticipantsLibrary.contract.WatchLogs(opts, "ValidatorJoined", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParticipantsLibraryValidatorJoined)
				if err := _ParticipantsLibrary.contract.UnpackLog(event, "ValidatorJoined", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorJoined is a log parse operation binding the contract event 0x8c25e214c5693ebaf8008875bacedeb9e0aafd393864a314ed1801b2a4e13dd9.
//
// Solidity: event ValidatorJoined(address indexed validator, uint256[2] madID)
func (_ParticipantsLibrary *ParticipantsLibraryFilterer) ParseValidatorJoined(log types.Log) (*ParticipantsLibraryValidatorJoined, error) {
	event := new(ParticipantsLibraryValidatorJoined)
	if err := _ParticipantsLibrary.contract.UnpackLog(event, "ValidatorJoined", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ParticipantsLibraryValidatorLeftIterator is returned from FilterValidatorLeft and is used to iterate over the raw logs and unpacked data for ValidatorLeft events raised by the ParticipantsLibrary contract.
type ParticipantsLibraryValidatorLeftIterator struct {
	Event *ParticipantsLibraryValidatorLeft // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParticipantsLibraryValidatorLeftIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParticipantsLibraryValidatorLeft)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParticipantsLibraryValidatorLeft)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParticipantsLibraryValidatorLeftIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParticipantsLibraryValidatorLeftIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParticipantsLibraryValidatorLeft represents a ValidatorLeft event raised by the ParticipantsLibrary contract.
type ParticipantsLibraryValidatorLeft struct {
	Validator common.Address
	PkHash    [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorLeft is a free log retrieval operation binding the contract event 0x319bbadb03b94aedc69babb34a28675536a9cb30f4bbde343e1d0018c44ebd94.
//
// Solidity: event ValidatorLeft(address indexed validator, uint256[2] pkHash)
func (_ParticipantsLibrary *ParticipantsLibraryFilterer) FilterValidatorLeft(opts *bind.FilterOpts, validator []common.Address) (*ParticipantsLibraryValidatorLeftIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ParticipantsLibrary.contract.FilterLogs(opts, "ValidatorLeft", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ParticipantsLibraryValidatorLeftIterator{contract: _ParticipantsLibrary.contract, event: "ValidatorLeft", logs: logs, sub: sub}, nil
}

// WatchValidatorLeft is a free log subscription operation binding the contract event 0x319bbadb03b94aedc69babb34a28675536a9cb30f4bbde343e1d0018c44ebd94.
//
// Solidity: event ValidatorLeft(address indexed validator, uint256[2] pkHash)
func (_ParticipantsLibrary *ParticipantsLibraryFilterer) WatchValidatorLeft(opts *bind.WatchOpts, sink chan<- *ParticipantsLibraryValidatorLeft, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ParticipantsLibrary.contract.WatchLogs(opts, "ValidatorLeft", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParticipantsLibraryValidatorLeft)
				if err := _ParticipantsLibrary.contract.UnpackLog(event, "ValidatorLeft", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorLeft is a log parse operation binding the contract event 0x319bbadb03b94aedc69babb34a28675536a9cb30f4bbde343e1d0018c44ebd94.
//
// Solidity: event ValidatorLeft(address indexed validator, uint256[2] pkHash)
func (_ParticipantsLibrary *ParticipantsLibraryFilterer) ParseValidatorLeft(log types.Log) (*ParticipantsLibraryValidatorLeft, error) {
	event := new(ParticipantsLibraryValidatorLeft)
	if err := _ParticipantsLibrary.contract.UnpackLog(event, "ValidatorLeft", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ParticipantsLibraryValidatorQueuedIterator is returned from FilterValidatorQueued and is used to iterate over the raw logs and unpacked data for ValidatorQueued events raised by the ParticipantsLibrary contract.
type ParticipantsLibraryValidatorQueuedIterator struct {
	Event *ParticipantsLibraryValidatorQueued // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParticipantsLibraryValidatorQueuedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParticipantsLibraryValidatorQueued)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParticipantsLibraryValidatorQueued)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParticipantsLibraryValidatorQueuedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParticipantsLibraryValidatorQueuedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParticipantsLibraryValidatorQueued represents a ValidatorQueued event raised by the ParticipantsLibrary contract.
type ParticipantsLibraryValidatorQueued struct {
	Validator common.Address
	PkHash    [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorQueued is a free log retrieval operation binding the contract event 0xb4389eb1c66b46169245bc8c147e4b13a2b88adcaa44d001b0fadf25890b773d.
//
// Solidity: event ValidatorQueued(address indexed validator, uint256[2] pkHash)
func (_ParticipantsLibrary *ParticipantsLibraryFilterer) FilterValidatorQueued(opts *bind.FilterOpts, validator []common.Address) (*ParticipantsLibraryValidatorQueuedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ParticipantsLibrary.contract.FilterLogs(opts, "ValidatorQueued", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ParticipantsLibraryValidatorQueuedIterator{contract: _ParticipantsLibrary.contract, event: "ValidatorQueued", logs: logs, sub: sub}, nil
}

// WatchValidatorQueued is a free log subscription operation binding the contract event 0xb4389eb1c66b46169245bc8c147e4b13a2b88adcaa44d001b0fadf25890b773d.
//
// Solidity: event ValidatorQueued(address indexed validator, uint256[2] pkHash)
func (_ParticipantsLibrary *ParticipantsLibraryFilterer) WatchValidatorQueued(opts *bind.WatchOpts, sink chan<- *ParticipantsLibraryValidatorQueued, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ParticipantsLibrary.contract.WatchLogs(opts, "ValidatorQueued", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParticipantsLibraryValidatorQueued)
				if err := _ParticipantsLibrary.contract.UnpackLog(event, "ValidatorQueued", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorQueued is a log parse operation binding the contract event 0xb4389eb1c66b46169245bc8c147e4b13a2b88adcaa44d001b0fadf25890b773d.
//
// Solidity: event ValidatorQueued(address indexed validator, uint256[2] pkHash)
func (_ParticipantsLibrary *ParticipantsLibraryFilterer) ParseValidatorQueued(log types.Log) (*ParticipantsLibraryValidatorQueued, error) {
	event := new(ParticipantsLibraryValidatorQueued)
	if err := _ParticipantsLibrary.contract.UnpackLog(event, "ValidatorQueued", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// QueueLibraryMetaData contains all meta data concerning the QueueLibrary contract.
var QueueLibraryMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202aacb73ac2b338efe23a83111f9321f07083c2d7649b2589a5e857d57a5ff37a64736f6c63430008060033",
}

// QueueLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use QueueLibraryMetaData.ABI instead.
var QueueLibraryABI = QueueLibraryMetaData.ABI

// QueueLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use QueueLibraryMetaData.Bin instead.
var QueueLibraryBin = QueueLibraryMetaData.Bin

// DeployQueueLibrary deploys a new Ethereum contract, binding an instance of QueueLibrary to it.
func DeployQueueLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *QueueLibrary, error) {
	parsed, err := QueueLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(QueueLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &QueueLibrary{QueueLibraryCaller: QueueLibraryCaller{contract: contract}, QueueLibraryTransactor: QueueLibraryTransactor{contract: contract}, QueueLibraryFilterer: QueueLibraryFilterer{contract: contract}}, nil
}

// QueueLibrary is an auto generated Go binding around an Ethereum contract.
type QueueLibrary struct {
	QueueLibraryCaller     // Read-only binding to the contract
	QueueLibraryTransactor // Write-only binding to the contract
	QueueLibraryFilterer   // Log filterer for contract events
}

// QueueLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type QueueLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// QueueLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type QueueLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// QueueLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type QueueLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// QueueLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type QueueLibrarySession struct {
	Contract     *QueueLibrary     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// QueueLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type QueueLibraryCallerSession struct {
	Contract *QueueLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// QueueLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type QueueLibraryTransactorSession struct {
	Contract     *QueueLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// QueueLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type QueueLibraryRaw struct {
	Contract *QueueLibrary // Generic contract binding to access the raw methods on
}

// QueueLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type QueueLibraryCallerRaw struct {
	Contract *QueueLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// QueueLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type QueueLibraryTransactorRaw struct {
	Contract *QueueLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewQueueLibrary creates a new instance of QueueLibrary, bound to a specific deployed contract.
func NewQueueLibrary(address common.Address, backend bind.ContractBackend) (*QueueLibrary, error) {
	contract, err := bindQueueLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &QueueLibrary{QueueLibraryCaller: QueueLibraryCaller{contract: contract}, QueueLibraryTransactor: QueueLibraryTransactor{contract: contract}, QueueLibraryFilterer: QueueLibraryFilterer{contract: contract}}, nil
}

// NewQueueLibraryCaller creates a new read-only instance of QueueLibrary, bound to a specific deployed contract.
func NewQueueLibraryCaller(address common.Address, caller bind.ContractCaller) (*QueueLibraryCaller, error) {
	contract, err := bindQueueLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &QueueLibraryCaller{contract: contract}, nil
}

// NewQueueLibraryTransactor creates a new write-only instance of QueueLibrary, bound to a specific deployed contract.
func NewQueueLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*QueueLibraryTransactor, error) {
	contract, err := bindQueueLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &QueueLibraryTransactor{contract: contract}, nil
}

// NewQueueLibraryFilterer creates a new log filterer instance of QueueLibrary, bound to a specific deployed contract.
func NewQueueLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*QueueLibraryFilterer, error) {
	contract, err := bindQueueLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &QueueLibraryFilterer{contract: contract}, nil
}

// bindQueueLibrary binds a generic wrapper to an already deployed contract.
func bindQueueLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(QueueLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_QueueLibrary *QueueLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _QueueLibrary.Contract.QueueLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_QueueLibrary *QueueLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _QueueLibrary.Contract.QueueLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_QueueLibrary *QueueLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _QueueLibrary.Contract.QueueLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_QueueLibrary *QueueLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _QueueLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_QueueLibrary *QueueLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _QueueLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_QueueLibrary *QueueLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _QueueLibrary.Contract.contract.Transact(opts, method, params...)
}

// RCertParserLibraryMetaData contains all meta data concerning the RCertParserLibrary contract.
var RCertParserLibraryMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200f25a31e1b4de4db4d64557692f5cf74dd7dfe3906f02eaf66172fd6126f81d664736f6c63430008060033",
}

// RCertParserLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use RCertParserLibraryMetaData.ABI instead.
var RCertParserLibraryABI = RCertParserLibraryMetaData.ABI

// RCertParserLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RCertParserLibraryMetaData.Bin instead.
var RCertParserLibraryBin = RCertParserLibraryMetaData.Bin

// DeployRCertParserLibrary deploys a new Ethereum contract, binding an instance of RCertParserLibrary to it.
func DeployRCertParserLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *RCertParserLibrary, error) {
	parsed, err := RCertParserLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RCertParserLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &RCertParserLibrary{RCertParserLibraryCaller: RCertParserLibraryCaller{contract: contract}, RCertParserLibraryTransactor: RCertParserLibraryTransactor{contract: contract}, RCertParserLibraryFilterer: RCertParserLibraryFilterer{contract: contract}}, nil
}

// RCertParserLibrary is an auto generated Go binding around an Ethereum contract.
type RCertParserLibrary struct {
	RCertParserLibraryCaller     // Read-only binding to the contract
	RCertParserLibraryTransactor // Write-only binding to the contract
	RCertParserLibraryFilterer   // Log filterer for contract events
}

// RCertParserLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type RCertParserLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RCertParserLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RCertParserLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RCertParserLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RCertParserLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RCertParserLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RCertParserLibrarySession struct {
	Contract     *RCertParserLibrary // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// RCertParserLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RCertParserLibraryCallerSession struct {
	Contract *RCertParserLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// RCertParserLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RCertParserLibraryTransactorSession struct {
	Contract     *RCertParserLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// RCertParserLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type RCertParserLibraryRaw struct {
	Contract *RCertParserLibrary // Generic contract binding to access the raw methods on
}

// RCertParserLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RCertParserLibraryCallerRaw struct {
	Contract *RCertParserLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// RCertParserLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RCertParserLibraryTransactorRaw struct {
	Contract *RCertParserLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRCertParserLibrary creates a new instance of RCertParserLibrary, bound to a specific deployed contract.
func NewRCertParserLibrary(address common.Address, backend bind.ContractBackend) (*RCertParserLibrary, error) {
	contract, err := bindRCertParserLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RCertParserLibrary{RCertParserLibraryCaller: RCertParserLibraryCaller{contract: contract}, RCertParserLibraryTransactor: RCertParserLibraryTransactor{contract: contract}, RCertParserLibraryFilterer: RCertParserLibraryFilterer{contract: contract}}, nil
}

// NewRCertParserLibraryCaller creates a new read-only instance of RCertParserLibrary, bound to a specific deployed contract.
func NewRCertParserLibraryCaller(address common.Address, caller bind.ContractCaller) (*RCertParserLibraryCaller, error) {
	contract, err := bindRCertParserLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RCertParserLibraryCaller{contract: contract}, nil
}

// NewRCertParserLibraryTransactor creates a new write-only instance of RCertParserLibrary, bound to a specific deployed contract.
func NewRCertParserLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*RCertParserLibraryTransactor, error) {
	contract, err := bindRCertParserLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RCertParserLibraryTransactor{contract: contract}, nil
}

// NewRCertParserLibraryFilterer creates a new log filterer instance of RCertParserLibrary, bound to a specific deployed contract.
func NewRCertParserLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*RCertParserLibraryFilterer, error) {
	contract, err := bindRCertParserLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RCertParserLibraryFilterer{contract: contract}, nil
}

// bindRCertParserLibrary binds a generic wrapper to an already deployed contract.
func bindRCertParserLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(RCertParserLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RCertParserLibrary *RCertParserLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RCertParserLibrary.Contract.RCertParserLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RCertParserLibrary *RCertParserLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RCertParserLibrary.Contract.RCertParserLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RCertParserLibrary *RCertParserLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RCertParserLibrary.Contract.RCertParserLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RCertParserLibrary *RCertParserLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RCertParserLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RCertParserLibrary *RCertParserLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RCertParserLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RCertParserLibrary *RCertParserLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RCertParserLibrary.Contract.contract.Transact(opts, method, params...)
}

// RClaimsParserLibraryMetaData contains all meta data concerning the RClaimsParserLibrary contract.
var RClaimsParserLibraryMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220331001cd338e2e4d4548749557b650e708f640131ef51154a3304f4e8aff149e64736f6c63430008060033",
}

// RClaimsParserLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use RClaimsParserLibraryMetaData.ABI instead.
var RClaimsParserLibraryABI = RClaimsParserLibraryMetaData.ABI

// RClaimsParserLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RClaimsParserLibraryMetaData.Bin instead.
var RClaimsParserLibraryBin = RClaimsParserLibraryMetaData.Bin

// DeployRClaimsParserLibrary deploys a new Ethereum contract, binding an instance of RClaimsParserLibrary to it.
func DeployRClaimsParserLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *RClaimsParserLibrary, error) {
	parsed, err := RClaimsParserLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RClaimsParserLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &RClaimsParserLibrary{RClaimsParserLibraryCaller: RClaimsParserLibraryCaller{contract: contract}, RClaimsParserLibraryTransactor: RClaimsParserLibraryTransactor{contract: contract}, RClaimsParserLibraryFilterer: RClaimsParserLibraryFilterer{contract: contract}}, nil
}

// RClaimsParserLibrary is an auto generated Go binding around an Ethereum contract.
type RClaimsParserLibrary struct {
	RClaimsParserLibraryCaller     // Read-only binding to the contract
	RClaimsParserLibraryTransactor // Write-only binding to the contract
	RClaimsParserLibraryFilterer   // Log filterer for contract events
}

// RClaimsParserLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type RClaimsParserLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RClaimsParserLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RClaimsParserLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RClaimsParserLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RClaimsParserLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RClaimsParserLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RClaimsParserLibrarySession struct {
	Contract     *RClaimsParserLibrary // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// RClaimsParserLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RClaimsParserLibraryCallerSession struct {
	Contract *RClaimsParserLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// RClaimsParserLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RClaimsParserLibraryTransactorSession struct {
	Contract     *RClaimsParserLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// RClaimsParserLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type RClaimsParserLibraryRaw struct {
	Contract *RClaimsParserLibrary // Generic contract binding to access the raw methods on
}

// RClaimsParserLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RClaimsParserLibraryCallerRaw struct {
	Contract *RClaimsParserLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// RClaimsParserLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RClaimsParserLibraryTransactorRaw struct {
	Contract *RClaimsParserLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRClaimsParserLibrary creates a new instance of RClaimsParserLibrary, bound to a specific deployed contract.
func NewRClaimsParserLibrary(address common.Address, backend bind.ContractBackend) (*RClaimsParserLibrary, error) {
	contract, err := bindRClaimsParserLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RClaimsParserLibrary{RClaimsParserLibraryCaller: RClaimsParserLibraryCaller{contract: contract}, RClaimsParserLibraryTransactor: RClaimsParserLibraryTransactor{contract: contract}, RClaimsParserLibraryFilterer: RClaimsParserLibraryFilterer{contract: contract}}, nil
}

// NewRClaimsParserLibraryCaller creates a new read-only instance of RClaimsParserLibrary, bound to a specific deployed contract.
func NewRClaimsParserLibraryCaller(address common.Address, caller bind.ContractCaller) (*RClaimsParserLibraryCaller, error) {
	contract, err := bindRClaimsParserLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RClaimsParserLibraryCaller{contract: contract}, nil
}

// NewRClaimsParserLibraryTransactor creates a new write-only instance of RClaimsParserLibrary, bound to a specific deployed contract.
func NewRClaimsParserLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*RClaimsParserLibraryTransactor, error) {
	contract, err := bindRClaimsParserLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RClaimsParserLibraryTransactor{contract: contract}, nil
}

// NewRClaimsParserLibraryFilterer creates a new log filterer instance of RClaimsParserLibrary, bound to a specific deployed contract.
func NewRClaimsParserLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*RClaimsParserLibraryFilterer, error) {
	contract, err := bindRClaimsParserLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RClaimsParserLibraryFilterer{contract: contract}, nil
}

// bindRClaimsParserLibrary binds a generic wrapper to an already deployed contract.
func bindRClaimsParserLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(RClaimsParserLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RClaimsParserLibrary *RClaimsParserLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RClaimsParserLibrary.Contract.RClaimsParserLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RClaimsParserLibrary *RClaimsParserLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RClaimsParserLibrary.Contract.RClaimsParserLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RClaimsParserLibrary *RClaimsParserLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RClaimsParserLibrary.Contract.RClaimsParserLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RClaimsParserLibrary *RClaimsParserLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RClaimsParserLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RClaimsParserLibrary *RClaimsParserLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RClaimsParserLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RClaimsParserLibrary *RClaimsParserLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RClaimsParserLibrary.Contract.contract.Transact(opts, method, params...)
}

// RegistryMetaData contains all meta data concerning the Registry contract.
var RegistryMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"lookup\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"remove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b5033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000086600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166200008c60201b60201c565b62000317565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806200013157506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b62000173576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200016a906200020e565b60405180910390fd5b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060016000815480929190620001df906200024b565b919050555050565b6000620001f660318362000230565b91506200020382620002c8565b604082019050919050565b600060208201905081810360008301526200022981620001e7565b9050919050565b600082825260208201905092915050565b6000819050919050565b6000620002588262000241565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156200028e576200028d62000299565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f46756e6374696f6e616c697479207265737472696374656420746f206175746860008201527f6f72697a6564206f70657261746f72732e000000000000000000000000000000602082015250565b610bca80620003276000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80631e59c5291461005c57806380599e4b14610078578063e348da1314610094578063f67187ac146100b0578063fad8b32a146100e0575b600080fd5b6100766004803603810190610071919061078f565b6100fc565b005b610092600480360381019061008d9190610746565b610240565b005b6100ae60048036038101906100a99190610719565b610367565b005b6100ca60048036038101906100c59190610746565b6104bc565b6040516100d79190610888565b60405180910390f35b6100fa60048036038101906100f59190610719565b610504565b005b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806101a057506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6101df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101d6906108c3565b60405180910390fd5b806003836040516101f09190610871565b908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806102e457506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610323576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031a906108c3565b60405180910390fd5b6003816040516103339190610871565b908152602001604051809103902060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061040b57506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b61044a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610441906108c3565b60405180910390fd5b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600160008154809291906104b490610a39565b919050555050565b60006003826040516104ce9190610871565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806105a857506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6105e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105de906108c3565b60405180910390fd5b600180541161062b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610622906108a3565b60405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff02191690556001600081548092919061068c906109de565b919050555050565b60006106a76106a284610908565b6108e3565b9050828152602081018484840111156106c3576106c2610ae5565b5b6106ce84828561099c565b509392505050565b6000813590506106e581610b7d565b92915050565b600082601f830112610700576106ff610ae0565b5b8135610710848260208601610694565b91505092915050565b60006020828403121561072f5761072e610aef565b5b600061073d848285016106d6565b91505092915050565b60006020828403121561075c5761075b610aef565b5b600082013567ffffffffffffffff81111561077a57610779610aea565b5b610786848285016106eb565b91505092915050565b600080604083850312156107a6576107a5610aef565b5b600083013567ffffffffffffffff8111156107c4576107c3610aea565b5b6107d0858286016106eb565b92505060206107e1858286016106d6565b9150509250929050565b6107f481610960565b82525050565b600061080582610939565b61080f8185610955565b935061081f8185602086016109ab565b80840191505092915050565b6000610838601a83610944565b915061084382610b05565b602082019050919050565b600061085b603183610944565b915061086682610b2e565b604082019050919050565b600061087d82846107fa565b915081905092915050565b600060208201905061089d60008301846107eb565b92915050565b600060208201905081810360008301526108bc8161082b565b9050919050565b600060208201905081810360008301526108dc8161084e565b9050919050565b60006108ed6108fe565b90506108f98282610a08565b919050565b6000604051905090565b600067ffffffffffffffff82111561092357610922610ab1565b5b61092c82610af4565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600061096b82610972565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156109c95780820151818401526020810190506109ae565b838111156109d8576000848401525b50505050565b60006109e982610992565b915060008214156109fd576109fc610a82565b5b600182039050919050565b610a1182610af4565b810181811067ffffffffffffffff82111715610a3057610a2f610ab1565b5b80604052505050565b6000610a4482610992565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610a7757610a76610a82565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f43616e27742072656d6f766520616c6c206f70657261746f7273000000000000600082015250565b7f46756e6374696f6e616c697479207265737472696374656420746f206175746860008201527f6f72697a6564206f70657261746f72732e000000000000000000000000000000602082015250565b610b8681610960565b8114610b9157600080fd5b5056fea264697066735822122039eff7c45d94240fa4ebf91ddcff7631e4abd8ccfc46680dace70bb8abe2efc264736f6c63430008060033",
}

// RegistryABI is the input ABI used to generate the binding from.
// Deprecated: Use RegistryMetaData.ABI instead.
var RegistryABI = RegistryMetaData.ABI

// RegistryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RegistryMetaData.Bin instead.
var RegistryBin = RegistryMetaData.Bin

// DeployRegistry deploys a new Ethereum contract, binding an instance of Registry to it.
func DeployRegistry(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Registry, error) {
	parsed, err := RegistryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RegistryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Registry{RegistryCaller: RegistryCaller{contract: contract}, RegistryTransactor: RegistryTransactor{contract: contract}, RegistryFilterer: RegistryFilterer{contract: contract}}, nil
}

// Registry is an auto generated Go binding around an Ethereum contract.
type Registry struct {
	RegistryCaller     // Read-only binding to the contract
	RegistryTransactor // Write-only binding to the contract
	RegistryFilterer   // Log filterer for contract events
}

// RegistryCaller is an auto generated read-only Go binding around an Ethereum contract.
type RegistryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RegistryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RegistryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistrySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RegistrySession struct {
	Contract     *Registry         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RegistryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RegistryCallerSession struct {
	Contract *RegistryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// RegistryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RegistryTransactorSession struct {
	Contract     *RegistryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// RegistryRaw is an auto generated low-level Go binding around an Ethereum contract.
type RegistryRaw struct {
	Contract *Registry // Generic contract binding to access the raw methods on
}

// RegistryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RegistryCallerRaw struct {
	Contract *RegistryCaller // Generic read-only contract binding to access the raw methods on
}

// RegistryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RegistryTransactorRaw struct {
	Contract *RegistryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRegistry creates a new instance of Registry, bound to a specific deployed contract.
func NewRegistry(address common.Address, backend bind.ContractBackend) (*Registry, error) {
	contract, err := bindRegistry(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Registry{RegistryCaller: RegistryCaller{contract: contract}, RegistryTransactor: RegistryTransactor{contract: contract}, RegistryFilterer: RegistryFilterer{contract: contract}}, nil
}

// NewRegistryCaller creates a new read-only instance of Registry, bound to a specific deployed contract.
func NewRegistryCaller(address common.Address, caller bind.ContractCaller) (*RegistryCaller, error) {
	contract, err := bindRegistry(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RegistryCaller{contract: contract}, nil
}

// NewRegistryTransactor creates a new write-only instance of Registry, bound to a specific deployed contract.
func NewRegistryTransactor(address common.Address, transactor bind.ContractTransactor) (*RegistryTransactor, error) {
	contract, err := bindRegistry(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RegistryTransactor{contract: contract}, nil
}

// NewRegistryFilterer creates a new log filterer instance of Registry, bound to a specific deployed contract.
func NewRegistryFilterer(address common.Address, filterer bind.ContractFilterer) (*RegistryFilterer, error) {
	contract, err := bindRegistry(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RegistryFilterer{contract: contract}, nil
}

// bindRegistry binds a generic wrapper to an already deployed contract.
func bindRegistry(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(RegistryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Registry *RegistryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Registry.Contract.RegistryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Registry *RegistryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Registry.Contract.RegistryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Registry *RegistryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Registry.Contract.RegistryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Registry *RegistryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Registry.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Registry *RegistryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Registry.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Registry *RegistryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Registry.Contract.contract.Transact(opts, method, params...)
}

// Lookup is a free data retrieval call binding the contract method 0xf67187ac.
//
// Solidity: function lookup(string name) view returns(address)
func (_Registry *RegistryCaller) Lookup(opts *bind.CallOpts, name string) (common.Address, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "lookup", name)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Lookup is a free data retrieval call binding the contract method 0xf67187ac.
//
// Solidity: function lookup(string name) view returns(address)
func (_Registry *RegistrySession) Lookup(name string) (common.Address, error) {
	return _Registry.Contract.Lookup(&_Registry.CallOpts, name)
}

// Lookup is a free data retrieval call binding the contract method 0xf67187ac.
//
// Solidity: function lookup(string name) view returns(address)
func (_Registry *RegistryCallerSession) Lookup(name string) (common.Address, error) {
	return _Registry.Contract.Lookup(&_Registry.CallOpts, name)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_Registry *RegistryTransactor) GrantOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "grantOperator", _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_Registry *RegistrySession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _Registry.Contract.GrantOperator(&_Registry.TransactOpts, _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_Registry *RegistryTransactorSession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _Registry.Contract.GrantOperator(&_Registry.TransactOpts, _operator)
}

// Register is a paid mutator transaction binding the contract method 0x1e59c529.
//
// Solidity: function register(string name, address dst) returns()
func (_Registry *RegistryTransactor) Register(opts *bind.TransactOpts, name string, dst common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "register", name, dst)
}

// Register is a paid mutator transaction binding the contract method 0x1e59c529.
//
// Solidity: function register(string name, address dst) returns()
func (_Registry *RegistrySession) Register(name string, dst common.Address) (*types.Transaction, error) {
	return _Registry.Contract.Register(&_Registry.TransactOpts, name, dst)
}

// Register is a paid mutator transaction binding the contract method 0x1e59c529.
//
// Solidity: function register(string name, address dst) returns()
func (_Registry *RegistryTransactorSession) Register(name string, dst common.Address) (*types.Transaction, error) {
	return _Registry.Contract.Register(&_Registry.TransactOpts, name, dst)
}

// Remove is a paid mutator transaction binding the contract method 0x80599e4b.
//
// Solidity: function remove(string name) returns()
func (_Registry *RegistryTransactor) Remove(opts *bind.TransactOpts, name string) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "remove", name)
}

// Remove is a paid mutator transaction binding the contract method 0x80599e4b.
//
// Solidity: function remove(string name) returns()
func (_Registry *RegistrySession) Remove(name string) (*types.Transaction, error) {
	return _Registry.Contract.Remove(&_Registry.TransactOpts, name)
}

// Remove is a paid mutator transaction binding the contract method 0x80599e4b.
//
// Solidity: function remove(string name) returns()
func (_Registry *RegistryTransactorSession) Remove(name string) (*types.Transaction, error) {
	return _Registry.Contract.Remove(&_Registry.TransactOpts, name)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_Registry *RegistryTransactor) RevokeOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "revokeOperator", _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_Registry *RegistrySession) RevokeOperator(_operator common.Address) (*types.Transaction, error) {
	return _Registry.Contract.RevokeOperator(&_Registry.TransactOpts, _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_Registry *RegistryTransactorSession) RevokeOperator(_operator common.Address) (*types.Transaction, error) {
	return _Registry.Contract.RevokeOperator(&_Registry.TransactOpts, _operator)
}

// RegistryClientMetaData contains all meta data concerning the RegistryClient contract.
var RegistryClientMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"reloadRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// RegistryClientABI is the input ABI used to generate the binding from.
// Deprecated: Use RegistryClientMetaData.ABI instead.
var RegistryClientABI = RegistryClientMetaData.ABI

// RegistryClient is an auto generated Go binding around an Ethereum contract.
type RegistryClient struct {
	RegistryClientCaller     // Read-only binding to the contract
	RegistryClientTransactor // Write-only binding to the contract
	RegistryClientFilterer   // Log filterer for contract events
}

// RegistryClientCaller is an auto generated read-only Go binding around an Ethereum contract.
type RegistryClientCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryClientTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RegistryClientTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryClientFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RegistryClientFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryClientSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RegistryClientSession struct {
	Contract     *RegistryClient   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RegistryClientCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RegistryClientCallerSession struct {
	Contract *RegistryClientCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// RegistryClientTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RegistryClientTransactorSession struct {
	Contract     *RegistryClientTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// RegistryClientRaw is an auto generated low-level Go binding around an Ethereum contract.
type RegistryClientRaw struct {
	Contract *RegistryClient // Generic contract binding to access the raw methods on
}

// RegistryClientCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RegistryClientCallerRaw struct {
	Contract *RegistryClientCaller // Generic read-only contract binding to access the raw methods on
}

// RegistryClientTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RegistryClientTransactorRaw struct {
	Contract *RegistryClientTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRegistryClient creates a new instance of RegistryClient, bound to a specific deployed contract.
func NewRegistryClient(address common.Address, backend bind.ContractBackend) (*RegistryClient, error) {
	contract, err := bindRegistryClient(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RegistryClient{RegistryClientCaller: RegistryClientCaller{contract: contract}, RegistryClientTransactor: RegistryClientTransactor{contract: contract}, RegistryClientFilterer: RegistryClientFilterer{contract: contract}}, nil
}

// NewRegistryClientCaller creates a new read-only instance of RegistryClient, bound to a specific deployed contract.
func NewRegistryClientCaller(address common.Address, caller bind.ContractCaller) (*RegistryClientCaller, error) {
	contract, err := bindRegistryClient(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RegistryClientCaller{contract: contract}, nil
}

// NewRegistryClientTransactor creates a new write-only instance of RegistryClient, bound to a specific deployed contract.
func NewRegistryClientTransactor(address common.Address, transactor bind.ContractTransactor) (*RegistryClientTransactor, error) {
	contract, err := bindRegistryClient(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RegistryClientTransactor{contract: contract}, nil
}

// NewRegistryClientFilterer creates a new log filterer instance of RegistryClient, bound to a specific deployed contract.
func NewRegistryClientFilterer(address common.Address, filterer bind.ContractFilterer) (*RegistryClientFilterer, error) {
	contract, err := bindRegistryClient(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RegistryClientFilterer{contract: contract}, nil
}

// bindRegistryClient binds a generic wrapper to an already deployed contract.
func bindRegistryClient(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(RegistryClientABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RegistryClient *RegistryClientRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RegistryClient.Contract.RegistryClientCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RegistryClient *RegistryClientRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryClient.Contract.RegistryClientTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RegistryClient *RegistryClientRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RegistryClient.Contract.RegistryClientTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RegistryClient *RegistryClientCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RegistryClient.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RegistryClient *RegistryClientTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryClient.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RegistryClient *RegistryClientTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RegistryClient.Contract.contract.Transact(opts, method, params...)
}

// ReloadRegistry is a paid mutator transaction binding the contract method 0x1476601d.
//
// Solidity: function reloadRegistry() returns()
func (_RegistryClient *RegistryClientTransactor) ReloadRegistry(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryClient.contract.Transact(opts, "reloadRegistry")
}

// ReloadRegistry is a paid mutator transaction binding the contract method 0x1476601d.
//
// Solidity: function reloadRegistry() returns()
func (_RegistryClient *RegistryClientSession) ReloadRegistry() (*types.Transaction, error) {
	return _RegistryClient.Contract.ReloadRegistry(&_RegistryClient.TransactOpts)
}

// ReloadRegistry is a paid mutator transaction binding the contract method 0x1476601d.
//
// Solidity: function reloadRegistry() returns()
func (_RegistryClient *RegistryClientTransactorSession) ReloadRegistry() (*types.Transaction, error) {
	return _RegistryClient.Contract.ReloadRegistry(&_RegistryClient.TransactOpts)
}

// SafeMathMetaData contains all meta data concerning the SafeMath contract.
var SafeMathMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220563aa4ec53c4e41a3f6f988b8a72b120cd3661c011cff7f9de7d65b795eed8db64736f6c63430008060033",
}

// SafeMathABI is the input ABI used to generate the binding from.
// Deprecated: Use SafeMathMetaData.ABI instead.
var SafeMathABI = SafeMathMetaData.ABI

// SafeMathBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SafeMathMetaData.Bin instead.
var SafeMathBin = SafeMathMetaData.Bin

// DeploySafeMath deploys a new Ethereum contract, binding an instance of SafeMath to it.
func DeploySafeMath(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *SafeMath, error) {
	parsed, err := SafeMathMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SafeMathBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SafeMath{SafeMathCaller: SafeMathCaller{contract: contract}, SafeMathTransactor: SafeMathTransactor{contract: contract}, SafeMathFilterer: SafeMathFilterer{contract: contract}}, nil
}

// SafeMath is an auto generated Go binding around an Ethereum contract.
type SafeMath struct {
	SafeMathCaller     // Read-only binding to the contract
	SafeMathTransactor // Write-only binding to the contract
	SafeMathFilterer   // Log filterer for contract events
}

// SafeMathCaller is an auto generated read-only Go binding around an Ethereum contract.
type SafeMathCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SafeMathTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SafeMathTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SafeMathFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SafeMathFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SafeMathSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SafeMathSession struct {
	Contract     *SafeMath         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SafeMathCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SafeMathCallerSession struct {
	Contract *SafeMathCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// SafeMathTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SafeMathTransactorSession struct {
	Contract     *SafeMathTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// SafeMathRaw is an auto generated low-level Go binding around an Ethereum contract.
type SafeMathRaw struct {
	Contract *SafeMath // Generic contract binding to access the raw methods on
}

// SafeMathCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SafeMathCallerRaw struct {
	Contract *SafeMathCaller // Generic read-only contract binding to access the raw methods on
}

// SafeMathTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SafeMathTransactorRaw struct {
	Contract *SafeMathTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSafeMath creates a new instance of SafeMath, bound to a specific deployed contract.
func NewSafeMath(address common.Address, backend bind.ContractBackend) (*SafeMath, error) {
	contract, err := bindSafeMath(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SafeMath{SafeMathCaller: SafeMathCaller{contract: contract}, SafeMathTransactor: SafeMathTransactor{contract: contract}, SafeMathFilterer: SafeMathFilterer{contract: contract}}, nil
}

// NewSafeMathCaller creates a new read-only instance of SafeMath, bound to a specific deployed contract.
func NewSafeMathCaller(address common.Address, caller bind.ContractCaller) (*SafeMathCaller, error) {
	contract, err := bindSafeMath(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SafeMathCaller{contract: contract}, nil
}

// NewSafeMathTransactor creates a new write-only instance of SafeMath, bound to a specific deployed contract.
func NewSafeMathTransactor(address common.Address, transactor bind.ContractTransactor) (*SafeMathTransactor, error) {
	contract, err := bindSafeMath(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SafeMathTransactor{contract: contract}, nil
}

// NewSafeMathFilterer creates a new log filterer instance of SafeMath, bound to a specific deployed contract.
func NewSafeMathFilterer(address common.Address, filterer bind.ContractFilterer) (*SafeMathFilterer, error) {
	contract, err := bindSafeMath(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SafeMathFilterer{contract: contract}, nil
}

// bindSafeMath binds a generic wrapper to an already deployed contract.
func bindSafeMath(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SafeMathABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SafeMath *SafeMathRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SafeMath.Contract.SafeMathCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SafeMath *SafeMathRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SafeMath.Contract.SafeMathTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SafeMath *SafeMathRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SafeMath.Contract.SafeMathTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SafeMath *SafeMathCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SafeMath.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SafeMath *SafeMathTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SafeMath.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SafeMath *SafeMathTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SafeMath.Contract.contract.Transact(opts, method, params...)
}

// SigmoidMetaData contains all meta data concerning the Sigmoid contract.
var SigmoidMetaData = &bind.MetaData{
	ABI: "[]",
}

// SigmoidABI is the input ABI used to generate the binding from.
// Deprecated: Use SigmoidMetaData.ABI instead.
var SigmoidABI = SigmoidMetaData.ABI

// Sigmoid is an auto generated Go binding around an Ethereum contract.
type Sigmoid struct {
	SigmoidCaller     // Read-only binding to the contract
	SigmoidTransactor // Write-only binding to the contract
	SigmoidFilterer   // Log filterer for contract events
}

// SigmoidCaller is an auto generated read-only Go binding around an Ethereum contract.
type SigmoidCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SigmoidTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SigmoidTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SigmoidFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SigmoidFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SigmoidSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SigmoidSession struct {
	Contract     *Sigmoid          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SigmoidCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SigmoidCallerSession struct {
	Contract *SigmoidCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// SigmoidTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SigmoidTransactorSession struct {
	Contract     *SigmoidTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// SigmoidRaw is an auto generated low-level Go binding around an Ethereum contract.
type SigmoidRaw struct {
	Contract *Sigmoid // Generic contract binding to access the raw methods on
}

// SigmoidCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SigmoidCallerRaw struct {
	Contract *SigmoidCaller // Generic read-only contract binding to access the raw methods on
}

// SigmoidTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SigmoidTransactorRaw struct {
	Contract *SigmoidTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSigmoid creates a new instance of Sigmoid, bound to a specific deployed contract.
func NewSigmoid(address common.Address, backend bind.ContractBackend) (*Sigmoid, error) {
	contract, err := bindSigmoid(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Sigmoid{SigmoidCaller: SigmoidCaller{contract: contract}, SigmoidTransactor: SigmoidTransactor{contract: contract}, SigmoidFilterer: SigmoidFilterer{contract: contract}}, nil
}

// NewSigmoidCaller creates a new read-only instance of Sigmoid, bound to a specific deployed contract.
func NewSigmoidCaller(address common.Address, caller bind.ContractCaller) (*SigmoidCaller, error) {
	contract, err := bindSigmoid(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SigmoidCaller{contract: contract}, nil
}

// NewSigmoidTransactor creates a new write-only instance of Sigmoid, bound to a specific deployed contract.
func NewSigmoidTransactor(address common.Address, transactor bind.ContractTransactor) (*SigmoidTransactor, error) {
	contract, err := bindSigmoid(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SigmoidTransactor{contract: contract}, nil
}

// NewSigmoidFilterer creates a new log filterer instance of Sigmoid, bound to a specific deployed contract.
func NewSigmoidFilterer(address common.Address, filterer bind.ContractFilterer) (*SigmoidFilterer, error) {
	contract, err := bindSigmoid(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SigmoidFilterer{contract: contract}, nil
}

// bindSigmoid binds a generic wrapper to an already deployed contract.
func bindSigmoid(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SigmoidABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Sigmoid *SigmoidRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Sigmoid.Contract.SigmoidCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Sigmoid *SigmoidRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Sigmoid.Contract.SigmoidTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Sigmoid *SigmoidRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Sigmoid.Contract.SigmoidTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Sigmoid *SigmoidCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Sigmoid.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Sigmoid *SigmoidTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Sigmoid.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Sigmoid *SigmoidTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Sigmoid.Contract.contract.Transact(opts, method, params...)
}

// SignatureLibraryMetaData contains all meta data concerning the SignatureLibrary contract.
var SignatureLibraryMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122000ce3eed6f465d872ba1a2dc423ce2356dbe1420268e4ba87c01e9d39156771364736f6c63430008060033",
}

// SignatureLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use SignatureLibraryMetaData.ABI instead.
var SignatureLibraryABI = SignatureLibraryMetaData.ABI

// SignatureLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SignatureLibraryMetaData.Bin instead.
var SignatureLibraryBin = SignatureLibraryMetaData.Bin

// DeploySignatureLibrary deploys a new Ethereum contract, binding an instance of SignatureLibrary to it.
func DeploySignatureLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *SignatureLibrary, error) {
	parsed, err := SignatureLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SignatureLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SignatureLibrary{SignatureLibraryCaller: SignatureLibraryCaller{contract: contract}, SignatureLibraryTransactor: SignatureLibraryTransactor{contract: contract}, SignatureLibraryFilterer: SignatureLibraryFilterer{contract: contract}}, nil
}

// SignatureLibrary is an auto generated Go binding around an Ethereum contract.
type SignatureLibrary struct {
	SignatureLibraryCaller     // Read-only binding to the contract
	SignatureLibraryTransactor // Write-only binding to the contract
	SignatureLibraryFilterer   // Log filterer for contract events
}

// SignatureLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type SignatureLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SignatureLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SignatureLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SignatureLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SignatureLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SignatureLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SignatureLibrarySession struct {
	Contract     *SignatureLibrary // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SignatureLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SignatureLibraryCallerSession struct {
	Contract *SignatureLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// SignatureLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SignatureLibraryTransactorSession struct {
	Contract     *SignatureLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// SignatureLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type SignatureLibraryRaw struct {
	Contract *SignatureLibrary // Generic contract binding to access the raw methods on
}

// SignatureLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SignatureLibraryCallerRaw struct {
	Contract *SignatureLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// SignatureLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SignatureLibraryTransactorRaw struct {
	Contract *SignatureLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSignatureLibrary creates a new instance of SignatureLibrary, bound to a specific deployed contract.
func NewSignatureLibrary(address common.Address, backend bind.ContractBackend) (*SignatureLibrary, error) {
	contract, err := bindSignatureLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SignatureLibrary{SignatureLibraryCaller: SignatureLibraryCaller{contract: contract}, SignatureLibraryTransactor: SignatureLibraryTransactor{contract: contract}, SignatureLibraryFilterer: SignatureLibraryFilterer{contract: contract}}, nil
}

// NewSignatureLibraryCaller creates a new read-only instance of SignatureLibrary, bound to a specific deployed contract.
func NewSignatureLibraryCaller(address common.Address, caller bind.ContractCaller) (*SignatureLibraryCaller, error) {
	contract, err := bindSignatureLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SignatureLibraryCaller{contract: contract}, nil
}

// NewSignatureLibraryTransactor creates a new write-only instance of SignatureLibrary, bound to a specific deployed contract.
func NewSignatureLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*SignatureLibraryTransactor, error) {
	contract, err := bindSignatureLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SignatureLibraryTransactor{contract: contract}, nil
}

// NewSignatureLibraryFilterer creates a new log filterer instance of SignatureLibrary, bound to a specific deployed contract.
func NewSignatureLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*SignatureLibraryFilterer, error) {
	contract, err := bindSignatureLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SignatureLibraryFilterer{contract: contract}, nil
}

// bindSignatureLibrary binds a generic wrapper to an already deployed contract.
func bindSignatureLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SignatureLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SignatureLibrary *SignatureLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SignatureLibrary.Contract.SignatureLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SignatureLibrary *SignatureLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SignatureLibrary.Contract.SignatureLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SignatureLibrary *SignatureLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SignatureLibrary.Contract.SignatureLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SignatureLibrary *SignatureLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SignatureLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SignatureLibrary *SignatureLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SignatureLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SignatureLibrary *SignatureLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SignatureLibrary.Contract.contract.Transact(opts, method, params...)
}

// SimpleAuthMetaData contains all meta data concerning the SimpleAuth contract.
var SimpleAuthMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b5033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610083600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661008860201b60201c565b610302565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061012c57506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b61016b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161016290610200565b60405180910390fd5b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600160008154809291906101d59061023b565b919050555050565b60006101ea603183610220565b91506101f5826102b3565b604082019050919050565b60006020820190508181036000830152610219816101dd565b9050919050565b600082825260208201905092915050565b6000819050919050565b600061024682610231565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561027957610278610284565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f46756e6374696f6e616c697479207265737472696374656420746f206175746860008201527f6f72697a6564206f70657261746f72732e000000000000000000000000000000602082015250565b6105d9806103116000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063e348da131461003b578063fad8b32a14610057575b600080fd5b6100556004803603810190610050919061036d565b610073565b005b610071600480360381019061006c919061036d565b6101c8565b005b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061011757506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610156576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161014d90610400565b60405180910390fd5b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600160008154809291906101c090610497565b919050555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061026c57506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6102ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102a290610400565b60405180910390fd5b60018054116102ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102e6906103e0565b60405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff0219169055600160008154809291906103509061046d565b919050555050565b6000813590506103678161058c565b92915050565b6000602082840312156103835761038261050f565b5b600061039184828501610358565b91505092915050565b60006103a7601a83610420565b91506103b282610514565b602082019050919050565b60006103ca603183610420565b91506103d58261053d565b604082019050919050565b600060208201905081810360008301526103f98161039a565b9050919050565b60006020820190508181036000830152610419816103bd565b9050919050565b600082825260208201905092915050565b600061043c82610443565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061047882610463565b9150600082141561048c5761048b6104e0565b5b600182039050919050565b60006104a282610463565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156104d5576104d46104e0565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600080fd5b7f43616e27742072656d6f766520616c6c206f70657261746f7273000000000000600082015250565b7f46756e6374696f6e616c697479207265737472696374656420746f206175746860008201527f6f72697a6564206f70657261746f72732e000000000000000000000000000000602082015250565b61059581610431565b81146105a057600080fd5b5056fea2646970667358221220b024d2a07e78e84f2614b46a4149dff8f0179283073a2366a4a56b42a59cdbaf64736f6c63430008060033",
}

// SimpleAuthABI is the input ABI used to generate the binding from.
// Deprecated: Use SimpleAuthMetaData.ABI instead.
var SimpleAuthABI = SimpleAuthMetaData.ABI

// SimpleAuthBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SimpleAuthMetaData.Bin instead.
var SimpleAuthBin = SimpleAuthMetaData.Bin

// DeploySimpleAuth deploys a new Ethereum contract, binding an instance of SimpleAuth to it.
func DeploySimpleAuth(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *SimpleAuth, error) {
	parsed, err := SimpleAuthMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SimpleAuthBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SimpleAuth{SimpleAuthCaller: SimpleAuthCaller{contract: contract}, SimpleAuthTransactor: SimpleAuthTransactor{contract: contract}, SimpleAuthFilterer: SimpleAuthFilterer{contract: contract}}, nil
}

// SimpleAuth is an auto generated Go binding around an Ethereum contract.
type SimpleAuth struct {
	SimpleAuthCaller     // Read-only binding to the contract
	SimpleAuthTransactor // Write-only binding to the contract
	SimpleAuthFilterer   // Log filterer for contract events
}

// SimpleAuthCaller is an auto generated read-only Go binding around an Ethereum contract.
type SimpleAuthCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimpleAuthTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SimpleAuthTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimpleAuthFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SimpleAuthFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimpleAuthSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SimpleAuthSession struct {
	Contract     *SimpleAuth       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SimpleAuthCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SimpleAuthCallerSession struct {
	Contract *SimpleAuthCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// SimpleAuthTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SimpleAuthTransactorSession struct {
	Contract     *SimpleAuthTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// SimpleAuthRaw is an auto generated low-level Go binding around an Ethereum contract.
type SimpleAuthRaw struct {
	Contract *SimpleAuth // Generic contract binding to access the raw methods on
}

// SimpleAuthCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SimpleAuthCallerRaw struct {
	Contract *SimpleAuthCaller // Generic read-only contract binding to access the raw methods on
}

// SimpleAuthTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SimpleAuthTransactorRaw struct {
	Contract *SimpleAuthTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSimpleAuth creates a new instance of SimpleAuth, bound to a specific deployed contract.
func NewSimpleAuth(address common.Address, backend bind.ContractBackend) (*SimpleAuth, error) {
	contract, err := bindSimpleAuth(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SimpleAuth{SimpleAuthCaller: SimpleAuthCaller{contract: contract}, SimpleAuthTransactor: SimpleAuthTransactor{contract: contract}, SimpleAuthFilterer: SimpleAuthFilterer{contract: contract}}, nil
}

// NewSimpleAuthCaller creates a new read-only instance of SimpleAuth, bound to a specific deployed contract.
func NewSimpleAuthCaller(address common.Address, caller bind.ContractCaller) (*SimpleAuthCaller, error) {
	contract, err := bindSimpleAuth(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SimpleAuthCaller{contract: contract}, nil
}

// NewSimpleAuthTransactor creates a new write-only instance of SimpleAuth, bound to a specific deployed contract.
func NewSimpleAuthTransactor(address common.Address, transactor bind.ContractTransactor) (*SimpleAuthTransactor, error) {
	contract, err := bindSimpleAuth(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SimpleAuthTransactor{contract: contract}, nil
}

// NewSimpleAuthFilterer creates a new log filterer instance of SimpleAuth, bound to a specific deployed contract.
func NewSimpleAuthFilterer(address common.Address, filterer bind.ContractFilterer) (*SimpleAuthFilterer, error) {
	contract, err := bindSimpleAuth(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SimpleAuthFilterer{contract: contract}, nil
}

// bindSimpleAuth binds a generic wrapper to an already deployed contract.
func bindSimpleAuth(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SimpleAuthABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SimpleAuth *SimpleAuthRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SimpleAuth.Contract.SimpleAuthCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SimpleAuth *SimpleAuthRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SimpleAuth.Contract.SimpleAuthTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SimpleAuth *SimpleAuthRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SimpleAuth.Contract.SimpleAuthTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SimpleAuth *SimpleAuthCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SimpleAuth.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SimpleAuth *SimpleAuthTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SimpleAuth.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SimpleAuth *SimpleAuthTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SimpleAuth.Contract.contract.Transact(opts, method, params...)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_SimpleAuth *SimpleAuthTransactor) GrantOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _SimpleAuth.contract.Transact(opts, "grantOperator", _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_SimpleAuth *SimpleAuthSession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _SimpleAuth.Contract.GrantOperator(&_SimpleAuth.TransactOpts, _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_SimpleAuth *SimpleAuthTransactorSession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _SimpleAuth.Contract.GrantOperator(&_SimpleAuth.TransactOpts, _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_SimpleAuth *SimpleAuthTransactor) RevokeOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _SimpleAuth.contract.Transact(opts, "revokeOperator", _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_SimpleAuth *SimpleAuthSession) RevokeOperator(_operator common.Address) (*types.Transaction, error) {
	return _SimpleAuth.Contract.RevokeOperator(&_SimpleAuth.TransactOpts, _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_SimpleAuth *SimpleAuthTransactorSession) RevokeOperator(_operator common.Address) (*types.Transaction, error) {
	return _SimpleAuth.Contract.RevokeOperator(&_SimpleAuth.TransactOpts, _operator)
}

// SnapshotsMetaData contains all meta data concerning the Snapshots contract.
var SnapshotsMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"chainId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"height\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"startingETHDKG\",\"type\":\"bool\"}],\"name\":\"SnapshotTaken\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"src\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"extractUint256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"src\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"extractUint32\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"val\",\"type\":\"uint32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotNumber\",\"type\":\"uint256\"}],\"name\":\"getChainIdFromSnapshot\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotNumber\",\"type\":\"uint256\"}],\"name\":\"getHeightFromSnapshot\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotNumber\",\"type\":\"uint256\"}],\"name\":\"getMadHeightFromSnapshot\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotNumber\",\"type\":\"uint256\"}],\"name\":\"getRawBlockClaimsSnapshot\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotNumber\",\"type\":\"uint256\"}],\"name\":\"getRawSignatureSnapshot\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractRegistry\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"initializeSnapshots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minEthSnapshotSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minMadSnapshotSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_signatureGroup\",\"type\":\"bytes\"}],\"name\":\"parseSignatureGroup\",\"outputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"publicKey\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256[2]\",\"name\":\"signature\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"orig\",\"type\":\"bytes\"}],\"name\":\"reverse\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"reversed\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ns\",\"type\":\"uint256\"}],\"name\":\"setEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minSize\",\"type\":\"uint256\"}],\"name\":\"setMinEthSnapshotSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minSize\",\"type\":\"uint256\"}],\"name\":\"setMinMadSnapshotSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minSize\",\"type\":\"uint256\"}],\"name\":\"setSnapshotDesperationDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minSize\",\"type\":\"uint256\"}],\"name\":\"setSnapshotDesperationFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_signatureGroup\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_bclaims\",\"type\":\"bytes\"}],\"name\":\"snapshot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"snapshotDesperationDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"snapshotDesperationFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// SnapshotsABI is the input ABI used to generate the binding from.
// Deprecated: Use SnapshotsMetaData.ABI instead.
var SnapshotsABI = SnapshotsMetaData.ABI

// Snapshots is an auto generated Go binding around an Ethereum contract.
type Snapshots struct {
	SnapshotsCaller     // Read-only binding to the contract
	SnapshotsTransactor // Write-only binding to the contract
	SnapshotsFilterer   // Log filterer for contract events
}

// SnapshotsCaller is an auto generated read-only Go binding around an Ethereum contract.
type SnapshotsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SnapshotsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SnapshotsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SnapshotsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SnapshotsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SnapshotsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SnapshotsSession struct {
	Contract     *Snapshots        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SnapshotsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SnapshotsCallerSession struct {
	Contract *SnapshotsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// SnapshotsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SnapshotsTransactorSession struct {
	Contract     *SnapshotsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// SnapshotsRaw is an auto generated low-level Go binding around an Ethereum contract.
type SnapshotsRaw struct {
	Contract *Snapshots // Generic contract binding to access the raw methods on
}

// SnapshotsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SnapshotsCallerRaw struct {
	Contract *SnapshotsCaller // Generic read-only contract binding to access the raw methods on
}

// SnapshotsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SnapshotsTransactorRaw struct {
	Contract *SnapshotsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSnapshots creates a new instance of Snapshots, bound to a specific deployed contract.
func NewSnapshots(address common.Address, backend bind.ContractBackend) (*Snapshots, error) {
	contract, err := bindSnapshots(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Snapshots{SnapshotsCaller: SnapshotsCaller{contract: contract}, SnapshotsTransactor: SnapshotsTransactor{contract: contract}, SnapshotsFilterer: SnapshotsFilterer{contract: contract}}, nil
}

// NewSnapshotsCaller creates a new read-only instance of Snapshots, bound to a specific deployed contract.
func NewSnapshotsCaller(address common.Address, caller bind.ContractCaller) (*SnapshotsCaller, error) {
	contract, err := bindSnapshots(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SnapshotsCaller{contract: contract}, nil
}

// NewSnapshotsTransactor creates a new write-only instance of Snapshots, bound to a specific deployed contract.
func NewSnapshotsTransactor(address common.Address, transactor bind.ContractTransactor) (*SnapshotsTransactor, error) {
	contract, err := bindSnapshots(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SnapshotsTransactor{contract: contract}, nil
}

// NewSnapshotsFilterer creates a new log filterer instance of Snapshots, bound to a specific deployed contract.
func NewSnapshotsFilterer(address common.Address, filterer bind.ContractFilterer) (*SnapshotsFilterer, error) {
	contract, err := bindSnapshots(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SnapshotsFilterer{contract: contract}, nil
}

// bindSnapshots binds a generic wrapper to an already deployed contract.
func bindSnapshots(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SnapshotsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Snapshots *SnapshotsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Snapshots.Contract.SnapshotsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Snapshots *SnapshotsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Snapshots.Contract.SnapshotsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Snapshots *SnapshotsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Snapshots.Contract.SnapshotsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Snapshots *SnapshotsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Snapshots.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Snapshots *SnapshotsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Snapshots.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Snapshots *SnapshotsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Snapshots.Contract.contract.Transact(opts, method, params...)
}

// Epoch is a free data retrieval call binding the contract method 0x900cf0cf.
//
// Solidity: function epoch() view returns(uint256)
func (_Snapshots *SnapshotsCaller) Epoch(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Snapshots.contract.Call(opts, &out, "epoch")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Epoch is a free data retrieval call binding the contract method 0x900cf0cf.
//
// Solidity: function epoch() view returns(uint256)
func (_Snapshots *SnapshotsSession) Epoch() (*big.Int, error) {
	return _Snapshots.Contract.Epoch(&_Snapshots.CallOpts)
}

// Epoch is a free data retrieval call binding the contract method 0x900cf0cf.
//
// Solidity: function epoch() view returns(uint256)
func (_Snapshots *SnapshotsCallerSession) Epoch() (*big.Int, error) {
	return _Snapshots.Contract.Epoch(&_Snapshots.CallOpts)
}

// ExtractUint256 is a free data retrieval call binding the contract method 0x1c8c8ba4.
//
// Solidity: function extractUint256(bytes src, uint256 offset) pure returns(uint256 val)
func (_Snapshots *SnapshotsCaller) ExtractUint256(opts *bind.CallOpts, src []byte, offset *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Snapshots.contract.Call(opts, &out, "extractUint256", src, offset)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ExtractUint256 is a free data retrieval call binding the contract method 0x1c8c8ba4.
//
// Solidity: function extractUint256(bytes src, uint256 offset) pure returns(uint256 val)
func (_Snapshots *SnapshotsSession) ExtractUint256(src []byte, offset *big.Int) (*big.Int, error) {
	return _Snapshots.Contract.ExtractUint256(&_Snapshots.CallOpts, src, offset)
}

// ExtractUint256 is a free data retrieval call binding the contract method 0x1c8c8ba4.
//
// Solidity: function extractUint256(bytes src, uint256 offset) pure returns(uint256 val)
func (_Snapshots *SnapshotsCallerSession) ExtractUint256(src []byte, offset *big.Int) (*big.Int, error) {
	return _Snapshots.Contract.ExtractUint256(&_Snapshots.CallOpts, src, offset)
}

// ExtractUint32 is a free data retrieval call binding the contract method 0xc1312f4d.
//
// Solidity: function extractUint32(bytes src, uint256 idx) pure returns(uint32 val)
func (_Snapshots *SnapshotsCaller) ExtractUint32(opts *bind.CallOpts, src []byte, idx *big.Int) (uint32, error) {
	var out []interface{}
	err := _Snapshots.contract.Call(opts, &out, "extractUint32", src, idx)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// ExtractUint32 is a free data retrieval call binding the contract method 0xc1312f4d.
//
// Solidity: function extractUint32(bytes src, uint256 idx) pure returns(uint32 val)
func (_Snapshots *SnapshotsSession) ExtractUint32(src []byte, idx *big.Int) (uint32, error) {
	return _Snapshots.Contract.ExtractUint32(&_Snapshots.CallOpts, src, idx)
}

// ExtractUint32 is a free data retrieval call binding the contract method 0xc1312f4d.
//
// Solidity: function extractUint32(bytes src, uint256 idx) pure returns(uint32 val)
func (_Snapshots *SnapshotsCallerSession) ExtractUint32(src []byte, idx *big.Int) (uint32, error) {
	return _Snapshots.Contract.ExtractUint32(&_Snapshots.CallOpts, src, idx)
}

// GetChainIdFromSnapshot is a free data retrieval call binding the contract method 0x19f74669.
//
// Solidity: function getChainIdFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_Snapshots *SnapshotsCaller) GetChainIdFromSnapshot(opts *bind.CallOpts, snapshotNumber *big.Int) (uint32, error) {
	var out []interface{}
	err := _Snapshots.contract.Call(opts, &out, "getChainIdFromSnapshot", snapshotNumber)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// GetChainIdFromSnapshot is a free data retrieval call binding the contract method 0x19f74669.
//
// Solidity: function getChainIdFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_Snapshots *SnapshotsSession) GetChainIdFromSnapshot(snapshotNumber *big.Int) (uint32, error) {
	return _Snapshots.Contract.GetChainIdFromSnapshot(&_Snapshots.CallOpts, snapshotNumber)
}

// GetChainIdFromSnapshot is a free data retrieval call binding the contract method 0x19f74669.
//
// Solidity: function getChainIdFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_Snapshots *SnapshotsCallerSession) GetChainIdFromSnapshot(snapshotNumber *big.Int) (uint32, error) {
	return _Snapshots.Contract.GetChainIdFromSnapshot(&_Snapshots.CallOpts, snapshotNumber)
}

// GetHeightFromSnapshot is a free data retrieval call binding the contract method 0xe380b228.
//
// Solidity: function getHeightFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_Snapshots *SnapshotsCaller) GetHeightFromSnapshot(opts *bind.CallOpts, snapshotNumber *big.Int) (uint32, error) {
	var out []interface{}
	err := _Snapshots.contract.Call(opts, &out, "getHeightFromSnapshot", snapshotNumber)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// GetHeightFromSnapshot is a free data retrieval call binding the contract method 0xe380b228.
//
// Solidity: function getHeightFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_Snapshots *SnapshotsSession) GetHeightFromSnapshot(snapshotNumber *big.Int) (uint32, error) {
	return _Snapshots.Contract.GetHeightFromSnapshot(&_Snapshots.CallOpts, snapshotNumber)
}

// GetHeightFromSnapshot is a free data retrieval call binding the contract method 0xe380b228.
//
// Solidity: function getHeightFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_Snapshots *SnapshotsCallerSession) GetHeightFromSnapshot(snapshotNumber *big.Int) (uint32, error) {
	return _Snapshots.Contract.GetHeightFromSnapshot(&_Snapshots.CallOpts, snapshotNumber)
}

// GetMadHeightFromSnapshot is a free data retrieval call binding the contract method 0x4f4ea614.
//
// Solidity: function getMadHeightFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_Snapshots *SnapshotsCaller) GetMadHeightFromSnapshot(opts *bind.CallOpts, snapshotNumber *big.Int) (uint32, error) {
	var out []interface{}
	err := _Snapshots.contract.Call(opts, &out, "getMadHeightFromSnapshot", snapshotNumber)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// GetMadHeightFromSnapshot is a free data retrieval call binding the contract method 0x4f4ea614.
//
// Solidity: function getMadHeightFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_Snapshots *SnapshotsSession) GetMadHeightFromSnapshot(snapshotNumber *big.Int) (uint32, error) {
	return _Snapshots.Contract.GetMadHeightFromSnapshot(&_Snapshots.CallOpts, snapshotNumber)
}

// GetMadHeightFromSnapshot is a free data retrieval call binding the contract method 0x4f4ea614.
//
// Solidity: function getMadHeightFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_Snapshots *SnapshotsCallerSession) GetMadHeightFromSnapshot(snapshotNumber *big.Int) (uint32, error) {
	return _Snapshots.Contract.GetMadHeightFromSnapshot(&_Snapshots.CallOpts, snapshotNumber)
}

// GetRawBlockClaimsSnapshot is a free data retrieval call binding the contract method 0x6372fe51.
//
// Solidity: function getRawBlockClaimsSnapshot(uint256 snapshotNumber) view returns(bytes)
func (_Snapshots *SnapshotsCaller) GetRawBlockClaimsSnapshot(opts *bind.CallOpts, snapshotNumber *big.Int) ([]byte, error) {
	var out []interface{}
	err := _Snapshots.contract.Call(opts, &out, "getRawBlockClaimsSnapshot", snapshotNumber)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// GetRawBlockClaimsSnapshot is a free data retrieval call binding the contract method 0x6372fe51.
//
// Solidity: function getRawBlockClaimsSnapshot(uint256 snapshotNumber) view returns(bytes)
func (_Snapshots *SnapshotsSession) GetRawBlockClaimsSnapshot(snapshotNumber *big.Int) ([]byte, error) {
	return _Snapshots.Contract.GetRawBlockClaimsSnapshot(&_Snapshots.CallOpts, snapshotNumber)
}

// GetRawBlockClaimsSnapshot is a free data retrieval call binding the contract method 0x6372fe51.
//
// Solidity: function getRawBlockClaimsSnapshot(uint256 snapshotNumber) view returns(bytes)
func (_Snapshots *SnapshotsCallerSession) GetRawBlockClaimsSnapshot(snapshotNumber *big.Int) ([]byte, error) {
	return _Snapshots.Contract.GetRawBlockClaimsSnapshot(&_Snapshots.CallOpts, snapshotNumber)
}

// GetRawSignatureSnapshot is a free data retrieval call binding the contract method 0x35b6c632.
//
// Solidity: function getRawSignatureSnapshot(uint256 snapshotNumber) view returns(bytes)
func (_Snapshots *SnapshotsCaller) GetRawSignatureSnapshot(opts *bind.CallOpts, snapshotNumber *big.Int) ([]byte, error) {
	var out []interface{}
	err := _Snapshots.contract.Call(opts, &out, "getRawSignatureSnapshot", snapshotNumber)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// GetRawSignatureSnapshot is a free data retrieval call binding the contract method 0x35b6c632.
//
// Solidity: function getRawSignatureSnapshot(uint256 snapshotNumber) view returns(bytes)
func (_Snapshots *SnapshotsSession) GetRawSignatureSnapshot(snapshotNumber *big.Int) ([]byte, error) {
	return _Snapshots.Contract.GetRawSignatureSnapshot(&_Snapshots.CallOpts, snapshotNumber)
}

// GetRawSignatureSnapshot is a free data retrieval call binding the contract method 0x35b6c632.
//
// Solidity: function getRawSignatureSnapshot(uint256 snapshotNumber) view returns(bytes)
func (_Snapshots *SnapshotsCallerSession) GetRawSignatureSnapshot(snapshotNumber *big.Int) ([]byte, error) {
	return _Snapshots.Contract.GetRawSignatureSnapshot(&_Snapshots.CallOpts, snapshotNumber)
}

// MinEthSnapshotSize is a free data retrieval call binding the contract method 0xe4b82105.
//
// Solidity: function minEthSnapshotSize() view returns(uint256)
func (_Snapshots *SnapshotsCaller) MinEthSnapshotSize(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Snapshots.contract.Call(opts, &out, "minEthSnapshotSize")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinEthSnapshotSize is a free data retrieval call binding the contract method 0xe4b82105.
//
// Solidity: function minEthSnapshotSize() view returns(uint256)
func (_Snapshots *SnapshotsSession) MinEthSnapshotSize() (*big.Int, error) {
	return _Snapshots.Contract.MinEthSnapshotSize(&_Snapshots.CallOpts)
}

// MinEthSnapshotSize is a free data retrieval call binding the contract method 0xe4b82105.
//
// Solidity: function minEthSnapshotSize() view returns(uint256)
func (_Snapshots *SnapshotsCallerSession) MinEthSnapshotSize() (*big.Int, error) {
	return _Snapshots.Contract.MinEthSnapshotSize(&_Snapshots.CallOpts)
}

// MinMadSnapshotSize is a free data retrieval call binding the contract method 0xc17cb9ee.
//
// Solidity: function minMadSnapshotSize() view returns(uint256)
func (_Snapshots *SnapshotsCaller) MinMadSnapshotSize(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Snapshots.contract.Call(opts, &out, "minMadSnapshotSize")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinMadSnapshotSize is a free data retrieval call binding the contract method 0xc17cb9ee.
//
// Solidity: function minMadSnapshotSize() view returns(uint256)
func (_Snapshots *SnapshotsSession) MinMadSnapshotSize() (*big.Int, error) {
	return _Snapshots.Contract.MinMadSnapshotSize(&_Snapshots.CallOpts)
}

// MinMadSnapshotSize is a free data retrieval call binding the contract method 0xc17cb9ee.
//
// Solidity: function minMadSnapshotSize() view returns(uint256)
func (_Snapshots *SnapshotsCallerSession) MinMadSnapshotSize() (*big.Int, error) {
	return _Snapshots.Contract.MinMadSnapshotSize(&_Snapshots.CallOpts)
}

// ParseSignatureGroup is a free data retrieval call binding the contract method 0x9be2f2df.
//
// Solidity: function parseSignatureGroup(bytes _signatureGroup) pure returns(uint256[4] publicKey, uint256[2] signature)
func (_Snapshots *SnapshotsCaller) ParseSignatureGroup(opts *bind.CallOpts, _signatureGroup []byte) (struct {
	PublicKey [4]*big.Int
	Signature [2]*big.Int
}, error) {
	var out []interface{}
	err := _Snapshots.contract.Call(opts, &out, "parseSignatureGroup", _signatureGroup)

	outstruct := new(struct {
		PublicKey [4]*big.Int
		Signature [2]*big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.PublicKey = *abi.ConvertType(out[0], new([4]*big.Int)).(*[4]*big.Int)
	outstruct.Signature = *abi.ConvertType(out[1], new([2]*big.Int)).(*[2]*big.Int)

	return *outstruct, err

}

// ParseSignatureGroup is a free data retrieval call binding the contract method 0x9be2f2df.
//
// Solidity: function parseSignatureGroup(bytes _signatureGroup) pure returns(uint256[4] publicKey, uint256[2] signature)
func (_Snapshots *SnapshotsSession) ParseSignatureGroup(_signatureGroup []byte) (struct {
	PublicKey [4]*big.Int
	Signature [2]*big.Int
}, error) {
	return _Snapshots.Contract.ParseSignatureGroup(&_Snapshots.CallOpts, _signatureGroup)
}

// ParseSignatureGroup is a free data retrieval call binding the contract method 0x9be2f2df.
//
// Solidity: function parseSignatureGroup(bytes _signatureGroup) pure returns(uint256[4] publicKey, uint256[2] signature)
func (_Snapshots *SnapshotsCallerSession) ParseSignatureGroup(_signatureGroup []byte) (struct {
	PublicKey [4]*big.Int
	Signature [2]*big.Int
}, error) {
	return _Snapshots.Contract.ParseSignatureGroup(&_Snapshots.CallOpts, _signatureGroup)
}

// Reverse is a free data retrieval call binding the contract method 0xec11c823.
//
// Solidity: function reverse(bytes orig) pure returns(bytes reversed)
func (_Snapshots *SnapshotsCaller) Reverse(opts *bind.CallOpts, orig []byte) ([]byte, error) {
	var out []interface{}
	err := _Snapshots.contract.Call(opts, &out, "reverse", orig)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// Reverse is a free data retrieval call binding the contract method 0xec11c823.
//
// Solidity: function reverse(bytes orig) pure returns(bytes reversed)
func (_Snapshots *SnapshotsSession) Reverse(orig []byte) ([]byte, error) {
	return _Snapshots.Contract.Reverse(&_Snapshots.CallOpts, orig)
}

// Reverse is a free data retrieval call binding the contract method 0xec11c823.
//
// Solidity: function reverse(bytes orig) pure returns(bytes reversed)
func (_Snapshots *SnapshotsCallerSession) Reverse(orig []byte) ([]byte, error) {
	return _Snapshots.Contract.Reverse(&_Snapshots.CallOpts, orig)
}

// SnapshotDesperationDelay is a free data retrieval call binding the contract method 0x6b797156.
//
// Solidity: function snapshotDesperationDelay() view returns(uint256)
func (_Snapshots *SnapshotsCaller) SnapshotDesperationDelay(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Snapshots.contract.Call(opts, &out, "snapshotDesperationDelay")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SnapshotDesperationDelay is a free data retrieval call binding the contract method 0x6b797156.
//
// Solidity: function snapshotDesperationDelay() view returns(uint256)
func (_Snapshots *SnapshotsSession) SnapshotDesperationDelay() (*big.Int, error) {
	return _Snapshots.Contract.SnapshotDesperationDelay(&_Snapshots.CallOpts)
}

// SnapshotDesperationDelay is a free data retrieval call binding the contract method 0x6b797156.
//
// Solidity: function snapshotDesperationDelay() view returns(uint256)
func (_Snapshots *SnapshotsCallerSession) SnapshotDesperationDelay() (*big.Int, error) {
	return _Snapshots.Contract.SnapshotDesperationDelay(&_Snapshots.CallOpts)
}

// SnapshotDesperationFactor is a free data retrieval call binding the contract method 0xfcf96652.
//
// Solidity: function snapshotDesperationFactor() view returns(uint256)
func (_Snapshots *SnapshotsCaller) SnapshotDesperationFactor(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Snapshots.contract.Call(opts, &out, "snapshotDesperationFactor")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SnapshotDesperationFactor is a free data retrieval call binding the contract method 0xfcf96652.
//
// Solidity: function snapshotDesperationFactor() view returns(uint256)
func (_Snapshots *SnapshotsSession) SnapshotDesperationFactor() (*big.Int, error) {
	return _Snapshots.Contract.SnapshotDesperationFactor(&_Snapshots.CallOpts)
}

// SnapshotDesperationFactor is a free data retrieval call binding the contract method 0xfcf96652.
//
// Solidity: function snapshotDesperationFactor() view returns(uint256)
func (_Snapshots *SnapshotsCallerSession) SnapshotDesperationFactor() (*big.Int, error) {
	return _Snapshots.Contract.SnapshotDesperationFactor(&_Snapshots.CallOpts)
}

// InitializeSnapshots is a paid mutator transaction binding the contract method 0x20d9a246.
//
// Solidity: function initializeSnapshots(address registry) returns()
func (_Snapshots *SnapshotsTransactor) InitializeSnapshots(opts *bind.TransactOpts, registry common.Address) (*types.Transaction, error) {
	return _Snapshots.contract.Transact(opts, "initializeSnapshots", registry)
}

// InitializeSnapshots is a paid mutator transaction binding the contract method 0x20d9a246.
//
// Solidity: function initializeSnapshots(address registry) returns()
func (_Snapshots *SnapshotsSession) InitializeSnapshots(registry common.Address) (*types.Transaction, error) {
	return _Snapshots.Contract.InitializeSnapshots(&_Snapshots.TransactOpts, registry)
}

// InitializeSnapshots is a paid mutator transaction binding the contract method 0x20d9a246.
//
// Solidity: function initializeSnapshots(address registry) returns()
func (_Snapshots *SnapshotsTransactorSession) InitializeSnapshots(registry common.Address) (*types.Transaction, error) {
	return _Snapshots.Contract.InitializeSnapshots(&_Snapshots.TransactOpts, registry)
}

// SetEpoch is a paid mutator transaction binding the contract method 0x0ceb2cef.
//
// Solidity: function setEpoch(uint256 ns) returns()
func (_Snapshots *SnapshotsTransactor) SetEpoch(opts *bind.TransactOpts, ns *big.Int) (*types.Transaction, error) {
	return _Snapshots.contract.Transact(opts, "setEpoch", ns)
}

// SetEpoch is a paid mutator transaction binding the contract method 0x0ceb2cef.
//
// Solidity: function setEpoch(uint256 ns) returns()
func (_Snapshots *SnapshotsSession) SetEpoch(ns *big.Int) (*types.Transaction, error) {
	return _Snapshots.Contract.SetEpoch(&_Snapshots.TransactOpts, ns)
}

// SetEpoch is a paid mutator transaction binding the contract method 0x0ceb2cef.
//
// Solidity: function setEpoch(uint256 ns) returns()
func (_Snapshots *SnapshotsTransactorSession) SetEpoch(ns *big.Int) (*types.Transaction, error) {
	return _Snapshots.Contract.SetEpoch(&_Snapshots.TransactOpts, ns)
}

// SetMinEthSnapshotSize is a paid mutator transaction binding the contract method 0x0d81dce4.
//
// Solidity: function setMinEthSnapshotSize(uint256 _minSize) returns()
func (_Snapshots *SnapshotsTransactor) SetMinEthSnapshotSize(opts *bind.TransactOpts, _minSize *big.Int) (*types.Transaction, error) {
	return _Snapshots.contract.Transact(opts, "setMinEthSnapshotSize", _minSize)
}

// SetMinEthSnapshotSize is a paid mutator transaction binding the contract method 0x0d81dce4.
//
// Solidity: function setMinEthSnapshotSize(uint256 _minSize) returns()
func (_Snapshots *SnapshotsSession) SetMinEthSnapshotSize(_minSize *big.Int) (*types.Transaction, error) {
	return _Snapshots.Contract.SetMinEthSnapshotSize(&_Snapshots.TransactOpts, _minSize)
}

// SetMinEthSnapshotSize is a paid mutator transaction binding the contract method 0x0d81dce4.
//
// Solidity: function setMinEthSnapshotSize(uint256 _minSize) returns()
func (_Snapshots *SnapshotsTransactorSession) SetMinEthSnapshotSize(_minSize *big.Int) (*types.Transaction, error) {
	return _Snapshots.Contract.SetMinEthSnapshotSize(&_Snapshots.TransactOpts, _minSize)
}

// SetMinMadSnapshotSize is a paid mutator transaction binding the contract method 0x99e33e3d.
//
// Solidity: function setMinMadSnapshotSize(uint256 _minSize) returns()
func (_Snapshots *SnapshotsTransactor) SetMinMadSnapshotSize(opts *bind.TransactOpts, _minSize *big.Int) (*types.Transaction, error) {
	return _Snapshots.contract.Transact(opts, "setMinMadSnapshotSize", _minSize)
}

// SetMinMadSnapshotSize is a paid mutator transaction binding the contract method 0x99e33e3d.
//
// Solidity: function setMinMadSnapshotSize(uint256 _minSize) returns()
func (_Snapshots *SnapshotsSession) SetMinMadSnapshotSize(_minSize *big.Int) (*types.Transaction, error) {
	return _Snapshots.Contract.SetMinMadSnapshotSize(&_Snapshots.TransactOpts, _minSize)
}

// SetMinMadSnapshotSize is a paid mutator transaction binding the contract method 0x99e33e3d.
//
// Solidity: function setMinMadSnapshotSize(uint256 _minSize) returns()
func (_Snapshots *SnapshotsTransactorSession) SetMinMadSnapshotSize(_minSize *big.Int) (*types.Transaction, error) {
	return _Snapshots.Contract.SetMinMadSnapshotSize(&_Snapshots.TransactOpts, _minSize)
}

// SetSnapshotDesperationDelay is a paid mutator transaction binding the contract method 0xde8fa4a5.
//
// Solidity: function setSnapshotDesperationDelay(uint256 _minSize) returns()
func (_Snapshots *SnapshotsTransactor) SetSnapshotDesperationDelay(opts *bind.TransactOpts, _minSize *big.Int) (*types.Transaction, error) {
	return _Snapshots.contract.Transact(opts, "setSnapshotDesperationDelay", _minSize)
}

// SetSnapshotDesperationDelay is a paid mutator transaction binding the contract method 0xde8fa4a5.
//
// Solidity: function setSnapshotDesperationDelay(uint256 _minSize) returns()
func (_Snapshots *SnapshotsSession) SetSnapshotDesperationDelay(_minSize *big.Int) (*types.Transaction, error) {
	return _Snapshots.Contract.SetSnapshotDesperationDelay(&_Snapshots.TransactOpts, _minSize)
}

// SetSnapshotDesperationDelay is a paid mutator transaction binding the contract method 0xde8fa4a5.
//
// Solidity: function setSnapshotDesperationDelay(uint256 _minSize) returns()
func (_Snapshots *SnapshotsTransactorSession) SetSnapshotDesperationDelay(_minSize *big.Int) (*types.Transaction, error) {
	return _Snapshots.Contract.SetSnapshotDesperationDelay(&_Snapshots.TransactOpts, _minSize)
}

// SetSnapshotDesperationFactor is a paid mutator transaction binding the contract method 0xeb157064.
//
// Solidity: function setSnapshotDesperationFactor(uint256 _minSize) returns()
func (_Snapshots *SnapshotsTransactor) SetSnapshotDesperationFactor(opts *bind.TransactOpts, _minSize *big.Int) (*types.Transaction, error) {
	return _Snapshots.contract.Transact(opts, "setSnapshotDesperationFactor", _minSize)
}

// SetSnapshotDesperationFactor is a paid mutator transaction binding the contract method 0xeb157064.
//
// Solidity: function setSnapshotDesperationFactor(uint256 _minSize) returns()
func (_Snapshots *SnapshotsSession) SetSnapshotDesperationFactor(_minSize *big.Int) (*types.Transaction, error) {
	return _Snapshots.Contract.SetSnapshotDesperationFactor(&_Snapshots.TransactOpts, _minSize)
}

// SetSnapshotDesperationFactor is a paid mutator transaction binding the contract method 0xeb157064.
//
// Solidity: function setSnapshotDesperationFactor(uint256 _minSize) returns()
func (_Snapshots *SnapshotsTransactorSession) SetSnapshotDesperationFactor(_minSize *big.Int) (*types.Transaction, error) {
	return _Snapshots.Contract.SetSnapshotDesperationFactor(&_Snapshots.TransactOpts, _minSize)
}

// Snapshot is a paid mutator transaction binding the contract method 0x08ca1f25.
//
// Solidity: function snapshot(bytes _signatureGroup, bytes _bclaims) returns(bool)
func (_Snapshots *SnapshotsTransactor) Snapshot(opts *bind.TransactOpts, _signatureGroup []byte, _bclaims []byte) (*types.Transaction, error) {
	return _Snapshots.contract.Transact(opts, "snapshot", _signatureGroup, _bclaims)
}

// Snapshot is a paid mutator transaction binding the contract method 0x08ca1f25.
//
// Solidity: function snapshot(bytes _signatureGroup, bytes _bclaims) returns(bool)
func (_Snapshots *SnapshotsSession) Snapshot(_signatureGroup []byte, _bclaims []byte) (*types.Transaction, error) {
	return _Snapshots.Contract.Snapshot(&_Snapshots.TransactOpts, _signatureGroup, _bclaims)
}

// Snapshot is a paid mutator transaction binding the contract method 0x08ca1f25.
//
// Solidity: function snapshot(bytes _signatureGroup, bytes _bclaims) returns(bool)
func (_Snapshots *SnapshotsTransactorSession) Snapshot(_signatureGroup []byte, _bclaims []byte) (*types.Transaction, error) {
	return _Snapshots.Contract.Snapshot(&_Snapshots.TransactOpts, _signatureGroup, _bclaims)
}

// SnapshotsSnapshotTakenIterator is returned from FilterSnapshotTaken and is used to iterate over the raw logs and unpacked data for SnapshotTaken events raised by the Snapshots contract.
type SnapshotsSnapshotTakenIterator struct {
	Event *SnapshotsSnapshotTaken // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SnapshotsSnapshotTakenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SnapshotsSnapshotTaken)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SnapshotsSnapshotTaken)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SnapshotsSnapshotTakenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SnapshotsSnapshotTakenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SnapshotsSnapshotTaken represents a SnapshotTaken event raised by the Snapshots contract.
type SnapshotsSnapshotTaken struct {
	ChainId        uint32
	Epoch          *big.Int
	Height         uint32
	Validator      common.Address
	StartingETHDKG bool
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterSnapshotTaken is a free log retrieval operation binding the contract event 0x6d438b6b835d16cdae6efdc0259fdfba17e6aa32dae81863a2467866f85f724a.
//
// Solidity: event SnapshotTaken(uint32 chainId, uint256 indexed epoch, uint32 height, address indexed validator, bool startingETHDKG)
func (_Snapshots *SnapshotsFilterer) FilterSnapshotTaken(opts *bind.FilterOpts, epoch []*big.Int, validator []common.Address) (*SnapshotsSnapshotTakenIterator, error) {

	var epochRule []interface{}
	for _, epochItem := range epoch {
		epochRule = append(epochRule, epochItem)
	}

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _Snapshots.contract.FilterLogs(opts, "SnapshotTaken", epochRule, validatorRule)
	if err != nil {
		return nil, err
	}
	return &SnapshotsSnapshotTakenIterator{contract: _Snapshots.contract, event: "SnapshotTaken", logs: logs, sub: sub}, nil
}

// WatchSnapshotTaken is a free log subscription operation binding the contract event 0x6d438b6b835d16cdae6efdc0259fdfba17e6aa32dae81863a2467866f85f724a.
//
// Solidity: event SnapshotTaken(uint32 chainId, uint256 indexed epoch, uint32 height, address indexed validator, bool startingETHDKG)
func (_Snapshots *SnapshotsFilterer) WatchSnapshotTaken(opts *bind.WatchOpts, sink chan<- *SnapshotsSnapshotTaken, epoch []*big.Int, validator []common.Address) (event.Subscription, error) {

	var epochRule []interface{}
	for _, epochItem := range epoch {
		epochRule = append(epochRule, epochItem)
	}

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _Snapshots.contract.WatchLogs(opts, "SnapshotTaken", epochRule, validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SnapshotsSnapshotTaken)
				if err := _Snapshots.contract.UnpackLog(event, "SnapshotTaken", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSnapshotTaken is a log parse operation binding the contract event 0x6d438b6b835d16cdae6efdc0259fdfba17e6aa32dae81863a2467866f85f724a.
//
// Solidity: event SnapshotTaken(uint32 chainId, uint256 indexed epoch, uint32 height, address indexed validator, bool startingETHDKG)
func (_Snapshots *SnapshotsFilterer) ParseSnapshotTaken(log types.Log) (*SnapshotsSnapshotTaken, error) {
	event := new(SnapshotsSnapshotTaken)
	if err := _Snapshots.contract.UnpackLog(event, "SnapshotTaken", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SnapshotsEventsMetaData contains all meta data concerning the SnapshotsEvents contract.
var SnapshotsEventsMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"chainId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"height\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"startingETHDKG\",\"type\":\"bool\"}],\"name\":\"SnapshotTaken\",\"type\":\"event\"}]",
}

// SnapshotsEventsABI is the input ABI used to generate the binding from.
// Deprecated: Use SnapshotsEventsMetaData.ABI instead.
var SnapshotsEventsABI = SnapshotsEventsMetaData.ABI

// SnapshotsEvents is an auto generated Go binding around an Ethereum contract.
type SnapshotsEvents struct {
	SnapshotsEventsCaller     // Read-only binding to the contract
	SnapshotsEventsTransactor // Write-only binding to the contract
	SnapshotsEventsFilterer   // Log filterer for contract events
}

// SnapshotsEventsCaller is an auto generated read-only Go binding around an Ethereum contract.
type SnapshotsEventsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SnapshotsEventsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SnapshotsEventsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SnapshotsEventsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SnapshotsEventsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SnapshotsEventsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SnapshotsEventsSession struct {
	Contract     *SnapshotsEvents  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SnapshotsEventsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SnapshotsEventsCallerSession struct {
	Contract *SnapshotsEventsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// SnapshotsEventsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SnapshotsEventsTransactorSession struct {
	Contract     *SnapshotsEventsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// SnapshotsEventsRaw is an auto generated low-level Go binding around an Ethereum contract.
type SnapshotsEventsRaw struct {
	Contract *SnapshotsEvents // Generic contract binding to access the raw methods on
}

// SnapshotsEventsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SnapshotsEventsCallerRaw struct {
	Contract *SnapshotsEventsCaller // Generic read-only contract binding to access the raw methods on
}

// SnapshotsEventsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SnapshotsEventsTransactorRaw struct {
	Contract *SnapshotsEventsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSnapshotsEvents creates a new instance of SnapshotsEvents, bound to a specific deployed contract.
func NewSnapshotsEvents(address common.Address, backend bind.ContractBackend) (*SnapshotsEvents, error) {
	contract, err := bindSnapshotsEvents(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SnapshotsEvents{SnapshotsEventsCaller: SnapshotsEventsCaller{contract: contract}, SnapshotsEventsTransactor: SnapshotsEventsTransactor{contract: contract}, SnapshotsEventsFilterer: SnapshotsEventsFilterer{contract: contract}}, nil
}

// NewSnapshotsEventsCaller creates a new read-only instance of SnapshotsEvents, bound to a specific deployed contract.
func NewSnapshotsEventsCaller(address common.Address, caller bind.ContractCaller) (*SnapshotsEventsCaller, error) {
	contract, err := bindSnapshotsEvents(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SnapshotsEventsCaller{contract: contract}, nil
}

// NewSnapshotsEventsTransactor creates a new write-only instance of SnapshotsEvents, bound to a specific deployed contract.
func NewSnapshotsEventsTransactor(address common.Address, transactor bind.ContractTransactor) (*SnapshotsEventsTransactor, error) {
	contract, err := bindSnapshotsEvents(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SnapshotsEventsTransactor{contract: contract}, nil
}

// NewSnapshotsEventsFilterer creates a new log filterer instance of SnapshotsEvents, bound to a specific deployed contract.
func NewSnapshotsEventsFilterer(address common.Address, filterer bind.ContractFilterer) (*SnapshotsEventsFilterer, error) {
	contract, err := bindSnapshotsEvents(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SnapshotsEventsFilterer{contract: contract}, nil
}

// bindSnapshotsEvents binds a generic wrapper to an already deployed contract.
func bindSnapshotsEvents(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SnapshotsEventsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SnapshotsEvents *SnapshotsEventsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SnapshotsEvents.Contract.SnapshotsEventsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SnapshotsEvents *SnapshotsEventsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SnapshotsEvents.Contract.SnapshotsEventsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SnapshotsEvents *SnapshotsEventsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SnapshotsEvents.Contract.SnapshotsEventsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SnapshotsEvents *SnapshotsEventsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SnapshotsEvents.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SnapshotsEvents *SnapshotsEventsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SnapshotsEvents.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SnapshotsEvents *SnapshotsEventsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SnapshotsEvents.Contract.contract.Transact(opts, method, params...)
}

// SnapshotsEventsSnapshotTakenIterator is returned from FilterSnapshotTaken and is used to iterate over the raw logs and unpacked data for SnapshotTaken events raised by the SnapshotsEvents contract.
type SnapshotsEventsSnapshotTakenIterator struct {
	Event *SnapshotsEventsSnapshotTaken // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SnapshotsEventsSnapshotTakenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SnapshotsEventsSnapshotTaken)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SnapshotsEventsSnapshotTaken)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SnapshotsEventsSnapshotTakenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SnapshotsEventsSnapshotTakenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SnapshotsEventsSnapshotTaken represents a SnapshotTaken event raised by the SnapshotsEvents contract.
type SnapshotsEventsSnapshotTaken struct {
	ChainId        uint32
	Epoch          *big.Int
	Height         uint32
	Validator      common.Address
	StartingETHDKG bool
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterSnapshotTaken is a free log retrieval operation binding the contract event 0x6d438b6b835d16cdae6efdc0259fdfba17e6aa32dae81863a2467866f85f724a.
//
// Solidity: event SnapshotTaken(uint32 chainId, uint256 indexed epoch, uint32 height, address indexed validator, bool startingETHDKG)
func (_SnapshotsEvents *SnapshotsEventsFilterer) FilterSnapshotTaken(opts *bind.FilterOpts, epoch []*big.Int, validator []common.Address) (*SnapshotsEventsSnapshotTakenIterator, error) {

	var epochRule []interface{}
	for _, epochItem := range epoch {
		epochRule = append(epochRule, epochItem)
	}

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _SnapshotsEvents.contract.FilterLogs(opts, "SnapshotTaken", epochRule, validatorRule)
	if err != nil {
		return nil, err
	}
	return &SnapshotsEventsSnapshotTakenIterator{contract: _SnapshotsEvents.contract, event: "SnapshotTaken", logs: logs, sub: sub}, nil
}

// WatchSnapshotTaken is a free log subscription operation binding the contract event 0x6d438b6b835d16cdae6efdc0259fdfba17e6aa32dae81863a2467866f85f724a.
//
// Solidity: event SnapshotTaken(uint32 chainId, uint256 indexed epoch, uint32 height, address indexed validator, bool startingETHDKG)
func (_SnapshotsEvents *SnapshotsEventsFilterer) WatchSnapshotTaken(opts *bind.WatchOpts, sink chan<- *SnapshotsEventsSnapshotTaken, epoch []*big.Int, validator []common.Address) (event.Subscription, error) {

	var epochRule []interface{}
	for _, epochItem := range epoch {
		epochRule = append(epochRule, epochItem)
	}

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _SnapshotsEvents.contract.WatchLogs(opts, "SnapshotTaken", epochRule, validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SnapshotsEventsSnapshotTaken)
				if err := _SnapshotsEvents.contract.UnpackLog(event, "SnapshotTaken", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSnapshotTaken is a log parse operation binding the contract event 0x6d438b6b835d16cdae6efdc0259fdfba17e6aa32dae81863a2467866f85f724a.
//
// Solidity: event SnapshotTaken(uint32 chainId, uint256 indexed epoch, uint32 height, address indexed validator, bool startingETHDKG)
func (_SnapshotsEvents *SnapshotsEventsFilterer) ParseSnapshotTaken(log types.Log) (*SnapshotsEventsSnapshotTaken, error) {
	event := new(SnapshotsEventsSnapshotTaken)
	if err := _SnapshotsEvents.contract.UnpackLog(event, "SnapshotTaken", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SnapshotsFacetMetaData contains all meta data concerning the SnapshotsFacet contract.
var SnapshotsFacetMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"chainId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"height\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"startingETHDKG\",\"type\":\"bool\"}],\"name\":\"SnapshotTaken\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotNumber\",\"type\":\"uint256\"}],\"name\":\"getChainIdFromSnapshot\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotNumber\",\"type\":\"uint256\"}],\"name\":\"getHeightFromSnapshot\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotNumber\",\"type\":\"uint256\"}],\"name\":\"getMadHeightFromSnapshot\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotNumber\",\"type\":\"uint256\"}],\"name\":\"getRawBlockClaimsSnapshot\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotNumber\",\"type\":\"uint256\"}],\"name\":\"getRawSignatureSnapshot\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"grantOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractRegistry\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"initializeSnapshots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minEthSnapshotSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minMadSnapshotSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ns\",\"type\":\"uint256\"}],\"name\":\"setEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governance_\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minSize\",\"type\":\"uint256\"}],\"name\":\"setMinEthSnapshotSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minSize\",\"type\":\"uint256\"}],\"name\":\"setMinMadSnapshotSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"setSnapshotDesperationDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"setSnapshotDesperationFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_signatureGroup\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_bclaims\",\"type\":\"bytes\"}],\"name\":\"snapshot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"snapshotDesperationDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"snapshotDesperationFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b506000620000296200007560201b6200110b1760201c565b9050338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050620000a2565b6000807f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90508091505090565b61551180620000b26000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c806399e33e3d116100c3578063e348da131161007c578063e348da1314610389578063e380b228146103a5578063e4b82105146103d5578063eb157064146103f3578063fad8b32a1461040f578063fcf966521461042b57610158565b806399e33e3d146102f1578063ab033ea91461030d578063be9a655514610329578063c17cb9ee14610333578063dc97805914610351578063de8fa4a51461036d57610158565b806335b6c6321161011557806335b6c6321461021b5780634f4ea6141461024b578063605361721461027b5780636372fe51146102855780636b797156146102b5578063900cf0cf146102d357610158565b806307da68f51461015d57806308ca1f25146101675780630ceb2cef146101975780630d81dce4146101b357806319f74669146101cf57806320d9a246146101ff575b600080fd5b610165610449565b005b610181600480360381019061017c9190613c7f565b6104e6565b60405161018e919061433f565b60405180910390f35b6101b160048036038101906101ac9190613d2d565b6105a8565b005b6101cd60048036038101906101c89190613d2d565b61064f565b005b6101e960048036038101906101e49190613d2d565b6106fd565b6040516101f69190614619565b60405180910390f35b61021960048036038101906102149190613d00565b61070f565b005b61023560048036038101906102309190613d2d565b61081d565b604051610242919061435a565b60405180910390f35b61026560048036038101906102609190613d2d565b61082f565b6040516102729190614619565b60405180910390f35b610283610841565b005b61029f600480360381019061029a9190613d2d565b61094c565b6040516102ac919061435a565b60405180910390f35b6102bd61095e565b6040516102ca91906145fe565b60405180910390f35b6102db610971565b6040516102e891906145fe565b60405180910390f35b61030b60048036038101906103069190613d2d565b610980565b005b61032760048036038101906103229190613c52565b610a2e565b005b610331610b20565b005b61033b610bbd565b60405161034891906145fe565b60405180910390f35b61036b60048036038101906103669190613c52565b610bd0565b005b61038760048036038101906103829190613d2d565b610cc2565b005b6103a3600480360381019061039e9190613c52565b610d70565b005b6103bf60048036038101906103ba9190613d2d565b610ecf565b6040516103cc9190614619565b60405180910390f35b6103dd610ee1565b6040516103ea91906145fe565b60405180910390f35b61040d60048036038101906104089190613d2d565b610ef4565b005b61042960048036038101906104249190613c52565b610fa2565b005b6104336110f8565b60405161044091906145fe565b60405180910390f35b600061045361110b565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166104e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104da906144de565b60405180910390fd5b50565b6000806104f161110b565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1680610552575061055133611138565b5b610591576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610588906144fe565b60405180910390fd5b61059d868686866111b7565b915050949350505050565b60006105b261110b565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610642576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610639906144de565b60405180910390fd5b61064b82611b5d565b5050565b600061065961110b565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166106e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e0906144de565b60405180910390fd5b816106f2611b70565b600201819055505050565b600061070882611b9d565b9050919050565b600061071961110b565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166107a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a0906144de565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610819576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610810906144be565b60405180910390fd5b5050565b606061082882611be1565b9050919050565b600061083a82611c9e565b9050919050565b600061084b61110b565b90508060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d69061443e565b60405180910390fd5b8060020160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b606061095782611ce2565b9050919050565b6000610968611b70565b60040154905090565b600061097b611d9f565b905090565b600061098a61110b565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610a1a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a11906144de565b60405180910390fd5b81610a23611b70565b600301819055505050565b6000610a3861110b565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610acc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac3906145be565b60405180910390fd5b6000610ad661110b565b9050828160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b6000610b2a61110b565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610bba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb1906144de565b60405180910390fd5b50565b6000610bc7611b70565b60030154905090565b6000610bda61110b565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610c6e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c65906145be565b60405180910390fd5b6000610c7861110b565b9050828160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b6000610ccc61110b565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610d5c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d53906144de565b60405180910390fd5b81610d65611b70565b600401819055505050565b6000610d7a61110b565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610e2557508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610e64576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5b906143be565b60405180910390fd5b6000610e6e61110b565b905060018160000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550505050565b6000610eda82611db2565b9050919050565b6000610eeb611b70565b60020154905090565b6000610efe61110b565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610f8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f85906144de565b60405180910390fd5b81610f97611b70565b600501819055505050565b6000610fac61110b565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061105757508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b611096576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108d906143be565b60405180910390fd5b60006110a061110b565b90508060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff0219169055505050565b6000611102611b70565b60050154905090565b6000807f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90508091505090565b600080611143611df6565b90508060020160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1680156111af57506111a3611e23565b6111ac84611e36565b10155b915050919050565b6000806111c2611e8b565b905060006111ce611b70565b90506111d8613a85565b6111e0613aa7565b61122f89898080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506000611eb8565b80925081935050506000878760405161124992919061420c565b604051809103902060405160200161126191906141f1565b604051602081830303815290604052905061127d81838561209f565b6112bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112b39061455e565b60405180910390fd5b505050600061131086868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050600c612258565b9050600061136387878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506008612258565b9050600083600001600086600101548152602001908152602001600020905060018160000160006101000a81548160ff02191690831515021790555087878260010191906113b2929190613ac9565b5089898260020191906113c6929190613ac9565b50438160030160006101000a81548163ffffffff021916908363ffffffff160217905550828160030160046101000a81548163ffffffff021916908363ffffffff160217905550818160000160016101000a81548163ffffffff021916908363ffffffff160217905550506000808460000160006001886001015461144b9190614aab565b81526020019081526020016000206040518060c00160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016001820180546114b590614c36565b80601f01602080910402602001604051908101604052809291908181526020018280546114e190614c36565b801561152e5780601f106115035761010080835404028352916020019161152e565b820191906000526020600020905b81548152906001019060200180831161151157829003601f168201915b5050505050815260200160028201805461154790614c36565b80601f016020809104026020016040519081016040528092919081815260200182805461157390614c36565b80156115c05780601f10611595576101008083540402835291602001916115c0565b820191906000526020600020905b8154815290600101906020018083116115a357829003601f168201915b505050505081526020016003820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016003820160049054906101000a900463ffffffff1663ffffffff1663ffffffff16815250509050806080015163ffffffff164361162d9190614aab565b91506001866001015411156116fa5780600001511580611651575084600201548210155b611690576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116879061449e565b60405180910390fd5b806000015115806116ba575084600301548160a00151856116b19190614adf565b63ffffffff1610155b6116f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116f09061451e565b60405180910390fd5b5b506000611705611df6565b90506000611711612340565b905060005b82600001805490508110156118815782600001818154811061173b5761173a614e77565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561180d576118078360000182815481106117b2576117b1614e77565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836004015484600301546117f1919061474d565b60028b60010154611802919061474d565b61236d565b5061186e565b61186c83600001828154811061182657611825614e77565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836003015460028b60010154611867919061474d565b61236d565b505b808061187990614cb1565b915050611716565b5050611a078160090160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d8f63eb76040518163ffffffff1660e01b815260040160206040518083038186803b1580156118f057600080fd5b505afa158015611904573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119289190613d5a565b8260090160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639601ddf9336040518263ffffffff1660e01b815260040161198591906142fb565b60206040518083038186803b15801561199d57600080fd5b505afa1580156119b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119d59190613d5a565b8760040154856119e59190614a17565b8c8c6040516119f592919061420c565b6040518091039020896005015461251c565b611a1f866004015484611a1a9190614a17565b61277f565b611a2c876005015461277f565b604051602001611a3d9291906142c1565b60405160208183030381529060405290611a8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a84919061437c565b60405180910390fd5b505060008460010160009054906101000a900460ff1615611aad57600190505b60008560010160006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff1686600101547f6d438b6b835d16cdae6efdc0259fdfba17e6aa32dae81863a2467866f85f724a85878960010160009054906101000a900460ff16604051611b2a93929190614634565b60405180910390a3856001016000815480929190611b4790614cb1565b9190505550809650505050505050949350505050565b80611b66611e8b565b6001018190555050565b6000807fd02b08f6836233a79224d6de3c3df078574b0f84d75d2a48f85a5a3cacc7291590508091505090565b600080611ba8611b70565b9050600081600001600085815260200190815260200160002090508060000160019054906101000a900463ffffffff1692505050919050565b60606000611bed611b70565b905060008160000160008581526020019081526020016000209050806002018054611c1790614c36565b80601f0160208091040260200160405190810160405280929190818152602001828054611c4390614c36565b8015611c905780601f10611c6557610100808354040283529160200191611c90565b820191906000526020600020905b815481529060010190602001808311611c7357829003601f168201915b505050505092505050919050565b600080611ca9611b70565b9050600081600001600085815260200190815260200160002090508060030160049054906101000a900463ffffffff1692505050919050565b60606000611cee611b70565b905060008160000160008581526020019081526020016000209050806001018054611d1890614c36565b80601f0160208091040260200160405190810160405280929190818152602001828054611d4490614c36565b8015611d915780601f10611d6657610100808354040283529160200191611d91565b820191906000526020600020905b815481529060010190602001808311611d7457829003601f168201915b505050505092505050919050565b6000611da9611e8b565b60010154905090565b600080611dbd611b70565b9050600081600001600085815260200190815260200160002090508060030160009054906101000a900463ffffffff1692505050919050565b6000807f310970b1d84cbb8af371a12019b396e9511a9b44411c1dabeec3e3d59d9a50f690508091505090565b6000611e2d612340565b60000154905090565b6000611e40612340565b60090160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549050919050565b6000807fa53f90683b42ecb37674e5c8c5c9cabf849818fdc2fdfb57bbe3c738f7b50d0e90508091505090565b611ec0613a85565b611ec8613aa7565b8260c084611ed6919061474d565b11611f16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f0d9061441e565b60405180910390fd5b60c083611f23919061474d565b84511015611f66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f5d906145de565b60405180910390fd5b611f7c84600085611f77919061474d565b612989565b82600060048110611f9057611f8f614e77565b5b602002018181525050611faf84602085611faa919061474d565b612989565b82600160048110611fc357611fc2614e77565b5b602002018181525050611fe284604085611fdd919061474d565b612989565b82600260048110611ff657611ff5614e77565b5b60200201818152505061201584606085612010919061474d565b612989565b8260036004811061202957612028614e77565b5b60200201818152505061204884608085612043919061474d565b612989565b8160006002811061205c5761205b614e77565b5b60200201818152505061207b8460a085612076919061474d565b612989565b8160016002811061208f5761208e614e77565b5b6020020181815250509250929050565b60006120a9613aa7565b6120b285612a37565b905061224e604051806101800160405280866000600281106120d7576120d6614e77565b5b60200201518152602001866001600281106120f5576120f4614e77565b5b602002015181526020017f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed81526020017f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec81526020017f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d8152602001836000600281106121ab576121aa614e77565b5b60200201518152602001836001600281106121c9576121c8614e77565b5b60200201518152602001856000600481106121e7576121e6614e77565b5b602002015181526020018560016004811061220557612204614e77565b5b602002015181526020018560026004811061222357612222614e77565b5b602002015181526020018560036004811061224157612240614e77565b5b6020020151815250612bab565b9150509392505050565b600082600383612268919061474d565b8151811061227957612278614e77565b5b602001015160f81c60f81b60f81c60ff1690508260028361229a919061474d565b815181106122ab576122aa614e77565b5b602001015160f81c60f81b60f81c60ff1660088263ffffffff16901b179050826001836122d8919061474d565b815181106122e9576122e8614e77565b5b602001015160f81c60f81b60f81c60ff1660088263ffffffff16901b17905082828151811061231b5761231a614e77565b5b602001015160f81c60f81b60f81c60ff1660088263ffffffff16901b17905092915050565b6000807f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237ef90508091505090565b600080612378612340565b905060008160090160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506123c7613b4f565b858160000181815250508481602001818152505081600501819080600181540180825580915050600190039060005260206000209060020201600090919091909150600082015181600001556020820151816001015550508260080160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1930886040518363ffffffff1660e01b815260040161247e929190614316565b600060405180830381600087803b15801561249857600080fd5b505af11580156124ac573d6000803e3d6000fd5b505050508673ffffffffffffffffffffffffffffffffffffffff167f28dc9c0ffa672df041cad84edbee41508284600c9394bda0f8586d012c5e0915876040516124f691906145fe565b60405180910390a28160010160009054906101000a900460ff1693505050509392505050565b6000806001905060008590505b600081131561257757818461253e91906147da565b816125499190614a17565b9050818061255690614c68565b92505060038861256691906147da565b82131561257257612577565b612529565b5060008460001c90506000888261258e9190614d3f565b9050600089848361259f91906146b9565b6125a99190614d0e565b905081811315612697576000828a121580156125c45750818a125b90508061268a576125d48b61277f565b6125dd8b61277f565b6125e68b61277f565b61260e8b6040516020016125fa91906141f1565b604051602081830303815290604052612c2b565b6126178b61277f565b6126208861277f565b6126298861277f565b60405160200161263f9796959493929190614225565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612681919061437c565b60405180910390fd5b8095505050505050612776565b6000828a1215806126a75750818a125b90508061276d576126b78b61277f565b6126c08b61277f565b6126c98b61277f565b6126f18b6040516020016126dd91906141f1565b604051602081830303815290604052612c2b565b6126fa8b61277f565b6127038861277f565b61270c8861277f565b6040516020016127229796959493929190614225565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612764919061437c565b60405180910390fd5b80955050505050505b95945050505050565b606060008214156127c7576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612984565b600080831290506000816127db57836127e6565b836127e590614da1565b5b90506000808290505b6000811461281957818061280290614cb1565b925050600a816128129190614844565b90506127ef565b50821561282d578061282a90614cb1565b90505b60008167ffffffffffffffff81111561284957612848614ea6565b5b6040519080825280601f01601f19166020018201604052801561287b5781602001600182028036833780820191505090505b509050600082905060008490505b6000811461290f57600a8161289e9190614d3f565b60306128aa919061474d565b60f81b83836128b890614c0c565b935083815181106128cc576128cb614e77565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a816129089190614844565b9050612889565b50841561297b577f2d000000000000000000000000000000000000000000000000000000000000008260008151811061294b5761294a614e77565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505b81955050505050505b919050565b600081601f83612999919061474d565b116129d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129d09061457e565b60405180910390fd5b601f826129e6919061474d565b835111612a28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a1f9061447e565b60405180910390fd5b81602084010151905092915050565b612a3f613aa7565b6000612a5483600060f81b600160f81b612ec0565b90506000612a6b84600260f81b600360f81b612ec0565b90506000612a7883612faf565b90506000612a8583612faf565b9050612b10604051806080016040528084600060028110612aa957612aa8614e77565b5b6020020151815260200184600160028110612ac757612ac6614e77565b5b6020020151815260200183600060028110612ae557612ae4614e77565b5b6020020151815260200183600160028110612b0357612b02614e77565b5b6020020151815250613639565b9450612b1b85613697565b612b5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b51906143de565b60405180910390fd5b612b63856137e0565b612ba2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b999061453e565b60405180910390fd5b50505050919050565b6000612bb5613b69565b6000602082610180866008600019fa905080612c06576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bfd9061459e565b60405180910390fd5b600182600060018110612c1c57612c1b614e77565b5b60200201511492505050919050565b6060600060028351612c3d91906149bd565b6002612c49919061474d565b905060008167ffffffffffffffff811115612c6757612c66614ea6565b5b6040519080825280601f01601f191660200182016040528015612c995781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110612cd157612cd0614e77565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110612d3557612d34614e77565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006002905060005b8551811015612eb4576000868281518110612d8b57612d8a614e77565b5b602001015160f81c60f81b60f81c90506000601082612daa9190614875565b9050600a8160ff161015612dbf576030612dc2565b60375b81612dcd91906147a3565b60f81b858580612ddc90614cb1565b965081518110612def57612dee614e77565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350601082612e2b9190614d70565b9050600a8160ff161015612e40576030612e43565b60375b81612e4e91906147a3565b60f81b858580612e5d90614cb1565b965081518110612e7057612e6f614e77565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535050508080612eac90614cb1565b915050612d6d565b50819350505050919050565b6000808385604051602001612ed69291906141c9565b6040516020818303038152906040528051906020012060001c905060008386604051602001612f069291906141c9565b6040516020818303038152906040528051906020012060001c90507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780612f5057612f4f614e19565b5b817f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780612f8057612f7f614e19565b5b7f0e0a77c19a07df2f666ea36f7879462c0a78eb28f5c70b3dd35d438dc58f0d9d850908925050509392505050565b612fb7613aa7565b60008060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780612feb57612fea614e19565b5b85860992507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061301f5761301e614e19565b5b6004840891507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061305457613053614e19565b5b828409905061306281613838565b905060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061309557613094614e19565b5b83840990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806130c9576130c8614e19565b5b83820990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806130fd576130fc614e19565b5b848509935060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061313357613132614e19565b5b8577b3c4d79d41a91759a9e4c7e359b6b89eaec68e62effffffd0990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061317f5761317e614e19565b5b838209905061318d8161388c565b90507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806131be576131bd614e19565b5b7759e26bcea0d48bacd4f263f1acdb5c4f5763473177fffffe8208905060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061320c5761320b614e19565b5b60018308905061321b8161388c565b905060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061324e5761324d614e19565b5b847f2042def740cbc01bd03583cf0100e593ba56470b9af68708d2c05d64905353850990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806132a2576132a1614e19565b5b85820990506132b08161388c565b90507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806132e1576132e0614e19565b5b60018208905060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061331857613317614e19565b5b84850990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061334c5761334b614e19565b5b84820990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806133805761337f614e19565b5b6003820890506000613391826138d3565b90507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806133c2576133c1614e19565b5b84850991507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806133f6576133f5614e19565b5b84830991507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061342a57613429614e19565b5b600383089150600061343b836138d3565b90506000600160046003846134509190614a17565b60018661345d9190614a17565b61346791906148a6565b61347191906147da565b61347b91906146b9565b905060006001821415613490578790506134a6565b60028214156134a1578690506134a5565b8590505b5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806134d5576134d4614e19565b5b81820994507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061350957613508614e19565b5b81860994507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061353d5761353c614e19565b5b60038608945061354c85613958565b945060006135598f6139ac565b90507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061358a57613589614e19565b5b81870995506135ac604051806040016040528084815260200188815250613697565b6135eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016135e29061445e565b60405180910390fd5b818e600060028110613600576135ff614e77565b5b602002018181525050858e60016002811061361e5761361d614e77565b5b60200201818152505050505050505050505050505050919050565b613641613aa7565b60006040826080856006600019fa905080613691576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613688906143fe565b60405180910390fd5b50919050565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806136c8576136c7614e19565b5b60037f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806136f9576136f8614e19565b5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061372857613727614e19565b5b8560006002811061373c5761373b614e77565b5b60200201518660006002811061375557613754614e77565b5b6020020151098560006002811061376f5761376e614e77565b5b602002015109087f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806137a5576137a4614e19565b5b836001600281106137b9576137b8614e77565b5b6020020151846001600281106137d2576137d1614e77565b5b602002015109149050919050565b600080826000600281106137f7576137f6614e77565b5b60200201511480613820575060018260006002811061381957613818614e77565b5b6020020151145b1561382e5760009050613833565b600190505b919050565b6000613885827f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd457f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47613a03565b9050919050565b60008082141561389f57600090506138ce565b817f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd476138cb9190614aab565b90505b919050565b600080613921837f183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea37f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47613a03565b90506000811461394d576001808216600261393c91906148a6565b6139469190614a17565b9150613952565b600091505b50919050565b60006139a5827f0c19139cb84c680a6e14116da060561765e05aa45a1c72a34f082305b61f3f527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47613a03565b9050919050565b6000600190507f183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea38211156139fe577f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4690505b919050565b60008060405160208152602080820152602060408201528560608201528460808201528360a082015260208160c08360055afa9150805192505080613a7d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613a749061439e565b60405180910390fd5b509392505050565b6040518060800160405280600490602082028036833780820191505090505090565b6040518060400160405280600290602082028036833780820191505090505090565b828054613ad590614c36565b90600052602060002090601f016020900481019282613af75760008555613b3e565b82601f10613b1057803560ff1916838001178555613b3e565b82800160010185558215613b3e579182015b82811115613b3d578235825591602001919060010190613b22565b5b509050613b4b9190613b8b565b5090565b604051806040016040528060008152602001600081525090565b6040518060200160405280600190602082028036833780820191505090505090565b5b80821115613ba4576000816000905550600101613b8c565b5090565b600081359050613bb781615496565b92915050565b60008083601f840112613bd357613bd2614eda565b5b8235905067ffffffffffffffff811115613bf057613bef614ed5565b5b602083019150836001820283011115613c0c57613c0b614edf565b5b9250929050565b600081359050613c22816154ad565b92915050565b600081359050613c37816154c4565b92915050565b600081519050613c4c816154c4565b92915050565b600060208284031215613c6857613c67614ee9565b5b6000613c7684828501613ba8565b91505092915050565b60008060008060408587031215613c9957613c98614ee9565b5b600085013567ffffffffffffffff811115613cb757613cb6614ee4565b5b613cc387828801613bbd565b9450945050602085013567ffffffffffffffff811115613ce657613ce5614ee4565b5b613cf287828801613bbd565b925092505092959194509250565b600060208284031215613d1657613d15614ee9565b5b6000613d2484828501613c13565b91505092915050565b600060208284031215613d4357613d42614ee9565b5b6000613d5184828501613c28565b91505092915050565b600060208284031215613d7057613d6f614ee9565b5b6000613d7e84828501613c3d565b91505092915050565b613d9081614b13565b82525050565b613d9f81614b25565b82525050565b613db6613db182614b31565b614cfa565b82525050565b613dcd613dc882614b5d565b614d04565b82525050565b6000613ddf8385614692565b9350613dec838584614bca565b82840190509392505050565b6000613e038261466b565b613e0d8185614681565b9350613e1d818560208601614bd9565b613e2681614eee565b840191505092915050565b6000613e3c8261466b565b613e468185614692565b9350613e56818560208601614bd9565b80840191505092915050565b6000613e6d82614676565b613e77818561469d565b9350613e87818560208601614bd9565b613e9081614eee565b840191505092915050565b6000613ea682614676565b613eb081856146ae565b9350613ec0818560208601614bd9565b80840191505092915050565b6000613ed9601d8361469d565b9150613ee482614eff565b602082019050919050565b6000613efc602e8361469d565b9150613f0782614f28565b604082019050919050565b6000613f1f60298361469d565b9150613f2a82614f77565b604082019050919050565b6000613f42601e8361469d565b9150613f4d82614fc6565b602082019050919050565b6000613f65603a8361469d565b9150613f7082614fef565b604082019050919050565b6000613f8860258361469d565b9150613f938261503e565b604082019050919050565b6000613fab60248361469d565b9150613fb68261508d565b604082019050919050565b6000613fce603e8361469d565b9150613fd9826150dc565b604082019050919050565b6000613ff160268361469d565b9150613ffc8261512b565b604082019050919050565b6000614014601c836146ae565b915061401f8261517a565b601c82019050919050565b600061403760148361469d565b9150614042826151a3565b602082019050919050565b600061405a60268361469d565b9150614065826151cc565b604082019050919050565b600061407d603f8361469d565b91506140888261521b565b604082019050919050565b60006140a060248361469d565b91506140ab8261526a565b604082019050919050565b60006140c3602a8361469d565b91506140ce826152b9565b604082019050919050565b60006140e6601d8361469d565b91506140f182615308565b602082019050919050565b60006141096002836146ae565b915061411482615331565b600282019050919050565b600061412c60428361469d565b91506141378261535a565b606082019050919050565b600061414f601d8361469d565b915061415a826153cf565b602082019050919050565b600061417260258361469d565b915061417d826153f8565b604082019050919050565b6000614195602f8361469d565b91506141a082615447565b604082019050919050565b6141b481614ba3565b82525050565b6141c381614bad565b82525050565b60006141d58285613da5565b6001820191506141e58284613e31565b91508190509392505050565b60006141fd8284613dbc565b60208201915081905092915050565b6000614219828486613dd3565b91508190509392505050565b6000614231828a613e9b565b915061423c826140fc565b91506142488289613e9b565b9150614253826140fc565b915061425f8288613e9b565b915061426a826140fc565b91506142768287613e9b565b91506142828286613e9b565b915061428d826140fc565b91506142998285613e9b565b91506142a4826140fc565b91506142b08284613e9b565b915081905098975050505050505050565b60006142cc82614007565b91506142d88285613e9b565b91506142e3826140fc565b91506142ef8284613e9b565b91508190509392505050565b60006020820190506143106000830184613d87565b92915050565b600060408201905061432b6000830185613d87565b61433860208301846141ab565b9392505050565b60006020820190506143546000830184613d96565b92915050565b600060208201905081810360008301526143748184613df8565b905092915050565b600060208201905081810360008301526143968184613e62565b905092915050565b600060208201905081810360008301526143b781613ecc565b9050919050565b600060208201905081810360008301526143d781613eef565b9050919050565b600060208201905081810360008301526143f781613f12565b9050919050565b6000602082019050818103600083015261441781613f35565b9050919050565b6000602082019050818103600083015261443781613f58565b9050919050565b6000602082019050818103600083015261445781613f7b565b9050919050565b6000602082019050818103600083015261447781613f9e565b9050919050565b6000602082019050818103600083015261449781613fc1565b9050919050565b600060208201905081810360008301526144b781613fe4565b9050919050565b600060208201905081810360008301526144d78161402a565b9050919050565b600060208201905081810360008301526144f78161404d565b9050919050565b6000602082019050818103600083015261451781614070565b9050919050565b6000602082019050818103600083015261453781614093565b9050919050565b60006020820190508181036000830152614557816140b6565b9050919050565b60006020820190508181036000830152614577816140d9565b9050919050565b600060208201905081810360008301526145978161411f565b9050919050565b600060208201905081810360008301526145b781614142565b9050919050565b600060208201905081810360008301526145d781614165565b9050919050565b600060208201905081810360008301526145f781614188565b9050919050565b600060208201905061461360008301846141ab565b92915050565b600060208201905061462e60008301846141ba565b92915050565b600060608201905061464960008301866141ba565b61465660208301856141ba565b6146636040830184613d96565b949350505050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60006146c482614b79565b91506146cf83614b79565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0383136000831215161561470a57614709614dea565b5b817f800000000000000000000000000000000000000000000000000000000000000003831260008312161561474257614741614dea565b5b828201905092915050565b600061475882614ba3565b915061476383614ba3565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561479857614797614dea565b5b828201905092915050565b60006147ae82614bbd565b91506147b983614bbd565b92508260ff038211156147cf576147ce614dea565b5b828201905092915050565b60006147e582614b79565b91506147f083614b79565b925082614800576147ff614e19565b5b600160000383147f80000000000000000000000000000000000000000000000000000000000000008314161561483957614838614dea565b5b828205905092915050565b600061484f82614ba3565b915061485a83614ba3565b92508261486a57614869614e19565b5b828204905092915050565b600061488082614bbd565b915061488b83614bbd565b92508261489b5761489a614e19565b5b828204905092915050565b60006148b182614b79565b91506148bc83614b79565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156148fb576148fa614dea565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561493857614937614dea565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561497557614974614dea565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156149b2576149b1614dea565b5b828202905092915050565b60006149c882614ba3565b91506149d383614ba3565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614a0c57614a0b614dea565b5b828202905092915050565b6000614a2282614b79565b9150614a2d83614b79565b9250827f800000000000000000000000000000000000000000000000000000000000000001821260008412151615614a6857614a67614dea565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018213600084121615614aa057614a9f614dea565b5b828203905092915050565b6000614ab682614ba3565b9150614ac183614ba3565b925082821015614ad457614ad3614dea565b5b828203905092915050565b6000614aea82614bad565b9150614af583614bad565b925082821015614b0857614b07614dea565b5b828203905092915050565b6000614b1e82614b83565b9050919050565b60008115159050919050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b6000614b7282614b13565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015614bf7578082015181840152602081019050614bdc565b83811115614c06576000848401525b50505050565b6000614c1782614ba3565b91506000821415614c2b57614c2a614dea565b5b600182039050919050565b60006002820490506001821680614c4e57607f821691505b60208210811415614c6257614c61614e48565b5b50919050565b6000614c7382614b79565b91507f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614ca657614ca5614dea565b5b600182019050919050565b6000614cbc82614ba3565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614cef57614cee614dea565b5b600182019050919050565b6000819050919050565b6000819050919050565b6000614d1982614b79565b9150614d2483614b79565b925082614d3457614d33614e19565b5b828207905092915050565b6000614d4a82614ba3565b9150614d5583614ba3565b925082614d6557614d64614e19565b5b828206905092915050565b6000614d7b82614bbd565b9150614d8683614bbd565b925082614d9657614d95614e19565b5b828206905092915050565b6000614dac82614b79565b91507f8000000000000000000000000000000000000000000000000000000000000000821415614ddf57614dde614dea565b5b816000039050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f6d6f64756c6172206578706f6e656e74696174696f6e2066616c696564000000600082015250565b7f41636365737320436f6e74726f6c3a206f6e6c79206f776e6572206f72206f7060008201527f657261746f7220616c6c6f776564000000000000000000000000000000000000602082015250565b7f496e76616c6964206861736820706f696e743a206e6f74206f6e20656c6c697060008201527f7469632063757276650000000000000000000000000000000000000000000000602082015250565b7f656c6c6970746963206375727665206164646974696f6e206661696c65640000600082015250565b7f52436c61696d735061727365724c6962726172793a204f766572666c6f77206f60008201527f6e2074686520646174614f666673657420706172616d65746572000000000000602082015250565b7f41636365737320436f6e74726f6c3a206f776e657273686970206e6f7420677260008201527f616e746564000000000000000000000000000000000000000000000000000000602082015250565b7f496e76616c696420706f696e743a206e6f74206f6e20656c6c6970746963206360008201527f7572766500000000000000000000000000000000000000000000000000000000602082015250565b7f426173655061727365724c6962726172793a20547279696e6720746f2072656160008201527f6420616e206f6666736574206f7574206f6620626f756e646172696573210000602082015250565b7f736e617073686f74206865696768747320746f6f20636c6f736520696e20457460008201527f68657265756d0000000000000000000000000000000000000000000000000000602082015250565b7f76616c696461746f72206e6f7420616d6f6e6720616c6c6f7765642000000000600082015250565b7f6e696c2072656769737472792061646472657373000000000000000000000000600082015250565b7f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160008201527f6c6c6f7765640000000000000000000000000000000000000000000000000000602082015250565b7f41636365737320436f6e74726f6c3a206f6e6c79206f776e6572206f7220667560008201527f6c6c79207374616b6564207061727469636970616e747320616c6c6f77656400602082015250565b7f736e617073686f74206865696768747320746f6f20636c6f736520696e204d6160008201527f644e657400000000000000000000000000000000000000000000000000000000602082015250565b7f44616e6765726f7573206861736820706f696e743a206e6f742073616665206660008201527f6f72207369676e696e6700000000000000000000000000000000000000000000602082015250565b7f5369676e617475726520766572696669636174696f6e206661696c6564000000600082015250565b7f2c20000000000000000000000000000000000000000000000000000000000000600082015250565b7f426173655061727365724c6962726172793a20416e206f766572666c6f77206860008201527f617070656e6564207769746820746865206f666673657420706172616d65746560208201527f7221000000000000000000000000000000000000000000000000000000000000604082015250565b7f656c6c69707469632063757276652070616972696e67206661696c6564000000600082015250565b7f41636365737320436f6e74726f6c3a206f6e6c79206f776e657220697320616c60008201527f6c6f776564000000000000000000000000000000000000000000000000000000602082015250565b7f52436572745061727365724c6962726172793a204e6f7420656e6f756768206260008201527f7974657320746f20657874726163740000000000000000000000000000000000602082015250565b61549f81614b13565b81146154aa57600080fd5b50565b6154b681614b67565b81146154c157600080fd5b50565b6154cd81614ba3565b81146154d857600080fd5b5056fea2646970667358221220dd5cb9f5466ef61b5f536664b3603d1685111cd46b5a05e927bc4978def1732f64736f6c63430008060033",
}

// SnapshotsFacetABI is the input ABI used to generate the binding from.
// Deprecated: Use SnapshotsFacetMetaData.ABI instead.
var SnapshotsFacetABI = SnapshotsFacetMetaData.ABI

// SnapshotsFacetBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SnapshotsFacetMetaData.Bin instead.
var SnapshotsFacetBin = SnapshotsFacetMetaData.Bin

// DeploySnapshotsFacet deploys a new Ethereum contract, binding an instance of SnapshotsFacet to it.
func DeploySnapshotsFacet(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *SnapshotsFacet, error) {
	parsed, err := SnapshotsFacetMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SnapshotsFacetBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SnapshotsFacet{SnapshotsFacetCaller: SnapshotsFacetCaller{contract: contract}, SnapshotsFacetTransactor: SnapshotsFacetTransactor{contract: contract}, SnapshotsFacetFilterer: SnapshotsFacetFilterer{contract: contract}}, nil
}

// SnapshotsFacet is an auto generated Go binding around an Ethereum contract.
type SnapshotsFacet struct {
	SnapshotsFacetCaller     // Read-only binding to the contract
	SnapshotsFacetTransactor // Write-only binding to the contract
	SnapshotsFacetFilterer   // Log filterer for contract events
}

// SnapshotsFacetCaller is an auto generated read-only Go binding around an Ethereum contract.
type SnapshotsFacetCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SnapshotsFacetTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SnapshotsFacetTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SnapshotsFacetFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SnapshotsFacetFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SnapshotsFacetSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SnapshotsFacetSession struct {
	Contract     *SnapshotsFacet   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SnapshotsFacetCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SnapshotsFacetCallerSession struct {
	Contract *SnapshotsFacetCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// SnapshotsFacetTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SnapshotsFacetTransactorSession struct {
	Contract     *SnapshotsFacetTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// SnapshotsFacetRaw is an auto generated low-level Go binding around an Ethereum contract.
type SnapshotsFacetRaw struct {
	Contract *SnapshotsFacet // Generic contract binding to access the raw methods on
}

// SnapshotsFacetCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SnapshotsFacetCallerRaw struct {
	Contract *SnapshotsFacetCaller // Generic read-only contract binding to access the raw methods on
}

// SnapshotsFacetTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SnapshotsFacetTransactorRaw struct {
	Contract *SnapshotsFacetTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSnapshotsFacet creates a new instance of SnapshotsFacet, bound to a specific deployed contract.
func NewSnapshotsFacet(address common.Address, backend bind.ContractBackend) (*SnapshotsFacet, error) {
	contract, err := bindSnapshotsFacet(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SnapshotsFacet{SnapshotsFacetCaller: SnapshotsFacetCaller{contract: contract}, SnapshotsFacetTransactor: SnapshotsFacetTransactor{contract: contract}, SnapshotsFacetFilterer: SnapshotsFacetFilterer{contract: contract}}, nil
}

// NewSnapshotsFacetCaller creates a new read-only instance of SnapshotsFacet, bound to a specific deployed contract.
func NewSnapshotsFacetCaller(address common.Address, caller bind.ContractCaller) (*SnapshotsFacetCaller, error) {
	contract, err := bindSnapshotsFacet(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SnapshotsFacetCaller{contract: contract}, nil
}

// NewSnapshotsFacetTransactor creates a new write-only instance of SnapshotsFacet, bound to a specific deployed contract.
func NewSnapshotsFacetTransactor(address common.Address, transactor bind.ContractTransactor) (*SnapshotsFacetTransactor, error) {
	contract, err := bindSnapshotsFacet(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SnapshotsFacetTransactor{contract: contract}, nil
}

// NewSnapshotsFacetFilterer creates a new log filterer instance of SnapshotsFacet, bound to a specific deployed contract.
func NewSnapshotsFacetFilterer(address common.Address, filterer bind.ContractFilterer) (*SnapshotsFacetFilterer, error) {
	contract, err := bindSnapshotsFacet(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SnapshotsFacetFilterer{contract: contract}, nil
}

// bindSnapshotsFacet binds a generic wrapper to an already deployed contract.
func bindSnapshotsFacet(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SnapshotsFacetABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SnapshotsFacet *SnapshotsFacetRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SnapshotsFacet.Contract.SnapshotsFacetCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SnapshotsFacet *SnapshotsFacetRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.SnapshotsFacetTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SnapshotsFacet *SnapshotsFacetRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.SnapshotsFacetTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SnapshotsFacet *SnapshotsFacetCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SnapshotsFacet.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SnapshotsFacet *SnapshotsFacetTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SnapshotsFacet *SnapshotsFacetTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.contract.Transact(opts, method, params...)
}

// Epoch is a free data retrieval call binding the contract method 0x900cf0cf.
//
// Solidity: function epoch() view returns(uint256)
func (_SnapshotsFacet *SnapshotsFacetCaller) Epoch(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SnapshotsFacet.contract.Call(opts, &out, "epoch")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Epoch is a free data retrieval call binding the contract method 0x900cf0cf.
//
// Solidity: function epoch() view returns(uint256)
func (_SnapshotsFacet *SnapshotsFacetSession) Epoch() (*big.Int, error) {
	return _SnapshotsFacet.Contract.Epoch(&_SnapshotsFacet.CallOpts)
}

// Epoch is a free data retrieval call binding the contract method 0x900cf0cf.
//
// Solidity: function epoch() view returns(uint256)
func (_SnapshotsFacet *SnapshotsFacetCallerSession) Epoch() (*big.Int, error) {
	return _SnapshotsFacet.Contract.Epoch(&_SnapshotsFacet.CallOpts)
}

// GetChainIdFromSnapshot is a free data retrieval call binding the contract method 0x19f74669.
//
// Solidity: function getChainIdFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_SnapshotsFacet *SnapshotsFacetCaller) GetChainIdFromSnapshot(opts *bind.CallOpts, snapshotNumber *big.Int) (uint32, error) {
	var out []interface{}
	err := _SnapshotsFacet.contract.Call(opts, &out, "getChainIdFromSnapshot", snapshotNumber)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// GetChainIdFromSnapshot is a free data retrieval call binding the contract method 0x19f74669.
//
// Solidity: function getChainIdFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_SnapshotsFacet *SnapshotsFacetSession) GetChainIdFromSnapshot(snapshotNumber *big.Int) (uint32, error) {
	return _SnapshotsFacet.Contract.GetChainIdFromSnapshot(&_SnapshotsFacet.CallOpts, snapshotNumber)
}

// GetChainIdFromSnapshot is a free data retrieval call binding the contract method 0x19f74669.
//
// Solidity: function getChainIdFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_SnapshotsFacet *SnapshotsFacetCallerSession) GetChainIdFromSnapshot(snapshotNumber *big.Int) (uint32, error) {
	return _SnapshotsFacet.Contract.GetChainIdFromSnapshot(&_SnapshotsFacet.CallOpts, snapshotNumber)
}

// GetHeightFromSnapshot is a free data retrieval call binding the contract method 0xe380b228.
//
// Solidity: function getHeightFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_SnapshotsFacet *SnapshotsFacetCaller) GetHeightFromSnapshot(opts *bind.CallOpts, snapshotNumber *big.Int) (uint32, error) {
	var out []interface{}
	err := _SnapshotsFacet.contract.Call(opts, &out, "getHeightFromSnapshot", snapshotNumber)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// GetHeightFromSnapshot is a free data retrieval call binding the contract method 0xe380b228.
//
// Solidity: function getHeightFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_SnapshotsFacet *SnapshotsFacetSession) GetHeightFromSnapshot(snapshotNumber *big.Int) (uint32, error) {
	return _SnapshotsFacet.Contract.GetHeightFromSnapshot(&_SnapshotsFacet.CallOpts, snapshotNumber)
}

// GetHeightFromSnapshot is a free data retrieval call binding the contract method 0xe380b228.
//
// Solidity: function getHeightFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_SnapshotsFacet *SnapshotsFacetCallerSession) GetHeightFromSnapshot(snapshotNumber *big.Int) (uint32, error) {
	return _SnapshotsFacet.Contract.GetHeightFromSnapshot(&_SnapshotsFacet.CallOpts, snapshotNumber)
}

// GetMadHeightFromSnapshot is a free data retrieval call binding the contract method 0x4f4ea614.
//
// Solidity: function getMadHeightFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_SnapshotsFacet *SnapshotsFacetCaller) GetMadHeightFromSnapshot(opts *bind.CallOpts, snapshotNumber *big.Int) (uint32, error) {
	var out []interface{}
	err := _SnapshotsFacet.contract.Call(opts, &out, "getMadHeightFromSnapshot", snapshotNumber)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// GetMadHeightFromSnapshot is a free data retrieval call binding the contract method 0x4f4ea614.
//
// Solidity: function getMadHeightFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_SnapshotsFacet *SnapshotsFacetSession) GetMadHeightFromSnapshot(snapshotNumber *big.Int) (uint32, error) {
	return _SnapshotsFacet.Contract.GetMadHeightFromSnapshot(&_SnapshotsFacet.CallOpts, snapshotNumber)
}

// GetMadHeightFromSnapshot is a free data retrieval call binding the contract method 0x4f4ea614.
//
// Solidity: function getMadHeightFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_SnapshotsFacet *SnapshotsFacetCallerSession) GetMadHeightFromSnapshot(snapshotNumber *big.Int) (uint32, error) {
	return _SnapshotsFacet.Contract.GetMadHeightFromSnapshot(&_SnapshotsFacet.CallOpts, snapshotNumber)
}

// GetRawBlockClaimsSnapshot is a free data retrieval call binding the contract method 0x6372fe51.
//
// Solidity: function getRawBlockClaimsSnapshot(uint256 snapshotNumber) view returns(bytes)
func (_SnapshotsFacet *SnapshotsFacetCaller) GetRawBlockClaimsSnapshot(opts *bind.CallOpts, snapshotNumber *big.Int) ([]byte, error) {
	var out []interface{}
	err := _SnapshotsFacet.contract.Call(opts, &out, "getRawBlockClaimsSnapshot", snapshotNumber)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// GetRawBlockClaimsSnapshot is a free data retrieval call binding the contract method 0x6372fe51.
//
// Solidity: function getRawBlockClaimsSnapshot(uint256 snapshotNumber) view returns(bytes)
func (_SnapshotsFacet *SnapshotsFacetSession) GetRawBlockClaimsSnapshot(snapshotNumber *big.Int) ([]byte, error) {
	return _SnapshotsFacet.Contract.GetRawBlockClaimsSnapshot(&_SnapshotsFacet.CallOpts, snapshotNumber)
}

// GetRawBlockClaimsSnapshot is a free data retrieval call binding the contract method 0x6372fe51.
//
// Solidity: function getRawBlockClaimsSnapshot(uint256 snapshotNumber) view returns(bytes)
func (_SnapshotsFacet *SnapshotsFacetCallerSession) GetRawBlockClaimsSnapshot(snapshotNumber *big.Int) ([]byte, error) {
	return _SnapshotsFacet.Contract.GetRawBlockClaimsSnapshot(&_SnapshotsFacet.CallOpts, snapshotNumber)
}

// GetRawSignatureSnapshot is a free data retrieval call binding the contract method 0x35b6c632.
//
// Solidity: function getRawSignatureSnapshot(uint256 snapshotNumber) view returns(bytes)
func (_SnapshotsFacet *SnapshotsFacetCaller) GetRawSignatureSnapshot(opts *bind.CallOpts, snapshotNumber *big.Int) ([]byte, error) {
	var out []interface{}
	err := _SnapshotsFacet.contract.Call(opts, &out, "getRawSignatureSnapshot", snapshotNumber)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// GetRawSignatureSnapshot is a free data retrieval call binding the contract method 0x35b6c632.
//
// Solidity: function getRawSignatureSnapshot(uint256 snapshotNumber) view returns(bytes)
func (_SnapshotsFacet *SnapshotsFacetSession) GetRawSignatureSnapshot(snapshotNumber *big.Int) ([]byte, error) {
	return _SnapshotsFacet.Contract.GetRawSignatureSnapshot(&_SnapshotsFacet.CallOpts, snapshotNumber)
}

// GetRawSignatureSnapshot is a free data retrieval call binding the contract method 0x35b6c632.
//
// Solidity: function getRawSignatureSnapshot(uint256 snapshotNumber) view returns(bytes)
func (_SnapshotsFacet *SnapshotsFacetCallerSession) GetRawSignatureSnapshot(snapshotNumber *big.Int) ([]byte, error) {
	return _SnapshotsFacet.Contract.GetRawSignatureSnapshot(&_SnapshotsFacet.CallOpts, snapshotNumber)
}

// MinEthSnapshotSize is a free data retrieval call binding the contract method 0xe4b82105.
//
// Solidity: function minEthSnapshotSize() view returns(uint256)
func (_SnapshotsFacet *SnapshotsFacetCaller) MinEthSnapshotSize(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SnapshotsFacet.contract.Call(opts, &out, "minEthSnapshotSize")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinEthSnapshotSize is a free data retrieval call binding the contract method 0xe4b82105.
//
// Solidity: function minEthSnapshotSize() view returns(uint256)
func (_SnapshotsFacet *SnapshotsFacetSession) MinEthSnapshotSize() (*big.Int, error) {
	return _SnapshotsFacet.Contract.MinEthSnapshotSize(&_SnapshotsFacet.CallOpts)
}

// MinEthSnapshotSize is a free data retrieval call binding the contract method 0xe4b82105.
//
// Solidity: function minEthSnapshotSize() view returns(uint256)
func (_SnapshotsFacet *SnapshotsFacetCallerSession) MinEthSnapshotSize() (*big.Int, error) {
	return _SnapshotsFacet.Contract.MinEthSnapshotSize(&_SnapshotsFacet.CallOpts)
}

// MinMadSnapshotSize is a free data retrieval call binding the contract method 0xc17cb9ee.
//
// Solidity: function minMadSnapshotSize() view returns(uint256)
func (_SnapshotsFacet *SnapshotsFacetCaller) MinMadSnapshotSize(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SnapshotsFacet.contract.Call(opts, &out, "minMadSnapshotSize")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinMadSnapshotSize is a free data retrieval call binding the contract method 0xc17cb9ee.
//
// Solidity: function minMadSnapshotSize() view returns(uint256)
func (_SnapshotsFacet *SnapshotsFacetSession) MinMadSnapshotSize() (*big.Int, error) {
	return _SnapshotsFacet.Contract.MinMadSnapshotSize(&_SnapshotsFacet.CallOpts)
}

// MinMadSnapshotSize is a free data retrieval call binding the contract method 0xc17cb9ee.
//
// Solidity: function minMadSnapshotSize() view returns(uint256)
func (_SnapshotsFacet *SnapshotsFacetCallerSession) MinMadSnapshotSize() (*big.Int, error) {
	return _SnapshotsFacet.Contract.MinMadSnapshotSize(&_SnapshotsFacet.CallOpts)
}

// SnapshotDesperationDelay is a free data retrieval call binding the contract method 0x6b797156.
//
// Solidity: function snapshotDesperationDelay() view returns(uint256)
func (_SnapshotsFacet *SnapshotsFacetCaller) SnapshotDesperationDelay(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SnapshotsFacet.contract.Call(opts, &out, "snapshotDesperationDelay")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SnapshotDesperationDelay is a free data retrieval call binding the contract method 0x6b797156.
//
// Solidity: function snapshotDesperationDelay() view returns(uint256)
func (_SnapshotsFacet *SnapshotsFacetSession) SnapshotDesperationDelay() (*big.Int, error) {
	return _SnapshotsFacet.Contract.SnapshotDesperationDelay(&_SnapshotsFacet.CallOpts)
}

// SnapshotDesperationDelay is a free data retrieval call binding the contract method 0x6b797156.
//
// Solidity: function snapshotDesperationDelay() view returns(uint256)
func (_SnapshotsFacet *SnapshotsFacetCallerSession) SnapshotDesperationDelay() (*big.Int, error) {
	return _SnapshotsFacet.Contract.SnapshotDesperationDelay(&_SnapshotsFacet.CallOpts)
}

// SnapshotDesperationFactor is a free data retrieval call binding the contract method 0xfcf96652.
//
// Solidity: function snapshotDesperationFactor() view returns(uint256)
func (_SnapshotsFacet *SnapshotsFacetCaller) SnapshotDesperationFactor(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SnapshotsFacet.contract.Call(opts, &out, "snapshotDesperationFactor")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SnapshotDesperationFactor is a free data retrieval call binding the contract method 0xfcf96652.
//
// Solidity: function snapshotDesperationFactor() view returns(uint256)
func (_SnapshotsFacet *SnapshotsFacetSession) SnapshotDesperationFactor() (*big.Int, error) {
	return _SnapshotsFacet.Contract.SnapshotDesperationFactor(&_SnapshotsFacet.CallOpts)
}

// SnapshotDesperationFactor is a free data retrieval call binding the contract method 0xfcf96652.
//
// Solidity: function snapshotDesperationFactor() view returns(uint256)
func (_SnapshotsFacet *SnapshotsFacetCallerSession) SnapshotDesperationFactor() (*big.Int, error) {
	return _SnapshotsFacet.Contract.SnapshotDesperationFactor(&_SnapshotsFacet.CallOpts)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_SnapshotsFacet *SnapshotsFacetTransactor) GrantOperator(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _SnapshotsFacet.contract.Transact(opts, "grantOperator", who)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_SnapshotsFacet *SnapshotsFacetSession) GrantOperator(who common.Address) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.GrantOperator(&_SnapshotsFacet.TransactOpts, who)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_SnapshotsFacet *SnapshotsFacetTransactorSession) GrantOperator(who common.Address) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.GrantOperator(&_SnapshotsFacet.TransactOpts, who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_SnapshotsFacet *SnapshotsFacetTransactor) GrantOwner(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _SnapshotsFacet.contract.Transact(opts, "grantOwner", who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_SnapshotsFacet *SnapshotsFacetSession) GrantOwner(who common.Address) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.GrantOwner(&_SnapshotsFacet.TransactOpts, who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_SnapshotsFacet *SnapshotsFacetTransactorSession) GrantOwner(who common.Address) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.GrantOwner(&_SnapshotsFacet.TransactOpts, who)
}

// InitializeSnapshots is a paid mutator transaction binding the contract method 0x20d9a246.
//
// Solidity: function initializeSnapshots(address registry) returns()
func (_SnapshotsFacet *SnapshotsFacetTransactor) InitializeSnapshots(opts *bind.TransactOpts, registry common.Address) (*types.Transaction, error) {
	return _SnapshotsFacet.contract.Transact(opts, "initializeSnapshots", registry)
}

// InitializeSnapshots is a paid mutator transaction binding the contract method 0x20d9a246.
//
// Solidity: function initializeSnapshots(address registry) returns()
func (_SnapshotsFacet *SnapshotsFacetSession) InitializeSnapshots(registry common.Address) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.InitializeSnapshots(&_SnapshotsFacet.TransactOpts, registry)
}

// InitializeSnapshots is a paid mutator transaction binding the contract method 0x20d9a246.
//
// Solidity: function initializeSnapshots(address registry) returns()
func (_SnapshotsFacet *SnapshotsFacetTransactorSession) InitializeSnapshots(registry common.Address) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.InitializeSnapshots(&_SnapshotsFacet.TransactOpts, registry)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_SnapshotsFacet *SnapshotsFacetTransactor) RevokeOperator(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _SnapshotsFacet.contract.Transact(opts, "revokeOperator", who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_SnapshotsFacet *SnapshotsFacetSession) RevokeOperator(who common.Address) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.RevokeOperator(&_SnapshotsFacet.TransactOpts, who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_SnapshotsFacet *SnapshotsFacetTransactorSession) RevokeOperator(who common.Address) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.RevokeOperator(&_SnapshotsFacet.TransactOpts, who)
}

// SetEpoch is a paid mutator transaction binding the contract method 0x0ceb2cef.
//
// Solidity: function setEpoch(uint256 ns) returns()
func (_SnapshotsFacet *SnapshotsFacetTransactor) SetEpoch(opts *bind.TransactOpts, ns *big.Int) (*types.Transaction, error) {
	return _SnapshotsFacet.contract.Transact(opts, "setEpoch", ns)
}

// SetEpoch is a paid mutator transaction binding the contract method 0x0ceb2cef.
//
// Solidity: function setEpoch(uint256 ns) returns()
func (_SnapshotsFacet *SnapshotsFacetSession) SetEpoch(ns *big.Int) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.SetEpoch(&_SnapshotsFacet.TransactOpts, ns)
}

// SetEpoch is a paid mutator transaction binding the contract method 0x0ceb2cef.
//
// Solidity: function setEpoch(uint256 ns) returns()
func (_SnapshotsFacet *SnapshotsFacetTransactorSession) SetEpoch(ns *big.Int) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.SetEpoch(&_SnapshotsFacet.TransactOpts, ns)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_SnapshotsFacet *SnapshotsFacetTransactor) SetGovernance(opts *bind.TransactOpts, governance_ common.Address) (*types.Transaction, error) {
	return _SnapshotsFacet.contract.Transact(opts, "setGovernance", governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_SnapshotsFacet *SnapshotsFacetSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.SetGovernance(&_SnapshotsFacet.TransactOpts, governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_SnapshotsFacet *SnapshotsFacetTransactorSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.SetGovernance(&_SnapshotsFacet.TransactOpts, governance_)
}

// SetMinEthSnapshotSize is a paid mutator transaction binding the contract method 0x0d81dce4.
//
// Solidity: function setMinEthSnapshotSize(uint256 _minSize) returns()
func (_SnapshotsFacet *SnapshotsFacetTransactor) SetMinEthSnapshotSize(opts *bind.TransactOpts, _minSize *big.Int) (*types.Transaction, error) {
	return _SnapshotsFacet.contract.Transact(opts, "setMinEthSnapshotSize", _minSize)
}

// SetMinEthSnapshotSize is a paid mutator transaction binding the contract method 0x0d81dce4.
//
// Solidity: function setMinEthSnapshotSize(uint256 _minSize) returns()
func (_SnapshotsFacet *SnapshotsFacetSession) SetMinEthSnapshotSize(_minSize *big.Int) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.SetMinEthSnapshotSize(&_SnapshotsFacet.TransactOpts, _minSize)
}

// SetMinEthSnapshotSize is a paid mutator transaction binding the contract method 0x0d81dce4.
//
// Solidity: function setMinEthSnapshotSize(uint256 _minSize) returns()
func (_SnapshotsFacet *SnapshotsFacetTransactorSession) SetMinEthSnapshotSize(_minSize *big.Int) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.SetMinEthSnapshotSize(&_SnapshotsFacet.TransactOpts, _minSize)
}

// SetMinMadSnapshotSize is a paid mutator transaction binding the contract method 0x99e33e3d.
//
// Solidity: function setMinMadSnapshotSize(uint256 _minSize) returns()
func (_SnapshotsFacet *SnapshotsFacetTransactor) SetMinMadSnapshotSize(opts *bind.TransactOpts, _minSize *big.Int) (*types.Transaction, error) {
	return _SnapshotsFacet.contract.Transact(opts, "setMinMadSnapshotSize", _minSize)
}

// SetMinMadSnapshotSize is a paid mutator transaction binding the contract method 0x99e33e3d.
//
// Solidity: function setMinMadSnapshotSize(uint256 _minSize) returns()
func (_SnapshotsFacet *SnapshotsFacetSession) SetMinMadSnapshotSize(_minSize *big.Int) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.SetMinMadSnapshotSize(&_SnapshotsFacet.TransactOpts, _minSize)
}

// SetMinMadSnapshotSize is a paid mutator transaction binding the contract method 0x99e33e3d.
//
// Solidity: function setMinMadSnapshotSize(uint256 _minSize) returns()
func (_SnapshotsFacet *SnapshotsFacetTransactorSession) SetMinMadSnapshotSize(_minSize *big.Int) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.SetMinMadSnapshotSize(&_SnapshotsFacet.TransactOpts, _minSize)
}

// SetSnapshotDesperationDelay is a paid mutator transaction binding the contract method 0xde8fa4a5.
//
// Solidity: function setSnapshotDesperationDelay(uint256 _size) returns()
func (_SnapshotsFacet *SnapshotsFacetTransactor) SetSnapshotDesperationDelay(opts *bind.TransactOpts, _size *big.Int) (*types.Transaction, error) {
	return _SnapshotsFacet.contract.Transact(opts, "setSnapshotDesperationDelay", _size)
}

// SetSnapshotDesperationDelay is a paid mutator transaction binding the contract method 0xde8fa4a5.
//
// Solidity: function setSnapshotDesperationDelay(uint256 _size) returns()
func (_SnapshotsFacet *SnapshotsFacetSession) SetSnapshotDesperationDelay(_size *big.Int) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.SetSnapshotDesperationDelay(&_SnapshotsFacet.TransactOpts, _size)
}

// SetSnapshotDesperationDelay is a paid mutator transaction binding the contract method 0xde8fa4a5.
//
// Solidity: function setSnapshotDesperationDelay(uint256 _size) returns()
func (_SnapshotsFacet *SnapshotsFacetTransactorSession) SetSnapshotDesperationDelay(_size *big.Int) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.SetSnapshotDesperationDelay(&_SnapshotsFacet.TransactOpts, _size)
}

// SetSnapshotDesperationFactor is a paid mutator transaction binding the contract method 0xeb157064.
//
// Solidity: function setSnapshotDesperationFactor(uint256 _size) returns()
func (_SnapshotsFacet *SnapshotsFacetTransactor) SetSnapshotDesperationFactor(opts *bind.TransactOpts, _size *big.Int) (*types.Transaction, error) {
	return _SnapshotsFacet.contract.Transact(opts, "setSnapshotDesperationFactor", _size)
}

// SetSnapshotDesperationFactor is a paid mutator transaction binding the contract method 0xeb157064.
//
// Solidity: function setSnapshotDesperationFactor(uint256 _size) returns()
func (_SnapshotsFacet *SnapshotsFacetSession) SetSnapshotDesperationFactor(_size *big.Int) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.SetSnapshotDesperationFactor(&_SnapshotsFacet.TransactOpts, _size)
}

// SetSnapshotDesperationFactor is a paid mutator transaction binding the contract method 0xeb157064.
//
// Solidity: function setSnapshotDesperationFactor(uint256 _size) returns()
func (_SnapshotsFacet *SnapshotsFacetTransactorSession) SetSnapshotDesperationFactor(_size *big.Int) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.SetSnapshotDesperationFactor(&_SnapshotsFacet.TransactOpts, _size)
}

// Snapshot is a paid mutator transaction binding the contract method 0x08ca1f25.
//
// Solidity: function snapshot(bytes _signatureGroup, bytes _bclaims) returns(bool)
func (_SnapshotsFacet *SnapshotsFacetTransactor) Snapshot(opts *bind.TransactOpts, _signatureGroup []byte, _bclaims []byte) (*types.Transaction, error) {
	return _SnapshotsFacet.contract.Transact(opts, "snapshot", _signatureGroup, _bclaims)
}

// Snapshot is a paid mutator transaction binding the contract method 0x08ca1f25.
//
// Solidity: function snapshot(bytes _signatureGroup, bytes _bclaims) returns(bool)
func (_SnapshotsFacet *SnapshotsFacetSession) Snapshot(_signatureGroup []byte, _bclaims []byte) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.Snapshot(&_SnapshotsFacet.TransactOpts, _signatureGroup, _bclaims)
}

// Snapshot is a paid mutator transaction binding the contract method 0x08ca1f25.
//
// Solidity: function snapshot(bytes _signatureGroup, bytes _bclaims) returns(bool)
func (_SnapshotsFacet *SnapshotsFacetTransactorSession) Snapshot(_signatureGroup []byte, _bclaims []byte) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.Snapshot(&_SnapshotsFacet.TransactOpts, _signatureGroup, _bclaims)
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_SnapshotsFacet *SnapshotsFacetTransactor) Start(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SnapshotsFacet.contract.Transact(opts, "start")
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_SnapshotsFacet *SnapshotsFacetSession) Start() (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.Start(&_SnapshotsFacet.TransactOpts)
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_SnapshotsFacet *SnapshotsFacetTransactorSession) Start() (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.Start(&_SnapshotsFacet.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_SnapshotsFacet *SnapshotsFacetTransactor) Stop(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SnapshotsFacet.contract.Transact(opts, "stop")
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_SnapshotsFacet *SnapshotsFacetSession) Stop() (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.Stop(&_SnapshotsFacet.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_SnapshotsFacet *SnapshotsFacetTransactorSession) Stop() (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.Stop(&_SnapshotsFacet.TransactOpts)
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_SnapshotsFacet *SnapshotsFacetTransactor) TakeOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SnapshotsFacet.contract.Transact(opts, "takeOwnership")
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_SnapshotsFacet *SnapshotsFacetSession) TakeOwnership() (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.TakeOwnership(&_SnapshotsFacet.TransactOpts)
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_SnapshotsFacet *SnapshotsFacetTransactorSession) TakeOwnership() (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.TakeOwnership(&_SnapshotsFacet.TransactOpts)
}

// SnapshotsFacetSnapshotTakenIterator is returned from FilterSnapshotTaken and is used to iterate over the raw logs and unpacked data for SnapshotTaken events raised by the SnapshotsFacet contract.
type SnapshotsFacetSnapshotTakenIterator struct {
	Event *SnapshotsFacetSnapshotTaken // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SnapshotsFacetSnapshotTakenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SnapshotsFacetSnapshotTaken)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SnapshotsFacetSnapshotTaken)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SnapshotsFacetSnapshotTakenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SnapshotsFacetSnapshotTakenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SnapshotsFacetSnapshotTaken represents a SnapshotTaken event raised by the SnapshotsFacet contract.
type SnapshotsFacetSnapshotTaken struct {
	ChainId        uint32
	Epoch          *big.Int
	Height         uint32
	Validator      common.Address
	StartingETHDKG bool
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterSnapshotTaken is a free log retrieval operation binding the contract event 0x6d438b6b835d16cdae6efdc0259fdfba17e6aa32dae81863a2467866f85f724a.
//
// Solidity: event SnapshotTaken(uint32 chainId, uint256 indexed epoch, uint32 height, address indexed validator, bool startingETHDKG)
func (_SnapshotsFacet *SnapshotsFacetFilterer) FilterSnapshotTaken(opts *bind.FilterOpts, epoch []*big.Int, validator []common.Address) (*SnapshotsFacetSnapshotTakenIterator, error) {

	var epochRule []interface{}
	for _, epochItem := range epoch {
		epochRule = append(epochRule, epochItem)
	}

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _SnapshotsFacet.contract.FilterLogs(opts, "SnapshotTaken", epochRule, validatorRule)
	if err != nil {
		return nil, err
	}
	return &SnapshotsFacetSnapshotTakenIterator{contract: _SnapshotsFacet.contract, event: "SnapshotTaken", logs: logs, sub: sub}, nil
}

// WatchSnapshotTaken is a free log subscription operation binding the contract event 0x6d438b6b835d16cdae6efdc0259fdfba17e6aa32dae81863a2467866f85f724a.
//
// Solidity: event SnapshotTaken(uint32 chainId, uint256 indexed epoch, uint32 height, address indexed validator, bool startingETHDKG)
func (_SnapshotsFacet *SnapshotsFacetFilterer) WatchSnapshotTaken(opts *bind.WatchOpts, sink chan<- *SnapshotsFacetSnapshotTaken, epoch []*big.Int, validator []common.Address) (event.Subscription, error) {

	var epochRule []interface{}
	for _, epochItem := range epoch {
		epochRule = append(epochRule, epochItem)
	}

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _SnapshotsFacet.contract.WatchLogs(opts, "SnapshotTaken", epochRule, validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SnapshotsFacetSnapshotTaken)
				if err := _SnapshotsFacet.contract.UnpackLog(event, "SnapshotTaken", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSnapshotTaken is a log parse operation binding the contract event 0x6d438b6b835d16cdae6efdc0259fdfba17e6aa32dae81863a2467866f85f724a.
//
// Solidity: event SnapshotTaken(uint32 chainId, uint256 indexed epoch, uint32 height, address indexed validator, bool startingETHDKG)
func (_SnapshotsFacet *SnapshotsFacetFilterer) ParseSnapshotTaken(log types.Log) (*SnapshotsFacetSnapshotTaken, error) {
	event := new(SnapshotsFacetSnapshotTaken)
	if err := _SnapshotsFacet.contract.UnpackLog(event, "SnapshotTaken", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SnapshotsLibraryMetaData contains all meta data concerning the SnapshotsLibrary contract.
var SnapshotsLibraryMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"chainId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"height\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"startingETHDKG\",\"type\":\"bool\"}],\"name\":\"SnapshotTaken\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"a\",\"type\":\"bytes\"}],\"name\":\"bytes2str\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"a\",\"type\":\"int256\"}],\"name\":\"int2str\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"numValidators\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"myIdx\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"blocksSinceDesperation\",\"type\":\"int256\"},{\"internalType\":\"bytes32\",\"name\":\"blsig\",\"type\":\"bytes32\"},{\"internalType\":\"int256\",\"name\":\"desperationFactor\",\"type\":\"int256\"}],\"name\":\"mayValidatorSnapshot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"uint2str\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]",
	Bin: "0x61148f610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100565760003560e01c80633ff33f9d1461005b57806373a51d711461008b578063997bc6c9146100bb578063f76f950e146100eb575b600080fd5b61007560048036038101906100709190610aab565b61011b565b6040516100829190610cf6565b60405180910390f35b6100a560048036038101906100a09190610a35565b61037e565b6040516100b29190610d11565b60405180910390f35b6100d560048036038101906100d09190610a7e565b610613565b6040516100e29190610d11565b60405180910390f35b61010560048036038101906101009190610b26565b61081d565b6040516101129190610d11565b60405180910390f35b6000806001905060008590505b600081131561017657818461013d9190610f04565b81610148919061102a565b9050818061015590611192565b9250506003886101659190610f04565b82131561017157610176565b610128565b5060008460001c90506000888261018d919061125f565b9050600089848361019e9190610de3565b6101a8919061122e565b905081811315610296576000828a121580156101c35750818a125b905080610289576101d38b610613565b6101dc8b610613565b6101e58b610613565b61020d8b6040516020016101f99190610c3f565b60405160208183030381529060405261037e565b6102168b610613565b61021f88610613565b61022888610613565b60405160200161023e9796959493929190610c5a565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102809190610d33565b60405180910390fd5b8095505050505050610375565b6000828a1215806102a65750818a125b90508061036c576102b68b610613565b6102bf8b610613565b6102c88b610613565b6102f08b6040516020016102dc9190610c3f565b60405160208183030381529060405261037e565b6102f98b610613565b61030288610613565b61030b88610613565b6040516020016103219796959493929190610c5a565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103639190610d33565b60405180910390fd5b80955050505050505b95945050505050565b60606000600283516103909190610fd0565b600261039c9190610e77565b905060008167ffffffffffffffff8111156103ba576103b9611397565b5b6040519080825280601f01601f1916602001820160405280156103ec5781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061042457610423611368565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061048857610487611368565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006002905060005b85518110156106075760008682815181106104de576104dd611368565b5b602001015160f81c60f81b60f81c905060006010826104fd9190610f9f565b9050600a8160ff161015610512576030610515565b60375b816105209190610ecd565b60f81b85858061052f906111db565b96508151811061054257610541611368565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060108261057e9190611290565b9050600a8160ff161015610593576030610596565b60375b816105a19190610ecd565b60f81b8585806105b0906111db565b9650815181106105c3576105c2611368565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350505080806105ff906111db565b9150506104c0565b50819350505050919050565b6060600082141561065b576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050610818565b6000808312905060008161066f578361067a565b83610679906112c1565b5b90506000808290505b600081146106ad578180610696906111db565b925050600a816106a69190610f6e565b9050610683565b5082156106c157806106be906111db565b90505b60008167ffffffffffffffff8111156106dd576106dc611397565b5b6040519080825280601f01601f19166020018201604052801561070f5781602001600182028036833780820191505090505b509050600082905060008490505b600081146107a357600a81610732919061125f565b603061073e9190610e77565b60f81b838361074c90611137565b935083815181106107605761075f611368565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8161079c9190610f6e565b905061071d565b50841561080f577f2d00000000000000000000000000000000000000000000000000000000000000826000815181106107df576107de611368565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505b81955050505050505b919050565b60606000821415610865576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050610981565b6000808390505b6000811461089657818061087f906111db565b925050600a8161088f9190610f6e565b905061086c565b5060008167ffffffffffffffff8111156108b3576108b2611397565b5b6040519080825280601f01601f1916602001820160405280156108e55781602001600182028036833780820191505090505b509050600082905060008590505b6000811461097957600a81610908919061125f565b60306109149190610e77565b60f81b838361092290611137565b9350838151811061093657610935611368565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a816109729190610f6e565b90506108f3565b508193505050505b919050565b600061099961099484610d7a565b610d55565b9050828152602081018484840111156109b5576109b46113cb565b5b6109c08482856110f5565b509392505050565b6000813590506109d781611414565b92915050565b600082601f8301126109f2576109f16113c6565b5b8135610a02848260208601610986565b91505092915050565b600081359050610a1a8161142b565b92915050565b600081359050610a2f81611442565b92915050565b600060208284031215610a4b57610a4a6113d5565b5b600082013567ffffffffffffffff811115610a6957610a686113d0565b5b610a75848285016109dd565b91505092915050565b600060208284031215610a9457610a936113d5565b5b6000610aa284828501610a0b565b91505092915050565b600080600080600060a08688031215610ac757610ac66113d5565b5b6000610ad588828901610a0b565b9550506020610ae688828901610a0b565b9450506040610af788828901610a0b565b9350506060610b08888289016109c8565b9250506080610b1988828901610a0b565b9150509295509295909350565b600060208284031215610b3c57610b3b6113d5565b5b6000610b4a84828501610a20565b91505092915050565b610b5c816110be565b82525050565b610b73610b6e826110ca565b611224565b82525050565b6000610b8482610dab565b610b8e8185610db6565b9350610b9e818560208601611104565b610ba7816113da565b840191505092915050565b6000610bbd82610dab565b610bc78185610dc7565b9350610bd7818560208601611104565b610be0816113da565b840191505092915050565b6000610bf682610dab565b610c008185610dd8565b9350610c10818560208601611104565b80840191505092915050565b6000610c29600283610dd8565b9150610c34826113eb565b600282019050919050565b6000610c4b8284610b62565b60208201915081905092915050565b6000610c66828a610beb565b9150610c7182610c1c565b9150610c7d8289610beb565b9150610c8882610c1c565b9150610c948288610beb565b9150610c9f82610c1c565b9150610cab8287610beb565b9150610cb78286610beb565b9150610cc282610c1c565b9150610cce8285610beb565b9150610cd982610c1c565b9150610ce58284610beb565b915081905098975050505050505050565b6000602082019050610d0b6000830184610b53565b92915050565b60006020820190508181036000830152610d2b8184610bb2565b905092915050565b60006020820190508181036000830152610d4d8184610b79565b905092915050565b6000610d5f610d70565b9050610d6b8282611161565b919050565b6000604051905090565b600067ffffffffffffffff821115610d9557610d94611397565b5b610d9e826113da565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000610dee826110d4565b9150610df9836110d4565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03831360008312151615610e3457610e3361130a565b5b817f8000000000000000000000000000000000000000000000000000000000000000038312600083121615610e6c57610e6b61130a565b5b828201905092915050565b6000610e82826110de565b9150610e8d836110de565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610ec257610ec161130a565b5b828201905092915050565b6000610ed8826110e8565b9150610ee3836110e8565b92508260ff03821115610ef957610ef861130a565b5b828201905092915050565b6000610f0f826110d4565b9150610f1a836110d4565b925082610f2a57610f29611339565b5b600160000383147f800000000000000000000000000000000000000000000000000000000000000083141615610f6357610f6261130a565b5b828205905092915050565b6000610f79826110de565b9150610f84836110de565b925082610f9457610f93611339565b5b828204905092915050565b6000610faa826110e8565b9150610fb5836110e8565b925082610fc557610fc4611339565b5b828204905092915050565b6000610fdb826110de565b9150610fe6836110de565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561101f5761101e61130a565b5b828202905092915050565b6000611035826110d4565b9150611040836110d4565b9250827f80000000000000000000000000000000000000000000000000000000000000000182126000841215161561107b5761107a61130a565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0182136000841216156110b3576110b261130a565b5b828203905092915050565b60008115159050919050565b6000819050919050565b6000819050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015611122578082015181840152602081019050611107565b83811115611131576000848401525b50505050565b6000611142826110de565b915060008214156111565761115561130a565b5b600182039050919050565b61116a826113da565b810181811067ffffffffffffffff8211171561118957611188611397565b5b80604052505050565b600061119d826110d4565b91507f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156111d0576111cf61130a565b5b600182019050919050565b60006111e6826110de565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156112195761121861130a565b5b600182019050919050565b6000819050919050565b6000611239826110d4565b9150611244836110d4565b92508261125457611253611339565b5b828207905092915050565b600061126a826110de565b9150611275836110de565b92508261128557611284611339565b5b828206905092915050565b600061129b826110e8565b91506112a6836110e8565b9250826112b6576112b5611339565b5b828206905092915050565b60006112cc826110d4565b91507f80000000000000000000000000000000000000000000000000000000000000008214156112ff576112fe61130a565b5b816000039050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f2c20000000000000000000000000000000000000000000000000000000000000600082015250565b61141d816110ca565b811461142857600080fd5b50565b611434816110d4565b811461143f57600080fd5b50565b61144b816110de565b811461145657600080fd5b5056fea26469706673582212204bae8ee20e300e93265396b9407a58b867a1eb728ddc73f2c264ae7b4f553fce64736f6c63430008060033",
}

// SnapshotsLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use SnapshotsLibraryMetaData.ABI instead.
var SnapshotsLibraryABI = SnapshotsLibraryMetaData.ABI

// SnapshotsLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SnapshotsLibraryMetaData.Bin instead.
var SnapshotsLibraryBin = SnapshotsLibraryMetaData.Bin

// DeploySnapshotsLibrary deploys a new Ethereum contract, binding an instance of SnapshotsLibrary to it.
func DeploySnapshotsLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *SnapshotsLibrary, error) {
	parsed, err := SnapshotsLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SnapshotsLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SnapshotsLibrary{SnapshotsLibraryCaller: SnapshotsLibraryCaller{contract: contract}, SnapshotsLibraryTransactor: SnapshotsLibraryTransactor{contract: contract}, SnapshotsLibraryFilterer: SnapshotsLibraryFilterer{contract: contract}}, nil
}

// SnapshotsLibrary is an auto generated Go binding around an Ethereum contract.
type SnapshotsLibrary struct {
	SnapshotsLibraryCaller     // Read-only binding to the contract
	SnapshotsLibraryTransactor // Write-only binding to the contract
	SnapshotsLibraryFilterer   // Log filterer for contract events
}

// SnapshotsLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type SnapshotsLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SnapshotsLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SnapshotsLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SnapshotsLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SnapshotsLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SnapshotsLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SnapshotsLibrarySession struct {
	Contract     *SnapshotsLibrary // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SnapshotsLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SnapshotsLibraryCallerSession struct {
	Contract *SnapshotsLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// SnapshotsLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SnapshotsLibraryTransactorSession struct {
	Contract     *SnapshotsLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// SnapshotsLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type SnapshotsLibraryRaw struct {
	Contract *SnapshotsLibrary // Generic contract binding to access the raw methods on
}

// SnapshotsLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SnapshotsLibraryCallerRaw struct {
	Contract *SnapshotsLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// SnapshotsLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SnapshotsLibraryTransactorRaw struct {
	Contract *SnapshotsLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSnapshotsLibrary creates a new instance of SnapshotsLibrary, bound to a specific deployed contract.
func NewSnapshotsLibrary(address common.Address, backend bind.ContractBackend) (*SnapshotsLibrary, error) {
	contract, err := bindSnapshotsLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SnapshotsLibrary{SnapshotsLibraryCaller: SnapshotsLibraryCaller{contract: contract}, SnapshotsLibraryTransactor: SnapshotsLibraryTransactor{contract: contract}, SnapshotsLibraryFilterer: SnapshotsLibraryFilterer{contract: contract}}, nil
}

// NewSnapshotsLibraryCaller creates a new read-only instance of SnapshotsLibrary, bound to a specific deployed contract.
func NewSnapshotsLibraryCaller(address common.Address, caller bind.ContractCaller) (*SnapshotsLibraryCaller, error) {
	contract, err := bindSnapshotsLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SnapshotsLibraryCaller{contract: contract}, nil
}

// NewSnapshotsLibraryTransactor creates a new write-only instance of SnapshotsLibrary, bound to a specific deployed contract.
func NewSnapshotsLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*SnapshotsLibraryTransactor, error) {
	contract, err := bindSnapshotsLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SnapshotsLibraryTransactor{contract: contract}, nil
}

// NewSnapshotsLibraryFilterer creates a new log filterer instance of SnapshotsLibrary, bound to a specific deployed contract.
func NewSnapshotsLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*SnapshotsLibraryFilterer, error) {
	contract, err := bindSnapshotsLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SnapshotsLibraryFilterer{contract: contract}, nil
}

// bindSnapshotsLibrary binds a generic wrapper to an already deployed contract.
func bindSnapshotsLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SnapshotsLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SnapshotsLibrary *SnapshotsLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SnapshotsLibrary.Contract.SnapshotsLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SnapshotsLibrary *SnapshotsLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SnapshotsLibrary.Contract.SnapshotsLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SnapshotsLibrary *SnapshotsLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SnapshotsLibrary.Contract.SnapshotsLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SnapshotsLibrary *SnapshotsLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SnapshotsLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SnapshotsLibrary *SnapshotsLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SnapshotsLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SnapshotsLibrary *SnapshotsLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SnapshotsLibrary.Contract.contract.Transact(opts, method, params...)
}

// Bytes2str is a free data retrieval call binding the contract method 0x73a51d71.
//
// Solidity: function bytes2str(bytes a) pure returns(string)
func (_SnapshotsLibrary *SnapshotsLibraryCaller) Bytes2str(opts *bind.CallOpts, a []byte) (string, error) {
	var out []interface{}
	err := _SnapshotsLibrary.contract.Call(opts, &out, "bytes2str", a)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Bytes2str is a free data retrieval call binding the contract method 0x73a51d71.
//
// Solidity: function bytes2str(bytes a) pure returns(string)
func (_SnapshotsLibrary *SnapshotsLibrarySession) Bytes2str(a []byte) (string, error) {
	return _SnapshotsLibrary.Contract.Bytes2str(&_SnapshotsLibrary.CallOpts, a)
}

// Bytes2str is a free data retrieval call binding the contract method 0x73a51d71.
//
// Solidity: function bytes2str(bytes a) pure returns(string)
func (_SnapshotsLibrary *SnapshotsLibraryCallerSession) Bytes2str(a []byte) (string, error) {
	return _SnapshotsLibrary.Contract.Bytes2str(&_SnapshotsLibrary.CallOpts, a)
}

// Int2str is a free data retrieval call binding the contract method 0x997bc6c9.
//
// Solidity: function int2str(int256 a) pure returns(string)
func (_SnapshotsLibrary *SnapshotsLibraryCaller) Int2str(opts *bind.CallOpts, a *big.Int) (string, error) {
	var out []interface{}
	err := _SnapshotsLibrary.contract.Call(opts, &out, "int2str", a)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Int2str is a free data retrieval call binding the contract method 0x997bc6c9.
//
// Solidity: function int2str(int256 a) pure returns(string)
func (_SnapshotsLibrary *SnapshotsLibrarySession) Int2str(a *big.Int) (string, error) {
	return _SnapshotsLibrary.Contract.Int2str(&_SnapshotsLibrary.CallOpts, a)
}

// Int2str is a free data retrieval call binding the contract method 0x997bc6c9.
//
// Solidity: function int2str(int256 a) pure returns(string)
func (_SnapshotsLibrary *SnapshotsLibraryCallerSession) Int2str(a *big.Int) (string, error) {
	return _SnapshotsLibrary.Contract.Int2str(&_SnapshotsLibrary.CallOpts, a)
}

// MayValidatorSnapshot is a free data retrieval call binding the contract method 0x3ff33f9d.
//
// Solidity: function mayValidatorSnapshot(int256 numValidators, int256 myIdx, int256 blocksSinceDesperation, bytes32 blsig, int256 desperationFactor) pure returns(bool)
func (_SnapshotsLibrary *SnapshotsLibraryCaller) MayValidatorSnapshot(opts *bind.CallOpts, numValidators *big.Int, myIdx *big.Int, blocksSinceDesperation *big.Int, blsig [32]byte, desperationFactor *big.Int) (bool, error) {
	var out []interface{}
	err := _SnapshotsLibrary.contract.Call(opts, &out, "mayValidatorSnapshot", numValidators, myIdx, blocksSinceDesperation, blsig, desperationFactor)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// MayValidatorSnapshot is a free data retrieval call binding the contract method 0x3ff33f9d.
//
// Solidity: function mayValidatorSnapshot(int256 numValidators, int256 myIdx, int256 blocksSinceDesperation, bytes32 blsig, int256 desperationFactor) pure returns(bool)
func (_SnapshotsLibrary *SnapshotsLibrarySession) MayValidatorSnapshot(numValidators *big.Int, myIdx *big.Int, blocksSinceDesperation *big.Int, blsig [32]byte, desperationFactor *big.Int) (bool, error) {
	return _SnapshotsLibrary.Contract.MayValidatorSnapshot(&_SnapshotsLibrary.CallOpts, numValidators, myIdx, blocksSinceDesperation, blsig, desperationFactor)
}

// MayValidatorSnapshot is a free data retrieval call binding the contract method 0x3ff33f9d.
//
// Solidity: function mayValidatorSnapshot(int256 numValidators, int256 myIdx, int256 blocksSinceDesperation, bytes32 blsig, int256 desperationFactor) pure returns(bool)
func (_SnapshotsLibrary *SnapshotsLibraryCallerSession) MayValidatorSnapshot(numValidators *big.Int, myIdx *big.Int, blocksSinceDesperation *big.Int, blsig [32]byte, desperationFactor *big.Int) (bool, error) {
	return _SnapshotsLibrary.Contract.MayValidatorSnapshot(&_SnapshotsLibrary.CallOpts, numValidators, myIdx, blocksSinceDesperation, blsig, desperationFactor)
}

// Uint2str is a free data retrieval call binding the contract method 0xf76f950e.
//
// Solidity: function uint2str(uint256 a) pure returns(string)
func (_SnapshotsLibrary *SnapshotsLibraryCaller) Uint2str(opts *bind.CallOpts, a *big.Int) (string, error) {
	var out []interface{}
	err := _SnapshotsLibrary.contract.Call(opts, &out, "uint2str", a)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Uint2str is a free data retrieval call binding the contract method 0xf76f950e.
//
// Solidity: function uint2str(uint256 a) pure returns(string)
func (_SnapshotsLibrary *SnapshotsLibrarySession) Uint2str(a *big.Int) (string, error) {
	return _SnapshotsLibrary.Contract.Uint2str(&_SnapshotsLibrary.CallOpts, a)
}

// Uint2str is a free data retrieval call binding the contract method 0xf76f950e.
//
// Solidity: function uint2str(uint256 a) pure returns(string)
func (_SnapshotsLibrary *SnapshotsLibraryCallerSession) Uint2str(a *big.Int) (string, error) {
	return _SnapshotsLibrary.Contract.Uint2str(&_SnapshotsLibrary.CallOpts, a)
}

// SnapshotsLibrarySnapshotTakenIterator is returned from FilterSnapshotTaken and is used to iterate over the raw logs and unpacked data for SnapshotTaken events raised by the SnapshotsLibrary contract.
type SnapshotsLibrarySnapshotTakenIterator struct {
	Event *SnapshotsLibrarySnapshotTaken // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SnapshotsLibrarySnapshotTakenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SnapshotsLibrarySnapshotTaken)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SnapshotsLibrarySnapshotTaken)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SnapshotsLibrarySnapshotTakenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SnapshotsLibrarySnapshotTakenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SnapshotsLibrarySnapshotTaken represents a SnapshotTaken event raised by the SnapshotsLibrary contract.
type SnapshotsLibrarySnapshotTaken struct {
	ChainId        uint32
	Epoch          *big.Int
	Height         uint32
	Validator      common.Address
	StartingETHDKG bool
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterSnapshotTaken is a free log retrieval operation binding the contract event 0x6d438b6b835d16cdae6efdc0259fdfba17e6aa32dae81863a2467866f85f724a.
//
// Solidity: event SnapshotTaken(uint32 chainId, uint256 indexed epoch, uint32 height, address indexed validator, bool startingETHDKG)
func (_SnapshotsLibrary *SnapshotsLibraryFilterer) FilterSnapshotTaken(opts *bind.FilterOpts, epoch []*big.Int, validator []common.Address) (*SnapshotsLibrarySnapshotTakenIterator, error) {

	var epochRule []interface{}
	for _, epochItem := range epoch {
		epochRule = append(epochRule, epochItem)
	}

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _SnapshotsLibrary.contract.FilterLogs(opts, "SnapshotTaken", epochRule, validatorRule)
	if err != nil {
		return nil, err
	}
	return &SnapshotsLibrarySnapshotTakenIterator{contract: _SnapshotsLibrary.contract, event: "SnapshotTaken", logs: logs, sub: sub}, nil
}

// WatchSnapshotTaken is a free log subscription operation binding the contract event 0x6d438b6b835d16cdae6efdc0259fdfba17e6aa32dae81863a2467866f85f724a.
//
// Solidity: event SnapshotTaken(uint32 chainId, uint256 indexed epoch, uint32 height, address indexed validator, bool startingETHDKG)
func (_SnapshotsLibrary *SnapshotsLibraryFilterer) WatchSnapshotTaken(opts *bind.WatchOpts, sink chan<- *SnapshotsLibrarySnapshotTaken, epoch []*big.Int, validator []common.Address) (event.Subscription, error) {

	var epochRule []interface{}
	for _, epochItem := range epoch {
		epochRule = append(epochRule, epochItem)
	}

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _SnapshotsLibrary.contract.WatchLogs(opts, "SnapshotTaken", epochRule, validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SnapshotsLibrarySnapshotTaken)
				if err := _SnapshotsLibrary.contract.UnpackLog(event, "SnapshotTaken", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSnapshotTaken is a log parse operation binding the contract event 0x6d438b6b835d16cdae6efdc0259fdfba17e6aa32dae81863a2467866f85f724a.
//
// Solidity: event SnapshotTaken(uint32 chainId, uint256 indexed epoch, uint32 height, address indexed validator, bool startingETHDKG)
func (_SnapshotsLibrary *SnapshotsLibraryFilterer) ParseSnapshotTaken(log types.Log) (*SnapshotsLibrarySnapshotTaken, error) {
	event := new(SnapshotsLibrarySnapshotTaken)
	if err := _SnapshotsLibrary.contract.UnpackLog(event, "SnapshotTaken", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakeNFTMetaData contains all meta data concerning the StakeNFT contract.
var StakeNFTMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractIERC20Transferable\",\"name\":\"MadToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"governance_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accumulatorScaleFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payoutEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payoutMadToken\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"burnTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payoutEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payoutMadToken\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cbState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"collectEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"collectToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"magic_\",\"type\":\"uint8\"}],\"name\":\"depositEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"magic_\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"estimateEthCollection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateExcessEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"excess\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateExcessToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"excess\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"estimateTokenCollection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEthAccumulator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accumulator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slush\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGovernance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"getPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"freeAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawFreeAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accumulatorEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accumulatorToken\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenAccumulator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accumulator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slush\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalReserveEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalReserveMadToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isAllowedProposal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration_\",\"type\":\"uint256\"}],\"name\":\"lockPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"numberShares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration_\",\"type\":\"uint256\"}],\"name\":\"lockWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"numberShares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration_\",\"type\":\"uint256\"}],\"name\":\"mintTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governance_\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"}],\"name\":\"skimExcessEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"excess\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"}],\"name\":\"skimExcessToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"excess\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tripCB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "",
}

// StakeNFTABI is the input ABI used to generate the binding from.
// Deprecated: Use StakeNFTMetaData.ABI instead.
var StakeNFTABI = StakeNFTMetaData.ABI

// StakeNFTBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StakeNFTMetaData.Bin instead.
var StakeNFTBin = StakeNFTMetaData.Bin

// DeployStakeNFT deploys a new Ethereum contract, binding an instance of StakeNFT to it.
func DeployStakeNFT(auth *bind.TransactOpts, backend bind.ContractBackend, MadToken_ common.Address, admin_ common.Address, governance_ common.Address) (common.Address, *types.Transaction, *StakeNFT, error) {
	parsed, err := StakeNFTMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StakeNFTBin), backend, MadToken_, admin_, governance_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &StakeNFT{StakeNFTCaller: StakeNFTCaller{contract: contract}, StakeNFTTransactor: StakeNFTTransactor{contract: contract}, StakeNFTFilterer: StakeNFTFilterer{contract: contract}}, nil
}

// StakeNFT is an auto generated Go binding around an Ethereum contract.
type StakeNFT struct {
	StakeNFTCaller     // Read-only binding to the contract
	StakeNFTTransactor // Write-only binding to the contract
	StakeNFTFilterer   // Log filterer for contract events
}

// StakeNFTCaller is an auto generated read-only Go binding around an Ethereum contract.
type StakeNFTCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakeNFTTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StakeNFTTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakeNFTFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StakeNFTFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakeNFTSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StakeNFTSession struct {
	Contract     *StakeNFT         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StakeNFTCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StakeNFTCallerSession struct {
	Contract *StakeNFTCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// StakeNFTTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StakeNFTTransactorSession struct {
	Contract     *StakeNFTTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// StakeNFTRaw is an auto generated low-level Go binding around an Ethereum contract.
type StakeNFTRaw struct {
	Contract *StakeNFT // Generic contract binding to access the raw methods on
}

// StakeNFTCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StakeNFTCallerRaw struct {
	Contract *StakeNFTCaller // Generic read-only contract binding to access the raw methods on
}

// StakeNFTTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StakeNFTTransactorRaw struct {
	Contract *StakeNFTTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStakeNFT creates a new instance of StakeNFT, bound to a specific deployed contract.
func NewStakeNFT(address common.Address, backend bind.ContractBackend) (*StakeNFT, error) {
	contract, err := bindStakeNFT(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &StakeNFT{StakeNFTCaller: StakeNFTCaller{contract: contract}, StakeNFTTransactor: StakeNFTTransactor{contract: contract}, StakeNFTFilterer: StakeNFTFilterer{contract: contract}}, nil
}

// NewStakeNFTCaller creates a new read-only instance of StakeNFT, bound to a specific deployed contract.
func NewStakeNFTCaller(address common.Address, caller bind.ContractCaller) (*StakeNFTCaller, error) {
	contract, err := bindStakeNFT(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StakeNFTCaller{contract: contract}, nil
}

// NewStakeNFTTransactor creates a new write-only instance of StakeNFT, bound to a specific deployed contract.
func NewStakeNFTTransactor(address common.Address, transactor bind.ContractTransactor) (*StakeNFTTransactor, error) {
	contract, err := bindStakeNFT(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StakeNFTTransactor{contract: contract}, nil
}

// NewStakeNFTFilterer creates a new log filterer instance of StakeNFT, bound to a specific deployed contract.
func NewStakeNFTFilterer(address common.Address, filterer bind.ContractFilterer) (*StakeNFTFilterer, error) {
	contract, err := bindStakeNFT(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StakeNFTFilterer{contract: contract}, nil
}

// bindStakeNFT binds a generic wrapper to an already deployed contract.
func bindStakeNFT(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StakeNFTABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StakeNFT *StakeNFTRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StakeNFT.Contract.StakeNFTCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StakeNFT *StakeNFTRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakeNFT.Contract.StakeNFTTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StakeNFT *StakeNFTRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StakeNFT.Contract.StakeNFTTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StakeNFT *StakeNFTCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StakeNFT.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StakeNFT *StakeNFTTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakeNFT.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StakeNFT *StakeNFTTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StakeNFT.Contract.contract.Transact(opts, method, params...)
}

// AccumulatorScaleFactor is a free data retrieval call binding the contract method 0xe7718640.
//
// Solidity: function accumulatorScaleFactor() pure returns(uint256)
func (_StakeNFT *StakeNFTCaller) AccumulatorScaleFactor(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakeNFT.contract.Call(opts, &out, "accumulatorScaleFactor")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AccumulatorScaleFactor is a free data retrieval call binding the contract method 0xe7718640.
//
// Solidity: function accumulatorScaleFactor() pure returns(uint256)
func (_StakeNFT *StakeNFTSession) AccumulatorScaleFactor() (*big.Int, error) {
	return _StakeNFT.Contract.AccumulatorScaleFactor(&_StakeNFT.CallOpts)
}

// AccumulatorScaleFactor is a free data retrieval call binding the contract method 0xe7718640.
//
// Solidity: function accumulatorScaleFactor() pure returns(uint256)
func (_StakeNFT *StakeNFTCallerSession) AccumulatorScaleFactor() (*big.Int, error) {
	return _StakeNFT.Contract.AccumulatorScaleFactor(&_StakeNFT.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_StakeNFT *StakeNFTCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _StakeNFT.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_StakeNFT *StakeNFTSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _StakeNFT.Contract.BalanceOf(&_StakeNFT.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_StakeNFT *StakeNFTCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _StakeNFT.Contract.BalanceOf(&_StakeNFT.CallOpts, owner)
}

// CbState is a free data retrieval call binding the contract method 0x608115df.
//
// Solidity: function cbState() view returns(bool)
func (_StakeNFT *StakeNFTCaller) CbState(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _StakeNFT.contract.Call(opts, &out, "cbState")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CbState is a free data retrieval call binding the contract method 0x608115df.
//
// Solidity: function cbState() view returns(bool)
func (_StakeNFT *StakeNFTSession) CbState() (bool, error) {
	return _StakeNFT.Contract.CbState(&_StakeNFT.CallOpts)
}

// CbState is a free data retrieval call binding the contract method 0x608115df.
//
// Solidity: function cbState() view returns(bool)
func (_StakeNFT *StakeNFTCallerSession) CbState() (bool, error) {
	return _StakeNFT.Contract.CbState(&_StakeNFT.CallOpts)
}

// EstimateEthCollection is a free data retrieval call binding the contract method 0x20ea0d48.
//
// Solidity: function estimateEthCollection(uint256 tokenID_) view returns(uint256 payout)
func (_StakeNFT *StakeNFTCaller) EstimateEthCollection(opts *bind.CallOpts, tokenID_ *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _StakeNFT.contract.Call(opts, &out, "estimateEthCollection", tokenID_)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EstimateEthCollection is a free data retrieval call binding the contract method 0x20ea0d48.
//
// Solidity: function estimateEthCollection(uint256 tokenID_) view returns(uint256 payout)
func (_StakeNFT *StakeNFTSession) EstimateEthCollection(tokenID_ *big.Int) (*big.Int, error) {
	return _StakeNFT.Contract.EstimateEthCollection(&_StakeNFT.CallOpts, tokenID_)
}

// EstimateEthCollection is a free data retrieval call binding the contract method 0x20ea0d48.
//
// Solidity: function estimateEthCollection(uint256 tokenID_) view returns(uint256 payout)
func (_StakeNFT *StakeNFTCallerSession) EstimateEthCollection(tokenID_ *big.Int) (*big.Int, error) {
	return _StakeNFT.Contract.EstimateEthCollection(&_StakeNFT.CallOpts, tokenID_)
}

// EstimateExcessEth is a free data retrieval call binding the contract method 0x905953ed.
//
// Solidity: function estimateExcessEth() view returns(uint256 excess)
func (_StakeNFT *StakeNFTCaller) EstimateExcessEth(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakeNFT.contract.Call(opts, &out, "estimateExcessEth")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EstimateExcessEth is a free data retrieval call binding the contract method 0x905953ed.
//
// Solidity: function estimateExcessEth() view returns(uint256 excess)
func (_StakeNFT *StakeNFTSession) EstimateExcessEth() (*big.Int, error) {
	return _StakeNFT.Contract.EstimateExcessEth(&_StakeNFT.CallOpts)
}

// EstimateExcessEth is a free data retrieval call binding the contract method 0x905953ed.
//
// Solidity: function estimateExcessEth() view returns(uint256 excess)
func (_StakeNFT *StakeNFTCallerSession) EstimateExcessEth() (*big.Int, error) {
	return _StakeNFT.Contract.EstimateExcessEth(&_StakeNFT.CallOpts)
}

// EstimateExcessToken is a free data retrieval call binding the contract method 0x3eed3eff.
//
// Solidity: function estimateExcessToken() view returns(uint256 excess)
func (_StakeNFT *StakeNFTCaller) EstimateExcessToken(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakeNFT.contract.Call(opts, &out, "estimateExcessToken")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EstimateExcessToken is a free data retrieval call binding the contract method 0x3eed3eff.
//
// Solidity: function estimateExcessToken() view returns(uint256 excess)
func (_StakeNFT *StakeNFTSession) EstimateExcessToken() (*big.Int, error) {
	return _StakeNFT.Contract.EstimateExcessToken(&_StakeNFT.CallOpts)
}

// EstimateExcessToken is a free data retrieval call binding the contract method 0x3eed3eff.
//
// Solidity: function estimateExcessToken() view returns(uint256 excess)
func (_StakeNFT *StakeNFTCallerSession) EstimateExcessToken() (*big.Int, error) {
	return _StakeNFT.Contract.EstimateExcessToken(&_StakeNFT.CallOpts)
}

// EstimateTokenCollection is a free data retrieval call binding the contract method 0x93c5748d.
//
// Solidity: function estimateTokenCollection(uint256 tokenID_) view returns(uint256 payout)
func (_StakeNFT *StakeNFTCaller) EstimateTokenCollection(opts *bind.CallOpts, tokenID_ *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _StakeNFT.contract.Call(opts, &out, "estimateTokenCollection", tokenID_)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EstimateTokenCollection is a free data retrieval call binding the contract method 0x93c5748d.
//
// Solidity: function estimateTokenCollection(uint256 tokenID_) view returns(uint256 payout)
func (_StakeNFT *StakeNFTSession) EstimateTokenCollection(tokenID_ *big.Int) (*big.Int, error) {
	return _StakeNFT.Contract.EstimateTokenCollection(&_StakeNFT.CallOpts, tokenID_)
}

// EstimateTokenCollection is a free data retrieval call binding the contract method 0x93c5748d.
//
// Solidity: function estimateTokenCollection(uint256 tokenID_) view returns(uint256 payout)
func (_StakeNFT *StakeNFTCallerSession) EstimateTokenCollection(tokenID_ *big.Int) (*big.Int, error) {
	return _StakeNFT.Contract.EstimateTokenCollection(&_StakeNFT.CallOpts, tokenID_)
}

// GetAdmin is a free data retrieval call binding the contract method 0x6e9960c3.
//
// Solidity: function getAdmin() view returns(address)
func (_StakeNFT *StakeNFTCaller) GetAdmin(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _StakeNFT.contract.Call(opts, &out, "getAdmin")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetAdmin is a free data retrieval call binding the contract method 0x6e9960c3.
//
// Solidity: function getAdmin() view returns(address)
func (_StakeNFT *StakeNFTSession) GetAdmin() (common.Address, error) {
	return _StakeNFT.Contract.GetAdmin(&_StakeNFT.CallOpts)
}

// GetAdmin is a free data retrieval call binding the contract method 0x6e9960c3.
//
// Solidity: function getAdmin() view returns(address)
func (_StakeNFT *StakeNFTCallerSession) GetAdmin() (common.Address, error) {
	return _StakeNFT.Contract.GetAdmin(&_StakeNFT.CallOpts)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_StakeNFT *StakeNFTCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _StakeNFT.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_StakeNFT *StakeNFTSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _StakeNFT.Contract.GetApproved(&_StakeNFT.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_StakeNFT *StakeNFTCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _StakeNFT.Contract.GetApproved(&_StakeNFT.CallOpts, tokenId)
}

// GetEthAccumulator is a free data retrieval call binding the contract method 0x548652d2.
//
// Solidity: function getEthAccumulator() view returns(uint256 accumulator, uint256 slush)
func (_StakeNFT *StakeNFTCaller) GetEthAccumulator(opts *bind.CallOpts) (struct {
	Accumulator *big.Int
	Slush       *big.Int
}, error) {
	var out []interface{}
	err := _StakeNFT.contract.Call(opts, &out, "getEthAccumulator")

	outstruct := new(struct {
		Accumulator *big.Int
		Slush       *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Accumulator = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Slush = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetEthAccumulator is a free data retrieval call binding the contract method 0x548652d2.
//
// Solidity: function getEthAccumulator() view returns(uint256 accumulator, uint256 slush)
func (_StakeNFT *StakeNFTSession) GetEthAccumulator() (struct {
	Accumulator *big.Int
	Slush       *big.Int
}, error) {
	return _StakeNFT.Contract.GetEthAccumulator(&_StakeNFT.CallOpts)
}

// GetEthAccumulator is a free data retrieval call binding the contract method 0x548652d2.
//
// Solidity: function getEthAccumulator() view returns(uint256 accumulator, uint256 slush)
func (_StakeNFT *StakeNFTCallerSession) GetEthAccumulator() (struct {
	Accumulator *big.Int
	Slush       *big.Int
}, error) {
	return _StakeNFT.Contract.GetEthAccumulator(&_StakeNFT.CallOpts)
}

// GetGovernance is a free data retrieval call binding the contract method 0x289b3c0d.
//
// Solidity: function getGovernance() view returns(address)
func (_StakeNFT *StakeNFTCaller) GetGovernance(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _StakeNFT.contract.Call(opts, &out, "getGovernance")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetGovernance is a free data retrieval call binding the contract method 0x289b3c0d.
//
// Solidity: function getGovernance() view returns(address)
func (_StakeNFT *StakeNFTSession) GetGovernance() (common.Address, error) {
	return _StakeNFT.Contract.GetGovernance(&_StakeNFT.CallOpts)
}

// GetGovernance is a free data retrieval call binding the contract method 0x289b3c0d.
//
// Solidity: function getGovernance() view returns(address)
func (_StakeNFT *StakeNFTCallerSession) GetGovernance() (common.Address, error) {
	return _StakeNFT.Contract.GetGovernance(&_StakeNFT.CallOpts)
}

// GetPosition is a free data retrieval call binding the contract method 0xeb02c301.
//
// Solidity: function getPosition(uint256 tokenID_) view returns(uint256 shares, uint256 freeAfter, uint256 withdrawFreeAfter, uint256 accumulatorEth, uint256 accumulatorToken)
func (_StakeNFT *StakeNFTCaller) GetPosition(opts *bind.CallOpts, tokenID_ *big.Int) (struct {
	Shares            *big.Int
	FreeAfter         *big.Int
	WithdrawFreeAfter *big.Int
	AccumulatorEth    *big.Int
	AccumulatorToken  *big.Int
}, error) {
	var out []interface{}
	err := _StakeNFT.contract.Call(opts, &out, "getPosition", tokenID_)

	outstruct := new(struct {
		Shares            *big.Int
		FreeAfter         *big.Int
		WithdrawFreeAfter *big.Int
		AccumulatorEth    *big.Int
		AccumulatorToken  *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Shares = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.FreeAfter = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.WithdrawFreeAfter = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.AccumulatorEth = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.AccumulatorToken = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetPosition is a free data retrieval call binding the contract method 0xeb02c301.
//
// Solidity: function getPosition(uint256 tokenID_) view returns(uint256 shares, uint256 freeAfter, uint256 withdrawFreeAfter, uint256 accumulatorEth, uint256 accumulatorToken)
func (_StakeNFT *StakeNFTSession) GetPosition(tokenID_ *big.Int) (struct {
	Shares            *big.Int
	FreeAfter         *big.Int
	WithdrawFreeAfter *big.Int
	AccumulatorEth    *big.Int
	AccumulatorToken  *big.Int
}, error) {
	return _StakeNFT.Contract.GetPosition(&_StakeNFT.CallOpts, tokenID_)
}

// GetPosition is a free data retrieval call binding the contract method 0xeb02c301.
//
// Solidity: function getPosition(uint256 tokenID_) view returns(uint256 shares, uint256 freeAfter, uint256 withdrawFreeAfter, uint256 accumulatorEth, uint256 accumulatorToken)
func (_StakeNFT *StakeNFTCallerSession) GetPosition(tokenID_ *big.Int) (struct {
	Shares            *big.Int
	FreeAfter         *big.Int
	WithdrawFreeAfter *big.Int
	AccumulatorEth    *big.Int
	AccumulatorToken  *big.Int
}, error) {
	return _StakeNFT.Contract.GetPosition(&_StakeNFT.CallOpts, tokenID_)
}

// GetTokenAccumulator is a free data retrieval call binding the contract method 0xc47c6e14.
//
// Solidity: function getTokenAccumulator() view returns(uint256 accumulator, uint256 slush)
func (_StakeNFT *StakeNFTCaller) GetTokenAccumulator(opts *bind.CallOpts) (struct {
	Accumulator *big.Int
	Slush       *big.Int
}, error) {
	var out []interface{}
	err := _StakeNFT.contract.Call(opts, &out, "getTokenAccumulator")

	outstruct := new(struct {
		Accumulator *big.Int
		Slush       *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Accumulator = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Slush = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetTokenAccumulator is a free data retrieval call binding the contract method 0xc47c6e14.
//
// Solidity: function getTokenAccumulator() view returns(uint256 accumulator, uint256 slush)
func (_StakeNFT *StakeNFTSession) GetTokenAccumulator() (struct {
	Accumulator *big.Int
	Slush       *big.Int
}, error) {
	return _StakeNFT.Contract.GetTokenAccumulator(&_StakeNFT.CallOpts)
}

// GetTokenAccumulator is a free data retrieval call binding the contract method 0xc47c6e14.
//
// Solidity: function getTokenAccumulator() view returns(uint256 accumulator, uint256 slush)
func (_StakeNFT *StakeNFTCallerSession) GetTokenAccumulator() (struct {
	Accumulator *big.Int
	Slush       *big.Int
}, error) {
	return _StakeNFT.Contract.GetTokenAccumulator(&_StakeNFT.CallOpts)
}

// GetTotalReserveEth is a free data retrieval call binding the contract method 0x19b8be2f.
//
// Solidity: function getTotalReserveEth() view returns(uint256)
func (_StakeNFT *StakeNFTCaller) GetTotalReserveEth(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakeNFT.contract.Call(opts, &out, "getTotalReserveEth")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalReserveEth is a free data retrieval call binding the contract method 0x19b8be2f.
//
// Solidity: function getTotalReserveEth() view returns(uint256)
func (_StakeNFT *StakeNFTSession) GetTotalReserveEth() (*big.Int, error) {
	return _StakeNFT.Contract.GetTotalReserveEth(&_StakeNFT.CallOpts)
}

// GetTotalReserveEth is a free data retrieval call binding the contract method 0x19b8be2f.
//
// Solidity: function getTotalReserveEth() view returns(uint256)
func (_StakeNFT *StakeNFTCallerSession) GetTotalReserveEth() (*big.Int, error) {
	return _StakeNFT.Contract.GetTotalReserveEth(&_StakeNFT.CallOpts)
}

// GetTotalReserveMadToken is a free data retrieval call binding the contract method 0x9aeac659.
//
// Solidity: function getTotalReserveMadToken() view returns(uint256)
func (_StakeNFT *StakeNFTCaller) GetTotalReserveMadToken(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakeNFT.contract.Call(opts, &out, "getTotalReserveMadToken")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalReserveMadToken is a free data retrieval call binding the contract method 0x9aeac659.
//
// Solidity: function getTotalReserveMadToken() view returns(uint256)
func (_StakeNFT *StakeNFTSession) GetTotalReserveMadToken() (*big.Int, error) {
	return _StakeNFT.Contract.GetTotalReserveMadToken(&_StakeNFT.CallOpts)
}

// GetTotalReserveMadToken is a free data retrieval call binding the contract method 0x9aeac659.
//
// Solidity: function getTotalReserveMadToken() view returns(uint256)
func (_StakeNFT *StakeNFTCallerSession) GetTotalReserveMadToken() (*big.Int, error) {
	return _StakeNFT.Contract.GetTotalReserveMadToken(&_StakeNFT.CallOpts)
}

// GetTotalShares is a free data retrieval call binding the contract method 0xd5002f2e.
//
// Solidity: function getTotalShares() view returns(uint256)
func (_StakeNFT *StakeNFTCaller) GetTotalShares(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakeNFT.contract.Call(opts, &out, "getTotalShares")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalShares is a free data retrieval call binding the contract method 0xd5002f2e.
//
// Solidity: function getTotalShares() view returns(uint256)
func (_StakeNFT *StakeNFTSession) GetTotalShares() (*big.Int, error) {
	return _StakeNFT.Contract.GetTotalShares(&_StakeNFT.CallOpts)
}

// GetTotalShares is a free data retrieval call binding the contract method 0xd5002f2e.
//
// Solidity: function getTotalShares() view returns(uint256)
func (_StakeNFT *StakeNFTCallerSession) GetTotalShares() (*big.Int, error) {
	return _StakeNFT.Contract.GetTotalShares(&_StakeNFT.CallOpts)
}

// IsAllowedProposal is a free data retrieval call binding the contract method 0x3771165e.
//
// Solidity: function isAllowedProposal(address addr) view returns(bool)
func (_StakeNFT *StakeNFTCaller) IsAllowedProposal(opts *bind.CallOpts, addr common.Address) (bool, error) {
	var out []interface{}
	err := _StakeNFT.contract.Call(opts, &out, "isAllowedProposal", addr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsAllowedProposal is a free data retrieval call binding the contract method 0x3771165e.
//
// Solidity: function isAllowedProposal(address addr) view returns(bool)
func (_StakeNFT *StakeNFTSession) IsAllowedProposal(addr common.Address) (bool, error) {
	return _StakeNFT.Contract.IsAllowedProposal(&_StakeNFT.CallOpts, addr)
}

// IsAllowedProposal is a free data retrieval call binding the contract method 0x3771165e.
//
// Solidity: function isAllowedProposal(address addr) view returns(bool)
func (_StakeNFT *StakeNFTCallerSession) IsAllowedProposal(addr common.Address) (bool, error) {
	return _StakeNFT.Contract.IsAllowedProposal(&_StakeNFT.CallOpts, addr)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_StakeNFT *StakeNFTCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _StakeNFT.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_StakeNFT *StakeNFTSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _StakeNFT.Contract.IsApprovedForAll(&_StakeNFT.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_StakeNFT *StakeNFTCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _StakeNFT.Contract.IsApprovedForAll(&_StakeNFT.CallOpts, owner, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_StakeNFT *StakeNFTCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _StakeNFT.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_StakeNFT *StakeNFTSession) Name() (string, error) {
	return _StakeNFT.Contract.Name(&_StakeNFT.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_StakeNFT *StakeNFTCallerSession) Name() (string, error) {
	return _StakeNFT.Contract.Name(&_StakeNFT.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_StakeNFT *StakeNFTCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _StakeNFT.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_StakeNFT *StakeNFTSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _StakeNFT.Contract.OwnerOf(&_StakeNFT.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_StakeNFT *StakeNFTCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _StakeNFT.Contract.OwnerOf(&_StakeNFT.CallOpts, tokenId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_StakeNFT *StakeNFTCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _StakeNFT.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_StakeNFT *StakeNFTSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _StakeNFT.Contract.SupportsInterface(&_StakeNFT.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_StakeNFT *StakeNFTCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _StakeNFT.Contract.SupportsInterface(&_StakeNFT.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_StakeNFT *StakeNFTCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _StakeNFT.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_StakeNFT *StakeNFTSession) Symbol() (string, error) {
	return _StakeNFT.Contract.Symbol(&_StakeNFT.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_StakeNFT *StakeNFTCallerSession) Symbol() (string, error) {
	return _StakeNFT.Contract.Symbol(&_StakeNFT.CallOpts)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_StakeNFT *StakeNFTCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _StakeNFT.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_StakeNFT *StakeNFTSession) TokenURI(tokenId *big.Int) (string, error) {
	return _StakeNFT.Contract.TokenURI(&_StakeNFT.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_StakeNFT *StakeNFTCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _StakeNFT.Contract.TokenURI(&_StakeNFT.CallOpts, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_StakeNFT *StakeNFTTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _StakeNFT.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_StakeNFT *StakeNFTSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.Approve(&_StakeNFT.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_StakeNFT *StakeNFTTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.Approve(&_StakeNFT.TransactOpts, to, tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 tokenID_) returns(uint256 payoutEth, uint256 payoutMadToken)
func (_StakeNFT *StakeNFTTransactor) Burn(opts *bind.TransactOpts, tokenID_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.contract.Transact(opts, "burn", tokenID_)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 tokenID_) returns(uint256 payoutEth, uint256 payoutMadToken)
func (_StakeNFT *StakeNFTSession) Burn(tokenID_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.Burn(&_StakeNFT.TransactOpts, tokenID_)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 tokenID_) returns(uint256 payoutEth, uint256 payoutMadToken)
func (_StakeNFT *StakeNFTTransactorSession) Burn(tokenID_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.Burn(&_StakeNFT.TransactOpts, tokenID_)
}

// BurnTo is a paid mutator transaction binding the contract method 0xea785a5e.
//
// Solidity: function burnTo(address to_, uint256 tokenID_) returns(uint256 payoutEth, uint256 payoutMadToken)
func (_StakeNFT *StakeNFTTransactor) BurnTo(opts *bind.TransactOpts, to_ common.Address, tokenID_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.contract.Transact(opts, "burnTo", to_, tokenID_)
}

// BurnTo is a paid mutator transaction binding the contract method 0xea785a5e.
//
// Solidity: function burnTo(address to_, uint256 tokenID_) returns(uint256 payoutEth, uint256 payoutMadToken)
func (_StakeNFT *StakeNFTSession) BurnTo(to_ common.Address, tokenID_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.BurnTo(&_StakeNFT.TransactOpts, to_, tokenID_)
}

// BurnTo is a paid mutator transaction binding the contract method 0xea785a5e.
//
// Solidity: function burnTo(address to_, uint256 tokenID_) returns(uint256 payoutEth, uint256 payoutMadToken)
func (_StakeNFT *StakeNFTTransactorSession) BurnTo(to_ common.Address, tokenID_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.BurnTo(&_StakeNFT.TransactOpts, to_, tokenID_)
}

// CollectEth is a paid mutator transaction binding the contract method 0x2a0d8bd1.
//
// Solidity: function collectEth(uint256 tokenID_) returns(uint256 payout)
func (_StakeNFT *StakeNFTTransactor) CollectEth(opts *bind.TransactOpts, tokenID_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.contract.Transact(opts, "collectEth", tokenID_)
}

// CollectEth is a paid mutator transaction binding the contract method 0x2a0d8bd1.
//
// Solidity: function collectEth(uint256 tokenID_) returns(uint256 payout)
func (_StakeNFT *StakeNFTSession) CollectEth(tokenID_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.CollectEth(&_StakeNFT.TransactOpts, tokenID_)
}

// CollectEth is a paid mutator transaction binding the contract method 0x2a0d8bd1.
//
// Solidity: function collectEth(uint256 tokenID_) returns(uint256 payout)
func (_StakeNFT *StakeNFTTransactorSession) CollectEth(tokenID_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.CollectEth(&_StakeNFT.TransactOpts, tokenID_)
}

// CollectToken is a paid mutator transaction binding the contract method 0xe35c3e28.
//
// Solidity: function collectToken(uint256 tokenID_) returns(uint256 payout)
func (_StakeNFT *StakeNFTTransactor) CollectToken(opts *bind.TransactOpts, tokenID_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.contract.Transact(opts, "collectToken", tokenID_)
}

// CollectToken is a paid mutator transaction binding the contract method 0xe35c3e28.
//
// Solidity: function collectToken(uint256 tokenID_) returns(uint256 payout)
func (_StakeNFT *StakeNFTSession) CollectToken(tokenID_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.CollectToken(&_StakeNFT.TransactOpts, tokenID_)
}

// CollectToken is a paid mutator transaction binding the contract method 0xe35c3e28.
//
// Solidity: function collectToken(uint256 tokenID_) returns(uint256 payout)
func (_StakeNFT *StakeNFTTransactorSession) CollectToken(tokenID_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.CollectToken(&_StakeNFT.TransactOpts, tokenID_)
}

// DepositEth is a paid mutator transaction binding the contract method 0x99a89ecc.
//
// Solidity: function depositEth(uint8 magic_) payable returns()
func (_StakeNFT *StakeNFTTransactor) DepositEth(opts *bind.TransactOpts, magic_ uint8) (*types.Transaction, error) {
	return _StakeNFT.contract.Transact(opts, "depositEth", magic_)
}

// DepositEth is a paid mutator transaction binding the contract method 0x99a89ecc.
//
// Solidity: function depositEth(uint8 magic_) payable returns()
func (_StakeNFT *StakeNFTSession) DepositEth(magic_ uint8) (*types.Transaction, error) {
	return _StakeNFT.Contract.DepositEth(&_StakeNFT.TransactOpts, magic_)
}

// DepositEth is a paid mutator transaction binding the contract method 0x99a89ecc.
//
// Solidity: function depositEth(uint8 magic_) payable returns()
func (_StakeNFT *StakeNFTTransactorSession) DepositEth(magic_ uint8) (*types.Transaction, error) {
	return _StakeNFT.Contract.DepositEth(&_StakeNFT.TransactOpts, magic_)
}

// DepositToken is a paid mutator transaction binding the contract method 0x8191f5e5.
//
// Solidity: function depositToken(uint8 magic_, uint256 amount_) returns()
func (_StakeNFT *StakeNFTTransactor) DepositToken(opts *bind.TransactOpts, magic_ uint8, amount_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.contract.Transact(opts, "depositToken", magic_, amount_)
}

// DepositToken is a paid mutator transaction binding the contract method 0x8191f5e5.
//
// Solidity: function depositToken(uint8 magic_, uint256 amount_) returns()
func (_StakeNFT *StakeNFTSession) DepositToken(magic_ uint8, amount_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.DepositToken(&_StakeNFT.TransactOpts, magic_, amount_)
}

// DepositToken is a paid mutator transaction binding the contract method 0x8191f5e5.
//
// Solidity: function depositToken(uint8 magic_, uint256 amount_) returns()
func (_StakeNFT *StakeNFTTransactorSession) DepositToken(magic_ uint8, amount_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.DepositToken(&_StakeNFT.TransactOpts, magic_, amount_)
}

// LockPosition is a paid mutator transaction binding the contract method 0x0cc65dfb.
//
// Solidity: function lockPosition(address caller_, uint256 tokenID_, uint256 lockDuration_) returns(uint256 numberShares)
func (_StakeNFT *StakeNFTTransactor) LockPosition(opts *bind.TransactOpts, caller_ common.Address, tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.contract.Transact(opts, "lockPosition", caller_, tokenID_, lockDuration_)
}

// LockPosition is a paid mutator transaction binding the contract method 0x0cc65dfb.
//
// Solidity: function lockPosition(address caller_, uint256 tokenID_, uint256 lockDuration_) returns(uint256 numberShares)
func (_StakeNFT *StakeNFTSession) LockPosition(caller_ common.Address, tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.LockPosition(&_StakeNFT.TransactOpts, caller_, tokenID_, lockDuration_)
}

// LockPosition is a paid mutator transaction binding the contract method 0x0cc65dfb.
//
// Solidity: function lockPosition(address caller_, uint256 tokenID_, uint256 lockDuration_) returns(uint256 numberShares)
func (_StakeNFT *StakeNFTTransactorSession) LockPosition(caller_ common.Address, tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.LockPosition(&_StakeNFT.TransactOpts, caller_, tokenID_, lockDuration_)
}

// LockWithdraw is a paid mutator transaction binding the contract method 0x0e4eb15b.
//
// Solidity: function lockWithdraw(uint256 tokenID_, uint256 lockDuration_) returns(uint256 numberShares)
func (_StakeNFT *StakeNFTTransactor) LockWithdraw(opts *bind.TransactOpts, tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.contract.Transact(opts, "lockWithdraw", tokenID_, lockDuration_)
}

// LockWithdraw is a paid mutator transaction binding the contract method 0x0e4eb15b.
//
// Solidity: function lockWithdraw(uint256 tokenID_, uint256 lockDuration_) returns(uint256 numberShares)
func (_StakeNFT *StakeNFTSession) LockWithdraw(tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.LockWithdraw(&_StakeNFT.TransactOpts, tokenID_, lockDuration_)
}

// LockWithdraw is a paid mutator transaction binding the contract method 0x0e4eb15b.
//
// Solidity: function lockWithdraw(uint256 tokenID_, uint256 lockDuration_) returns(uint256 numberShares)
func (_StakeNFT *StakeNFTTransactorSession) LockWithdraw(tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.LockWithdraw(&_StakeNFT.TransactOpts, tokenID_, lockDuration_)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 amount_) returns(uint256 tokenID)
func (_StakeNFT *StakeNFTTransactor) Mint(opts *bind.TransactOpts, amount_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.contract.Transact(opts, "mint", amount_)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 amount_) returns(uint256 tokenID)
func (_StakeNFT *StakeNFTSession) Mint(amount_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.Mint(&_StakeNFT.TransactOpts, amount_)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 amount_) returns(uint256 tokenID)
func (_StakeNFT *StakeNFTTransactorSession) Mint(amount_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.Mint(&_StakeNFT.TransactOpts, amount_)
}

// MintTo is a paid mutator transaction binding the contract method 0x2baf2acb.
//
// Solidity: function mintTo(address to_, uint256 amount_, uint256 lockDuration_) returns(uint256 tokenID)
func (_StakeNFT *StakeNFTTransactor) MintTo(opts *bind.TransactOpts, to_ common.Address, amount_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.contract.Transact(opts, "mintTo", to_, amount_, lockDuration_)
}

// MintTo is a paid mutator transaction binding the contract method 0x2baf2acb.
//
// Solidity: function mintTo(address to_, uint256 amount_, uint256 lockDuration_) returns(uint256 tokenID)
func (_StakeNFT *StakeNFTSession) MintTo(to_ common.Address, amount_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.MintTo(&_StakeNFT.TransactOpts, to_, amount_, lockDuration_)
}

// MintTo is a paid mutator transaction binding the contract method 0x2baf2acb.
//
// Solidity: function mintTo(address to_, uint256 amount_, uint256 lockDuration_) returns(uint256 tokenID)
func (_StakeNFT *StakeNFTTransactorSession) MintTo(to_ common.Address, amount_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.MintTo(&_StakeNFT.TransactOpts, to_, amount_, lockDuration_)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_StakeNFT *StakeNFTTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _StakeNFT.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_StakeNFT *StakeNFTSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.SafeTransferFrom(&_StakeNFT.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_StakeNFT *StakeNFTTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.SafeTransferFrom(&_StakeNFT.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_StakeNFT *StakeNFTTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _StakeNFT.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_StakeNFT *StakeNFTSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _StakeNFT.Contract.SafeTransferFrom0(&_StakeNFT.TransactOpts, from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_StakeNFT *StakeNFTTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _StakeNFT.Contract.SafeTransferFrom0(&_StakeNFT.TransactOpts, from, to, tokenId, _data)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address admin_) returns()
func (_StakeNFT *StakeNFTTransactor) SetAdmin(opts *bind.TransactOpts, admin_ common.Address) (*types.Transaction, error) {
	return _StakeNFT.contract.Transact(opts, "setAdmin", admin_)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address admin_) returns()
func (_StakeNFT *StakeNFTSession) SetAdmin(admin_ common.Address) (*types.Transaction, error) {
	return _StakeNFT.Contract.SetAdmin(&_StakeNFT.TransactOpts, admin_)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address admin_) returns()
func (_StakeNFT *StakeNFTTransactorSession) SetAdmin(admin_ common.Address) (*types.Transaction, error) {
	return _StakeNFT.Contract.SetAdmin(&_StakeNFT.TransactOpts, admin_)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_StakeNFT *StakeNFTTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _StakeNFT.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_StakeNFT *StakeNFTSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _StakeNFT.Contract.SetApprovalForAll(&_StakeNFT.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_StakeNFT *StakeNFTTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _StakeNFT.Contract.SetApprovalForAll(&_StakeNFT.TransactOpts, operator, approved)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_StakeNFT *StakeNFTTransactor) SetGovernance(opts *bind.TransactOpts, governance_ common.Address) (*types.Transaction, error) {
	return _StakeNFT.contract.Transact(opts, "setGovernance", governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_StakeNFT *StakeNFTSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _StakeNFT.Contract.SetGovernance(&_StakeNFT.TransactOpts, governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_StakeNFT *StakeNFTTransactorSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _StakeNFT.Contract.SetGovernance(&_StakeNFT.TransactOpts, governance_)
}

// SkimExcessEth is a paid mutator transaction binding the contract method 0x971b505b.
//
// Solidity: function skimExcessEth(address to_) returns(uint256 excess)
func (_StakeNFT *StakeNFTTransactor) SkimExcessEth(opts *bind.TransactOpts, to_ common.Address) (*types.Transaction, error) {
	return _StakeNFT.contract.Transact(opts, "skimExcessEth", to_)
}

// SkimExcessEth is a paid mutator transaction binding the contract method 0x971b505b.
//
// Solidity: function skimExcessEth(address to_) returns(uint256 excess)
func (_StakeNFT *StakeNFTSession) SkimExcessEth(to_ common.Address) (*types.Transaction, error) {
	return _StakeNFT.Contract.SkimExcessEth(&_StakeNFT.TransactOpts, to_)
}

// SkimExcessEth is a paid mutator transaction binding the contract method 0x971b505b.
//
// Solidity: function skimExcessEth(address to_) returns(uint256 excess)
func (_StakeNFT *StakeNFTTransactorSession) SkimExcessEth(to_ common.Address) (*types.Transaction, error) {
	return _StakeNFT.Contract.SkimExcessEth(&_StakeNFT.TransactOpts, to_)
}

// SkimExcessToken is a paid mutator transaction binding the contract method 0x7aa507fb.
//
// Solidity: function skimExcessToken(address to_) returns(uint256 excess)
func (_StakeNFT *StakeNFTTransactor) SkimExcessToken(opts *bind.TransactOpts, to_ common.Address) (*types.Transaction, error) {
	return _StakeNFT.contract.Transact(opts, "skimExcessToken", to_)
}

// SkimExcessToken is a paid mutator transaction binding the contract method 0x7aa507fb.
//
// Solidity: function skimExcessToken(address to_) returns(uint256 excess)
func (_StakeNFT *StakeNFTSession) SkimExcessToken(to_ common.Address) (*types.Transaction, error) {
	return _StakeNFT.Contract.SkimExcessToken(&_StakeNFT.TransactOpts, to_)
}

// SkimExcessToken is a paid mutator transaction binding the contract method 0x7aa507fb.
//
// Solidity: function skimExcessToken(address to_) returns(uint256 excess)
func (_StakeNFT *StakeNFTTransactorSession) SkimExcessToken(to_ common.Address) (*types.Transaction, error) {
	return _StakeNFT.Contract.SkimExcessToken(&_StakeNFT.TransactOpts, to_)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_StakeNFT *StakeNFTTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _StakeNFT.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_StakeNFT *StakeNFTSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.TransferFrom(&_StakeNFT.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_StakeNFT *StakeNFTTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.TransferFrom(&_StakeNFT.TransactOpts, from, to, tokenId)
}

// TripCB is a paid mutator transaction binding the contract method 0xadfdc03f.
//
// Solidity: function tripCB() returns()
func (_StakeNFT *StakeNFTTransactor) TripCB(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakeNFT.contract.Transact(opts, "tripCB")
}

// TripCB is a paid mutator transaction binding the contract method 0xadfdc03f.
//
// Solidity: function tripCB() returns()
func (_StakeNFT *StakeNFTSession) TripCB() (*types.Transaction, error) {
	return _StakeNFT.Contract.TripCB(&_StakeNFT.TransactOpts)
}

// TripCB is a paid mutator transaction binding the contract method 0xadfdc03f.
//
// Solidity: function tripCB() returns()
func (_StakeNFT *StakeNFTTransactorSession) TripCB() (*types.Transaction, error) {
	return _StakeNFT.Contract.TripCB(&_StakeNFT.TransactOpts)
}

// StakeNFTApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the StakeNFT contract.
type StakeNFTApprovalIterator struct {
	Event *StakeNFTApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakeNFTApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakeNFTApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakeNFTApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakeNFTApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakeNFTApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakeNFTApproval represents a Approval event raised by the StakeNFT contract.
type StakeNFTApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_StakeNFT *StakeNFTFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*StakeNFTApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _StakeNFT.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &StakeNFTApprovalIterator{contract: _StakeNFT.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_StakeNFT *StakeNFTFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *StakeNFTApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _StakeNFT.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakeNFTApproval)
				if err := _StakeNFT.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_StakeNFT *StakeNFTFilterer) ParseApproval(log types.Log) (*StakeNFTApproval, error) {
	event := new(StakeNFTApproval)
	if err := _StakeNFT.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakeNFTApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the StakeNFT contract.
type StakeNFTApprovalForAllIterator struct {
	Event *StakeNFTApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakeNFTApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakeNFTApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakeNFTApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakeNFTApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakeNFTApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakeNFTApprovalForAll represents a ApprovalForAll event raised by the StakeNFT contract.
type StakeNFTApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_StakeNFT *StakeNFTFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*StakeNFTApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _StakeNFT.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &StakeNFTApprovalForAllIterator{contract: _StakeNFT.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_StakeNFT *StakeNFTFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *StakeNFTApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _StakeNFT.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakeNFTApprovalForAll)
				if err := _StakeNFT.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_StakeNFT *StakeNFTFilterer) ParseApprovalForAll(log types.Log) (*StakeNFTApprovalForAll, error) {
	event := new(StakeNFTApprovalForAll)
	if err := _StakeNFT.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakeNFTTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the StakeNFT contract.
type StakeNFTTransferIterator struct {
	Event *StakeNFTTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakeNFTTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakeNFTTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakeNFTTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakeNFTTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakeNFTTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakeNFTTransfer represents a Transfer event raised by the StakeNFT contract.
type StakeNFTTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_StakeNFT *StakeNFTFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*StakeNFTTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _StakeNFT.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &StakeNFTTransferIterator{contract: _StakeNFT.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_StakeNFT *StakeNFTFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *StakeNFTTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _StakeNFT.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakeNFTTransfer)
				if err := _StakeNFT.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_StakeNFT *StakeNFTFilterer) ParseTransfer(log types.Log) (*StakeNFTTransfer, error) {
	event := new(StakeNFTTransfer)
	if err := _StakeNFT.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingMetaData contains all meta data concerning the Staking contract.
var StakingMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BurntStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"why\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Fined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LockedReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LockedStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"RequestedUnlockStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnlockedReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnlockedStake\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"balanceReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceRewardFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceStakeFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceUnlocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceUnlockedFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceUnlockedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceUnlockedRewardFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fine\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractRegistry\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"initializeStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockEpoch\",\"type\":\"uint256\"}],\"name\":\"lockRewardFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lockStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lockStakeFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"majorFine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"majorStakeFine\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"minorFine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minorStakeFine\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestUnlockStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"requestUnlockStakeFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epochDelay\",\"type\":\"uint256\"}],\"name\":\"setEpochDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_majorStakeFine\",\"type\":\"uint256\"}],\"name\":\"setMajorStakeFine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumStake\",\"type\":\"uint256\"}],\"name\":\"setMinimumStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minorStakeFine\",\"type\":\"uint256\"}],\"name\":\"setMinorStakeFine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardAmount\",\"type\":\"uint256\"}],\"name\":\"setRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardBonus\",\"type\":\"uint256\"}],\"name\":\"setRewardBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"unlockRewardFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unlockStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unlockStakeFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// StakingABI is the input ABI used to generate the binding from.
// Deprecated: Use StakingMetaData.ABI instead.
var StakingABI = StakingMetaData.ABI

// Staking is an auto generated Go binding around an Ethereum contract.
type Staking struct {
	StakingCaller     // Read-only binding to the contract
	StakingTransactor // Write-only binding to the contract
	StakingFilterer   // Log filterer for contract events
}

// StakingCaller is an auto generated read-only Go binding around an Ethereum contract.
type StakingCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StakingTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StakingFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StakingSession struct {
	Contract     *Staking          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StakingCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StakingCallerSession struct {
	Contract *StakingCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// StakingTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StakingTransactorSession struct {
	Contract     *StakingTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// StakingRaw is an auto generated low-level Go binding around an Ethereum contract.
type StakingRaw struct {
	Contract *Staking // Generic contract binding to access the raw methods on
}

// StakingCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StakingCallerRaw struct {
	Contract *StakingCaller // Generic read-only contract binding to access the raw methods on
}

// StakingTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StakingTransactorRaw struct {
	Contract *StakingTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStaking creates a new instance of Staking, bound to a specific deployed contract.
func NewStaking(address common.Address, backend bind.ContractBackend) (*Staking, error) {
	contract, err := bindStaking(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Staking{StakingCaller: StakingCaller{contract: contract}, StakingTransactor: StakingTransactor{contract: contract}, StakingFilterer: StakingFilterer{contract: contract}}, nil
}

// NewStakingCaller creates a new read-only instance of Staking, bound to a specific deployed contract.
func NewStakingCaller(address common.Address, caller bind.ContractCaller) (*StakingCaller, error) {
	contract, err := bindStaking(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StakingCaller{contract: contract}, nil
}

// NewStakingTransactor creates a new write-only instance of Staking, bound to a specific deployed contract.
func NewStakingTransactor(address common.Address, transactor bind.ContractTransactor) (*StakingTransactor, error) {
	contract, err := bindStaking(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StakingTransactor{contract: contract}, nil
}

// NewStakingFilterer creates a new log filterer instance of Staking, bound to a specific deployed contract.
func NewStakingFilterer(address common.Address, filterer bind.ContractFilterer) (*StakingFilterer, error) {
	contract, err := bindStaking(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StakingFilterer{contract: contract}, nil
}

// bindStaking binds a generic wrapper to an already deployed contract.
func bindStaking(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StakingABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Staking *StakingRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Staking.Contract.StakingCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Staking *StakingRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Staking.Contract.StakingTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Staking *StakingRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Staking.Contract.StakingTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Staking *StakingCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Staking.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Staking *StakingTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Staking.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Staking *StakingTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Staking.Contract.contract.Transact(opts, method, params...)
}

// BalanceReward is a free data retrieval call binding the contract method 0x9fb69b43.
//
// Solidity: function balanceReward() view returns(uint256)
func (_Staking *StakingCaller) BalanceReward(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "balanceReward")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceReward is a free data retrieval call binding the contract method 0x9fb69b43.
//
// Solidity: function balanceReward() view returns(uint256)
func (_Staking *StakingSession) BalanceReward() (*big.Int, error) {
	return _Staking.Contract.BalanceReward(&_Staking.CallOpts)
}

// BalanceReward is a free data retrieval call binding the contract method 0x9fb69b43.
//
// Solidity: function balanceReward() view returns(uint256)
func (_Staking *StakingCallerSession) BalanceReward() (*big.Int, error) {
	return _Staking.Contract.BalanceReward(&_Staking.CallOpts)
}

// BalanceRewardFor is a free data retrieval call binding the contract method 0x9be5d83e.
//
// Solidity: function balanceRewardFor(address who) view returns(uint256)
func (_Staking *StakingCaller) BalanceRewardFor(opts *bind.CallOpts, who common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "balanceRewardFor", who)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceRewardFor is a free data retrieval call binding the contract method 0x9be5d83e.
//
// Solidity: function balanceRewardFor(address who) view returns(uint256)
func (_Staking *StakingSession) BalanceRewardFor(who common.Address) (*big.Int, error) {
	return _Staking.Contract.BalanceRewardFor(&_Staking.CallOpts, who)
}

// BalanceRewardFor is a free data retrieval call binding the contract method 0x9be5d83e.
//
// Solidity: function balanceRewardFor(address who) view returns(uint256)
func (_Staking *StakingCallerSession) BalanceRewardFor(who common.Address) (*big.Int, error) {
	return _Staking.Contract.BalanceRewardFor(&_Staking.CallOpts, who)
}

// BalanceStake is a free data retrieval call binding the contract method 0x8aa2799c.
//
// Solidity: function balanceStake() view returns(uint256)
func (_Staking *StakingCaller) BalanceStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "balanceStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceStake is a free data retrieval call binding the contract method 0x8aa2799c.
//
// Solidity: function balanceStake() view returns(uint256)
func (_Staking *StakingSession) BalanceStake() (*big.Int, error) {
	return _Staking.Contract.BalanceStake(&_Staking.CallOpts)
}

// BalanceStake is a free data retrieval call binding the contract method 0x8aa2799c.
//
// Solidity: function balanceStake() view returns(uint256)
func (_Staking *StakingCallerSession) BalanceStake() (*big.Int, error) {
	return _Staking.Contract.BalanceStake(&_Staking.CallOpts)
}

// BalanceStakeFor is a free data retrieval call binding the contract method 0x35ba4daf.
//
// Solidity: function balanceStakeFor(address who) view returns(uint256)
func (_Staking *StakingCaller) BalanceStakeFor(opts *bind.CallOpts, who common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "balanceStakeFor", who)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceStakeFor is a free data retrieval call binding the contract method 0x35ba4daf.
//
// Solidity: function balanceStakeFor(address who) view returns(uint256)
func (_Staking *StakingSession) BalanceStakeFor(who common.Address) (*big.Int, error) {
	return _Staking.Contract.BalanceStakeFor(&_Staking.CallOpts, who)
}

// BalanceStakeFor is a free data retrieval call binding the contract method 0x35ba4daf.
//
// Solidity: function balanceStakeFor(address who) view returns(uint256)
func (_Staking *StakingCallerSession) BalanceStakeFor(who common.Address) (*big.Int, error) {
	return _Staking.Contract.BalanceStakeFor(&_Staking.CallOpts, who)
}

// BalanceUnlocked is a free data retrieval call binding the contract method 0x5b6a0d1e.
//
// Solidity: function balanceUnlocked() view returns(uint256)
func (_Staking *StakingCaller) BalanceUnlocked(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "balanceUnlocked")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceUnlocked is a free data retrieval call binding the contract method 0x5b6a0d1e.
//
// Solidity: function balanceUnlocked() view returns(uint256)
func (_Staking *StakingSession) BalanceUnlocked() (*big.Int, error) {
	return _Staking.Contract.BalanceUnlocked(&_Staking.CallOpts)
}

// BalanceUnlocked is a free data retrieval call binding the contract method 0x5b6a0d1e.
//
// Solidity: function balanceUnlocked() view returns(uint256)
func (_Staking *StakingCallerSession) BalanceUnlocked() (*big.Int, error) {
	return _Staking.Contract.BalanceUnlocked(&_Staking.CallOpts)
}

// BalanceUnlockedFor is a free data retrieval call binding the contract method 0x2e713306.
//
// Solidity: function balanceUnlockedFor(address who) view returns(uint256)
func (_Staking *StakingCaller) BalanceUnlockedFor(opts *bind.CallOpts, who common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "balanceUnlockedFor", who)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceUnlockedFor is a free data retrieval call binding the contract method 0x2e713306.
//
// Solidity: function balanceUnlockedFor(address who) view returns(uint256)
func (_Staking *StakingSession) BalanceUnlockedFor(who common.Address) (*big.Int, error) {
	return _Staking.Contract.BalanceUnlockedFor(&_Staking.CallOpts, who)
}

// BalanceUnlockedFor is a free data retrieval call binding the contract method 0x2e713306.
//
// Solidity: function balanceUnlockedFor(address who) view returns(uint256)
func (_Staking *StakingCallerSession) BalanceUnlockedFor(who common.Address) (*big.Int, error) {
	return _Staking.Contract.BalanceUnlockedFor(&_Staking.CallOpts, who)
}

// BalanceUnlockedReward is a free data retrieval call binding the contract method 0xc328b464.
//
// Solidity: function balanceUnlockedReward() view returns(uint256)
func (_Staking *StakingCaller) BalanceUnlockedReward(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "balanceUnlockedReward")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceUnlockedReward is a free data retrieval call binding the contract method 0xc328b464.
//
// Solidity: function balanceUnlockedReward() view returns(uint256)
func (_Staking *StakingSession) BalanceUnlockedReward() (*big.Int, error) {
	return _Staking.Contract.BalanceUnlockedReward(&_Staking.CallOpts)
}

// BalanceUnlockedReward is a free data retrieval call binding the contract method 0xc328b464.
//
// Solidity: function balanceUnlockedReward() view returns(uint256)
func (_Staking *StakingCallerSession) BalanceUnlockedReward() (*big.Int, error) {
	return _Staking.Contract.BalanceUnlockedReward(&_Staking.CallOpts)
}

// BalanceUnlockedRewardFor is a free data retrieval call binding the contract method 0x515c31a1.
//
// Solidity: function balanceUnlockedRewardFor(address who) view returns(uint256)
func (_Staking *StakingCaller) BalanceUnlockedRewardFor(opts *bind.CallOpts, who common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "balanceUnlockedRewardFor", who)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceUnlockedRewardFor is a free data retrieval call binding the contract method 0x515c31a1.
//
// Solidity: function balanceUnlockedRewardFor(address who) view returns(uint256)
func (_Staking *StakingSession) BalanceUnlockedRewardFor(who common.Address) (*big.Int, error) {
	return _Staking.Contract.BalanceUnlockedRewardFor(&_Staking.CallOpts, who)
}

// BalanceUnlockedRewardFor is a free data retrieval call binding the contract method 0x515c31a1.
//
// Solidity: function balanceUnlockedRewardFor(address who) view returns(uint256)
func (_Staking *StakingCallerSession) BalanceUnlockedRewardFor(who common.Address) (*big.Int, error) {
	return _Staking.Contract.BalanceUnlockedRewardFor(&_Staking.CallOpts, who)
}

// MajorStakeFine is a free data retrieval call binding the contract method 0xad43d845.
//
// Solidity: function majorStakeFine() view returns(uint256)
func (_Staking *StakingCaller) MajorStakeFine(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "majorStakeFine")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MajorStakeFine is a free data retrieval call binding the contract method 0xad43d845.
//
// Solidity: function majorStakeFine() view returns(uint256)
func (_Staking *StakingSession) MajorStakeFine() (*big.Int, error) {
	return _Staking.Contract.MajorStakeFine(&_Staking.CallOpts)
}

// MajorStakeFine is a free data retrieval call binding the contract method 0xad43d845.
//
// Solidity: function majorStakeFine() view returns(uint256)
func (_Staking *StakingCallerSession) MajorStakeFine() (*big.Int, error) {
	return _Staking.Contract.MajorStakeFine(&_Staking.CallOpts)
}

// MinimumStake is a free data retrieval call binding the contract method 0xec5ffac2.
//
// Solidity: function minimumStake() view returns(uint256)
func (_Staking *StakingCaller) MinimumStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "minimumStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinimumStake is a free data retrieval call binding the contract method 0xec5ffac2.
//
// Solidity: function minimumStake() view returns(uint256)
func (_Staking *StakingSession) MinimumStake() (*big.Int, error) {
	return _Staking.Contract.MinimumStake(&_Staking.CallOpts)
}

// MinimumStake is a free data retrieval call binding the contract method 0xec5ffac2.
//
// Solidity: function minimumStake() view returns(uint256)
func (_Staking *StakingCallerSession) MinimumStake() (*big.Int, error) {
	return _Staking.Contract.MinimumStake(&_Staking.CallOpts)
}

// MinorStakeFine is a free data retrieval call binding the contract method 0x6d059126.
//
// Solidity: function minorStakeFine() view returns(uint256)
func (_Staking *StakingCaller) MinorStakeFine(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "minorStakeFine")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinorStakeFine is a free data retrieval call binding the contract method 0x6d059126.
//
// Solidity: function minorStakeFine() view returns(uint256)
func (_Staking *StakingSession) MinorStakeFine() (*big.Int, error) {
	return _Staking.Contract.MinorStakeFine(&_Staking.CallOpts)
}

// MinorStakeFine is a free data retrieval call binding the contract method 0x6d059126.
//
// Solidity: function minorStakeFine() view returns(uint256)
func (_Staking *StakingCallerSession) MinorStakeFine() (*big.Int, error) {
	return _Staking.Contract.MinorStakeFine(&_Staking.CallOpts)
}

// RewardAmount is a free data retrieval call binding the contract method 0xf7b2a7be.
//
// Solidity: function rewardAmount() view returns(uint256)
func (_Staking *StakingCaller) RewardAmount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "rewardAmount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RewardAmount is a free data retrieval call binding the contract method 0xf7b2a7be.
//
// Solidity: function rewardAmount() view returns(uint256)
func (_Staking *StakingSession) RewardAmount() (*big.Int, error) {
	return _Staking.Contract.RewardAmount(&_Staking.CallOpts)
}

// RewardAmount is a free data retrieval call binding the contract method 0xf7b2a7be.
//
// Solidity: function rewardAmount() view returns(uint256)
func (_Staking *StakingCallerSession) RewardAmount() (*big.Int, error) {
	return _Staking.Contract.RewardAmount(&_Staking.CallOpts)
}

// RewardBonus is a free data retrieval call binding the contract method 0xfdf553cf.
//
// Solidity: function rewardBonus() view returns(uint256)
func (_Staking *StakingCaller) RewardBonus(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "rewardBonus")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RewardBonus is a free data retrieval call binding the contract method 0xfdf553cf.
//
// Solidity: function rewardBonus() view returns(uint256)
func (_Staking *StakingSession) RewardBonus() (*big.Int, error) {
	return _Staking.Contract.RewardBonus(&_Staking.CallOpts)
}

// RewardBonus is a free data retrieval call binding the contract method 0xfdf553cf.
//
// Solidity: function rewardBonus() view returns(uint256)
func (_Staking *StakingCallerSession) RewardBonus() (*big.Int, error) {
	return _Staking.Contract.RewardBonus(&_Staking.CallOpts)
}

// Burn is a paid mutator transaction binding the contract method 0x89afcb44.
//
// Solidity: function burn(address who) returns()
func (_Staking *StakingTransactor) Burn(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "burn", who)
}

// Burn is a paid mutator transaction binding the contract method 0x89afcb44.
//
// Solidity: function burn(address who) returns()
func (_Staking *StakingSession) Burn(who common.Address) (*types.Transaction, error) {
	return _Staking.Contract.Burn(&_Staking.TransactOpts, who)
}

// Burn is a paid mutator transaction binding the contract method 0x89afcb44.
//
// Solidity: function burn(address who) returns()
func (_Staking *StakingTransactorSession) Burn(who common.Address) (*types.Transaction, error) {
	return _Staking.Contract.Burn(&_Staking.TransactOpts, who)
}

// Fine is a paid mutator transaction binding the contract method 0xdb1e4662.
//
// Solidity: function fine(address who, uint256 amount) returns(bool)
func (_Staking *StakingTransactor) Fine(opts *bind.TransactOpts, who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "fine", who, amount)
}

// Fine is a paid mutator transaction binding the contract method 0xdb1e4662.
//
// Solidity: function fine(address who, uint256 amount) returns(bool)
func (_Staking *StakingSession) Fine(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.Fine(&_Staking.TransactOpts, who, amount)
}

// Fine is a paid mutator transaction binding the contract method 0xdb1e4662.
//
// Solidity: function fine(address who, uint256 amount) returns(bool)
func (_Staking *StakingTransactorSession) Fine(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.Fine(&_Staking.TransactOpts, who, amount)
}

// InitializeStaking is a paid mutator transaction binding the contract method 0x04ad7a83.
//
// Solidity: function initializeStaking(address registry) returns()
func (_Staking *StakingTransactor) InitializeStaking(opts *bind.TransactOpts, registry common.Address) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "initializeStaking", registry)
}

// InitializeStaking is a paid mutator transaction binding the contract method 0x04ad7a83.
//
// Solidity: function initializeStaking(address registry) returns()
func (_Staking *StakingSession) InitializeStaking(registry common.Address) (*types.Transaction, error) {
	return _Staking.Contract.InitializeStaking(&_Staking.TransactOpts, registry)
}

// InitializeStaking is a paid mutator transaction binding the contract method 0x04ad7a83.
//
// Solidity: function initializeStaking(address registry) returns()
func (_Staking *StakingTransactorSession) InitializeStaking(registry common.Address) (*types.Transaction, error) {
	return _Staking.Contract.InitializeStaking(&_Staking.TransactOpts, registry)
}

// LockRewardFor is a paid mutator transaction binding the contract method 0x0ddb07ad.
//
// Solidity: function lockRewardFor(address who, uint256 amountReward, uint256 unlockEpoch) returns(bool)
func (_Staking *StakingTransactor) LockRewardFor(opts *bind.TransactOpts, who common.Address, amountReward *big.Int, unlockEpoch *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "lockRewardFor", who, amountReward, unlockEpoch)
}

// LockRewardFor is a paid mutator transaction binding the contract method 0x0ddb07ad.
//
// Solidity: function lockRewardFor(address who, uint256 amountReward, uint256 unlockEpoch) returns(bool)
func (_Staking *StakingSession) LockRewardFor(who common.Address, amountReward *big.Int, unlockEpoch *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.LockRewardFor(&_Staking.TransactOpts, who, amountReward, unlockEpoch)
}

// LockRewardFor is a paid mutator transaction binding the contract method 0x0ddb07ad.
//
// Solidity: function lockRewardFor(address who, uint256 amountReward, uint256 unlockEpoch) returns(bool)
func (_Staking *StakingTransactorSession) LockRewardFor(who common.Address, amountReward *big.Int, unlockEpoch *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.LockRewardFor(&_Staking.TransactOpts, who, amountReward, unlockEpoch)
}

// LockStake is a paid mutator transaction binding the contract method 0xf50ddb67.
//
// Solidity: function lockStake(uint256 amount) returns(bool)
func (_Staking *StakingTransactor) LockStake(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "lockStake", amount)
}

// LockStake is a paid mutator transaction binding the contract method 0xf50ddb67.
//
// Solidity: function lockStake(uint256 amount) returns(bool)
func (_Staking *StakingSession) LockStake(amount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.LockStake(&_Staking.TransactOpts, amount)
}

// LockStake is a paid mutator transaction binding the contract method 0xf50ddb67.
//
// Solidity: function lockStake(uint256 amount) returns(bool)
func (_Staking *StakingTransactorSession) LockStake(amount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.LockStake(&_Staking.TransactOpts, amount)
}

// LockStakeFor is a paid mutator transaction binding the contract method 0x461cbdcf.
//
// Solidity: function lockStakeFor(address who, uint256 amount) returns(bool)
func (_Staking *StakingTransactor) LockStakeFor(opts *bind.TransactOpts, who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "lockStakeFor", who, amount)
}

// LockStakeFor is a paid mutator transaction binding the contract method 0x461cbdcf.
//
// Solidity: function lockStakeFor(address who, uint256 amount) returns(bool)
func (_Staking *StakingSession) LockStakeFor(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.LockStakeFor(&_Staking.TransactOpts, who, amount)
}

// LockStakeFor is a paid mutator transaction binding the contract method 0x461cbdcf.
//
// Solidity: function lockStakeFor(address who, uint256 amount) returns(bool)
func (_Staking *StakingTransactorSession) LockStakeFor(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.LockStakeFor(&_Staking.TransactOpts, who, amount)
}

// MajorFine is a paid mutator transaction binding the contract method 0x57b4f82a.
//
// Solidity: function majorFine(address who) returns()
func (_Staking *StakingTransactor) MajorFine(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "majorFine", who)
}

// MajorFine is a paid mutator transaction binding the contract method 0x57b4f82a.
//
// Solidity: function majorFine(address who) returns()
func (_Staking *StakingSession) MajorFine(who common.Address) (*types.Transaction, error) {
	return _Staking.Contract.MajorFine(&_Staking.TransactOpts, who)
}

// MajorFine is a paid mutator transaction binding the contract method 0x57b4f82a.
//
// Solidity: function majorFine(address who) returns()
func (_Staking *StakingTransactorSession) MajorFine(who common.Address) (*types.Transaction, error) {
	return _Staking.Contract.MajorFine(&_Staking.TransactOpts, who)
}

// MinorFine is a paid mutator transaction binding the contract method 0xd2a2c55c.
//
// Solidity: function minorFine(address who) returns()
func (_Staking *StakingTransactor) MinorFine(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "minorFine", who)
}

// MinorFine is a paid mutator transaction binding the contract method 0xd2a2c55c.
//
// Solidity: function minorFine(address who) returns()
func (_Staking *StakingSession) MinorFine(who common.Address) (*types.Transaction, error) {
	return _Staking.Contract.MinorFine(&_Staking.TransactOpts, who)
}

// MinorFine is a paid mutator transaction binding the contract method 0xd2a2c55c.
//
// Solidity: function minorFine(address who) returns()
func (_Staking *StakingTransactorSession) MinorFine(who common.Address) (*types.Transaction, error) {
	return _Staking.Contract.MinorFine(&_Staking.TransactOpts, who)
}

// RequestUnlockStake is a paid mutator transaction binding the contract method 0xaeaf8812.
//
// Solidity: function requestUnlockStake() returns()
func (_Staking *StakingTransactor) RequestUnlockStake(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "requestUnlockStake")
}

// RequestUnlockStake is a paid mutator transaction binding the contract method 0xaeaf8812.
//
// Solidity: function requestUnlockStake() returns()
func (_Staking *StakingSession) RequestUnlockStake() (*types.Transaction, error) {
	return _Staking.Contract.RequestUnlockStake(&_Staking.TransactOpts)
}

// RequestUnlockStake is a paid mutator transaction binding the contract method 0xaeaf8812.
//
// Solidity: function requestUnlockStake() returns()
func (_Staking *StakingTransactorSession) RequestUnlockStake() (*types.Transaction, error) {
	return _Staking.Contract.RequestUnlockStake(&_Staking.TransactOpts)
}

// RequestUnlockStakeFor is a paid mutator transaction binding the contract method 0x4fcf2b72.
//
// Solidity: function requestUnlockStakeFor(address who) returns()
func (_Staking *StakingTransactor) RequestUnlockStakeFor(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "requestUnlockStakeFor", who)
}

// RequestUnlockStakeFor is a paid mutator transaction binding the contract method 0x4fcf2b72.
//
// Solidity: function requestUnlockStakeFor(address who) returns()
func (_Staking *StakingSession) RequestUnlockStakeFor(who common.Address) (*types.Transaction, error) {
	return _Staking.Contract.RequestUnlockStakeFor(&_Staking.TransactOpts, who)
}

// RequestUnlockStakeFor is a paid mutator transaction binding the contract method 0x4fcf2b72.
//
// Solidity: function requestUnlockStakeFor(address who) returns()
func (_Staking *StakingTransactorSession) RequestUnlockStakeFor(who common.Address) (*types.Transaction, error) {
	return _Staking.Contract.RequestUnlockStakeFor(&_Staking.TransactOpts, who)
}

// SetEpochDelay is a paid mutator transaction binding the contract method 0xbd695a43.
//
// Solidity: function setEpochDelay(uint256 _epochDelay) returns()
func (_Staking *StakingTransactor) SetEpochDelay(opts *bind.TransactOpts, _epochDelay *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "setEpochDelay", _epochDelay)
}

// SetEpochDelay is a paid mutator transaction binding the contract method 0xbd695a43.
//
// Solidity: function setEpochDelay(uint256 _epochDelay) returns()
func (_Staking *StakingSession) SetEpochDelay(_epochDelay *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetEpochDelay(&_Staking.TransactOpts, _epochDelay)
}

// SetEpochDelay is a paid mutator transaction binding the contract method 0xbd695a43.
//
// Solidity: function setEpochDelay(uint256 _epochDelay) returns()
func (_Staking *StakingTransactorSession) SetEpochDelay(_epochDelay *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetEpochDelay(&_Staking.TransactOpts, _epochDelay)
}

// SetMajorStakeFine is a paid mutator transaction binding the contract method 0x78146c2f.
//
// Solidity: function setMajorStakeFine(uint256 _majorStakeFine) returns()
func (_Staking *StakingTransactor) SetMajorStakeFine(opts *bind.TransactOpts, _majorStakeFine *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "setMajorStakeFine", _majorStakeFine)
}

// SetMajorStakeFine is a paid mutator transaction binding the contract method 0x78146c2f.
//
// Solidity: function setMajorStakeFine(uint256 _majorStakeFine) returns()
func (_Staking *StakingSession) SetMajorStakeFine(_majorStakeFine *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetMajorStakeFine(&_Staking.TransactOpts, _majorStakeFine)
}

// SetMajorStakeFine is a paid mutator transaction binding the contract method 0x78146c2f.
//
// Solidity: function setMajorStakeFine(uint256 _majorStakeFine) returns()
func (_Staking *StakingTransactorSession) SetMajorStakeFine(_majorStakeFine *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetMajorStakeFine(&_Staking.TransactOpts, _majorStakeFine)
}

// SetMinimumStake is a paid mutator transaction binding the contract method 0x233e9903.
//
// Solidity: function setMinimumStake(uint256 _minimumStake) returns()
func (_Staking *StakingTransactor) SetMinimumStake(opts *bind.TransactOpts, _minimumStake *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "setMinimumStake", _minimumStake)
}

// SetMinimumStake is a paid mutator transaction binding the contract method 0x233e9903.
//
// Solidity: function setMinimumStake(uint256 _minimumStake) returns()
func (_Staking *StakingSession) SetMinimumStake(_minimumStake *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetMinimumStake(&_Staking.TransactOpts, _minimumStake)
}

// SetMinimumStake is a paid mutator transaction binding the contract method 0x233e9903.
//
// Solidity: function setMinimumStake(uint256 _minimumStake) returns()
func (_Staking *StakingTransactorSession) SetMinimumStake(_minimumStake *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetMinimumStake(&_Staking.TransactOpts, _minimumStake)
}

// SetMinorStakeFine is a paid mutator transaction binding the contract method 0x29693c5c.
//
// Solidity: function setMinorStakeFine(uint256 _minorStakeFine) returns()
func (_Staking *StakingTransactor) SetMinorStakeFine(opts *bind.TransactOpts, _minorStakeFine *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "setMinorStakeFine", _minorStakeFine)
}

// SetMinorStakeFine is a paid mutator transaction binding the contract method 0x29693c5c.
//
// Solidity: function setMinorStakeFine(uint256 _minorStakeFine) returns()
func (_Staking *StakingSession) SetMinorStakeFine(_minorStakeFine *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetMinorStakeFine(&_Staking.TransactOpts, _minorStakeFine)
}

// SetMinorStakeFine is a paid mutator transaction binding the contract method 0x29693c5c.
//
// Solidity: function setMinorStakeFine(uint256 _minorStakeFine) returns()
func (_Staking *StakingTransactorSession) SetMinorStakeFine(_minorStakeFine *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetMinorStakeFine(&_Staking.TransactOpts, _minorStakeFine)
}

// SetRewardAmount is a paid mutator transaction binding the contract method 0xa8a65a78.
//
// Solidity: function setRewardAmount(uint256 _rewardAmount) returns()
func (_Staking *StakingTransactor) SetRewardAmount(opts *bind.TransactOpts, _rewardAmount *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "setRewardAmount", _rewardAmount)
}

// SetRewardAmount is a paid mutator transaction binding the contract method 0xa8a65a78.
//
// Solidity: function setRewardAmount(uint256 _rewardAmount) returns()
func (_Staking *StakingSession) SetRewardAmount(_rewardAmount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetRewardAmount(&_Staking.TransactOpts, _rewardAmount)
}

// SetRewardAmount is a paid mutator transaction binding the contract method 0xa8a65a78.
//
// Solidity: function setRewardAmount(uint256 _rewardAmount) returns()
func (_Staking *StakingTransactorSession) SetRewardAmount(_rewardAmount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetRewardAmount(&_Staking.TransactOpts, _rewardAmount)
}

// SetRewardBonus is a paid mutator transaction binding the contract method 0xf95d80fa.
//
// Solidity: function setRewardBonus(uint256 _rewardBonus) returns()
func (_Staking *StakingTransactor) SetRewardBonus(opts *bind.TransactOpts, _rewardBonus *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "setRewardBonus", _rewardBonus)
}

// SetRewardBonus is a paid mutator transaction binding the contract method 0xf95d80fa.
//
// Solidity: function setRewardBonus(uint256 _rewardBonus) returns()
func (_Staking *StakingSession) SetRewardBonus(_rewardBonus *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetRewardBonus(&_Staking.TransactOpts, _rewardBonus)
}

// SetRewardBonus is a paid mutator transaction binding the contract method 0xf95d80fa.
//
// Solidity: function setRewardBonus(uint256 _rewardBonus) returns()
func (_Staking *StakingTransactorSession) SetRewardBonus(_rewardBonus *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetRewardBonus(&_Staking.TransactOpts, _rewardBonus)
}

// UnlockReward is a paid mutator transaction binding the contract method 0xf1b7f4bf.
//
// Solidity: function unlockReward() returns(bool)
func (_Staking *StakingTransactor) UnlockReward(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "unlockReward")
}

// UnlockReward is a paid mutator transaction binding the contract method 0xf1b7f4bf.
//
// Solidity: function unlockReward() returns(bool)
func (_Staking *StakingSession) UnlockReward() (*types.Transaction, error) {
	return _Staking.Contract.UnlockReward(&_Staking.TransactOpts)
}

// UnlockReward is a paid mutator transaction binding the contract method 0xf1b7f4bf.
//
// Solidity: function unlockReward() returns(bool)
func (_Staking *StakingTransactorSession) UnlockReward() (*types.Transaction, error) {
	return _Staking.Contract.UnlockReward(&_Staking.TransactOpts)
}

// UnlockRewardFor is a paid mutator transaction binding the contract method 0x7f91bd69.
//
// Solidity: function unlockRewardFor(address who) returns(bool)
func (_Staking *StakingTransactor) UnlockRewardFor(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "unlockRewardFor", who)
}

// UnlockRewardFor is a paid mutator transaction binding the contract method 0x7f91bd69.
//
// Solidity: function unlockRewardFor(address who) returns(bool)
func (_Staking *StakingSession) UnlockRewardFor(who common.Address) (*types.Transaction, error) {
	return _Staking.Contract.UnlockRewardFor(&_Staking.TransactOpts, who)
}

// UnlockRewardFor is a paid mutator transaction binding the contract method 0x7f91bd69.
//
// Solidity: function unlockRewardFor(address who) returns(bool)
func (_Staking *StakingTransactorSession) UnlockRewardFor(who common.Address) (*types.Transaction, error) {
	return _Staking.Contract.UnlockRewardFor(&_Staking.TransactOpts, who)
}

// UnlockStake is a paid mutator transaction binding the contract method 0xecd8c06a.
//
// Solidity: function unlockStake(uint256 amount) returns(bool)
func (_Staking *StakingTransactor) UnlockStake(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "unlockStake", amount)
}

// UnlockStake is a paid mutator transaction binding the contract method 0xecd8c06a.
//
// Solidity: function unlockStake(uint256 amount) returns(bool)
func (_Staking *StakingSession) UnlockStake(amount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.UnlockStake(&_Staking.TransactOpts, amount)
}

// UnlockStake is a paid mutator transaction binding the contract method 0xecd8c06a.
//
// Solidity: function unlockStake(uint256 amount) returns(bool)
func (_Staking *StakingTransactorSession) UnlockStake(amount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.UnlockStake(&_Staking.TransactOpts, amount)
}

// UnlockStakeFor is a paid mutator transaction binding the contract method 0xe29dda92.
//
// Solidity: function unlockStakeFor(address who, uint256 amount) returns(bool)
func (_Staking *StakingTransactor) UnlockStakeFor(opts *bind.TransactOpts, who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "unlockStakeFor", who, amount)
}

// UnlockStakeFor is a paid mutator transaction binding the contract method 0xe29dda92.
//
// Solidity: function unlockStakeFor(address who, uint256 amount) returns(bool)
func (_Staking *StakingSession) UnlockStakeFor(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.UnlockStakeFor(&_Staking.TransactOpts, who, amount)
}

// UnlockStakeFor is a paid mutator transaction binding the contract method 0xe29dda92.
//
// Solidity: function unlockStakeFor(address who, uint256 amount) returns(bool)
func (_Staking *StakingTransactorSession) UnlockStakeFor(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.UnlockStakeFor(&_Staking.TransactOpts, who, amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 amount) returns(bool)
func (_Staking *StakingTransactor) Withdraw(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "withdraw", amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 amount) returns(bool)
func (_Staking *StakingSession) Withdraw(amount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.Withdraw(&_Staking.TransactOpts, amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 amount) returns(bool)
func (_Staking *StakingTransactorSession) Withdraw(amount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.Withdraw(&_Staking.TransactOpts, amount)
}

// WithdrawFor is a paid mutator transaction binding the contract method 0xdb518db2.
//
// Solidity: function withdrawFor(address who, uint256 amount) returns(bool)
func (_Staking *StakingTransactor) WithdrawFor(opts *bind.TransactOpts, who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "withdrawFor", who, amount)
}

// WithdrawFor is a paid mutator transaction binding the contract method 0xdb518db2.
//
// Solidity: function withdrawFor(address who, uint256 amount) returns(bool)
func (_Staking *StakingSession) WithdrawFor(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.WithdrawFor(&_Staking.TransactOpts, who, amount)
}

// WithdrawFor is a paid mutator transaction binding the contract method 0xdb518db2.
//
// Solidity: function withdrawFor(address who, uint256 amount) returns(bool)
func (_Staking *StakingTransactorSession) WithdrawFor(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.WithdrawFor(&_Staking.TransactOpts, who, amount)
}

// WithdrawReward is a paid mutator transaction binding the contract method 0x523a3f08.
//
// Solidity: function withdrawReward(uint256 amount) returns(bool)
func (_Staking *StakingTransactor) WithdrawReward(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "withdrawReward", amount)
}

// WithdrawReward is a paid mutator transaction binding the contract method 0x523a3f08.
//
// Solidity: function withdrawReward(uint256 amount) returns(bool)
func (_Staking *StakingSession) WithdrawReward(amount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.WithdrawReward(&_Staking.TransactOpts, amount)
}

// WithdrawReward is a paid mutator transaction binding the contract method 0x523a3f08.
//
// Solidity: function withdrawReward(uint256 amount) returns(bool)
func (_Staking *StakingTransactorSession) WithdrawReward(amount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.WithdrawReward(&_Staking.TransactOpts, amount)
}

// StakingBurntStakeIterator is returned from FilterBurntStake and is used to iterate over the raw logs and unpacked data for BurntStake events raised by the Staking contract.
type StakingBurntStakeIterator struct {
	Event *StakingBurntStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingBurntStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingBurntStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingBurntStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingBurntStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingBurntStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingBurntStake represents a BurntStake event raised by the Staking contract.
type StakingBurntStake struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBurntStake is a free log retrieval operation binding the contract event 0x54420ac6a7570cfba30d2f88982f0749811f67103de3a63ad8b82cb754e8680e.
//
// Solidity: event BurntStake(address indexed who, uint256 amount)
func (_Staking *StakingFilterer) FilterBurntStake(opts *bind.FilterOpts, who []common.Address) (*StakingBurntStakeIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Staking.contract.FilterLogs(opts, "BurntStake", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingBurntStakeIterator{contract: _Staking.contract, event: "BurntStake", logs: logs, sub: sub}, nil
}

// WatchBurntStake is a free log subscription operation binding the contract event 0x54420ac6a7570cfba30d2f88982f0749811f67103de3a63ad8b82cb754e8680e.
//
// Solidity: event BurntStake(address indexed who, uint256 amount)
func (_Staking *StakingFilterer) WatchBurntStake(opts *bind.WatchOpts, sink chan<- *StakingBurntStake, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Staking.contract.WatchLogs(opts, "BurntStake", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingBurntStake)
				if err := _Staking.contract.UnpackLog(event, "BurntStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBurntStake is a log parse operation binding the contract event 0x54420ac6a7570cfba30d2f88982f0749811f67103de3a63ad8b82cb754e8680e.
//
// Solidity: event BurntStake(address indexed who, uint256 amount)
func (_Staking *StakingFilterer) ParseBurntStake(log types.Log) (*StakingBurntStake, error) {
	event := new(StakingBurntStake)
	if err := _Staking.contract.UnpackLog(event, "BurntStake", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingFinedIterator is returned from FilterFined and is used to iterate over the raw logs and unpacked data for Fined events raised by the Staking contract.
type StakingFinedIterator struct {
	Event *StakingFined // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingFinedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingFined)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingFined)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingFinedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingFinedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingFined represents a Fined event raised by the Staking contract.
type StakingFined struct {
	Who    common.Address
	Why    [32]byte
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterFined is a free log retrieval operation binding the contract event 0xf1254bf6cf04a475bd832353c2ccfc5e0d89e7b9c0f05a153ff897b6121b91e9.
//
// Solidity: event Fined(address indexed who, bytes32 why, uint256 amount)
func (_Staking *StakingFilterer) FilterFined(opts *bind.FilterOpts, who []common.Address) (*StakingFinedIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Staking.contract.FilterLogs(opts, "Fined", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingFinedIterator{contract: _Staking.contract, event: "Fined", logs: logs, sub: sub}, nil
}

// WatchFined is a free log subscription operation binding the contract event 0xf1254bf6cf04a475bd832353c2ccfc5e0d89e7b9c0f05a153ff897b6121b91e9.
//
// Solidity: event Fined(address indexed who, bytes32 why, uint256 amount)
func (_Staking *StakingFilterer) WatchFined(opts *bind.WatchOpts, sink chan<- *StakingFined, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Staking.contract.WatchLogs(opts, "Fined", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingFined)
				if err := _Staking.contract.UnpackLog(event, "Fined", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFined is a log parse operation binding the contract event 0xf1254bf6cf04a475bd832353c2ccfc5e0d89e7b9c0f05a153ff897b6121b91e9.
//
// Solidity: event Fined(address indexed who, bytes32 why, uint256 amount)
func (_Staking *StakingFilterer) ParseFined(log types.Log) (*StakingFined, error) {
	event := new(StakingFined)
	if err := _Staking.contract.UnpackLog(event, "Fined", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingLockedRewardIterator is returned from FilterLockedReward and is used to iterate over the raw logs and unpacked data for LockedReward events raised by the Staking contract.
type StakingLockedRewardIterator struct {
	Event *StakingLockedReward // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingLockedRewardIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingLockedReward)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingLockedReward)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingLockedRewardIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingLockedRewardIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingLockedReward represents a LockedReward event raised by the Staking contract.
type StakingLockedReward struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterLockedReward is a free log retrieval operation binding the contract event 0x28dc9c0ffa672df041cad84edbee41508284600c9394bda0f8586d012c5e0915.
//
// Solidity: event LockedReward(address indexed who, uint256 amount)
func (_Staking *StakingFilterer) FilterLockedReward(opts *bind.FilterOpts, who []common.Address) (*StakingLockedRewardIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Staking.contract.FilterLogs(opts, "LockedReward", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingLockedRewardIterator{contract: _Staking.contract, event: "LockedReward", logs: logs, sub: sub}, nil
}

// WatchLockedReward is a free log subscription operation binding the contract event 0x28dc9c0ffa672df041cad84edbee41508284600c9394bda0f8586d012c5e0915.
//
// Solidity: event LockedReward(address indexed who, uint256 amount)
func (_Staking *StakingFilterer) WatchLockedReward(opts *bind.WatchOpts, sink chan<- *StakingLockedReward, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Staking.contract.WatchLogs(opts, "LockedReward", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingLockedReward)
				if err := _Staking.contract.UnpackLog(event, "LockedReward", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLockedReward is a log parse operation binding the contract event 0x28dc9c0ffa672df041cad84edbee41508284600c9394bda0f8586d012c5e0915.
//
// Solidity: event LockedReward(address indexed who, uint256 amount)
func (_Staking *StakingFilterer) ParseLockedReward(log types.Log) (*StakingLockedReward, error) {
	event := new(StakingLockedReward)
	if err := _Staking.contract.UnpackLog(event, "LockedReward", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingLockedStakeIterator is returned from FilterLockedStake and is used to iterate over the raw logs and unpacked data for LockedStake events raised by the Staking contract.
type StakingLockedStakeIterator struct {
	Event *StakingLockedStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingLockedStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingLockedStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingLockedStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingLockedStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingLockedStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingLockedStake represents a LockedStake event raised by the Staking contract.
type StakingLockedStake struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterLockedStake is a free log retrieval operation binding the contract event 0x1de2f07b0a1c69916a8b25b889051644192307ea08444a2e11f8654d1db3ab0c.
//
// Solidity: event LockedStake(address indexed who, uint256 amount)
func (_Staking *StakingFilterer) FilterLockedStake(opts *bind.FilterOpts, who []common.Address) (*StakingLockedStakeIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Staking.contract.FilterLogs(opts, "LockedStake", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingLockedStakeIterator{contract: _Staking.contract, event: "LockedStake", logs: logs, sub: sub}, nil
}

// WatchLockedStake is a free log subscription operation binding the contract event 0x1de2f07b0a1c69916a8b25b889051644192307ea08444a2e11f8654d1db3ab0c.
//
// Solidity: event LockedStake(address indexed who, uint256 amount)
func (_Staking *StakingFilterer) WatchLockedStake(opts *bind.WatchOpts, sink chan<- *StakingLockedStake, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Staking.contract.WatchLogs(opts, "LockedStake", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingLockedStake)
				if err := _Staking.contract.UnpackLog(event, "LockedStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLockedStake is a log parse operation binding the contract event 0x1de2f07b0a1c69916a8b25b889051644192307ea08444a2e11f8654d1db3ab0c.
//
// Solidity: event LockedStake(address indexed who, uint256 amount)
func (_Staking *StakingFilterer) ParseLockedStake(log types.Log) (*StakingLockedStake, error) {
	event := new(StakingLockedStake)
	if err := _Staking.contract.UnpackLog(event, "LockedStake", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingRequestedUnlockStakeIterator is returned from FilterRequestedUnlockStake and is used to iterate over the raw logs and unpacked data for RequestedUnlockStake events raised by the Staking contract.
type StakingRequestedUnlockStakeIterator struct {
	Event *StakingRequestedUnlockStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingRequestedUnlockStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingRequestedUnlockStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingRequestedUnlockStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingRequestedUnlockStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingRequestedUnlockStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingRequestedUnlockStake represents a RequestedUnlockStake event raised by the Staking contract.
type StakingRequestedUnlockStake struct {
	Who common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterRequestedUnlockStake is a free log retrieval operation binding the contract event 0x1fde0d8a6620647f5c7b5632a87b23101ba553c9b474caf1134fb24d92bf6ddc.
//
// Solidity: event RequestedUnlockStake(address indexed who)
func (_Staking *StakingFilterer) FilterRequestedUnlockStake(opts *bind.FilterOpts, who []common.Address) (*StakingRequestedUnlockStakeIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Staking.contract.FilterLogs(opts, "RequestedUnlockStake", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingRequestedUnlockStakeIterator{contract: _Staking.contract, event: "RequestedUnlockStake", logs: logs, sub: sub}, nil
}

// WatchRequestedUnlockStake is a free log subscription operation binding the contract event 0x1fde0d8a6620647f5c7b5632a87b23101ba553c9b474caf1134fb24d92bf6ddc.
//
// Solidity: event RequestedUnlockStake(address indexed who)
func (_Staking *StakingFilterer) WatchRequestedUnlockStake(opts *bind.WatchOpts, sink chan<- *StakingRequestedUnlockStake, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Staking.contract.WatchLogs(opts, "RequestedUnlockStake", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingRequestedUnlockStake)
				if err := _Staking.contract.UnpackLog(event, "RequestedUnlockStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRequestedUnlockStake is a log parse operation binding the contract event 0x1fde0d8a6620647f5c7b5632a87b23101ba553c9b474caf1134fb24d92bf6ddc.
//
// Solidity: event RequestedUnlockStake(address indexed who)
func (_Staking *StakingFilterer) ParseRequestedUnlockStake(log types.Log) (*StakingRequestedUnlockStake, error) {
	event := new(StakingRequestedUnlockStake)
	if err := _Staking.contract.UnpackLog(event, "RequestedUnlockStake", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingUnlockedRewardIterator is returned from FilterUnlockedReward and is used to iterate over the raw logs and unpacked data for UnlockedReward events raised by the Staking contract.
type StakingUnlockedRewardIterator struct {
	Event *StakingUnlockedReward // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingUnlockedRewardIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingUnlockedReward)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingUnlockedReward)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingUnlockedRewardIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingUnlockedRewardIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingUnlockedReward represents a UnlockedReward event raised by the Staking contract.
type StakingUnlockedReward struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterUnlockedReward is a free log retrieval operation binding the contract event 0x496a1c9a1a9ac29d87ecb4e563683ebd0ee80798869f36c86175059eb5dc7304.
//
// Solidity: event UnlockedReward(address indexed who, uint256 amount)
func (_Staking *StakingFilterer) FilterUnlockedReward(opts *bind.FilterOpts, who []common.Address) (*StakingUnlockedRewardIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Staking.contract.FilterLogs(opts, "UnlockedReward", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingUnlockedRewardIterator{contract: _Staking.contract, event: "UnlockedReward", logs: logs, sub: sub}, nil
}

// WatchUnlockedReward is a free log subscription operation binding the contract event 0x496a1c9a1a9ac29d87ecb4e563683ebd0ee80798869f36c86175059eb5dc7304.
//
// Solidity: event UnlockedReward(address indexed who, uint256 amount)
func (_Staking *StakingFilterer) WatchUnlockedReward(opts *bind.WatchOpts, sink chan<- *StakingUnlockedReward, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Staking.contract.WatchLogs(opts, "UnlockedReward", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingUnlockedReward)
				if err := _Staking.contract.UnpackLog(event, "UnlockedReward", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnlockedReward is a log parse operation binding the contract event 0x496a1c9a1a9ac29d87ecb4e563683ebd0ee80798869f36c86175059eb5dc7304.
//
// Solidity: event UnlockedReward(address indexed who, uint256 amount)
func (_Staking *StakingFilterer) ParseUnlockedReward(log types.Log) (*StakingUnlockedReward, error) {
	event := new(StakingUnlockedReward)
	if err := _Staking.contract.UnpackLog(event, "UnlockedReward", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingUnlockedStakeIterator is returned from FilterUnlockedStake and is used to iterate over the raw logs and unpacked data for UnlockedStake events raised by the Staking contract.
type StakingUnlockedStakeIterator struct {
	Event *StakingUnlockedStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingUnlockedStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingUnlockedStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingUnlockedStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingUnlockedStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingUnlockedStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingUnlockedStake represents a UnlockedStake event raised by the Staking contract.
type StakingUnlockedStake struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterUnlockedStake is a free log retrieval operation binding the contract event 0x252a696583e35c4d61332829d3bb2a8236f2500140258f089951799c9b999a9c.
//
// Solidity: event UnlockedStake(address indexed who, uint256 amount)
func (_Staking *StakingFilterer) FilterUnlockedStake(opts *bind.FilterOpts, who []common.Address) (*StakingUnlockedStakeIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Staking.contract.FilterLogs(opts, "UnlockedStake", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingUnlockedStakeIterator{contract: _Staking.contract, event: "UnlockedStake", logs: logs, sub: sub}, nil
}

// WatchUnlockedStake is a free log subscription operation binding the contract event 0x252a696583e35c4d61332829d3bb2a8236f2500140258f089951799c9b999a9c.
//
// Solidity: event UnlockedStake(address indexed who, uint256 amount)
func (_Staking *StakingFilterer) WatchUnlockedStake(opts *bind.WatchOpts, sink chan<- *StakingUnlockedStake, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Staking.contract.WatchLogs(opts, "UnlockedStake", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingUnlockedStake)
				if err := _Staking.contract.UnpackLog(event, "UnlockedStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnlockedStake is a log parse operation binding the contract event 0x252a696583e35c4d61332829d3bb2a8236f2500140258f089951799c9b999a9c.
//
// Solidity: event UnlockedStake(address indexed who, uint256 amount)
func (_Staking *StakingFilterer) ParseUnlockedStake(log types.Log) (*StakingUnlockedStake, error) {
	event := new(StakingUnlockedStake)
	if err := _Staking.contract.UnpackLog(event, "UnlockedStake", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingEventsMetaData contains all meta data concerning the StakingEvents contract.
var StakingEventsMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BurntStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"why\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Fined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LockedReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LockedStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"RequestedUnlockStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnlockedReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnlockedStake\",\"type\":\"event\"}]",
}

// StakingEventsABI is the input ABI used to generate the binding from.
// Deprecated: Use StakingEventsMetaData.ABI instead.
var StakingEventsABI = StakingEventsMetaData.ABI

// StakingEvents is an auto generated Go binding around an Ethereum contract.
type StakingEvents struct {
	StakingEventsCaller     // Read-only binding to the contract
	StakingEventsTransactor // Write-only binding to the contract
	StakingEventsFilterer   // Log filterer for contract events
}

// StakingEventsCaller is an auto generated read-only Go binding around an Ethereum contract.
type StakingEventsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingEventsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StakingEventsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingEventsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StakingEventsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingEventsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StakingEventsSession struct {
	Contract     *StakingEvents    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StakingEventsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StakingEventsCallerSession struct {
	Contract *StakingEventsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// StakingEventsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StakingEventsTransactorSession struct {
	Contract     *StakingEventsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// StakingEventsRaw is an auto generated low-level Go binding around an Ethereum contract.
type StakingEventsRaw struct {
	Contract *StakingEvents // Generic contract binding to access the raw methods on
}

// StakingEventsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StakingEventsCallerRaw struct {
	Contract *StakingEventsCaller // Generic read-only contract binding to access the raw methods on
}

// StakingEventsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StakingEventsTransactorRaw struct {
	Contract *StakingEventsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStakingEvents creates a new instance of StakingEvents, bound to a specific deployed contract.
func NewStakingEvents(address common.Address, backend bind.ContractBackend) (*StakingEvents, error) {
	contract, err := bindStakingEvents(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &StakingEvents{StakingEventsCaller: StakingEventsCaller{contract: contract}, StakingEventsTransactor: StakingEventsTransactor{contract: contract}, StakingEventsFilterer: StakingEventsFilterer{contract: contract}}, nil
}

// NewStakingEventsCaller creates a new read-only instance of StakingEvents, bound to a specific deployed contract.
func NewStakingEventsCaller(address common.Address, caller bind.ContractCaller) (*StakingEventsCaller, error) {
	contract, err := bindStakingEvents(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StakingEventsCaller{contract: contract}, nil
}

// NewStakingEventsTransactor creates a new write-only instance of StakingEvents, bound to a specific deployed contract.
func NewStakingEventsTransactor(address common.Address, transactor bind.ContractTransactor) (*StakingEventsTransactor, error) {
	contract, err := bindStakingEvents(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StakingEventsTransactor{contract: contract}, nil
}

// NewStakingEventsFilterer creates a new log filterer instance of StakingEvents, bound to a specific deployed contract.
func NewStakingEventsFilterer(address common.Address, filterer bind.ContractFilterer) (*StakingEventsFilterer, error) {
	contract, err := bindStakingEvents(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StakingEventsFilterer{contract: contract}, nil
}

// bindStakingEvents binds a generic wrapper to an already deployed contract.
func bindStakingEvents(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StakingEventsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StakingEvents *StakingEventsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StakingEvents.Contract.StakingEventsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StakingEvents *StakingEventsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakingEvents.Contract.StakingEventsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StakingEvents *StakingEventsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StakingEvents.Contract.StakingEventsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StakingEvents *StakingEventsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StakingEvents.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StakingEvents *StakingEventsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakingEvents.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StakingEvents *StakingEventsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StakingEvents.Contract.contract.Transact(opts, method, params...)
}

// StakingEventsBurntStakeIterator is returned from FilterBurntStake and is used to iterate over the raw logs and unpacked data for BurntStake events raised by the StakingEvents contract.
type StakingEventsBurntStakeIterator struct {
	Event *StakingEventsBurntStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingEventsBurntStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingEventsBurntStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingEventsBurntStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingEventsBurntStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingEventsBurntStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingEventsBurntStake represents a BurntStake event raised by the StakingEvents contract.
type StakingEventsBurntStake struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBurntStake is a free log retrieval operation binding the contract event 0x54420ac6a7570cfba30d2f88982f0749811f67103de3a63ad8b82cb754e8680e.
//
// Solidity: event BurntStake(address indexed who, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) FilterBurntStake(opts *bind.FilterOpts, who []common.Address) (*StakingEventsBurntStakeIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingEvents.contract.FilterLogs(opts, "BurntStake", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingEventsBurntStakeIterator{contract: _StakingEvents.contract, event: "BurntStake", logs: logs, sub: sub}, nil
}

// WatchBurntStake is a free log subscription operation binding the contract event 0x54420ac6a7570cfba30d2f88982f0749811f67103de3a63ad8b82cb754e8680e.
//
// Solidity: event BurntStake(address indexed who, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) WatchBurntStake(opts *bind.WatchOpts, sink chan<- *StakingEventsBurntStake, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingEvents.contract.WatchLogs(opts, "BurntStake", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingEventsBurntStake)
				if err := _StakingEvents.contract.UnpackLog(event, "BurntStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBurntStake is a log parse operation binding the contract event 0x54420ac6a7570cfba30d2f88982f0749811f67103de3a63ad8b82cb754e8680e.
//
// Solidity: event BurntStake(address indexed who, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) ParseBurntStake(log types.Log) (*StakingEventsBurntStake, error) {
	event := new(StakingEventsBurntStake)
	if err := _StakingEvents.contract.UnpackLog(event, "BurntStake", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingEventsFinedIterator is returned from FilterFined and is used to iterate over the raw logs and unpacked data for Fined events raised by the StakingEvents contract.
type StakingEventsFinedIterator struct {
	Event *StakingEventsFined // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingEventsFinedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingEventsFined)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingEventsFined)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingEventsFinedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingEventsFinedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingEventsFined represents a Fined event raised by the StakingEvents contract.
type StakingEventsFined struct {
	Who    common.Address
	Why    [32]byte
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterFined is a free log retrieval operation binding the contract event 0xf1254bf6cf04a475bd832353c2ccfc5e0d89e7b9c0f05a153ff897b6121b91e9.
//
// Solidity: event Fined(address indexed who, bytes32 why, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) FilterFined(opts *bind.FilterOpts, who []common.Address) (*StakingEventsFinedIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingEvents.contract.FilterLogs(opts, "Fined", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingEventsFinedIterator{contract: _StakingEvents.contract, event: "Fined", logs: logs, sub: sub}, nil
}

// WatchFined is a free log subscription operation binding the contract event 0xf1254bf6cf04a475bd832353c2ccfc5e0d89e7b9c0f05a153ff897b6121b91e9.
//
// Solidity: event Fined(address indexed who, bytes32 why, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) WatchFined(opts *bind.WatchOpts, sink chan<- *StakingEventsFined, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingEvents.contract.WatchLogs(opts, "Fined", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingEventsFined)
				if err := _StakingEvents.contract.UnpackLog(event, "Fined", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFined is a log parse operation binding the contract event 0xf1254bf6cf04a475bd832353c2ccfc5e0d89e7b9c0f05a153ff897b6121b91e9.
//
// Solidity: event Fined(address indexed who, bytes32 why, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) ParseFined(log types.Log) (*StakingEventsFined, error) {
	event := new(StakingEventsFined)
	if err := _StakingEvents.contract.UnpackLog(event, "Fined", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingEventsLockedRewardIterator is returned from FilterLockedReward and is used to iterate over the raw logs and unpacked data for LockedReward events raised by the StakingEvents contract.
type StakingEventsLockedRewardIterator struct {
	Event *StakingEventsLockedReward // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingEventsLockedRewardIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingEventsLockedReward)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingEventsLockedReward)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingEventsLockedRewardIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingEventsLockedRewardIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingEventsLockedReward represents a LockedReward event raised by the StakingEvents contract.
type StakingEventsLockedReward struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterLockedReward is a free log retrieval operation binding the contract event 0x28dc9c0ffa672df041cad84edbee41508284600c9394bda0f8586d012c5e0915.
//
// Solidity: event LockedReward(address indexed who, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) FilterLockedReward(opts *bind.FilterOpts, who []common.Address) (*StakingEventsLockedRewardIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingEvents.contract.FilterLogs(opts, "LockedReward", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingEventsLockedRewardIterator{contract: _StakingEvents.contract, event: "LockedReward", logs: logs, sub: sub}, nil
}

// WatchLockedReward is a free log subscription operation binding the contract event 0x28dc9c0ffa672df041cad84edbee41508284600c9394bda0f8586d012c5e0915.
//
// Solidity: event LockedReward(address indexed who, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) WatchLockedReward(opts *bind.WatchOpts, sink chan<- *StakingEventsLockedReward, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingEvents.contract.WatchLogs(opts, "LockedReward", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingEventsLockedReward)
				if err := _StakingEvents.contract.UnpackLog(event, "LockedReward", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLockedReward is a log parse operation binding the contract event 0x28dc9c0ffa672df041cad84edbee41508284600c9394bda0f8586d012c5e0915.
//
// Solidity: event LockedReward(address indexed who, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) ParseLockedReward(log types.Log) (*StakingEventsLockedReward, error) {
	event := new(StakingEventsLockedReward)
	if err := _StakingEvents.contract.UnpackLog(event, "LockedReward", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingEventsLockedStakeIterator is returned from FilterLockedStake and is used to iterate over the raw logs and unpacked data for LockedStake events raised by the StakingEvents contract.
type StakingEventsLockedStakeIterator struct {
	Event *StakingEventsLockedStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingEventsLockedStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingEventsLockedStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingEventsLockedStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingEventsLockedStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingEventsLockedStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingEventsLockedStake represents a LockedStake event raised by the StakingEvents contract.
type StakingEventsLockedStake struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterLockedStake is a free log retrieval operation binding the contract event 0x1de2f07b0a1c69916a8b25b889051644192307ea08444a2e11f8654d1db3ab0c.
//
// Solidity: event LockedStake(address indexed who, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) FilterLockedStake(opts *bind.FilterOpts, who []common.Address) (*StakingEventsLockedStakeIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingEvents.contract.FilterLogs(opts, "LockedStake", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingEventsLockedStakeIterator{contract: _StakingEvents.contract, event: "LockedStake", logs: logs, sub: sub}, nil
}

// WatchLockedStake is a free log subscription operation binding the contract event 0x1de2f07b0a1c69916a8b25b889051644192307ea08444a2e11f8654d1db3ab0c.
//
// Solidity: event LockedStake(address indexed who, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) WatchLockedStake(opts *bind.WatchOpts, sink chan<- *StakingEventsLockedStake, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingEvents.contract.WatchLogs(opts, "LockedStake", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingEventsLockedStake)
				if err := _StakingEvents.contract.UnpackLog(event, "LockedStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLockedStake is a log parse operation binding the contract event 0x1de2f07b0a1c69916a8b25b889051644192307ea08444a2e11f8654d1db3ab0c.
//
// Solidity: event LockedStake(address indexed who, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) ParseLockedStake(log types.Log) (*StakingEventsLockedStake, error) {
	event := new(StakingEventsLockedStake)
	if err := _StakingEvents.contract.UnpackLog(event, "LockedStake", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingEventsRequestedUnlockStakeIterator is returned from FilterRequestedUnlockStake and is used to iterate over the raw logs and unpacked data for RequestedUnlockStake events raised by the StakingEvents contract.
type StakingEventsRequestedUnlockStakeIterator struct {
	Event *StakingEventsRequestedUnlockStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingEventsRequestedUnlockStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingEventsRequestedUnlockStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingEventsRequestedUnlockStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingEventsRequestedUnlockStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingEventsRequestedUnlockStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingEventsRequestedUnlockStake represents a RequestedUnlockStake event raised by the StakingEvents contract.
type StakingEventsRequestedUnlockStake struct {
	Who common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterRequestedUnlockStake is a free log retrieval operation binding the contract event 0x1fde0d8a6620647f5c7b5632a87b23101ba553c9b474caf1134fb24d92bf6ddc.
//
// Solidity: event RequestedUnlockStake(address indexed who)
func (_StakingEvents *StakingEventsFilterer) FilterRequestedUnlockStake(opts *bind.FilterOpts, who []common.Address) (*StakingEventsRequestedUnlockStakeIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingEvents.contract.FilterLogs(opts, "RequestedUnlockStake", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingEventsRequestedUnlockStakeIterator{contract: _StakingEvents.contract, event: "RequestedUnlockStake", logs: logs, sub: sub}, nil
}

// WatchRequestedUnlockStake is a free log subscription operation binding the contract event 0x1fde0d8a6620647f5c7b5632a87b23101ba553c9b474caf1134fb24d92bf6ddc.
//
// Solidity: event RequestedUnlockStake(address indexed who)
func (_StakingEvents *StakingEventsFilterer) WatchRequestedUnlockStake(opts *bind.WatchOpts, sink chan<- *StakingEventsRequestedUnlockStake, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingEvents.contract.WatchLogs(opts, "RequestedUnlockStake", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingEventsRequestedUnlockStake)
				if err := _StakingEvents.contract.UnpackLog(event, "RequestedUnlockStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRequestedUnlockStake is a log parse operation binding the contract event 0x1fde0d8a6620647f5c7b5632a87b23101ba553c9b474caf1134fb24d92bf6ddc.
//
// Solidity: event RequestedUnlockStake(address indexed who)
func (_StakingEvents *StakingEventsFilterer) ParseRequestedUnlockStake(log types.Log) (*StakingEventsRequestedUnlockStake, error) {
	event := new(StakingEventsRequestedUnlockStake)
	if err := _StakingEvents.contract.UnpackLog(event, "RequestedUnlockStake", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingEventsUnlockedRewardIterator is returned from FilterUnlockedReward and is used to iterate over the raw logs and unpacked data for UnlockedReward events raised by the StakingEvents contract.
type StakingEventsUnlockedRewardIterator struct {
	Event *StakingEventsUnlockedReward // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingEventsUnlockedRewardIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingEventsUnlockedReward)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingEventsUnlockedReward)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingEventsUnlockedRewardIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingEventsUnlockedRewardIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingEventsUnlockedReward represents a UnlockedReward event raised by the StakingEvents contract.
type StakingEventsUnlockedReward struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterUnlockedReward is a free log retrieval operation binding the contract event 0x496a1c9a1a9ac29d87ecb4e563683ebd0ee80798869f36c86175059eb5dc7304.
//
// Solidity: event UnlockedReward(address indexed who, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) FilterUnlockedReward(opts *bind.FilterOpts, who []common.Address) (*StakingEventsUnlockedRewardIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingEvents.contract.FilterLogs(opts, "UnlockedReward", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingEventsUnlockedRewardIterator{contract: _StakingEvents.contract, event: "UnlockedReward", logs: logs, sub: sub}, nil
}

// WatchUnlockedReward is a free log subscription operation binding the contract event 0x496a1c9a1a9ac29d87ecb4e563683ebd0ee80798869f36c86175059eb5dc7304.
//
// Solidity: event UnlockedReward(address indexed who, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) WatchUnlockedReward(opts *bind.WatchOpts, sink chan<- *StakingEventsUnlockedReward, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingEvents.contract.WatchLogs(opts, "UnlockedReward", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingEventsUnlockedReward)
				if err := _StakingEvents.contract.UnpackLog(event, "UnlockedReward", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnlockedReward is a log parse operation binding the contract event 0x496a1c9a1a9ac29d87ecb4e563683ebd0ee80798869f36c86175059eb5dc7304.
//
// Solidity: event UnlockedReward(address indexed who, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) ParseUnlockedReward(log types.Log) (*StakingEventsUnlockedReward, error) {
	event := new(StakingEventsUnlockedReward)
	if err := _StakingEvents.contract.UnpackLog(event, "UnlockedReward", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingEventsUnlockedStakeIterator is returned from FilterUnlockedStake and is used to iterate over the raw logs and unpacked data for UnlockedStake events raised by the StakingEvents contract.
type StakingEventsUnlockedStakeIterator struct {
	Event *StakingEventsUnlockedStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingEventsUnlockedStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingEventsUnlockedStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingEventsUnlockedStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingEventsUnlockedStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingEventsUnlockedStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingEventsUnlockedStake represents a UnlockedStake event raised by the StakingEvents contract.
type StakingEventsUnlockedStake struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterUnlockedStake is a free log retrieval operation binding the contract event 0x252a696583e35c4d61332829d3bb2a8236f2500140258f089951799c9b999a9c.
//
// Solidity: event UnlockedStake(address indexed who, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) FilterUnlockedStake(opts *bind.FilterOpts, who []common.Address) (*StakingEventsUnlockedStakeIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingEvents.contract.FilterLogs(opts, "UnlockedStake", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingEventsUnlockedStakeIterator{contract: _StakingEvents.contract, event: "UnlockedStake", logs: logs, sub: sub}, nil
}

// WatchUnlockedStake is a free log subscription operation binding the contract event 0x252a696583e35c4d61332829d3bb2a8236f2500140258f089951799c9b999a9c.
//
// Solidity: event UnlockedStake(address indexed who, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) WatchUnlockedStake(opts *bind.WatchOpts, sink chan<- *StakingEventsUnlockedStake, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingEvents.contract.WatchLogs(opts, "UnlockedStake", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingEventsUnlockedStake)
				if err := _StakingEvents.contract.UnpackLog(event, "UnlockedStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnlockedStake is a log parse operation binding the contract event 0x252a696583e35c4d61332829d3bb2a8236f2500140258f089951799c9b999a9c.
//
// Solidity: event UnlockedStake(address indexed who, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) ParseUnlockedStake(log types.Log) (*StakingEventsUnlockedStake, error) {
	event := new(StakingEventsUnlockedStake)
	if err := _StakingEvents.contract.UnpackLog(event, "UnlockedStake", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingFacetMetaData contains all meta data concerning the StakingFacet contract.
var StakingFacetMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"balanceReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceRewardFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceStakeFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceUnlocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceUnlockedFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceUnlockedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceUnlockedRewardFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"why\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fine\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"grantOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractRegistry\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"initializeStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockEpoch\",\"type\":\"uint256\"}],\"name\":\"lockRewardFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lockStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lockStakeFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"majorFine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"majorStakeFine\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"minorFine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minorStakeFine\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestUnlockStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"requestUnlockStakeFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epochDelay\",\"type\":\"uint256\"}],\"name\":\"setEpochDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governance_\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_majorStakeFine\",\"type\":\"uint256\"}],\"name\":\"setMajorStakeFine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumStake\",\"type\":\"uint256\"}],\"name\":\"setMinimumStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minorStakeFine\",\"type\":\"uint256\"}],\"name\":\"setMinorStakeFine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardAmount\",\"type\":\"uint256\"}],\"name\":\"setRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardBonus\",\"type\":\"uint256\"}],\"name\":\"setRewardBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"unlockRewardFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unlockStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unlockStakeFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b506000620000296200007560201b6200256e1760201c565b9050338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050620000a2565b6000807f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90508091505090565b61441b80620000b26000396000f3fe608060405234801561001057600080fd5b50600436106102695760003560e01c80639fb69b4311610151578063e29dda92116100c3578063f1b7f4bf11610087578063f1b7f4bf14610758578063f50ddb6714610776578063f7b2a7be146107a6578063f95d80fa146107c4578063fad8b32a146107e0578063fdf553cf146107fc57610269565b8063e29dda921461068e578063e348da13146106be578063ec5ffac2146106da578063ecd8c06a146106f8578063ee220d8d1461072857610269565b8063bd695a4311610115578063bd695a43146105e2578063be9a6555146105fe578063c328b46414610608578063d2a2c55c14610626578063db518db214610642578063dc9780591461067257610269565b80639fb69b4314610564578063a8a65a7814610582578063ab033ea91461059e578063ad43d845146105ba578063aeaf8812146105d857610269565b8063515c31a1116101ea5780636d059126116101ae5780636d0591261461047c57806378146c2f1461049a5780637f91bd69146104b657806389afcb44146104e65780638aa2799c146105165780639be5d83e1461053457610269565b8063515c31a1146103d8578063523a3f081461040857806357b4f82a146104385780635b6a0d1e14610454578063605361721461047257610269565b80632e1a7d4d116102315780632e1a7d4d146102fc5780632e7133061461032c57806335ba4daf1461035c578063461cbdcf1461038c5780634fcf2b72146103bc57610269565b806304ad7a831461026e57806307da68f51461028a5780630ddb07ad14610294578063233e9903146102c457806329693c5c146102e0575b600080fd5b61028860048036038101906102839190613743565b61081a565b005b610292610d97565b005b6102ae60048036038101906102a991906136c3565b610e34565b6040516102bb9190613ae8565b60405180910390f35b6102de60048036038101906102d99190613770565b610f43565b005b6102fa60048036038101906102f59190613770565b610ff1565b005b61031660048036038101906103119190613770565b61109f565b6040516103239190613ae8565b60405180910390f35b610346600480360381019061034191906135d6565b611110565b6040516103539190613d8e565b60405180910390f35b610376600480360381019061037191906135d6565b611122565b6040516103839190613d8e565b60405180910390f35b6103a660048036038101906103a19190613683565b611134565b6040516103b39190613ae8565b60405180910390f35b6103d660048036038101906103d191906135d6565b611241565b005b6103f260048036038101906103ed91906135d6565b611347565b6040516103ff9190613d8e565b60405180910390f35b610422600480360381019061041d9190613770565b611359565b60405161042f9190613ae8565b60405180910390f35b610452600480360381019061044d91906135d6565b6113c9565b005b61045c61149b565b6040516104699190613d8e565b60405180910390f35b61047a6114ab565b005b6104846115b6565b6040516104919190613d8e565b60405180910390f35b6104b460048036038101906104af9190613770565b6115c9565b005b6104d060048036038101906104cb91906135d6565b611677565b6040516104dd9190613ae8565b60405180910390f35b61050060048036038101906104fb91906135d6565b611782565b60405161050d9190613ae8565b60405180910390f35b61051e61188d565b60405161052b9190613d8e565b60405180910390f35b61054e600480360381019061054991906135d6565b61189d565b60405161055b9190613d8e565b60405180910390f35b61056c6118af565b6040516105799190613d8e565b60405180910390f35b61059c60048036038101906105979190613770565b6118bf565b005b6105b860048036038101906105b391906135d6565b61196d565b005b6105c2611a5f565b6040516105cf9190613d8e565b60405180910390f35b6105e0611a72565b005b6105fc60048036038101906105f79190613770565b611adc565b005b610606611b83565b005b610610611c20565b60405161061d9190613d8e565b60405180910390f35b610640600480360381019061063b91906135d6565b611c30565b005b61065c60048036038101906106579190613683565b611d02565b6040516106699190613ae8565b60405180910390f35b61068c600480360381019061068791906135d6565b611d74565b005b6106a860048036038101906106a39190613683565b611e66565b6040516106b59190613ae8565b60405180910390f35b6106d860048036038101906106d391906135d6565b611f73565b005b6106e26120d2565b6040516106ef9190613d8e565b60405180910390f35b610712600480360381019061070d9190613770565b6120e5565b60405161071f9190613ae8565b60405180910390f35b610742600480360381019061073d9190613630565b612156565b60405161074f9190613ae8565b60405180910390f35b610760612265565b60405161076d9190613ae8565b60405180910390f35b610790600480360381019061078b9190613770565b6122d3565b60405161079d9190613ae8565b60405180910390f35b6107ae612344565b6040516107bb9190613d8e565b60405180910390f35b6107de60048036038101906107d99190613770565b612357565b005b6107fa60048036038101906107f591906135d6565b612405565b005b61080461255b565b6040516108119190613d8e565b60405180910390f35b600061082461256e565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166108b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ab90613cae565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610924576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091b90613c4e565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff1663f67187ac6040518060400160405280600981526020017f657468646b672f763100000000000000000000000000000000000000000000008152506040518263ffffffff1660e01b81526004016109949190613b2c565b60206040518083038186803b1580156109ac57600080fd5b505afa1580156109c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e49190613603565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610a56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4d90613bae565b60405180910390fd5b60008373ffffffffffffffffffffffffffffffffffffffff1663f67187ac6040518060400160405280600f81526020017f7374616b696e67546f6b656e2f763100000000000000000000000000000000008152506040518263ffffffff1660e01b8152600401610ac69190613b2c565b60206040518083038186803b158015610ade57600080fd5b505afa158015610af2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b169190613603565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610b88576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7f90613d0e565b60405180910390fd5b60008473ffffffffffffffffffffffffffffffffffffffff1663f67187ac6040518060400160405280600f81526020017f7574696c697479546f6b656e2f763100000000000000000000000000000000008152506040518263ffffffff1660e01b8152600401610bf89190613b2c565b60206040518083038186803b158015610c1057600080fd5b505afa158015610c24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c489190613603565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610cba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cb190613cce565b60405180910390fd5b6000610cc461259b565b90508381600a0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550828160070160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818160080160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050505050565b6000610da161256e565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610e31576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e2890613cae565b60405180910390fd5b50565b600080610e3f61256e565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610ecf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ec690613cae565b60405180910390fd5b6000610ed96125c8565b90508060000160009054906101000a900460ff1615610f2d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2490613cee565b60405180910390fd5b610f388686866125f5565b925050509392505050565b6000610f4d61256e565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610fdd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fd490613cae565b60405180910390fd5b81610fe661259b565b600001819055505050565b6000610ffb61256e565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661108b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108290613cae565b60405180910390fd5b8161109461259b565b600201819055505050565b6000806110aa6125c8565b90508060000160009054906101000a900460ff16156110fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110f590613cee565b60405180910390fd5b61110833846127a4565b915050919050565b600061111b8261291a565b9050919050565b600061112d8261296f565b9050919050565b60008061113f61256e565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166111cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111c690613cae565b60405180910390fd5b60006111d96125c8565b90508060000160009054906101000a900460ff161561122d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122490613cee565b60405180910390fd5b61123785856129c4565b9250505092915050565b600061124b61256e565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166112db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112d290613cae565b60405180910390fd5b60006112e56125c8565b90508060000160009054906101000a900460ff1615611339576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161133090613cee565b60405180910390fd5b61134283612b81565b505050565b600061135282612c9d565b9050919050565b6000806113646125c8565b90508060000160009054906101000a900460ff16156113b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113af90613cee565b60405180910390fd5b6113c183612cf2565b915050919050565b60006113d361259b565b905080600a0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611467576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161145e90613d2e565b60405180910390fd5b611496827f6d616a6f720000000000000000000000000000000000000000000000000000008360010154612e67565b505050565b60006114a63361291a565b905090565b60006114b561256e565b90508060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611549576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161154090613b8e565b60405180910390fd5b8060020160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60006115c061259b565b60020154905090565b60006115d361256e565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611663576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161165a90613cae565b60405180910390fd5b8161166c61259b565b600101819055505050565b60008061168261256e565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611712576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161170990613cae565b60405180910390fd5b600061171c6125c8565b90508060000160009054906101000a900460ff1615611770576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161176790613cee565b60405180910390fd5b61177984612f35565b92505050919050565b60008061178d61256e565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661181d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161181490613cae565b60405180910390fd5b60006118276125c8565b90508060000160009054906101000a900460ff161561187b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161187290613cee565b60405180910390fd5b611884846130cf565b92505050919050565b60006118983361296f565b905090565b60006118a88261318e565b9050919050565b60006118ba3361318e565b905090565b60006118c961256e565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611959576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161195090613cae565b60405180910390fd5b8161196261259b565b600301819055505050565b600061197761256e565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611a0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a0290613d6e565b60405180910390fd5b6000611a1561256e565b9050828160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b6000611a6961259b565b60010154905090565b6000611a7c6125c8565b90508060000160009054906101000a900460ff1615611ad0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ac790613cee565b60405180910390fd5b611ad933612b81565b50565b6000611ae661256e565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611b76576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b6d90613cae565b60405180910390fd5b611b7f82613246565b5050565b6000611b8d61256e565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611c1d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c1490613cae565b60405180910390fd5b50565b6000611c2b33612c9d565b905090565b6000611c3a61259b565b905080600a0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611cce576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cc590613d2e565b60405180910390fd5b611cfd827f6d696e6f720000000000000000000000000000000000000000000000000000008360020154612e67565b505050565b600080611d0d6125c8565b90508060000160009054906101000a900460ff1615611d61576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d5890613cee565b60405180910390fd5b611d6b84846127a4565b91505092915050565b6000611d7e61256e565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611e12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e0990613d6e565b60405180910390fd5b6000611e1c61256e565b9050828160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b600080611e7161256e565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611f01576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ef890613cae565b60405180910390fd5b6000611f0b6125c8565b90508060000160009054906101000a900460ff1615611f5f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f5690613cee565b60405180910390fd5b611f69858561325f565b9250505092915050565b6000611f7d61256e565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061202857508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b612067576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161205e90613b6e565b60405180910390fd5b600061207161256e565b905060018160000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550505050565b60006120dc61259b565b60000154905090565b6000806120f06125c8565b90508060000160009054906101000a900460ff1615612144576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161213b90613cee565b60405180910390fd5b61214e338461325f565b915050919050565b60008061216161256e565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166121f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121e890613cae565b60405180910390fd5b60006121fb6125c8565b90508060000160009054906101000a900460ff161561224f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161224690613cee565b60405180910390fd5b61225a868686612e67565b925050509392505050565b6000806122706125c8565b90508060000160009054906101000a900460ff16156122c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122bb90613cee565b60405180910390fd5b6122cd33612f35565b91505090565b6000806122de6125c8565b90508060000160009054906101000a900460ff1615612332576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161232990613cee565b60405180910390fd5b61233c33846129c4565b915050919050565b600061234e61259b565b60030154905090565b600061236161256e565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166123f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123e890613cae565b60405180910390fd5b816123fa61259b565b600401819055505050565b600061240f61256e565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806124ba57508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6124f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124f090613b6e565b60405180910390fd5b600061250361256e565b90508060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff0219169055505050565b600061256561259b565b60040154905090565b6000807f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90508091505090565b6000807f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237ef90508091505090565b6000807fcab1f840c5079216f50ee5ceadd06b2639a4db685e2943cdfe10511c4e47eee490508091505090565b60008061260061259b565b905060008160090160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905061264f61353e565b858160000181815250508481602001818152505081600501819080600181540180825580915050600190039060005260206000209060020201600090919091909150600082015181600001556020820151816001015550508260080160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1930886040518363ffffffff1660e01b8152600401612706929190613abf565b600060405180830381600087803b15801561272057600080fd5b505af1158015612734573d6000803e3d6000fd5b505050508673ffffffffffffffffffffffffffffffffffffffff167f28dc9c0ffa672df041cad84edbee41508284600c9394bda0f8586d012c5e09158760405161277e9190613d8e565b60405180910390a28160010160009054906101000a900460ff1693505050509392505050565b6000806127af61259b565b905060008160090160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050838160040154101561283d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161283490613bee565b60405180910390fd5b61285484826004015461344c90919063ffffffff16565b81600401819055508160070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb86866040518363ffffffff1660e01b81526004016128bb929190613abf565b602060405180830381600087803b1580156128d557600080fd5b505af11580156128e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061290d9190613716565b5060019250505092915050565b600061292461259b565b60090160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401549050919050565b600061297961259b565b60090160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549050919050565b6000806129cf61259b565b905060008160090160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050612a2d8482600001546134a590919063ffffffff16565b81600001819055508473ffffffffffffffffffffffffffffffffffffffff167f1de2f07b0a1c69916a8b25b889051644192307ea08444a2e11f8654d1db3ab0c85604051612a7b9190613d8e565b60405180910390a28160070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8630876040518463ffffffff1660e01b8152600401612ae493929190613a88565b602060405180830381600087803b158015612afe57600080fd5b505af1158015612b12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b369190613716565b612b75576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b6c90613bce565b60405180910390fd5b60019250505092915050565b6000612b8b61259b565b905060008160090160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816000015411612c19576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c1090613c6e565b60405180910390fd5b60018160010160006101000a81548160ff0219169083151502179055508160050154612c436134fe565b612c4d9190613dc5565b81600201819055508273ffffffffffffffffffffffffffffffffffffffff167f1fde0d8a6620647f5c7b5632a87b23101ba553c9b474caf1134fb24d92bf6ddc60405160405180910390a2505050565b6000612ca761259b565b60090160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301549050919050565b600080612cfd61259b565b905060008160090160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508381600301541015612d8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d8290613bee565b60405180910390fd5b612da284826003015461344c90919063ffffffff16565b81600301819055508160080160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33866040518363ffffffff1660e01b8152600401612e09929190613abf565b602060405180830381600087803b158015612e2357600080fd5b505af1158015612e37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e5b9190613716565b50600192505050919050565b600080612e7261259b565b905060008160090160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050612ed084826000015461344c90919063ffffffff16565b81600001819055508573ffffffffffffffffffffffffffffffffffffffff167ff1254bf6cf04a475bd832353c2ccfc5e0d89e7b9c0f05a153ff897b6121b91e98686604051612f20929190613b03565b60405180910390a26001925050509392505050565b600080612f4061259b565b905060008160090160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816005019050600080600090505b82805490508110156130a9576000838281548110612fb857612fb7613f8d565b5b90600052602060002090600202019050612fd06134fe565b81600101541161309557806000015483612fea9190613dc5565b92508360018580549050612ffe9190613e1b565b8154811061300f5761300e613f8d565b5b90600052602060002090600202018483815481106130305761302f613f8d565b5b906000526020600020906002020160008201548160000155600182015481600101559050508380548061306657613065613f5e565b5b600190038181906000526020600020906002020160008082016000905560018201600090555050905550612f97565b81806130a090613ee6565b92505050612f97565b8184600301546130b99190613dc5565b8460030181905550600195505050505050919050565b6000806130da61259b565b905060008160090160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600081600001549050600082600001819055508473ffffffffffffffffffffffffffffffffffffffff167f919f7e2092ffcc9d09f599be18d8152860b0c054df788a33bc549cdd9d0f15b18260405161317a9190613d8e565b60405180910390a260019350505050919050565b60008061319961259b565b905060008160090160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600501905060005b818054905081101561323e5761322982828154811061320857613207613f8d565b5b906000526020600020906002020160000154856134a590919063ffffffff16565b9350808061323690613ee6565b9150506131e6565b505050919050565b600061325061259b565b90508181600501819055505050565b60008061326a61259b565b905060008160090160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060010160009054906101000a900460ff16613302576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132f990613d4e565b60405180910390fd5b8381600001541015613349576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161334090613c8e565b60405180910390fd5b6133516134fe565b81600201541115613397576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161338e90613c0e565b60405180910390fd5b6133ae8482600401546134a590919063ffffffff16565b81600401819055506133cd84826000015461344c90919063ffffffff16565b816000018190555060008160010160006101000a81548160ff0219169083151502179055508473ffffffffffffffffffffffffffffffffffffffff167f252a696583e35c4d61332829d3bb2a8236f2500140258f089951799c9b999a9c856040516134389190613d8e565b60405180910390a260019250505092915050565b600082828461345b9190613e1b565b915081111561349f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161349690613b4e565b60405180910390fd5b92915050565b60008282846134b49190613dc5565b91508110156134f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016134ef90613c2e565b60405180910390fd5b92915050565b6000613508613511565b60010154905090565b6000807fa53f90683b42ecb37674e5c8c5c9cabf849818fdc2fdfb57bbe3c738f7b50d0e90508091505090565b604051806040016040528060008152602001600081525090565b60008135905061356781614372565b92915050565b60008151905061357c81614372565b92915050565b60008151905061359181614389565b92915050565b6000813590506135a6816143a0565b92915050565b6000813590506135bb816143b7565b92915050565b6000813590506135d0816143ce565b92915050565b6000602082840312156135ec576135eb613fbc565b5b60006135fa84828501613558565b91505092915050565b60006020828403121561361957613618613fbc565b5b60006136278482850161356d565b91505092915050565b60008060006060848603121561364957613648613fbc565b5b600061365786828701613558565b935050602061366886828701613597565b9250506040613679868287016135c1565b9150509250925092565b6000806040838503121561369a57613699613fbc565b5b60006136a885828601613558565b92505060206136b9858286016135c1565b9150509250929050565b6000806000606084860312156136dc576136db613fbc565b5b60006136ea86828701613558565b93505060206136fb868287016135c1565b925050604061370c868287016135c1565b9150509250925092565b60006020828403121561372c5761372b613fbc565b5b600061373a84828501613582565b91505092915050565b60006020828403121561375957613758613fbc565b5b6000613767848285016135ac565b91505092915050565b60006020828403121561378657613785613fbc565b5b6000613794848285016135c1565b91505092915050565b6137a681613e4f565b82525050565b6137b581613e61565b82525050565b6137c481613e6d565b82525050565b60006137d582613da9565b6137df8185613db4565b93506137ef818560208601613eb3565b6137f881613fc1565b840191505092915050565b6000613810601583613db4565b915061381b82613fd2565b602082019050919050565b6000613833602e83613db4565b915061383e82613ffb565b604082019050919050565b6000613856602583613db4565b91506138618261404a565b604082019050919050565b6000613879601283613db4565b915061388482614099565b602082019050919050565b600061389c600f83613db4565b91506138a7826140c2565b602082019050919050565b60006138bf601e83613db4565b91506138ca826140eb565b602082019050919050565b60006138e2600983613db4565b91506138ed82614114565b602082019050919050565b6000613905601483613db4565b91506139108261413d565b602082019050919050565b6000613928601483613db4565b915061393382614166565b602082019050919050565b600061394b600883613db4565b91506139568261418f565b602082019050919050565b600061396e602983613db4565b9150613979826141b8565b604082019050919050565b6000613991602683613db4565b915061399c82614207565b604082019050919050565b60006139b4601183613db4565b91506139bf82614256565b602082019050919050565b60006139d7600a83613db4565b91506139e28261427f565b602082019050919050565b60006139fa601183613db4565b9150613a05826142a8565b602082019050919050565b6000613a1d601883613db4565b9150613a28826142d1565b602082019050919050565b6000613a40601a83613db4565b9150613a4b826142fa565b602082019050919050565b6000613a63602583613db4565b9150613a6e82614323565b604082019050919050565b613a8281613ea9565b82525050565b6000606082019050613a9d600083018661379d565b613aaa602083018561379d565b613ab76040830184613a79565b949350505050565b6000604082019050613ad4600083018561379d565b613ae16020830184613a79565b9392505050565b6000602082019050613afd60008301846137ac565b92915050565b6000604082019050613b1860008301856137bb565b613b256020830184613a79565b9392505050565b60006020820190508181036000830152613b4681846137ca565b905092915050565b60006020820190508181036000830152613b6781613803565b9050919050565b60006020820190508181036000830152613b8781613826565b9050919050565b60006020820190508181036000830152613ba781613849565b9050919050565b60006020820190508181036000830152613bc78161386c565b9050919050565b60006020820190508181036000830152613be78161388f565b9050919050565b60006020820190508181036000830152613c07816138b2565b9050919050565b60006020820190508181036000830152613c27816138d5565b9050919050565b60006020820190508181036000830152613c47816138f8565b9050919050565b60006020820190508181036000830152613c678161391b565b9050919050565b60006020820190508181036000830152613c878161393e565b9050919050565b60006020820190508181036000830152613ca781613961565b9050919050565b60006020820190508181036000830152613cc781613984565b9050919050565b60006020820190508181036000830152613ce7816139a7565b9050919050565b60006020820190508181036000830152613d07816139ca565b9050919050565b60006020820190508181036000830152613d27816139ed565b9050919050565b60006020820190508181036000830152613d4781613a10565b9050919050565b60006020820190508181036000830152613d6781613a33565b9050919050565b60006020820190508181036000830152613d8781613a56565b9050919050565b6000602082019050613da36000830184613a79565b92915050565b600081519050919050565b600082825260208201905092915050565b6000613dd082613ea9565b9150613ddb83613ea9565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613e1057613e0f613f2f565b5b828201905092915050565b6000613e2682613ea9565b9150613e3183613ea9565b925082821015613e4457613e43613f2f565b5b828203905092915050565b6000613e5a82613e89565b9050919050565b60008115159050919050565b6000819050919050565b6000613e8282613e4f565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015613ed1578082015181840152602081019050613eb6565b83811115613ee0576000848401525b50505050565b6000613ef182613ea9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613f2457613f23613f2f565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b6000601f19601f8301169050919050565b7f64732d6d6174682d7375622d756e646572666c6f770000000000000000000000600082015250565b7f41636365737320436f6e74726f6c3a206f6e6c79206f776e6572206f72206f7060008201527f657261746f7220616c6c6f776564000000000000000000000000000000000000602082015250565b7f41636365737320436f6e74726f6c3a206f776e657273686970206e6f7420677260008201527f616e746564000000000000000000000000000000000000000000000000000000602082015250565b7f6e696c20657468646b6720616464726573730000000000000000000000000000600082015250565b7f5472616e73666572206661696c65640000000000000000000000000000000000600082015250565b7f496e73756666696369656e7420756e6c6f636b65642062616c616e63652e0000600082015250565b7f4e6f742072656164790000000000000000000000000000000000000000000000600082015250565b7f64732d6d6174682d6164642d6f766572666c6f77000000000000000000000000600082015250565b7f6e696c2072656769737472792061646472657373000000000000000000000000600082015250565b7f4e6f207374616b65000000000000000000000000000000000000000000000000600082015250565b7f5374616b6520756e6c6f636b207265717565737465642067726561746572207460008201527f68616e207374616b650000000000000000000000000000000000000000000000602082015250565b7f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160008201527f6c6c6f7765640000000000000000000000000000000000000000000000000000602082015250565b7f6e696c207574696c69747920546f6b656e000000000000000000000000000000600082015250565b7f69732073746f7070656400000000000000000000000000000000000000000000600082015250565b7f6e696c207374616b696e6720546f6b656e000000000000000000000000000000600082015250565b7f6f6e6c7920616c6c6f7765642066726f6d20657468646b670000000000000000600082015250565b7f5374616b6520756e6c6f636b206e6f7420726571756573746564000000000000600082015250565b7f41636365737320436f6e74726f6c3a206f6e6c79206f776e657220697320616c60008201527f6c6f776564000000000000000000000000000000000000000000000000000000602082015250565b61437b81613e4f565b811461438657600080fd5b50565b61439281613e61565b811461439d57600080fd5b50565b6143a981613e6d565b81146143b457600080fd5b50565b6143c081613e77565b81146143cb57600080fd5b50565b6143d781613ea9565b81146143e257600080fd5b5056fea26469706673582212200b7884091053b4bcbb228dc10e8ec3c2faf6224613ba7b5a898707a15e39034764736f6c63430008060033",
}

// StakingFacetABI is the input ABI used to generate the binding from.
// Deprecated: Use StakingFacetMetaData.ABI instead.
var StakingFacetABI = StakingFacetMetaData.ABI

// StakingFacetBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StakingFacetMetaData.Bin instead.
var StakingFacetBin = StakingFacetMetaData.Bin

// DeployStakingFacet deploys a new Ethereum contract, binding an instance of StakingFacet to it.
func DeployStakingFacet(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *StakingFacet, error) {
	parsed, err := StakingFacetMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StakingFacetBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &StakingFacet{StakingFacetCaller: StakingFacetCaller{contract: contract}, StakingFacetTransactor: StakingFacetTransactor{contract: contract}, StakingFacetFilterer: StakingFacetFilterer{contract: contract}}, nil
}

// StakingFacet is an auto generated Go binding around an Ethereum contract.
type StakingFacet struct {
	StakingFacetCaller     // Read-only binding to the contract
	StakingFacetTransactor // Write-only binding to the contract
	StakingFacetFilterer   // Log filterer for contract events
}

// StakingFacetCaller is an auto generated read-only Go binding around an Ethereum contract.
type StakingFacetCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingFacetTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StakingFacetTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingFacetFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StakingFacetFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingFacetSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StakingFacetSession struct {
	Contract     *StakingFacet     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StakingFacetCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StakingFacetCallerSession struct {
	Contract *StakingFacetCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// StakingFacetTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StakingFacetTransactorSession struct {
	Contract     *StakingFacetTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// StakingFacetRaw is an auto generated low-level Go binding around an Ethereum contract.
type StakingFacetRaw struct {
	Contract *StakingFacet // Generic contract binding to access the raw methods on
}

// StakingFacetCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StakingFacetCallerRaw struct {
	Contract *StakingFacetCaller // Generic read-only contract binding to access the raw methods on
}

// StakingFacetTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StakingFacetTransactorRaw struct {
	Contract *StakingFacetTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStakingFacet creates a new instance of StakingFacet, bound to a specific deployed contract.
func NewStakingFacet(address common.Address, backend bind.ContractBackend) (*StakingFacet, error) {
	contract, err := bindStakingFacet(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &StakingFacet{StakingFacetCaller: StakingFacetCaller{contract: contract}, StakingFacetTransactor: StakingFacetTransactor{contract: contract}, StakingFacetFilterer: StakingFacetFilterer{contract: contract}}, nil
}

// NewStakingFacetCaller creates a new read-only instance of StakingFacet, bound to a specific deployed contract.
func NewStakingFacetCaller(address common.Address, caller bind.ContractCaller) (*StakingFacetCaller, error) {
	contract, err := bindStakingFacet(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StakingFacetCaller{contract: contract}, nil
}

// NewStakingFacetTransactor creates a new write-only instance of StakingFacet, bound to a specific deployed contract.
func NewStakingFacetTransactor(address common.Address, transactor bind.ContractTransactor) (*StakingFacetTransactor, error) {
	contract, err := bindStakingFacet(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StakingFacetTransactor{contract: contract}, nil
}

// NewStakingFacetFilterer creates a new log filterer instance of StakingFacet, bound to a specific deployed contract.
func NewStakingFacetFilterer(address common.Address, filterer bind.ContractFilterer) (*StakingFacetFilterer, error) {
	contract, err := bindStakingFacet(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StakingFacetFilterer{contract: contract}, nil
}

// bindStakingFacet binds a generic wrapper to an already deployed contract.
func bindStakingFacet(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StakingFacetABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StakingFacet *StakingFacetRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StakingFacet.Contract.StakingFacetCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StakingFacet *StakingFacetRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakingFacet.Contract.StakingFacetTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StakingFacet *StakingFacetRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StakingFacet.Contract.StakingFacetTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StakingFacet *StakingFacetCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StakingFacet.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StakingFacet *StakingFacetTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakingFacet.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StakingFacet *StakingFacetTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StakingFacet.Contract.contract.Transact(opts, method, params...)
}

// BalanceReward is a free data retrieval call binding the contract method 0x9fb69b43.
//
// Solidity: function balanceReward() view returns(uint256)
func (_StakingFacet *StakingFacetCaller) BalanceReward(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakingFacet.contract.Call(opts, &out, "balanceReward")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceReward is a free data retrieval call binding the contract method 0x9fb69b43.
//
// Solidity: function balanceReward() view returns(uint256)
func (_StakingFacet *StakingFacetSession) BalanceReward() (*big.Int, error) {
	return _StakingFacet.Contract.BalanceReward(&_StakingFacet.CallOpts)
}

// BalanceReward is a free data retrieval call binding the contract method 0x9fb69b43.
//
// Solidity: function balanceReward() view returns(uint256)
func (_StakingFacet *StakingFacetCallerSession) BalanceReward() (*big.Int, error) {
	return _StakingFacet.Contract.BalanceReward(&_StakingFacet.CallOpts)
}

// BalanceRewardFor is a free data retrieval call binding the contract method 0x9be5d83e.
//
// Solidity: function balanceRewardFor(address who) view returns(uint256)
func (_StakingFacet *StakingFacetCaller) BalanceRewardFor(opts *bind.CallOpts, who common.Address) (*big.Int, error) {
	var out []interface{}
	err := _StakingFacet.contract.Call(opts, &out, "balanceRewardFor", who)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceRewardFor is a free data retrieval call binding the contract method 0x9be5d83e.
//
// Solidity: function balanceRewardFor(address who) view returns(uint256)
func (_StakingFacet *StakingFacetSession) BalanceRewardFor(who common.Address) (*big.Int, error) {
	return _StakingFacet.Contract.BalanceRewardFor(&_StakingFacet.CallOpts, who)
}

// BalanceRewardFor is a free data retrieval call binding the contract method 0x9be5d83e.
//
// Solidity: function balanceRewardFor(address who) view returns(uint256)
func (_StakingFacet *StakingFacetCallerSession) BalanceRewardFor(who common.Address) (*big.Int, error) {
	return _StakingFacet.Contract.BalanceRewardFor(&_StakingFacet.CallOpts, who)
}

// BalanceStake is a free data retrieval call binding the contract method 0x8aa2799c.
//
// Solidity: function balanceStake() view returns(uint256)
func (_StakingFacet *StakingFacetCaller) BalanceStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakingFacet.contract.Call(opts, &out, "balanceStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceStake is a free data retrieval call binding the contract method 0x8aa2799c.
//
// Solidity: function balanceStake() view returns(uint256)
func (_StakingFacet *StakingFacetSession) BalanceStake() (*big.Int, error) {
	return _StakingFacet.Contract.BalanceStake(&_StakingFacet.CallOpts)
}

// BalanceStake is a free data retrieval call binding the contract method 0x8aa2799c.
//
// Solidity: function balanceStake() view returns(uint256)
func (_StakingFacet *StakingFacetCallerSession) BalanceStake() (*big.Int, error) {
	return _StakingFacet.Contract.BalanceStake(&_StakingFacet.CallOpts)
}

// BalanceStakeFor is a free data retrieval call binding the contract method 0x35ba4daf.
//
// Solidity: function balanceStakeFor(address who) view returns(uint256)
func (_StakingFacet *StakingFacetCaller) BalanceStakeFor(opts *bind.CallOpts, who common.Address) (*big.Int, error) {
	var out []interface{}
	err := _StakingFacet.contract.Call(opts, &out, "balanceStakeFor", who)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceStakeFor is a free data retrieval call binding the contract method 0x35ba4daf.
//
// Solidity: function balanceStakeFor(address who) view returns(uint256)
func (_StakingFacet *StakingFacetSession) BalanceStakeFor(who common.Address) (*big.Int, error) {
	return _StakingFacet.Contract.BalanceStakeFor(&_StakingFacet.CallOpts, who)
}

// BalanceStakeFor is a free data retrieval call binding the contract method 0x35ba4daf.
//
// Solidity: function balanceStakeFor(address who) view returns(uint256)
func (_StakingFacet *StakingFacetCallerSession) BalanceStakeFor(who common.Address) (*big.Int, error) {
	return _StakingFacet.Contract.BalanceStakeFor(&_StakingFacet.CallOpts, who)
}

// BalanceUnlocked is a free data retrieval call binding the contract method 0x5b6a0d1e.
//
// Solidity: function balanceUnlocked() view returns(uint256)
func (_StakingFacet *StakingFacetCaller) BalanceUnlocked(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakingFacet.contract.Call(opts, &out, "balanceUnlocked")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceUnlocked is a free data retrieval call binding the contract method 0x5b6a0d1e.
//
// Solidity: function balanceUnlocked() view returns(uint256)
func (_StakingFacet *StakingFacetSession) BalanceUnlocked() (*big.Int, error) {
	return _StakingFacet.Contract.BalanceUnlocked(&_StakingFacet.CallOpts)
}

// BalanceUnlocked is a free data retrieval call binding the contract method 0x5b6a0d1e.
//
// Solidity: function balanceUnlocked() view returns(uint256)
func (_StakingFacet *StakingFacetCallerSession) BalanceUnlocked() (*big.Int, error) {
	return _StakingFacet.Contract.BalanceUnlocked(&_StakingFacet.CallOpts)
}

// BalanceUnlockedFor is a free data retrieval call binding the contract method 0x2e713306.
//
// Solidity: function balanceUnlockedFor(address who) view returns(uint256)
func (_StakingFacet *StakingFacetCaller) BalanceUnlockedFor(opts *bind.CallOpts, who common.Address) (*big.Int, error) {
	var out []interface{}
	err := _StakingFacet.contract.Call(opts, &out, "balanceUnlockedFor", who)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceUnlockedFor is a free data retrieval call binding the contract method 0x2e713306.
//
// Solidity: function balanceUnlockedFor(address who) view returns(uint256)
func (_StakingFacet *StakingFacetSession) BalanceUnlockedFor(who common.Address) (*big.Int, error) {
	return _StakingFacet.Contract.BalanceUnlockedFor(&_StakingFacet.CallOpts, who)
}

// BalanceUnlockedFor is a free data retrieval call binding the contract method 0x2e713306.
//
// Solidity: function balanceUnlockedFor(address who) view returns(uint256)
func (_StakingFacet *StakingFacetCallerSession) BalanceUnlockedFor(who common.Address) (*big.Int, error) {
	return _StakingFacet.Contract.BalanceUnlockedFor(&_StakingFacet.CallOpts, who)
}

// BalanceUnlockedReward is a free data retrieval call binding the contract method 0xc328b464.
//
// Solidity: function balanceUnlockedReward() view returns(uint256)
func (_StakingFacet *StakingFacetCaller) BalanceUnlockedReward(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakingFacet.contract.Call(opts, &out, "balanceUnlockedReward")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceUnlockedReward is a free data retrieval call binding the contract method 0xc328b464.
//
// Solidity: function balanceUnlockedReward() view returns(uint256)
func (_StakingFacet *StakingFacetSession) BalanceUnlockedReward() (*big.Int, error) {
	return _StakingFacet.Contract.BalanceUnlockedReward(&_StakingFacet.CallOpts)
}

// BalanceUnlockedReward is a free data retrieval call binding the contract method 0xc328b464.
//
// Solidity: function balanceUnlockedReward() view returns(uint256)
func (_StakingFacet *StakingFacetCallerSession) BalanceUnlockedReward() (*big.Int, error) {
	return _StakingFacet.Contract.BalanceUnlockedReward(&_StakingFacet.CallOpts)
}

// BalanceUnlockedRewardFor is a free data retrieval call binding the contract method 0x515c31a1.
//
// Solidity: function balanceUnlockedRewardFor(address who) view returns(uint256)
func (_StakingFacet *StakingFacetCaller) BalanceUnlockedRewardFor(opts *bind.CallOpts, who common.Address) (*big.Int, error) {
	var out []interface{}
	err := _StakingFacet.contract.Call(opts, &out, "balanceUnlockedRewardFor", who)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceUnlockedRewardFor is a free data retrieval call binding the contract method 0x515c31a1.
//
// Solidity: function balanceUnlockedRewardFor(address who) view returns(uint256)
func (_StakingFacet *StakingFacetSession) BalanceUnlockedRewardFor(who common.Address) (*big.Int, error) {
	return _StakingFacet.Contract.BalanceUnlockedRewardFor(&_StakingFacet.CallOpts, who)
}

// BalanceUnlockedRewardFor is a free data retrieval call binding the contract method 0x515c31a1.
//
// Solidity: function balanceUnlockedRewardFor(address who) view returns(uint256)
func (_StakingFacet *StakingFacetCallerSession) BalanceUnlockedRewardFor(who common.Address) (*big.Int, error) {
	return _StakingFacet.Contract.BalanceUnlockedRewardFor(&_StakingFacet.CallOpts, who)
}

// MajorStakeFine is a free data retrieval call binding the contract method 0xad43d845.
//
// Solidity: function majorStakeFine() view returns(uint256)
func (_StakingFacet *StakingFacetCaller) MajorStakeFine(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakingFacet.contract.Call(opts, &out, "majorStakeFine")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MajorStakeFine is a free data retrieval call binding the contract method 0xad43d845.
//
// Solidity: function majorStakeFine() view returns(uint256)
func (_StakingFacet *StakingFacetSession) MajorStakeFine() (*big.Int, error) {
	return _StakingFacet.Contract.MajorStakeFine(&_StakingFacet.CallOpts)
}

// MajorStakeFine is a free data retrieval call binding the contract method 0xad43d845.
//
// Solidity: function majorStakeFine() view returns(uint256)
func (_StakingFacet *StakingFacetCallerSession) MajorStakeFine() (*big.Int, error) {
	return _StakingFacet.Contract.MajorStakeFine(&_StakingFacet.CallOpts)
}

// MinimumStake is a free data retrieval call binding the contract method 0xec5ffac2.
//
// Solidity: function minimumStake() view returns(uint256)
func (_StakingFacet *StakingFacetCaller) MinimumStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakingFacet.contract.Call(opts, &out, "minimumStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinimumStake is a free data retrieval call binding the contract method 0xec5ffac2.
//
// Solidity: function minimumStake() view returns(uint256)
func (_StakingFacet *StakingFacetSession) MinimumStake() (*big.Int, error) {
	return _StakingFacet.Contract.MinimumStake(&_StakingFacet.CallOpts)
}

// MinimumStake is a free data retrieval call binding the contract method 0xec5ffac2.
//
// Solidity: function minimumStake() view returns(uint256)
func (_StakingFacet *StakingFacetCallerSession) MinimumStake() (*big.Int, error) {
	return _StakingFacet.Contract.MinimumStake(&_StakingFacet.CallOpts)
}

// MinorStakeFine is a free data retrieval call binding the contract method 0x6d059126.
//
// Solidity: function minorStakeFine() view returns(uint256)
func (_StakingFacet *StakingFacetCaller) MinorStakeFine(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakingFacet.contract.Call(opts, &out, "minorStakeFine")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinorStakeFine is a free data retrieval call binding the contract method 0x6d059126.
//
// Solidity: function minorStakeFine() view returns(uint256)
func (_StakingFacet *StakingFacetSession) MinorStakeFine() (*big.Int, error) {
	return _StakingFacet.Contract.MinorStakeFine(&_StakingFacet.CallOpts)
}

// MinorStakeFine is a free data retrieval call binding the contract method 0x6d059126.
//
// Solidity: function minorStakeFine() view returns(uint256)
func (_StakingFacet *StakingFacetCallerSession) MinorStakeFine() (*big.Int, error) {
	return _StakingFacet.Contract.MinorStakeFine(&_StakingFacet.CallOpts)
}

// RewardAmount is a free data retrieval call binding the contract method 0xf7b2a7be.
//
// Solidity: function rewardAmount() view returns(uint256)
func (_StakingFacet *StakingFacetCaller) RewardAmount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakingFacet.contract.Call(opts, &out, "rewardAmount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RewardAmount is a free data retrieval call binding the contract method 0xf7b2a7be.
//
// Solidity: function rewardAmount() view returns(uint256)
func (_StakingFacet *StakingFacetSession) RewardAmount() (*big.Int, error) {
	return _StakingFacet.Contract.RewardAmount(&_StakingFacet.CallOpts)
}

// RewardAmount is a free data retrieval call binding the contract method 0xf7b2a7be.
//
// Solidity: function rewardAmount() view returns(uint256)
func (_StakingFacet *StakingFacetCallerSession) RewardAmount() (*big.Int, error) {
	return _StakingFacet.Contract.RewardAmount(&_StakingFacet.CallOpts)
}

// RewardBonus is a free data retrieval call binding the contract method 0xfdf553cf.
//
// Solidity: function rewardBonus() view returns(uint256)
func (_StakingFacet *StakingFacetCaller) RewardBonus(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakingFacet.contract.Call(opts, &out, "rewardBonus")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RewardBonus is a free data retrieval call binding the contract method 0xfdf553cf.
//
// Solidity: function rewardBonus() view returns(uint256)
func (_StakingFacet *StakingFacetSession) RewardBonus() (*big.Int, error) {
	return _StakingFacet.Contract.RewardBonus(&_StakingFacet.CallOpts)
}

// RewardBonus is a free data retrieval call binding the contract method 0xfdf553cf.
//
// Solidity: function rewardBonus() view returns(uint256)
func (_StakingFacet *StakingFacetCallerSession) RewardBonus() (*big.Int, error) {
	return _StakingFacet.Contract.RewardBonus(&_StakingFacet.CallOpts)
}

// Burn is a paid mutator transaction binding the contract method 0x89afcb44.
//
// Solidity: function burn(address who) returns(bool)
func (_StakingFacet *StakingFacetTransactor) Burn(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "burn", who)
}

// Burn is a paid mutator transaction binding the contract method 0x89afcb44.
//
// Solidity: function burn(address who) returns(bool)
func (_StakingFacet *StakingFacetSession) Burn(who common.Address) (*types.Transaction, error) {
	return _StakingFacet.Contract.Burn(&_StakingFacet.TransactOpts, who)
}

// Burn is a paid mutator transaction binding the contract method 0x89afcb44.
//
// Solidity: function burn(address who) returns(bool)
func (_StakingFacet *StakingFacetTransactorSession) Burn(who common.Address) (*types.Transaction, error) {
	return _StakingFacet.Contract.Burn(&_StakingFacet.TransactOpts, who)
}

// Fine is a paid mutator transaction binding the contract method 0xee220d8d.
//
// Solidity: function fine(address who, bytes32 why, uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetTransactor) Fine(opts *bind.TransactOpts, who common.Address, why [32]byte, amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "fine", who, why, amount)
}

// Fine is a paid mutator transaction binding the contract method 0xee220d8d.
//
// Solidity: function fine(address who, bytes32 why, uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetSession) Fine(who common.Address, why [32]byte, amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.Fine(&_StakingFacet.TransactOpts, who, why, amount)
}

// Fine is a paid mutator transaction binding the contract method 0xee220d8d.
//
// Solidity: function fine(address who, bytes32 why, uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetTransactorSession) Fine(who common.Address, why [32]byte, amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.Fine(&_StakingFacet.TransactOpts, who, why, amount)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_StakingFacet *StakingFacetTransactor) GrantOperator(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "grantOperator", who)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_StakingFacet *StakingFacetSession) GrantOperator(who common.Address) (*types.Transaction, error) {
	return _StakingFacet.Contract.GrantOperator(&_StakingFacet.TransactOpts, who)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_StakingFacet *StakingFacetTransactorSession) GrantOperator(who common.Address) (*types.Transaction, error) {
	return _StakingFacet.Contract.GrantOperator(&_StakingFacet.TransactOpts, who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_StakingFacet *StakingFacetTransactor) GrantOwner(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "grantOwner", who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_StakingFacet *StakingFacetSession) GrantOwner(who common.Address) (*types.Transaction, error) {
	return _StakingFacet.Contract.GrantOwner(&_StakingFacet.TransactOpts, who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_StakingFacet *StakingFacetTransactorSession) GrantOwner(who common.Address) (*types.Transaction, error) {
	return _StakingFacet.Contract.GrantOwner(&_StakingFacet.TransactOpts, who)
}

// InitializeStaking is a paid mutator transaction binding the contract method 0x04ad7a83.
//
// Solidity: function initializeStaking(address registry) returns()
func (_StakingFacet *StakingFacetTransactor) InitializeStaking(opts *bind.TransactOpts, registry common.Address) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "initializeStaking", registry)
}

// InitializeStaking is a paid mutator transaction binding the contract method 0x04ad7a83.
//
// Solidity: function initializeStaking(address registry) returns()
func (_StakingFacet *StakingFacetSession) InitializeStaking(registry common.Address) (*types.Transaction, error) {
	return _StakingFacet.Contract.InitializeStaking(&_StakingFacet.TransactOpts, registry)
}

// InitializeStaking is a paid mutator transaction binding the contract method 0x04ad7a83.
//
// Solidity: function initializeStaking(address registry) returns()
func (_StakingFacet *StakingFacetTransactorSession) InitializeStaking(registry common.Address) (*types.Transaction, error) {
	return _StakingFacet.Contract.InitializeStaking(&_StakingFacet.TransactOpts, registry)
}

// LockRewardFor is a paid mutator transaction binding the contract method 0x0ddb07ad.
//
// Solidity: function lockRewardFor(address who, uint256 amountReward, uint256 unlockEpoch) returns(bool)
func (_StakingFacet *StakingFacetTransactor) LockRewardFor(opts *bind.TransactOpts, who common.Address, amountReward *big.Int, unlockEpoch *big.Int) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "lockRewardFor", who, amountReward, unlockEpoch)
}

// LockRewardFor is a paid mutator transaction binding the contract method 0x0ddb07ad.
//
// Solidity: function lockRewardFor(address who, uint256 amountReward, uint256 unlockEpoch) returns(bool)
func (_StakingFacet *StakingFacetSession) LockRewardFor(who common.Address, amountReward *big.Int, unlockEpoch *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.LockRewardFor(&_StakingFacet.TransactOpts, who, amountReward, unlockEpoch)
}

// LockRewardFor is a paid mutator transaction binding the contract method 0x0ddb07ad.
//
// Solidity: function lockRewardFor(address who, uint256 amountReward, uint256 unlockEpoch) returns(bool)
func (_StakingFacet *StakingFacetTransactorSession) LockRewardFor(who common.Address, amountReward *big.Int, unlockEpoch *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.LockRewardFor(&_StakingFacet.TransactOpts, who, amountReward, unlockEpoch)
}

// LockStake is a paid mutator transaction binding the contract method 0xf50ddb67.
//
// Solidity: function lockStake(uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetTransactor) LockStake(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "lockStake", amount)
}

// LockStake is a paid mutator transaction binding the contract method 0xf50ddb67.
//
// Solidity: function lockStake(uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetSession) LockStake(amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.LockStake(&_StakingFacet.TransactOpts, amount)
}

// LockStake is a paid mutator transaction binding the contract method 0xf50ddb67.
//
// Solidity: function lockStake(uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetTransactorSession) LockStake(amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.LockStake(&_StakingFacet.TransactOpts, amount)
}

// LockStakeFor is a paid mutator transaction binding the contract method 0x461cbdcf.
//
// Solidity: function lockStakeFor(address who, uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetTransactor) LockStakeFor(opts *bind.TransactOpts, who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "lockStakeFor", who, amount)
}

// LockStakeFor is a paid mutator transaction binding the contract method 0x461cbdcf.
//
// Solidity: function lockStakeFor(address who, uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetSession) LockStakeFor(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.LockStakeFor(&_StakingFacet.TransactOpts, who, amount)
}

// LockStakeFor is a paid mutator transaction binding the contract method 0x461cbdcf.
//
// Solidity: function lockStakeFor(address who, uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetTransactorSession) LockStakeFor(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.LockStakeFor(&_StakingFacet.TransactOpts, who, amount)
}

// MajorFine is a paid mutator transaction binding the contract method 0x57b4f82a.
//
// Solidity: function majorFine(address who) returns()
func (_StakingFacet *StakingFacetTransactor) MajorFine(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "majorFine", who)
}

// MajorFine is a paid mutator transaction binding the contract method 0x57b4f82a.
//
// Solidity: function majorFine(address who) returns()
func (_StakingFacet *StakingFacetSession) MajorFine(who common.Address) (*types.Transaction, error) {
	return _StakingFacet.Contract.MajorFine(&_StakingFacet.TransactOpts, who)
}

// MajorFine is a paid mutator transaction binding the contract method 0x57b4f82a.
//
// Solidity: function majorFine(address who) returns()
func (_StakingFacet *StakingFacetTransactorSession) MajorFine(who common.Address) (*types.Transaction, error) {
	return _StakingFacet.Contract.MajorFine(&_StakingFacet.TransactOpts, who)
}

// MinorFine is a paid mutator transaction binding the contract method 0xd2a2c55c.
//
// Solidity: function minorFine(address who) returns()
func (_StakingFacet *StakingFacetTransactor) MinorFine(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "minorFine", who)
}

// MinorFine is a paid mutator transaction binding the contract method 0xd2a2c55c.
//
// Solidity: function minorFine(address who) returns()
func (_StakingFacet *StakingFacetSession) MinorFine(who common.Address) (*types.Transaction, error) {
	return _StakingFacet.Contract.MinorFine(&_StakingFacet.TransactOpts, who)
}

// MinorFine is a paid mutator transaction binding the contract method 0xd2a2c55c.
//
// Solidity: function minorFine(address who) returns()
func (_StakingFacet *StakingFacetTransactorSession) MinorFine(who common.Address) (*types.Transaction, error) {
	return _StakingFacet.Contract.MinorFine(&_StakingFacet.TransactOpts, who)
}

// RequestUnlockStake is a paid mutator transaction binding the contract method 0xaeaf8812.
//
// Solidity: function requestUnlockStake() returns()
func (_StakingFacet *StakingFacetTransactor) RequestUnlockStake(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "requestUnlockStake")
}

// RequestUnlockStake is a paid mutator transaction binding the contract method 0xaeaf8812.
//
// Solidity: function requestUnlockStake() returns()
func (_StakingFacet *StakingFacetSession) RequestUnlockStake() (*types.Transaction, error) {
	return _StakingFacet.Contract.RequestUnlockStake(&_StakingFacet.TransactOpts)
}

// RequestUnlockStake is a paid mutator transaction binding the contract method 0xaeaf8812.
//
// Solidity: function requestUnlockStake() returns()
func (_StakingFacet *StakingFacetTransactorSession) RequestUnlockStake() (*types.Transaction, error) {
	return _StakingFacet.Contract.RequestUnlockStake(&_StakingFacet.TransactOpts)
}

// RequestUnlockStakeFor is a paid mutator transaction binding the contract method 0x4fcf2b72.
//
// Solidity: function requestUnlockStakeFor(address who) returns()
func (_StakingFacet *StakingFacetTransactor) RequestUnlockStakeFor(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "requestUnlockStakeFor", who)
}

// RequestUnlockStakeFor is a paid mutator transaction binding the contract method 0x4fcf2b72.
//
// Solidity: function requestUnlockStakeFor(address who) returns()
func (_StakingFacet *StakingFacetSession) RequestUnlockStakeFor(who common.Address) (*types.Transaction, error) {
	return _StakingFacet.Contract.RequestUnlockStakeFor(&_StakingFacet.TransactOpts, who)
}

// RequestUnlockStakeFor is a paid mutator transaction binding the contract method 0x4fcf2b72.
//
// Solidity: function requestUnlockStakeFor(address who) returns()
func (_StakingFacet *StakingFacetTransactorSession) RequestUnlockStakeFor(who common.Address) (*types.Transaction, error) {
	return _StakingFacet.Contract.RequestUnlockStakeFor(&_StakingFacet.TransactOpts, who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_StakingFacet *StakingFacetTransactor) RevokeOperator(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "revokeOperator", who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_StakingFacet *StakingFacetSession) RevokeOperator(who common.Address) (*types.Transaction, error) {
	return _StakingFacet.Contract.RevokeOperator(&_StakingFacet.TransactOpts, who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_StakingFacet *StakingFacetTransactorSession) RevokeOperator(who common.Address) (*types.Transaction, error) {
	return _StakingFacet.Contract.RevokeOperator(&_StakingFacet.TransactOpts, who)
}

// SetEpochDelay is a paid mutator transaction binding the contract method 0xbd695a43.
//
// Solidity: function setEpochDelay(uint256 _epochDelay) returns()
func (_StakingFacet *StakingFacetTransactor) SetEpochDelay(opts *bind.TransactOpts, _epochDelay *big.Int) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "setEpochDelay", _epochDelay)
}

// SetEpochDelay is a paid mutator transaction binding the contract method 0xbd695a43.
//
// Solidity: function setEpochDelay(uint256 _epochDelay) returns()
func (_StakingFacet *StakingFacetSession) SetEpochDelay(_epochDelay *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.SetEpochDelay(&_StakingFacet.TransactOpts, _epochDelay)
}

// SetEpochDelay is a paid mutator transaction binding the contract method 0xbd695a43.
//
// Solidity: function setEpochDelay(uint256 _epochDelay) returns()
func (_StakingFacet *StakingFacetTransactorSession) SetEpochDelay(_epochDelay *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.SetEpochDelay(&_StakingFacet.TransactOpts, _epochDelay)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_StakingFacet *StakingFacetTransactor) SetGovernance(opts *bind.TransactOpts, governance_ common.Address) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "setGovernance", governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_StakingFacet *StakingFacetSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _StakingFacet.Contract.SetGovernance(&_StakingFacet.TransactOpts, governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_StakingFacet *StakingFacetTransactorSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _StakingFacet.Contract.SetGovernance(&_StakingFacet.TransactOpts, governance_)
}

// SetMajorStakeFine is a paid mutator transaction binding the contract method 0x78146c2f.
//
// Solidity: function setMajorStakeFine(uint256 _majorStakeFine) returns()
func (_StakingFacet *StakingFacetTransactor) SetMajorStakeFine(opts *bind.TransactOpts, _majorStakeFine *big.Int) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "setMajorStakeFine", _majorStakeFine)
}

// SetMajorStakeFine is a paid mutator transaction binding the contract method 0x78146c2f.
//
// Solidity: function setMajorStakeFine(uint256 _majorStakeFine) returns()
func (_StakingFacet *StakingFacetSession) SetMajorStakeFine(_majorStakeFine *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.SetMajorStakeFine(&_StakingFacet.TransactOpts, _majorStakeFine)
}

// SetMajorStakeFine is a paid mutator transaction binding the contract method 0x78146c2f.
//
// Solidity: function setMajorStakeFine(uint256 _majorStakeFine) returns()
func (_StakingFacet *StakingFacetTransactorSession) SetMajorStakeFine(_majorStakeFine *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.SetMajorStakeFine(&_StakingFacet.TransactOpts, _majorStakeFine)
}

// SetMinimumStake is a paid mutator transaction binding the contract method 0x233e9903.
//
// Solidity: function setMinimumStake(uint256 _minimumStake) returns()
func (_StakingFacet *StakingFacetTransactor) SetMinimumStake(opts *bind.TransactOpts, _minimumStake *big.Int) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "setMinimumStake", _minimumStake)
}

// SetMinimumStake is a paid mutator transaction binding the contract method 0x233e9903.
//
// Solidity: function setMinimumStake(uint256 _minimumStake) returns()
func (_StakingFacet *StakingFacetSession) SetMinimumStake(_minimumStake *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.SetMinimumStake(&_StakingFacet.TransactOpts, _minimumStake)
}

// SetMinimumStake is a paid mutator transaction binding the contract method 0x233e9903.
//
// Solidity: function setMinimumStake(uint256 _minimumStake) returns()
func (_StakingFacet *StakingFacetTransactorSession) SetMinimumStake(_minimumStake *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.SetMinimumStake(&_StakingFacet.TransactOpts, _minimumStake)
}

// SetMinorStakeFine is a paid mutator transaction binding the contract method 0x29693c5c.
//
// Solidity: function setMinorStakeFine(uint256 _minorStakeFine) returns()
func (_StakingFacet *StakingFacetTransactor) SetMinorStakeFine(opts *bind.TransactOpts, _minorStakeFine *big.Int) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "setMinorStakeFine", _minorStakeFine)
}

// SetMinorStakeFine is a paid mutator transaction binding the contract method 0x29693c5c.
//
// Solidity: function setMinorStakeFine(uint256 _minorStakeFine) returns()
func (_StakingFacet *StakingFacetSession) SetMinorStakeFine(_minorStakeFine *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.SetMinorStakeFine(&_StakingFacet.TransactOpts, _minorStakeFine)
}

// SetMinorStakeFine is a paid mutator transaction binding the contract method 0x29693c5c.
//
// Solidity: function setMinorStakeFine(uint256 _minorStakeFine) returns()
func (_StakingFacet *StakingFacetTransactorSession) SetMinorStakeFine(_minorStakeFine *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.SetMinorStakeFine(&_StakingFacet.TransactOpts, _minorStakeFine)
}

// SetRewardAmount is a paid mutator transaction binding the contract method 0xa8a65a78.
//
// Solidity: function setRewardAmount(uint256 _rewardAmount) returns()
func (_StakingFacet *StakingFacetTransactor) SetRewardAmount(opts *bind.TransactOpts, _rewardAmount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "setRewardAmount", _rewardAmount)
}

// SetRewardAmount is a paid mutator transaction binding the contract method 0xa8a65a78.
//
// Solidity: function setRewardAmount(uint256 _rewardAmount) returns()
func (_StakingFacet *StakingFacetSession) SetRewardAmount(_rewardAmount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.SetRewardAmount(&_StakingFacet.TransactOpts, _rewardAmount)
}

// SetRewardAmount is a paid mutator transaction binding the contract method 0xa8a65a78.
//
// Solidity: function setRewardAmount(uint256 _rewardAmount) returns()
func (_StakingFacet *StakingFacetTransactorSession) SetRewardAmount(_rewardAmount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.SetRewardAmount(&_StakingFacet.TransactOpts, _rewardAmount)
}

// SetRewardBonus is a paid mutator transaction binding the contract method 0xf95d80fa.
//
// Solidity: function setRewardBonus(uint256 _rewardBonus) returns()
func (_StakingFacet *StakingFacetTransactor) SetRewardBonus(opts *bind.TransactOpts, _rewardBonus *big.Int) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "setRewardBonus", _rewardBonus)
}

// SetRewardBonus is a paid mutator transaction binding the contract method 0xf95d80fa.
//
// Solidity: function setRewardBonus(uint256 _rewardBonus) returns()
func (_StakingFacet *StakingFacetSession) SetRewardBonus(_rewardBonus *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.SetRewardBonus(&_StakingFacet.TransactOpts, _rewardBonus)
}

// SetRewardBonus is a paid mutator transaction binding the contract method 0xf95d80fa.
//
// Solidity: function setRewardBonus(uint256 _rewardBonus) returns()
func (_StakingFacet *StakingFacetTransactorSession) SetRewardBonus(_rewardBonus *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.SetRewardBonus(&_StakingFacet.TransactOpts, _rewardBonus)
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_StakingFacet *StakingFacetTransactor) Start(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "start")
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_StakingFacet *StakingFacetSession) Start() (*types.Transaction, error) {
	return _StakingFacet.Contract.Start(&_StakingFacet.TransactOpts)
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_StakingFacet *StakingFacetTransactorSession) Start() (*types.Transaction, error) {
	return _StakingFacet.Contract.Start(&_StakingFacet.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_StakingFacet *StakingFacetTransactor) Stop(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "stop")
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_StakingFacet *StakingFacetSession) Stop() (*types.Transaction, error) {
	return _StakingFacet.Contract.Stop(&_StakingFacet.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_StakingFacet *StakingFacetTransactorSession) Stop() (*types.Transaction, error) {
	return _StakingFacet.Contract.Stop(&_StakingFacet.TransactOpts)
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_StakingFacet *StakingFacetTransactor) TakeOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "takeOwnership")
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_StakingFacet *StakingFacetSession) TakeOwnership() (*types.Transaction, error) {
	return _StakingFacet.Contract.TakeOwnership(&_StakingFacet.TransactOpts)
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_StakingFacet *StakingFacetTransactorSession) TakeOwnership() (*types.Transaction, error) {
	return _StakingFacet.Contract.TakeOwnership(&_StakingFacet.TransactOpts)
}

// UnlockReward is a paid mutator transaction binding the contract method 0xf1b7f4bf.
//
// Solidity: function unlockReward() returns(bool)
func (_StakingFacet *StakingFacetTransactor) UnlockReward(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "unlockReward")
}

// UnlockReward is a paid mutator transaction binding the contract method 0xf1b7f4bf.
//
// Solidity: function unlockReward() returns(bool)
func (_StakingFacet *StakingFacetSession) UnlockReward() (*types.Transaction, error) {
	return _StakingFacet.Contract.UnlockReward(&_StakingFacet.TransactOpts)
}

// UnlockReward is a paid mutator transaction binding the contract method 0xf1b7f4bf.
//
// Solidity: function unlockReward() returns(bool)
func (_StakingFacet *StakingFacetTransactorSession) UnlockReward() (*types.Transaction, error) {
	return _StakingFacet.Contract.UnlockReward(&_StakingFacet.TransactOpts)
}

// UnlockRewardFor is a paid mutator transaction binding the contract method 0x7f91bd69.
//
// Solidity: function unlockRewardFor(address who) returns(bool)
func (_StakingFacet *StakingFacetTransactor) UnlockRewardFor(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "unlockRewardFor", who)
}

// UnlockRewardFor is a paid mutator transaction binding the contract method 0x7f91bd69.
//
// Solidity: function unlockRewardFor(address who) returns(bool)
func (_StakingFacet *StakingFacetSession) UnlockRewardFor(who common.Address) (*types.Transaction, error) {
	return _StakingFacet.Contract.UnlockRewardFor(&_StakingFacet.TransactOpts, who)
}

// UnlockRewardFor is a paid mutator transaction binding the contract method 0x7f91bd69.
//
// Solidity: function unlockRewardFor(address who) returns(bool)
func (_StakingFacet *StakingFacetTransactorSession) UnlockRewardFor(who common.Address) (*types.Transaction, error) {
	return _StakingFacet.Contract.UnlockRewardFor(&_StakingFacet.TransactOpts, who)
}

// UnlockStake is a paid mutator transaction binding the contract method 0xecd8c06a.
//
// Solidity: function unlockStake(uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetTransactor) UnlockStake(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "unlockStake", amount)
}

// UnlockStake is a paid mutator transaction binding the contract method 0xecd8c06a.
//
// Solidity: function unlockStake(uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetSession) UnlockStake(amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.UnlockStake(&_StakingFacet.TransactOpts, amount)
}

// UnlockStake is a paid mutator transaction binding the contract method 0xecd8c06a.
//
// Solidity: function unlockStake(uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetTransactorSession) UnlockStake(amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.UnlockStake(&_StakingFacet.TransactOpts, amount)
}

// UnlockStakeFor is a paid mutator transaction binding the contract method 0xe29dda92.
//
// Solidity: function unlockStakeFor(address who, uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetTransactor) UnlockStakeFor(opts *bind.TransactOpts, who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "unlockStakeFor", who, amount)
}

// UnlockStakeFor is a paid mutator transaction binding the contract method 0xe29dda92.
//
// Solidity: function unlockStakeFor(address who, uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetSession) UnlockStakeFor(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.UnlockStakeFor(&_StakingFacet.TransactOpts, who, amount)
}

// UnlockStakeFor is a paid mutator transaction binding the contract method 0xe29dda92.
//
// Solidity: function unlockStakeFor(address who, uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetTransactorSession) UnlockStakeFor(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.UnlockStakeFor(&_StakingFacet.TransactOpts, who, amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetTransactor) Withdraw(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "withdraw", amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetSession) Withdraw(amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.Withdraw(&_StakingFacet.TransactOpts, amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetTransactorSession) Withdraw(amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.Withdraw(&_StakingFacet.TransactOpts, amount)
}

// WithdrawFor is a paid mutator transaction binding the contract method 0xdb518db2.
//
// Solidity: function withdrawFor(address who, uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetTransactor) WithdrawFor(opts *bind.TransactOpts, who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "withdrawFor", who, amount)
}

// WithdrawFor is a paid mutator transaction binding the contract method 0xdb518db2.
//
// Solidity: function withdrawFor(address who, uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetSession) WithdrawFor(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.WithdrawFor(&_StakingFacet.TransactOpts, who, amount)
}

// WithdrawFor is a paid mutator transaction binding the contract method 0xdb518db2.
//
// Solidity: function withdrawFor(address who, uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetTransactorSession) WithdrawFor(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.WithdrawFor(&_StakingFacet.TransactOpts, who, amount)
}

// WithdrawReward is a paid mutator transaction binding the contract method 0x523a3f08.
//
// Solidity: function withdrawReward(uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetTransactor) WithdrawReward(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "withdrawReward", amount)
}

// WithdrawReward is a paid mutator transaction binding the contract method 0x523a3f08.
//
// Solidity: function withdrawReward(uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetSession) WithdrawReward(amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.WithdrawReward(&_StakingFacet.TransactOpts, amount)
}

// WithdrawReward is a paid mutator transaction binding the contract method 0x523a3f08.
//
// Solidity: function withdrawReward(uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetTransactorSession) WithdrawReward(amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.WithdrawReward(&_StakingFacet.TransactOpts, amount)
}

// StakingLibraryMetaData contains all meta data concerning the StakingLibrary contract.
var StakingLibraryMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burnt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"why\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Fined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LockedReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LockedStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"RequestedUnlockStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnlockedReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnlockedStake\",\"type\":\"event\"}]",
	Bin: "0x60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220755cfbdf5d603af80596cfbf2300fbb86811b7c6294f350eb90654a4f7ce6c8e64736f6c63430008060033",
}

// StakingLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use StakingLibraryMetaData.ABI instead.
var StakingLibraryABI = StakingLibraryMetaData.ABI

// StakingLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StakingLibraryMetaData.Bin instead.
var StakingLibraryBin = StakingLibraryMetaData.Bin

// DeployStakingLibrary deploys a new Ethereum contract, binding an instance of StakingLibrary to it.
func DeployStakingLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *StakingLibrary, error) {
	parsed, err := StakingLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StakingLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &StakingLibrary{StakingLibraryCaller: StakingLibraryCaller{contract: contract}, StakingLibraryTransactor: StakingLibraryTransactor{contract: contract}, StakingLibraryFilterer: StakingLibraryFilterer{contract: contract}}, nil
}

// StakingLibrary is an auto generated Go binding around an Ethereum contract.
type StakingLibrary struct {
	StakingLibraryCaller     // Read-only binding to the contract
	StakingLibraryTransactor // Write-only binding to the contract
	StakingLibraryFilterer   // Log filterer for contract events
}

// StakingLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type StakingLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StakingLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StakingLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StakingLibrarySession struct {
	Contract     *StakingLibrary   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StakingLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StakingLibraryCallerSession struct {
	Contract *StakingLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// StakingLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StakingLibraryTransactorSession struct {
	Contract     *StakingLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// StakingLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type StakingLibraryRaw struct {
	Contract *StakingLibrary // Generic contract binding to access the raw methods on
}

// StakingLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StakingLibraryCallerRaw struct {
	Contract *StakingLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// StakingLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StakingLibraryTransactorRaw struct {
	Contract *StakingLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStakingLibrary creates a new instance of StakingLibrary, bound to a specific deployed contract.
func NewStakingLibrary(address common.Address, backend bind.ContractBackend) (*StakingLibrary, error) {
	contract, err := bindStakingLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &StakingLibrary{StakingLibraryCaller: StakingLibraryCaller{contract: contract}, StakingLibraryTransactor: StakingLibraryTransactor{contract: contract}, StakingLibraryFilterer: StakingLibraryFilterer{contract: contract}}, nil
}

// NewStakingLibraryCaller creates a new read-only instance of StakingLibrary, bound to a specific deployed contract.
func NewStakingLibraryCaller(address common.Address, caller bind.ContractCaller) (*StakingLibraryCaller, error) {
	contract, err := bindStakingLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StakingLibraryCaller{contract: contract}, nil
}

// NewStakingLibraryTransactor creates a new write-only instance of StakingLibrary, bound to a specific deployed contract.
func NewStakingLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*StakingLibraryTransactor, error) {
	contract, err := bindStakingLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StakingLibraryTransactor{contract: contract}, nil
}

// NewStakingLibraryFilterer creates a new log filterer instance of StakingLibrary, bound to a specific deployed contract.
func NewStakingLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*StakingLibraryFilterer, error) {
	contract, err := bindStakingLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StakingLibraryFilterer{contract: contract}, nil
}

// bindStakingLibrary binds a generic wrapper to an already deployed contract.
func bindStakingLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StakingLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StakingLibrary *StakingLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StakingLibrary.Contract.StakingLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StakingLibrary *StakingLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakingLibrary.Contract.StakingLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StakingLibrary *StakingLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StakingLibrary.Contract.StakingLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StakingLibrary *StakingLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StakingLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StakingLibrary *StakingLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakingLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StakingLibrary *StakingLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StakingLibrary.Contract.contract.Transact(opts, method, params...)
}

// StakingLibraryBurntIterator is returned from FilterBurnt and is used to iterate over the raw logs and unpacked data for Burnt events raised by the StakingLibrary contract.
type StakingLibraryBurntIterator struct {
	Event *StakingLibraryBurnt // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingLibraryBurntIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingLibraryBurnt)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingLibraryBurnt)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingLibraryBurntIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingLibraryBurntIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingLibraryBurnt represents a Burnt event raised by the StakingLibrary contract.
type StakingLibraryBurnt struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBurnt is a free log retrieval operation binding the contract event 0x919f7e2092ffcc9d09f599be18d8152860b0c054df788a33bc549cdd9d0f15b1.
//
// Solidity: event Burnt(address indexed who, uint256 amount)
func (_StakingLibrary *StakingLibraryFilterer) FilterBurnt(opts *bind.FilterOpts, who []common.Address) (*StakingLibraryBurntIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingLibrary.contract.FilterLogs(opts, "Burnt", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingLibraryBurntIterator{contract: _StakingLibrary.contract, event: "Burnt", logs: logs, sub: sub}, nil
}

// WatchBurnt is a free log subscription operation binding the contract event 0x919f7e2092ffcc9d09f599be18d8152860b0c054df788a33bc549cdd9d0f15b1.
//
// Solidity: event Burnt(address indexed who, uint256 amount)
func (_StakingLibrary *StakingLibraryFilterer) WatchBurnt(opts *bind.WatchOpts, sink chan<- *StakingLibraryBurnt, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingLibrary.contract.WatchLogs(opts, "Burnt", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingLibraryBurnt)
				if err := _StakingLibrary.contract.UnpackLog(event, "Burnt", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBurnt is a log parse operation binding the contract event 0x919f7e2092ffcc9d09f599be18d8152860b0c054df788a33bc549cdd9d0f15b1.
//
// Solidity: event Burnt(address indexed who, uint256 amount)
func (_StakingLibrary *StakingLibraryFilterer) ParseBurnt(log types.Log) (*StakingLibraryBurnt, error) {
	event := new(StakingLibraryBurnt)
	if err := _StakingLibrary.contract.UnpackLog(event, "Burnt", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingLibraryFinedIterator is returned from FilterFined and is used to iterate over the raw logs and unpacked data for Fined events raised by the StakingLibrary contract.
type StakingLibraryFinedIterator struct {
	Event *StakingLibraryFined // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingLibraryFinedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingLibraryFined)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingLibraryFined)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingLibraryFinedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingLibraryFinedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingLibraryFined represents a Fined event raised by the StakingLibrary contract.
type StakingLibraryFined struct {
	Who    common.Address
	Why    [32]byte
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterFined is a free log retrieval operation binding the contract event 0xf1254bf6cf04a475bd832353c2ccfc5e0d89e7b9c0f05a153ff897b6121b91e9.
//
// Solidity: event Fined(address indexed who, bytes32 why, uint256 amount)
func (_StakingLibrary *StakingLibraryFilterer) FilterFined(opts *bind.FilterOpts, who []common.Address) (*StakingLibraryFinedIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingLibrary.contract.FilterLogs(opts, "Fined", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingLibraryFinedIterator{contract: _StakingLibrary.contract, event: "Fined", logs: logs, sub: sub}, nil
}

// WatchFined is a free log subscription operation binding the contract event 0xf1254bf6cf04a475bd832353c2ccfc5e0d89e7b9c0f05a153ff897b6121b91e9.
//
// Solidity: event Fined(address indexed who, bytes32 why, uint256 amount)
func (_StakingLibrary *StakingLibraryFilterer) WatchFined(opts *bind.WatchOpts, sink chan<- *StakingLibraryFined, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingLibrary.contract.WatchLogs(opts, "Fined", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingLibraryFined)
				if err := _StakingLibrary.contract.UnpackLog(event, "Fined", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFined is a log parse operation binding the contract event 0xf1254bf6cf04a475bd832353c2ccfc5e0d89e7b9c0f05a153ff897b6121b91e9.
//
// Solidity: event Fined(address indexed who, bytes32 why, uint256 amount)
func (_StakingLibrary *StakingLibraryFilterer) ParseFined(log types.Log) (*StakingLibraryFined, error) {
	event := new(StakingLibraryFined)
	if err := _StakingLibrary.contract.UnpackLog(event, "Fined", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingLibraryLockedRewardIterator is returned from FilterLockedReward and is used to iterate over the raw logs and unpacked data for LockedReward events raised by the StakingLibrary contract.
type StakingLibraryLockedRewardIterator struct {
	Event *StakingLibraryLockedReward // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingLibraryLockedRewardIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingLibraryLockedReward)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingLibraryLockedReward)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingLibraryLockedRewardIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingLibraryLockedRewardIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingLibraryLockedReward represents a LockedReward event raised by the StakingLibrary contract.
type StakingLibraryLockedReward struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterLockedReward is a free log retrieval operation binding the contract event 0x28dc9c0ffa672df041cad84edbee41508284600c9394bda0f8586d012c5e0915.
//
// Solidity: event LockedReward(address indexed who, uint256 amount)
func (_StakingLibrary *StakingLibraryFilterer) FilterLockedReward(opts *bind.FilterOpts, who []common.Address) (*StakingLibraryLockedRewardIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingLibrary.contract.FilterLogs(opts, "LockedReward", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingLibraryLockedRewardIterator{contract: _StakingLibrary.contract, event: "LockedReward", logs: logs, sub: sub}, nil
}

// WatchLockedReward is a free log subscription operation binding the contract event 0x28dc9c0ffa672df041cad84edbee41508284600c9394bda0f8586d012c5e0915.
//
// Solidity: event LockedReward(address indexed who, uint256 amount)
func (_StakingLibrary *StakingLibraryFilterer) WatchLockedReward(opts *bind.WatchOpts, sink chan<- *StakingLibraryLockedReward, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingLibrary.contract.WatchLogs(opts, "LockedReward", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingLibraryLockedReward)
				if err := _StakingLibrary.contract.UnpackLog(event, "LockedReward", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLockedReward is a log parse operation binding the contract event 0x28dc9c0ffa672df041cad84edbee41508284600c9394bda0f8586d012c5e0915.
//
// Solidity: event LockedReward(address indexed who, uint256 amount)
func (_StakingLibrary *StakingLibraryFilterer) ParseLockedReward(log types.Log) (*StakingLibraryLockedReward, error) {
	event := new(StakingLibraryLockedReward)
	if err := _StakingLibrary.contract.UnpackLog(event, "LockedReward", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingLibraryLockedStakeIterator is returned from FilterLockedStake and is used to iterate over the raw logs and unpacked data for LockedStake events raised by the StakingLibrary contract.
type StakingLibraryLockedStakeIterator struct {
	Event *StakingLibraryLockedStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingLibraryLockedStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingLibraryLockedStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingLibraryLockedStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingLibraryLockedStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingLibraryLockedStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingLibraryLockedStake represents a LockedStake event raised by the StakingLibrary contract.
type StakingLibraryLockedStake struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterLockedStake is a free log retrieval operation binding the contract event 0x1de2f07b0a1c69916a8b25b889051644192307ea08444a2e11f8654d1db3ab0c.
//
// Solidity: event LockedStake(address indexed who, uint256 amount)
func (_StakingLibrary *StakingLibraryFilterer) FilterLockedStake(opts *bind.FilterOpts, who []common.Address) (*StakingLibraryLockedStakeIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingLibrary.contract.FilterLogs(opts, "LockedStake", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingLibraryLockedStakeIterator{contract: _StakingLibrary.contract, event: "LockedStake", logs: logs, sub: sub}, nil
}

// WatchLockedStake is a free log subscription operation binding the contract event 0x1de2f07b0a1c69916a8b25b889051644192307ea08444a2e11f8654d1db3ab0c.
//
// Solidity: event LockedStake(address indexed who, uint256 amount)
func (_StakingLibrary *StakingLibraryFilterer) WatchLockedStake(opts *bind.WatchOpts, sink chan<- *StakingLibraryLockedStake, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingLibrary.contract.WatchLogs(opts, "LockedStake", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingLibraryLockedStake)
				if err := _StakingLibrary.contract.UnpackLog(event, "LockedStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLockedStake is a log parse operation binding the contract event 0x1de2f07b0a1c69916a8b25b889051644192307ea08444a2e11f8654d1db3ab0c.
//
// Solidity: event LockedStake(address indexed who, uint256 amount)
func (_StakingLibrary *StakingLibraryFilterer) ParseLockedStake(log types.Log) (*StakingLibraryLockedStake, error) {
	event := new(StakingLibraryLockedStake)
	if err := _StakingLibrary.contract.UnpackLog(event, "LockedStake", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingLibraryRequestedUnlockStakeIterator is returned from FilterRequestedUnlockStake and is used to iterate over the raw logs and unpacked data for RequestedUnlockStake events raised by the StakingLibrary contract.
type StakingLibraryRequestedUnlockStakeIterator struct {
	Event *StakingLibraryRequestedUnlockStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingLibraryRequestedUnlockStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingLibraryRequestedUnlockStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingLibraryRequestedUnlockStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingLibraryRequestedUnlockStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingLibraryRequestedUnlockStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingLibraryRequestedUnlockStake represents a RequestedUnlockStake event raised by the StakingLibrary contract.
type StakingLibraryRequestedUnlockStake struct {
	Who common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterRequestedUnlockStake is a free log retrieval operation binding the contract event 0x1fde0d8a6620647f5c7b5632a87b23101ba553c9b474caf1134fb24d92bf6ddc.
//
// Solidity: event RequestedUnlockStake(address indexed who)
func (_StakingLibrary *StakingLibraryFilterer) FilterRequestedUnlockStake(opts *bind.FilterOpts, who []common.Address) (*StakingLibraryRequestedUnlockStakeIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingLibrary.contract.FilterLogs(opts, "RequestedUnlockStake", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingLibraryRequestedUnlockStakeIterator{contract: _StakingLibrary.contract, event: "RequestedUnlockStake", logs: logs, sub: sub}, nil
}

// WatchRequestedUnlockStake is a free log subscription operation binding the contract event 0x1fde0d8a6620647f5c7b5632a87b23101ba553c9b474caf1134fb24d92bf6ddc.
//
// Solidity: event RequestedUnlockStake(address indexed who)
func (_StakingLibrary *StakingLibraryFilterer) WatchRequestedUnlockStake(opts *bind.WatchOpts, sink chan<- *StakingLibraryRequestedUnlockStake, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingLibrary.contract.WatchLogs(opts, "RequestedUnlockStake", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingLibraryRequestedUnlockStake)
				if err := _StakingLibrary.contract.UnpackLog(event, "RequestedUnlockStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRequestedUnlockStake is a log parse operation binding the contract event 0x1fde0d8a6620647f5c7b5632a87b23101ba553c9b474caf1134fb24d92bf6ddc.
//
// Solidity: event RequestedUnlockStake(address indexed who)
func (_StakingLibrary *StakingLibraryFilterer) ParseRequestedUnlockStake(log types.Log) (*StakingLibraryRequestedUnlockStake, error) {
	event := new(StakingLibraryRequestedUnlockStake)
	if err := _StakingLibrary.contract.UnpackLog(event, "RequestedUnlockStake", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingLibraryUnlockedRewardIterator is returned from FilterUnlockedReward and is used to iterate over the raw logs and unpacked data for UnlockedReward events raised by the StakingLibrary contract.
type StakingLibraryUnlockedRewardIterator struct {
	Event *StakingLibraryUnlockedReward // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingLibraryUnlockedRewardIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingLibraryUnlockedReward)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingLibraryUnlockedReward)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingLibraryUnlockedRewardIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingLibraryUnlockedRewardIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingLibraryUnlockedReward represents a UnlockedReward event raised by the StakingLibrary contract.
type StakingLibraryUnlockedReward struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterUnlockedReward is a free log retrieval operation binding the contract event 0x496a1c9a1a9ac29d87ecb4e563683ebd0ee80798869f36c86175059eb5dc7304.
//
// Solidity: event UnlockedReward(address indexed who, uint256 amount)
func (_StakingLibrary *StakingLibraryFilterer) FilterUnlockedReward(opts *bind.FilterOpts, who []common.Address) (*StakingLibraryUnlockedRewardIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingLibrary.contract.FilterLogs(opts, "UnlockedReward", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingLibraryUnlockedRewardIterator{contract: _StakingLibrary.contract, event: "UnlockedReward", logs: logs, sub: sub}, nil
}

// WatchUnlockedReward is a free log subscription operation binding the contract event 0x496a1c9a1a9ac29d87ecb4e563683ebd0ee80798869f36c86175059eb5dc7304.
//
// Solidity: event UnlockedReward(address indexed who, uint256 amount)
func (_StakingLibrary *StakingLibraryFilterer) WatchUnlockedReward(opts *bind.WatchOpts, sink chan<- *StakingLibraryUnlockedReward, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingLibrary.contract.WatchLogs(opts, "UnlockedReward", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingLibraryUnlockedReward)
				if err := _StakingLibrary.contract.UnpackLog(event, "UnlockedReward", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnlockedReward is a log parse operation binding the contract event 0x496a1c9a1a9ac29d87ecb4e563683ebd0ee80798869f36c86175059eb5dc7304.
//
// Solidity: event UnlockedReward(address indexed who, uint256 amount)
func (_StakingLibrary *StakingLibraryFilterer) ParseUnlockedReward(log types.Log) (*StakingLibraryUnlockedReward, error) {
	event := new(StakingLibraryUnlockedReward)
	if err := _StakingLibrary.contract.UnpackLog(event, "UnlockedReward", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingLibraryUnlockedStakeIterator is returned from FilterUnlockedStake and is used to iterate over the raw logs and unpacked data for UnlockedStake events raised by the StakingLibrary contract.
type StakingLibraryUnlockedStakeIterator struct {
	Event *StakingLibraryUnlockedStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingLibraryUnlockedStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingLibraryUnlockedStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingLibraryUnlockedStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingLibraryUnlockedStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingLibraryUnlockedStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingLibraryUnlockedStake represents a UnlockedStake event raised by the StakingLibrary contract.
type StakingLibraryUnlockedStake struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterUnlockedStake is a free log retrieval operation binding the contract event 0x252a696583e35c4d61332829d3bb2a8236f2500140258f089951799c9b999a9c.
//
// Solidity: event UnlockedStake(address indexed who, uint256 amount)
func (_StakingLibrary *StakingLibraryFilterer) FilterUnlockedStake(opts *bind.FilterOpts, who []common.Address) (*StakingLibraryUnlockedStakeIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingLibrary.contract.FilterLogs(opts, "UnlockedStake", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingLibraryUnlockedStakeIterator{contract: _StakingLibrary.contract, event: "UnlockedStake", logs: logs, sub: sub}, nil
}

// WatchUnlockedStake is a free log subscription operation binding the contract event 0x252a696583e35c4d61332829d3bb2a8236f2500140258f089951799c9b999a9c.
//
// Solidity: event UnlockedStake(address indexed who, uint256 amount)
func (_StakingLibrary *StakingLibraryFilterer) WatchUnlockedStake(opts *bind.WatchOpts, sink chan<- *StakingLibraryUnlockedStake, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingLibrary.contract.WatchLogs(opts, "UnlockedStake", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingLibraryUnlockedStake)
				if err := _StakingLibrary.contract.UnpackLog(event, "UnlockedStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnlockedStake is a log parse operation binding the contract event 0x252a696583e35c4d61332829d3bb2a8236f2500140258f089951799c9b999a9c.
//
// Solidity: event UnlockedStake(address indexed who, uint256 amount)
func (_StakingLibrary *StakingLibraryFilterer) ParseUnlockedStake(log types.Log) (*StakingLibraryUnlockedStake, error) {
	event := new(StakingLibraryUnlockedStake)
	if err := _StakingLibrary.contract.UnpackLog(event, "UnlockedStake", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StopLibraryMetaData contains all meta data concerning the StopLibrary contract.
var StopLibraryMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203f10fdcca55cc9b3ed6c4771ca0e5eac9d04f373f1b5e18f7f05fa8b79ace62a64736f6c63430008060033",
}

// StopLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use StopLibraryMetaData.ABI instead.
var StopLibraryABI = StopLibraryMetaData.ABI

// StopLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StopLibraryMetaData.Bin instead.
var StopLibraryBin = StopLibraryMetaData.Bin

// DeployStopLibrary deploys a new Ethereum contract, binding an instance of StopLibrary to it.
func DeployStopLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *StopLibrary, error) {
	parsed, err := StopLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StopLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &StopLibrary{StopLibraryCaller: StopLibraryCaller{contract: contract}, StopLibraryTransactor: StopLibraryTransactor{contract: contract}, StopLibraryFilterer: StopLibraryFilterer{contract: contract}}, nil
}

// StopLibrary is an auto generated Go binding around an Ethereum contract.
type StopLibrary struct {
	StopLibraryCaller     // Read-only binding to the contract
	StopLibraryTransactor // Write-only binding to the contract
	StopLibraryFilterer   // Log filterer for contract events
}

// StopLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type StopLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StopLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StopLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StopLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StopLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StopLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StopLibrarySession struct {
	Contract     *StopLibrary      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StopLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StopLibraryCallerSession struct {
	Contract *StopLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// StopLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StopLibraryTransactorSession struct {
	Contract     *StopLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// StopLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type StopLibraryRaw struct {
	Contract *StopLibrary // Generic contract binding to access the raw methods on
}

// StopLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StopLibraryCallerRaw struct {
	Contract *StopLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// StopLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StopLibraryTransactorRaw struct {
	Contract *StopLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStopLibrary creates a new instance of StopLibrary, bound to a specific deployed contract.
func NewStopLibrary(address common.Address, backend bind.ContractBackend) (*StopLibrary, error) {
	contract, err := bindStopLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &StopLibrary{StopLibraryCaller: StopLibraryCaller{contract: contract}, StopLibraryTransactor: StopLibraryTransactor{contract: contract}, StopLibraryFilterer: StopLibraryFilterer{contract: contract}}, nil
}

// NewStopLibraryCaller creates a new read-only instance of StopLibrary, bound to a specific deployed contract.
func NewStopLibraryCaller(address common.Address, caller bind.ContractCaller) (*StopLibraryCaller, error) {
	contract, err := bindStopLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StopLibraryCaller{contract: contract}, nil
}

// NewStopLibraryTransactor creates a new write-only instance of StopLibrary, bound to a specific deployed contract.
func NewStopLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*StopLibraryTransactor, error) {
	contract, err := bindStopLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StopLibraryTransactor{contract: contract}, nil
}

// NewStopLibraryFilterer creates a new log filterer instance of StopLibrary, bound to a specific deployed contract.
func NewStopLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*StopLibraryFilterer, error) {
	contract, err := bindStopLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StopLibraryFilterer{contract: contract}, nil
}

// bindStopLibrary binds a generic wrapper to an already deployed contract.
func bindStopLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StopLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StopLibrary *StopLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StopLibrary.Contract.StopLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StopLibrary *StopLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StopLibrary.Contract.StopLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StopLibrary *StopLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StopLibrary.Contract.StopLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StopLibrary *StopLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StopLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StopLibrary *StopLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StopLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StopLibrary *StopLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StopLibrary.Contract.contract.Transact(opts, method, params...)
}

// StoppableMetaData contains all meta data concerning the Stoppable contract.
var StoppableMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"grantOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governance_\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50600061002561007060201b6107ee1760201c565b9050338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061009d565b6000807f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90508091505090565b610b3a806100ac6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063be9a65551161005b578063be9a6555146100b2578063dc978059146100bc578063e348da13146100d8578063fad8b32a146100f45761007d565b806307da68f514610082578063605361721461008c578063ab033ea914610096575b600080fd5b61008a610110565b005b6100946101ad565b005b6100b060048036038101906100ab9190610830565b6102b8565b005b6100ba6103aa565b005b6100d660048036038101906100d19190610830565b610447565b005b6100f260048036038101906100ed9190610830565b610539565b005b61010e60048036038101906101099190610830565b610698565b005b600061011a6107ee565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166101aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a190610929565b60405180910390fd5b50565b60006101b76107ee565b90508060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461024b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024290610909565b60405180910390fd5b8060020160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60006102c26107ee565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610356576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034d90610949565b60405180910390fd5b60006103606107ee565b9050828160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b60006103b46107ee565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610444576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043b90610929565b60405180910390fd5b50565b60006104516107ee565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146104e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104dc90610949565b60405180910390fd5b60006104ef6107ee565b9050828160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b60006105436107ee565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806105ee57508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b61062d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610624906108e9565b60405180910390fd5b60006106376107ee565b905060018160000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550505050565b60006106a26107ee565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061074d57508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b61078c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610783906108e9565b60405180910390fd5b60006107966107ee565b90508060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff0219169055505050565b6000807f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90508091505090565b60008135905061082a81610aed565b92915050565b600060208284031215610846576108456109ac565b5b60006108548482850161081b565b91505092915050565b600061086a602e83610969565b9150610875826109b1565b604082019050919050565b600061088d602583610969565b915061089882610a00565b604082019050919050565b60006108b0602683610969565b91506108bb82610a4f565b604082019050919050565b60006108d3602583610969565b91506108de82610a9e565b604082019050919050565b600060208201905081810360008301526109028161085d565b9050919050565b6000602082019050818103600083015261092281610880565b9050919050565b60006020820190508181036000830152610942816108a3565b9050919050565b60006020820190508181036000830152610962816108c6565b9050919050565b600082825260208201905092915050565b60006109858261098c565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b7f41636365737320436f6e74726f6c3a206f6e6c79206f776e6572206f72206f7060008201527f657261746f7220616c6c6f776564000000000000000000000000000000000000602082015250565b7f41636365737320436f6e74726f6c3a206f776e657273686970206e6f7420677260008201527f616e746564000000000000000000000000000000000000000000000000000000602082015250565b7f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160008201527f6c6c6f7765640000000000000000000000000000000000000000000000000000602082015250565b7f41636365737320436f6e74726f6c3a206f6e6c79206f776e657220697320616c60008201527f6c6f776564000000000000000000000000000000000000000000000000000000602082015250565b610af68161097a565b8114610b0157600080fd5b5056fea26469706673582212201864afc85d7d75ac5d3cdf6b58c9cae4078111aa96c470c1ac7559b140f8b0b864736f6c63430008060033",
}

// StoppableABI is the input ABI used to generate the binding from.
// Deprecated: Use StoppableMetaData.ABI instead.
var StoppableABI = StoppableMetaData.ABI

// StoppableBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StoppableMetaData.Bin instead.
var StoppableBin = StoppableMetaData.Bin

// DeployStoppable deploys a new Ethereum contract, binding an instance of Stoppable to it.
func DeployStoppable(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Stoppable, error) {
	parsed, err := StoppableMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StoppableBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Stoppable{StoppableCaller: StoppableCaller{contract: contract}, StoppableTransactor: StoppableTransactor{contract: contract}, StoppableFilterer: StoppableFilterer{contract: contract}}, nil
}

// Stoppable is an auto generated Go binding around an Ethereum contract.
type Stoppable struct {
	StoppableCaller     // Read-only binding to the contract
	StoppableTransactor // Write-only binding to the contract
	StoppableFilterer   // Log filterer for contract events
}

// StoppableCaller is an auto generated read-only Go binding around an Ethereum contract.
type StoppableCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StoppableTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StoppableTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StoppableFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StoppableFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StoppableSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StoppableSession struct {
	Contract     *Stoppable        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StoppableCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StoppableCallerSession struct {
	Contract *StoppableCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// StoppableTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StoppableTransactorSession struct {
	Contract     *StoppableTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// StoppableRaw is an auto generated low-level Go binding around an Ethereum contract.
type StoppableRaw struct {
	Contract *Stoppable // Generic contract binding to access the raw methods on
}

// StoppableCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StoppableCallerRaw struct {
	Contract *StoppableCaller // Generic read-only contract binding to access the raw methods on
}

// StoppableTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StoppableTransactorRaw struct {
	Contract *StoppableTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStoppable creates a new instance of Stoppable, bound to a specific deployed contract.
func NewStoppable(address common.Address, backend bind.ContractBackend) (*Stoppable, error) {
	contract, err := bindStoppable(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Stoppable{StoppableCaller: StoppableCaller{contract: contract}, StoppableTransactor: StoppableTransactor{contract: contract}, StoppableFilterer: StoppableFilterer{contract: contract}}, nil
}

// NewStoppableCaller creates a new read-only instance of Stoppable, bound to a specific deployed contract.
func NewStoppableCaller(address common.Address, caller bind.ContractCaller) (*StoppableCaller, error) {
	contract, err := bindStoppable(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StoppableCaller{contract: contract}, nil
}

// NewStoppableTransactor creates a new write-only instance of Stoppable, bound to a specific deployed contract.
func NewStoppableTransactor(address common.Address, transactor bind.ContractTransactor) (*StoppableTransactor, error) {
	contract, err := bindStoppable(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StoppableTransactor{contract: contract}, nil
}

// NewStoppableFilterer creates a new log filterer instance of Stoppable, bound to a specific deployed contract.
func NewStoppableFilterer(address common.Address, filterer bind.ContractFilterer) (*StoppableFilterer, error) {
	contract, err := bindStoppable(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StoppableFilterer{contract: contract}, nil
}

// bindStoppable binds a generic wrapper to an already deployed contract.
func bindStoppable(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StoppableABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Stoppable *StoppableRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Stoppable.Contract.StoppableCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Stoppable *StoppableRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Stoppable.Contract.StoppableTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Stoppable *StoppableRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Stoppable.Contract.StoppableTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Stoppable *StoppableCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Stoppable.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Stoppable *StoppableTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Stoppable.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Stoppable *StoppableTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Stoppable.Contract.contract.Transact(opts, method, params...)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_Stoppable *StoppableTransactor) GrantOperator(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _Stoppable.contract.Transact(opts, "grantOperator", who)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_Stoppable *StoppableSession) GrantOperator(who common.Address) (*types.Transaction, error) {
	return _Stoppable.Contract.GrantOperator(&_Stoppable.TransactOpts, who)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_Stoppable *StoppableTransactorSession) GrantOperator(who common.Address) (*types.Transaction, error) {
	return _Stoppable.Contract.GrantOperator(&_Stoppable.TransactOpts, who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_Stoppable *StoppableTransactor) GrantOwner(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _Stoppable.contract.Transact(opts, "grantOwner", who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_Stoppable *StoppableSession) GrantOwner(who common.Address) (*types.Transaction, error) {
	return _Stoppable.Contract.GrantOwner(&_Stoppable.TransactOpts, who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_Stoppable *StoppableTransactorSession) GrantOwner(who common.Address) (*types.Transaction, error) {
	return _Stoppable.Contract.GrantOwner(&_Stoppable.TransactOpts, who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_Stoppable *StoppableTransactor) RevokeOperator(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _Stoppable.contract.Transact(opts, "revokeOperator", who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_Stoppable *StoppableSession) RevokeOperator(who common.Address) (*types.Transaction, error) {
	return _Stoppable.Contract.RevokeOperator(&_Stoppable.TransactOpts, who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_Stoppable *StoppableTransactorSession) RevokeOperator(who common.Address) (*types.Transaction, error) {
	return _Stoppable.Contract.RevokeOperator(&_Stoppable.TransactOpts, who)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_Stoppable *StoppableTransactor) SetGovernance(opts *bind.TransactOpts, governance_ common.Address) (*types.Transaction, error) {
	return _Stoppable.contract.Transact(opts, "setGovernance", governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_Stoppable *StoppableSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _Stoppable.Contract.SetGovernance(&_Stoppable.TransactOpts, governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_Stoppable *StoppableTransactorSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _Stoppable.Contract.SetGovernance(&_Stoppable.TransactOpts, governance_)
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_Stoppable *StoppableTransactor) Start(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Stoppable.contract.Transact(opts, "start")
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_Stoppable *StoppableSession) Start() (*types.Transaction, error) {
	return _Stoppable.Contract.Start(&_Stoppable.TransactOpts)
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_Stoppable *StoppableTransactorSession) Start() (*types.Transaction, error) {
	return _Stoppable.Contract.Start(&_Stoppable.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_Stoppable *StoppableTransactor) Stop(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Stoppable.contract.Transact(opts, "stop")
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_Stoppable *StoppableSession) Stop() (*types.Transaction, error) {
	return _Stoppable.Contract.Stop(&_Stoppable.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_Stoppable *StoppableTransactorSession) Stop() (*types.Transaction, error) {
	return _Stoppable.Contract.Stop(&_Stoppable.TransactOpts)
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_Stoppable *StoppableTransactor) TakeOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Stoppable.contract.Transact(opts, "takeOwnership")
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_Stoppable *StoppableSession) TakeOwnership() (*types.Transaction, error) {
	return _Stoppable.Contract.TakeOwnership(&_Stoppable.TransactOpts)
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_Stoppable *StoppableTransactorSession) TakeOwnership() (*types.Transaction, error) {
	return _Stoppable.Contract.TakeOwnership(&_Stoppable.TransactOpts)
}

// StringsMetaData contains all meta data concerning the Strings contract.
var StringsMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122053026e5967d7b3fa5733ab30a7f1fd7233d280d95d386770fc0e4a51658f22a264736f6c63430008060033",
}

// StringsABI is the input ABI used to generate the binding from.
// Deprecated: Use StringsMetaData.ABI instead.
var StringsABI = StringsMetaData.ABI

// StringsBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StringsMetaData.Bin instead.
var StringsBin = StringsMetaData.Bin

// DeployStrings deploys a new Ethereum contract, binding an instance of Strings to it.
func DeployStrings(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Strings, error) {
	parsed, err := StringsMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StringsBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Strings{StringsCaller: StringsCaller{contract: contract}, StringsTransactor: StringsTransactor{contract: contract}, StringsFilterer: StringsFilterer{contract: contract}}, nil
}

// Strings is an auto generated Go binding around an Ethereum contract.
type Strings struct {
	StringsCaller     // Read-only binding to the contract
	StringsTransactor // Write-only binding to the contract
	StringsFilterer   // Log filterer for contract events
}

// StringsCaller is an auto generated read-only Go binding around an Ethereum contract.
type StringsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StringsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StringsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StringsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StringsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StringsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StringsSession struct {
	Contract     *Strings          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StringsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StringsCallerSession struct {
	Contract *StringsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// StringsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StringsTransactorSession struct {
	Contract     *StringsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// StringsRaw is an auto generated low-level Go binding around an Ethereum contract.
type StringsRaw struct {
	Contract *Strings // Generic contract binding to access the raw methods on
}

// StringsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StringsCallerRaw struct {
	Contract *StringsCaller // Generic read-only contract binding to access the raw methods on
}

// StringsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StringsTransactorRaw struct {
	Contract *StringsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStrings creates a new instance of Strings, bound to a specific deployed contract.
func NewStrings(address common.Address, backend bind.ContractBackend) (*Strings, error) {
	contract, err := bindStrings(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Strings{StringsCaller: StringsCaller{contract: contract}, StringsTransactor: StringsTransactor{contract: contract}, StringsFilterer: StringsFilterer{contract: contract}}, nil
}

// NewStringsCaller creates a new read-only instance of Strings, bound to a specific deployed contract.
func NewStringsCaller(address common.Address, caller bind.ContractCaller) (*StringsCaller, error) {
	contract, err := bindStrings(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StringsCaller{contract: contract}, nil
}

// NewStringsTransactor creates a new write-only instance of Strings, bound to a specific deployed contract.
func NewStringsTransactor(address common.Address, transactor bind.ContractTransactor) (*StringsTransactor, error) {
	contract, err := bindStrings(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StringsTransactor{contract: contract}, nil
}

// NewStringsFilterer creates a new log filterer instance of Strings, bound to a specific deployed contract.
func NewStringsFilterer(address common.Address, filterer bind.ContractFilterer) (*StringsFilterer, error) {
	contract, err := bindStrings(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StringsFilterer{contract: contract}, nil
}

// bindStrings binds a generic wrapper to an already deployed contract.
func bindStrings(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StringsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Strings *StringsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Strings.Contract.StringsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Strings *StringsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Strings.Contract.StringsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Strings *StringsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Strings.Contract.StringsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Strings *StringsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Strings.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Strings *StringsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Strings.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Strings *StringsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Strings.Contract.contract.Transact(opts, method, params...)
}

// SudoMetaData contains all meta data concerning the Sudo contract.
var SudoMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"callback_\",\"type\":\"address\"}],\"name\":\"modifyDiamondStorage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governance_\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// SudoABI is the input ABI used to generate the binding from.
// Deprecated: Use SudoMetaData.ABI instead.
var SudoABI = SudoMetaData.ABI

// Sudo is an auto generated Go binding around an Ethereum contract.
type Sudo struct {
	SudoCaller     // Read-only binding to the contract
	SudoTransactor // Write-only binding to the contract
	SudoFilterer   // Log filterer for contract events
}

// SudoCaller is an auto generated read-only Go binding around an Ethereum contract.
type SudoCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SudoTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SudoTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SudoFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SudoFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SudoSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SudoSession struct {
	Contract     *Sudo             // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SudoCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SudoCallerSession struct {
	Contract *SudoCaller   // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// SudoTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SudoTransactorSession struct {
	Contract     *SudoTransactor   // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SudoRaw is an auto generated low-level Go binding around an Ethereum contract.
type SudoRaw struct {
	Contract *Sudo // Generic contract binding to access the raw methods on
}

// SudoCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SudoCallerRaw struct {
	Contract *SudoCaller // Generic read-only contract binding to access the raw methods on
}

// SudoTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SudoTransactorRaw struct {
	Contract *SudoTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSudo creates a new instance of Sudo, bound to a specific deployed contract.
func NewSudo(address common.Address, backend bind.ContractBackend) (*Sudo, error) {
	contract, err := bindSudo(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Sudo{SudoCaller: SudoCaller{contract: contract}, SudoTransactor: SudoTransactor{contract: contract}, SudoFilterer: SudoFilterer{contract: contract}}, nil
}

// NewSudoCaller creates a new read-only instance of Sudo, bound to a specific deployed contract.
func NewSudoCaller(address common.Address, caller bind.ContractCaller) (*SudoCaller, error) {
	contract, err := bindSudo(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SudoCaller{contract: contract}, nil
}

// NewSudoTransactor creates a new write-only instance of Sudo, bound to a specific deployed contract.
func NewSudoTransactor(address common.Address, transactor bind.ContractTransactor) (*SudoTransactor, error) {
	contract, err := bindSudo(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SudoTransactor{contract: contract}, nil
}

// NewSudoFilterer creates a new log filterer instance of Sudo, bound to a specific deployed contract.
func NewSudoFilterer(address common.Address, filterer bind.ContractFilterer) (*SudoFilterer, error) {
	contract, err := bindSudo(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SudoFilterer{contract: contract}, nil
}

// bindSudo binds a generic wrapper to an already deployed contract.
func bindSudo(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SudoABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Sudo *SudoRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Sudo.Contract.SudoCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Sudo *SudoRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Sudo.Contract.SudoTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Sudo *SudoRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Sudo.Contract.SudoTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Sudo *SudoCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Sudo.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Sudo *SudoTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Sudo.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Sudo *SudoTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Sudo.Contract.contract.Transact(opts, method, params...)
}

// ModifyDiamondStorage is a paid mutator transaction binding the contract method 0x7f466ae3.
//
// Solidity: function modifyDiamondStorage(address callback_) returns(bool)
func (_Sudo *SudoTransactor) ModifyDiamondStorage(opts *bind.TransactOpts, callback_ common.Address) (*types.Transaction, error) {
	return _Sudo.contract.Transact(opts, "modifyDiamondStorage", callback_)
}

// ModifyDiamondStorage is a paid mutator transaction binding the contract method 0x7f466ae3.
//
// Solidity: function modifyDiamondStorage(address callback_) returns(bool)
func (_Sudo *SudoSession) ModifyDiamondStorage(callback_ common.Address) (*types.Transaction, error) {
	return _Sudo.Contract.ModifyDiamondStorage(&_Sudo.TransactOpts, callback_)
}

// ModifyDiamondStorage is a paid mutator transaction binding the contract method 0x7f466ae3.
//
// Solidity: function modifyDiamondStorage(address callback_) returns(bool)
func (_Sudo *SudoTransactorSession) ModifyDiamondStorage(callback_ common.Address) (*types.Transaction, error) {
	return _Sudo.Contract.ModifyDiamondStorage(&_Sudo.TransactOpts, callback_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_Sudo *SudoTransactor) SetGovernance(opts *bind.TransactOpts, governance_ common.Address) (*types.Transaction, error) {
	return _Sudo.contract.Transact(opts, "setGovernance", governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_Sudo *SudoSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _Sudo.Contract.SetGovernance(&_Sudo.TransactOpts, governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_Sudo *SudoTransactorSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _Sudo.Contract.SetGovernance(&_Sudo.TransactOpts, governance_)
}

// SudoFacetMetaData contains all meta data concerning the SudoFacet contract.
var SudoFacetMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"grantOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"callback_\",\"type\":\"address\"}],\"name\":\"modifyDiamondStorage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governance_\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50600061002561007060201b61088b1760201c565b9050338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061009d565b6000807f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90508091505090565b610d30806100ac6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806360536172146100675780637f466ae314610071578063ab033ea9146100a1578063dc978059146100bd578063e348da13146100d9578063fad8b32a146100f5575b600080fd5b61006f610111565b005b61008b600480360381019061008691906108cd565b61021c565b6040516100989190610a00565b60405180910390f35b6100bb60048036038101906100b691906108cd565b6103f2565b005b6100d760048036038101906100d291906108cd565b6104e4565b005b6100f360048036038101906100ee91906108cd565b6105d6565b005b61010f600480360381019061010a91906108cd565b610735565b005b600061011b61088b565b90508060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a690610a3b565b60405180910390fd5b8060020160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008061022761088b565b90508060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b290610a5b565b60405180910390fd5b60008373ffffffffffffffffffffffffffffffffffffffff166040516024016040516020818303038152906040527f083b2732000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161036491906109e9565b600060405180830381855af49150503d806000811461039f576040519150601f19603f3d011682016040523d82523d6000602084013e6103a4565b606091505b50509050806103e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103df90610a7b565b60405180910390fd5b8092505050919050565b60006103fc61088b565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610490576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048790610a9b565b60405180910390fd5b600061049a61088b565b9050828160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b60006104ee61088b565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610582576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057990610a9b565b60405180910390fd5b600061058c61088b565b9050828160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b60006105e061088b565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061068b57508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6106ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106c190610a1b565b60405180910390fd5b60006106d461088b565b905060018160000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550505050565b600061073f61088b565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806107ea57508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610829576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082090610a1b565b60405180910390fd5b600061083361088b565b90508060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff0219169055505050565b6000807f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90508091505090565b6000813590506108c781610ce3565b92915050565b6000602082840312156108e3576108e2610b53565b5b60006108f1848285016108b8565b91505092915050565b61090381610af4565b82525050565b600061091482610abb565b61091e8185610ac6565b935061092e818560208601610b20565b80840191505092915050565b6000610947602e83610ad1565b915061095282610b58565b604082019050919050565b600061096a602583610ad1565b915061097582610ba7565b604082019050919050565b600061098d604483610ad1565b915061099882610bf6565b606082019050919050565b60006109b0601783610ad1565b91506109bb82610c6b565b602082019050919050565b60006109d3602583610ad1565b91506109de82610c94565b604082019050919050565b60006109f58284610909565b915081905092915050565b6000602082019050610a1560008301846108fa565b92915050565b60006020820190508181036000830152610a348161093a565b9050919050565b60006020820190508181036000830152610a548161095d565b9050919050565b60006020820190508181036000830152610a7481610980565b9050919050565b60006020820190508181036000830152610a94816109a3565b9050919050565b60006020820190508181036000830152610ab4816109c6565b9050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000610aed82610b00565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60005b83811015610b3e578082015181840152602081019050610b23565b83811115610b4d576000848401525b50505050565b600080fd5b7f41636365737320436f6e74726f6c3a206f6e6c79206f776e6572206f72206f7060008201527f657261746f7220616c6c6f776564000000000000000000000000000000000000602082015250565b7f41636365737320436f6e74726f6c3a206f776e657273686970206e6f7420677260008201527f616e746564000000000000000000000000000000000000000000000000000000602082015250565b7f41636365737320436f6e74726f6c3a20416374696f6e206d757374206265207060008201527f6572666f726d65642062792074686520676f7665726e616e636520636f6e747260208201527f6163742100000000000000000000000000000000000000000000000000000000604082015250565b7f5375646f46616365743a2043414c4c204641494c454421000000000000000000600082015250565b7f41636365737320436f6e74726f6c3a206f6e6c79206f776e657220697320616c60008201527f6c6f776564000000000000000000000000000000000000000000000000000000602082015250565b610cec81610ae2565b8114610cf757600080fd5b5056fea2646970667358221220b201af7f6c405aaf44aa4060539c70f1e309a5b2fa21520f6a60f5464fb0370b64736f6c63430008060033",
}

// SudoFacetABI is the input ABI used to generate the binding from.
// Deprecated: Use SudoFacetMetaData.ABI instead.
var SudoFacetABI = SudoFacetMetaData.ABI

// SudoFacetBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SudoFacetMetaData.Bin instead.
var SudoFacetBin = SudoFacetMetaData.Bin

// DeploySudoFacet deploys a new Ethereum contract, binding an instance of SudoFacet to it.
func DeploySudoFacet(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *SudoFacet, error) {
	parsed, err := SudoFacetMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SudoFacetBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SudoFacet{SudoFacetCaller: SudoFacetCaller{contract: contract}, SudoFacetTransactor: SudoFacetTransactor{contract: contract}, SudoFacetFilterer: SudoFacetFilterer{contract: contract}}, nil
}

// SudoFacet is an auto generated Go binding around an Ethereum contract.
type SudoFacet struct {
	SudoFacetCaller     // Read-only binding to the contract
	SudoFacetTransactor // Write-only binding to the contract
	SudoFacetFilterer   // Log filterer for contract events
}

// SudoFacetCaller is an auto generated read-only Go binding around an Ethereum contract.
type SudoFacetCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SudoFacetTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SudoFacetTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SudoFacetFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SudoFacetFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SudoFacetSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SudoFacetSession struct {
	Contract     *SudoFacet        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SudoFacetCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SudoFacetCallerSession struct {
	Contract *SudoFacetCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// SudoFacetTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SudoFacetTransactorSession struct {
	Contract     *SudoFacetTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// SudoFacetRaw is an auto generated low-level Go binding around an Ethereum contract.
type SudoFacetRaw struct {
	Contract *SudoFacet // Generic contract binding to access the raw methods on
}

// SudoFacetCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SudoFacetCallerRaw struct {
	Contract *SudoFacetCaller // Generic read-only contract binding to access the raw methods on
}

// SudoFacetTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SudoFacetTransactorRaw struct {
	Contract *SudoFacetTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSudoFacet creates a new instance of SudoFacet, bound to a specific deployed contract.
func NewSudoFacet(address common.Address, backend bind.ContractBackend) (*SudoFacet, error) {
	contract, err := bindSudoFacet(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SudoFacet{SudoFacetCaller: SudoFacetCaller{contract: contract}, SudoFacetTransactor: SudoFacetTransactor{contract: contract}, SudoFacetFilterer: SudoFacetFilterer{contract: contract}}, nil
}

// NewSudoFacetCaller creates a new read-only instance of SudoFacet, bound to a specific deployed contract.
func NewSudoFacetCaller(address common.Address, caller bind.ContractCaller) (*SudoFacetCaller, error) {
	contract, err := bindSudoFacet(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SudoFacetCaller{contract: contract}, nil
}

// NewSudoFacetTransactor creates a new write-only instance of SudoFacet, bound to a specific deployed contract.
func NewSudoFacetTransactor(address common.Address, transactor bind.ContractTransactor) (*SudoFacetTransactor, error) {
	contract, err := bindSudoFacet(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SudoFacetTransactor{contract: contract}, nil
}

// NewSudoFacetFilterer creates a new log filterer instance of SudoFacet, bound to a specific deployed contract.
func NewSudoFacetFilterer(address common.Address, filterer bind.ContractFilterer) (*SudoFacetFilterer, error) {
	contract, err := bindSudoFacet(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SudoFacetFilterer{contract: contract}, nil
}

// bindSudoFacet binds a generic wrapper to an already deployed contract.
func bindSudoFacet(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SudoFacetABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SudoFacet *SudoFacetRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SudoFacet.Contract.SudoFacetCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SudoFacet *SudoFacetRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SudoFacet.Contract.SudoFacetTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SudoFacet *SudoFacetRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SudoFacet.Contract.SudoFacetTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SudoFacet *SudoFacetCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SudoFacet.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SudoFacet *SudoFacetTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SudoFacet.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SudoFacet *SudoFacetTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SudoFacet.Contract.contract.Transact(opts, method, params...)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_SudoFacet *SudoFacetTransactor) GrantOperator(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _SudoFacet.contract.Transact(opts, "grantOperator", who)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_SudoFacet *SudoFacetSession) GrantOperator(who common.Address) (*types.Transaction, error) {
	return _SudoFacet.Contract.GrantOperator(&_SudoFacet.TransactOpts, who)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_SudoFacet *SudoFacetTransactorSession) GrantOperator(who common.Address) (*types.Transaction, error) {
	return _SudoFacet.Contract.GrantOperator(&_SudoFacet.TransactOpts, who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_SudoFacet *SudoFacetTransactor) GrantOwner(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _SudoFacet.contract.Transact(opts, "grantOwner", who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_SudoFacet *SudoFacetSession) GrantOwner(who common.Address) (*types.Transaction, error) {
	return _SudoFacet.Contract.GrantOwner(&_SudoFacet.TransactOpts, who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_SudoFacet *SudoFacetTransactorSession) GrantOwner(who common.Address) (*types.Transaction, error) {
	return _SudoFacet.Contract.GrantOwner(&_SudoFacet.TransactOpts, who)
}

// ModifyDiamondStorage is a paid mutator transaction binding the contract method 0x7f466ae3.
//
// Solidity: function modifyDiamondStorage(address callback_) returns(bool)
func (_SudoFacet *SudoFacetTransactor) ModifyDiamondStorage(opts *bind.TransactOpts, callback_ common.Address) (*types.Transaction, error) {
	return _SudoFacet.contract.Transact(opts, "modifyDiamondStorage", callback_)
}

// ModifyDiamondStorage is a paid mutator transaction binding the contract method 0x7f466ae3.
//
// Solidity: function modifyDiamondStorage(address callback_) returns(bool)
func (_SudoFacet *SudoFacetSession) ModifyDiamondStorage(callback_ common.Address) (*types.Transaction, error) {
	return _SudoFacet.Contract.ModifyDiamondStorage(&_SudoFacet.TransactOpts, callback_)
}

// ModifyDiamondStorage is a paid mutator transaction binding the contract method 0x7f466ae3.
//
// Solidity: function modifyDiamondStorage(address callback_) returns(bool)
func (_SudoFacet *SudoFacetTransactorSession) ModifyDiamondStorage(callback_ common.Address) (*types.Transaction, error) {
	return _SudoFacet.Contract.ModifyDiamondStorage(&_SudoFacet.TransactOpts, callback_)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_SudoFacet *SudoFacetTransactor) RevokeOperator(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _SudoFacet.contract.Transact(opts, "revokeOperator", who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_SudoFacet *SudoFacetSession) RevokeOperator(who common.Address) (*types.Transaction, error) {
	return _SudoFacet.Contract.RevokeOperator(&_SudoFacet.TransactOpts, who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_SudoFacet *SudoFacetTransactorSession) RevokeOperator(who common.Address) (*types.Transaction, error) {
	return _SudoFacet.Contract.RevokeOperator(&_SudoFacet.TransactOpts, who)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_SudoFacet *SudoFacetTransactor) SetGovernance(opts *bind.TransactOpts, governance_ common.Address) (*types.Transaction, error) {
	return _SudoFacet.contract.Transact(opts, "setGovernance", governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_SudoFacet *SudoFacetSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _SudoFacet.Contract.SetGovernance(&_SudoFacet.TransactOpts, governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_SudoFacet *SudoFacetTransactorSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _SudoFacet.Contract.SetGovernance(&_SudoFacet.TransactOpts, governance_)
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_SudoFacet *SudoFacetTransactor) TakeOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SudoFacet.contract.Transact(opts, "takeOwnership")
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_SudoFacet *SudoFacetSession) TakeOwnership() (*types.Transaction, error) {
	return _SudoFacet.Contract.TakeOwnership(&_SudoFacet.TransactOpts)
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_SudoFacet *SudoFacetTransactorSession) TakeOwnership() (*types.Transaction, error) {
	return _SudoFacet.Contract.TakeOwnership(&_SudoFacet.TransactOpts)
}

// TXInPreImageParserLibraryMetaData contains all meta data concerning the TXInPreImageParserLibrary contract.
var TXInPreImageParserLibraryMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204cb748c1200e985a78322f1c4099f343bb70c1f0b20399f43f5714e0c9fb8e9464736f6c63430008060033",
}

// TXInPreImageParserLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use TXInPreImageParserLibraryMetaData.ABI instead.
var TXInPreImageParserLibraryABI = TXInPreImageParserLibraryMetaData.ABI

// TXInPreImageParserLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TXInPreImageParserLibraryMetaData.Bin instead.
var TXInPreImageParserLibraryBin = TXInPreImageParserLibraryMetaData.Bin

// DeployTXInPreImageParserLibrary deploys a new Ethereum contract, binding an instance of TXInPreImageParserLibrary to it.
func DeployTXInPreImageParserLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *TXInPreImageParserLibrary, error) {
	parsed, err := TXInPreImageParserLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TXInPreImageParserLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TXInPreImageParserLibrary{TXInPreImageParserLibraryCaller: TXInPreImageParserLibraryCaller{contract: contract}, TXInPreImageParserLibraryTransactor: TXInPreImageParserLibraryTransactor{contract: contract}, TXInPreImageParserLibraryFilterer: TXInPreImageParserLibraryFilterer{contract: contract}}, nil
}

// TXInPreImageParserLibrary is an auto generated Go binding around an Ethereum contract.
type TXInPreImageParserLibrary struct {
	TXInPreImageParserLibraryCaller     // Read-only binding to the contract
	TXInPreImageParserLibraryTransactor // Write-only binding to the contract
	TXInPreImageParserLibraryFilterer   // Log filterer for contract events
}

// TXInPreImageParserLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type TXInPreImageParserLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TXInPreImageParserLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TXInPreImageParserLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TXInPreImageParserLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TXInPreImageParserLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TXInPreImageParserLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TXInPreImageParserLibrarySession struct {
	Contract     *TXInPreImageParserLibrary // Generic contract binding to set the session for
	CallOpts     bind.CallOpts              // Call options to use throughout this session
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// TXInPreImageParserLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TXInPreImageParserLibraryCallerSession struct {
	Contract *TXInPreImageParserLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                    // Call options to use throughout this session
}

// TXInPreImageParserLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TXInPreImageParserLibraryTransactorSession struct {
	Contract     *TXInPreImageParserLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                    // Transaction auth options to use throughout this session
}

// TXInPreImageParserLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type TXInPreImageParserLibraryRaw struct {
	Contract *TXInPreImageParserLibrary // Generic contract binding to access the raw methods on
}

// TXInPreImageParserLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TXInPreImageParserLibraryCallerRaw struct {
	Contract *TXInPreImageParserLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// TXInPreImageParserLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TXInPreImageParserLibraryTransactorRaw struct {
	Contract *TXInPreImageParserLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTXInPreImageParserLibrary creates a new instance of TXInPreImageParserLibrary, bound to a specific deployed contract.
func NewTXInPreImageParserLibrary(address common.Address, backend bind.ContractBackend) (*TXInPreImageParserLibrary, error) {
	contract, err := bindTXInPreImageParserLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TXInPreImageParserLibrary{TXInPreImageParserLibraryCaller: TXInPreImageParserLibraryCaller{contract: contract}, TXInPreImageParserLibraryTransactor: TXInPreImageParserLibraryTransactor{contract: contract}, TXInPreImageParserLibraryFilterer: TXInPreImageParserLibraryFilterer{contract: contract}}, nil
}

// NewTXInPreImageParserLibraryCaller creates a new read-only instance of TXInPreImageParserLibrary, bound to a specific deployed contract.
func NewTXInPreImageParserLibraryCaller(address common.Address, caller bind.ContractCaller) (*TXInPreImageParserLibraryCaller, error) {
	contract, err := bindTXInPreImageParserLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TXInPreImageParserLibraryCaller{contract: contract}, nil
}

// NewTXInPreImageParserLibraryTransactor creates a new write-only instance of TXInPreImageParserLibrary, bound to a specific deployed contract.
func NewTXInPreImageParserLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*TXInPreImageParserLibraryTransactor, error) {
	contract, err := bindTXInPreImageParserLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TXInPreImageParserLibraryTransactor{contract: contract}, nil
}

// NewTXInPreImageParserLibraryFilterer creates a new log filterer instance of TXInPreImageParserLibrary, bound to a specific deployed contract.
func NewTXInPreImageParserLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*TXInPreImageParserLibraryFilterer, error) {
	contract, err := bindTXInPreImageParserLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TXInPreImageParserLibraryFilterer{contract: contract}, nil
}

// bindTXInPreImageParserLibrary binds a generic wrapper to an already deployed contract.
func bindTXInPreImageParserLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TXInPreImageParserLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TXInPreImageParserLibrary *TXInPreImageParserLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TXInPreImageParserLibrary.Contract.TXInPreImageParserLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TXInPreImageParserLibrary *TXInPreImageParserLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TXInPreImageParserLibrary.Contract.TXInPreImageParserLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TXInPreImageParserLibrary *TXInPreImageParserLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TXInPreImageParserLibrary.Contract.TXInPreImageParserLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TXInPreImageParserLibrary *TXInPreImageParserLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TXInPreImageParserLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TXInPreImageParserLibrary *TXInPreImageParserLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TXInPreImageParserLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TXInPreImageParserLibrary *TXInPreImageParserLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TXInPreImageParserLibrary.Contract.contract.Transact(opts, method, params...)
}

// TokenMetaData contains all meta data concerning the Token contract.
var TokenMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"symbol_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name_\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Start\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Stop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contractDSAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"move\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"pull\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"push\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractDSAuthority\",\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"name_\",\"type\":\"bytes32\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "",
}

// TokenABI is the input ABI used to generate the binding from.
// Deprecated: Use TokenMetaData.ABI instead.
var TokenABI = TokenMetaData.ABI

// TokenBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TokenMetaData.Bin instead.
var TokenBin = TokenMetaData.Bin

// DeployToken deploys a new Ethereum contract, binding an instance of Token to it.
func DeployToken(auth *bind.TransactOpts, backend bind.ContractBackend, symbol_ [32]byte, name_ [32]byte) (common.Address, *types.Transaction, *Token, error) {
	parsed, err := TokenMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TokenBin), backend, symbol_, name_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Token{TokenCaller: TokenCaller{contract: contract}, TokenTransactor: TokenTransactor{contract: contract}, TokenFilterer: TokenFilterer{contract: contract}}, nil
}

// Token is an auto generated Go binding around an Ethereum contract.
type Token struct {
	TokenCaller     // Read-only binding to the contract
	TokenTransactor // Write-only binding to the contract
	TokenFilterer   // Log filterer for contract events
}

// TokenCaller is an auto generated read-only Go binding around an Ethereum contract.
type TokenCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TokenTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TokenFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TokenSession struct {
	Contract     *Token            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TokenCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TokenCallerSession struct {
	Contract *TokenCaller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// TokenTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TokenTransactorSession struct {
	Contract     *TokenTransactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TokenRaw is an auto generated low-level Go binding around an Ethereum contract.
type TokenRaw struct {
	Contract *Token // Generic contract binding to access the raw methods on
}

// TokenCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TokenCallerRaw struct {
	Contract *TokenCaller // Generic read-only contract binding to access the raw methods on
}

// TokenTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TokenTransactorRaw struct {
	Contract *TokenTransactor // Generic write-only contract binding to access the raw methods on
}

// NewToken creates a new instance of Token, bound to a specific deployed contract.
func NewToken(address common.Address, backend bind.ContractBackend) (*Token, error) {
	contract, err := bindToken(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Token{TokenCaller: TokenCaller{contract: contract}, TokenTransactor: TokenTransactor{contract: contract}, TokenFilterer: TokenFilterer{contract: contract}}, nil
}

// NewTokenCaller creates a new read-only instance of Token, bound to a specific deployed contract.
func NewTokenCaller(address common.Address, caller bind.ContractCaller) (*TokenCaller, error) {
	contract, err := bindToken(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TokenCaller{contract: contract}, nil
}

// NewTokenTransactor creates a new write-only instance of Token, bound to a specific deployed contract.
func NewTokenTransactor(address common.Address, transactor bind.ContractTransactor) (*TokenTransactor, error) {
	contract, err := bindToken(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TokenTransactor{contract: contract}, nil
}

// NewTokenFilterer creates a new log filterer instance of Token, bound to a specific deployed contract.
func NewTokenFilterer(address common.Address, filterer bind.ContractFilterer) (*TokenFilterer, error) {
	contract, err := bindToken(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TokenFilterer{contract: contract}, nil
}

// bindToken binds a generic wrapper to an already deployed contract.
func bindToken(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TokenABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Token *TokenRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Token.Contract.TokenCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Token *TokenRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Token.Contract.TokenTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Token *TokenRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Token.Contract.TokenTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Token *TokenCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Token.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Token *TokenTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Token.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Token *TokenTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Token.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address , address ) view returns(uint256)
func (_Token *TokenCaller) Allowance(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Token.contract.Call(opts, &out, "allowance", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address , address ) view returns(uint256)
func (_Token *TokenSession) Allowance(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _Token.Contract.Allowance(&_Token.CallOpts, arg0, arg1)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address , address ) view returns(uint256)
func (_Token *TokenCallerSession) Allowance(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _Token.Contract.Allowance(&_Token.CallOpts, arg0, arg1)
}

// Authority is a free data retrieval call binding the contract method 0xbf7e214f.
//
// Solidity: function authority() view returns(address)
func (_Token *TokenCaller) Authority(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Token.contract.Call(opts, &out, "authority")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Authority is a free data retrieval call binding the contract method 0xbf7e214f.
//
// Solidity: function authority() view returns(address)
func (_Token *TokenSession) Authority() (common.Address, error) {
	return _Token.Contract.Authority(&_Token.CallOpts)
}

// Authority is a free data retrieval call binding the contract method 0xbf7e214f.
//
// Solidity: function authority() view returns(address)
func (_Token *TokenCallerSession) Authority() (common.Address, error) {
	return _Token.Contract.Authority(&_Token.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address ) view returns(uint256)
func (_Token *TokenCaller) BalanceOf(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Token.contract.Call(opts, &out, "balanceOf", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address ) view returns(uint256)
func (_Token *TokenSession) BalanceOf(arg0 common.Address) (*big.Int, error) {
	return _Token.Contract.BalanceOf(&_Token.CallOpts, arg0)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address ) view returns(uint256)
func (_Token *TokenCallerSession) BalanceOf(arg0 common.Address) (*big.Int, error) {
	return _Token.Contract.BalanceOf(&_Token.CallOpts, arg0)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint256)
func (_Token *TokenCaller) Decimals(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Token.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint256)
func (_Token *TokenSession) Decimals() (*big.Int, error) {
	return _Token.Contract.Decimals(&_Token.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint256)
func (_Token *TokenCallerSession) Decimals() (*big.Int, error) {
	return _Token.Contract.Decimals(&_Token.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(bytes32)
func (_Token *TokenCaller) Name(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Token.contract.Call(opts, &out, "name")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(bytes32)
func (_Token *TokenSession) Name() ([32]byte, error) {
	return _Token.Contract.Name(&_Token.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(bytes32)
func (_Token *TokenCallerSession) Name() ([32]byte, error) {
	return _Token.Contract.Name(&_Token.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Token *TokenCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Token.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Token *TokenSession) Owner() (common.Address, error) {
	return _Token.Contract.Owner(&_Token.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Token *TokenCallerSession) Owner() (common.Address, error) {
	return _Token.Contract.Owner(&_Token.CallOpts)
}

// Stopped is a free data retrieval call binding the contract method 0x75f12b21.
//
// Solidity: function stopped() view returns(bool)
func (_Token *TokenCaller) Stopped(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Token.contract.Call(opts, &out, "stopped")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Stopped is a free data retrieval call binding the contract method 0x75f12b21.
//
// Solidity: function stopped() view returns(bool)
func (_Token *TokenSession) Stopped() (bool, error) {
	return _Token.Contract.Stopped(&_Token.CallOpts)
}

// Stopped is a free data retrieval call binding the contract method 0x75f12b21.
//
// Solidity: function stopped() view returns(bool)
func (_Token *TokenCallerSession) Stopped() (bool, error) {
	return _Token.Contract.Stopped(&_Token.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(bytes32)
func (_Token *TokenCaller) Symbol(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Token.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(bytes32)
func (_Token *TokenSession) Symbol() ([32]byte, error) {
	return _Token.Contract.Symbol(&_Token.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(bytes32)
func (_Token *TokenCallerSession) Symbol() ([32]byte, error) {
	return _Token.Contract.Symbol(&_Token.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Token *TokenCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Token.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Token *TokenSession) TotalSupply() (*big.Int, error) {
	return _Token.Contract.TotalSupply(&_Token.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Token *TokenCallerSession) TotalSupply() (*big.Int, error) {
	return _Token.Contract.TotalSupply(&_Token.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address guy, uint256 wad) returns(bool)
func (_Token *TokenTransactor) Approve(opts *bind.TransactOpts, guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "approve", guy, wad)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address guy, uint256 wad) returns(bool)
func (_Token *TokenSession) Approve(guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Approve(&_Token.TransactOpts, guy, wad)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address guy, uint256 wad) returns(bool)
func (_Token *TokenTransactorSession) Approve(guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Approve(&_Token.TransactOpts, guy, wad)
}

// Approve0 is a paid mutator transaction binding the contract method 0xdaea85c5.
//
// Solidity: function approve(address guy) returns(bool)
func (_Token *TokenTransactor) Approve0(opts *bind.TransactOpts, guy common.Address) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "approve0", guy)
}

// Approve0 is a paid mutator transaction binding the contract method 0xdaea85c5.
//
// Solidity: function approve(address guy) returns(bool)
func (_Token *TokenSession) Approve0(guy common.Address) (*types.Transaction, error) {
	return _Token.Contract.Approve0(&_Token.TransactOpts, guy)
}

// Approve0 is a paid mutator transaction binding the contract method 0xdaea85c5.
//
// Solidity: function approve(address guy) returns(bool)
func (_Token *TokenTransactorSession) Approve0(guy common.Address) (*types.Transaction, error) {
	return _Token.Contract.Approve0(&_Token.TransactOpts, guy)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 wad) returns()
func (_Token *TokenTransactor) Burn(opts *bind.TransactOpts, wad *big.Int) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "burn", wad)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 wad) returns()
func (_Token *TokenSession) Burn(wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Burn(&_Token.TransactOpts, wad)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 wad) returns()
func (_Token *TokenTransactorSession) Burn(wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Burn(&_Token.TransactOpts, wad)
}

// Burn0 is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address guy, uint256 wad) returns()
func (_Token *TokenTransactor) Burn0(opts *bind.TransactOpts, guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "burn0", guy, wad)
}

// Burn0 is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address guy, uint256 wad) returns()
func (_Token *TokenSession) Burn0(guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Burn0(&_Token.TransactOpts, guy, wad)
}

// Burn0 is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address guy, uint256 wad) returns()
func (_Token *TokenTransactorSession) Burn0(guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Burn0(&_Token.TransactOpts, guy, wad)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_Token *TokenTransactor) GrantOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "grantOperator", _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_Token *TokenSession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _Token.Contract.GrantOperator(&_Token.TransactOpts, _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_Token *TokenTransactorSession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _Token.Contract.GrantOperator(&_Token.TransactOpts, _operator)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address guy, uint256 wad) returns()
func (_Token *TokenTransactor) Mint(opts *bind.TransactOpts, guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "mint", guy, wad)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address guy, uint256 wad) returns()
func (_Token *TokenSession) Mint(guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Mint(&_Token.TransactOpts, guy, wad)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address guy, uint256 wad) returns()
func (_Token *TokenTransactorSession) Mint(guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Mint(&_Token.TransactOpts, guy, wad)
}

// Mint0 is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 wad) returns()
func (_Token *TokenTransactor) Mint0(opts *bind.TransactOpts, wad *big.Int) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "mint0", wad)
}

// Mint0 is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 wad) returns()
func (_Token *TokenSession) Mint0(wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Mint0(&_Token.TransactOpts, wad)
}

// Mint0 is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 wad) returns()
func (_Token *TokenTransactorSession) Mint0(wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Mint0(&_Token.TransactOpts, wad)
}

// Move is a paid mutator transaction binding the contract method 0xbb35783b.
//
// Solidity: function move(address src, address dst, uint256 wad) returns()
func (_Token *TokenTransactor) Move(opts *bind.TransactOpts, src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "move", src, dst, wad)
}

// Move is a paid mutator transaction binding the contract method 0xbb35783b.
//
// Solidity: function move(address src, address dst, uint256 wad) returns()
func (_Token *TokenSession) Move(src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Move(&_Token.TransactOpts, src, dst, wad)
}

// Move is a paid mutator transaction binding the contract method 0xbb35783b.
//
// Solidity: function move(address src, address dst, uint256 wad) returns()
func (_Token *TokenTransactorSession) Move(src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Move(&_Token.TransactOpts, src, dst, wad)
}

// Pull is a paid mutator transaction binding the contract method 0xf2d5d56b.
//
// Solidity: function pull(address src, uint256 wad) returns()
func (_Token *TokenTransactor) Pull(opts *bind.TransactOpts, src common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "pull", src, wad)
}

// Pull is a paid mutator transaction binding the contract method 0xf2d5d56b.
//
// Solidity: function pull(address src, uint256 wad) returns()
func (_Token *TokenSession) Pull(src common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Pull(&_Token.TransactOpts, src, wad)
}

// Pull is a paid mutator transaction binding the contract method 0xf2d5d56b.
//
// Solidity: function pull(address src, uint256 wad) returns()
func (_Token *TokenTransactorSession) Pull(src common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Pull(&_Token.TransactOpts, src, wad)
}

// Push is a paid mutator transaction binding the contract method 0xb753a98c.
//
// Solidity: function push(address dst, uint256 wad) returns()
func (_Token *TokenTransactor) Push(opts *bind.TransactOpts, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "push", dst, wad)
}

// Push is a paid mutator transaction binding the contract method 0xb753a98c.
//
// Solidity: function push(address dst, uint256 wad) returns()
func (_Token *TokenSession) Push(dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Push(&_Token.TransactOpts, dst, wad)
}

// Push is a paid mutator transaction binding the contract method 0xb753a98c.
//
// Solidity: function push(address dst, uint256 wad) returns()
func (_Token *TokenTransactorSession) Push(dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Push(&_Token.TransactOpts, dst, wad)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_Token *TokenTransactor) RevokeOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "revokeOperator", _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_Token *TokenSession) RevokeOperator(_operator common.Address) (*types.Transaction, error) {
	return _Token.Contract.RevokeOperator(&_Token.TransactOpts, _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_Token *TokenTransactorSession) RevokeOperator(_operator common.Address) (*types.Transaction, error) {
	return _Token.Contract.RevokeOperator(&_Token.TransactOpts, _operator)
}

// SetAuthority is a paid mutator transaction binding the contract method 0x7a9e5e4b.
//
// Solidity: function setAuthority(address authority_) returns()
func (_Token *TokenTransactor) SetAuthority(opts *bind.TransactOpts, authority_ common.Address) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "setAuthority", authority_)
}

// SetAuthority is a paid mutator transaction binding the contract method 0x7a9e5e4b.
//
// Solidity: function setAuthority(address authority_) returns()
func (_Token *TokenSession) SetAuthority(authority_ common.Address) (*types.Transaction, error) {
	return _Token.Contract.SetAuthority(&_Token.TransactOpts, authority_)
}

// SetAuthority is a paid mutator transaction binding the contract method 0x7a9e5e4b.
//
// Solidity: function setAuthority(address authority_) returns()
func (_Token *TokenTransactorSession) SetAuthority(authority_ common.Address) (*types.Transaction, error) {
	return _Token.Contract.SetAuthority(&_Token.TransactOpts, authority_)
}

// SetName is a paid mutator transaction binding the contract method 0x5ac801fe.
//
// Solidity: function setName(bytes32 name_) returns()
func (_Token *TokenTransactor) SetName(opts *bind.TransactOpts, name_ [32]byte) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "setName", name_)
}

// SetName is a paid mutator transaction binding the contract method 0x5ac801fe.
//
// Solidity: function setName(bytes32 name_) returns()
func (_Token *TokenSession) SetName(name_ [32]byte) (*types.Transaction, error) {
	return _Token.Contract.SetName(&_Token.TransactOpts, name_)
}

// SetName is a paid mutator transaction binding the contract method 0x5ac801fe.
//
// Solidity: function setName(bytes32 name_) returns()
func (_Token *TokenTransactorSession) SetName(name_ [32]byte) (*types.Transaction, error) {
	return _Token.Contract.SetName(&_Token.TransactOpts, name_)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address owner_) returns()
func (_Token *TokenTransactor) SetOwner(opts *bind.TransactOpts, owner_ common.Address) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "setOwner", owner_)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address owner_) returns()
func (_Token *TokenSession) SetOwner(owner_ common.Address) (*types.Transaction, error) {
	return _Token.Contract.SetOwner(&_Token.TransactOpts, owner_)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address owner_) returns()
func (_Token *TokenTransactorSession) SetOwner(owner_ common.Address) (*types.Transaction, error) {
	return _Token.Contract.SetOwner(&_Token.TransactOpts, owner_)
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_Token *TokenTransactor) Start(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "start")
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_Token *TokenSession) Start() (*types.Transaction, error) {
	return _Token.Contract.Start(&_Token.TransactOpts)
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_Token *TokenTransactorSession) Start() (*types.Transaction, error) {
	return _Token.Contract.Start(&_Token.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_Token *TokenTransactor) Stop(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "stop")
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_Token *TokenSession) Stop() (*types.Transaction, error) {
	return _Token.Contract.Stop(&_Token.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_Token *TokenTransactorSession) Stop() (*types.Transaction, error) {
	return _Token.Contract.Stop(&_Token.TransactOpts)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address dst, uint256 wad) returns(bool)
func (_Token *TokenTransactor) Transfer(opts *bind.TransactOpts, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "transfer", dst, wad)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address dst, uint256 wad) returns(bool)
func (_Token *TokenSession) Transfer(dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Transfer(&_Token.TransactOpts, dst, wad)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address dst, uint256 wad) returns(bool)
func (_Token *TokenTransactorSession) Transfer(dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Transfer(&_Token.TransactOpts, dst, wad)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address src, address dst, uint256 wad) returns(bool)
func (_Token *TokenTransactor) TransferFrom(opts *bind.TransactOpts, src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "transferFrom", src, dst, wad)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address src, address dst, uint256 wad) returns(bool)
func (_Token *TokenSession) TransferFrom(src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.TransferFrom(&_Token.TransactOpts, src, dst, wad)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address src, address dst, uint256 wad) returns(bool)
func (_Token *TokenTransactorSession) TransferFrom(src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.TransferFrom(&_Token.TransactOpts, src, dst, wad)
}

// TokenApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the Token contract.
type TokenApprovalIterator struct {
	Event *TokenApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenApproval represents a Approval event raised by the Token contract.
type TokenApproval struct {
	Src common.Address
	Guy common.Address
	Wad *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed src, address indexed guy, uint256 wad)
func (_Token *TokenFilterer) FilterApproval(opts *bind.FilterOpts, src []common.Address, guy []common.Address) (*TokenApprovalIterator, error) {

	var srcRule []interface{}
	for _, srcItem := range src {
		srcRule = append(srcRule, srcItem)
	}
	var guyRule []interface{}
	for _, guyItem := range guy {
		guyRule = append(guyRule, guyItem)
	}

	logs, sub, err := _Token.contract.FilterLogs(opts, "Approval", srcRule, guyRule)
	if err != nil {
		return nil, err
	}
	return &TokenApprovalIterator{contract: _Token.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed src, address indexed guy, uint256 wad)
func (_Token *TokenFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *TokenApproval, src []common.Address, guy []common.Address) (event.Subscription, error) {

	var srcRule []interface{}
	for _, srcItem := range src {
		srcRule = append(srcRule, srcItem)
	}
	var guyRule []interface{}
	for _, guyItem := range guy {
		guyRule = append(guyRule, guyItem)
	}

	logs, sub, err := _Token.contract.WatchLogs(opts, "Approval", srcRule, guyRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenApproval)
				if err := _Token.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed src, address indexed guy, uint256 wad)
func (_Token *TokenFilterer) ParseApproval(log types.Log) (*TokenApproval, error) {
	event := new(TokenApproval)
	if err := _Token.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenBurnIterator is returned from FilterBurn and is used to iterate over the raw logs and unpacked data for Burn events raised by the Token contract.
type TokenBurnIterator struct {
	Event *TokenBurn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenBurnIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenBurn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenBurn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenBurnIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenBurnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenBurn represents a Burn event raised by the Token contract.
type TokenBurn struct {
	Guy common.Address
	Wad *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterBurn is a free log retrieval operation binding the contract event 0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5.
//
// Solidity: event Burn(address indexed guy, uint256 wad)
func (_Token *TokenFilterer) FilterBurn(opts *bind.FilterOpts, guy []common.Address) (*TokenBurnIterator, error) {

	var guyRule []interface{}
	for _, guyItem := range guy {
		guyRule = append(guyRule, guyItem)
	}

	logs, sub, err := _Token.contract.FilterLogs(opts, "Burn", guyRule)
	if err != nil {
		return nil, err
	}
	return &TokenBurnIterator{contract: _Token.contract, event: "Burn", logs: logs, sub: sub}, nil
}

// WatchBurn is a free log subscription operation binding the contract event 0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5.
//
// Solidity: event Burn(address indexed guy, uint256 wad)
func (_Token *TokenFilterer) WatchBurn(opts *bind.WatchOpts, sink chan<- *TokenBurn, guy []common.Address) (event.Subscription, error) {

	var guyRule []interface{}
	for _, guyItem := range guy {
		guyRule = append(guyRule, guyItem)
	}

	logs, sub, err := _Token.contract.WatchLogs(opts, "Burn", guyRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenBurn)
				if err := _Token.contract.UnpackLog(event, "Burn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBurn is a log parse operation binding the contract event 0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5.
//
// Solidity: event Burn(address indexed guy, uint256 wad)
func (_Token *TokenFilterer) ParseBurn(log types.Log) (*TokenBurn, error) {
	event := new(TokenBurn)
	if err := _Token.contract.UnpackLog(event, "Burn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenLogSetAuthorityIterator is returned from FilterLogSetAuthority and is used to iterate over the raw logs and unpacked data for LogSetAuthority events raised by the Token contract.
type TokenLogSetAuthorityIterator struct {
	Event *TokenLogSetAuthority // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenLogSetAuthorityIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenLogSetAuthority)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenLogSetAuthority)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenLogSetAuthorityIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenLogSetAuthorityIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenLogSetAuthority represents a LogSetAuthority event raised by the Token contract.
type TokenLogSetAuthority struct {
	Authority common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterLogSetAuthority is a free log retrieval operation binding the contract event 0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4.
//
// Solidity: event LogSetAuthority(address indexed authority)
func (_Token *TokenFilterer) FilterLogSetAuthority(opts *bind.FilterOpts, authority []common.Address) (*TokenLogSetAuthorityIterator, error) {

	var authorityRule []interface{}
	for _, authorityItem := range authority {
		authorityRule = append(authorityRule, authorityItem)
	}

	logs, sub, err := _Token.contract.FilterLogs(opts, "LogSetAuthority", authorityRule)
	if err != nil {
		return nil, err
	}
	return &TokenLogSetAuthorityIterator{contract: _Token.contract, event: "LogSetAuthority", logs: logs, sub: sub}, nil
}

// WatchLogSetAuthority is a free log subscription operation binding the contract event 0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4.
//
// Solidity: event LogSetAuthority(address indexed authority)
func (_Token *TokenFilterer) WatchLogSetAuthority(opts *bind.WatchOpts, sink chan<- *TokenLogSetAuthority, authority []common.Address) (event.Subscription, error) {

	var authorityRule []interface{}
	for _, authorityItem := range authority {
		authorityRule = append(authorityRule, authorityItem)
	}

	logs, sub, err := _Token.contract.WatchLogs(opts, "LogSetAuthority", authorityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenLogSetAuthority)
				if err := _Token.contract.UnpackLog(event, "LogSetAuthority", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogSetAuthority is a log parse operation binding the contract event 0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4.
//
// Solidity: event LogSetAuthority(address indexed authority)
func (_Token *TokenFilterer) ParseLogSetAuthority(log types.Log) (*TokenLogSetAuthority, error) {
	event := new(TokenLogSetAuthority)
	if err := _Token.contract.UnpackLog(event, "LogSetAuthority", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenLogSetOwnerIterator is returned from FilterLogSetOwner and is used to iterate over the raw logs and unpacked data for LogSetOwner events raised by the Token contract.
type TokenLogSetOwnerIterator struct {
	Event *TokenLogSetOwner // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenLogSetOwnerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenLogSetOwner)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenLogSetOwner)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenLogSetOwnerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenLogSetOwnerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenLogSetOwner represents a LogSetOwner event raised by the Token contract.
type TokenLogSetOwner struct {
	Owner common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogSetOwner is a free log retrieval operation binding the contract event 0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94.
//
// Solidity: event LogSetOwner(address indexed owner)
func (_Token *TokenFilterer) FilterLogSetOwner(opts *bind.FilterOpts, owner []common.Address) (*TokenLogSetOwnerIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _Token.contract.FilterLogs(opts, "LogSetOwner", ownerRule)
	if err != nil {
		return nil, err
	}
	return &TokenLogSetOwnerIterator{contract: _Token.contract, event: "LogSetOwner", logs: logs, sub: sub}, nil
}

// WatchLogSetOwner is a free log subscription operation binding the contract event 0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94.
//
// Solidity: event LogSetOwner(address indexed owner)
func (_Token *TokenFilterer) WatchLogSetOwner(opts *bind.WatchOpts, sink chan<- *TokenLogSetOwner, owner []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _Token.contract.WatchLogs(opts, "LogSetOwner", ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenLogSetOwner)
				if err := _Token.contract.UnpackLog(event, "LogSetOwner", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogSetOwner is a log parse operation binding the contract event 0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94.
//
// Solidity: event LogSetOwner(address indexed owner)
func (_Token *TokenFilterer) ParseLogSetOwner(log types.Log) (*TokenLogSetOwner, error) {
	event := new(TokenLogSetOwner)
	if err := _Token.contract.UnpackLog(event, "LogSetOwner", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenMintIterator is returned from FilterMint and is used to iterate over the raw logs and unpacked data for Mint events raised by the Token contract.
type TokenMintIterator struct {
	Event *TokenMint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenMintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenMint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenMint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenMintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenMintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenMint represents a Mint event raised by the Token contract.
type TokenMint struct {
	Guy common.Address
	Wad *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterMint is a free log retrieval operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
//
// Solidity: event Mint(address indexed guy, uint256 wad)
func (_Token *TokenFilterer) FilterMint(opts *bind.FilterOpts, guy []common.Address) (*TokenMintIterator, error) {

	var guyRule []interface{}
	for _, guyItem := range guy {
		guyRule = append(guyRule, guyItem)
	}

	logs, sub, err := _Token.contract.FilterLogs(opts, "Mint", guyRule)
	if err != nil {
		return nil, err
	}
	return &TokenMintIterator{contract: _Token.contract, event: "Mint", logs: logs, sub: sub}, nil
}

// WatchMint is a free log subscription operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
//
// Solidity: event Mint(address indexed guy, uint256 wad)
func (_Token *TokenFilterer) WatchMint(opts *bind.WatchOpts, sink chan<- *TokenMint, guy []common.Address) (event.Subscription, error) {

	var guyRule []interface{}
	for _, guyItem := range guy {
		guyRule = append(guyRule, guyItem)
	}

	logs, sub, err := _Token.contract.WatchLogs(opts, "Mint", guyRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenMint)
				if err := _Token.contract.UnpackLog(event, "Mint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMint is a log parse operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
//
// Solidity: event Mint(address indexed guy, uint256 wad)
func (_Token *TokenFilterer) ParseMint(log types.Log) (*TokenMint, error) {
	event := new(TokenMint)
	if err := _Token.contract.UnpackLog(event, "Mint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenStartIterator is returned from FilterStart and is used to iterate over the raw logs and unpacked data for Start events raised by the Token contract.
type TokenStartIterator struct {
	Event *TokenStart // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenStartIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenStart)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenStart)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenStartIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenStartIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenStart represents a Start event raised by the Token contract.
type TokenStart struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterStart is a free log retrieval operation binding the contract event 0x1b55ba3aa851a46be3b365aee5b5c140edd620d578922f3e8466d2cbd96f954b.
//
// Solidity: event Start()
func (_Token *TokenFilterer) FilterStart(opts *bind.FilterOpts) (*TokenStartIterator, error) {

	logs, sub, err := _Token.contract.FilterLogs(opts, "Start")
	if err != nil {
		return nil, err
	}
	return &TokenStartIterator{contract: _Token.contract, event: "Start", logs: logs, sub: sub}, nil
}

// WatchStart is a free log subscription operation binding the contract event 0x1b55ba3aa851a46be3b365aee5b5c140edd620d578922f3e8466d2cbd96f954b.
//
// Solidity: event Start()
func (_Token *TokenFilterer) WatchStart(opts *bind.WatchOpts, sink chan<- *TokenStart) (event.Subscription, error) {

	logs, sub, err := _Token.contract.WatchLogs(opts, "Start")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenStart)
				if err := _Token.contract.UnpackLog(event, "Start", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStart is a log parse operation binding the contract event 0x1b55ba3aa851a46be3b365aee5b5c140edd620d578922f3e8466d2cbd96f954b.
//
// Solidity: event Start()
func (_Token *TokenFilterer) ParseStart(log types.Log) (*TokenStart, error) {
	event := new(TokenStart)
	if err := _Token.contract.UnpackLog(event, "Start", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenStopIterator is returned from FilterStop and is used to iterate over the raw logs and unpacked data for Stop events raised by the Token contract.
type TokenStopIterator struct {
	Event *TokenStop // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenStopIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenStop)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenStop)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenStopIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenStopIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenStop represents a Stop event raised by the Token contract.
type TokenStop struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterStop is a free log retrieval operation binding the contract event 0xbedf0f4abfe86d4ffad593d9607fe70e83ea706033d44d24b3b6283cf3fc4f6b.
//
// Solidity: event Stop()
func (_Token *TokenFilterer) FilterStop(opts *bind.FilterOpts) (*TokenStopIterator, error) {

	logs, sub, err := _Token.contract.FilterLogs(opts, "Stop")
	if err != nil {
		return nil, err
	}
	return &TokenStopIterator{contract: _Token.contract, event: "Stop", logs: logs, sub: sub}, nil
}

// WatchStop is a free log subscription operation binding the contract event 0xbedf0f4abfe86d4ffad593d9607fe70e83ea706033d44d24b3b6283cf3fc4f6b.
//
// Solidity: event Stop()
func (_Token *TokenFilterer) WatchStop(opts *bind.WatchOpts, sink chan<- *TokenStop) (event.Subscription, error) {

	logs, sub, err := _Token.contract.WatchLogs(opts, "Stop")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenStop)
				if err := _Token.contract.UnpackLog(event, "Stop", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStop is a log parse operation binding the contract event 0xbedf0f4abfe86d4ffad593d9607fe70e83ea706033d44d24b3b6283cf3fc4f6b.
//
// Solidity: event Stop()
func (_Token *TokenFilterer) ParseStop(log types.Log) (*TokenStop, error) {
	event := new(TokenStop)
	if err := _Token.contract.UnpackLog(event, "Stop", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Token contract.
type TokenTransferIterator struct {
	Event *TokenTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenTransfer represents a Transfer event raised by the Token contract.
type TokenTransfer struct {
	Src common.Address
	Dst common.Address
	Wad *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed src, address indexed dst, uint256 wad)
func (_Token *TokenFilterer) FilterTransfer(opts *bind.FilterOpts, src []common.Address, dst []common.Address) (*TokenTransferIterator, error) {

	var srcRule []interface{}
	for _, srcItem := range src {
		srcRule = append(srcRule, srcItem)
	}
	var dstRule []interface{}
	for _, dstItem := range dst {
		dstRule = append(dstRule, dstItem)
	}

	logs, sub, err := _Token.contract.FilterLogs(opts, "Transfer", srcRule, dstRule)
	if err != nil {
		return nil, err
	}
	return &TokenTransferIterator{contract: _Token.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed src, address indexed dst, uint256 wad)
func (_Token *TokenFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *TokenTransfer, src []common.Address, dst []common.Address) (event.Subscription, error) {

	var srcRule []interface{}
	for _, srcItem := range src {
		srcRule = append(srcRule, srcItem)
	}
	var dstRule []interface{}
	for _, dstItem := range dst {
		dstRule = append(dstRule, dstItem)
	}

	logs, sub, err := _Token.contract.WatchLogs(opts, "Transfer", srcRule, dstRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenTransfer)
				if err := _Token.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed src, address indexed dst, uint256 wad)
func (_Token *TokenFilterer) ParseTransfer(log types.Log) (*TokenTransfer, error) {
	event := new(TokenTransfer)
	if err := _Token.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenAuthorityMetaData contains all meta data concerning the TokenAuthority contract.
var TokenAuthorityMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"canCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b5033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610083600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661008860201b60201c565b610302565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061012c57506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b61016b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161016290610200565b60405180910390fd5b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600160008154809291906101d59061023b565b919050555050565b60006101ea603183610220565b91506101f5826102b3565b604082019050919050565b60006020820190508181036000830152610219816101dd565b9050919050565b600082825260208201905092915050565b6000819050919050565b600061024682610231565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561027957610278610284565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f46756e6374696f6e616c697479207265737472696374656420746f206175746860008201527f6f72697a6564206f70657261746f72732e000000000000000000000000000000602082015250565b6107e5806103116000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063b700961314610046578063e348da1314610076578063fad8b32a14610092575b600080fd5b610060600480360381019061005b91906104da565b6100ae565b60405161006d9190610582565b60405180910390f35b610090600480360381019061008b91906104ad565b61019e565b005b6100ac60048036038101906100a791906104ad565b6102f3565b005b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061015457506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610193576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161018a906105bd565b60405180910390fd5b600190509392505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061024257506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610281576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610278906105bd565b60405180910390fd5b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600160008154809291906102eb9061068c565b919050555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061039757506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6103d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103cd906105bd565b60405180910390fd5b600180541161041a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104119061059d565b60405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff02191690556001600081548092919061047b90610662565b919050555050565b60008135905061049281610781565b92915050565b6000813590506104a781610798565b92915050565b6000602082840312156104c3576104c2610704565b5b60006104d184828501610483565b91505092915050565b6000806000606084860312156104f3576104f2610704565b5b600061050186828701610483565b935050602061051286828701610483565b925050604061052386828701610498565b9150509250925092565b61053681610600565b82525050565b6000610549601a836105dd565b915061055482610709565b602082019050919050565b600061056c6031836105dd565b915061057782610732565b604082019050919050565b6000602082019050610597600083018461052d565b92915050565b600060208201905081810360008301526105b68161053c565b9050919050565b600060208201905081810360008301526105d68161055f565b9050919050565b600082825260208201905092915050565b60006105f982610638565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061066d82610658565b91506000821415610681576106806106d5565b5b600182039050919050565b600061069782610658565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156106ca576106c96106d5565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600080fd5b7f43616e27742072656d6f766520616c6c206f70657261746f7273000000000000600082015250565b7f46756e6374696f6e616c697479207265737472696374656420746f206175746860008201527f6f72697a6564206f70657261746f72732e000000000000000000000000000000602082015250565b61078a816105ee565b811461079557600080fd5b50565b6107a18161060c565b81146107ac57600080fd5b5056fea26469706673582212203f72df31a1d5d412603c9bebdd138cadfcf199ab27d82f343f10574dbcb6af3264736f6c63430008060033",
}

// TokenAuthorityABI is the input ABI used to generate the binding from.
// Deprecated: Use TokenAuthorityMetaData.ABI instead.
var TokenAuthorityABI = TokenAuthorityMetaData.ABI

// TokenAuthorityBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TokenAuthorityMetaData.Bin instead.
var TokenAuthorityBin = TokenAuthorityMetaData.Bin

// DeployTokenAuthority deploys a new Ethereum contract, binding an instance of TokenAuthority to it.
func DeployTokenAuthority(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *TokenAuthority, error) {
	parsed, err := TokenAuthorityMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TokenAuthorityBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TokenAuthority{TokenAuthorityCaller: TokenAuthorityCaller{contract: contract}, TokenAuthorityTransactor: TokenAuthorityTransactor{contract: contract}, TokenAuthorityFilterer: TokenAuthorityFilterer{contract: contract}}, nil
}

// TokenAuthority is an auto generated Go binding around an Ethereum contract.
type TokenAuthority struct {
	TokenAuthorityCaller     // Read-only binding to the contract
	TokenAuthorityTransactor // Write-only binding to the contract
	TokenAuthorityFilterer   // Log filterer for contract events
}

// TokenAuthorityCaller is an auto generated read-only Go binding around an Ethereum contract.
type TokenAuthorityCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenAuthorityTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TokenAuthorityTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenAuthorityFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TokenAuthorityFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenAuthoritySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TokenAuthoritySession struct {
	Contract     *TokenAuthority   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TokenAuthorityCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TokenAuthorityCallerSession struct {
	Contract *TokenAuthorityCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// TokenAuthorityTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TokenAuthorityTransactorSession struct {
	Contract     *TokenAuthorityTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// TokenAuthorityRaw is an auto generated low-level Go binding around an Ethereum contract.
type TokenAuthorityRaw struct {
	Contract *TokenAuthority // Generic contract binding to access the raw methods on
}

// TokenAuthorityCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TokenAuthorityCallerRaw struct {
	Contract *TokenAuthorityCaller // Generic read-only contract binding to access the raw methods on
}

// TokenAuthorityTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TokenAuthorityTransactorRaw struct {
	Contract *TokenAuthorityTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTokenAuthority creates a new instance of TokenAuthority, bound to a specific deployed contract.
func NewTokenAuthority(address common.Address, backend bind.ContractBackend) (*TokenAuthority, error) {
	contract, err := bindTokenAuthority(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TokenAuthority{TokenAuthorityCaller: TokenAuthorityCaller{contract: contract}, TokenAuthorityTransactor: TokenAuthorityTransactor{contract: contract}, TokenAuthorityFilterer: TokenAuthorityFilterer{contract: contract}}, nil
}

// NewTokenAuthorityCaller creates a new read-only instance of TokenAuthority, bound to a specific deployed contract.
func NewTokenAuthorityCaller(address common.Address, caller bind.ContractCaller) (*TokenAuthorityCaller, error) {
	contract, err := bindTokenAuthority(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TokenAuthorityCaller{contract: contract}, nil
}

// NewTokenAuthorityTransactor creates a new write-only instance of TokenAuthority, bound to a specific deployed contract.
func NewTokenAuthorityTransactor(address common.Address, transactor bind.ContractTransactor) (*TokenAuthorityTransactor, error) {
	contract, err := bindTokenAuthority(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TokenAuthorityTransactor{contract: contract}, nil
}

// NewTokenAuthorityFilterer creates a new log filterer instance of TokenAuthority, bound to a specific deployed contract.
func NewTokenAuthorityFilterer(address common.Address, filterer bind.ContractFilterer) (*TokenAuthorityFilterer, error) {
	contract, err := bindTokenAuthority(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TokenAuthorityFilterer{contract: contract}, nil
}

// bindTokenAuthority binds a generic wrapper to an already deployed contract.
func bindTokenAuthority(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TokenAuthorityABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TokenAuthority *TokenAuthorityRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TokenAuthority.Contract.TokenAuthorityCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TokenAuthority *TokenAuthorityRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenAuthority.Contract.TokenAuthorityTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TokenAuthority *TokenAuthorityRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TokenAuthority.Contract.TokenAuthorityTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TokenAuthority *TokenAuthorityCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TokenAuthority.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TokenAuthority *TokenAuthorityTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenAuthority.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TokenAuthority *TokenAuthorityTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TokenAuthority.Contract.contract.Transact(opts, method, params...)
}

// CanCall is a free data retrieval call binding the contract method 0xb7009613.
//
// Solidity: function canCall(address , address , bytes4 ) view returns(bool)
func (_TokenAuthority *TokenAuthorityCaller) CanCall(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address, arg2 [4]byte) (bool, error) {
	var out []interface{}
	err := _TokenAuthority.contract.Call(opts, &out, "canCall", arg0, arg1, arg2)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanCall is a free data retrieval call binding the contract method 0xb7009613.
//
// Solidity: function canCall(address , address , bytes4 ) view returns(bool)
func (_TokenAuthority *TokenAuthoritySession) CanCall(arg0 common.Address, arg1 common.Address, arg2 [4]byte) (bool, error) {
	return _TokenAuthority.Contract.CanCall(&_TokenAuthority.CallOpts, arg0, arg1, arg2)
}

// CanCall is a free data retrieval call binding the contract method 0xb7009613.
//
// Solidity: function canCall(address , address , bytes4 ) view returns(bool)
func (_TokenAuthority *TokenAuthorityCallerSession) CanCall(arg0 common.Address, arg1 common.Address, arg2 [4]byte) (bool, error) {
	return _TokenAuthority.Contract.CanCall(&_TokenAuthority.CallOpts, arg0, arg1, arg2)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_TokenAuthority *TokenAuthorityTransactor) GrantOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _TokenAuthority.contract.Transact(opts, "grantOperator", _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_TokenAuthority *TokenAuthoritySession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _TokenAuthority.Contract.GrantOperator(&_TokenAuthority.TransactOpts, _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_TokenAuthority *TokenAuthorityTransactorSession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _TokenAuthority.Contract.GrantOperator(&_TokenAuthority.TransactOpts, _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_TokenAuthority *TokenAuthorityTransactor) RevokeOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _TokenAuthority.contract.Transact(opts, "revokeOperator", _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_TokenAuthority *TokenAuthoritySession) RevokeOperator(_operator common.Address) (*types.Transaction, error) {
	return _TokenAuthority.Contract.RevokeOperator(&_TokenAuthority.TransactOpts, _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_TokenAuthority *TokenAuthorityTransactorSession) RevokeOperator(_operator common.Address) (*types.Transaction, error) {
	return _TokenAuthority.Contract.RevokeOperator(&_TokenAuthority.TransactOpts, _operator)
}

// TokenMigratorMetaData contains all meta data concerning the TokenMigrator contract.
var TokenMigratorMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"Started\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"Stopped\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSource\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrateAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"}],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b5033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000086600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166200008c60201b60201c565b62000317565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806200013157506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b62000173576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200016a906200020e565b60405180910390fd5b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060016000815480929190620001df906200024b565b919050555050565b6000620001f660318362000230565b91506200020382620002c8565b604082019050919050565b600060208201905081810360008301526200022981620001e7565b9050919050565b600082825260208201905092915050565b6000819050919050565b6000620002588262000241565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156200028e576200028d62000299565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f46756e6374696f6e616c697479207265737472696374656420746f206175746860008201527f6f72697a6564206f70657261746f72732e000000000000000000000000000000602082015250565b61174880620003276000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80634a77f8701161005b5780634a77f870146100ed578063afa293d4146100f7578063e348da1314610115578063fad8b32a1461013157610088565b806307da68f51461008d57806316ad9542146100975780633ccfe887146100b5578063454b0608146100d1575b600080fd5b61009561014d565b005b61009f610357565b6040516100ac9190611196565b60405180910390f35b6100cf60048036038101906100ca9190610f74565b610381565b005b6100eb60048036038101906100e69190610fe1565b610620565b005b6100f561062d565b005b6100ff6107fc565b60405161010c9190611196565b60405180910390f35b61012f600480360381019061012a9190610f47565b610826565b005b61014b60048036038101906101469190610f47565b61097b565b005b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806101f157506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610230576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610227906112f1565b60405180910390fd5b600260149054906101000a900460ff1661027f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027690611311565b60405180910390fd5b6000600260146101000a81548160ff0219169083151502179055506000600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f55c4adf1f68f084b809304657594a92ba835ada8d3b5340955bf05746723c05b3360405161034d9190611196565b60405180910390a1565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061042557506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610464576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045b906112f1565b60405180910390fd5b61046d82610b0b565b6104ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a390611291565b60405180910390fd5b6104b581610b0b565b6104f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104eb906112d1565b60405180910390fd5b600260149054906101000a900460ff1615610544576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053b906112b1565b60405180910390fd5b6001600260146101000a81548160ff02191690831515021790555081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fe7ccbdddf2d84fab545fb1aad35fd684ef7cce1df6df25facfb32fe3de037f1d828233604051610614939291906111da565b60405180910390a15050565b61062a3382610c31565b50565b60003390506000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b815260040161068f9190611196565b60206040518083038186803b1580156106a757600080fd5b505afa1580156106bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106df919061100e565b90506000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e84306040518363ffffffff1660e01b81526004016107409291906111b1565b60206040518083038186803b15801561075857600080fd5b505afa15801561076c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610790919061100e565b905060006107a78383610ed990919063ffffffff16565b9050600081116107ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e390611331565b60405180910390fd5b6107f68482610c31565b50505050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806108ca57506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610909576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610900906112f1565b60405180910390fd5b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600081548092919061097390611473565b919050555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610a1f57506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610a5e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a55906112f1565b60405180910390fd5b6001805411610aa2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9990611271565b60405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff021916905560016000815480929190610b0390611449565b919050555050565b60008060608373ffffffffffffffffffffffffffffffffffffffff166040516024016040516020818303038152906040527f18160ddd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610bb7919061117f565b6000604051808303816000865af19150503d8060008114610bf4576040519150601f19603f3d011682016040523d82523d6000602084013e610bf9565b606091505b508092508193505050600081806020019051810190610c18919061100e565b9050828015610c275750600081115b9350505050919050565b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610d3e576003339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b80600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610d8d9190611378565b92505081905550600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8330846040518463ffffffff1660e01b8152600401610df393929190611211565b602060405180830381600087803b158015610e0d57600080fd5b505af1158015610e21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e459190610fb4565b50600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1983836040518363ffffffff1660e01b8152600401610ea3929190611248565b600060405180830381600087803b158015610ebd57600080fd5b505af1158015610ed1573d6000803e3d6000fd5b505050505050565b600081831115610ee95781610eeb565b825b905092915050565b600081359050610f02816116cd565b92915050565b600081519050610f17816116e4565b92915050565b600081359050610f2c816116fb565b92915050565b600081519050610f41816116fb565b92915050565b600060208284031215610f5d57610f5c6114eb565b5b6000610f6b84828501610ef3565b91505092915050565b60008060408385031215610f8b57610f8a6114eb565b5b6000610f9985828601610ef3565b9250506020610faa85828601610ef3565b9150509250929050565b600060208284031215610fca57610fc96114eb565b5b6000610fd884828501610f08565b91505092915050565b600060208284031215610ff757610ff66114eb565b5b600061100584828501610f1d565b91505092915050565b600060208284031215611024576110236114eb565b5b600061103284828501610f32565b91505092915050565b611044816113ce565b82525050565b600061105582611351565b61105f818561135c565b935061106f818560208601611416565b80840191505092915050565b6000611088601a83611367565b9150611093826114f0565b602082019050919050565b60006110ab604483611367565b91506110b682611519565b606082019050919050565b60006110ce601d83611367565b91506110d98261158e565b602082019050919050565b60006110f1604983611367565b91506110fc826115b7565b606082019050919050565b6000611114603183611367565b915061111f8261162c565b604082019050919050565b6000611137601583611367565b91506111428261167b565b602082019050919050565b600061115a601e83611367565b9150611165826116a4565b602082019050919050565b6111798161140c565b82525050565b600061118b828461104a565b915081905092915050565b60006020820190506111ab600083018461103b565b92915050565b60006040820190506111c6600083018561103b565b6111d3602083018461103b565b9392505050565b60006060820190506111ef600083018661103b565b6111fc602083018561103b565b611209604083018461103b565b949350505050565b6000606082019050611226600083018661103b565b611233602083018561103b565b6112406040830184611170565b949350505050565b600060408201905061125d600083018561103b565b61126a6020830184611170565b9392505050565b6000602082019050818103600083015261128a8161107b565b9050919050565b600060208201905081810360008301526112aa8161109e565b9050919050565b600060208201905081810360008301526112ca816110c1565b9050919050565b600060208201905081810360008301526112ea816110e4565b9050919050565b6000602082019050818103600083015261130a81611107565b9050919050565b6000602082019050818103600083015261132a8161112a565b9050919050565b6000602082019050818103600083015261134a8161114d565b9050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b60006113838261140c565b915061138e8361140c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156113c3576113c26114bc565b5b828201905092915050565b60006113d9826113ec565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015611434578082015181840152602081019050611419565b83811115611443576000848401525b50505050565b60006114548261140c565b91506000821415611468576114676114bc565b5b600182039050919050565b600061147e8261140c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156114b1576114b06114bc565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600080fd5b7f43616e27742072656d6f766520616c6c206f70657261746f7273000000000000600082015250565b7f736f7572636520646f6573206e6f742061707065617220746f20626520616e2060008201527f455243323020286661696c65642063616c6c20746f20746f74616c537570706c60208201527f7928292900000000000000000000000000000000000000000000000000000000604082015250565b7f6d6967726174696f6e2068617320616c72656164792073746172746564000000600082015250565b7f64657374696e6174696f6e20646f6573206e6f742061707065617220746f206260008201527f6520616e20455243323020286661696c65642063616c6c20746f20746f74616c60208201527f537570706c792829290000000000000000000000000000000000000000000000604082015250565b7f46756e6374696f6e616c697479207265737472696374656420746f206175746860008201527f6f72697a6564206f70657261746f72732e000000000000000000000000000000602082015250565b7f6d6967726174696f6e206e6f7420737461727465640000000000000000000000600082015250565b7f6e6f20746f6b656e7320617661696c61626c6520746f206d6967726174650000600082015250565b6116d6816113ce565b81146116e157600080fd5b50565b6116ed816113e0565b81146116f857600080fd5b50565b6117048161140c565b811461170f57600080fd5b5056fea2646970667358221220b94abc2fbed9d9eee629df39d6f421da281018057cefe5c1d31e016f3d5ce11164736f6c63430008060033",
}

// TokenMigratorABI is the input ABI used to generate the binding from.
// Deprecated: Use TokenMigratorMetaData.ABI instead.
var TokenMigratorABI = TokenMigratorMetaData.ABI

// TokenMigratorBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TokenMigratorMetaData.Bin instead.
var TokenMigratorBin = TokenMigratorMetaData.Bin

// DeployTokenMigrator deploys a new Ethereum contract, binding an instance of TokenMigrator to it.
func DeployTokenMigrator(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *TokenMigrator, error) {
	parsed, err := TokenMigratorMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TokenMigratorBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TokenMigrator{TokenMigratorCaller: TokenMigratorCaller{contract: contract}, TokenMigratorTransactor: TokenMigratorTransactor{contract: contract}, TokenMigratorFilterer: TokenMigratorFilterer{contract: contract}}, nil
}

// TokenMigrator is an auto generated Go binding around an Ethereum contract.
type TokenMigrator struct {
	TokenMigratorCaller     // Read-only binding to the contract
	TokenMigratorTransactor // Write-only binding to the contract
	TokenMigratorFilterer   // Log filterer for contract events
}

// TokenMigratorCaller is an auto generated read-only Go binding around an Ethereum contract.
type TokenMigratorCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenMigratorTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TokenMigratorTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenMigratorFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TokenMigratorFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenMigratorSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TokenMigratorSession struct {
	Contract     *TokenMigrator    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TokenMigratorCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TokenMigratorCallerSession struct {
	Contract *TokenMigratorCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// TokenMigratorTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TokenMigratorTransactorSession struct {
	Contract     *TokenMigratorTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// TokenMigratorRaw is an auto generated low-level Go binding around an Ethereum contract.
type TokenMigratorRaw struct {
	Contract *TokenMigrator // Generic contract binding to access the raw methods on
}

// TokenMigratorCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TokenMigratorCallerRaw struct {
	Contract *TokenMigratorCaller // Generic read-only contract binding to access the raw methods on
}

// TokenMigratorTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TokenMigratorTransactorRaw struct {
	Contract *TokenMigratorTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTokenMigrator creates a new instance of TokenMigrator, bound to a specific deployed contract.
func NewTokenMigrator(address common.Address, backend bind.ContractBackend) (*TokenMigrator, error) {
	contract, err := bindTokenMigrator(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TokenMigrator{TokenMigratorCaller: TokenMigratorCaller{contract: contract}, TokenMigratorTransactor: TokenMigratorTransactor{contract: contract}, TokenMigratorFilterer: TokenMigratorFilterer{contract: contract}}, nil
}

// NewTokenMigratorCaller creates a new read-only instance of TokenMigrator, bound to a specific deployed contract.
func NewTokenMigratorCaller(address common.Address, caller bind.ContractCaller) (*TokenMigratorCaller, error) {
	contract, err := bindTokenMigrator(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TokenMigratorCaller{contract: contract}, nil
}

// NewTokenMigratorTransactor creates a new write-only instance of TokenMigrator, bound to a specific deployed contract.
func NewTokenMigratorTransactor(address common.Address, transactor bind.ContractTransactor) (*TokenMigratorTransactor, error) {
	contract, err := bindTokenMigrator(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TokenMigratorTransactor{contract: contract}, nil
}

// NewTokenMigratorFilterer creates a new log filterer instance of TokenMigrator, bound to a specific deployed contract.
func NewTokenMigratorFilterer(address common.Address, filterer bind.ContractFilterer) (*TokenMigratorFilterer, error) {
	contract, err := bindTokenMigrator(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TokenMigratorFilterer{contract: contract}, nil
}

// bindTokenMigrator binds a generic wrapper to an already deployed contract.
func bindTokenMigrator(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TokenMigratorABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TokenMigrator *TokenMigratorRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TokenMigrator.Contract.TokenMigratorCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TokenMigrator *TokenMigratorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenMigrator.Contract.TokenMigratorTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TokenMigrator *TokenMigratorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TokenMigrator.Contract.TokenMigratorTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TokenMigrator *TokenMigratorCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TokenMigrator.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TokenMigrator *TokenMigratorTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenMigrator.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TokenMigrator *TokenMigratorTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TokenMigrator.Contract.contract.Transact(opts, method, params...)
}

// GetDestination is a free data retrieval call binding the contract method 0x16ad9542.
//
// Solidity: function getDestination() view returns(address)
func (_TokenMigrator *TokenMigratorCaller) GetDestination(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TokenMigrator.contract.Call(opts, &out, "getDestination")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetDestination is a free data retrieval call binding the contract method 0x16ad9542.
//
// Solidity: function getDestination() view returns(address)
func (_TokenMigrator *TokenMigratorSession) GetDestination() (common.Address, error) {
	return _TokenMigrator.Contract.GetDestination(&_TokenMigrator.CallOpts)
}

// GetDestination is a free data retrieval call binding the contract method 0x16ad9542.
//
// Solidity: function getDestination() view returns(address)
func (_TokenMigrator *TokenMigratorCallerSession) GetDestination() (common.Address, error) {
	return _TokenMigrator.Contract.GetDestination(&_TokenMigrator.CallOpts)
}

// GetSource is a free data retrieval call binding the contract method 0xafa293d4.
//
// Solidity: function getSource() view returns(address)
func (_TokenMigrator *TokenMigratorCaller) GetSource(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TokenMigrator.contract.Call(opts, &out, "getSource")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetSource is a free data retrieval call binding the contract method 0xafa293d4.
//
// Solidity: function getSource() view returns(address)
func (_TokenMigrator *TokenMigratorSession) GetSource() (common.Address, error) {
	return _TokenMigrator.Contract.GetSource(&_TokenMigrator.CallOpts)
}

// GetSource is a free data retrieval call binding the contract method 0xafa293d4.
//
// Solidity: function getSource() view returns(address)
func (_TokenMigrator *TokenMigratorCallerSession) GetSource() (common.Address, error) {
	return _TokenMigrator.Contract.GetSource(&_TokenMigrator.CallOpts)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_TokenMigrator *TokenMigratorTransactor) GrantOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _TokenMigrator.contract.Transact(opts, "grantOperator", _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_TokenMigrator *TokenMigratorSession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _TokenMigrator.Contract.GrantOperator(&_TokenMigrator.TransactOpts, _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_TokenMigrator *TokenMigratorTransactorSession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _TokenMigrator.Contract.GrantOperator(&_TokenMigrator.TransactOpts, _operator)
}

// Migrate is a paid mutator transaction binding the contract method 0x454b0608.
//
// Solidity: function migrate(uint256 amount) returns()
func (_TokenMigrator *TokenMigratorTransactor) Migrate(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _TokenMigrator.contract.Transact(opts, "migrate", amount)
}

// Migrate is a paid mutator transaction binding the contract method 0x454b0608.
//
// Solidity: function migrate(uint256 amount) returns()
func (_TokenMigrator *TokenMigratorSession) Migrate(amount *big.Int) (*types.Transaction, error) {
	return _TokenMigrator.Contract.Migrate(&_TokenMigrator.TransactOpts, amount)
}

// Migrate is a paid mutator transaction binding the contract method 0x454b0608.
//
// Solidity: function migrate(uint256 amount) returns()
func (_TokenMigrator *TokenMigratorTransactorSession) Migrate(amount *big.Int) (*types.Transaction, error) {
	return _TokenMigrator.Contract.Migrate(&_TokenMigrator.TransactOpts, amount)
}

// MigrateAll is a paid mutator transaction binding the contract method 0x4a77f870.
//
// Solidity: function migrateAll() returns()
func (_TokenMigrator *TokenMigratorTransactor) MigrateAll(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenMigrator.contract.Transact(opts, "migrateAll")
}

// MigrateAll is a paid mutator transaction binding the contract method 0x4a77f870.
//
// Solidity: function migrateAll() returns()
func (_TokenMigrator *TokenMigratorSession) MigrateAll() (*types.Transaction, error) {
	return _TokenMigrator.Contract.MigrateAll(&_TokenMigrator.TransactOpts)
}

// MigrateAll is a paid mutator transaction binding the contract method 0x4a77f870.
//
// Solidity: function migrateAll() returns()
func (_TokenMigrator *TokenMigratorTransactorSession) MigrateAll() (*types.Transaction, error) {
	return _TokenMigrator.Contract.MigrateAll(&_TokenMigrator.TransactOpts)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_TokenMigrator *TokenMigratorTransactor) RevokeOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _TokenMigrator.contract.Transact(opts, "revokeOperator", _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_TokenMigrator *TokenMigratorSession) RevokeOperator(_operator common.Address) (*types.Transaction, error) {
	return _TokenMigrator.Contract.RevokeOperator(&_TokenMigrator.TransactOpts, _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_TokenMigrator *TokenMigratorTransactorSession) RevokeOperator(_operator common.Address) (*types.Transaction, error) {
	return _TokenMigrator.Contract.RevokeOperator(&_TokenMigrator.TransactOpts, _operator)
}

// Start is a paid mutator transaction binding the contract method 0x3ccfe887.
//
// Solidity: function start(address src, address dst) returns()
func (_TokenMigrator *TokenMigratorTransactor) Start(opts *bind.TransactOpts, src common.Address, dst common.Address) (*types.Transaction, error) {
	return _TokenMigrator.contract.Transact(opts, "start", src, dst)
}

// Start is a paid mutator transaction binding the contract method 0x3ccfe887.
//
// Solidity: function start(address src, address dst) returns()
func (_TokenMigrator *TokenMigratorSession) Start(src common.Address, dst common.Address) (*types.Transaction, error) {
	return _TokenMigrator.Contract.Start(&_TokenMigrator.TransactOpts, src, dst)
}

// Start is a paid mutator transaction binding the contract method 0x3ccfe887.
//
// Solidity: function start(address src, address dst) returns()
func (_TokenMigrator *TokenMigratorTransactorSession) Start(src common.Address, dst common.Address) (*types.Transaction, error) {
	return _TokenMigrator.Contract.Start(&_TokenMigrator.TransactOpts, src, dst)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_TokenMigrator *TokenMigratorTransactor) Stop(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenMigrator.contract.Transact(opts, "stop")
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_TokenMigrator *TokenMigratorSession) Stop() (*types.Transaction, error) {
	return _TokenMigrator.Contract.Stop(&_TokenMigrator.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_TokenMigrator *TokenMigratorTransactorSession) Stop() (*types.Transaction, error) {
	return _TokenMigrator.Contract.Stop(&_TokenMigrator.TransactOpts)
}

// TokenMigratorStartedIterator is returned from FilterStarted and is used to iterate over the raw logs and unpacked data for Started events raised by the TokenMigrator contract.
type TokenMigratorStartedIterator struct {
	Event *TokenMigratorStarted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenMigratorStartedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenMigratorStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenMigratorStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenMigratorStartedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenMigratorStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenMigratorStarted represents a Started event raised by the TokenMigrator contract.
type TokenMigratorStarted struct {
	Source      common.Address
	Destination common.Address
	Who         common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterStarted is a free log retrieval operation binding the contract event 0xe7ccbdddf2d84fab545fb1aad35fd684ef7cce1df6df25facfb32fe3de037f1d.
//
// Solidity: event Started(address source, address destination, address who)
func (_TokenMigrator *TokenMigratorFilterer) FilterStarted(opts *bind.FilterOpts) (*TokenMigratorStartedIterator, error) {

	logs, sub, err := _TokenMigrator.contract.FilterLogs(opts, "Started")
	if err != nil {
		return nil, err
	}
	return &TokenMigratorStartedIterator{contract: _TokenMigrator.contract, event: "Started", logs: logs, sub: sub}, nil
}

// WatchStarted is a free log subscription operation binding the contract event 0xe7ccbdddf2d84fab545fb1aad35fd684ef7cce1df6df25facfb32fe3de037f1d.
//
// Solidity: event Started(address source, address destination, address who)
func (_TokenMigrator *TokenMigratorFilterer) WatchStarted(opts *bind.WatchOpts, sink chan<- *TokenMigratorStarted) (event.Subscription, error) {

	logs, sub, err := _TokenMigrator.contract.WatchLogs(opts, "Started")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenMigratorStarted)
				if err := _TokenMigrator.contract.UnpackLog(event, "Started", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStarted is a log parse operation binding the contract event 0xe7ccbdddf2d84fab545fb1aad35fd684ef7cce1df6df25facfb32fe3de037f1d.
//
// Solidity: event Started(address source, address destination, address who)
func (_TokenMigrator *TokenMigratorFilterer) ParseStarted(log types.Log) (*TokenMigratorStarted, error) {
	event := new(TokenMigratorStarted)
	if err := _TokenMigrator.contract.UnpackLog(event, "Started", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenMigratorStoppedIterator is returned from FilterStopped and is used to iterate over the raw logs and unpacked data for Stopped events raised by the TokenMigrator contract.
type TokenMigratorStoppedIterator struct {
	Event *TokenMigratorStopped // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenMigratorStoppedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenMigratorStopped)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenMigratorStopped)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenMigratorStoppedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenMigratorStoppedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenMigratorStopped represents a Stopped event raised by the TokenMigrator contract.
type TokenMigratorStopped struct {
	Who common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterStopped is a free log retrieval operation binding the contract event 0x55c4adf1f68f084b809304657594a92ba835ada8d3b5340955bf05746723c05b.
//
// Solidity: event Stopped(address who)
func (_TokenMigrator *TokenMigratorFilterer) FilterStopped(opts *bind.FilterOpts) (*TokenMigratorStoppedIterator, error) {

	logs, sub, err := _TokenMigrator.contract.FilterLogs(opts, "Stopped")
	if err != nil {
		return nil, err
	}
	return &TokenMigratorStoppedIterator{contract: _TokenMigrator.contract, event: "Stopped", logs: logs, sub: sub}, nil
}

// WatchStopped is a free log subscription operation binding the contract event 0x55c4adf1f68f084b809304657594a92ba835ada8d3b5340955bf05746723c05b.
//
// Solidity: event Stopped(address who)
func (_TokenMigrator *TokenMigratorFilterer) WatchStopped(opts *bind.WatchOpts, sink chan<- *TokenMigratorStopped) (event.Subscription, error) {

	logs, sub, err := _TokenMigrator.contract.WatchLogs(opts, "Stopped")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenMigratorStopped)
				if err := _TokenMigrator.contract.UnpackLog(event, "Stopped", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStopped is a log parse operation binding the contract event 0x55c4adf1f68f084b809304657594a92ba835ada8d3b5340955bf05746723c05b.
//
// Solidity: event Stopped(address who)
func (_TokenMigrator *TokenMigratorFilterer) ParseStopped(log types.Log) (*TokenMigratorStopped, error) {
	event := new(TokenMigratorStopped)
	if err := _TokenMigrator.contract.UnpackLog(event, "Stopped", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenMigratorEventsMetaData contains all meta data concerning the TokenMigratorEvents contract.
var TokenMigratorEventsMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"Started\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"Stopped\",\"type\":\"event\"}]",
	Bin: "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220c91d1ed359b219e3641eb42264e5f0abe2dcd9af26bfcf692df400a8f0695f8a64736f6c63430008060033",
}

// TokenMigratorEventsABI is the input ABI used to generate the binding from.
// Deprecated: Use TokenMigratorEventsMetaData.ABI instead.
var TokenMigratorEventsABI = TokenMigratorEventsMetaData.ABI

// TokenMigratorEventsBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TokenMigratorEventsMetaData.Bin instead.
var TokenMigratorEventsBin = TokenMigratorEventsMetaData.Bin

// DeployTokenMigratorEvents deploys a new Ethereum contract, binding an instance of TokenMigratorEvents to it.
func DeployTokenMigratorEvents(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *TokenMigratorEvents, error) {
	parsed, err := TokenMigratorEventsMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TokenMigratorEventsBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TokenMigratorEvents{TokenMigratorEventsCaller: TokenMigratorEventsCaller{contract: contract}, TokenMigratorEventsTransactor: TokenMigratorEventsTransactor{contract: contract}, TokenMigratorEventsFilterer: TokenMigratorEventsFilterer{contract: contract}}, nil
}

// TokenMigratorEvents is an auto generated Go binding around an Ethereum contract.
type TokenMigratorEvents struct {
	TokenMigratorEventsCaller     // Read-only binding to the contract
	TokenMigratorEventsTransactor // Write-only binding to the contract
	TokenMigratorEventsFilterer   // Log filterer for contract events
}

// TokenMigratorEventsCaller is an auto generated read-only Go binding around an Ethereum contract.
type TokenMigratorEventsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenMigratorEventsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TokenMigratorEventsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenMigratorEventsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TokenMigratorEventsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenMigratorEventsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TokenMigratorEventsSession struct {
	Contract     *TokenMigratorEvents // Generic contract binding to set the session for
	CallOpts     bind.CallOpts        // Call options to use throughout this session
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// TokenMigratorEventsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TokenMigratorEventsCallerSession struct {
	Contract *TokenMigratorEventsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts              // Call options to use throughout this session
}

// TokenMigratorEventsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TokenMigratorEventsTransactorSession struct {
	Contract     *TokenMigratorEventsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts              // Transaction auth options to use throughout this session
}

// TokenMigratorEventsRaw is an auto generated low-level Go binding around an Ethereum contract.
type TokenMigratorEventsRaw struct {
	Contract *TokenMigratorEvents // Generic contract binding to access the raw methods on
}

// TokenMigratorEventsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TokenMigratorEventsCallerRaw struct {
	Contract *TokenMigratorEventsCaller // Generic read-only contract binding to access the raw methods on
}

// TokenMigratorEventsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TokenMigratorEventsTransactorRaw struct {
	Contract *TokenMigratorEventsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTokenMigratorEvents creates a new instance of TokenMigratorEvents, bound to a specific deployed contract.
func NewTokenMigratorEvents(address common.Address, backend bind.ContractBackend) (*TokenMigratorEvents, error) {
	contract, err := bindTokenMigratorEvents(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TokenMigratorEvents{TokenMigratorEventsCaller: TokenMigratorEventsCaller{contract: contract}, TokenMigratorEventsTransactor: TokenMigratorEventsTransactor{contract: contract}, TokenMigratorEventsFilterer: TokenMigratorEventsFilterer{contract: contract}}, nil
}

// NewTokenMigratorEventsCaller creates a new read-only instance of TokenMigratorEvents, bound to a specific deployed contract.
func NewTokenMigratorEventsCaller(address common.Address, caller bind.ContractCaller) (*TokenMigratorEventsCaller, error) {
	contract, err := bindTokenMigratorEvents(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TokenMigratorEventsCaller{contract: contract}, nil
}

// NewTokenMigratorEventsTransactor creates a new write-only instance of TokenMigratorEvents, bound to a specific deployed contract.
func NewTokenMigratorEventsTransactor(address common.Address, transactor bind.ContractTransactor) (*TokenMigratorEventsTransactor, error) {
	contract, err := bindTokenMigratorEvents(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TokenMigratorEventsTransactor{contract: contract}, nil
}

// NewTokenMigratorEventsFilterer creates a new log filterer instance of TokenMigratorEvents, bound to a specific deployed contract.
func NewTokenMigratorEventsFilterer(address common.Address, filterer bind.ContractFilterer) (*TokenMigratorEventsFilterer, error) {
	contract, err := bindTokenMigratorEvents(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TokenMigratorEventsFilterer{contract: contract}, nil
}

// bindTokenMigratorEvents binds a generic wrapper to an already deployed contract.
func bindTokenMigratorEvents(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TokenMigratorEventsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TokenMigratorEvents *TokenMigratorEventsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TokenMigratorEvents.Contract.TokenMigratorEventsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TokenMigratorEvents *TokenMigratorEventsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenMigratorEvents.Contract.TokenMigratorEventsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TokenMigratorEvents *TokenMigratorEventsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TokenMigratorEvents.Contract.TokenMigratorEventsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TokenMigratorEvents *TokenMigratorEventsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TokenMigratorEvents.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TokenMigratorEvents *TokenMigratorEventsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenMigratorEvents.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TokenMigratorEvents *TokenMigratorEventsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TokenMigratorEvents.Contract.contract.Transact(opts, method, params...)
}

// TokenMigratorEventsStartedIterator is returned from FilterStarted and is used to iterate over the raw logs and unpacked data for Started events raised by the TokenMigratorEvents contract.
type TokenMigratorEventsStartedIterator struct {
	Event *TokenMigratorEventsStarted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenMigratorEventsStartedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenMigratorEventsStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenMigratorEventsStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenMigratorEventsStartedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenMigratorEventsStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenMigratorEventsStarted represents a Started event raised by the TokenMigratorEvents contract.
type TokenMigratorEventsStarted struct {
	Source      common.Address
	Destination common.Address
	Who         common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterStarted is a free log retrieval operation binding the contract event 0xe7ccbdddf2d84fab545fb1aad35fd684ef7cce1df6df25facfb32fe3de037f1d.
//
// Solidity: event Started(address source, address destination, address who)
func (_TokenMigratorEvents *TokenMigratorEventsFilterer) FilterStarted(opts *bind.FilterOpts) (*TokenMigratorEventsStartedIterator, error) {

	logs, sub, err := _TokenMigratorEvents.contract.FilterLogs(opts, "Started")
	if err != nil {
		return nil, err
	}
	return &TokenMigratorEventsStartedIterator{contract: _TokenMigratorEvents.contract, event: "Started", logs: logs, sub: sub}, nil
}

// WatchStarted is a free log subscription operation binding the contract event 0xe7ccbdddf2d84fab545fb1aad35fd684ef7cce1df6df25facfb32fe3de037f1d.
//
// Solidity: event Started(address source, address destination, address who)
func (_TokenMigratorEvents *TokenMigratorEventsFilterer) WatchStarted(opts *bind.WatchOpts, sink chan<- *TokenMigratorEventsStarted) (event.Subscription, error) {

	logs, sub, err := _TokenMigratorEvents.contract.WatchLogs(opts, "Started")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenMigratorEventsStarted)
				if err := _TokenMigratorEvents.contract.UnpackLog(event, "Started", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStarted is a log parse operation binding the contract event 0xe7ccbdddf2d84fab545fb1aad35fd684ef7cce1df6df25facfb32fe3de037f1d.
//
// Solidity: event Started(address source, address destination, address who)
func (_TokenMigratorEvents *TokenMigratorEventsFilterer) ParseStarted(log types.Log) (*TokenMigratorEventsStarted, error) {
	event := new(TokenMigratorEventsStarted)
	if err := _TokenMigratorEvents.contract.UnpackLog(event, "Started", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenMigratorEventsStoppedIterator is returned from FilterStopped and is used to iterate over the raw logs and unpacked data for Stopped events raised by the TokenMigratorEvents contract.
type TokenMigratorEventsStoppedIterator struct {
	Event *TokenMigratorEventsStopped // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenMigratorEventsStoppedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenMigratorEventsStopped)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenMigratorEventsStopped)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenMigratorEventsStoppedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenMigratorEventsStoppedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenMigratorEventsStopped represents a Stopped event raised by the TokenMigratorEvents contract.
type TokenMigratorEventsStopped struct {
	Who common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterStopped is a free log retrieval operation binding the contract event 0x55c4adf1f68f084b809304657594a92ba835ada8d3b5340955bf05746723c05b.
//
// Solidity: event Stopped(address who)
func (_TokenMigratorEvents *TokenMigratorEventsFilterer) FilterStopped(opts *bind.FilterOpts) (*TokenMigratorEventsStoppedIterator, error) {

	logs, sub, err := _TokenMigratorEvents.contract.FilterLogs(opts, "Stopped")
	if err != nil {
		return nil, err
	}
	return &TokenMigratorEventsStoppedIterator{contract: _TokenMigratorEvents.contract, event: "Stopped", logs: logs, sub: sub}, nil
}

// WatchStopped is a free log subscription operation binding the contract event 0x55c4adf1f68f084b809304657594a92ba835ada8d3b5340955bf05746723c05b.
//
// Solidity: event Stopped(address who)
func (_TokenMigratorEvents *TokenMigratorEventsFilterer) WatchStopped(opts *bind.WatchOpts, sink chan<- *TokenMigratorEventsStopped) (event.Subscription, error) {

	logs, sub, err := _TokenMigratorEvents.contract.WatchLogs(opts, "Stopped")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenMigratorEventsStopped)
				if err := _TokenMigratorEvents.contract.UnpackLog(event, "Stopped", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStopped is a log parse operation binding the contract event 0x55c4adf1f68f084b809304657594a92ba835ada8d3b5340955bf05746723c05b.
//
// Solidity: event Stopped(address who)
func (_TokenMigratorEvents *TokenMigratorEventsFilterer) ParseStopped(log types.Log) (*TokenMigratorEventsStopped, error) {
	event := new(TokenMigratorEventsStopped)
	if err := _TokenMigratorEvents.contract.UnpackLog(event, "Stopped", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorLocationsMetaData contains all meta data concerning the ValidatorLocations contract.
var ValidatorLocationsMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"ip\",\"type\":\"string\"}],\"name\":\"MyLocation\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"getLocation\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"a\",\"type\":\"address[]\"}],\"name\":\"getLocations\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyLocation\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"ip\",\"type\":\"string\"}],\"name\":\"setMyLocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// ValidatorLocationsABI is the input ABI used to generate the binding from.
// Deprecated: Use ValidatorLocationsMetaData.ABI instead.
var ValidatorLocationsABI = ValidatorLocationsMetaData.ABI

// ValidatorLocations is an auto generated Go binding around an Ethereum contract.
type ValidatorLocations struct {
	ValidatorLocationsCaller     // Read-only binding to the contract
	ValidatorLocationsTransactor // Write-only binding to the contract
	ValidatorLocationsFilterer   // Log filterer for contract events
}

// ValidatorLocationsCaller is an auto generated read-only Go binding around an Ethereum contract.
type ValidatorLocationsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorLocationsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ValidatorLocationsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorLocationsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ValidatorLocationsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorLocationsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ValidatorLocationsSession struct {
	Contract     *ValidatorLocations // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// ValidatorLocationsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ValidatorLocationsCallerSession struct {
	Contract *ValidatorLocationsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// ValidatorLocationsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ValidatorLocationsTransactorSession struct {
	Contract     *ValidatorLocationsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// ValidatorLocationsRaw is an auto generated low-level Go binding around an Ethereum contract.
type ValidatorLocationsRaw struct {
	Contract *ValidatorLocations // Generic contract binding to access the raw methods on
}

// ValidatorLocationsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ValidatorLocationsCallerRaw struct {
	Contract *ValidatorLocationsCaller // Generic read-only contract binding to access the raw methods on
}

// ValidatorLocationsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ValidatorLocationsTransactorRaw struct {
	Contract *ValidatorLocationsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewValidatorLocations creates a new instance of ValidatorLocations, bound to a specific deployed contract.
func NewValidatorLocations(address common.Address, backend bind.ContractBackend) (*ValidatorLocations, error) {
	contract, err := bindValidatorLocations(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ValidatorLocations{ValidatorLocationsCaller: ValidatorLocationsCaller{contract: contract}, ValidatorLocationsTransactor: ValidatorLocationsTransactor{contract: contract}, ValidatorLocationsFilterer: ValidatorLocationsFilterer{contract: contract}}, nil
}

// NewValidatorLocationsCaller creates a new read-only instance of ValidatorLocations, bound to a specific deployed contract.
func NewValidatorLocationsCaller(address common.Address, caller bind.ContractCaller) (*ValidatorLocationsCaller, error) {
	contract, err := bindValidatorLocations(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorLocationsCaller{contract: contract}, nil
}

// NewValidatorLocationsTransactor creates a new write-only instance of ValidatorLocations, bound to a specific deployed contract.
func NewValidatorLocationsTransactor(address common.Address, transactor bind.ContractTransactor) (*ValidatorLocationsTransactor, error) {
	contract, err := bindValidatorLocations(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorLocationsTransactor{contract: contract}, nil
}

// NewValidatorLocationsFilterer creates a new log filterer instance of ValidatorLocations, bound to a specific deployed contract.
func NewValidatorLocationsFilterer(address common.Address, filterer bind.ContractFilterer) (*ValidatorLocationsFilterer, error) {
	contract, err := bindValidatorLocations(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ValidatorLocationsFilterer{contract: contract}, nil
}

// bindValidatorLocations binds a generic wrapper to an already deployed contract.
func bindValidatorLocations(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ValidatorLocationsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorLocations *ValidatorLocationsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorLocations.Contract.ValidatorLocationsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorLocations *ValidatorLocationsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorLocations.Contract.ValidatorLocationsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorLocations *ValidatorLocationsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorLocations.Contract.ValidatorLocationsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorLocations *ValidatorLocationsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorLocations.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorLocations *ValidatorLocationsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorLocations.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorLocations *ValidatorLocationsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorLocations.Contract.contract.Transact(opts, method, params...)
}

// GetLocation is a free data retrieval call binding the contract method 0xd9e0dc59.
//
// Solidity: function getLocation(address a) view returns(string)
func (_ValidatorLocations *ValidatorLocationsCaller) GetLocation(opts *bind.CallOpts, a common.Address) (string, error) {
	var out []interface{}
	err := _ValidatorLocations.contract.Call(opts, &out, "getLocation", a)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetLocation is a free data retrieval call binding the contract method 0xd9e0dc59.
//
// Solidity: function getLocation(address a) view returns(string)
func (_ValidatorLocations *ValidatorLocationsSession) GetLocation(a common.Address) (string, error) {
	return _ValidatorLocations.Contract.GetLocation(&_ValidatorLocations.CallOpts, a)
}

// GetLocation is a free data retrieval call binding the contract method 0xd9e0dc59.
//
// Solidity: function getLocation(address a) view returns(string)
func (_ValidatorLocations *ValidatorLocationsCallerSession) GetLocation(a common.Address) (string, error) {
	return _ValidatorLocations.Contract.GetLocation(&_ValidatorLocations.CallOpts, a)
}

// GetLocations is a free data retrieval call binding the contract method 0x76207f9c.
//
// Solidity: function getLocations(address[] a) view returns(string[])
func (_ValidatorLocations *ValidatorLocationsCaller) GetLocations(opts *bind.CallOpts, a []common.Address) ([]string, error) {
	var out []interface{}
	err := _ValidatorLocations.contract.Call(opts, &out, "getLocations", a)

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// GetLocations is a free data retrieval call binding the contract method 0x76207f9c.
//
// Solidity: function getLocations(address[] a) view returns(string[])
func (_ValidatorLocations *ValidatorLocationsSession) GetLocations(a []common.Address) ([]string, error) {
	return _ValidatorLocations.Contract.GetLocations(&_ValidatorLocations.CallOpts, a)
}

// GetLocations is a free data retrieval call binding the contract method 0x76207f9c.
//
// Solidity: function getLocations(address[] a) view returns(string[])
func (_ValidatorLocations *ValidatorLocationsCallerSession) GetLocations(a []common.Address) ([]string, error) {
	return _ValidatorLocations.Contract.GetLocations(&_ValidatorLocations.CallOpts, a)
}

// GetMyLocation is a free data retrieval call binding the contract method 0x59a8b416.
//
// Solidity: function getMyLocation() view returns(string)
func (_ValidatorLocations *ValidatorLocationsCaller) GetMyLocation(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ValidatorLocations.contract.Call(opts, &out, "getMyLocation")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetMyLocation is a free data retrieval call binding the contract method 0x59a8b416.
//
// Solidity: function getMyLocation() view returns(string)
func (_ValidatorLocations *ValidatorLocationsSession) GetMyLocation() (string, error) {
	return _ValidatorLocations.Contract.GetMyLocation(&_ValidatorLocations.CallOpts)
}

// GetMyLocation is a free data retrieval call binding the contract method 0x59a8b416.
//
// Solidity: function getMyLocation() view returns(string)
func (_ValidatorLocations *ValidatorLocationsCallerSession) GetMyLocation() (string, error) {
	return _ValidatorLocations.Contract.GetMyLocation(&_ValidatorLocations.CallOpts)
}

// SetMyLocation is a paid mutator transaction binding the contract method 0xed7a558c.
//
// Solidity: function setMyLocation(string ip) returns()
func (_ValidatorLocations *ValidatorLocationsTransactor) SetMyLocation(opts *bind.TransactOpts, ip string) (*types.Transaction, error) {
	return _ValidatorLocations.contract.Transact(opts, "setMyLocation", ip)
}

// SetMyLocation is a paid mutator transaction binding the contract method 0xed7a558c.
//
// Solidity: function setMyLocation(string ip) returns()
func (_ValidatorLocations *ValidatorLocationsSession) SetMyLocation(ip string) (*types.Transaction, error) {
	return _ValidatorLocations.Contract.SetMyLocation(&_ValidatorLocations.TransactOpts, ip)
}

// SetMyLocation is a paid mutator transaction binding the contract method 0xed7a558c.
//
// Solidity: function setMyLocation(string ip) returns()
func (_ValidatorLocations *ValidatorLocationsTransactorSession) SetMyLocation(ip string) (*types.Transaction, error) {
	return _ValidatorLocations.Contract.SetMyLocation(&_ValidatorLocations.TransactOpts, ip)
}

// ValidatorLocationsMyLocationIterator is returned from FilterMyLocation and is used to iterate over the raw logs and unpacked data for MyLocation events raised by the ValidatorLocations contract.
type ValidatorLocationsMyLocationIterator struct {
	Event *ValidatorLocationsMyLocation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorLocationsMyLocationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorLocationsMyLocation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorLocationsMyLocation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorLocationsMyLocationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorLocationsMyLocationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorLocationsMyLocation represents a MyLocation event raised by the ValidatorLocations contract.
type ValidatorLocationsMyLocation struct {
	Ip  common.Hash
	Raw types.Log // Blockchain specific contextual infos
}

// FilterMyLocation is a free log retrieval operation binding the contract event 0x94f42dfacdc77a25a5e03baf01c6438d29ae4923eed7742bb1269da152e2470d.
//
// Solidity: event MyLocation(string indexed ip)
func (_ValidatorLocations *ValidatorLocationsFilterer) FilterMyLocation(opts *bind.FilterOpts, ip []string) (*ValidatorLocationsMyLocationIterator, error) {

	var ipRule []interface{}
	for _, ipItem := range ip {
		ipRule = append(ipRule, ipItem)
	}

	logs, sub, err := _ValidatorLocations.contract.FilterLogs(opts, "MyLocation", ipRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorLocationsMyLocationIterator{contract: _ValidatorLocations.contract, event: "MyLocation", logs: logs, sub: sub}, nil
}

// WatchMyLocation is a free log subscription operation binding the contract event 0x94f42dfacdc77a25a5e03baf01c6438d29ae4923eed7742bb1269da152e2470d.
//
// Solidity: event MyLocation(string indexed ip)
func (_ValidatorLocations *ValidatorLocationsFilterer) WatchMyLocation(opts *bind.WatchOpts, sink chan<- *ValidatorLocationsMyLocation, ip []string) (event.Subscription, error) {

	var ipRule []interface{}
	for _, ipItem := range ip {
		ipRule = append(ipRule, ipItem)
	}

	logs, sub, err := _ValidatorLocations.contract.WatchLogs(opts, "MyLocation", ipRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorLocationsMyLocation)
				if err := _ValidatorLocations.contract.UnpackLog(event, "MyLocation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMyLocation is a log parse operation binding the contract event 0x94f42dfacdc77a25a5e03baf01c6438d29ae4923eed7742bb1269da152e2470d.
//
// Solidity: event MyLocation(string indexed ip)
func (_ValidatorLocations *ValidatorLocationsFilterer) ParseMyLocation(log types.Log) (*ValidatorLocationsMyLocation, error) {
	event := new(ValidatorLocationsMyLocation)
	if err := _ValidatorLocations.contract.UnpackLog(event, "MyLocation", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorLocationsEventsMetaData contains all meta data concerning the ValidatorLocationsEvents contract.
var ValidatorLocationsEventsMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"ip\",\"type\":\"string\"}],\"name\":\"MyLocation\",\"type\":\"event\"}]",
}

// ValidatorLocationsEventsABI is the input ABI used to generate the binding from.
// Deprecated: Use ValidatorLocationsEventsMetaData.ABI instead.
var ValidatorLocationsEventsABI = ValidatorLocationsEventsMetaData.ABI

// ValidatorLocationsEvents is an auto generated Go binding around an Ethereum contract.
type ValidatorLocationsEvents struct {
	ValidatorLocationsEventsCaller     // Read-only binding to the contract
	ValidatorLocationsEventsTransactor // Write-only binding to the contract
	ValidatorLocationsEventsFilterer   // Log filterer for contract events
}

// ValidatorLocationsEventsCaller is an auto generated read-only Go binding around an Ethereum contract.
type ValidatorLocationsEventsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorLocationsEventsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ValidatorLocationsEventsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorLocationsEventsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ValidatorLocationsEventsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorLocationsEventsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ValidatorLocationsEventsSession struct {
	Contract     *ValidatorLocationsEvents // Generic contract binding to set the session for
	CallOpts     bind.CallOpts             // Call options to use throughout this session
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// ValidatorLocationsEventsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ValidatorLocationsEventsCallerSession struct {
	Contract *ValidatorLocationsEventsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                   // Call options to use throughout this session
}

// ValidatorLocationsEventsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ValidatorLocationsEventsTransactorSession struct {
	Contract     *ValidatorLocationsEventsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                   // Transaction auth options to use throughout this session
}

// ValidatorLocationsEventsRaw is an auto generated low-level Go binding around an Ethereum contract.
type ValidatorLocationsEventsRaw struct {
	Contract *ValidatorLocationsEvents // Generic contract binding to access the raw methods on
}

// ValidatorLocationsEventsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ValidatorLocationsEventsCallerRaw struct {
	Contract *ValidatorLocationsEventsCaller // Generic read-only contract binding to access the raw methods on
}

// ValidatorLocationsEventsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ValidatorLocationsEventsTransactorRaw struct {
	Contract *ValidatorLocationsEventsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewValidatorLocationsEvents creates a new instance of ValidatorLocationsEvents, bound to a specific deployed contract.
func NewValidatorLocationsEvents(address common.Address, backend bind.ContractBackend) (*ValidatorLocationsEvents, error) {
	contract, err := bindValidatorLocationsEvents(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ValidatorLocationsEvents{ValidatorLocationsEventsCaller: ValidatorLocationsEventsCaller{contract: contract}, ValidatorLocationsEventsTransactor: ValidatorLocationsEventsTransactor{contract: contract}, ValidatorLocationsEventsFilterer: ValidatorLocationsEventsFilterer{contract: contract}}, nil
}

// NewValidatorLocationsEventsCaller creates a new read-only instance of ValidatorLocationsEvents, bound to a specific deployed contract.
func NewValidatorLocationsEventsCaller(address common.Address, caller bind.ContractCaller) (*ValidatorLocationsEventsCaller, error) {
	contract, err := bindValidatorLocationsEvents(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorLocationsEventsCaller{contract: contract}, nil
}

// NewValidatorLocationsEventsTransactor creates a new write-only instance of ValidatorLocationsEvents, bound to a specific deployed contract.
func NewValidatorLocationsEventsTransactor(address common.Address, transactor bind.ContractTransactor) (*ValidatorLocationsEventsTransactor, error) {
	contract, err := bindValidatorLocationsEvents(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorLocationsEventsTransactor{contract: contract}, nil
}

// NewValidatorLocationsEventsFilterer creates a new log filterer instance of ValidatorLocationsEvents, bound to a specific deployed contract.
func NewValidatorLocationsEventsFilterer(address common.Address, filterer bind.ContractFilterer) (*ValidatorLocationsEventsFilterer, error) {
	contract, err := bindValidatorLocationsEvents(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ValidatorLocationsEventsFilterer{contract: contract}, nil
}

// bindValidatorLocationsEvents binds a generic wrapper to an already deployed contract.
func bindValidatorLocationsEvents(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ValidatorLocationsEventsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorLocationsEvents *ValidatorLocationsEventsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorLocationsEvents.Contract.ValidatorLocationsEventsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorLocationsEvents *ValidatorLocationsEventsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorLocationsEvents.Contract.ValidatorLocationsEventsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorLocationsEvents *ValidatorLocationsEventsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorLocationsEvents.Contract.ValidatorLocationsEventsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorLocationsEvents *ValidatorLocationsEventsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorLocationsEvents.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorLocationsEvents *ValidatorLocationsEventsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorLocationsEvents.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorLocationsEvents *ValidatorLocationsEventsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorLocationsEvents.Contract.contract.Transact(opts, method, params...)
}

// ValidatorLocationsEventsMyLocationIterator is returned from FilterMyLocation and is used to iterate over the raw logs and unpacked data for MyLocation events raised by the ValidatorLocationsEvents contract.
type ValidatorLocationsEventsMyLocationIterator struct {
	Event *ValidatorLocationsEventsMyLocation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorLocationsEventsMyLocationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorLocationsEventsMyLocation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorLocationsEventsMyLocation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorLocationsEventsMyLocationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorLocationsEventsMyLocationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorLocationsEventsMyLocation represents a MyLocation event raised by the ValidatorLocationsEvents contract.
type ValidatorLocationsEventsMyLocation struct {
	Ip  common.Hash
	Raw types.Log // Blockchain specific contextual infos
}

// FilterMyLocation is a free log retrieval operation binding the contract event 0x94f42dfacdc77a25a5e03baf01c6438d29ae4923eed7742bb1269da152e2470d.
//
// Solidity: event MyLocation(string indexed ip)
func (_ValidatorLocationsEvents *ValidatorLocationsEventsFilterer) FilterMyLocation(opts *bind.FilterOpts, ip []string) (*ValidatorLocationsEventsMyLocationIterator, error) {

	var ipRule []interface{}
	for _, ipItem := range ip {
		ipRule = append(ipRule, ipItem)
	}

	logs, sub, err := _ValidatorLocationsEvents.contract.FilterLogs(opts, "MyLocation", ipRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorLocationsEventsMyLocationIterator{contract: _ValidatorLocationsEvents.contract, event: "MyLocation", logs: logs, sub: sub}, nil
}

// WatchMyLocation is a free log subscription operation binding the contract event 0x94f42dfacdc77a25a5e03baf01c6438d29ae4923eed7742bb1269da152e2470d.
//
// Solidity: event MyLocation(string indexed ip)
func (_ValidatorLocationsEvents *ValidatorLocationsEventsFilterer) WatchMyLocation(opts *bind.WatchOpts, sink chan<- *ValidatorLocationsEventsMyLocation, ip []string) (event.Subscription, error) {

	var ipRule []interface{}
	for _, ipItem := range ip {
		ipRule = append(ipRule, ipItem)
	}

	logs, sub, err := _ValidatorLocationsEvents.contract.WatchLogs(opts, "MyLocation", ipRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorLocationsEventsMyLocation)
				if err := _ValidatorLocationsEvents.contract.UnpackLog(event, "MyLocation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMyLocation is a log parse operation binding the contract event 0x94f42dfacdc77a25a5e03baf01c6438d29ae4923eed7742bb1269da152e2470d.
//
// Solidity: event MyLocation(string indexed ip)
func (_ValidatorLocationsEvents *ValidatorLocationsEventsFilterer) ParseMyLocation(log types.Log) (*ValidatorLocationsEventsMyLocation, error) {
	event := new(ValidatorLocationsEventsMyLocation)
	if err := _ValidatorLocationsEvents.contract.UnpackLog(event, "MyLocation", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorLocationsFacetMetaData contains all meta data concerning the ValidatorLocationsFacet contract.
var ValidatorLocationsFacetMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"ip\",\"type\":\"string\"}],\"name\":\"MyLocation\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"getLocation\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"a\",\"type\":\"address[]\"}],\"name\":\"getLocations\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyLocation\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"ip\",\"type\":\"string\"}],\"name\":\"setMyLocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50610dbe806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806359a8b4161461005157806376207f9c1461006f578063d9e0dc591461009f578063ed7a558c146100cf575b600080fd5b6100596100eb565b6040516100669190610a90565b60405180910390f35b61008960048036038101906100849190610878565b6100fa565b6040516100969190610a6e565b60405180910390f35b6100b960048036038101906100b4919061084b565b61010e565b6040516100c69190610a90565b60405180910390f35b6100e960048036038101906100e491906108c5565b610120565b005b60606100f5610172565b905090565b60606101068383610250565b905092915050565b6060610119826103ef565b9050919050565b61012a82826104cf565b818160405161013a929190610a55565b60405180910390207f94f42dfacdc77a25a5e03baf01c6438d29ae4923eed7742bb1269da152e2470d60405160405180910390a25050565b6060600061017e610579565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080546101cc90610bc1565b80601f01602080910402602001604051908101604052809291908181526020018280546101f890610bc1565b80156102455780601f1061021a57610100808354040283529160200191610245565b820191906000526020600020905b81548152906001019060200180831161022857829003601f168201915b505050505091505090565b6060600061025c610579565b905060008484905067ffffffffffffffff81111561027d5761027c610cc9565b5b6040519080825280602002602001820160405280156102b057816020015b606081526020019060019003908161029b5790505b50905060005b858590508110156103e3578260000160008787848181106102da576102d9610c9a565b5b90506020020160208101906102ef919061084b565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805461033490610bc1565b80601f016020809104026020016040519081016040528092919081815260200182805461036090610bc1565b80156103ad5780601f10610382576101008083540402835291602001916103ad565b820191906000526020600020905b81548152906001019060200180831161039057829003601f168201915b50505050508282815181106103c5576103c4610c9a565b5b602002602001018190525080806103db90610bf3565b9150506102b6565b50809250505092915050565b606060006103fb610579565b90508060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805461044990610bc1565b80601f016020809104026020016040519081016040528092919081815260200182805461047590610bc1565b80156104c25780601f10610497576101008083540402835291602001916104c2565b820191906000526020600020905b8154815290600101906020018083116104a557829003601f168201915b5050505050915050919050565b6104d8336105a6565b610517576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050e90610ab2565b60405180910390fd5b6000610521610579565b905082828260000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002091906105739291906106e7565b50505050565b6000807fd6a809ef2e033c9356226f38ff793e00cfb3b2fc9a21fbb6d92b5183cecec87b90508091505090565b6000806105b1610625565b90508060020160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16801561061d5750610611610652565b61061a84610665565b10155b915050919050565b6000807f310970b1d84cbb8af371a12019b396e9511a9b44411c1dabeec3e3d59d9a50f690508091505090565b600061065c6106ba565b60000154905090565b600061066f6106ba565b60090160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549050919050565b6000807f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237ef90508091505090565b8280546106f390610bc1565b90600052602060002090601f016020900481019282610715576000855561075c565b82601f1061072e57803560ff191683800117855561075c565b8280016001018555821561075c579182015b8281111561075b578235825591602001919060010190610740565b5b509050610769919061076d565b5090565b5b8082111561078657600081600090555060010161076e565b5090565b60008135905061079981610d71565b92915050565b60008083601f8401126107b5576107b4610cfd565b5b8235905067ffffffffffffffff8111156107d2576107d1610cf8565b5b6020830191508360208202830111156107ee576107ed610d02565b5b9250929050565b60008083601f84011261080b5761080a610cfd565b5b8235905067ffffffffffffffff81111561082857610827610cf8565b5b60208301915083600182028301111561084457610843610d02565b5b9250929050565b60006020828403121561086157610860610d0c565b5b600061086f8482850161078a565b91505092915050565b6000806020838503121561088f5761088e610d0c565b5b600083013567ffffffffffffffff8111156108ad576108ac610d07565b5b6108b98582860161079f565b92509250509250929050565b600080602083850312156108dc576108db610d0c565b5b600083013567ffffffffffffffff8111156108fa576108f9610d07565b5b610906858286016107f5565b92509250509250929050565b600061091e83836109c0565b905092915050565b600061093182610ae2565b61093b8185610b05565b93508360208202850161094d85610ad2565b8060005b85811015610989578484038952815161096a8582610912565b945061097583610af8565b925060208a01995050600181019050610951565b50829750879550505050505092915050565b60006109a78385610b38565b93506109b4838584610b7f565b82840190509392505050565b60006109cb82610aed565b6109d58185610b16565b93506109e5818560208601610b8e565b6109ee81610d11565b840191505092915050565b6000610a0482610aed565b610a0e8185610b27565b9350610a1e818560208601610b8e565b610a2781610d11565b840191505092915050565b6000610a3f602683610b27565b9150610a4a82610d22565b604082019050919050565b6000610a6282848661099b565b91508190509392505050565b60006020820190508181036000830152610a888184610926565b905092915050565b60006020820190508181036000830152610aaa81846109f9565b905092915050565b60006020820190508181036000830152610acb81610a32565b9050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000610b4e82610b55565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015610bac578082015181840152602081019050610b91565b83811115610bbb576000848401525b50505050565b60006002820490506001821680610bd957607f821691505b60208210811415610bed57610bec610c6b565b5b50919050565b6000610bfe82610b75565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610c3157610c30610c3c565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f6f6e6c792066756c6c79207374616b6564207061727469636970616e7473206160008201527f6c6c6f7765640000000000000000000000000000000000000000000000000000602082015250565b610d7a81610b43565b8114610d8557600080fd5b5056fea26469706673582212204bb9077ef30e3138a3f4cfbf08c4f4a0ebd69c0951b3fc2e4da8ccd29f740af764736f6c63430008060033",
}

// ValidatorLocationsFacetABI is the input ABI used to generate the binding from.
// Deprecated: Use ValidatorLocationsFacetMetaData.ABI instead.
var ValidatorLocationsFacetABI = ValidatorLocationsFacetMetaData.ABI

// ValidatorLocationsFacetBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ValidatorLocationsFacetMetaData.Bin instead.
var ValidatorLocationsFacetBin = ValidatorLocationsFacetMetaData.Bin

// DeployValidatorLocationsFacet deploys a new Ethereum contract, binding an instance of ValidatorLocationsFacet to it.
func DeployValidatorLocationsFacet(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ValidatorLocationsFacet, error) {
	parsed, err := ValidatorLocationsFacetMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ValidatorLocationsFacetBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ValidatorLocationsFacet{ValidatorLocationsFacetCaller: ValidatorLocationsFacetCaller{contract: contract}, ValidatorLocationsFacetTransactor: ValidatorLocationsFacetTransactor{contract: contract}, ValidatorLocationsFacetFilterer: ValidatorLocationsFacetFilterer{contract: contract}}, nil
}

// ValidatorLocationsFacet is an auto generated Go binding around an Ethereum contract.
type ValidatorLocationsFacet struct {
	ValidatorLocationsFacetCaller     // Read-only binding to the contract
	ValidatorLocationsFacetTransactor // Write-only binding to the contract
	ValidatorLocationsFacetFilterer   // Log filterer for contract events
}

// ValidatorLocationsFacetCaller is an auto generated read-only Go binding around an Ethereum contract.
type ValidatorLocationsFacetCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorLocationsFacetTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ValidatorLocationsFacetTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorLocationsFacetFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ValidatorLocationsFacetFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorLocationsFacetSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ValidatorLocationsFacetSession struct {
	Contract     *ValidatorLocationsFacet // Generic contract binding to set the session for
	CallOpts     bind.CallOpts            // Call options to use throughout this session
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// ValidatorLocationsFacetCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ValidatorLocationsFacetCallerSession struct {
	Contract *ValidatorLocationsFacetCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                  // Call options to use throughout this session
}

// ValidatorLocationsFacetTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ValidatorLocationsFacetTransactorSession struct {
	Contract     *ValidatorLocationsFacetTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                  // Transaction auth options to use throughout this session
}

// ValidatorLocationsFacetRaw is an auto generated low-level Go binding around an Ethereum contract.
type ValidatorLocationsFacetRaw struct {
	Contract *ValidatorLocationsFacet // Generic contract binding to access the raw methods on
}

// ValidatorLocationsFacetCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ValidatorLocationsFacetCallerRaw struct {
	Contract *ValidatorLocationsFacetCaller // Generic read-only contract binding to access the raw methods on
}

// ValidatorLocationsFacetTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ValidatorLocationsFacetTransactorRaw struct {
	Contract *ValidatorLocationsFacetTransactor // Generic write-only contract binding to access the raw methods on
}

// NewValidatorLocationsFacet creates a new instance of ValidatorLocationsFacet, bound to a specific deployed contract.
func NewValidatorLocationsFacet(address common.Address, backend bind.ContractBackend) (*ValidatorLocationsFacet, error) {
	contract, err := bindValidatorLocationsFacet(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ValidatorLocationsFacet{ValidatorLocationsFacetCaller: ValidatorLocationsFacetCaller{contract: contract}, ValidatorLocationsFacetTransactor: ValidatorLocationsFacetTransactor{contract: contract}, ValidatorLocationsFacetFilterer: ValidatorLocationsFacetFilterer{contract: contract}}, nil
}

// NewValidatorLocationsFacetCaller creates a new read-only instance of ValidatorLocationsFacet, bound to a specific deployed contract.
func NewValidatorLocationsFacetCaller(address common.Address, caller bind.ContractCaller) (*ValidatorLocationsFacetCaller, error) {
	contract, err := bindValidatorLocationsFacet(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorLocationsFacetCaller{contract: contract}, nil
}

// NewValidatorLocationsFacetTransactor creates a new write-only instance of ValidatorLocationsFacet, bound to a specific deployed contract.
func NewValidatorLocationsFacetTransactor(address common.Address, transactor bind.ContractTransactor) (*ValidatorLocationsFacetTransactor, error) {
	contract, err := bindValidatorLocationsFacet(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorLocationsFacetTransactor{contract: contract}, nil
}

// NewValidatorLocationsFacetFilterer creates a new log filterer instance of ValidatorLocationsFacet, bound to a specific deployed contract.
func NewValidatorLocationsFacetFilterer(address common.Address, filterer bind.ContractFilterer) (*ValidatorLocationsFacetFilterer, error) {
	contract, err := bindValidatorLocationsFacet(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ValidatorLocationsFacetFilterer{contract: contract}, nil
}

// bindValidatorLocationsFacet binds a generic wrapper to an already deployed contract.
func bindValidatorLocationsFacet(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ValidatorLocationsFacetABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorLocationsFacet *ValidatorLocationsFacetRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorLocationsFacet.Contract.ValidatorLocationsFacetCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorLocationsFacet *ValidatorLocationsFacetRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorLocationsFacet.Contract.ValidatorLocationsFacetTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorLocationsFacet *ValidatorLocationsFacetRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorLocationsFacet.Contract.ValidatorLocationsFacetTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorLocationsFacet *ValidatorLocationsFacetCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorLocationsFacet.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorLocationsFacet *ValidatorLocationsFacetTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorLocationsFacet.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorLocationsFacet *ValidatorLocationsFacetTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorLocationsFacet.Contract.contract.Transact(opts, method, params...)
}

// GetLocation is a free data retrieval call binding the contract method 0xd9e0dc59.
//
// Solidity: function getLocation(address a) view returns(string)
func (_ValidatorLocationsFacet *ValidatorLocationsFacetCaller) GetLocation(opts *bind.CallOpts, a common.Address) (string, error) {
	var out []interface{}
	err := _ValidatorLocationsFacet.contract.Call(opts, &out, "getLocation", a)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetLocation is a free data retrieval call binding the contract method 0xd9e0dc59.
//
// Solidity: function getLocation(address a) view returns(string)
func (_ValidatorLocationsFacet *ValidatorLocationsFacetSession) GetLocation(a common.Address) (string, error) {
	return _ValidatorLocationsFacet.Contract.GetLocation(&_ValidatorLocationsFacet.CallOpts, a)
}

// GetLocation is a free data retrieval call binding the contract method 0xd9e0dc59.
//
// Solidity: function getLocation(address a) view returns(string)
func (_ValidatorLocationsFacet *ValidatorLocationsFacetCallerSession) GetLocation(a common.Address) (string, error) {
	return _ValidatorLocationsFacet.Contract.GetLocation(&_ValidatorLocationsFacet.CallOpts, a)
}

// GetLocations is a free data retrieval call binding the contract method 0x76207f9c.
//
// Solidity: function getLocations(address[] a) view returns(string[])
func (_ValidatorLocationsFacet *ValidatorLocationsFacetCaller) GetLocations(opts *bind.CallOpts, a []common.Address) ([]string, error) {
	var out []interface{}
	err := _ValidatorLocationsFacet.contract.Call(opts, &out, "getLocations", a)

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// GetLocations is a free data retrieval call binding the contract method 0x76207f9c.
//
// Solidity: function getLocations(address[] a) view returns(string[])
func (_ValidatorLocationsFacet *ValidatorLocationsFacetSession) GetLocations(a []common.Address) ([]string, error) {
	return _ValidatorLocationsFacet.Contract.GetLocations(&_ValidatorLocationsFacet.CallOpts, a)
}

// GetLocations is a free data retrieval call binding the contract method 0x76207f9c.
//
// Solidity: function getLocations(address[] a) view returns(string[])
func (_ValidatorLocationsFacet *ValidatorLocationsFacetCallerSession) GetLocations(a []common.Address) ([]string, error) {
	return _ValidatorLocationsFacet.Contract.GetLocations(&_ValidatorLocationsFacet.CallOpts, a)
}

// GetMyLocation is a free data retrieval call binding the contract method 0x59a8b416.
//
// Solidity: function getMyLocation() view returns(string)
func (_ValidatorLocationsFacet *ValidatorLocationsFacetCaller) GetMyLocation(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ValidatorLocationsFacet.contract.Call(opts, &out, "getMyLocation")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetMyLocation is a free data retrieval call binding the contract method 0x59a8b416.
//
// Solidity: function getMyLocation() view returns(string)
func (_ValidatorLocationsFacet *ValidatorLocationsFacetSession) GetMyLocation() (string, error) {
	return _ValidatorLocationsFacet.Contract.GetMyLocation(&_ValidatorLocationsFacet.CallOpts)
}

// GetMyLocation is a free data retrieval call binding the contract method 0x59a8b416.
//
// Solidity: function getMyLocation() view returns(string)
func (_ValidatorLocationsFacet *ValidatorLocationsFacetCallerSession) GetMyLocation() (string, error) {
	return _ValidatorLocationsFacet.Contract.GetMyLocation(&_ValidatorLocationsFacet.CallOpts)
}

// SetMyLocation is a paid mutator transaction binding the contract method 0xed7a558c.
//
// Solidity: function setMyLocation(string ip) returns()
func (_ValidatorLocationsFacet *ValidatorLocationsFacetTransactor) SetMyLocation(opts *bind.TransactOpts, ip string) (*types.Transaction, error) {
	return _ValidatorLocationsFacet.contract.Transact(opts, "setMyLocation", ip)
}

// SetMyLocation is a paid mutator transaction binding the contract method 0xed7a558c.
//
// Solidity: function setMyLocation(string ip) returns()
func (_ValidatorLocationsFacet *ValidatorLocationsFacetSession) SetMyLocation(ip string) (*types.Transaction, error) {
	return _ValidatorLocationsFacet.Contract.SetMyLocation(&_ValidatorLocationsFacet.TransactOpts, ip)
}

// SetMyLocation is a paid mutator transaction binding the contract method 0xed7a558c.
//
// Solidity: function setMyLocation(string ip) returns()
func (_ValidatorLocationsFacet *ValidatorLocationsFacetTransactorSession) SetMyLocation(ip string) (*types.Transaction, error) {
	return _ValidatorLocationsFacet.Contract.SetMyLocation(&_ValidatorLocationsFacet.TransactOpts, ip)
}

// ValidatorLocationsFacetMyLocationIterator is returned from FilterMyLocation and is used to iterate over the raw logs and unpacked data for MyLocation events raised by the ValidatorLocationsFacet contract.
type ValidatorLocationsFacetMyLocationIterator struct {
	Event *ValidatorLocationsFacetMyLocation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorLocationsFacetMyLocationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorLocationsFacetMyLocation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorLocationsFacetMyLocation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorLocationsFacetMyLocationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorLocationsFacetMyLocationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorLocationsFacetMyLocation represents a MyLocation event raised by the ValidatorLocationsFacet contract.
type ValidatorLocationsFacetMyLocation struct {
	Ip  common.Hash
	Raw types.Log // Blockchain specific contextual infos
}

// FilterMyLocation is a free log retrieval operation binding the contract event 0x94f42dfacdc77a25a5e03baf01c6438d29ae4923eed7742bb1269da152e2470d.
//
// Solidity: event MyLocation(string indexed ip)
func (_ValidatorLocationsFacet *ValidatorLocationsFacetFilterer) FilterMyLocation(opts *bind.FilterOpts, ip []string) (*ValidatorLocationsFacetMyLocationIterator, error) {

	var ipRule []interface{}
	for _, ipItem := range ip {
		ipRule = append(ipRule, ipItem)
	}

	logs, sub, err := _ValidatorLocationsFacet.contract.FilterLogs(opts, "MyLocation", ipRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorLocationsFacetMyLocationIterator{contract: _ValidatorLocationsFacet.contract, event: "MyLocation", logs: logs, sub: sub}, nil
}

// WatchMyLocation is a free log subscription operation binding the contract event 0x94f42dfacdc77a25a5e03baf01c6438d29ae4923eed7742bb1269da152e2470d.
//
// Solidity: event MyLocation(string indexed ip)
func (_ValidatorLocationsFacet *ValidatorLocationsFacetFilterer) WatchMyLocation(opts *bind.WatchOpts, sink chan<- *ValidatorLocationsFacetMyLocation, ip []string) (event.Subscription, error) {

	var ipRule []interface{}
	for _, ipItem := range ip {
		ipRule = append(ipRule, ipItem)
	}

	logs, sub, err := _ValidatorLocationsFacet.contract.WatchLogs(opts, "MyLocation", ipRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorLocationsFacetMyLocation)
				if err := _ValidatorLocationsFacet.contract.UnpackLog(event, "MyLocation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMyLocation is a log parse operation binding the contract event 0x94f42dfacdc77a25a5e03baf01c6438d29ae4923eed7742bb1269da152e2470d.
//
// Solidity: event MyLocation(string indexed ip)
func (_ValidatorLocationsFacet *ValidatorLocationsFacetFilterer) ParseMyLocation(log types.Log) (*ValidatorLocationsFacetMyLocation, error) {
	event := new(ValidatorLocationsFacetMyLocation)
	if err := _ValidatorLocationsFacet.contract.UnpackLog(event, "MyLocation", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorLocationsLibraryMetaData contains all meta data concerning the ValidatorLocationsLibrary contract.
var ValidatorLocationsLibraryMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220812c503f17544e9aa7521bda4025e4efa2c6e6476975e477e49131d222d10f4e64736f6c63430008060033",
}

// ValidatorLocationsLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use ValidatorLocationsLibraryMetaData.ABI instead.
var ValidatorLocationsLibraryABI = ValidatorLocationsLibraryMetaData.ABI

// ValidatorLocationsLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ValidatorLocationsLibraryMetaData.Bin instead.
var ValidatorLocationsLibraryBin = ValidatorLocationsLibraryMetaData.Bin

// DeployValidatorLocationsLibrary deploys a new Ethereum contract, binding an instance of ValidatorLocationsLibrary to it.
func DeployValidatorLocationsLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ValidatorLocationsLibrary, error) {
	parsed, err := ValidatorLocationsLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ValidatorLocationsLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ValidatorLocationsLibrary{ValidatorLocationsLibraryCaller: ValidatorLocationsLibraryCaller{contract: contract}, ValidatorLocationsLibraryTransactor: ValidatorLocationsLibraryTransactor{contract: contract}, ValidatorLocationsLibraryFilterer: ValidatorLocationsLibraryFilterer{contract: contract}}, nil
}

// ValidatorLocationsLibrary is an auto generated Go binding around an Ethereum contract.
type ValidatorLocationsLibrary struct {
	ValidatorLocationsLibraryCaller     // Read-only binding to the contract
	ValidatorLocationsLibraryTransactor // Write-only binding to the contract
	ValidatorLocationsLibraryFilterer   // Log filterer for contract events
}

// ValidatorLocationsLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type ValidatorLocationsLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorLocationsLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ValidatorLocationsLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorLocationsLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ValidatorLocationsLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorLocationsLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ValidatorLocationsLibrarySession struct {
	Contract     *ValidatorLocationsLibrary // Generic contract binding to set the session for
	CallOpts     bind.CallOpts              // Call options to use throughout this session
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// ValidatorLocationsLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ValidatorLocationsLibraryCallerSession struct {
	Contract *ValidatorLocationsLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                    // Call options to use throughout this session
}

// ValidatorLocationsLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ValidatorLocationsLibraryTransactorSession struct {
	Contract     *ValidatorLocationsLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                    // Transaction auth options to use throughout this session
}

// ValidatorLocationsLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type ValidatorLocationsLibraryRaw struct {
	Contract *ValidatorLocationsLibrary // Generic contract binding to access the raw methods on
}

// ValidatorLocationsLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ValidatorLocationsLibraryCallerRaw struct {
	Contract *ValidatorLocationsLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// ValidatorLocationsLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ValidatorLocationsLibraryTransactorRaw struct {
	Contract *ValidatorLocationsLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewValidatorLocationsLibrary creates a new instance of ValidatorLocationsLibrary, bound to a specific deployed contract.
func NewValidatorLocationsLibrary(address common.Address, backend bind.ContractBackend) (*ValidatorLocationsLibrary, error) {
	contract, err := bindValidatorLocationsLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ValidatorLocationsLibrary{ValidatorLocationsLibraryCaller: ValidatorLocationsLibraryCaller{contract: contract}, ValidatorLocationsLibraryTransactor: ValidatorLocationsLibraryTransactor{contract: contract}, ValidatorLocationsLibraryFilterer: ValidatorLocationsLibraryFilterer{contract: contract}}, nil
}

// NewValidatorLocationsLibraryCaller creates a new read-only instance of ValidatorLocationsLibrary, bound to a specific deployed contract.
func NewValidatorLocationsLibraryCaller(address common.Address, caller bind.ContractCaller) (*ValidatorLocationsLibraryCaller, error) {
	contract, err := bindValidatorLocationsLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorLocationsLibraryCaller{contract: contract}, nil
}

// NewValidatorLocationsLibraryTransactor creates a new write-only instance of ValidatorLocationsLibrary, bound to a specific deployed contract.
func NewValidatorLocationsLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*ValidatorLocationsLibraryTransactor, error) {
	contract, err := bindValidatorLocationsLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorLocationsLibraryTransactor{contract: contract}, nil
}

// NewValidatorLocationsLibraryFilterer creates a new log filterer instance of ValidatorLocationsLibrary, bound to a specific deployed contract.
func NewValidatorLocationsLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*ValidatorLocationsLibraryFilterer, error) {
	contract, err := bindValidatorLocationsLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ValidatorLocationsLibraryFilterer{contract: contract}, nil
}

// bindValidatorLocationsLibrary binds a generic wrapper to an already deployed contract.
func bindValidatorLocationsLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ValidatorLocationsLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorLocationsLibrary *ValidatorLocationsLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorLocationsLibrary.Contract.ValidatorLocationsLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorLocationsLibrary *ValidatorLocationsLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorLocationsLibrary.Contract.ValidatorLocationsLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorLocationsLibrary *ValidatorLocationsLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorLocationsLibrary.Contract.ValidatorLocationsLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorLocationsLibrary *ValidatorLocationsLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorLocationsLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorLocationsLibrary *ValidatorLocationsLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorLocationsLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorLocationsLibrary *ValidatorLocationsLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorLocationsLibrary.Contract.contract.Transact(opts, method, params...)
}

// ValidatorsMetaData contains all meta data concerning the Validators contract.
var ValidatorsMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BurntStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"why\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Fined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"key_share_G1\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"key_share_G1_correctness_proof\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[4]\",\"name\":\"key_share_G2\",\"type\":\"uint256[4]\"}],\"name\":\"KeyShareSubmission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LockedReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LockedStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dkgStarts\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"registrationEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shareDistributionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"disputeEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"keyShareSubmissionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mpkSubmissionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gpkjSubmissionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gpkjDisputeEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dkgComplete\",\"type\":\"uint256\"}],\"name\":\"RegistrationOpen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"RequestedUnlockStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"encrypted_shares\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[2][]\",\"name\":\"commitments\",\"type\":\"uint256[2][]\"}],\"name\":\"ShareDistribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"chainId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"height\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"startingETHDKG\",\"type\":\"bool\"}],\"name\":\"SnapshotTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnlockedReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnlockedStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"madID\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"madID\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"pkHash\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorLeft\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share3\",\"type\":\"uint256\"}],\"name\":\"ValidatorMember\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"pkHash\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorQueued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"validatorCount\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"ethHeight\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"madHeight\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey3\",\"type\":\"uint256\"}],\"name\":\"ValidatorSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256[2]\",\"name\":\"_madID\",\"type\":\"uint256[2]\"}],\"name\":\"addValidator\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceRewardFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceStakeFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceUnlocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceUnlockedFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceUnlockedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceUnlockedRewardFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmValidators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"src\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"extractUint256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"src\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"extractUint32\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"val\",\"type\":\"uint32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fine\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotNumber\",\"type\":\"uint256\"}],\"name\":\"getChainIdFromSnapshot\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotNumber\",\"type\":\"uint256\"}],\"name\":\"getHeightFromSnapshot\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotNumber\",\"type\":\"uint256\"}],\"name\":\"getMadHeightFromSnapshot\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotNumber\",\"type\":\"uint256\"}],\"name\":\"getRawBlockClaimsSnapshot\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotNumber\",\"type\":\"uint256\"}],\"name\":\"getRawSignatureSnapshot\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"getValidatorPublicKey\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractRegistry\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"initializeParticipants\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractRegistry\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"initializeSnapshots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractRegistry\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"initializeStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockEpoch\",\"type\":\"uint256\"}],\"name\":\"lockRewardFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lockStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lockStakeFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"majorFine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"majorStakeFine\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minEthSnapshotSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minMadSnapshotSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"minorFine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minorStakeFine\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_signatureGroup\",\"type\":\"bytes\"}],\"name\":\"parseSignatureGroup\",\"outputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"publicKey\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256[2]\",\"name\":\"signature\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256[2]\",\"name\":\"_madID\",\"type\":\"uint256[2]\"}],\"name\":\"removeValidator\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestUnlockStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"requestUnlockStakeFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"orig\",\"type\":\"bytes\"}],\"name\":\"reverse\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"reversed\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_chainId\",\"type\":\"uint32\"}],\"name\":\"setChainId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ns\",\"type\":\"uint256\"}],\"name\":\"setEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epochDelay\",\"type\":\"uint256\"}],\"name\":\"setEpochDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_majorStakeFine\",\"type\":\"uint256\"}],\"name\":\"setMajorStakeFine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minSize\",\"type\":\"uint256\"}],\"name\":\"setMinEthSnapshotSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minSize\",\"type\":\"uint256\"}],\"name\":\"setMinMadSnapshotSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumStake\",\"type\":\"uint256\"}],\"name\":\"setMinimumStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minorStakeFine\",\"type\":\"uint256\"}],\"name\":\"setMinorStakeFine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardAmount\",\"type\":\"uint256\"}],\"name\":\"setRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardBonus\",\"type\":\"uint256\"}],\"name\":\"setRewardBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minSize\",\"type\":\"uint256\"}],\"name\":\"setSnapshotDesperationDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minSize\",\"type\":\"uint256\"}],\"name\":\"setSnapshotDesperationFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"max\",\"type\":\"uint8\"}],\"name\":\"setValidatorMaxCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_signatureGroup\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_bclaims\",\"type\":\"bytes\"}],\"name\":\"snapshot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"snapshotDesperationDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"snapshotDesperationFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"unlockRewardFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unlockStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unlockStakeFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorMaxCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// ValidatorsABI is the input ABI used to generate the binding from.
// Deprecated: Use ValidatorsMetaData.ABI instead.
var ValidatorsABI = ValidatorsMetaData.ABI

// Validators is an auto generated Go binding around an Ethereum contract.
type Validators struct {
	ValidatorsCaller     // Read-only binding to the contract
	ValidatorsTransactor // Write-only binding to the contract
	ValidatorsFilterer   // Log filterer for contract events
}

// ValidatorsCaller is an auto generated read-only Go binding around an Ethereum contract.
type ValidatorsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ValidatorsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ValidatorsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ValidatorsSession struct {
	Contract     *Validators       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ValidatorsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ValidatorsCallerSession struct {
	Contract *ValidatorsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// ValidatorsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ValidatorsTransactorSession struct {
	Contract     *ValidatorsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// ValidatorsRaw is an auto generated low-level Go binding around an Ethereum contract.
type ValidatorsRaw struct {
	Contract *Validators // Generic contract binding to access the raw methods on
}

// ValidatorsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ValidatorsCallerRaw struct {
	Contract *ValidatorsCaller // Generic read-only contract binding to access the raw methods on
}

// ValidatorsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ValidatorsTransactorRaw struct {
	Contract *ValidatorsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewValidators creates a new instance of Validators, bound to a specific deployed contract.
func NewValidators(address common.Address, backend bind.ContractBackend) (*Validators, error) {
	contract, err := bindValidators(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Validators{ValidatorsCaller: ValidatorsCaller{contract: contract}, ValidatorsTransactor: ValidatorsTransactor{contract: contract}, ValidatorsFilterer: ValidatorsFilterer{contract: contract}}, nil
}

// NewValidatorsCaller creates a new read-only instance of Validators, bound to a specific deployed contract.
func NewValidatorsCaller(address common.Address, caller bind.ContractCaller) (*ValidatorsCaller, error) {
	contract, err := bindValidators(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorsCaller{contract: contract}, nil
}

// NewValidatorsTransactor creates a new write-only instance of Validators, bound to a specific deployed contract.
func NewValidatorsTransactor(address common.Address, transactor bind.ContractTransactor) (*ValidatorsTransactor, error) {
	contract, err := bindValidators(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorsTransactor{contract: contract}, nil
}

// NewValidatorsFilterer creates a new log filterer instance of Validators, bound to a specific deployed contract.
func NewValidatorsFilterer(address common.Address, filterer bind.ContractFilterer) (*ValidatorsFilterer, error) {
	contract, err := bindValidators(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ValidatorsFilterer{contract: contract}, nil
}

// bindValidators binds a generic wrapper to an already deployed contract.
func bindValidators(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ValidatorsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Validators *ValidatorsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Validators.Contract.ValidatorsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Validators *ValidatorsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Validators.Contract.ValidatorsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Validators *ValidatorsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Validators.Contract.ValidatorsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Validators *ValidatorsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Validators.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Validators *ValidatorsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Validators.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Validators *ValidatorsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Validators.Contract.contract.Transact(opts, method, params...)
}

// BalanceReward is a free data retrieval call binding the contract method 0x9fb69b43.
//
// Solidity: function balanceReward() view returns(uint256)
func (_Validators *ValidatorsCaller) BalanceReward(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "balanceReward")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceReward is a free data retrieval call binding the contract method 0x9fb69b43.
//
// Solidity: function balanceReward() view returns(uint256)
func (_Validators *ValidatorsSession) BalanceReward() (*big.Int, error) {
	return _Validators.Contract.BalanceReward(&_Validators.CallOpts)
}

// BalanceReward is a free data retrieval call binding the contract method 0x9fb69b43.
//
// Solidity: function balanceReward() view returns(uint256)
func (_Validators *ValidatorsCallerSession) BalanceReward() (*big.Int, error) {
	return _Validators.Contract.BalanceReward(&_Validators.CallOpts)
}

// BalanceRewardFor is a free data retrieval call binding the contract method 0x9be5d83e.
//
// Solidity: function balanceRewardFor(address who) view returns(uint256)
func (_Validators *ValidatorsCaller) BalanceRewardFor(opts *bind.CallOpts, who common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "balanceRewardFor", who)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceRewardFor is a free data retrieval call binding the contract method 0x9be5d83e.
//
// Solidity: function balanceRewardFor(address who) view returns(uint256)
func (_Validators *ValidatorsSession) BalanceRewardFor(who common.Address) (*big.Int, error) {
	return _Validators.Contract.BalanceRewardFor(&_Validators.CallOpts, who)
}

// BalanceRewardFor is a free data retrieval call binding the contract method 0x9be5d83e.
//
// Solidity: function balanceRewardFor(address who) view returns(uint256)
func (_Validators *ValidatorsCallerSession) BalanceRewardFor(who common.Address) (*big.Int, error) {
	return _Validators.Contract.BalanceRewardFor(&_Validators.CallOpts, who)
}

// BalanceStake is a free data retrieval call binding the contract method 0x8aa2799c.
//
// Solidity: function balanceStake() view returns(uint256)
func (_Validators *ValidatorsCaller) BalanceStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "balanceStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceStake is a free data retrieval call binding the contract method 0x8aa2799c.
//
// Solidity: function balanceStake() view returns(uint256)
func (_Validators *ValidatorsSession) BalanceStake() (*big.Int, error) {
	return _Validators.Contract.BalanceStake(&_Validators.CallOpts)
}

// BalanceStake is a free data retrieval call binding the contract method 0x8aa2799c.
//
// Solidity: function balanceStake() view returns(uint256)
func (_Validators *ValidatorsCallerSession) BalanceStake() (*big.Int, error) {
	return _Validators.Contract.BalanceStake(&_Validators.CallOpts)
}

// BalanceStakeFor is a free data retrieval call binding the contract method 0x35ba4daf.
//
// Solidity: function balanceStakeFor(address who) view returns(uint256)
func (_Validators *ValidatorsCaller) BalanceStakeFor(opts *bind.CallOpts, who common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "balanceStakeFor", who)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceStakeFor is a free data retrieval call binding the contract method 0x35ba4daf.
//
// Solidity: function balanceStakeFor(address who) view returns(uint256)
func (_Validators *ValidatorsSession) BalanceStakeFor(who common.Address) (*big.Int, error) {
	return _Validators.Contract.BalanceStakeFor(&_Validators.CallOpts, who)
}

// BalanceStakeFor is a free data retrieval call binding the contract method 0x35ba4daf.
//
// Solidity: function balanceStakeFor(address who) view returns(uint256)
func (_Validators *ValidatorsCallerSession) BalanceStakeFor(who common.Address) (*big.Int, error) {
	return _Validators.Contract.BalanceStakeFor(&_Validators.CallOpts, who)
}

// BalanceUnlocked is a free data retrieval call binding the contract method 0x5b6a0d1e.
//
// Solidity: function balanceUnlocked() view returns(uint256)
func (_Validators *ValidatorsCaller) BalanceUnlocked(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "balanceUnlocked")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceUnlocked is a free data retrieval call binding the contract method 0x5b6a0d1e.
//
// Solidity: function balanceUnlocked() view returns(uint256)
func (_Validators *ValidatorsSession) BalanceUnlocked() (*big.Int, error) {
	return _Validators.Contract.BalanceUnlocked(&_Validators.CallOpts)
}

// BalanceUnlocked is a free data retrieval call binding the contract method 0x5b6a0d1e.
//
// Solidity: function balanceUnlocked() view returns(uint256)
func (_Validators *ValidatorsCallerSession) BalanceUnlocked() (*big.Int, error) {
	return _Validators.Contract.BalanceUnlocked(&_Validators.CallOpts)
}

// BalanceUnlockedFor is a free data retrieval call binding the contract method 0x2e713306.
//
// Solidity: function balanceUnlockedFor(address who) view returns(uint256)
func (_Validators *ValidatorsCaller) BalanceUnlockedFor(opts *bind.CallOpts, who common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "balanceUnlockedFor", who)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceUnlockedFor is a free data retrieval call binding the contract method 0x2e713306.
//
// Solidity: function balanceUnlockedFor(address who) view returns(uint256)
func (_Validators *ValidatorsSession) BalanceUnlockedFor(who common.Address) (*big.Int, error) {
	return _Validators.Contract.BalanceUnlockedFor(&_Validators.CallOpts, who)
}

// BalanceUnlockedFor is a free data retrieval call binding the contract method 0x2e713306.
//
// Solidity: function balanceUnlockedFor(address who) view returns(uint256)
func (_Validators *ValidatorsCallerSession) BalanceUnlockedFor(who common.Address) (*big.Int, error) {
	return _Validators.Contract.BalanceUnlockedFor(&_Validators.CallOpts, who)
}

// BalanceUnlockedReward is a free data retrieval call binding the contract method 0xc328b464.
//
// Solidity: function balanceUnlockedReward() view returns(uint256)
func (_Validators *ValidatorsCaller) BalanceUnlockedReward(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "balanceUnlockedReward")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceUnlockedReward is a free data retrieval call binding the contract method 0xc328b464.
//
// Solidity: function balanceUnlockedReward() view returns(uint256)
func (_Validators *ValidatorsSession) BalanceUnlockedReward() (*big.Int, error) {
	return _Validators.Contract.BalanceUnlockedReward(&_Validators.CallOpts)
}

// BalanceUnlockedReward is a free data retrieval call binding the contract method 0xc328b464.
//
// Solidity: function balanceUnlockedReward() view returns(uint256)
func (_Validators *ValidatorsCallerSession) BalanceUnlockedReward() (*big.Int, error) {
	return _Validators.Contract.BalanceUnlockedReward(&_Validators.CallOpts)
}

// BalanceUnlockedRewardFor is a free data retrieval call binding the contract method 0x515c31a1.
//
// Solidity: function balanceUnlockedRewardFor(address who) view returns(uint256)
func (_Validators *ValidatorsCaller) BalanceUnlockedRewardFor(opts *bind.CallOpts, who common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "balanceUnlockedRewardFor", who)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceUnlockedRewardFor is a free data retrieval call binding the contract method 0x515c31a1.
//
// Solidity: function balanceUnlockedRewardFor(address who) view returns(uint256)
func (_Validators *ValidatorsSession) BalanceUnlockedRewardFor(who common.Address) (*big.Int, error) {
	return _Validators.Contract.BalanceUnlockedRewardFor(&_Validators.CallOpts, who)
}

// BalanceUnlockedRewardFor is a free data retrieval call binding the contract method 0x515c31a1.
//
// Solidity: function balanceUnlockedRewardFor(address who) view returns(uint256)
func (_Validators *ValidatorsCallerSession) BalanceUnlockedRewardFor(who common.Address) (*big.Int, error) {
	return _Validators.Contract.BalanceUnlockedRewardFor(&_Validators.CallOpts, who)
}

// Epoch is a free data retrieval call binding the contract method 0x900cf0cf.
//
// Solidity: function epoch() view returns(uint256)
func (_Validators *ValidatorsCaller) Epoch(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "epoch")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Epoch is a free data retrieval call binding the contract method 0x900cf0cf.
//
// Solidity: function epoch() view returns(uint256)
func (_Validators *ValidatorsSession) Epoch() (*big.Int, error) {
	return _Validators.Contract.Epoch(&_Validators.CallOpts)
}

// Epoch is a free data retrieval call binding the contract method 0x900cf0cf.
//
// Solidity: function epoch() view returns(uint256)
func (_Validators *ValidatorsCallerSession) Epoch() (*big.Int, error) {
	return _Validators.Contract.Epoch(&_Validators.CallOpts)
}

// ExtractUint256 is a free data retrieval call binding the contract method 0x1c8c8ba4.
//
// Solidity: function extractUint256(bytes src, uint256 offset) pure returns(uint256 val)
func (_Validators *ValidatorsCaller) ExtractUint256(opts *bind.CallOpts, src []byte, offset *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "extractUint256", src, offset)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ExtractUint256 is a free data retrieval call binding the contract method 0x1c8c8ba4.
//
// Solidity: function extractUint256(bytes src, uint256 offset) pure returns(uint256 val)
func (_Validators *ValidatorsSession) ExtractUint256(src []byte, offset *big.Int) (*big.Int, error) {
	return _Validators.Contract.ExtractUint256(&_Validators.CallOpts, src, offset)
}

// ExtractUint256 is a free data retrieval call binding the contract method 0x1c8c8ba4.
//
// Solidity: function extractUint256(bytes src, uint256 offset) pure returns(uint256 val)
func (_Validators *ValidatorsCallerSession) ExtractUint256(src []byte, offset *big.Int) (*big.Int, error) {
	return _Validators.Contract.ExtractUint256(&_Validators.CallOpts, src, offset)
}

// ExtractUint32 is a free data retrieval call binding the contract method 0xc1312f4d.
//
// Solidity: function extractUint32(bytes src, uint256 idx) pure returns(uint32 val)
func (_Validators *ValidatorsCaller) ExtractUint32(opts *bind.CallOpts, src []byte, idx *big.Int) (uint32, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "extractUint32", src, idx)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// ExtractUint32 is a free data retrieval call binding the contract method 0xc1312f4d.
//
// Solidity: function extractUint32(bytes src, uint256 idx) pure returns(uint32 val)
func (_Validators *ValidatorsSession) ExtractUint32(src []byte, idx *big.Int) (uint32, error) {
	return _Validators.Contract.ExtractUint32(&_Validators.CallOpts, src, idx)
}

// ExtractUint32 is a free data retrieval call binding the contract method 0xc1312f4d.
//
// Solidity: function extractUint32(bytes src, uint256 idx) pure returns(uint32 val)
func (_Validators *ValidatorsCallerSession) ExtractUint32(src []byte, idx *big.Int) (uint32, error) {
	return _Validators.Contract.ExtractUint32(&_Validators.CallOpts, src, idx)
}

// GetChainId is a free data retrieval call binding the contract method 0x3408e470.
//
// Solidity: function getChainId() view returns(uint32)
func (_Validators *ValidatorsCaller) GetChainId(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "getChainId")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// GetChainId is a free data retrieval call binding the contract method 0x3408e470.
//
// Solidity: function getChainId() view returns(uint32)
func (_Validators *ValidatorsSession) GetChainId() (uint32, error) {
	return _Validators.Contract.GetChainId(&_Validators.CallOpts)
}

// GetChainId is a free data retrieval call binding the contract method 0x3408e470.
//
// Solidity: function getChainId() view returns(uint32)
func (_Validators *ValidatorsCallerSession) GetChainId() (uint32, error) {
	return _Validators.Contract.GetChainId(&_Validators.CallOpts)
}

// GetChainIdFromSnapshot is a free data retrieval call binding the contract method 0x19f74669.
//
// Solidity: function getChainIdFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_Validators *ValidatorsCaller) GetChainIdFromSnapshot(opts *bind.CallOpts, snapshotNumber *big.Int) (uint32, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "getChainIdFromSnapshot", snapshotNumber)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// GetChainIdFromSnapshot is a free data retrieval call binding the contract method 0x19f74669.
//
// Solidity: function getChainIdFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_Validators *ValidatorsSession) GetChainIdFromSnapshot(snapshotNumber *big.Int) (uint32, error) {
	return _Validators.Contract.GetChainIdFromSnapshot(&_Validators.CallOpts, snapshotNumber)
}

// GetChainIdFromSnapshot is a free data retrieval call binding the contract method 0x19f74669.
//
// Solidity: function getChainIdFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_Validators *ValidatorsCallerSession) GetChainIdFromSnapshot(snapshotNumber *big.Int) (uint32, error) {
	return _Validators.Contract.GetChainIdFromSnapshot(&_Validators.CallOpts, snapshotNumber)
}

// GetHeightFromSnapshot is a free data retrieval call binding the contract method 0xe380b228.
//
// Solidity: function getHeightFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_Validators *ValidatorsCaller) GetHeightFromSnapshot(opts *bind.CallOpts, snapshotNumber *big.Int) (uint32, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "getHeightFromSnapshot", snapshotNumber)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// GetHeightFromSnapshot is a free data retrieval call binding the contract method 0xe380b228.
//
// Solidity: function getHeightFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_Validators *ValidatorsSession) GetHeightFromSnapshot(snapshotNumber *big.Int) (uint32, error) {
	return _Validators.Contract.GetHeightFromSnapshot(&_Validators.CallOpts, snapshotNumber)
}

// GetHeightFromSnapshot is a free data retrieval call binding the contract method 0xe380b228.
//
// Solidity: function getHeightFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_Validators *ValidatorsCallerSession) GetHeightFromSnapshot(snapshotNumber *big.Int) (uint32, error) {
	return _Validators.Contract.GetHeightFromSnapshot(&_Validators.CallOpts, snapshotNumber)
}

// GetMadHeightFromSnapshot is a free data retrieval call binding the contract method 0x4f4ea614.
//
// Solidity: function getMadHeightFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_Validators *ValidatorsCaller) GetMadHeightFromSnapshot(opts *bind.CallOpts, snapshotNumber *big.Int) (uint32, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "getMadHeightFromSnapshot", snapshotNumber)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// GetMadHeightFromSnapshot is a free data retrieval call binding the contract method 0x4f4ea614.
//
// Solidity: function getMadHeightFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_Validators *ValidatorsSession) GetMadHeightFromSnapshot(snapshotNumber *big.Int) (uint32, error) {
	return _Validators.Contract.GetMadHeightFromSnapshot(&_Validators.CallOpts, snapshotNumber)
}

// GetMadHeightFromSnapshot is a free data retrieval call binding the contract method 0x4f4ea614.
//
// Solidity: function getMadHeightFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_Validators *ValidatorsCallerSession) GetMadHeightFromSnapshot(snapshotNumber *big.Int) (uint32, error) {
	return _Validators.Contract.GetMadHeightFromSnapshot(&_Validators.CallOpts, snapshotNumber)
}

// GetRawBlockClaimsSnapshot is a free data retrieval call binding the contract method 0x6372fe51.
//
// Solidity: function getRawBlockClaimsSnapshot(uint256 snapshotNumber) view returns(bytes)
func (_Validators *ValidatorsCaller) GetRawBlockClaimsSnapshot(opts *bind.CallOpts, snapshotNumber *big.Int) ([]byte, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "getRawBlockClaimsSnapshot", snapshotNumber)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// GetRawBlockClaimsSnapshot is a free data retrieval call binding the contract method 0x6372fe51.
//
// Solidity: function getRawBlockClaimsSnapshot(uint256 snapshotNumber) view returns(bytes)
func (_Validators *ValidatorsSession) GetRawBlockClaimsSnapshot(snapshotNumber *big.Int) ([]byte, error) {
	return _Validators.Contract.GetRawBlockClaimsSnapshot(&_Validators.CallOpts, snapshotNumber)
}

// GetRawBlockClaimsSnapshot is a free data retrieval call binding the contract method 0x6372fe51.
//
// Solidity: function getRawBlockClaimsSnapshot(uint256 snapshotNumber) view returns(bytes)
func (_Validators *ValidatorsCallerSession) GetRawBlockClaimsSnapshot(snapshotNumber *big.Int) ([]byte, error) {
	return _Validators.Contract.GetRawBlockClaimsSnapshot(&_Validators.CallOpts, snapshotNumber)
}

// GetRawSignatureSnapshot is a free data retrieval call binding the contract method 0x35b6c632.
//
// Solidity: function getRawSignatureSnapshot(uint256 snapshotNumber) view returns(bytes)
func (_Validators *ValidatorsCaller) GetRawSignatureSnapshot(opts *bind.CallOpts, snapshotNumber *big.Int) ([]byte, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "getRawSignatureSnapshot", snapshotNumber)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// GetRawSignatureSnapshot is a free data retrieval call binding the contract method 0x35b6c632.
//
// Solidity: function getRawSignatureSnapshot(uint256 snapshotNumber) view returns(bytes)
func (_Validators *ValidatorsSession) GetRawSignatureSnapshot(snapshotNumber *big.Int) ([]byte, error) {
	return _Validators.Contract.GetRawSignatureSnapshot(&_Validators.CallOpts, snapshotNumber)
}

// GetRawSignatureSnapshot is a free data retrieval call binding the contract method 0x35b6c632.
//
// Solidity: function getRawSignatureSnapshot(uint256 snapshotNumber) view returns(bytes)
func (_Validators *ValidatorsCallerSession) GetRawSignatureSnapshot(snapshotNumber *big.Int) ([]byte, error) {
	return _Validators.Contract.GetRawSignatureSnapshot(&_Validators.CallOpts, snapshotNumber)
}

// GetValidatorPublicKey is a free data retrieval call binding the contract method 0x4e6f4a22.
//
// Solidity: function getValidatorPublicKey(address _validator) view returns(uint256[2])
func (_Validators *ValidatorsCaller) GetValidatorPublicKey(opts *bind.CallOpts, _validator common.Address) ([2]*big.Int, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "getValidatorPublicKey", _validator)

	if err != nil {
		return *new([2]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([2]*big.Int)).(*[2]*big.Int)

	return out0, err

}

// GetValidatorPublicKey is a free data retrieval call binding the contract method 0x4e6f4a22.
//
// Solidity: function getValidatorPublicKey(address _validator) view returns(uint256[2])
func (_Validators *ValidatorsSession) GetValidatorPublicKey(_validator common.Address) ([2]*big.Int, error) {
	return _Validators.Contract.GetValidatorPublicKey(&_Validators.CallOpts, _validator)
}

// GetValidatorPublicKey is a free data retrieval call binding the contract method 0x4e6f4a22.
//
// Solidity: function getValidatorPublicKey(address _validator) view returns(uint256[2])
func (_Validators *ValidatorsCallerSession) GetValidatorPublicKey(_validator common.Address) ([2]*big.Int, error) {
	return _Validators.Contract.GetValidatorPublicKey(&_Validators.CallOpts, _validator)
}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() view returns(address[])
func (_Validators *ValidatorsCaller) GetValidators(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "getValidators")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() view returns(address[])
func (_Validators *ValidatorsSession) GetValidators() ([]common.Address, error) {
	return _Validators.Contract.GetValidators(&_Validators.CallOpts)
}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() view returns(address[])
func (_Validators *ValidatorsCallerSession) GetValidators() ([]common.Address, error) {
	return _Validators.Contract.GetValidators(&_Validators.CallOpts)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address validator) view returns(bool)
func (_Validators *ValidatorsCaller) IsValidator(opts *bind.CallOpts, validator common.Address) (bool, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "isValidator", validator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address validator) view returns(bool)
func (_Validators *ValidatorsSession) IsValidator(validator common.Address) (bool, error) {
	return _Validators.Contract.IsValidator(&_Validators.CallOpts, validator)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address validator) view returns(bool)
func (_Validators *ValidatorsCallerSession) IsValidator(validator common.Address) (bool, error) {
	return _Validators.Contract.IsValidator(&_Validators.CallOpts, validator)
}

// MajorStakeFine is a free data retrieval call binding the contract method 0xad43d845.
//
// Solidity: function majorStakeFine() view returns(uint256)
func (_Validators *ValidatorsCaller) MajorStakeFine(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "majorStakeFine")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MajorStakeFine is a free data retrieval call binding the contract method 0xad43d845.
//
// Solidity: function majorStakeFine() view returns(uint256)
func (_Validators *ValidatorsSession) MajorStakeFine() (*big.Int, error) {
	return _Validators.Contract.MajorStakeFine(&_Validators.CallOpts)
}

// MajorStakeFine is a free data retrieval call binding the contract method 0xad43d845.
//
// Solidity: function majorStakeFine() view returns(uint256)
func (_Validators *ValidatorsCallerSession) MajorStakeFine() (*big.Int, error) {
	return _Validators.Contract.MajorStakeFine(&_Validators.CallOpts)
}

// MinEthSnapshotSize is a free data retrieval call binding the contract method 0xe4b82105.
//
// Solidity: function minEthSnapshotSize() view returns(uint256)
func (_Validators *ValidatorsCaller) MinEthSnapshotSize(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "minEthSnapshotSize")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinEthSnapshotSize is a free data retrieval call binding the contract method 0xe4b82105.
//
// Solidity: function minEthSnapshotSize() view returns(uint256)
func (_Validators *ValidatorsSession) MinEthSnapshotSize() (*big.Int, error) {
	return _Validators.Contract.MinEthSnapshotSize(&_Validators.CallOpts)
}

// MinEthSnapshotSize is a free data retrieval call binding the contract method 0xe4b82105.
//
// Solidity: function minEthSnapshotSize() view returns(uint256)
func (_Validators *ValidatorsCallerSession) MinEthSnapshotSize() (*big.Int, error) {
	return _Validators.Contract.MinEthSnapshotSize(&_Validators.CallOpts)
}

// MinMadSnapshotSize is a free data retrieval call binding the contract method 0xc17cb9ee.
//
// Solidity: function minMadSnapshotSize() view returns(uint256)
func (_Validators *ValidatorsCaller) MinMadSnapshotSize(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "minMadSnapshotSize")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinMadSnapshotSize is a free data retrieval call binding the contract method 0xc17cb9ee.
//
// Solidity: function minMadSnapshotSize() view returns(uint256)
func (_Validators *ValidatorsSession) MinMadSnapshotSize() (*big.Int, error) {
	return _Validators.Contract.MinMadSnapshotSize(&_Validators.CallOpts)
}

// MinMadSnapshotSize is a free data retrieval call binding the contract method 0xc17cb9ee.
//
// Solidity: function minMadSnapshotSize() view returns(uint256)
func (_Validators *ValidatorsCallerSession) MinMadSnapshotSize() (*big.Int, error) {
	return _Validators.Contract.MinMadSnapshotSize(&_Validators.CallOpts)
}

// MinimumStake is a free data retrieval call binding the contract method 0xec5ffac2.
//
// Solidity: function minimumStake() view returns(uint256)
func (_Validators *ValidatorsCaller) MinimumStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "minimumStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinimumStake is a free data retrieval call binding the contract method 0xec5ffac2.
//
// Solidity: function minimumStake() view returns(uint256)
func (_Validators *ValidatorsSession) MinimumStake() (*big.Int, error) {
	return _Validators.Contract.MinimumStake(&_Validators.CallOpts)
}

// MinimumStake is a free data retrieval call binding the contract method 0xec5ffac2.
//
// Solidity: function minimumStake() view returns(uint256)
func (_Validators *ValidatorsCallerSession) MinimumStake() (*big.Int, error) {
	return _Validators.Contract.MinimumStake(&_Validators.CallOpts)
}

// MinorStakeFine is a free data retrieval call binding the contract method 0x6d059126.
//
// Solidity: function minorStakeFine() view returns(uint256)
func (_Validators *ValidatorsCaller) MinorStakeFine(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "minorStakeFine")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinorStakeFine is a free data retrieval call binding the contract method 0x6d059126.
//
// Solidity: function minorStakeFine() view returns(uint256)
func (_Validators *ValidatorsSession) MinorStakeFine() (*big.Int, error) {
	return _Validators.Contract.MinorStakeFine(&_Validators.CallOpts)
}

// MinorStakeFine is a free data retrieval call binding the contract method 0x6d059126.
//
// Solidity: function minorStakeFine() view returns(uint256)
func (_Validators *ValidatorsCallerSession) MinorStakeFine() (*big.Int, error) {
	return _Validators.Contract.MinorStakeFine(&_Validators.CallOpts)
}

// ParseSignatureGroup is a free data retrieval call binding the contract method 0x9be2f2df.
//
// Solidity: function parseSignatureGroup(bytes _signatureGroup) pure returns(uint256[4] publicKey, uint256[2] signature)
func (_Validators *ValidatorsCaller) ParseSignatureGroup(opts *bind.CallOpts, _signatureGroup []byte) (struct {
	PublicKey [4]*big.Int
	Signature [2]*big.Int
}, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "parseSignatureGroup", _signatureGroup)

	outstruct := new(struct {
		PublicKey [4]*big.Int
		Signature [2]*big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.PublicKey = *abi.ConvertType(out[0], new([4]*big.Int)).(*[4]*big.Int)
	outstruct.Signature = *abi.ConvertType(out[1], new([2]*big.Int)).(*[2]*big.Int)

	return *outstruct, err

}

// ParseSignatureGroup is a free data retrieval call binding the contract method 0x9be2f2df.
//
// Solidity: function parseSignatureGroup(bytes _signatureGroup) pure returns(uint256[4] publicKey, uint256[2] signature)
func (_Validators *ValidatorsSession) ParseSignatureGroup(_signatureGroup []byte) (struct {
	PublicKey [4]*big.Int
	Signature [2]*big.Int
}, error) {
	return _Validators.Contract.ParseSignatureGroup(&_Validators.CallOpts, _signatureGroup)
}

// ParseSignatureGroup is a free data retrieval call binding the contract method 0x9be2f2df.
//
// Solidity: function parseSignatureGroup(bytes _signatureGroup) pure returns(uint256[4] publicKey, uint256[2] signature)
func (_Validators *ValidatorsCallerSession) ParseSignatureGroup(_signatureGroup []byte) (struct {
	PublicKey [4]*big.Int
	Signature [2]*big.Int
}, error) {
	return _Validators.Contract.ParseSignatureGroup(&_Validators.CallOpts, _signatureGroup)
}

// Reverse is a free data retrieval call binding the contract method 0xec11c823.
//
// Solidity: function reverse(bytes orig) pure returns(bytes reversed)
func (_Validators *ValidatorsCaller) Reverse(opts *bind.CallOpts, orig []byte) ([]byte, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "reverse", orig)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// Reverse is a free data retrieval call binding the contract method 0xec11c823.
//
// Solidity: function reverse(bytes orig) pure returns(bytes reversed)
func (_Validators *ValidatorsSession) Reverse(orig []byte) ([]byte, error) {
	return _Validators.Contract.Reverse(&_Validators.CallOpts, orig)
}

// Reverse is a free data retrieval call binding the contract method 0xec11c823.
//
// Solidity: function reverse(bytes orig) pure returns(bytes reversed)
func (_Validators *ValidatorsCallerSession) Reverse(orig []byte) ([]byte, error) {
	return _Validators.Contract.Reverse(&_Validators.CallOpts, orig)
}

// RewardAmount is a free data retrieval call binding the contract method 0xf7b2a7be.
//
// Solidity: function rewardAmount() view returns(uint256)
func (_Validators *ValidatorsCaller) RewardAmount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "rewardAmount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RewardAmount is a free data retrieval call binding the contract method 0xf7b2a7be.
//
// Solidity: function rewardAmount() view returns(uint256)
func (_Validators *ValidatorsSession) RewardAmount() (*big.Int, error) {
	return _Validators.Contract.RewardAmount(&_Validators.CallOpts)
}

// RewardAmount is a free data retrieval call binding the contract method 0xf7b2a7be.
//
// Solidity: function rewardAmount() view returns(uint256)
func (_Validators *ValidatorsCallerSession) RewardAmount() (*big.Int, error) {
	return _Validators.Contract.RewardAmount(&_Validators.CallOpts)
}

// RewardBonus is a free data retrieval call binding the contract method 0xfdf553cf.
//
// Solidity: function rewardBonus() view returns(uint256)
func (_Validators *ValidatorsCaller) RewardBonus(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "rewardBonus")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RewardBonus is a free data retrieval call binding the contract method 0xfdf553cf.
//
// Solidity: function rewardBonus() view returns(uint256)
func (_Validators *ValidatorsSession) RewardBonus() (*big.Int, error) {
	return _Validators.Contract.RewardBonus(&_Validators.CallOpts)
}

// RewardBonus is a free data retrieval call binding the contract method 0xfdf553cf.
//
// Solidity: function rewardBonus() view returns(uint256)
func (_Validators *ValidatorsCallerSession) RewardBonus() (*big.Int, error) {
	return _Validators.Contract.RewardBonus(&_Validators.CallOpts)
}

// SnapshotDesperationDelay is a free data retrieval call binding the contract method 0x6b797156.
//
// Solidity: function snapshotDesperationDelay() view returns(uint256)
func (_Validators *ValidatorsCaller) SnapshotDesperationDelay(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "snapshotDesperationDelay")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SnapshotDesperationDelay is a free data retrieval call binding the contract method 0x6b797156.
//
// Solidity: function snapshotDesperationDelay() view returns(uint256)
func (_Validators *ValidatorsSession) SnapshotDesperationDelay() (*big.Int, error) {
	return _Validators.Contract.SnapshotDesperationDelay(&_Validators.CallOpts)
}

// SnapshotDesperationDelay is a free data retrieval call binding the contract method 0x6b797156.
//
// Solidity: function snapshotDesperationDelay() view returns(uint256)
func (_Validators *ValidatorsCallerSession) SnapshotDesperationDelay() (*big.Int, error) {
	return _Validators.Contract.SnapshotDesperationDelay(&_Validators.CallOpts)
}

// SnapshotDesperationFactor is a free data retrieval call binding the contract method 0xfcf96652.
//
// Solidity: function snapshotDesperationFactor() view returns(uint256)
func (_Validators *ValidatorsCaller) SnapshotDesperationFactor(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "snapshotDesperationFactor")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SnapshotDesperationFactor is a free data retrieval call binding the contract method 0xfcf96652.
//
// Solidity: function snapshotDesperationFactor() view returns(uint256)
func (_Validators *ValidatorsSession) SnapshotDesperationFactor() (*big.Int, error) {
	return _Validators.Contract.SnapshotDesperationFactor(&_Validators.CallOpts)
}

// SnapshotDesperationFactor is a free data retrieval call binding the contract method 0xfcf96652.
//
// Solidity: function snapshotDesperationFactor() view returns(uint256)
func (_Validators *ValidatorsCallerSession) SnapshotDesperationFactor() (*big.Int, error) {
	return _Validators.Contract.SnapshotDesperationFactor(&_Validators.CallOpts)
}

// AddValidator is a paid mutator transaction binding the contract method 0xeb6320c7.
//
// Solidity: function addValidator(address _validator, uint256[2] _madID) returns(uint8)
func (_Validators *ValidatorsTransactor) AddValidator(opts *bind.TransactOpts, _validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "addValidator", _validator, _madID)
}

// AddValidator is a paid mutator transaction binding the contract method 0xeb6320c7.
//
// Solidity: function addValidator(address _validator, uint256[2] _madID) returns(uint8)
func (_Validators *ValidatorsSession) AddValidator(_validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _Validators.Contract.AddValidator(&_Validators.TransactOpts, _validator, _madID)
}

// AddValidator is a paid mutator transaction binding the contract method 0xeb6320c7.
//
// Solidity: function addValidator(address _validator, uint256[2] _madID) returns(uint8)
func (_Validators *ValidatorsTransactorSession) AddValidator(_validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _Validators.Contract.AddValidator(&_Validators.TransactOpts, _validator, _madID)
}

// Burn is a paid mutator transaction binding the contract method 0x89afcb44.
//
// Solidity: function burn(address who) returns()
func (_Validators *ValidatorsTransactor) Burn(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "burn", who)
}

// Burn is a paid mutator transaction binding the contract method 0x89afcb44.
//
// Solidity: function burn(address who) returns()
func (_Validators *ValidatorsSession) Burn(who common.Address) (*types.Transaction, error) {
	return _Validators.Contract.Burn(&_Validators.TransactOpts, who)
}

// Burn is a paid mutator transaction binding the contract method 0x89afcb44.
//
// Solidity: function burn(address who) returns()
func (_Validators *ValidatorsTransactorSession) Burn(who common.Address) (*types.Transaction, error) {
	return _Validators.Contract.Burn(&_Validators.TransactOpts, who)
}

// ConfirmValidators is a paid mutator transaction binding the contract method 0x35c6a163.
//
// Solidity: function confirmValidators() returns(bool)
func (_Validators *ValidatorsTransactor) ConfirmValidators(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "confirmValidators")
}

// ConfirmValidators is a paid mutator transaction binding the contract method 0x35c6a163.
//
// Solidity: function confirmValidators() returns(bool)
func (_Validators *ValidatorsSession) ConfirmValidators() (*types.Transaction, error) {
	return _Validators.Contract.ConfirmValidators(&_Validators.TransactOpts)
}

// ConfirmValidators is a paid mutator transaction binding the contract method 0x35c6a163.
//
// Solidity: function confirmValidators() returns(bool)
func (_Validators *ValidatorsTransactorSession) ConfirmValidators() (*types.Transaction, error) {
	return _Validators.Contract.ConfirmValidators(&_Validators.TransactOpts)
}

// Fine is a paid mutator transaction binding the contract method 0xdb1e4662.
//
// Solidity: function fine(address who, uint256 amount) returns(bool)
func (_Validators *ValidatorsTransactor) Fine(opts *bind.TransactOpts, who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "fine", who, amount)
}

// Fine is a paid mutator transaction binding the contract method 0xdb1e4662.
//
// Solidity: function fine(address who, uint256 amount) returns(bool)
func (_Validators *ValidatorsSession) Fine(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.Fine(&_Validators.TransactOpts, who, amount)
}

// Fine is a paid mutator transaction binding the contract method 0xdb1e4662.
//
// Solidity: function fine(address who, uint256 amount) returns(bool)
func (_Validators *ValidatorsTransactorSession) Fine(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.Fine(&_Validators.TransactOpts, who, amount)
}

// InitializeParticipants is a paid mutator transaction binding the contract method 0xee8420dd.
//
// Solidity: function initializeParticipants(address registry) returns()
func (_Validators *ValidatorsTransactor) InitializeParticipants(opts *bind.TransactOpts, registry common.Address) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "initializeParticipants", registry)
}

// InitializeParticipants is a paid mutator transaction binding the contract method 0xee8420dd.
//
// Solidity: function initializeParticipants(address registry) returns()
func (_Validators *ValidatorsSession) InitializeParticipants(registry common.Address) (*types.Transaction, error) {
	return _Validators.Contract.InitializeParticipants(&_Validators.TransactOpts, registry)
}

// InitializeParticipants is a paid mutator transaction binding the contract method 0xee8420dd.
//
// Solidity: function initializeParticipants(address registry) returns()
func (_Validators *ValidatorsTransactorSession) InitializeParticipants(registry common.Address) (*types.Transaction, error) {
	return _Validators.Contract.InitializeParticipants(&_Validators.TransactOpts, registry)
}

// InitializeSnapshots is a paid mutator transaction binding the contract method 0x20d9a246.
//
// Solidity: function initializeSnapshots(address registry) returns()
func (_Validators *ValidatorsTransactor) InitializeSnapshots(opts *bind.TransactOpts, registry common.Address) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "initializeSnapshots", registry)
}

// InitializeSnapshots is a paid mutator transaction binding the contract method 0x20d9a246.
//
// Solidity: function initializeSnapshots(address registry) returns()
func (_Validators *ValidatorsSession) InitializeSnapshots(registry common.Address) (*types.Transaction, error) {
	return _Validators.Contract.InitializeSnapshots(&_Validators.TransactOpts, registry)
}

// InitializeSnapshots is a paid mutator transaction binding the contract method 0x20d9a246.
//
// Solidity: function initializeSnapshots(address registry) returns()
func (_Validators *ValidatorsTransactorSession) InitializeSnapshots(registry common.Address) (*types.Transaction, error) {
	return _Validators.Contract.InitializeSnapshots(&_Validators.TransactOpts, registry)
}

// InitializeStaking is a paid mutator transaction binding the contract method 0x04ad7a83.
//
// Solidity: function initializeStaking(address registry) returns()
func (_Validators *ValidatorsTransactor) InitializeStaking(opts *bind.TransactOpts, registry common.Address) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "initializeStaking", registry)
}

// InitializeStaking is a paid mutator transaction binding the contract method 0x04ad7a83.
//
// Solidity: function initializeStaking(address registry) returns()
func (_Validators *ValidatorsSession) InitializeStaking(registry common.Address) (*types.Transaction, error) {
	return _Validators.Contract.InitializeStaking(&_Validators.TransactOpts, registry)
}

// InitializeStaking is a paid mutator transaction binding the contract method 0x04ad7a83.
//
// Solidity: function initializeStaking(address registry) returns()
func (_Validators *ValidatorsTransactorSession) InitializeStaking(registry common.Address) (*types.Transaction, error) {
	return _Validators.Contract.InitializeStaking(&_Validators.TransactOpts, registry)
}

// LockRewardFor is a paid mutator transaction binding the contract method 0x0ddb07ad.
//
// Solidity: function lockRewardFor(address who, uint256 amountReward, uint256 unlockEpoch) returns(bool)
func (_Validators *ValidatorsTransactor) LockRewardFor(opts *bind.TransactOpts, who common.Address, amountReward *big.Int, unlockEpoch *big.Int) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "lockRewardFor", who, amountReward, unlockEpoch)
}

// LockRewardFor is a paid mutator transaction binding the contract method 0x0ddb07ad.
//
// Solidity: function lockRewardFor(address who, uint256 amountReward, uint256 unlockEpoch) returns(bool)
func (_Validators *ValidatorsSession) LockRewardFor(who common.Address, amountReward *big.Int, unlockEpoch *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.LockRewardFor(&_Validators.TransactOpts, who, amountReward, unlockEpoch)
}

// LockRewardFor is a paid mutator transaction binding the contract method 0x0ddb07ad.
//
// Solidity: function lockRewardFor(address who, uint256 amountReward, uint256 unlockEpoch) returns(bool)
func (_Validators *ValidatorsTransactorSession) LockRewardFor(who common.Address, amountReward *big.Int, unlockEpoch *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.LockRewardFor(&_Validators.TransactOpts, who, amountReward, unlockEpoch)
}

// LockStake is a paid mutator transaction binding the contract method 0xf50ddb67.
//
// Solidity: function lockStake(uint256 amount) returns(bool)
func (_Validators *ValidatorsTransactor) LockStake(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "lockStake", amount)
}

// LockStake is a paid mutator transaction binding the contract method 0xf50ddb67.
//
// Solidity: function lockStake(uint256 amount) returns(bool)
func (_Validators *ValidatorsSession) LockStake(amount *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.LockStake(&_Validators.TransactOpts, amount)
}

// LockStake is a paid mutator transaction binding the contract method 0xf50ddb67.
//
// Solidity: function lockStake(uint256 amount) returns(bool)
func (_Validators *ValidatorsTransactorSession) LockStake(amount *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.LockStake(&_Validators.TransactOpts, amount)
}

// LockStakeFor is a paid mutator transaction binding the contract method 0x461cbdcf.
//
// Solidity: function lockStakeFor(address who, uint256 amount) returns(bool)
func (_Validators *ValidatorsTransactor) LockStakeFor(opts *bind.TransactOpts, who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "lockStakeFor", who, amount)
}

// LockStakeFor is a paid mutator transaction binding the contract method 0x461cbdcf.
//
// Solidity: function lockStakeFor(address who, uint256 amount) returns(bool)
func (_Validators *ValidatorsSession) LockStakeFor(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.LockStakeFor(&_Validators.TransactOpts, who, amount)
}

// LockStakeFor is a paid mutator transaction binding the contract method 0x461cbdcf.
//
// Solidity: function lockStakeFor(address who, uint256 amount) returns(bool)
func (_Validators *ValidatorsTransactorSession) LockStakeFor(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.LockStakeFor(&_Validators.TransactOpts, who, amount)
}

// MajorFine is a paid mutator transaction binding the contract method 0x57b4f82a.
//
// Solidity: function majorFine(address who) returns()
func (_Validators *ValidatorsTransactor) MajorFine(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "majorFine", who)
}

// MajorFine is a paid mutator transaction binding the contract method 0x57b4f82a.
//
// Solidity: function majorFine(address who) returns()
func (_Validators *ValidatorsSession) MajorFine(who common.Address) (*types.Transaction, error) {
	return _Validators.Contract.MajorFine(&_Validators.TransactOpts, who)
}

// MajorFine is a paid mutator transaction binding the contract method 0x57b4f82a.
//
// Solidity: function majorFine(address who) returns()
func (_Validators *ValidatorsTransactorSession) MajorFine(who common.Address) (*types.Transaction, error) {
	return _Validators.Contract.MajorFine(&_Validators.TransactOpts, who)
}

// MinorFine is a paid mutator transaction binding the contract method 0xd2a2c55c.
//
// Solidity: function minorFine(address who) returns()
func (_Validators *ValidatorsTransactor) MinorFine(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "minorFine", who)
}

// MinorFine is a paid mutator transaction binding the contract method 0xd2a2c55c.
//
// Solidity: function minorFine(address who) returns()
func (_Validators *ValidatorsSession) MinorFine(who common.Address) (*types.Transaction, error) {
	return _Validators.Contract.MinorFine(&_Validators.TransactOpts, who)
}

// MinorFine is a paid mutator transaction binding the contract method 0xd2a2c55c.
//
// Solidity: function minorFine(address who) returns()
func (_Validators *ValidatorsTransactorSession) MinorFine(who common.Address) (*types.Transaction, error) {
	return _Validators.Contract.MinorFine(&_Validators.TransactOpts, who)
}

// RemoveValidator is a paid mutator transaction binding the contract method 0x844469b2.
//
// Solidity: function removeValidator(address _validator, uint256[2] _madID) returns(uint8)
func (_Validators *ValidatorsTransactor) RemoveValidator(opts *bind.TransactOpts, _validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "removeValidator", _validator, _madID)
}

// RemoveValidator is a paid mutator transaction binding the contract method 0x844469b2.
//
// Solidity: function removeValidator(address _validator, uint256[2] _madID) returns(uint8)
func (_Validators *ValidatorsSession) RemoveValidator(_validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _Validators.Contract.RemoveValidator(&_Validators.TransactOpts, _validator, _madID)
}

// RemoveValidator is a paid mutator transaction binding the contract method 0x844469b2.
//
// Solidity: function removeValidator(address _validator, uint256[2] _madID) returns(uint8)
func (_Validators *ValidatorsTransactorSession) RemoveValidator(_validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _Validators.Contract.RemoveValidator(&_Validators.TransactOpts, _validator, _madID)
}

// RequestUnlockStake is a paid mutator transaction binding the contract method 0xaeaf8812.
//
// Solidity: function requestUnlockStake() returns()
func (_Validators *ValidatorsTransactor) RequestUnlockStake(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "requestUnlockStake")
}

// RequestUnlockStake is a paid mutator transaction binding the contract method 0xaeaf8812.
//
// Solidity: function requestUnlockStake() returns()
func (_Validators *ValidatorsSession) RequestUnlockStake() (*types.Transaction, error) {
	return _Validators.Contract.RequestUnlockStake(&_Validators.TransactOpts)
}

// RequestUnlockStake is a paid mutator transaction binding the contract method 0xaeaf8812.
//
// Solidity: function requestUnlockStake() returns()
func (_Validators *ValidatorsTransactorSession) RequestUnlockStake() (*types.Transaction, error) {
	return _Validators.Contract.RequestUnlockStake(&_Validators.TransactOpts)
}

// RequestUnlockStakeFor is a paid mutator transaction binding the contract method 0x4fcf2b72.
//
// Solidity: function requestUnlockStakeFor(address who) returns()
func (_Validators *ValidatorsTransactor) RequestUnlockStakeFor(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "requestUnlockStakeFor", who)
}

// RequestUnlockStakeFor is a paid mutator transaction binding the contract method 0x4fcf2b72.
//
// Solidity: function requestUnlockStakeFor(address who) returns()
func (_Validators *ValidatorsSession) RequestUnlockStakeFor(who common.Address) (*types.Transaction, error) {
	return _Validators.Contract.RequestUnlockStakeFor(&_Validators.TransactOpts, who)
}

// RequestUnlockStakeFor is a paid mutator transaction binding the contract method 0x4fcf2b72.
//
// Solidity: function requestUnlockStakeFor(address who) returns()
func (_Validators *ValidatorsTransactorSession) RequestUnlockStakeFor(who common.Address) (*types.Transaction, error) {
	return _Validators.Contract.RequestUnlockStakeFor(&_Validators.TransactOpts, who)
}

// SetChainId is a paid mutator transaction binding the contract method 0xa179f124.
//
// Solidity: function setChainId(uint32 _chainId) returns()
func (_Validators *ValidatorsTransactor) SetChainId(opts *bind.TransactOpts, _chainId uint32) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "setChainId", _chainId)
}

// SetChainId is a paid mutator transaction binding the contract method 0xa179f124.
//
// Solidity: function setChainId(uint32 _chainId) returns()
func (_Validators *ValidatorsSession) SetChainId(_chainId uint32) (*types.Transaction, error) {
	return _Validators.Contract.SetChainId(&_Validators.TransactOpts, _chainId)
}

// SetChainId is a paid mutator transaction binding the contract method 0xa179f124.
//
// Solidity: function setChainId(uint32 _chainId) returns()
func (_Validators *ValidatorsTransactorSession) SetChainId(_chainId uint32) (*types.Transaction, error) {
	return _Validators.Contract.SetChainId(&_Validators.TransactOpts, _chainId)
}

// SetEpoch is a paid mutator transaction binding the contract method 0x0ceb2cef.
//
// Solidity: function setEpoch(uint256 ns) returns()
func (_Validators *ValidatorsTransactor) SetEpoch(opts *bind.TransactOpts, ns *big.Int) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "setEpoch", ns)
}

// SetEpoch is a paid mutator transaction binding the contract method 0x0ceb2cef.
//
// Solidity: function setEpoch(uint256 ns) returns()
func (_Validators *ValidatorsSession) SetEpoch(ns *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.SetEpoch(&_Validators.TransactOpts, ns)
}

// SetEpoch is a paid mutator transaction binding the contract method 0x0ceb2cef.
//
// Solidity: function setEpoch(uint256 ns) returns()
func (_Validators *ValidatorsTransactorSession) SetEpoch(ns *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.SetEpoch(&_Validators.TransactOpts, ns)
}

// SetEpochDelay is a paid mutator transaction binding the contract method 0xbd695a43.
//
// Solidity: function setEpochDelay(uint256 _epochDelay) returns()
func (_Validators *ValidatorsTransactor) SetEpochDelay(opts *bind.TransactOpts, _epochDelay *big.Int) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "setEpochDelay", _epochDelay)
}

// SetEpochDelay is a paid mutator transaction binding the contract method 0xbd695a43.
//
// Solidity: function setEpochDelay(uint256 _epochDelay) returns()
func (_Validators *ValidatorsSession) SetEpochDelay(_epochDelay *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.SetEpochDelay(&_Validators.TransactOpts, _epochDelay)
}

// SetEpochDelay is a paid mutator transaction binding the contract method 0xbd695a43.
//
// Solidity: function setEpochDelay(uint256 _epochDelay) returns()
func (_Validators *ValidatorsTransactorSession) SetEpochDelay(_epochDelay *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.SetEpochDelay(&_Validators.TransactOpts, _epochDelay)
}

// SetMajorStakeFine is a paid mutator transaction binding the contract method 0x78146c2f.
//
// Solidity: function setMajorStakeFine(uint256 _majorStakeFine) returns()
func (_Validators *ValidatorsTransactor) SetMajorStakeFine(opts *bind.TransactOpts, _majorStakeFine *big.Int) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "setMajorStakeFine", _majorStakeFine)
}

// SetMajorStakeFine is a paid mutator transaction binding the contract method 0x78146c2f.
//
// Solidity: function setMajorStakeFine(uint256 _majorStakeFine) returns()
func (_Validators *ValidatorsSession) SetMajorStakeFine(_majorStakeFine *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.SetMajorStakeFine(&_Validators.TransactOpts, _majorStakeFine)
}

// SetMajorStakeFine is a paid mutator transaction binding the contract method 0x78146c2f.
//
// Solidity: function setMajorStakeFine(uint256 _majorStakeFine) returns()
func (_Validators *ValidatorsTransactorSession) SetMajorStakeFine(_majorStakeFine *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.SetMajorStakeFine(&_Validators.TransactOpts, _majorStakeFine)
}

// SetMinEthSnapshotSize is a paid mutator transaction binding the contract method 0x0d81dce4.
//
// Solidity: function setMinEthSnapshotSize(uint256 _minSize) returns()
func (_Validators *ValidatorsTransactor) SetMinEthSnapshotSize(opts *bind.TransactOpts, _minSize *big.Int) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "setMinEthSnapshotSize", _minSize)
}

// SetMinEthSnapshotSize is a paid mutator transaction binding the contract method 0x0d81dce4.
//
// Solidity: function setMinEthSnapshotSize(uint256 _minSize) returns()
func (_Validators *ValidatorsSession) SetMinEthSnapshotSize(_minSize *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.SetMinEthSnapshotSize(&_Validators.TransactOpts, _minSize)
}

// SetMinEthSnapshotSize is a paid mutator transaction binding the contract method 0x0d81dce4.
//
// Solidity: function setMinEthSnapshotSize(uint256 _minSize) returns()
func (_Validators *ValidatorsTransactorSession) SetMinEthSnapshotSize(_minSize *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.SetMinEthSnapshotSize(&_Validators.TransactOpts, _minSize)
}

// SetMinMadSnapshotSize is a paid mutator transaction binding the contract method 0x99e33e3d.
//
// Solidity: function setMinMadSnapshotSize(uint256 _minSize) returns()
func (_Validators *ValidatorsTransactor) SetMinMadSnapshotSize(opts *bind.TransactOpts, _minSize *big.Int) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "setMinMadSnapshotSize", _minSize)
}

// SetMinMadSnapshotSize is a paid mutator transaction binding the contract method 0x99e33e3d.
//
// Solidity: function setMinMadSnapshotSize(uint256 _minSize) returns()
func (_Validators *ValidatorsSession) SetMinMadSnapshotSize(_minSize *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.SetMinMadSnapshotSize(&_Validators.TransactOpts, _minSize)
}

// SetMinMadSnapshotSize is a paid mutator transaction binding the contract method 0x99e33e3d.
//
// Solidity: function setMinMadSnapshotSize(uint256 _minSize) returns()
func (_Validators *ValidatorsTransactorSession) SetMinMadSnapshotSize(_minSize *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.SetMinMadSnapshotSize(&_Validators.TransactOpts, _minSize)
}

// SetMinimumStake is a paid mutator transaction binding the contract method 0x233e9903.
//
// Solidity: function setMinimumStake(uint256 _minimumStake) returns()
func (_Validators *ValidatorsTransactor) SetMinimumStake(opts *bind.TransactOpts, _minimumStake *big.Int) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "setMinimumStake", _minimumStake)
}

// SetMinimumStake is a paid mutator transaction binding the contract method 0x233e9903.
//
// Solidity: function setMinimumStake(uint256 _minimumStake) returns()
func (_Validators *ValidatorsSession) SetMinimumStake(_minimumStake *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.SetMinimumStake(&_Validators.TransactOpts, _minimumStake)
}

// SetMinimumStake is a paid mutator transaction binding the contract method 0x233e9903.
//
// Solidity: function setMinimumStake(uint256 _minimumStake) returns()
func (_Validators *ValidatorsTransactorSession) SetMinimumStake(_minimumStake *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.SetMinimumStake(&_Validators.TransactOpts, _minimumStake)
}

// SetMinorStakeFine is a paid mutator transaction binding the contract method 0x29693c5c.
//
// Solidity: function setMinorStakeFine(uint256 _minorStakeFine) returns()
func (_Validators *ValidatorsTransactor) SetMinorStakeFine(opts *bind.TransactOpts, _minorStakeFine *big.Int) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "setMinorStakeFine", _minorStakeFine)
}

// SetMinorStakeFine is a paid mutator transaction binding the contract method 0x29693c5c.
//
// Solidity: function setMinorStakeFine(uint256 _minorStakeFine) returns()
func (_Validators *ValidatorsSession) SetMinorStakeFine(_minorStakeFine *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.SetMinorStakeFine(&_Validators.TransactOpts, _minorStakeFine)
}

// SetMinorStakeFine is a paid mutator transaction binding the contract method 0x29693c5c.
//
// Solidity: function setMinorStakeFine(uint256 _minorStakeFine) returns()
func (_Validators *ValidatorsTransactorSession) SetMinorStakeFine(_minorStakeFine *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.SetMinorStakeFine(&_Validators.TransactOpts, _minorStakeFine)
}

// SetRewardAmount is a paid mutator transaction binding the contract method 0xa8a65a78.
//
// Solidity: function setRewardAmount(uint256 _rewardAmount) returns()
func (_Validators *ValidatorsTransactor) SetRewardAmount(opts *bind.TransactOpts, _rewardAmount *big.Int) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "setRewardAmount", _rewardAmount)
}

// SetRewardAmount is a paid mutator transaction binding the contract method 0xa8a65a78.
//
// Solidity: function setRewardAmount(uint256 _rewardAmount) returns()
func (_Validators *ValidatorsSession) SetRewardAmount(_rewardAmount *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.SetRewardAmount(&_Validators.TransactOpts, _rewardAmount)
}

// SetRewardAmount is a paid mutator transaction binding the contract method 0xa8a65a78.
//
// Solidity: function setRewardAmount(uint256 _rewardAmount) returns()
func (_Validators *ValidatorsTransactorSession) SetRewardAmount(_rewardAmount *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.SetRewardAmount(&_Validators.TransactOpts, _rewardAmount)
}

// SetRewardBonus is a paid mutator transaction binding the contract method 0xf95d80fa.
//
// Solidity: function setRewardBonus(uint256 _rewardBonus) returns()
func (_Validators *ValidatorsTransactor) SetRewardBonus(opts *bind.TransactOpts, _rewardBonus *big.Int) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "setRewardBonus", _rewardBonus)
}

// SetRewardBonus is a paid mutator transaction binding the contract method 0xf95d80fa.
//
// Solidity: function setRewardBonus(uint256 _rewardBonus) returns()
func (_Validators *ValidatorsSession) SetRewardBonus(_rewardBonus *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.SetRewardBonus(&_Validators.TransactOpts, _rewardBonus)
}

// SetRewardBonus is a paid mutator transaction binding the contract method 0xf95d80fa.
//
// Solidity: function setRewardBonus(uint256 _rewardBonus) returns()
func (_Validators *ValidatorsTransactorSession) SetRewardBonus(_rewardBonus *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.SetRewardBonus(&_Validators.TransactOpts, _rewardBonus)
}

// SetSnapshotDesperationDelay is a paid mutator transaction binding the contract method 0xde8fa4a5.
//
// Solidity: function setSnapshotDesperationDelay(uint256 _minSize) returns()
func (_Validators *ValidatorsTransactor) SetSnapshotDesperationDelay(opts *bind.TransactOpts, _minSize *big.Int) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "setSnapshotDesperationDelay", _minSize)
}

// SetSnapshotDesperationDelay is a paid mutator transaction binding the contract method 0xde8fa4a5.
//
// Solidity: function setSnapshotDesperationDelay(uint256 _minSize) returns()
func (_Validators *ValidatorsSession) SetSnapshotDesperationDelay(_minSize *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.SetSnapshotDesperationDelay(&_Validators.TransactOpts, _minSize)
}

// SetSnapshotDesperationDelay is a paid mutator transaction binding the contract method 0xde8fa4a5.
//
// Solidity: function setSnapshotDesperationDelay(uint256 _minSize) returns()
func (_Validators *ValidatorsTransactorSession) SetSnapshotDesperationDelay(_minSize *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.SetSnapshotDesperationDelay(&_Validators.TransactOpts, _minSize)
}

// SetSnapshotDesperationFactor is a paid mutator transaction binding the contract method 0xeb157064.
//
// Solidity: function setSnapshotDesperationFactor(uint256 _minSize) returns()
func (_Validators *ValidatorsTransactor) SetSnapshotDesperationFactor(opts *bind.TransactOpts, _minSize *big.Int) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "setSnapshotDesperationFactor", _minSize)
}

// SetSnapshotDesperationFactor is a paid mutator transaction binding the contract method 0xeb157064.
//
// Solidity: function setSnapshotDesperationFactor(uint256 _minSize) returns()
func (_Validators *ValidatorsSession) SetSnapshotDesperationFactor(_minSize *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.SetSnapshotDesperationFactor(&_Validators.TransactOpts, _minSize)
}

// SetSnapshotDesperationFactor is a paid mutator transaction binding the contract method 0xeb157064.
//
// Solidity: function setSnapshotDesperationFactor(uint256 _minSize) returns()
func (_Validators *ValidatorsTransactorSession) SetSnapshotDesperationFactor(_minSize *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.SetSnapshotDesperationFactor(&_Validators.TransactOpts, _minSize)
}

// SetValidatorMaxCount is a paid mutator transaction binding the contract method 0x2cab37f7.
//
// Solidity: function setValidatorMaxCount(uint8 max) returns()
func (_Validators *ValidatorsTransactor) SetValidatorMaxCount(opts *bind.TransactOpts, max uint8) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "setValidatorMaxCount", max)
}

// SetValidatorMaxCount is a paid mutator transaction binding the contract method 0x2cab37f7.
//
// Solidity: function setValidatorMaxCount(uint8 max) returns()
func (_Validators *ValidatorsSession) SetValidatorMaxCount(max uint8) (*types.Transaction, error) {
	return _Validators.Contract.SetValidatorMaxCount(&_Validators.TransactOpts, max)
}

// SetValidatorMaxCount is a paid mutator transaction binding the contract method 0x2cab37f7.
//
// Solidity: function setValidatorMaxCount(uint8 max) returns()
func (_Validators *ValidatorsTransactorSession) SetValidatorMaxCount(max uint8) (*types.Transaction, error) {
	return _Validators.Contract.SetValidatorMaxCount(&_Validators.TransactOpts, max)
}

// Snapshot is a paid mutator transaction binding the contract method 0x08ca1f25.
//
// Solidity: function snapshot(bytes _signatureGroup, bytes _bclaims) returns(bool)
func (_Validators *ValidatorsTransactor) Snapshot(opts *bind.TransactOpts, _signatureGroup []byte, _bclaims []byte) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "snapshot", _signatureGroup, _bclaims)
}

// Snapshot is a paid mutator transaction binding the contract method 0x08ca1f25.
//
// Solidity: function snapshot(bytes _signatureGroup, bytes _bclaims) returns(bool)
func (_Validators *ValidatorsSession) Snapshot(_signatureGroup []byte, _bclaims []byte) (*types.Transaction, error) {
	return _Validators.Contract.Snapshot(&_Validators.TransactOpts, _signatureGroup, _bclaims)
}

// Snapshot is a paid mutator transaction binding the contract method 0x08ca1f25.
//
// Solidity: function snapshot(bytes _signatureGroup, bytes _bclaims) returns(bool)
func (_Validators *ValidatorsTransactorSession) Snapshot(_signatureGroup []byte, _bclaims []byte) (*types.Transaction, error) {
	return _Validators.Contract.Snapshot(&_Validators.TransactOpts, _signatureGroup, _bclaims)
}

// UnlockReward is a paid mutator transaction binding the contract method 0xf1b7f4bf.
//
// Solidity: function unlockReward() returns(bool)
func (_Validators *ValidatorsTransactor) UnlockReward(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "unlockReward")
}

// UnlockReward is a paid mutator transaction binding the contract method 0xf1b7f4bf.
//
// Solidity: function unlockReward() returns(bool)
func (_Validators *ValidatorsSession) UnlockReward() (*types.Transaction, error) {
	return _Validators.Contract.UnlockReward(&_Validators.TransactOpts)
}

// UnlockReward is a paid mutator transaction binding the contract method 0xf1b7f4bf.
//
// Solidity: function unlockReward() returns(bool)
func (_Validators *ValidatorsTransactorSession) UnlockReward() (*types.Transaction, error) {
	return _Validators.Contract.UnlockReward(&_Validators.TransactOpts)
}

// UnlockRewardFor is a paid mutator transaction binding the contract method 0x7f91bd69.
//
// Solidity: function unlockRewardFor(address who) returns(bool)
func (_Validators *ValidatorsTransactor) UnlockRewardFor(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "unlockRewardFor", who)
}

// UnlockRewardFor is a paid mutator transaction binding the contract method 0x7f91bd69.
//
// Solidity: function unlockRewardFor(address who) returns(bool)
func (_Validators *ValidatorsSession) UnlockRewardFor(who common.Address) (*types.Transaction, error) {
	return _Validators.Contract.UnlockRewardFor(&_Validators.TransactOpts, who)
}

// UnlockRewardFor is a paid mutator transaction binding the contract method 0x7f91bd69.
//
// Solidity: function unlockRewardFor(address who) returns(bool)
func (_Validators *ValidatorsTransactorSession) UnlockRewardFor(who common.Address) (*types.Transaction, error) {
	return _Validators.Contract.UnlockRewardFor(&_Validators.TransactOpts, who)
}

// UnlockStake is a paid mutator transaction binding the contract method 0xecd8c06a.
//
// Solidity: function unlockStake(uint256 amount) returns(bool)
func (_Validators *ValidatorsTransactor) UnlockStake(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "unlockStake", amount)
}

// UnlockStake is a paid mutator transaction binding the contract method 0xecd8c06a.
//
// Solidity: function unlockStake(uint256 amount) returns(bool)
func (_Validators *ValidatorsSession) UnlockStake(amount *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.UnlockStake(&_Validators.TransactOpts, amount)
}

// UnlockStake is a paid mutator transaction binding the contract method 0xecd8c06a.
//
// Solidity: function unlockStake(uint256 amount) returns(bool)
func (_Validators *ValidatorsTransactorSession) UnlockStake(amount *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.UnlockStake(&_Validators.TransactOpts, amount)
}

// UnlockStakeFor is a paid mutator transaction binding the contract method 0xe29dda92.
//
// Solidity: function unlockStakeFor(address who, uint256 amount) returns(bool)
func (_Validators *ValidatorsTransactor) UnlockStakeFor(opts *bind.TransactOpts, who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "unlockStakeFor", who, amount)
}

// UnlockStakeFor is a paid mutator transaction binding the contract method 0xe29dda92.
//
// Solidity: function unlockStakeFor(address who, uint256 amount) returns(bool)
func (_Validators *ValidatorsSession) UnlockStakeFor(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.UnlockStakeFor(&_Validators.TransactOpts, who, amount)
}

// UnlockStakeFor is a paid mutator transaction binding the contract method 0xe29dda92.
//
// Solidity: function unlockStakeFor(address who, uint256 amount) returns(bool)
func (_Validators *ValidatorsTransactorSession) UnlockStakeFor(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.UnlockStakeFor(&_Validators.TransactOpts, who, amount)
}

// ValidatorCount is a paid mutator transaction binding the contract method 0x0f43a677.
//
// Solidity: function validatorCount() returns(uint8)
func (_Validators *ValidatorsTransactor) ValidatorCount(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "validatorCount")
}

// ValidatorCount is a paid mutator transaction binding the contract method 0x0f43a677.
//
// Solidity: function validatorCount() returns(uint8)
func (_Validators *ValidatorsSession) ValidatorCount() (*types.Transaction, error) {
	return _Validators.Contract.ValidatorCount(&_Validators.TransactOpts)
}

// ValidatorCount is a paid mutator transaction binding the contract method 0x0f43a677.
//
// Solidity: function validatorCount() returns(uint8)
func (_Validators *ValidatorsTransactorSession) ValidatorCount() (*types.Transaction, error) {
	return _Validators.Contract.ValidatorCount(&_Validators.TransactOpts)
}

// ValidatorMaxCount is a paid mutator transaction binding the contract method 0x09f0d45d.
//
// Solidity: function validatorMaxCount() returns(uint8)
func (_Validators *ValidatorsTransactor) ValidatorMaxCount(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "validatorMaxCount")
}

// ValidatorMaxCount is a paid mutator transaction binding the contract method 0x09f0d45d.
//
// Solidity: function validatorMaxCount() returns(uint8)
func (_Validators *ValidatorsSession) ValidatorMaxCount() (*types.Transaction, error) {
	return _Validators.Contract.ValidatorMaxCount(&_Validators.TransactOpts)
}

// ValidatorMaxCount is a paid mutator transaction binding the contract method 0x09f0d45d.
//
// Solidity: function validatorMaxCount() returns(uint8)
func (_Validators *ValidatorsTransactorSession) ValidatorMaxCount() (*types.Transaction, error) {
	return _Validators.Contract.ValidatorMaxCount(&_Validators.TransactOpts)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 amount) returns(bool)
func (_Validators *ValidatorsTransactor) Withdraw(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "withdraw", amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 amount) returns(bool)
func (_Validators *ValidatorsSession) Withdraw(amount *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.Withdraw(&_Validators.TransactOpts, amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 amount) returns(bool)
func (_Validators *ValidatorsTransactorSession) Withdraw(amount *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.Withdraw(&_Validators.TransactOpts, amount)
}

// WithdrawFor is a paid mutator transaction binding the contract method 0xdb518db2.
//
// Solidity: function withdrawFor(address who, uint256 amount) returns(bool)
func (_Validators *ValidatorsTransactor) WithdrawFor(opts *bind.TransactOpts, who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "withdrawFor", who, amount)
}

// WithdrawFor is a paid mutator transaction binding the contract method 0xdb518db2.
//
// Solidity: function withdrawFor(address who, uint256 amount) returns(bool)
func (_Validators *ValidatorsSession) WithdrawFor(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.WithdrawFor(&_Validators.TransactOpts, who, amount)
}

// WithdrawFor is a paid mutator transaction binding the contract method 0xdb518db2.
//
// Solidity: function withdrawFor(address who, uint256 amount) returns(bool)
func (_Validators *ValidatorsTransactorSession) WithdrawFor(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.WithdrawFor(&_Validators.TransactOpts, who, amount)
}

// WithdrawReward is a paid mutator transaction binding the contract method 0x523a3f08.
//
// Solidity: function withdrawReward(uint256 amount) returns(bool)
func (_Validators *ValidatorsTransactor) WithdrawReward(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "withdrawReward", amount)
}

// WithdrawReward is a paid mutator transaction binding the contract method 0x523a3f08.
//
// Solidity: function withdrawReward(uint256 amount) returns(bool)
func (_Validators *ValidatorsSession) WithdrawReward(amount *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.WithdrawReward(&_Validators.TransactOpts, amount)
}

// WithdrawReward is a paid mutator transaction binding the contract method 0x523a3f08.
//
// Solidity: function withdrawReward(uint256 amount) returns(bool)
func (_Validators *ValidatorsTransactorSession) WithdrawReward(amount *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.WithdrawReward(&_Validators.TransactOpts, amount)
}

// ValidatorsBurntStakeIterator is returned from FilterBurntStake and is used to iterate over the raw logs and unpacked data for BurntStake events raised by the Validators contract.
type ValidatorsBurntStakeIterator struct {
	Event *ValidatorsBurntStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsBurntStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsBurntStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsBurntStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsBurntStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsBurntStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsBurntStake represents a BurntStake event raised by the Validators contract.
type ValidatorsBurntStake struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBurntStake is a free log retrieval operation binding the contract event 0x54420ac6a7570cfba30d2f88982f0749811f67103de3a63ad8b82cb754e8680e.
//
// Solidity: event BurntStake(address indexed who, uint256 amount)
func (_Validators *ValidatorsFilterer) FilterBurntStake(opts *bind.FilterOpts, who []common.Address) (*ValidatorsBurntStakeIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Validators.contract.FilterLogs(opts, "BurntStake", whoRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorsBurntStakeIterator{contract: _Validators.contract, event: "BurntStake", logs: logs, sub: sub}, nil
}

// WatchBurntStake is a free log subscription operation binding the contract event 0x54420ac6a7570cfba30d2f88982f0749811f67103de3a63ad8b82cb754e8680e.
//
// Solidity: event BurntStake(address indexed who, uint256 amount)
func (_Validators *ValidatorsFilterer) WatchBurntStake(opts *bind.WatchOpts, sink chan<- *ValidatorsBurntStake, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Validators.contract.WatchLogs(opts, "BurntStake", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsBurntStake)
				if err := _Validators.contract.UnpackLog(event, "BurntStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBurntStake is a log parse operation binding the contract event 0x54420ac6a7570cfba30d2f88982f0749811f67103de3a63ad8b82cb754e8680e.
//
// Solidity: event BurntStake(address indexed who, uint256 amount)
func (_Validators *ValidatorsFilterer) ParseBurntStake(log types.Log) (*ValidatorsBurntStake, error) {
	event := new(ValidatorsBurntStake)
	if err := _Validators.contract.UnpackLog(event, "BurntStake", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorsFinedIterator is returned from FilterFined and is used to iterate over the raw logs and unpacked data for Fined events raised by the Validators contract.
type ValidatorsFinedIterator struct {
	Event *ValidatorsFined // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsFinedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsFined)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsFined)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsFinedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsFinedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsFined represents a Fined event raised by the Validators contract.
type ValidatorsFined struct {
	Who    common.Address
	Why    [32]byte
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterFined is a free log retrieval operation binding the contract event 0xf1254bf6cf04a475bd832353c2ccfc5e0d89e7b9c0f05a153ff897b6121b91e9.
//
// Solidity: event Fined(address indexed who, bytes32 why, uint256 amount)
func (_Validators *ValidatorsFilterer) FilterFined(opts *bind.FilterOpts, who []common.Address) (*ValidatorsFinedIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Validators.contract.FilterLogs(opts, "Fined", whoRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorsFinedIterator{contract: _Validators.contract, event: "Fined", logs: logs, sub: sub}, nil
}

// WatchFined is a free log subscription operation binding the contract event 0xf1254bf6cf04a475bd832353c2ccfc5e0d89e7b9c0f05a153ff897b6121b91e9.
//
// Solidity: event Fined(address indexed who, bytes32 why, uint256 amount)
func (_Validators *ValidatorsFilterer) WatchFined(opts *bind.WatchOpts, sink chan<- *ValidatorsFined, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Validators.contract.WatchLogs(opts, "Fined", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsFined)
				if err := _Validators.contract.UnpackLog(event, "Fined", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFined is a log parse operation binding the contract event 0xf1254bf6cf04a475bd832353c2ccfc5e0d89e7b9c0f05a153ff897b6121b91e9.
//
// Solidity: event Fined(address indexed who, bytes32 why, uint256 amount)
func (_Validators *ValidatorsFilterer) ParseFined(log types.Log) (*ValidatorsFined, error) {
	event := new(ValidatorsFined)
	if err := _Validators.contract.UnpackLog(event, "Fined", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorsKeyShareSubmissionIterator is returned from FilterKeyShareSubmission and is used to iterate over the raw logs and unpacked data for KeyShareSubmission events raised by the Validators contract.
type ValidatorsKeyShareSubmissionIterator struct {
	Event *ValidatorsKeyShareSubmission // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsKeyShareSubmissionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsKeyShareSubmission)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsKeyShareSubmission)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsKeyShareSubmissionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsKeyShareSubmissionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsKeyShareSubmission represents a KeyShareSubmission event raised by the Validators contract.
type ValidatorsKeyShareSubmission struct {
	Issuer                     common.Address
	KeyShareG1                 [2]*big.Int
	KeyShareG1CorrectnessProof [2]*big.Int
	KeyShareG2                 [4]*big.Int
	Raw                        types.Log // Blockchain specific contextual infos
}

// FilterKeyShareSubmission is a free log retrieval operation binding the contract event 0xb0ee36c3780de716eb6c83687f433ae2558a6923e090fd238b657fb6c896badc.
//
// Solidity: event KeyShareSubmission(address issuer, uint256[2] key_share_G1, uint256[2] key_share_G1_correctness_proof, uint256[4] key_share_G2)
func (_Validators *ValidatorsFilterer) FilterKeyShareSubmission(opts *bind.FilterOpts) (*ValidatorsKeyShareSubmissionIterator, error) {

	logs, sub, err := _Validators.contract.FilterLogs(opts, "KeyShareSubmission")
	if err != nil {
		return nil, err
	}
	return &ValidatorsKeyShareSubmissionIterator{contract: _Validators.contract, event: "KeyShareSubmission", logs: logs, sub: sub}, nil
}

// WatchKeyShareSubmission is a free log subscription operation binding the contract event 0xb0ee36c3780de716eb6c83687f433ae2558a6923e090fd238b657fb6c896badc.
//
// Solidity: event KeyShareSubmission(address issuer, uint256[2] key_share_G1, uint256[2] key_share_G1_correctness_proof, uint256[4] key_share_G2)
func (_Validators *ValidatorsFilterer) WatchKeyShareSubmission(opts *bind.WatchOpts, sink chan<- *ValidatorsKeyShareSubmission) (event.Subscription, error) {

	logs, sub, err := _Validators.contract.WatchLogs(opts, "KeyShareSubmission")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsKeyShareSubmission)
				if err := _Validators.contract.UnpackLog(event, "KeyShareSubmission", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKeyShareSubmission is a log parse operation binding the contract event 0xb0ee36c3780de716eb6c83687f433ae2558a6923e090fd238b657fb6c896badc.
//
// Solidity: event KeyShareSubmission(address issuer, uint256[2] key_share_G1, uint256[2] key_share_G1_correctness_proof, uint256[4] key_share_G2)
func (_Validators *ValidatorsFilterer) ParseKeyShareSubmission(log types.Log) (*ValidatorsKeyShareSubmission, error) {
	event := new(ValidatorsKeyShareSubmission)
	if err := _Validators.contract.UnpackLog(event, "KeyShareSubmission", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorsLockedRewardIterator is returned from FilterLockedReward and is used to iterate over the raw logs and unpacked data for LockedReward events raised by the Validators contract.
type ValidatorsLockedRewardIterator struct {
	Event *ValidatorsLockedReward // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsLockedRewardIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsLockedReward)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsLockedReward)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsLockedRewardIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsLockedRewardIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsLockedReward represents a LockedReward event raised by the Validators contract.
type ValidatorsLockedReward struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterLockedReward is a free log retrieval operation binding the contract event 0x28dc9c0ffa672df041cad84edbee41508284600c9394bda0f8586d012c5e0915.
//
// Solidity: event LockedReward(address indexed who, uint256 amount)
func (_Validators *ValidatorsFilterer) FilterLockedReward(opts *bind.FilterOpts, who []common.Address) (*ValidatorsLockedRewardIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Validators.contract.FilterLogs(opts, "LockedReward", whoRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorsLockedRewardIterator{contract: _Validators.contract, event: "LockedReward", logs: logs, sub: sub}, nil
}

// WatchLockedReward is a free log subscription operation binding the contract event 0x28dc9c0ffa672df041cad84edbee41508284600c9394bda0f8586d012c5e0915.
//
// Solidity: event LockedReward(address indexed who, uint256 amount)
func (_Validators *ValidatorsFilterer) WatchLockedReward(opts *bind.WatchOpts, sink chan<- *ValidatorsLockedReward, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Validators.contract.WatchLogs(opts, "LockedReward", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsLockedReward)
				if err := _Validators.contract.UnpackLog(event, "LockedReward", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLockedReward is a log parse operation binding the contract event 0x28dc9c0ffa672df041cad84edbee41508284600c9394bda0f8586d012c5e0915.
//
// Solidity: event LockedReward(address indexed who, uint256 amount)
func (_Validators *ValidatorsFilterer) ParseLockedReward(log types.Log) (*ValidatorsLockedReward, error) {
	event := new(ValidatorsLockedReward)
	if err := _Validators.contract.UnpackLog(event, "LockedReward", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorsLockedStakeIterator is returned from FilterLockedStake and is used to iterate over the raw logs and unpacked data for LockedStake events raised by the Validators contract.
type ValidatorsLockedStakeIterator struct {
	Event *ValidatorsLockedStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsLockedStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsLockedStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsLockedStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsLockedStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsLockedStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsLockedStake represents a LockedStake event raised by the Validators contract.
type ValidatorsLockedStake struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterLockedStake is a free log retrieval operation binding the contract event 0x1de2f07b0a1c69916a8b25b889051644192307ea08444a2e11f8654d1db3ab0c.
//
// Solidity: event LockedStake(address indexed who, uint256 amount)
func (_Validators *ValidatorsFilterer) FilterLockedStake(opts *bind.FilterOpts, who []common.Address) (*ValidatorsLockedStakeIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Validators.contract.FilterLogs(opts, "LockedStake", whoRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorsLockedStakeIterator{contract: _Validators.contract, event: "LockedStake", logs: logs, sub: sub}, nil
}

// WatchLockedStake is a free log subscription operation binding the contract event 0x1de2f07b0a1c69916a8b25b889051644192307ea08444a2e11f8654d1db3ab0c.
//
// Solidity: event LockedStake(address indexed who, uint256 amount)
func (_Validators *ValidatorsFilterer) WatchLockedStake(opts *bind.WatchOpts, sink chan<- *ValidatorsLockedStake, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Validators.contract.WatchLogs(opts, "LockedStake", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsLockedStake)
				if err := _Validators.contract.UnpackLog(event, "LockedStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLockedStake is a log parse operation binding the contract event 0x1de2f07b0a1c69916a8b25b889051644192307ea08444a2e11f8654d1db3ab0c.
//
// Solidity: event LockedStake(address indexed who, uint256 amount)
func (_Validators *ValidatorsFilterer) ParseLockedStake(log types.Log) (*ValidatorsLockedStake, error) {
	event := new(ValidatorsLockedStake)
	if err := _Validators.contract.UnpackLog(event, "LockedStake", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorsRegistrationOpenIterator is returned from FilterRegistrationOpen and is used to iterate over the raw logs and unpacked data for RegistrationOpen events raised by the Validators contract.
type ValidatorsRegistrationOpenIterator struct {
	Event *ValidatorsRegistrationOpen // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsRegistrationOpenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsRegistrationOpen)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsRegistrationOpen)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsRegistrationOpenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsRegistrationOpenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsRegistrationOpen represents a RegistrationOpen event raised by the Validators contract.
type ValidatorsRegistrationOpen struct {
	DkgStarts              *big.Int
	RegistrationEnds       *big.Int
	ShareDistributionEnds  *big.Int
	DisputeEnds            *big.Int
	KeyShareSubmissionEnds *big.Int
	MpkSubmissionEnds      *big.Int
	GpkjSubmissionEnds     *big.Int
	GpkjDisputeEnds        *big.Int
	DkgComplete            *big.Int
	Raw                    types.Log // Blockchain specific contextual infos
}

// FilterRegistrationOpen is a free log retrieval operation binding the contract event 0x9c6f8368fe7e77e8cb9438744581403bcb3f53298e517f04c1b8475487402e97.
//
// Solidity: event RegistrationOpen(uint256 dkgStarts, uint256 registrationEnds, uint256 shareDistributionEnds, uint256 disputeEnds, uint256 keyShareSubmissionEnds, uint256 mpkSubmissionEnds, uint256 gpkjSubmissionEnds, uint256 gpkjDisputeEnds, uint256 dkgComplete)
func (_Validators *ValidatorsFilterer) FilterRegistrationOpen(opts *bind.FilterOpts) (*ValidatorsRegistrationOpenIterator, error) {

	logs, sub, err := _Validators.contract.FilterLogs(opts, "RegistrationOpen")
	if err != nil {
		return nil, err
	}
	return &ValidatorsRegistrationOpenIterator{contract: _Validators.contract, event: "RegistrationOpen", logs: logs, sub: sub}, nil
}

// WatchRegistrationOpen is a free log subscription operation binding the contract event 0x9c6f8368fe7e77e8cb9438744581403bcb3f53298e517f04c1b8475487402e97.
//
// Solidity: event RegistrationOpen(uint256 dkgStarts, uint256 registrationEnds, uint256 shareDistributionEnds, uint256 disputeEnds, uint256 keyShareSubmissionEnds, uint256 mpkSubmissionEnds, uint256 gpkjSubmissionEnds, uint256 gpkjDisputeEnds, uint256 dkgComplete)
func (_Validators *ValidatorsFilterer) WatchRegistrationOpen(opts *bind.WatchOpts, sink chan<- *ValidatorsRegistrationOpen) (event.Subscription, error) {

	logs, sub, err := _Validators.contract.WatchLogs(opts, "RegistrationOpen")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsRegistrationOpen)
				if err := _Validators.contract.UnpackLog(event, "RegistrationOpen", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegistrationOpen is a log parse operation binding the contract event 0x9c6f8368fe7e77e8cb9438744581403bcb3f53298e517f04c1b8475487402e97.
//
// Solidity: event RegistrationOpen(uint256 dkgStarts, uint256 registrationEnds, uint256 shareDistributionEnds, uint256 disputeEnds, uint256 keyShareSubmissionEnds, uint256 mpkSubmissionEnds, uint256 gpkjSubmissionEnds, uint256 gpkjDisputeEnds, uint256 dkgComplete)
func (_Validators *ValidatorsFilterer) ParseRegistrationOpen(log types.Log) (*ValidatorsRegistrationOpen, error) {
	event := new(ValidatorsRegistrationOpen)
	if err := _Validators.contract.UnpackLog(event, "RegistrationOpen", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorsRequestedUnlockStakeIterator is returned from FilterRequestedUnlockStake and is used to iterate over the raw logs and unpacked data for RequestedUnlockStake events raised by the Validators contract.
type ValidatorsRequestedUnlockStakeIterator struct {
	Event *ValidatorsRequestedUnlockStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsRequestedUnlockStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsRequestedUnlockStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsRequestedUnlockStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsRequestedUnlockStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsRequestedUnlockStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsRequestedUnlockStake represents a RequestedUnlockStake event raised by the Validators contract.
type ValidatorsRequestedUnlockStake struct {
	Who common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterRequestedUnlockStake is a free log retrieval operation binding the contract event 0x1fde0d8a6620647f5c7b5632a87b23101ba553c9b474caf1134fb24d92bf6ddc.
//
// Solidity: event RequestedUnlockStake(address indexed who)
func (_Validators *ValidatorsFilterer) FilterRequestedUnlockStake(opts *bind.FilterOpts, who []common.Address) (*ValidatorsRequestedUnlockStakeIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Validators.contract.FilterLogs(opts, "RequestedUnlockStake", whoRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorsRequestedUnlockStakeIterator{contract: _Validators.contract, event: "RequestedUnlockStake", logs: logs, sub: sub}, nil
}

// WatchRequestedUnlockStake is a free log subscription operation binding the contract event 0x1fde0d8a6620647f5c7b5632a87b23101ba553c9b474caf1134fb24d92bf6ddc.
//
// Solidity: event RequestedUnlockStake(address indexed who)
func (_Validators *ValidatorsFilterer) WatchRequestedUnlockStake(opts *bind.WatchOpts, sink chan<- *ValidatorsRequestedUnlockStake, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Validators.contract.WatchLogs(opts, "RequestedUnlockStake", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsRequestedUnlockStake)
				if err := _Validators.contract.UnpackLog(event, "RequestedUnlockStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRequestedUnlockStake is a log parse operation binding the contract event 0x1fde0d8a6620647f5c7b5632a87b23101ba553c9b474caf1134fb24d92bf6ddc.
//
// Solidity: event RequestedUnlockStake(address indexed who)
func (_Validators *ValidatorsFilterer) ParseRequestedUnlockStake(log types.Log) (*ValidatorsRequestedUnlockStake, error) {
	event := new(ValidatorsRequestedUnlockStake)
	if err := _Validators.contract.UnpackLog(event, "RequestedUnlockStake", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorsShareDistributionIterator is returned from FilterShareDistribution and is used to iterate over the raw logs and unpacked data for ShareDistribution events raised by the Validators contract.
type ValidatorsShareDistributionIterator struct {
	Event *ValidatorsShareDistribution // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsShareDistributionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsShareDistribution)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsShareDistribution)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsShareDistributionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsShareDistributionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsShareDistribution represents a ShareDistribution event raised by the Validators contract.
type ValidatorsShareDistribution struct {
	Issuer          common.Address
	Index           *big.Int
	EncryptedShares []*big.Int
	Commitments     [][2]*big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterShareDistribution is a free log retrieval operation binding the contract event 0xa84d294194d6169652a99150fd2ef10e18b0d2caa10beeea237bbddcc6e22b10.
//
// Solidity: event ShareDistribution(address issuer, uint256 index, uint256[] encrypted_shares, uint256[2][] commitments)
func (_Validators *ValidatorsFilterer) FilterShareDistribution(opts *bind.FilterOpts) (*ValidatorsShareDistributionIterator, error) {

	logs, sub, err := _Validators.contract.FilterLogs(opts, "ShareDistribution")
	if err != nil {
		return nil, err
	}
	return &ValidatorsShareDistributionIterator{contract: _Validators.contract, event: "ShareDistribution", logs: logs, sub: sub}, nil
}

// WatchShareDistribution is a free log subscription operation binding the contract event 0xa84d294194d6169652a99150fd2ef10e18b0d2caa10beeea237bbddcc6e22b10.
//
// Solidity: event ShareDistribution(address issuer, uint256 index, uint256[] encrypted_shares, uint256[2][] commitments)
func (_Validators *ValidatorsFilterer) WatchShareDistribution(opts *bind.WatchOpts, sink chan<- *ValidatorsShareDistribution) (event.Subscription, error) {

	logs, sub, err := _Validators.contract.WatchLogs(opts, "ShareDistribution")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsShareDistribution)
				if err := _Validators.contract.UnpackLog(event, "ShareDistribution", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseShareDistribution is a log parse operation binding the contract event 0xa84d294194d6169652a99150fd2ef10e18b0d2caa10beeea237bbddcc6e22b10.
//
// Solidity: event ShareDistribution(address issuer, uint256 index, uint256[] encrypted_shares, uint256[2][] commitments)
func (_Validators *ValidatorsFilterer) ParseShareDistribution(log types.Log) (*ValidatorsShareDistribution, error) {
	event := new(ValidatorsShareDistribution)
	if err := _Validators.contract.UnpackLog(event, "ShareDistribution", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorsSnapshotTakenIterator is returned from FilterSnapshotTaken and is used to iterate over the raw logs and unpacked data for SnapshotTaken events raised by the Validators contract.
type ValidatorsSnapshotTakenIterator struct {
	Event *ValidatorsSnapshotTaken // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsSnapshotTakenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsSnapshotTaken)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsSnapshotTaken)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsSnapshotTakenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsSnapshotTakenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsSnapshotTaken represents a SnapshotTaken event raised by the Validators contract.
type ValidatorsSnapshotTaken struct {
	ChainId        uint32
	Epoch          *big.Int
	Height         uint32
	Validator      common.Address
	StartingETHDKG bool
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterSnapshotTaken is a free log retrieval operation binding the contract event 0x6d438b6b835d16cdae6efdc0259fdfba17e6aa32dae81863a2467866f85f724a.
//
// Solidity: event SnapshotTaken(uint32 chainId, uint256 indexed epoch, uint32 height, address indexed validator, bool startingETHDKG)
func (_Validators *ValidatorsFilterer) FilterSnapshotTaken(opts *bind.FilterOpts, epoch []*big.Int, validator []common.Address) (*ValidatorsSnapshotTakenIterator, error) {

	var epochRule []interface{}
	for _, epochItem := range epoch {
		epochRule = append(epochRule, epochItem)
	}

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _Validators.contract.FilterLogs(opts, "SnapshotTaken", epochRule, validatorRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorsSnapshotTakenIterator{contract: _Validators.contract, event: "SnapshotTaken", logs: logs, sub: sub}, nil
}

// WatchSnapshotTaken is a free log subscription operation binding the contract event 0x6d438b6b835d16cdae6efdc0259fdfba17e6aa32dae81863a2467866f85f724a.
//
// Solidity: event SnapshotTaken(uint32 chainId, uint256 indexed epoch, uint32 height, address indexed validator, bool startingETHDKG)
func (_Validators *ValidatorsFilterer) WatchSnapshotTaken(opts *bind.WatchOpts, sink chan<- *ValidatorsSnapshotTaken, epoch []*big.Int, validator []common.Address) (event.Subscription, error) {

	var epochRule []interface{}
	for _, epochItem := range epoch {
		epochRule = append(epochRule, epochItem)
	}

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _Validators.contract.WatchLogs(opts, "SnapshotTaken", epochRule, validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsSnapshotTaken)
				if err := _Validators.contract.UnpackLog(event, "SnapshotTaken", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSnapshotTaken is a log parse operation binding the contract event 0x6d438b6b835d16cdae6efdc0259fdfba17e6aa32dae81863a2467866f85f724a.
//
// Solidity: event SnapshotTaken(uint32 chainId, uint256 indexed epoch, uint32 height, address indexed validator, bool startingETHDKG)
func (_Validators *ValidatorsFilterer) ParseSnapshotTaken(log types.Log) (*ValidatorsSnapshotTaken, error) {
	event := new(ValidatorsSnapshotTaken)
	if err := _Validators.contract.UnpackLog(event, "SnapshotTaken", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorsUnlockedRewardIterator is returned from FilterUnlockedReward and is used to iterate over the raw logs and unpacked data for UnlockedReward events raised by the Validators contract.
type ValidatorsUnlockedRewardIterator struct {
	Event *ValidatorsUnlockedReward // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsUnlockedRewardIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsUnlockedReward)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsUnlockedReward)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsUnlockedRewardIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsUnlockedRewardIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsUnlockedReward represents a UnlockedReward event raised by the Validators contract.
type ValidatorsUnlockedReward struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterUnlockedReward is a free log retrieval operation binding the contract event 0x496a1c9a1a9ac29d87ecb4e563683ebd0ee80798869f36c86175059eb5dc7304.
//
// Solidity: event UnlockedReward(address indexed who, uint256 amount)
func (_Validators *ValidatorsFilterer) FilterUnlockedReward(opts *bind.FilterOpts, who []common.Address) (*ValidatorsUnlockedRewardIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Validators.contract.FilterLogs(opts, "UnlockedReward", whoRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorsUnlockedRewardIterator{contract: _Validators.contract, event: "UnlockedReward", logs: logs, sub: sub}, nil
}

// WatchUnlockedReward is a free log subscription operation binding the contract event 0x496a1c9a1a9ac29d87ecb4e563683ebd0ee80798869f36c86175059eb5dc7304.
//
// Solidity: event UnlockedReward(address indexed who, uint256 amount)
func (_Validators *ValidatorsFilterer) WatchUnlockedReward(opts *bind.WatchOpts, sink chan<- *ValidatorsUnlockedReward, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Validators.contract.WatchLogs(opts, "UnlockedReward", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsUnlockedReward)
				if err := _Validators.contract.UnpackLog(event, "UnlockedReward", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnlockedReward is a log parse operation binding the contract event 0x496a1c9a1a9ac29d87ecb4e563683ebd0ee80798869f36c86175059eb5dc7304.
//
// Solidity: event UnlockedReward(address indexed who, uint256 amount)
func (_Validators *ValidatorsFilterer) ParseUnlockedReward(log types.Log) (*ValidatorsUnlockedReward, error) {
	event := new(ValidatorsUnlockedReward)
	if err := _Validators.contract.UnpackLog(event, "UnlockedReward", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorsUnlockedStakeIterator is returned from FilterUnlockedStake and is used to iterate over the raw logs and unpacked data for UnlockedStake events raised by the Validators contract.
type ValidatorsUnlockedStakeIterator struct {
	Event *ValidatorsUnlockedStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsUnlockedStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsUnlockedStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsUnlockedStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsUnlockedStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsUnlockedStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsUnlockedStake represents a UnlockedStake event raised by the Validators contract.
type ValidatorsUnlockedStake struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterUnlockedStake is a free log retrieval operation binding the contract event 0x252a696583e35c4d61332829d3bb2a8236f2500140258f089951799c9b999a9c.
//
// Solidity: event UnlockedStake(address indexed who, uint256 amount)
func (_Validators *ValidatorsFilterer) FilterUnlockedStake(opts *bind.FilterOpts, who []common.Address) (*ValidatorsUnlockedStakeIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Validators.contract.FilterLogs(opts, "UnlockedStake", whoRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorsUnlockedStakeIterator{contract: _Validators.contract, event: "UnlockedStake", logs: logs, sub: sub}, nil
}

// WatchUnlockedStake is a free log subscription operation binding the contract event 0x252a696583e35c4d61332829d3bb2a8236f2500140258f089951799c9b999a9c.
//
// Solidity: event UnlockedStake(address indexed who, uint256 amount)
func (_Validators *ValidatorsFilterer) WatchUnlockedStake(opts *bind.WatchOpts, sink chan<- *ValidatorsUnlockedStake, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Validators.contract.WatchLogs(opts, "UnlockedStake", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsUnlockedStake)
				if err := _Validators.contract.UnpackLog(event, "UnlockedStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnlockedStake is a log parse operation binding the contract event 0x252a696583e35c4d61332829d3bb2a8236f2500140258f089951799c9b999a9c.
//
// Solidity: event UnlockedStake(address indexed who, uint256 amount)
func (_Validators *ValidatorsFilterer) ParseUnlockedStake(log types.Log) (*ValidatorsUnlockedStake, error) {
	event := new(ValidatorsUnlockedStake)
	if err := _Validators.contract.UnpackLog(event, "UnlockedStake", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorsValidatorCreatedIterator is returned from FilterValidatorCreated and is used to iterate over the raw logs and unpacked data for ValidatorCreated events raised by the Validators contract.
type ValidatorsValidatorCreatedIterator struct {
	Event *ValidatorsValidatorCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsValidatorCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsValidatorCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsValidatorCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsValidatorCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsValidatorCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsValidatorCreated represents a ValidatorCreated event raised by the Validators contract.
type ValidatorsValidatorCreated struct {
	Validator common.Address
	Signer    common.Address
	MadID     [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorCreated is a free log retrieval operation binding the contract event 0xef5e89a9416c26e0a0a37c1f630958c8c88d9efad59f553f94cff0bed0a268d3.
//
// Solidity: event ValidatorCreated(address indexed validator, address indexed signer, uint256[2] madID)
func (_Validators *ValidatorsFilterer) FilterValidatorCreated(opts *bind.FilterOpts, validator []common.Address, signer []common.Address) (*ValidatorsValidatorCreatedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var signerRule []interface{}
	for _, signerItem := range signer {
		signerRule = append(signerRule, signerItem)
	}

	logs, sub, err := _Validators.contract.FilterLogs(opts, "ValidatorCreated", validatorRule, signerRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorsValidatorCreatedIterator{contract: _Validators.contract, event: "ValidatorCreated", logs: logs, sub: sub}, nil
}

// WatchValidatorCreated is a free log subscription operation binding the contract event 0xef5e89a9416c26e0a0a37c1f630958c8c88d9efad59f553f94cff0bed0a268d3.
//
// Solidity: event ValidatorCreated(address indexed validator, address indexed signer, uint256[2] madID)
func (_Validators *ValidatorsFilterer) WatchValidatorCreated(opts *bind.WatchOpts, sink chan<- *ValidatorsValidatorCreated, validator []common.Address, signer []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var signerRule []interface{}
	for _, signerItem := range signer {
		signerRule = append(signerRule, signerItem)
	}

	logs, sub, err := _Validators.contract.WatchLogs(opts, "ValidatorCreated", validatorRule, signerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsValidatorCreated)
				if err := _Validators.contract.UnpackLog(event, "ValidatorCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorCreated is a log parse operation binding the contract event 0xef5e89a9416c26e0a0a37c1f630958c8c88d9efad59f553f94cff0bed0a268d3.
//
// Solidity: event ValidatorCreated(address indexed validator, address indexed signer, uint256[2] madID)
func (_Validators *ValidatorsFilterer) ParseValidatorCreated(log types.Log) (*ValidatorsValidatorCreated, error) {
	event := new(ValidatorsValidatorCreated)
	if err := _Validators.contract.UnpackLog(event, "ValidatorCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorsValidatorJoinedIterator is returned from FilterValidatorJoined and is used to iterate over the raw logs and unpacked data for ValidatorJoined events raised by the Validators contract.
type ValidatorsValidatorJoinedIterator struct {
	Event *ValidatorsValidatorJoined // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsValidatorJoinedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsValidatorJoined)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsValidatorJoined)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsValidatorJoinedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsValidatorJoinedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsValidatorJoined represents a ValidatorJoined event raised by the Validators contract.
type ValidatorsValidatorJoined struct {
	Validator common.Address
	MadID     [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorJoined is a free log retrieval operation binding the contract event 0x8c25e214c5693ebaf8008875bacedeb9e0aafd393864a314ed1801b2a4e13dd9.
//
// Solidity: event ValidatorJoined(address indexed validator, uint256[2] madID)
func (_Validators *ValidatorsFilterer) FilterValidatorJoined(opts *bind.FilterOpts, validator []common.Address) (*ValidatorsValidatorJoinedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _Validators.contract.FilterLogs(opts, "ValidatorJoined", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorsValidatorJoinedIterator{contract: _Validators.contract, event: "ValidatorJoined", logs: logs, sub: sub}, nil
}

// WatchValidatorJoined is a free log subscription operation binding the contract event 0x8c25e214c5693ebaf8008875bacedeb9e0aafd393864a314ed1801b2a4e13dd9.
//
// Solidity: event ValidatorJoined(address indexed validator, uint256[2] madID)
func (_Validators *ValidatorsFilterer) WatchValidatorJoined(opts *bind.WatchOpts, sink chan<- *ValidatorsValidatorJoined, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _Validators.contract.WatchLogs(opts, "ValidatorJoined", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsValidatorJoined)
				if err := _Validators.contract.UnpackLog(event, "ValidatorJoined", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorJoined is a log parse operation binding the contract event 0x8c25e214c5693ebaf8008875bacedeb9e0aafd393864a314ed1801b2a4e13dd9.
//
// Solidity: event ValidatorJoined(address indexed validator, uint256[2] madID)
func (_Validators *ValidatorsFilterer) ParseValidatorJoined(log types.Log) (*ValidatorsValidatorJoined, error) {
	event := new(ValidatorsValidatorJoined)
	if err := _Validators.contract.UnpackLog(event, "ValidatorJoined", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorsValidatorLeftIterator is returned from FilterValidatorLeft and is used to iterate over the raw logs and unpacked data for ValidatorLeft events raised by the Validators contract.
type ValidatorsValidatorLeftIterator struct {
	Event *ValidatorsValidatorLeft // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsValidatorLeftIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsValidatorLeft)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsValidatorLeft)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsValidatorLeftIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsValidatorLeftIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsValidatorLeft represents a ValidatorLeft event raised by the Validators contract.
type ValidatorsValidatorLeft struct {
	Validator common.Address
	PkHash    [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorLeft is a free log retrieval operation binding the contract event 0x319bbadb03b94aedc69babb34a28675536a9cb30f4bbde343e1d0018c44ebd94.
//
// Solidity: event ValidatorLeft(address indexed validator, uint256[2] pkHash)
func (_Validators *ValidatorsFilterer) FilterValidatorLeft(opts *bind.FilterOpts, validator []common.Address) (*ValidatorsValidatorLeftIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _Validators.contract.FilterLogs(opts, "ValidatorLeft", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorsValidatorLeftIterator{contract: _Validators.contract, event: "ValidatorLeft", logs: logs, sub: sub}, nil
}

// WatchValidatorLeft is a free log subscription operation binding the contract event 0x319bbadb03b94aedc69babb34a28675536a9cb30f4bbde343e1d0018c44ebd94.
//
// Solidity: event ValidatorLeft(address indexed validator, uint256[2] pkHash)
func (_Validators *ValidatorsFilterer) WatchValidatorLeft(opts *bind.WatchOpts, sink chan<- *ValidatorsValidatorLeft, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _Validators.contract.WatchLogs(opts, "ValidatorLeft", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsValidatorLeft)
				if err := _Validators.contract.UnpackLog(event, "ValidatorLeft", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorLeft is a log parse operation binding the contract event 0x319bbadb03b94aedc69babb34a28675536a9cb30f4bbde343e1d0018c44ebd94.
//
// Solidity: event ValidatorLeft(address indexed validator, uint256[2] pkHash)
func (_Validators *ValidatorsFilterer) ParseValidatorLeft(log types.Log) (*ValidatorsValidatorLeft, error) {
	event := new(ValidatorsValidatorLeft)
	if err := _Validators.contract.UnpackLog(event, "ValidatorLeft", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorsValidatorMemberIterator is returned from FilterValidatorMember and is used to iterate over the raw logs and unpacked data for ValidatorMember events raised by the Validators contract.
type ValidatorsValidatorMemberIterator struct {
	Event *ValidatorsValidatorMember // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsValidatorMemberIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsValidatorMember)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsValidatorMember)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsValidatorMemberIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsValidatorMemberIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsValidatorMember represents a ValidatorMember event raised by the Validators contract.
type ValidatorsValidatorMember struct {
	Account common.Address
	Epoch   *big.Int
	Index   *big.Int
	Share0  *big.Int
	Share1  *big.Int
	Share2  *big.Int
	Share3  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterValidatorMember is a free log retrieval operation binding the contract event 0x113b129fac2dde341b9fbbec2bb79a95b9945b0e80fda711fc8ae5c7b0ea83b0.
//
// Solidity: event ValidatorMember(address account, uint256 epoch, uint256 index, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_Validators *ValidatorsFilterer) FilterValidatorMember(opts *bind.FilterOpts) (*ValidatorsValidatorMemberIterator, error) {

	logs, sub, err := _Validators.contract.FilterLogs(opts, "ValidatorMember")
	if err != nil {
		return nil, err
	}
	return &ValidatorsValidatorMemberIterator{contract: _Validators.contract, event: "ValidatorMember", logs: logs, sub: sub}, nil
}

// WatchValidatorMember is a free log subscription operation binding the contract event 0x113b129fac2dde341b9fbbec2bb79a95b9945b0e80fda711fc8ae5c7b0ea83b0.
//
// Solidity: event ValidatorMember(address account, uint256 epoch, uint256 index, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_Validators *ValidatorsFilterer) WatchValidatorMember(opts *bind.WatchOpts, sink chan<- *ValidatorsValidatorMember) (event.Subscription, error) {

	logs, sub, err := _Validators.contract.WatchLogs(opts, "ValidatorMember")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsValidatorMember)
				if err := _Validators.contract.UnpackLog(event, "ValidatorMember", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorMember is a log parse operation binding the contract event 0x113b129fac2dde341b9fbbec2bb79a95b9945b0e80fda711fc8ae5c7b0ea83b0.
//
// Solidity: event ValidatorMember(address account, uint256 epoch, uint256 index, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_Validators *ValidatorsFilterer) ParseValidatorMember(log types.Log) (*ValidatorsValidatorMember, error) {
	event := new(ValidatorsValidatorMember)
	if err := _Validators.contract.UnpackLog(event, "ValidatorMember", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorsValidatorQueuedIterator is returned from FilterValidatorQueued and is used to iterate over the raw logs and unpacked data for ValidatorQueued events raised by the Validators contract.
type ValidatorsValidatorQueuedIterator struct {
	Event *ValidatorsValidatorQueued // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsValidatorQueuedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsValidatorQueued)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsValidatorQueued)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsValidatorQueuedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsValidatorQueuedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsValidatorQueued represents a ValidatorQueued event raised by the Validators contract.
type ValidatorsValidatorQueued struct {
	Validator common.Address
	PkHash    [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorQueued is a free log retrieval operation binding the contract event 0xb4389eb1c66b46169245bc8c147e4b13a2b88adcaa44d001b0fadf25890b773d.
//
// Solidity: event ValidatorQueued(address indexed validator, uint256[2] pkHash)
func (_Validators *ValidatorsFilterer) FilterValidatorQueued(opts *bind.FilterOpts, validator []common.Address) (*ValidatorsValidatorQueuedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _Validators.contract.FilterLogs(opts, "ValidatorQueued", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorsValidatorQueuedIterator{contract: _Validators.contract, event: "ValidatorQueued", logs: logs, sub: sub}, nil
}

// WatchValidatorQueued is a free log subscription operation binding the contract event 0xb4389eb1c66b46169245bc8c147e4b13a2b88adcaa44d001b0fadf25890b773d.
//
// Solidity: event ValidatorQueued(address indexed validator, uint256[2] pkHash)
func (_Validators *ValidatorsFilterer) WatchValidatorQueued(opts *bind.WatchOpts, sink chan<- *ValidatorsValidatorQueued, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _Validators.contract.WatchLogs(opts, "ValidatorQueued", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsValidatorQueued)
				if err := _Validators.contract.UnpackLog(event, "ValidatorQueued", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorQueued is a log parse operation binding the contract event 0xb4389eb1c66b46169245bc8c147e4b13a2b88adcaa44d001b0fadf25890b773d.
//
// Solidity: event ValidatorQueued(address indexed validator, uint256[2] pkHash)
func (_Validators *ValidatorsFilterer) ParseValidatorQueued(log types.Log) (*ValidatorsValidatorQueued, error) {
	event := new(ValidatorsValidatorQueued)
	if err := _Validators.contract.UnpackLog(event, "ValidatorQueued", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorsValidatorSetIterator is returned from FilterValidatorSet and is used to iterate over the raw logs and unpacked data for ValidatorSet events raised by the Validators contract.
type ValidatorsValidatorSetIterator struct {
	Event *ValidatorsValidatorSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsValidatorSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsValidatorSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsValidatorSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsValidatorSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsValidatorSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsValidatorSet represents a ValidatorSet event raised by the Validators contract.
type ValidatorsValidatorSet struct {
	ValidatorCount uint8
	Epoch          *big.Int
	EthHeight      uint32
	MadHeight      uint32
	GroupKey0      *big.Int
	GroupKey1      *big.Int
	GroupKey2      *big.Int
	GroupKey3      *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterValidatorSet is a free log retrieval operation binding the contract event 0x1c85ff1efe0a905f8feca811e617102cb7ec896aded693eb96366c8ef22bb09f.
//
// Solidity: event ValidatorSet(uint8 validatorCount, uint256 epoch, uint32 ethHeight, uint32 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_Validators *ValidatorsFilterer) FilterValidatorSet(opts *bind.FilterOpts) (*ValidatorsValidatorSetIterator, error) {

	logs, sub, err := _Validators.contract.FilterLogs(opts, "ValidatorSet")
	if err != nil {
		return nil, err
	}
	return &ValidatorsValidatorSetIterator{contract: _Validators.contract, event: "ValidatorSet", logs: logs, sub: sub}, nil
}

// WatchValidatorSet is a free log subscription operation binding the contract event 0x1c85ff1efe0a905f8feca811e617102cb7ec896aded693eb96366c8ef22bb09f.
//
// Solidity: event ValidatorSet(uint8 validatorCount, uint256 epoch, uint32 ethHeight, uint32 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_Validators *ValidatorsFilterer) WatchValidatorSet(opts *bind.WatchOpts, sink chan<- *ValidatorsValidatorSet) (event.Subscription, error) {

	logs, sub, err := _Validators.contract.WatchLogs(opts, "ValidatorSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsValidatorSet)
				if err := _Validators.contract.UnpackLog(event, "ValidatorSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorSet is a log parse operation binding the contract event 0x1c85ff1efe0a905f8feca811e617102cb7ec896aded693eb96366c8ef22bb09f.
//
// Solidity: event ValidatorSet(uint8 validatorCount, uint256 epoch, uint32 ethHeight, uint32 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_Validators *ValidatorsFilterer) ParseValidatorSet(log types.Log) (*ValidatorsValidatorSet, error) {
	event := new(ValidatorsValidatorSet)
	if err := _Validators.contract.UnpackLog(event, "ValidatorSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorsDiamondMetaData contains all meta data concerning the ValidatorsDiamond contract.
var ValidatorsDiamondMetaData = &bind.MetaData{
	ABI: "[{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "",
}

// ValidatorsDiamondABI is the input ABI used to generate the binding from.
// Deprecated: Use ValidatorsDiamondMetaData.ABI instead.
var ValidatorsDiamondABI = ValidatorsDiamondMetaData.ABI

// ValidatorsDiamondBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ValidatorsDiamondMetaData.Bin instead.
var ValidatorsDiamondBin = ValidatorsDiamondMetaData.Bin

// DeployValidatorsDiamond deploys a new Ethereum contract, binding an instance of ValidatorsDiamond to it.
func DeployValidatorsDiamond(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ValidatorsDiamond, error) {
	parsed, err := ValidatorsDiamondMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ValidatorsDiamondBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ValidatorsDiamond{ValidatorsDiamondCaller: ValidatorsDiamondCaller{contract: contract}, ValidatorsDiamondTransactor: ValidatorsDiamondTransactor{contract: contract}, ValidatorsDiamondFilterer: ValidatorsDiamondFilterer{contract: contract}}, nil
}

// ValidatorsDiamond is an auto generated Go binding around an Ethereum contract.
type ValidatorsDiamond struct {
	ValidatorsDiamondCaller     // Read-only binding to the contract
	ValidatorsDiamondTransactor // Write-only binding to the contract
	ValidatorsDiamondFilterer   // Log filterer for contract events
}

// ValidatorsDiamondCaller is an auto generated read-only Go binding around an Ethereum contract.
type ValidatorsDiamondCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorsDiamondTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ValidatorsDiamondTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorsDiamondFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ValidatorsDiamondFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorsDiamondSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ValidatorsDiamondSession struct {
	Contract     *ValidatorsDiamond // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// ValidatorsDiamondCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ValidatorsDiamondCallerSession struct {
	Contract *ValidatorsDiamondCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// ValidatorsDiamondTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ValidatorsDiamondTransactorSession struct {
	Contract     *ValidatorsDiamondTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// ValidatorsDiamondRaw is an auto generated low-level Go binding around an Ethereum contract.
type ValidatorsDiamondRaw struct {
	Contract *ValidatorsDiamond // Generic contract binding to access the raw methods on
}

// ValidatorsDiamondCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ValidatorsDiamondCallerRaw struct {
	Contract *ValidatorsDiamondCaller // Generic read-only contract binding to access the raw methods on
}

// ValidatorsDiamondTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ValidatorsDiamondTransactorRaw struct {
	Contract *ValidatorsDiamondTransactor // Generic write-only contract binding to access the raw methods on
}

// NewValidatorsDiamond creates a new instance of ValidatorsDiamond, bound to a specific deployed contract.
func NewValidatorsDiamond(address common.Address, backend bind.ContractBackend) (*ValidatorsDiamond, error) {
	contract, err := bindValidatorsDiamond(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ValidatorsDiamond{ValidatorsDiamondCaller: ValidatorsDiamondCaller{contract: contract}, ValidatorsDiamondTransactor: ValidatorsDiamondTransactor{contract: contract}, ValidatorsDiamondFilterer: ValidatorsDiamondFilterer{contract: contract}}, nil
}

// NewValidatorsDiamondCaller creates a new read-only instance of ValidatorsDiamond, bound to a specific deployed contract.
func NewValidatorsDiamondCaller(address common.Address, caller bind.ContractCaller) (*ValidatorsDiamondCaller, error) {
	contract, err := bindValidatorsDiamond(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorsDiamondCaller{contract: contract}, nil
}

// NewValidatorsDiamondTransactor creates a new write-only instance of ValidatorsDiamond, bound to a specific deployed contract.
func NewValidatorsDiamondTransactor(address common.Address, transactor bind.ContractTransactor) (*ValidatorsDiamondTransactor, error) {
	contract, err := bindValidatorsDiamond(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorsDiamondTransactor{contract: contract}, nil
}

// NewValidatorsDiamondFilterer creates a new log filterer instance of ValidatorsDiamond, bound to a specific deployed contract.
func NewValidatorsDiamondFilterer(address common.Address, filterer bind.ContractFilterer) (*ValidatorsDiamondFilterer, error) {
	contract, err := bindValidatorsDiamond(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ValidatorsDiamondFilterer{contract: contract}, nil
}

// bindValidatorsDiamond binds a generic wrapper to an already deployed contract.
func bindValidatorsDiamond(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ValidatorsDiamondABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorsDiamond *ValidatorsDiamondRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorsDiamond.Contract.ValidatorsDiamondCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorsDiamond *ValidatorsDiamondRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorsDiamond.Contract.ValidatorsDiamondTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorsDiamond *ValidatorsDiamondRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorsDiamond.Contract.ValidatorsDiamondTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorsDiamond *ValidatorsDiamondCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorsDiamond.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorsDiamond *ValidatorsDiamondTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorsDiamond.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorsDiamond *ValidatorsDiamondTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorsDiamond.Contract.contract.Transact(opts, method, params...)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_ValidatorsDiamond *ValidatorsDiamondTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _ValidatorsDiamond.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_ValidatorsDiamond *ValidatorsDiamondSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _ValidatorsDiamond.Contract.Fallback(&_ValidatorsDiamond.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_ValidatorsDiamond *ValidatorsDiamondTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _ValidatorsDiamond.Contract.Fallback(&_ValidatorsDiamond.TransactOpts, calldata)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_ValidatorsDiamond *ValidatorsDiamondTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorsDiamond.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_ValidatorsDiamond *ValidatorsDiamondSession) Receive() (*types.Transaction, error) {
	return _ValidatorsDiamond.Contract.Receive(&_ValidatorsDiamond.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_ValidatorsDiamond *ValidatorsDiamondTransactorSession) Receive() (*types.Transaction, error) {
	return _ValidatorsDiamond.Contract.Receive(&_ValidatorsDiamond.TransactOpts)
}

// ValidatorsEventsMetaData contains all meta data concerning the ValidatorsEvents contract.
var ValidatorsEventsMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"key_share_G1\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"key_share_G1_correctness_proof\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[4]\",\"name\":\"key_share_G2\",\"type\":\"uint256[4]\"}],\"name\":\"KeyShareSubmission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dkgStarts\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"registrationEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shareDistributionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"disputeEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"keyShareSubmissionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mpkSubmissionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gpkjSubmissionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gpkjDisputeEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dkgComplete\",\"type\":\"uint256\"}],\"name\":\"RegistrationOpen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"encrypted_shares\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[2][]\",\"name\":\"commitments\",\"type\":\"uint256[2][]\"}],\"name\":\"ShareDistribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share3\",\"type\":\"uint256\"}],\"name\":\"ValidatorMember\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"validatorCount\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"ethHeight\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"madHeight\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey3\",\"type\":\"uint256\"}],\"name\":\"ValidatorSet\",\"type\":\"event\"}]",
}

// ValidatorsEventsABI is the input ABI used to generate the binding from.
// Deprecated: Use ValidatorsEventsMetaData.ABI instead.
var ValidatorsEventsABI = ValidatorsEventsMetaData.ABI

// ValidatorsEvents is an auto generated Go binding around an Ethereum contract.
type ValidatorsEvents struct {
	ValidatorsEventsCaller     // Read-only binding to the contract
	ValidatorsEventsTransactor // Write-only binding to the contract
	ValidatorsEventsFilterer   // Log filterer for contract events
}

// ValidatorsEventsCaller is an auto generated read-only Go binding around an Ethereum contract.
type ValidatorsEventsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorsEventsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ValidatorsEventsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorsEventsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ValidatorsEventsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorsEventsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ValidatorsEventsSession struct {
	Contract     *ValidatorsEvents // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ValidatorsEventsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ValidatorsEventsCallerSession struct {
	Contract *ValidatorsEventsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// ValidatorsEventsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ValidatorsEventsTransactorSession struct {
	Contract     *ValidatorsEventsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// ValidatorsEventsRaw is an auto generated low-level Go binding around an Ethereum contract.
type ValidatorsEventsRaw struct {
	Contract *ValidatorsEvents // Generic contract binding to access the raw methods on
}

// ValidatorsEventsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ValidatorsEventsCallerRaw struct {
	Contract *ValidatorsEventsCaller // Generic read-only contract binding to access the raw methods on
}

// ValidatorsEventsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ValidatorsEventsTransactorRaw struct {
	Contract *ValidatorsEventsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewValidatorsEvents creates a new instance of ValidatorsEvents, bound to a specific deployed contract.
func NewValidatorsEvents(address common.Address, backend bind.ContractBackend) (*ValidatorsEvents, error) {
	contract, err := bindValidatorsEvents(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ValidatorsEvents{ValidatorsEventsCaller: ValidatorsEventsCaller{contract: contract}, ValidatorsEventsTransactor: ValidatorsEventsTransactor{contract: contract}, ValidatorsEventsFilterer: ValidatorsEventsFilterer{contract: contract}}, nil
}

// NewValidatorsEventsCaller creates a new read-only instance of ValidatorsEvents, bound to a specific deployed contract.
func NewValidatorsEventsCaller(address common.Address, caller bind.ContractCaller) (*ValidatorsEventsCaller, error) {
	contract, err := bindValidatorsEvents(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorsEventsCaller{contract: contract}, nil
}

// NewValidatorsEventsTransactor creates a new write-only instance of ValidatorsEvents, bound to a specific deployed contract.
func NewValidatorsEventsTransactor(address common.Address, transactor bind.ContractTransactor) (*ValidatorsEventsTransactor, error) {
	contract, err := bindValidatorsEvents(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorsEventsTransactor{contract: contract}, nil
}

// NewValidatorsEventsFilterer creates a new log filterer instance of ValidatorsEvents, bound to a specific deployed contract.
func NewValidatorsEventsFilterer(address common.Address, filterer bind.ContractFilterer) (*ValidatorsEventsFilterer, error) {
	contract, err := bindValidatorsEvents(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ValidatorsEventsFilterer{contract: contract}, nil
}

// bindValidatorsEvents binds a generic wrapper to an already deployed contract.
func bindValidatorsEvents(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ValidatorsEventsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorsEvents *ValidatorsEventsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorsEvents.Contract.ValidatorsEventsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorsEvents *ValidatorsEventsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorsEvents.Contract.ValidatorsEventsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorsEvents *ValidatorsEventsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorsEvents.Contract.ValidatorsEventsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorsEvents *ValidatorsEventsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorsEvents.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorsEvents *ValidatorsEventsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorsEvents.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorsEvents *ValidatorsEventsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorsEvents.Contract.contract.Transact(opts, method, params...)
}

// ValidatorsEventsKeyShareSubmissionIterator is returned from FilterKeyShareSubmission and is used to iterate over the raw logs and unpacked data for KeyShareSubmission events raised by the ValidatorsEvents contract.
type ValidatorsEventsKeyShareSubmissionIterator struct {
	Event *ValidatorsEventsKeyShareSubmission // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsEventsKeyShareSubmissionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsEventsKeyShareSubmission)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsEventsKeyShareSubmission)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsEventsKeyShareSubmissionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsEventsKeyShareSubmissionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsEventsKeyShareSubmission represents a KeyShareSubmission event raised by the ValidatorsEvents contract.
type ValidatorsEventsKeyShareSubmission struct {
	Issuer                     common.Address
	KeyShareG1                 [2]*big.Int
	KeyShareG1CorrectnessProof [2]*big.Int
	KeyShareG2                 [4]*big.Int
	Raw                        types.Log // Blockchain specific contextual infos
}

// FilterKeyShareSubmission is a free log retrieval operation binding the contract event 0xb0ee36c3780de716eb6c83687f433ae2558a6923e090fd238b657fb6c896badc.
//
// Solidity: event KeyShareSubmission(address issuer, uint256[2] key_share_G1, uint256[2] key_share_G1_correctness_proof, uint256[4] key_share_G2)
func (_ValidatorsEvents *ValidatorsEventsFilterer) FilterKeyShareSubmission(opts *bind.FilterOpts) (*ValidatorsEventsKeyShareSubmissionIterator, error) {

	logs, sub, err := _ValidatorsEvents.contract.FilterLogs(opts, "KeyShareSubmission")
	if err != nil {
		return nil, err
	}
	return &ValidatorsEventsKeyShareSubmissionIterator{contract: _ValidatorsEvents.contract, event: "KeyShareSubmission", logs: logs, sub: sub}, nil
}

// WatchKeyShareSubmission is a free log subscription operation binding the contract event 0xb0ee36c3780de716eb6c83687f433ae2558a6923e090fd238b657fb6c896badc.
//
// Solidity: event KeyShareSubmission(address issuer, uint256[2] key_share_G1, uint256[2] key_share_G1_correctness_proof, uint256[4] key_share_G2)
func (_ValidatorsEvents *ValidatorsEventsFilterer) WatchKeyShareSubmission(opts *bind.WatchOpts, sink chan<- *ValidatorsEventsKeyShareSubmission) (event.Subscription, error) {

	logs, sub, err := _ValidatorsEvents.contract.WatchLogs(opts, "KeyShareSubmission")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsEventsKeyShareSubmission)
				if err := _ValidatorsEvents.contract.UnpackLog(event, "KeyShareSubmission", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKeyShareSubmission is a log parse operation binding the contract event 0xb0ee36c3780de716eb6c83687f433ae2558a6923e090fd238b657fb6c896badc.
//
// Solidity: event KeyShareSubmission(address issuer, uint256[2] key_share_G1, uint256[2] key_share_G1_correctness_proof, uint256[4] key_share_G2)
func (_ValidatorsEvents *ValidatorsEventsFilterer) ParseKeyShareSubmission(log types.Log) (*ValidatorsEventsKeyShareSubmission, error) {
	event := new(ValidatorsEventsKeyShareSubmission)
	if err := _ValidatorsEvents.contract.UnpackLog(event, "KeyShareSubmission", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorsEventsRegistrationOpenIterator is returned from FilterRegistrationOpen and is used to iterate over the raw logs and unpacked data for RegistrationOpen events raised by the ValidatorsEvents contract.
type ValidatorsEventsRegistrationOpenIterator struct {
	Event *ValidatorsEventsRegistrationOpen // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsEventsRegistrationOpenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsEventsRegistrationOpen)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsEventsRegistrationOpen)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsEventsRegistrationOpenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsEventsRegistrationOpenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsEventsRegistrationOpen represents a RegistrationOpen event raised by the ValidatorsEvents contract.
type ValidatorsEventsRegistrationOpen struct {
	DkgStarts              *big.Int
	RegistrationEnds       *big.Int
	ShareDistributionEnds  *big.Int
	DisputeEnds            *big.Int
	KeyShareSubmissionEnds *big.Int
	MpkSubmissionEnds      *big.Int
	GpkjSubmissionEnds     *big.Int
	GpkjDisputeEnds        *big.Int
	DkgComplete            *big.Int
	Raw                    types.Log // Blockchain specific contextual infos
}

// FilterRegistrationOpen is a free log retrieval operation binding the contract event 0x9c6f8368fe7e77e8cb9438744581403bcb3f53298e517f04c1b8475487402e97.
//
// Solidity: event RegistrationOpen(uint256 dkgStarts, uint256 registrationEnds, uint256 shareDistributionEnds, uint256 disputeEnds, uint256 keyShareSubmissionEnds, uint256 mpkSubmissionEnds, uint256 gpkjSubmissionEnds, uint256 gpkjDisputeEnds, uint256 dkgComplete)
func (_ValidatorsEvents *ValidatorsEventsFilterer) FilterRegistrationOpen(opts *bind.FilterOpts) (*ValidatorsEventsRegistrationOpenIterator, error) {

	logs, sub, err := _ValidatorsEvents.contract.FilterLogs(opts, "RegistrationOpen")
	if err != nil {
		return nil, err
	}
	return &ValidatorsEventsRegistrationOpenIterator{contract: _ValidatorsEvents.contract, event: "RegistrationOpen", logs: logs, sub: sub}, nil
}

// WatchRegistrationOpen is a free log subscription operation binding the contract event 0x9c6f8368fe7e77e8cb9438744581403bcb3f53298e517f04c1b8475487402e97.
//
// Solidity: event RegistrationOpen(uint256 dkgStarts, uint256 registrationEnds, uint256 shareDistributionEnds, uint256 disputeEnds, uint256 keyShareSubmissionEnds, uint256 mpkSubmissionEnds, uint256 gpkjSubmissionEnds, uint256 gpkjDisputeEnds, uint256 dkgComplete)
func (_ValidatorsEvents *ValidatorsEventsFilterer) WatchRegistrationOpen(opts *bind.WatchOpts, sink chan<- *ValidatorsEventsRegistrationOpen) (event.Subscription, error) {

	logs, sub, err := _ValidatorsEvents.contract.WatchLogs(opts, "RegistrationOpen")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsEventsRegistrationOpen)
				if err := _ValidatorsEvents.contract.UnpackLog(event, "RegistrationOpen", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegistrationOpen is a log parse operation binding the contract event 0x9c6f8368fe7e77e8cb9438744581403bcb3f53298e517f04c1b8475487402e97.
//
// Solidity: event RegistrationOpen(uint256 dkgStarts, uint256 registrationEnds, uint256 shareDistributionEnds, uint256 disputeEnds, uint256 keyShareSubmissionEnds, uint256 mpkSubmissionEnds, uint256 gpkjSubmissionEnds, uint256 gpkjDisputeEnds, uint256 dkgComplete)
func (_ValidatorsEvents *ValidatorsEventsFilterer) ParseRegistrationOpen(log types.Log) (*ValidatorsEventsRegistrationOpen, error) {
	event := new(ValidatorsEventsRegistrationOpen)
	if err := _ValidatorsEvents.contract.UnpackLog(event, "RegistrationOpen", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorsEventsShareDistributionIterator is returned from FilterShareDistribution and is used to iterate over the raw logs and unpacked data for ShareDistribution events raised by the ValidatorsEvents contract.
type ValidatorsEventsShareDistributionIterator struct {
	Event *ValidatorsEventsShareDistribution // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsEventsShareDistributionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsEventsShareDistribution)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsEventsShareDistribution)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsEventsShareDistributionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsEventsShareDistributionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsEventsShareDistribution represents a ShareDistribution event raised by the ValidatorsEvents contract.
type ValidatorsEventsShareDistribution struct {
	Issuer          common.Address
	Index           *big.Int
	EncryptedShares []*big.Int
	Commitments     [][2]*big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterShareDistribution is a free log retrieval operation binding the contract event 0xa84d294194d6169652a99150fd2ef10e18b0d2caa10beeea237bbddcc6e22b10.
//
// Solidity: event ShareDistribution(address issuer, uint256 index, uint256[] encrypted_shares, uint256[2][] commitments)
func (_ValidatorsEvents *ValidatorsEventsFilterer) FilterShareDistribution(opts *bind.FilterOpts) (*ValidatorsEventsShareDistributionIterator, error) {

	logs, sub, err := _ValidatorsEvents.contract.FilterLogs(opts, "ShareDistribution")
	if err != nil {
		return nil, err
	}
	return &ValidatorsEventsShareDistributionIterator{contract: _ValidatorsEvents.contract, event: "ShareDistribution", logs: logs, sub: sub}, nil
}

// WatchShareDistribution is a free log subscription operation binding the contract event 0xa84d294194d6169652a99150fd2ef10e18b0d2caa10beeea237bbddcc6e22b10.
//
// Solidity: event ShareDistribution(address issuer, uint256 index, uint256[] encrypted_shares, uint256[2][] commitments)
func (_ValidatorsEvents *ValidatorsEventsFilterer) WatchShareDistribution(opts *bind.WatchOpts, sink chan<- *ValidatorsEventsShareDistribution) (event.Subscription, error) {

	logs, sub, err := _ValidatorsEvents.contract.WatchLogs(opts, "ShareDistribution")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsEventsShareDistribution)
				if err := _ValidatorsEvents.contract.UnpackLog(event, "ShareDistribution", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseShareDistribution is a log parse operation binding the contract event 0xa84d294194d6169652a99150fd2ef10e18b0d2caa10beeea237bbddcc6e22b10.
//
// Solidity: event ShareDistribution(address issuer, uint256 index, uint256[] encrypted_shares, uint256[2][] commitments)
func (_ValidatorsEvents *ValidatorsEventsFilterer) ParseShareDistribution(log types.Log) (*ValidatorsEventsShareDistribution, error) {
	event := new(ValidatorsEventsShareDistribution)
	if err := _ValidatorsEvents.contract.UnpackLog(event, "ShareDistribution", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorsEventsValidatorMemberIterator is returned from FilterValidatorMember and is used to iterate over the raw logs and unpacked data for ValidatorMember events raised by the ValidatorsEvents contract.
type ValidatorsEventsValidatorMemberIterator struct {
	Event *ValidatorsEventsValidatorMember // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsEventsValidatorMemberIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsEventsValidatorMember)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsEventsValidatorMember)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsEventsValidatorMemberIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsEventsValidatorMemberIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsEventsValidatorMember represents a ValidatorMember event raised by the ValidatorsEvents contract.
type ValidatorsEventsValidatorMember struct {
	Account common.Address
	Epoch   *big.Int
	Index   *big.Int
	Share0  *big.Int
	Share1  *big.Int
	Share2  *big.Int
	Share3  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterValidatorMember is a free log retrieval operation binding the contract event 0x113b129fac2dde341b9fbbec2bb79a95b9945b0e80fda711fc8ae5c7b0ea83b0.
//
// Solidity: event ValidatorMember(address account, uint256 epoch, uint256 index, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_ValidatorsEvents *ValidatorsEventsFilterer) FilterValidatorMember(opts *bind.FilterOpts) (*ValidatorsEventsValidatorMemberIterator, error) {

	logs, sub, err := _ValidatorsEvents.contract.FilterLogs(opts, "ValidatorMember")
	if err != nil {
		return nil, err
	}
	return &ValidatorsEventsValidatorMemberIterator{contract: _ValidatorsEvents.contract, event: "ValidatorMember", logs: logs, sub: sub}, nil
}

// WatchValidatorMember is a free log subscription operation binding the contract event 0x113b129fac2dde341b9fbbec2bb79a95b9945b0e80fda711fc8ae5c7b0ea83b0.
//
// Solidity: event ValidatorMember(address account, uint256 epoch, uint256 index, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_ValidatorsEvents *ValidatorsEventsFilterer) WatchValidatorMember(opts *bind.WatchOpts, sink chan<- *ValidatorsEventsValidatorMember) (event.Subscription, error) {

	logs, sub, err := _ValidatorsEvents.contract.WatchLogs(opts, "ValidatorMember")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsEventsValidatorMember)
				if err := _ValidatorsEvents.contract.UnpackLog(event, "ValidatorMember", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorMember is a log parse operation binding the contract event 0x113b129fac2dde341b9fbbec2bb79a95b9945b0e80fda711fc8ae5c7b0ea83b0.
//
// Solidity: event ValidatorMember(address account, uint256 epoch, uint256 index, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_ValidatorsEvents *ValidatorsEventsFilterer) ParseValidatorMember(log types.Log) (*ValidatorsEventsValidatorMember, error) {
	event := new(ValidatorsEventsValidatorMember)
	if err := _ValidatorsEvents.contract.UnpackLog(event, "ValidatorMember", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorsEventsValidatorSetIterator is returned from FilterValidatorSet and is used to iterate over the raw logs and unpacked data for ValidatorSet events raised by the ValidatorsEvents contract.
type ValidatorsEventsValidatorSetIterator struct {
	Event *ValidatorsEventsValidatorSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsEventsValidatorSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsEventsValidatorSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsEventsValidatorSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsEventsValidatorSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsEventsValidatorSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsEventsValidatorSet represents a ValidatorSet event raised by the ValidatorsEvents contract.
type ValidatorsEventsValidatorSet struct {
	ValidatorCount uint8
	Epoch          *big.Int
	EthHeight      uint32
	MadHeight      uint32
	GroupKey0      *big.Int
	GroupKey1      *big.Int
	GroupKey2      *big.Int
	GroupKey3      *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterValidatorSet is a free log retrieval operation binding the contract event 0x1c85ff1efe0a905f8feca811e617102cb7ec896aded693eb96366c8ef22bb09f.
//
// Solidity: event ValidatorSet(uint8 validatorCount, uint256 epoch, uint32 ethHeight, uint32 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_ValidatorsEvents *ValidatorsEventsFilterer) FilterValidatorSet(opts *bind.FilterOpts) (*ValidatorsEventsValidatorSetIterator, error) {

	logs, sub, err := _ValidatorsEvents.contract.FilterLogs(opts, "ValidatorSet")
	if err != nil {
		return nil, err
	}
	return &ValidatorsEventsValidatorSetIterator{contract: _ValidatorsEvents.contract, event: "ValidatorSet", logs: logs, sub: sub}, nil
}

// WatchValidatorSet is a free log subscription operation binding the contract event 0x1c85ff1efe0a905f8feca811e617102cb7ec896aded693eb96366c8ef22bb09f.
//
// Solidity: event ValidatorSet(uint8 validatorCount, uint256 epoch, uint32 ethHeight, uint32 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_ValidatorsEvents *ValidatorsEventsFilterer) WatchValidatorSet(opts *bind.WatchOpts, sink chan<- *ValidatorsEventsValidatorSet) (event.Subscription, error) {

	logs, sub, err := _ValidatorsEvents.contract.WatchLogs(opts, "ValidatorSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsEventsValidatorSet)
				if err := _ValidatorsEvents.contract.UnpackLog(event, "ValidatorSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorSet is a log parse operation binding the contract event 0x1c85ff1efe0a905f8feca811e617102cb7ec896aded693eb96366c8ef22bb09f.
//
// Solidity: event ValidatorSet(uint8 validatorCount, uint256 epoch, uint32 ethHeight, uint32 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_ValidatorsEvents *ValidatorsEventsFilterer) ParseValidatorSet(log types.Log) (*ValidatorsEventsValidatorSet, error) {
	event := new(ValidatorsEventsValidatorSet)
	if err := _ValidatorsEvents.contract.UnpackLog(event, "ValidatorSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
