// Generated by ifacemaker. DO NOT EDIT.

package bindings

import (
	"math/big"

	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
)

// IValidatorsTransactor ...
type IValidatorsTransactor interface {
	// AddValidator is a paid mutator transaction binding the contract method 0xeb6320c7.
	//
	// Solidity: function addValidator(address _validator, uint256[2] _madID) returns(uint8)
	AddValidator(opts *bind.TransactOpts, _validator common.Address, _madID [2]*big.Int) (*types.Transaction, error)
	// Burn is a paid mutator transaction binding the contract method 0x89afcb44.
	//
	// Solidity: function burn(address who) returns()
	Burn(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error)
	// ConfirmValidators is a paid mutator transaction binding the contract method 0x35c6a163.
	//
	// Solidity: function confirmValidators() returns(bool)
	ConfirmValidators(opts *bind.TransactOpts) (*types.Transaction, error)
	// Fine is a paid mutator transaction binding the contract method 0xdb1e4662.
	//
	// Solidity: function fine(address who, uint256 amount) returns(bool)
	Fine(opts *bind.TransactOpts, who common.Address, amount *big.Int) (*types.Transaction, error)
	// InitializeParticipants is a paid mutator transaction binding the contract method 0xee8420dd.
	//
	// Solidity: function initializeParticipants(address registry) returns()
	InitializeParticipants(opts *bind.TransactOpts, registry common.Address) (*types.Transaction, error)
	// InitializeSnapshots is a paid mutator transaction binding the contract method 0x20d9a246.
	//
	// Solidity: function initializeSnapshots(address registry) returns()
	InitializeSnapshots(opts *bind.TransactOpts, registry common.Address) (*types.Transaction, error)
	// InitializeStaking is a paid mutator transaction binding the contract method 0x04ad7a83.
	//
	// Solidity: function initializeStaking(address registry) returns()
	InitializeStaking(opts *bind.TransactOpts, registry common.Address) (*types.Transaction, error)
	// LockRewardFor is a paid mutator transaction binding the contract method 0x0ddb07ad.
	//
	// Solidity: function lockRewardFor(address who, uint256 amountReward, uint256 unlockEpoch) returns(bool)
	LockRewardFor(opts *bind.TransactOpts, who common.Address, amountReward *big.Int, unlockEpoch *big.Int) (*types.Transaction, error)
	// LockStake is a paid mutator transaction binding the contract method 0xf50ddb67.
	//
	// Solidity: function lockStake(uint256 amount) returns(bool)
	LockStake(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error)
	// LockStakeFor is a paid mutator transaction binding the contract method 0x461cbdcf.
	//
	// Solidity: function lockStakeFor(address who, uint256 amount) returns(bool)
	LockStakeFor(opts *bind.TransactOpts, who common.Address, amount *big.Int) (*types.Transaction, error)
	// MajorFine is a paid mutator transaction binding the contract method 0x57b4f82a.
	//
	// Solidity: function majorFine(address who) returns()
	MajorFine(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error)
	// MinorFine is a paid mutator transaction binding the contract method 0xd2a2c55c.
	//
	// Solidity: function minorFine(address who) returns()
	MinorFine(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error)
	// RemoveValidator is a paid mutator transaction binding the contract method 0x844469b2.
	//
	// Solidity: function removeValidator(address _validator, uint256[2] _madID) returns(uint8)
	RemoveValidator(opts *bind.TransactOpts, _validator common.Address, _madID [2]*big.Int) (*types.Transaction, error)
	// RequestUnlockStake is a paid mutator transaction binding the contract method 0xaeaf8812.
	//
	// Solidity: function requestUnlockStake() returns()
	RequestUnlockStake(opts *bind.TransactOpts) (*types.Transaction, error)
	// RequestUnlockStakeFor is a paid mutator transaction binding the contract method 0x4fcf2b72.
	//
	// Solidity: function requestUnlockStakeFor(address who) returns()
	RequestUnlockStakeFor(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error)
	// SetChainId is a paid mutator transaction binding the contract method 0xa179f124.
	//
	// Solidity: function setChainId(uint32 _chainId) returns()
	SetChainId(opts *bind.TransactOpts, _chainId uint32) (*types.Transaction, error)
	// SetEpoch is a paid mutator transaction binding the contract method 0x0ceb2cef.
	//
	// Solidity: function setEpoch(uint256 ns) returns()
	SetEpoch(opts *bind.TransactOpts, ns *big.Int) (*types.Transaction, error)
	// SetEpochDelay is a paid mutator transaction binding the contract method 0xbd695a43.
	//
	// Solidity: function setEpochDelay(uint256 _epochDelay) returns()
	SetEpochDelay(opts *bind.TransactOpts, _epochDelay *big.Int) (*types.Transaction, error)
	// SetMajorStakeFine is a paid mutator transaction binding the contract method 0x78146c2f.
	//
	// Solidity: function setMajorStakeFine(uint256 _majorStakeFine) returns()
	SetMajorStakeFine(opts *bind.TransactOpts, _majorStakeFine *big.Int) (*types.Transaction, error)
	// SetMinEthSnapshotSize is a paid mutator transaction binding the contract method 0x0d81dce4.
	//
	// Solidity: function setMinEthSnapshotSize(uint256 _minSize) returns()
	SetMinEthSnapshotSize(opts *bind.TransactOpts, _minSize *big.Int) (*types.Transaction, error)
	// SetMinMadSnapshotSize is a paid mutator transaction binding the contract method 0x99e33e3d.
	//
	// Solidity: function setMinMadSnapshotSize(uint256 _minSize) returns()
	SetMinMadSnapshotSize(opts *bind.TransactOpts, _minSize *big.Int) (*types.Transaction, error)
	// SetMinimumStake is a paid mutator transaction binding the contract method 0x233e9903.
	//
	// Solidity: function setMinimumStake(uint256 _minimumStake) returns()
	SetMinimumStake(opts *bind.TransactOpts, _minimumStake *big.Int) (*types.Transaction, error)
	// SetMinorStakeFine is a paid mutator transaction binding the contract method 0x29693c5c.
	//
	// Solidity: function setMinorStakeFine(uint256 _minorStakeFine) returns()
	SetMinorStakeFine(opts *bind.TransactOpts, _minorStakeFine *big.Int) (*types.Transaction, error)
	// SetRewardAmount is a paid mutator transaction binding the contract method 0xa8a65a78.
	//
	// Solidity: function setRewardAmount(uint256 _rewardAmount) returns()
	SetRewardAmount(opts *bind.TransactOpts, _rewardAmount *big.Int) (*types.Transaction, error)
	// SetRewardBonus is a paid mutator transaction binding the contract method 0xf95d80fa.
	//
	// Solidity: function setRewardBonus(uint256 _rewardBonus) returns()
	SetRewardBonus(opts *bind.TransactOpts, _rewardBonus *big.Int) (*types.Transaction, error)
	// SetSnapshotDesperationDelay is a paid mutator transaction binding the contract method 0xde8fa4a5.
	//
	// Solidity: function setSnapshotDesperationDelay(uint256 _minSize) returns()
	SetSnapshotDesperationDelay(opts *bind.TransactOpts, _minSize *big.Int) (*types.Transaction, error)
	// SetSnapshotDesperationFactor is a paid mutator transaction binding the contract method 0xeb157064.
	//
	// Solidity: function setSnapshotDesperationFactor(uint256 _minSize) returns()
	SetSnapshotDesperationFactor(opts *bind.TransactOpts, _minSize *big.Int) (*types.Transaction, error)
	// SetValidatorMaxCount is a paid mutator transaction binding the contract method 0x2cab37f7.
	//
	// Solidity: function setValidatorMaxCount(uint8 max) returns()
	SetValidatorMaxCount(opts *bind.TransactOpts, max uint8) (*types.Transaction, error)
	// Snapshot is a paid mutator transaction binding the contract method 0x08ca1f25.
	//
	// Solidity: function snapshot(bytes _signatureGroup, bytes _bclaims) returns(bool)
	Snapshot(opts *bind.TransactOpts, _signatureGroup []byte, _bclaims []byte) (*types.Transaction, error)
	// UnlockReward is a paid mutator transaction binding the contract method 0xf1b7f4bf.
	//
	// Solidity: function unlockReward() returns(bool)
	UnlockReward(opts *bind.TransactOpts) (*types.Transaction, error)
	// UnlockRewardFor is a paid mutator transaction binding the contract method 0x7f91bd69.
	//
	// Solidity: function unlockRewardFor(address who) returns(bool)
	UnlockRewardFor(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error)
	// UnlockStake is a paid mutator transaction binding the contract method 0xecd8c06a.
	//
	// Solidity: function unlockStake(uint256 amount) returns(bool)
	UnlockStake(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error)
	// UnlockStakeFor is a paid mutator transaction binding the contract method 0xe29dda92.
	//
	// Solidity: function unlockStakeFor(address who, uint256 amount) returns(bool)
	UnlockStakeFor(opts *bind.TransactOpts, who common.Address, amount *big.Int) (*types.Transaction, error)
	// ValidatorCount is a paid mutator transaction binding the contract method 0x0f43a677.
	//
	// Solidity: function validatorCount() returns(uint8)
	ValidatorCount(opts *bind.TransactOpts) (*types.Transaction, error)
	// ValidatorMaxCount is a paid mutator transaction binding the contract method 0x09f0d45d.
	//
	// Solidity: function validatorMaxCount() returns(uint8)
	ValidatorMaxCount(opts *bind.TransactOpts) (*types.Transaction, error)
	// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
	//
	// Solidity: function withdraw(uint256 amount) returns(bool)
	Withdraw(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error)
	// WithdrawFor is a paid mutator transaction binding the contract method 0xdb518db2.
	//
	// Solidity: function withdrawFor(address who, uint256 amount) returns(bool)
	WithdrawFor(opts *bind.TransactOpts, who common.Address, amount *big.Int) (*types.Transaction, error)
	// WithdrawReward is a paid mutator transaction binding the contract method 0x523a3f08.
	//
	// Solidity: function withdrawReward(uint256 amount) returns(bool)
	WithdrawReward(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error)
}
