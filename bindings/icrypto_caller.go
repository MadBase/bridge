// Generated by ifacemaker. DO NOT EDIT.

package bindings

import (
	"math/big"

	"github.com/ethereum/go-ethereum/accounts/abi/bind"
)

// ICryptoCaller ...
type ICryptoCaller interface {
	// AggregateSignatures is a free data retrieval call binding the contract method 0xf022e061.
	//
	// Solidity: function AggregateSignatures(uint256[2][] sigs, uint256[] indices, uint256 threshold, uint256[] invArray) view returns(uint256[2])
	AggregateSignatures(opts *bind.CallOpts, sigs [][2]*big.Int, indices []*big.Int, threshold *big.Int, invArray []*big.Int) ([2]*big.Int, error)
	// HashToG1 is a free data retrieval call binding the contract method 0x95add79c.
	//
	// Solidity: function HashToG1(bytes message) view returns(uint256[2] h)
	HashToG1(opts *bind.CallOpts, message []byte) ([2]*big.Int, error)
	// LagrangeInterpolationG1 is a free data retrieval call binding the contract method 0x16534acd.
	//
	// Solidity: function LagrangeInterpolationG1(uint256[2][] pointsG1, uint256[] indices, uint256 threshold, uint256[] invArray) view returns(uint256[2])
	LagrangeInterpolationG1(opts *bind.CallOpts, pointsG1 [][2]*big.Int, indices []*big.Int, threshold *big.Int, invArray []*big.Int) ([2]*big.Int, error)
	// Sign is a free data retrieval call binding the contract method 0x6bdf477c.
	//
	// Solidity: function Sign(bytes message, uint256 privK) view returns(uint256[2] sig)
	Sign(opts *bind.CallOpts, message []byte, privK *big.Int) ([2]*big.Int, error)
	// Verify is a free data retrieval call binding the contract method 0x06367587.
	//
	// Solidity: function Verify(bytes message, uint256[2] sig, uint256[4] pubK) view returns(bool v)
	Verify(opts *bind.CallOpts, message []byte, sig [2]*big.Int, pubK [4]*big.Int) (bool, error)
	// BaseToG1 is a free data retrieval call binding the contract method 0x8b6eb76e.
	//
	// Solidity: function baseToG1(uint256 t) view returns(uint256[2] h)
	BaseToG1(opts *bind.CallOpts, t *big.Int) ([2]*big.Int, error)
	// Bn128Add is a free data retrieval call binding the contract method 0xe664725b.
	//
	// Solidity: function bn128_add(uint256[4] input) view returns(uint256[2] result)
	Bn128Add(opts *bind.CallOpts, input [4]*big.Int) ([2]*big.Int, error)
	// Bn128CheckPairing is a free data retrieval call binding the contract method 0xb87cbafc.
	//
	// Solidity: function bn128_check_pairing(uint256[12] input) view returns(bool)
	Bn128CheckPairing(opts *bind.CallOpts, input [12]*big.Int) (bool, error)
	// Bn128IsOnCurve is a free data retrieval call binding the contract method 0xf4d7d33d.
	//
	// Solidity: function bn128_is_on_curve(uint256[2] point) pure returns(bool)
	Bn128IsOnCurve(opts *bind.CallOpts, point [2]*big.Int) (bool, error)
	// Bn128Multiply is a free data retrieval call binding the contract method 0x82688f14.
	//
	// Solidity: function bn128_multiply(uint256[3] input) view returns(uint256[2] result)
	Bn128Multiply(opts *bind.CallOpts, input [3]*big.Int) ([2]*big.Int, error)
	// CheckIndices is a free data retrieval call binding the contract method 0x80f4a922.
	//
	// Solidity: function checkIndices(uint256[] honestIndices, uint256[] dishonestIndices, uint256 n) pure returns(bool validIndices)
	CheckIndices(opts *bind.CallOpts, honestIndices []*big.Int, dishonestIndices []*big.Int, n *big.Int) (bool, error)
	// CheckInverses is a free data retrieval call binding the contract method 0xe480a92e.
	//
	// Solidity: function checkInverses(uint256[] invArray, uint256 maxIndex) pure returns(bool)
	CheckInverses(opts *bind.CallOpts, invArray []*big.Int, maxIndex *big.Int) (bool, error)
	// ComputeArrayMax is a free data retrieval call binding the contract method 0xa218e426.
	//
	// Solidity: function computeArrayMax(uint256[] uint256Array) pure returns(uint256)
	ComputeArrayMax(opts *bind.CallOpts, uint256Array []*big.Int) (*big.Int, error)
	// DleqVerify is a free data retrieval call binding the contract method 0xe81ee0e3.
	//
	// Solidity: function dleq_verify(uint256[2] x1, uint256[2] y1, uint256[2] x2, uint256[2] y2, uint256[2] proof) view returns(bool proof_is_valid)
	DleqVerify(opts *bind.CallOpts, x1 [2]*big.Int, y1 [2]*big.Int, x2 [2]*big.Int, y2 [2]*big.Int, proof [2]*big.Int) (bool, error)
	// Expmod is a free data retrieval call binding the contract method 0x783ce458.
	//
	// Solidity: function expmod(uint256 base, uint256 e, uint256 m) view returns(uint256 result)
	Expmod(opts *bind.CallOpts, base *big.Int, e *big.Int, m *big.Int) (*big.Int, error)
	// HashToBase is a free data retrieval call binding the contract method 0x38529ab4.
	//
	// Solidity: function hashToBase(bytes message, bytes1 c0, bytes1 c1) pure returns(uint256 t)
	HashToBase(opts *bind.CallOpts, message []byte, c0 [1]byte, c1 [1]byte) (*big.Int, error)
	// Invert is a free data retrieval call binding the contract method 0x7351ee37.
	//
	// Solidity: function invert(uint256 t) view returns(uint256 s)
	Invert(opts *bind.CallOpts, t *big.Int) (*big.Int, error)
	// Legendre is a free data retrieval call binding the contract method 0x6ef064a4.
	//
	// Solidity: function legendre(uint256 t) view returns(int256 chi)
	Legendre(opts *bind.CallOpts, t *big.Int) (*big.Int, error)
	// LiRjPartialConst is a free data retrieval call binding the contract method 0x58ef876a.
	//
	// Solidity: function liRjPartialConst(uint256 k, uint256 j, uint256[] invArray) pure returns(uint256)
	LiRjPartialConst(opts *bind.CallOpts, k *big.Int, j *big.Int, invArray []*big.Int) (*big.Int, error)
	// Neg is a free data retrieval call binding the contract method 0x77d2f203.
	//
	// Solidity: function neg(uint256 t) pure returns(uint256 s)
	Neg(opts *bind.CallOpts, t *big.Int) (*big.Int, error)
	// SafeSigningPoint is a free data retrieval call binding the contract method 0x96d95a6f.
	//
	// Solidity: function safeSigningPoint(uint256[2] input) pure returns(bool)
	SafeSigningPoint(opts *bind.CallOpts, input [2]*big.Int) (bool, error)
	// Sign0 is a free data retrieval call binding the contract method 0xccba3123.
	//
	// Solidity: function sign0(uint256 t) pure returns(uint256 s)
	Sign0(opts *bind.CallOpts, t *big.Int) (*big.Int, error)
	// Sqrt is a free data retrieval call binding the contract method 0x677342ce.
	//
	// Solidity: function sqrt(uint256 t) view returns(uint256 s)
	Sqrt(opts *bind.CallOpts, t *big.Int) (*big.Int, error)
}
