mythril.mythril.mythril_config [INFO]: Using RPC settings: ('localhost', 8545, False) 
mythril.support.signatures [INFO]: Using signature database at /home/agdean/.mythril/signatures.db
mythril.laser.ethereum.svm [INFO]: LASER EVM initialized with dynamic loader: <mythril.support.loader.DynLoader object at 0x7f73a210bba8>
mythril.laser.ethereum.strategy.extensions.bounded_loops [INFO]: Loaded search strategy extension: Loop bounds (limit = 3)
mythril.laser.ethereum.plugins.plugin_loader [INFO]: Loading plugin: <mythril.laser.ethereum.plugins.implementations.mutation_pruner.MutationPruner object at 0x7f73a19d99e8>
mythril.laser.ethereum.plugins.plugin_loader [INFO]: Loading plugin: <mythril.laser.ethereum.plugins.implementations.coverage.coverage_plugin.InstructionCoveragePlugin object at 0x7f73a19d93c8>
mythril.laser.ethereum.plugins.plugin_loader [INFO]: Loading plugin: <mythril.laser.ethereum.plugins.implementations.dependency_pruner.DependencyPruner object at 0x7f73a19d99b0>
mythril.laser.ethereum.svm [INFO]: Starting message call transaction to 42409660643216637741038490702122391250209018410
mythril.laser.ethereum.svm [INFO]: Starting message call transaction, iteration: 0, 1 initial states
mythril.laser.ethereum.plugins.implementations.coverage.coverage_plugin [INFO]: Number of new instructions covered in tx 0: 898 
mythril.laser.ethereum.svm [INFO]: Finished symbolic execution
mythril.laser.ethereum.plugins.implementations.coverage.coverage_plugin [INFO]: Achieved 94.93% coverage for code: 0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063893d20e81161005b578063893d20e8146101b05780638a4e3769146101fa5780638da5cb5b1461027d578063e70a20cc146102c75761007d565b806301ffc9a714610082578063369205b4146100e757806351ff48471461012d575b600080fd5b6100cd6004803603602081101561009857600080fd5b8101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050610309565b604051808215151515815260200191505060405180910390f35b6100ef61038a565b6040518082600260200280838360005b8381101561011a5780820151818401526020810190506100ff565b5050505090500191505060405180910390f35b6101356103d5565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561017557808201518184015260208101905061015a565b50505050905090810190601f1680156101a25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101b8610473565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61020261049c565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610242578082015181840152602081019050610227565b50505050905090810190601f16801561026f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61028561053e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6102f3600480360360208110156102dd57600080fd5b8101908080359060200190929190505050610563565b6040518082815260200191505060405180910390f35b60006335e1123560e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061038357506301ffc9a760e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b61039261057b565b60016002806020026040519081016040528092919082600280156103cb576020028201915b8154815260200190600101908083116103b7575b5050505050905090565b60038054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561046b5780601f106104405761010080835404028352916020019161046b565b820191906000526020600020905b81548152906001019060200180831161044e57829003601f168201915b505050505081565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105345780601f1061050957610100808354040283529160200191610534565b820191906000526020600020905b81548152906001019060200180831161051757829003601f168201915b5050505050905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6001816002811061057057fe5b016000915090505481565b604051806040016040528060029060208202803883398082019150509050509056fea265627a7a723158202226e98a392d95c9b68ba7580f167a21b47d1f2fecae4326565eedef31ed3abf64736f6c634300050f0032 
mythril.analysis.security [INFO]: Starting analysis
mythril.mythril.mythril_analyzer [INFO]: Solver statistics: 
Query count: 105 
Solver time: 0.7382800579071045
==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: 0x076db70744172d2a00721aadd23be6a560cb122a
Function name: signature()
PC address: 1049
Estimated Gas Usage: 5176 - 7578
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], function: signature(), txdata: 0x51ff4847, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: 0x076db70744172d2a00721aadd23be6a560cb122a
Function name: _function_0x8a4e3769
PC address: 1250
Estimated Gas Usage: 5161 - 7563
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], function: unknown, txdata: 0x8a4e3769, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: 0x076db70744172d2a00721aadd23be6a560cb122a
Function name: _function_0xe70a20cc
PC address: 1391
Estimated Gas Usage: 311 - 406
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
Initial State:

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [SOMEGUY], function: unknown, txdata: 0xe70a20cc0000000000000000000000000000000000000000000000000000000000000002, value: 0x0


