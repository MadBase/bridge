// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// BClaimsParserLibraryBClaims is an auto generated low-level Go binding around an user-defined struct.
type BClaimsParserLibraryBClaims struct {
	ChainId    uint32
	Height     uint32
	TxCount    uint32
	PrevBlock  [32]byte
	TxRoot     [32]byte
	StateRoot  [32]byte
	HeaderRoot [32]byte
}

// ISnapshotsSnapshot is an auto generated low-level Go binding around an user-defined struct.
type ISnapshotsSnapshot struct {
	CommittedAt *big.Int
	BlockClaims BClaimsParserLibraryBClaims
	Signature   [2]*big.Int
}

// Participant is an auto generated low-level Go binding around an user-defined struct.
type Participant struct {
	PublicKey                   [2]*big.Int
	Nonce                       uint64
	Index                       uint64
	Phase                       uint8
	DistributedSharesHash       [32]byte
	CommitmentsFirstCoefficient [2]*big.Int
	KeyShares                   [2]*big.Int
	Gpkj                        [4]*big.Int
}

// AccessControlLibraryMetaData contains all meta data concerning the AccessControlLibrary contract.
var AccessControlLibraryMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122022b3295f971e03e3b5a3d1cfc39a1b1f9d719377e4a4c4711b84be65daa4756164736f6c634300080b0033",
}

// AccessControlLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use AccessControlLibraryMetaData.ABI instead.
var AccessControlLibraryABI = AccessControlLibraryMetaData.ABI

// AccessControlLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AccessControlLibraryMetaData.Bin instead.
var AccessControlLibraryBin = AccessControlLibraryMetaData.Bin

// DeployAccessControlLibrary deploys a new Ethereum contract, binding an instance of AccessControlLibrary to it.
func DeployAccessControlLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *AccessControlLibrary, error) {
	parsed, err := AccessControlLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(AccessControlLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &AccessControlLibrary{AccessControlLibraryCaller: AccessControlLibraryCaller{contract: contract}, AccessControlLibraryTransactor: AccessControlLibraryTransactor{contract: contract}, AccessControlLibraryFilterer: AccessControlLibraryFilterer{contract: contract}}, nil
}

// AccessControlLibrary is an auto generated Go binding around an Ethereum contract.
type AccessControlLibrary struct {
	AccessControlLibraryCaller     // Read-only binding to the contract
	AccessControlLibraryTransactor // Write-only binding to the contract
	AccessControlLibraryFilterer   // Log filterer for contract events
}

// AccessControlLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type AccessControlLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccessControlLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AccessControlLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccessControlLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AccessControlLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccessControlLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AccessControlLibrarySession struct {
	Contract     *AccessControlLibrary // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// AccessControlLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AccessControlLibraryCallerSession struct {
	Contract *AccessControlLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// AccessControlLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AccessControlLibraryTransactorSession struct {
	Contract     *AccessControlLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// AccessControlLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type AccessControlLibraryRaw struct {
	Contract *AccessControlLibrary // Generic contract binding to access the raw methods on
}

// AccessControlLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AccessControlLibraryCallerRaw struct {
	Contract *AccessControlLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// AccessControlLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AccessControlLibraryTransactorRaw struct {
	Contract *AccessControlLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAccessControlLibrary creates a new instance of AccessControlLibrary, bound to a specific deployed contract.
func NewAccessControlLibrary(address common.Address, backend bind.ContractBackend) (*AccessControlLibrary, error) {
	contract, err := bindAccessControlLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &AccessControlLibrary{AccessControlLibraryCaller: AccessControlLibraryCaller{contract: contract}, AccessControlLibraryTransactor: AccessControlLibraryTransactor{contract: contract}, AccessControlLibraryFilterer: AccessControlLibraryFilterer{contract: contract}}, nil
}

// NewAccessControlLibraryCaller creates a new read-only instance of AccessControlLibrary, bound to a specific deployed contract.
func NewAccessControlLibraryCaller(address common.Address, caller bind.ContractCaller) (*AccessControlLibraryCaller, error) {
	contract, err := bindAccessControlLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AccessControlLibraryCaller{contract: contract}, nil
}

// NewAccessControlLibraryTransactor creates a new write-only instance of AccessControlLibrary, bound to a specific deployed contract.
func NewAccessControlLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*AccessControlLibraryTransactor, error) {
	contract, err := bindAccessControlLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AccessControlLibraryTransactor{contract: contract}, nil
}

// NewAccessControlLibraryFilterer creates a new log filterer instance of AccessControlLibrary, bound to a specific deployed contract.
func NewAccessControlLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*AccessControlLibraryFilterer, error) {
	contract, err := bindAccessControlLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AccessControlLibraryFilterer{contract: contract}, nil
}

// bindAccessControlLibrary binds a generic wrapper to an already deployed contract.
func bindAccessControlLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AccessControlLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AccessControlLibrary *AccessControlLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AccessControlLibrary.Contract.AccessControlLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AccessControlLibrary *AccessControlLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccessControlLibrary.Contract.AccessControlLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AccessControlLibrary *AccessControlLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AccessControlLibrary.Contract.AccessControlLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AccessControlLibrary *AccessControlLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AccessControlLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AccessControlLibrary *AccessControlLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccessControlLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AccessControlLibrary *AccessControlLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AccessControlLibrary.Contract.contract.Transact(opts, method, params...)
}

// AccessControlledMetaData contains all meta data concerning the AccessControlled contract.
var AccessControlledMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"grantOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governance_\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50600061002561003e60201b6107691760201c565b60010180546001600160a01b0319163317905550610062565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90565b610800806100716000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063dc97805911610050578063dc97805914610089578063e348da131461009c578063fad8b32a146100af57600080fd5b8063605361721461006c578063ab033ea914610076575b600080fd5b6100746100c2565b005b61007461008436600461078d565b6101ec565b61007461009736600461078d565b61033b565b6100746100aa36600461078d565b61048a565b6100746100bd36600461078d565b6105fb565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520c547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff1633146101af576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f41636365737320436f6e74726f6c3a206f776e657273686970206e6f7420677260448201527f616e74656400000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6002810180547fffffffffffffffffffffffff00000000000000000000000000000000000000009081169091556001909101805490911633179055565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff1633146102d4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e657220697320616c60448201527f6c6f77656400000000000000000000000000000000000000000000000000000060648201526084016101a6565b507f31434318735a8e6385da596be365952169e52986860b974818986b522d23520d80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff163314610423576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e657220697320616c60448201527f6c6f77656400000000000000000000000000000000000000000000000000000060648201526084016101a6565b507f31434318735a8e6385da596be365952169e52986860b974818986b522d23520c80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff1633148061050057503360009081526020829052604090205460ff165b61058c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e6572206f72206f7060448201527f657261746f7220616c6c6f77656400000000000000000000000000000000000060648201526084016101a6565b5073ffffffffffffffffffffffffffffffffffffffff1660009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff1633148061067157503360009081526020829052604090205460ff165b6106fd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e6572206f72206f7060448201527f657261746f7220616c6c6f77656400000000000000000000000000000000000060648201526084016101a6565b5073ffffffffffffffffffffffffffffffffffffffff1660009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90565b60006020828403121561079f57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146107c357600080fd5b939250505056fea26469706673582212200f62826dba0ccd43cb667f8bfc6a076f38d62d03d8b2cc9d176f170aed45493164736f6c634300080b0033",
}

// AccessControlledABI is the input ABI used to generate the binding from.
// Deprecated: Use AccessControlledMetaData.ABI instead.
var AccessControlledABI = AccessControlledMetaData.ABI

// AccessControlledBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AccessControlledMetaData.Bin instead.
var AccessControlledBin = AccessControlledMetaData.Bin

// DeployAccessControlled deploys a new Ethereum contract, binding an instance of AccessControlled to it.
func DeployAccessControlled(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *AccessControlled, error) {
	parsed, err := AccessControlledMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(AccessControlledBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &AccessControlled{AccessControlledCaller: AccessControlledCaller{contract: contract}, AccessControlledTransactor: AccessControlledTransactor{contract: contract}, AccessControlledFilterer: AccessControlledFilterer{contract: contract}}, nil
}

// AccessControlled is an auto generated Go binding around an Ethereum contract.
type AccessControlled struct {
	AccessControlledCaller     // Read-only binding to the contract
	AccessControlledTransactor // Write-only binding to the contract
	AccessControlledFilterer   // Log filterer for contract events
}

// AccessControlledCaller is an auto generated read-only Go binding around an Ethereum contract.
type AccessControlledCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccessControlledTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AccessControlledTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccessControlledFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AccessControlledFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccessControlledSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AccessControlledSession struct {
	Contract     *AccessControlled // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AccessControlledCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AccessControlledCallerSession struct {
	Contract *AccessControlledCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// AccessControlledTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AccessControlledTransactorSession struct {
	Contract     *AccessControlledTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// AccessControlledRaw is an auto generated low-level Go binding around an Ethereum contract.
type AccessControlledRaw struct {
	Contract *AccessControlled // Generic contract binding to access the raw methods on
}

// AccessControlledCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AccessControlledCallerRaw struct {
	Contract *AccessControlledCaller // Generic read-only contract binding to access the raw methods on
}

// AccessControlledTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AccessControlledTransactorRaw struct {
	Contract *AccessControlledTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAccessControlled creates a new instance of AccessControlled, bound to a specific deployed contract.
func NewAccessControlled(address common.Address, backend bind.ContractBackend) (*AccessControlled, error) {
	contract, err := bindAccessControlled(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &AccessControlled{AccessControlledCaller: AccessControlledCaller{contract: contract}, AccessControlledTransactor: AccessControlledTransactor{contract: contract}, AccessControlledFilterer: AccessControlledFilterer{contract: contract}}, nil
}

// NewAccessControlledCaller creates a new read-only instance of AccessControlled, bound to a specific deployed contract.
func NewAccessControlledCaller(address common.Address, caller bind.ContractCaller) (*AccessControlledCaller, error) {
	contract, err := bindAccessControlled(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AccessControlledCaller{contract: contract}, nil
}

// NewAccessControlledTransactor creates a new write-only instance of AccessControlled, bound to a specific deployed contract.
func NewAccessControlledTransactor(address common.Address, transactor bind.ContractTransactor) (*AccessControlledTransactor, error) {
	contract, err := bindAccessControlled(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AccessControlledTransactor{contract: contract}, nil
}

// NewAccessControlledFilterer creates a new log filterer instance of AccessControlled, bound to a specific deployed contract.
func NewAccessControlledFilterer(address common.Address, filterer bind.ContractFilterer) (*AccessControlledFilterer, error) {
	contract, err := bindAccessControlled(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AccessControlledFilterer{contract: contract}, nil
}

// bindAccessControlled binds a generic wrapper to an already deployed contract.
func bindAccessControlled(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AccessControlledABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AccessControlled *AccessControlledRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AccessControlled.Contract.AccessControlledCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AccessControlled *AccessControlledRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccessControlled.Contract.AccessControlledTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AccessControlled *AccessControlledRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AccessControlled.Contract.AccessControlledTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AccessControlled *AccessControlledCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AccessControlled.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AccessControlled *AccessControlledTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccessControlled.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AccessControlled *AccessControlledTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AccessControlled.Contract.contract.Transact(opts, method, params...)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_AccessControlled *AccessControlledTransactor) GrantOperator(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _AccessControlled.contract.Transact(opts, "grantOperator", who)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_AccessControlled *AccessControlledSession) GrantOperator(who common.Address) (*types.Transaction, error) {
	return _AccessControlled.Contract.GrantOperator(&_AccessControlled.TransactOpts, who)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_AccessControlled *AccessControlledTransactorSession) GrantOperator(who common.Address) (*types.Transaction, error) {
	return _AccessControlled.Contract.GrantOperator(&_AccessControlled.TransactOpts, who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_AccessControlled *AccessControlledTransactor) GrantOwner(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _AccessControlled.contract.Transact(opts, "grantOwner", who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_AccessControlled *AccessControlledSession) GrantOwner(who common.Address) (*types.Transaction, error) {
	return _AccessControlled.Contract.GrantOwner(&_AccessControlled.TransactOpts, who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_AccessControlled *AccessControlledTransactorSession) GrantOwner(who common.Address) (*types.Transaction, error) {
	return _AccessControlled.Contract.GrantOwner(&_AccessControlled.TransactOpts, who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_AccessControlled *AccessControlledTransactor) RevokeOperator(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _AccessControlled.contract.Transact(opts, "revokeOperator", who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_AccessControlled *AccessControlledSession) RevokeOperator(who common.Address) (*types.Transaction, error) {
	return _AccessControlled.Contract.RevokeOperator(&_AccessControlled.TransactOpts, who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_AccessControlled *AccessControlledTransactorSession) RevokeOperator(who common.Address) (*types.Transaction, error) {
	return _AccessControlled.Contract.RevokeOperator(&_AccessControlled.TransactOpts, who)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_AccessControlled *AccessControlledTransactor) SetGovernance(opts *bind.TransactOpts, governance_ common.Address) (*types.Transaction, error) {
	return _AccessControlled.contract.Transact(opts, "setGovernance", governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_AccessControlled *AccessControlledSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _AccessControlled.Contract.SetGovernance(&_AccessControlled.TransactOpts, governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_AccessControlled *AccessControlledTransactorSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _AccessControlled.Contract.SetGovernance(&_AccessControlled.TransactOpts, governance_)
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_AccessControlled *AccessControlledTransactor) TakeOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccessControlled.contract.Transact(opts, "takeOwnership")
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_AccessControlled *AccessControlledSession) TakeOwnership() (*types.Transaction, error) {
	return _AccessControlled.Contract.TakeOwnership(&_AccessControlled.TransactOpts)
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_AccessControlled *AccessControlledTransactorSession) TakeOwnership() (*types.Transaction, error) {
	return _AccessControlled.Contract.TakeOwnership(&_AccessControlled.TransactOpts)
}

// AtomicCounterMetaData contains all meta data concerning the AtomicCounter contract.
var AtomicCounterMetaData = &bind.MetaData{
	ABI: "[]",
}

// AtomicCounterABI is the input ABI used to generate the binding from.
// Deprecated: Use AtomicCounterMetaData.ABI instead.
var AtomicCounterABI = AtomicCounterMetaData.ABI

// AtomicCounter is an auto generated Go binding around an Ethereum contract.
type AtomicCounter struct {
	AtomicCounterCaller     // Read-only binding to the contract
	AtomicCounterTransactor // Write-only binding to the contract
	AtomicCounterFilterer   // Log filterer for contract events
}

// AtomicCounterCaller is an auto generated read-only Go binding around an Ethereum contract.
type AtomicCounterCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AtomicCounterTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AtomicCounterTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AtomicCounterFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AtomicCounterFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AtomicCounterSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AtomicCounterSession struct {
	Contract     *AtomicCounter    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AtomicCounterCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AtomicCounterCallerSession struct {
	Contract *AtomicCounterCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// AtomicCounterTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AtomicCounterTransactorSession struct {
	Contract     *AtomicCounterTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// AtomicCounterRaw is an auto generated low-level Go binding around an Ethereum contract.
type AtomicCounterRaw struct {
	Contract *AtomicCounter // Generic contract binding to access the raw methods on
}

// AtomicCounterCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AtomicCounterCallerRaw struct {
	Contract *AtomicCounterCaller // Generic read-only contract binding to access the raw methods on
}

// AtomicCounterTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AtomicCounterTransactorRaw struct {
	Contract *AtomicCounterTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAtomicCounter creates a new instance of AtomicCounter, bound to a specific deployed contract.
func NewAtomicCounter(address common.Address, backend bind.ContractBackend) (*AtomicCounter, error) {
	contract, err := bindAtomicCounter(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &AtomicCounter{AtomicCounterCaller: AtomicCounterCaller{contract: contract}, AtomicCounterTransactor: AtomicCounterTransactor{contract: contract}, AtomicCounterFilterer: AtomicCounterFilterer{contract: contract}}, nil
}

// NewAtomicCounterCaller creates a new read-only instance of AtomicCounter, bound to a specific deployed contract.
func NewAtomicCounterCaller(address common.Address, caller bind.ContractCaller) (*AtomicCounterCaller, error) {
	contract, err := bindAtomicCounter(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AtomicCounterCaller{contract: contract}, nil
}

// NewAtomicCounterTransactor creates a new write-only instance of AtomicCounter, bound to a specific deployed contract.
func NewAtomicCounterTransactor(address common.Address, transactor bind.ContractTransactor) (*AtomicCounterTransactor, error) {
	contract, err := bindAtomicCounter(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AtomicCounterTransactor{contract: contract}, nil
}

// NewAtomicCounterFilterer creates a new log filterer instance of AtomicCounter, bound to a specific deployed contract.
func NewAtomicCounterFilterer(address common.Address, filterer bind.ContractFilterer) (*AtomicCounterFilterer, error) {
	contract, err := bindAtomicCounter(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AtomicCounterFilterer{contract: contract}, nil
}

// bindAtomicCounter binds a generic wrapper to an already deployed contract.
func bindAtomicCounter(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AtomicCounterABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AtomicCounter *AtomicCounterRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AtomicCounter.Contract.AtomicCounterCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AtomicCounter *AtomicCounterRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AtomicCounter.Contract.AtomicCounterTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AtomicCounter *AtomicCounterRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AtomicCounter.Contract.AtomicCounterTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AtomicCounter *AtomicCounterCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AtomicCounter.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AtomicCounter *AtomicCounterTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AtomicCounter.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AtomicCounter *AtomicCounterTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AtomicCounter.Contract.contract.Transact(opts, method, params...)
}

// BClaimsParserLibraryMetaData contains all meta data concerning the BClaimsParserLibrary contract.
var BClaimsParserLibraryMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a9093ac45006964e9d69cccb8173c4bfed3b0104f355865e040026ec573d771c64736f6c634300080b0033",
}

// BClaimsParserLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use BClaimsParserLibraryMetaData.ABI instead.
var BClaimsParserLibraryABI = BClaimsParserLibraryMetaData.ABI

// BClaimsParserLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BClaimsParserLibraryMetaData.Bin instead.
var BClaimsParserLibraryBin = BClaimsParserLibraryMetaData.Bin

// DeployBClaimsParserLibrary deploys a new Ethereum contract, binding an instance of BClaimsParserLibrary to it.
func DeployBClaimsParserLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *BClaimsParserLibrary, error) {
	parsed, err := BClaimsParserLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BClaimsParserLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BClaimsParserLibrary{BClaimsParserLibraryCaller: BClaimsParserLibraryCaller{contract: contract}, BClaimsParserLibraryTransactor: BClaimsParserLibraryTransactor{contract: contract}, BClaimsParserLibraryFilterer: BClaimsParserLibraryFilterer{contract: contract}}, nil
}

// BClaimsParserLibrary is an auto generated Go binding around an Ethereum contract.
type BClaimsParserLibrary struct {
	BClaimsParserLibraryCaller     // Read-only binding to the contract
	BClaimsParserLibraryTransactor // Write-only binding to the contract
	BClaimsParserLibraryFilterer   // Log filterer for contract events
}

// BClaimsParserLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type BClaimsParserLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BClaimsParserLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BClaimsParserLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BClaimsParserLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BClaimsParserLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BClaimsParserLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BClaimsParserLibrarySession struct {
	Contract     *BClaimsParserLibrary // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// BClaimsParserLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BClaimsParserLibraryCallerSession struct {
	Contract *BClaimsParserLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// BClaimsParserLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BClaimsParserLibraryTransactorSession struct {
	Contract     *BClaimsParserLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// BClaimsParserLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type BClaimsParserLibraryRaw struct {
	Contract *BClaimsParserLibrary // Generic contract binding to access the raw methods on
}

// BClaimsParserLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BClaimsParserLibraryCallerRaw struct {
	Contract *BClaimsParserLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// BClaimsParserLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BClaimsParserLibraryTransactorRaw struct {
	Contract *BClaimsParserLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBClaimsParserLibrary creates a new instance of BClaimsParserLibrary, bound to a specific deployed contract.
func NewBClaimsParserLibrary(address common.Address, backend bind.ContractBackend) (*BClaimsParserLibrary, error) {
	contract, err := bindBClaimsParserLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BClaimsParserLibrary{BClaimsParserLibraryCaller: BClaimsParserLibraryCaller{contract: contract}, BClaimsParserLibraryTransactor: BClaimsParserLibraryTransactor{contract: contract}, BClaimsParserLibraryFilterer: BClaimsParserLibraryFilterer{contract: contract}}, nil
}

// NewBClaimsParserLibraryCaller creates a new read-only instance of BClaimsParserLibrary, bound to a specific deployed contract.
func NewBClaimsParserLibraryCaller(address common.Address, caller bind.ContractCaller) (*BClaimsParserLibraryCaller, error) {
	contract, err := bindBClaimsParserLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BClaimsParserLibraryCaller{contract: contract}, nil
}

// NewBClaimsParserLibraryTransactor creates a new write-only instance of BClaimsParserLibrary, bound to a specific deployed contract.
func NewBClaimsParserLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*BClaimsParserLibraryTransactor, error) {
	contract, err := bindBClaimsParserLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BClaimsParserLibraryTransactor{contract: contract}, nil
}

// NewBClaimsParserLibraryFilterer creates a new log filterer instance of BClaimsParserLibrary, bound to a specific deployed contract.
func NewBClaimsParserLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*BClaimsParserLibraryFilterer, error) {
	contract, err := bindBClaimsParserLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BClaimsParserLibraryFilterer{contract: contract}, nil
}

// bindBClaimsParserLibrary binds a generic wrapper to an already deployed contract.
func bindBClaimsParserLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BClaimsParserLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BClaimsParserLibrary *BClaimsParserLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BClaimsParserLibrary.Contract.BClaimsParserLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BClaimsParserLibrary *BClaimsParserLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BClaimsParserLibrary.Contract.BClaimsParserLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BClaimsParserLibrary *BClaimsParserLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BClaimsParserLibrary.Contract.BClaimsParserLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BClaimsParserLibrary *BClaimsParserLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BClaimsParserLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BClaimsParserLibrary *BClaimsParserLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BClaimsParserLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BClaimsParserLibrary *BClaimsParserLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BClaimsParserLibrary.Contract.contract.Transact(opts, method, params...)
}

// BaseParserLibraryMetaData contains all meta data concerning the BaseParserLibrary contract.
var BaseParserLibraryMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c64e414222feaf9b454eb59334d4f97a199e2ce364b074270d8e38058fa1670a64736f6c634300080b0033",
}

// BaseParserLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use BaseParserLibraryMetaData.ABI instead.
var BaseParserLibraryABI = BaseParserLibraryMetaData.ABI

// BaseParserLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BaseParserLibraryMetaData.Bin instead.
var BaseParserLibraryBin = BaseParserLibraryMetaData.Bin

// DeployBaseParserLibrary deploys a new Ethereum contract, binding an instance of BaseParserLibrary to it.
func DeployBaseParserLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *BaseParserLibrary, error) {
	parsed, err := BaseParserLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BaseParserLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseParserLibrary{BaseParserLibraryCaller: BaseParserLibraryCaller{contract: contract}, BaseParserLibraryTransactor: BaseParserLibraryTransactor{contract: contract}, BaseParserLibraryFilterer: BaseParserLibraryFilterer{contract: contract}}, nil
}

// BaseParserLibrary is an auto generated Go binding around an Ethereum contract.
type BaseParserLibrary struct {
	BaseParserLibraryCaller     // Read-only binding to the contract
	BaseParserLibraryTransactor // Write-only binding to the contract
	BaseParserLibraryFilterer   // Log filterer for contract events
}

// BaseParserLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseParserLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseParserLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseParserLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseParserLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseParserLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseParserLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BaseParserLibrarySession struct {
	Contract     *BaseParserLibrary // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// BaseParserLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BaseParserLibraryCallerSession struct {
	Contract *BaseParserLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// BaseParserLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BaseParserLibraryTransactorSession struct {
	Contract     *BaseParserLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// BaseParserLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type BaseParserLibraryRaw struct {
	Contract *BaseParserLibrary // Generic contract binding to access the raw methods on
}

// BaseParserLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BaseParserLibraryCallerRaw struct {
	Contract *BaseParserLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// BaseParserLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BaseParserLibraryTransactorRaw struct {
	Contract *BaseParserLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBaseParserLibrary creates a new instance of BaseParserLibrary, bound to a specific deployed contract.
func NewBaseParserLibrary(address common.Address, backend bind.ContractBackend) (*BaseParserLibrary, error) {
	contract, err := bindBaseParserLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseParserLibrary{BaseParserLibraryCaller: BaseParserLibraryCaller{contract: contract}, BaseParserLibraryTransactor: BaseParserLibraryTransactor{contract: contract}, BaseParserLibraryFilterer: BaseParserLibraryFilterer{contract: contract}}, nil
}

// NewBaseParserLibraryCaller creates a new read-only instance of BaseParserLibrary, bound to a specific deployed contract.
func NewBaseParserLibraryCaller(address common.Address, caller bind.ContractCaller) (*BaseParserLibraryCaller, error) {
	contract, err := bindBaseParserLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseParserLibraryCaller{contract: contract}, nil
}

// NewBaseParserLibraryTransactor creates a new write-only instance of BaseParserLibrary, bound to a specific deployed contract.
func NewBaseParserLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseParserLibraryTransactor, error) {
	contract, err := bindBaseParserLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseParserLibraryTransactor{contract: contract}, nil
}

// NewBaseParserLibraryFilterer creates a new log filterer instance of BaseParserLibrary, bound to a specific deployed contract.
func NewBaseParserLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseParserLibraryFilterer, error) {
	contract, err := bindBaseParserLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseParserLibraryFilterer{contract: contract}, nil
}

// bindBaseParserLibrary binds a generic wrapper to an already deployed contract.
func bindBaseParserLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseParserLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseParserLibrary *BaseParserLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BaseParserLibrary.Contract.BaseParserLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseParserLibrary *BaseParserLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseParserLibrary.Contract.BaseParserLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseParserLibrary *BaseParserLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseParserLibrary.Contract.BaseParserLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseParserLibrary *BaseParserLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BaseParserLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseParserLibrary *BaseParserLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseParserLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseParserLibrary *BaseParserLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseParserLibrary.Contract.contract.Transact(opts, method, params...)
}

// BasicERC20MetaData contains all meta data concerning the BasicERC20 contract.
var BasicERC20MetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// BasicERC20ABI is the input ABI used to generate the binding from.
// Deprecated: Use BasicERC20MetaData.ABI instead.
var BasicERC20ABI = BasicERC20MetaData.ABI

// BasicERC20 is an auto generated Go binding around an Ethereum contract.
type BasicERC20 struct {
	BasicERC20Caller     // Read-only binding to the contract
	BasicERC20Transactor // Write-only binding to the contract
	BasicERC20Filterer   // Log filterer for contract events
}

// BasicERC20Caller is an auto generated read-only Go binding around an Ethereum contract.
type BasicERC20Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BasicERC20Transactor is an auto generated write-only Go binding around an Ethereum contract.
type BasicERC20Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BasicERC20Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BasicERC20Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BasicERC20Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BasicERC20Session struct {
	Contract     *BasicERC20       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BasicERC20CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BasicERC20CallerSession struct {
	Contract *BasicERC20Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// BasicERC20TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BasicERC20TransactorSession struct {
	Contract     *BasicERC20Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// BasicERC20Raw is an auto generated low-level Go binding around an Ethereum contract.
type BasicERC20Raw struct {
	Contract *BasicERC20 // Generic contract binding to access the raw methods on
}

// BasicERC20CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BasicERC20CallerRaw struct {
	Contract *BasicERC20Caller // Generic read-only contract binding to access the raw methods on
}

// BasicERC20TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BasicERC20TransactorRaw struct {
	Contract *BasicERC20Transactor // Generic write-only contract binding to access the raw methods on
}

// NewBasicERC20 creates a new instance of BasicERC20, bound to a specific deployed contract.
func NewBasicERC20(address common.Address, backend bind.ContractBackend) (*BasicERC20, error) {
	contract, err := bindBasicERC20(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BasicERC20{BasicERC20Caller: BasicERC20Caller{contract: contract}, BasicERC20Transactor: BasicERC20Transactor{contract: contract}, BasicERC20Filterer: BasicERC20Filterer{contract: contract}}, nil
}

// NewBasicERC20Caller creates a new read-only instance of BasicERC20, bound to a specific deployed contract.
func NewBasicERC20Caller(address common.Address, caller bind.ContractCaller) (*BasicERC20Caller, error) {
	contract, err := bindBasicERC20(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BasicERC20Caller{contract: contract}, nil
}

// NewBasicERC20Transactor creates a new write-only instance of BasicERC20, bound to a specific deployed contract.
func NewBasicERC20Transactor(address common.Address, transactor bind.ContractTransactor) (*BasicERC20Transactor, error) {
	contract, err := bindBasicERC20(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BasicERC20Transactor{contract: contract}, nil
}

// NewBasicERC20Filterer creates a new log filterer instance of BasicERC20, bound to a specific deployed contract.
func NewBasicERC20Filterer(address common.Address, filterer bind.ContractFilterer) (*BasicERC20Filterer, error) {
	contract, err := bindBasicERC20(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BasicERC20Filterer{contract: contract}, nil
}

// bindBasicERC20 binds a generic wrapper to an already deployed contract.
func bindBasicERC20(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BasicERC20ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BasicERC20 *BasicERC20Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BasicERC20.Contract.BasicERC20Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BasicERC20 *BasicERC20Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BasicERC20.Contract.BasicERC20Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BasicERC20 *BasicERC20Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BasicERC20.Contract.BasicERC20Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BasicERC20 *BasicERC20CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BasicERC20.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BasicERC20 *BasicERC20TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BasicERC20.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BasicERC20 *BasicERC20TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BasicERC20.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address src, address who) view returns(uint256)
func (_BasicERC20 *BasicERC20Caller) Allowance(opts *bind.CallOpts, src common.Address, who common.Address) (*big.Int, error) {
	var out []interface{}
	err := _BasicERC20.contract.Call(opts, &out, "allowance", src, who)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address src, address who) view returns(uint256)
func (_BasicERC20 *BasicERC20Session) Allowance(src common.Address, who common.Address) (*big.Int, error) {
	return _BasicERC20.Contract.Allowance(&_BasicERC20.CallOpts, src, who)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address src, address who) view returns(uint256)
func (_BasicERC20 *BasicERC20CallerSession) Allowance(src common.Address, who common.Address) (*big.Int, error) {
	return _BasicERC20.Contract.Allowance(&_BasicERC20.CallOpts, src, who)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address who) view returns(uint256)
func (_BasicERC20 *BasicERC20Caller) BalanceOf(opts *bind.CallOpts, who common.Address) (*big.Int, error) {
	var out []interface{}
	err := _BasicERC20.contract.Call(opts, &out, "balanceOf", who)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address who) view returns(uint256)
func (_BasicERC20 *BasicERC20Session) BalanceOf(who common.Address) (*big.Int, error) {
	return _BasicERC20.Contract.BalanceOf(&_BasicERC20.CallOpts, who)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address who) view returns(uint256)
func (_BasicERC20 *BasicERC20CallerSession) BalanceOf(who common.Address) (*big.Int, error) {
	return _BasicERC20.Contract.BalanceOf(&_BasicERC20.CallOpts, who)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_BasicERC20 *BasicERC20Caller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BasicERC20.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_BasicERC20 *BasicERC20Session) TotalSupply() (*big.Int, error) {
	return _BasicERC20.Contract.TotalSupply(&_BasicERC20.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_BasicERC20 *BasicERC20CallerSession) TotalSupply() (*big.Int, error) {
	return _BasicERC20.Contract.TotalSupply(&_BasicERC20.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address who, uint256 wad) returns(bool)
func (_BasicERC20 *BasicERC20Transactor) Approve(opts *bind.TransactOpts, who common.Address, wad *big.Int) (*types.Transaction, error) {
	return _BasicERC20.contract.Transact(opts, "approve", who, wad)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address who, uint256 wad) returns(bool)
func (_BasicERC20 *BasicERC20Session) Approve(who common.Address, wad *big.Int) (*types.Transaction, error) {
	return _BasicERC20.Contract.Approve(&_BasicERC20.TransactOpts, who, wad)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address who, uint256 wad) returns(bool)
func (_BasicERC20 *BasicERC20TransactorSession) Approve(who common.Address, wad *big.Int) (*types.Transaction, error) {
	return _BasicERC20.Contract.Approve(&_BasicERC20.TransactOpts, who, wad)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address dst, uint256 wad) returns(bool)
func (_BasicERC20 *BasicERC20Transactor) Transfer(opts *bind.TransactOpts, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _BasicERC20.contract.Transact(opts, "transfer", dst, wad)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address dst, uint256 wad) returns(bool)
func (_BasicERC20 *BasicERC20Session) Transfer(dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _BasicERC20.Contract.Transfer(&_BasicERC20.TransactOpts, dst, wad)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address dst, uint256 wad) returns(bool)
func (_BasicERC20 *BasicERC20TransactorSession) Transfer(dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _BasicERC20.Contract.Transfer(&_BasicERC20.TransactOpts, dst, wad)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address src, address dst, uint256 wad) returns(bool)
func (_BasicERC20 *BasicERC20Transactor) TransferFrom(opts *bind.TransactOpts, src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _BasicERC20.contract.Transact(opts, "transferFrom", src, dst, wad)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address src, address dst, uint256 wad) returns(bool)
func (_BasicERC20 *BasicERC20Session) TransferFrom(src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _BasicERC20.Contract.TransferFrom(&_BasicERC20.TransactOpts, src, dst, wad)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address src, address dst, uint256 wad) returns(bool)
func (_BasicERC20 *BasicERC20TransactorSession) TransferFrom(src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _BasicERC20.Contract.TransferFrom(&_BasicERC20.TransactOpts, src, dst, wad)
}

// ChainStatusLibraryMetaData contains all meta data concerning the ChainStatusLibrary contract.
var ChainStatusLibraryMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220eb2fbb878367374670d1059806ce7a83643b0a372399cc862fdc9bda5dff79a164736f6c634300080b0033",
}

// ChainStatusLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use ChainStatusLibraryMetaData.ABI instead.
var ChainStatusLibraryABI = ChainStatusLibraryMetaData.ABI

// ChainStatusLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ChainStatusLibraryMetaData.Bin instead.
var ChainStatusLibraryBin = ChainStatusLibraryMetaData.Bin

// DeployChainStatusLibrary deploys a new Ethereum contract, binding an instance of ChainStatusLibrary to it.
func DeployChainStatusLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ChainStatusLibrary, error) {
	parsed, err := ChainStatusLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ChainStatusLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ChainStatusLibrary{ChainStatusLibraryCaller: ChainStatusLibraryCaller{contract: contract}, ChainStatusLibraryTransactor: ChainStatusLibraryTransactor{contract: contract}, ChainStatusLibraryFilterer: ChainStatusLibraryFilterer{contract: contract}}, nil
}

// ChainStatusLibrary is an auto generated Go binding around an Ethereum contract.
type ChainStatusLibrary struct {
	ChainStatusLibraryCaller     // Read-only binding to the contract
	ChainStatusLibraryTransactor // Write-only binding to the contract
	ChainStatusLibraryFilterer   // Log filterer for contract events
}

// ChainStatusLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type ChainStatusLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ChainStatusLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ChainStatusLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ChainStatusLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ChainStatusLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ChainStatusLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ChainStatusLibrarySession struct {
	Contract     *ChainStatusLibrary // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// ChainStatusLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ChainStatusLibraryCallerSession struct {
	Contract *ChainStatusLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// ChainStatusLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ChainStatusLibraryTransactorSession struct {
	Contract     *ChainStatusLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// ChainStatusLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type ChainStatusLibraryRaw struct {
	Contract *ChainStatusLibrary // Generic contract binding to access the raw methods on
}

// ChainStatusLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ChainStatusLibraryCallerRaw struct {
	Contract *ChainStatusLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// ChainStatusLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ChainStatusLibraryTransactorRaw struct {
	Contract *ChainStatusLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewChainStatusLibrary creates a new instance of ChainStatusLibrary, bound to a specific deployed contract.
func NewChainStatusLibrary(address common.Address, backend bind.ContractBackend) (*ChainStatusLibrary, error) {
	contract, err := bindChainStatusLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ChainStatusLibrary{ChainStatusLibraryCaller: ChainStatusLibraryCaller{contract: contract}, ChainStatusLibraryTransactor: ChainStatusLibraryTransactor{contract: contract}, ChainStatusLibraryFilterer: ChainStatusLibraryFilterer{contract: contract}}, nil
}

// NewChainStatusLibraryCaller creates a new read-only instance of ChainStatusLibrary, bound to a specific deployed contract.
func NewChainStatusLibraryCaller(address common.Address, caller bind.ContractCaller) (*ChainStatusLibraryCaller, error) {
	contract, err := bindChainStatusLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ChainStatusLibraryCaller{contract: contract}, nil
}

// NewChainStatusLibraryTransactor creates a new write-only instance of ChainStatusLibrary, bound to a specific deployed contract.
func NewChainStatusLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*ChainStatusLibraryTransactor, error) {
	contract, err := bindChainStatusLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ChainStatusLibraryTransactor{contract: contract}, nil
}

// NewChainStatusLibraryFilterer creates a new log filterer instance of ChainStatusLibrary, bound to a specific deployed contract.
func NewChainStatusLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*ChainStatusLibraryFilterer, error) {
	contract, err := bindChainStatusLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ChainStatusLibraryFilterer{contract: contract}, nil
}

// bindChainStatusLibrary binds a generic wrapper to an already deployed contract.
func bindChainStatusLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ChainStatusLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ChainStatusLibrary *ChainStatusLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ChainStatusLibrary.Contract.ChainStatusLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ChainStatusLibrary *ChainStatusLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ChainStatusLibrary.Contract.ChainStatusLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ChainStatusLibrary *ChainStatusLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ChainStatusLibrary.Contract.ChainStatusLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ChainStatusLibrary *ChainStatusLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ChainStatusLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ChainStatusLibrary *ChainStatusLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ChainStatusLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ChainStatusLibrary *ChainStatusLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ChainStatusLibrary.Contract.contract.Transact(opts, method, params...)
}

// ConstantsMetaData contains all meta data concerning the Constants contract.
var ConstantsMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220c36a84852571fcc3c796207d18a48b2fb850d0720aed08c6c7cb2af5bf23292e64736f6c634300080b0033",
}

// ConstantsABI is the input ABI used to generate the binding from.
// Deprecated: Use ConstantsMetaData.ABI instead.
var ConstantsABI = ConstantsMetaData.ABI

// ConstantsBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ConstantsMetaData.Bin instead.
var ConstantsBin = ConstantsMetaData.Bin

// DeployConstants deploys a new Ethereum contract, binding an instance of Constants to it.
func DeployConstants(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Constants, error) {
	parsed, err := ConstantsMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ConstantsBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Constants{ConstantsCaller: ConstantsCaller{contract: contract}, ConstantsTransactor: ConstantsTransactor{contract: contract}, ConstantsFilterer: ConstantsFilterer{contract: contract}}, nil
}

// Constants is an auto generated Go binding around an Ethereum contract.
type Constants struct {
	ConstantsCaller     // Read-only binding to the contract
	ConstantsTransactor // Write-only binding to the contract
	ConstantsFilterer   // Log filterer for contract events
}

// ConstantsCaller is an auto generated read-only Go binding around an Ethereum contract.
type ConstantsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ConstantsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ConstantsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ConstantsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ConstantsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ConstantsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ConstantsSession struct {
	Contract     *Constants        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ConstantsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ConstantsCallerSession struct {
	Contract *ConstantsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// ConstantsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ConstantsTransactorSession struct {
	Contract     *ConstantsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// ConstantsRaw is an auto generated low-level Go binding around an Ethereum contract.
type ConstantsRaw struct {
	Contract *Constants // Generic contract binding to access the raw methods on
}

// ConstantsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ConstantsCallerRaw struct {
	Contract *ConstantsCaller // Generic read-only contract binding to access the raw methods on
}

// ConstantsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ConstantsTransactorRaw struct {
	Contract *ConstantsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewConstants creates a new instance of Constants, bound to a specific deployed contract.
func NewConstants(address common.Address, backend bind.ContractBackend) (*Constants, error) {
	contract, err := bindConstants(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Constants{ConstantsCaller: ConstantsCaller{contract: contract}, ConstantsTransactor: ConstantsTransactor{contract: contract}, ConstantsFilterer: ConstantsFilterer{contract: contract}}, nil
}

// NewConstantsCaller creates a new read-only instance of Constants, bound to a specific deployed contract.
func NewConstantsCaller(address common.Address, caller bind.ContractCaller) (*ConstantsCaller, error) {
	contract, err := bindConstants(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ConstantsCaller{contract: contract}, nil
}

// NewConstantsTransactor creates a new write-only instance of Constants, bound to a specific deployed contract.
func NewConstantsTransactor(address common.Address, transactor bind.ContractTransactor) (*ConstantsTransactor, error) {
	contract, err := bindConstants(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ConstantsTransactor{contract: contract}, nil
}

// NewConstantsFilterer creates a new log filterer instance of Constants, bound to a specific deployed contract.
func NewConstantsFilterer(address common.Address, filterer bind.ContractFilterer) (*ConstantsFilterer, error) {
	contract, err := bindConstants(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ConstantsFilterer{contract: contract}, nil
}

// bindConstants binds a generic wrapper to an already deployed contract.
func bindConstants(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ConstantsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Constants *ConstantsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Constants.Contract.ConstantsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Constants *ConstantsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Constants.Contract.ConstantsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Constants *ConstantsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Constants.Contract.ConstantsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Constants *ConstantsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Constants.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Constants *ConstantsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Constants.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Constants *ConstantsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Constants.Contract.contract.Transact(opts, method, params...)
}

// CryptoMetaData contains all meta data concerning the Crypto contract.
var CryptoMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256[2][]\",\"name\":\"sigs\",\"type\":\"uint256[2][]\"},{\"internalType\":\"uint256[]\",\"name\":\"indices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"invArray\",\"type\":\"uint256[]\"}],\"name\":\"AggregateSignatures\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"HashToG1\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"h\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2][]\",\"name\":\"pointsG1\",\"type\":\"uint256[2][]\"},{\"internalType\":\"uint256[]\",\"name\":\"indices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"invArray\",\"type\":\"uint256[]\"}],\"name\":\"LagrangeInterpolationG1\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"privK\",\"type\":\"uint256\"}],\"name\":\"Sign\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"sig\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"uint256[2]\",\"name\":\"sig\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[4]\",\"name\":\"pubK\",\"type\":\"uint256[4]\"}],\"name\":\"Verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"v\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"}],\"name\":\"baseToG1\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"h\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"input\",\"type\":\"uint256[4]\"}],\"name\":\"bn128_add\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"result\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[12]\",\"name\":\"input\",\"type\":\"uint256[12]\"}],\"name\":\"bn128_check_pairing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"point\",\"type\":\"uint256[2]\"}],\"name\":\"bn128_is_on_curve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"input\",\"type\":\"uint256[3]\"}],\"name\":\"bn128_multiply\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"result\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"honestIndices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"dishonestIndices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"checkIndices\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"validIndices\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"invArray\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"maxIndex\",\"type\":\"uint256\"}],\"name\":\"checkInverses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"uint256Array\",\"type\":\"uint256[]\"}],\"name\":\"computeArrayMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"x1\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"y1\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"x2\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"y2\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"proof\",\"type\":\"uint256[2]\"}],\"name\":\"dleq_verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"proof_is_valid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"e\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"}],\"name\":\"expmod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes1\",\"name\":\"c0\",\"type\":\"bytes1\"},{\"internalType\":\"bytes1\",\"name\":\"c1\",\"type\":\"bytes1\"}],\"name\":\"hashToBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"}],\"name\":\"invert\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"}],\"name\":\"legendre\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"chi\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"k\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"j\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"invArray\",\"type\":\"uint256[]\"}],\"name\":\"liRjPartialConst\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"}],\"name\":\"neg\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"input\",\"type\":\"uint256[2]\"}],\"name\":\"safeSigningPoint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"}],\"name\":\"sign0\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"}],\"name\":\"sqrt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50612c4a806100206000396000f3fe608060405234801561001057600080fd5b506004361061018d5760003560e01c806382688f14116100e3578063ccba31231161008c578063e81ee0e311610066578063e81ee0e31461033e578063f022e06114610351578063f4d7d33d1461036457600080fd5b8063ccba312314610305578063e480a92e14610318578063e664725b1461032b57600080fd5b806396d95a6f116100bd57806396d95a6f146102cc578063a218e426146102df578063b87cbafc146102f257600080fd5b806382688f14146102935780638b6eb76e146102a657806395add79c146102b957600080fd5b80636bdf477c1161014557806377d2f2031161011f57806377d2f2031461025a578063783ce4581461026d57806380f4a9221461028057600080fd5b80636bdf477c146102215780636ef064a4146102345780637351ee371461024757600080fd5b806338529ab41161017657806338529ab4146101da57806358ef876a146101fb578063677342ce1461020e57600080fd5b8063063675871461019257806316534acd146101ba575b600080fd5b6101a56101a03660046121ed565b610377565b60405190151581526020015b60405180910390f35b6101cd6101c83660046122dc565b61038e565b6040516101b191906123ce565b6101ed6101e836600461242f565b6103ab565b6040519081526020016101b1565b6101ed610209366004612484565b6103b8565b6101ed61021c3660046124d4565b6103c5565b6101cd61022f3660046124ed565b6103d6565b6101ed6102423660046124d4565b6103e8565b6101ed6102553660046124d4565b6103f3565b6101ed6102683660046124d4565b6103fe565b6101ed61027b366004612532565b610409565b6101a561028e36600461255e565b610416565b6101cd6102a13660046125cb565b610423565b6101cd6102b43660046124d4565b610434565b6101cd6102c7366004612624565b610445565b6101a56102da366004612659565b610456565b6101ed6102ed366004612675565b610461565b6101a56103003660046126aa565b61046c565b6101ed6103133660046124d4565b610477565b6101a5610326366004612729565b610482565b6101cd61033936600461275f565b61048e565b6101a561034c36600461277b565b61049f565b6101cd61035f3660046122dc565b6104b8565b6101a5610372366004612659565b6104cc565b60006103848484846104d7565b90505b9392505050565b610396611fec565b6103a28585858561067d565b95945050505050565b6000610384848484610919565b6000610384848484610a22565b60006103d082610b8e565b92915050565b6103de611fec565b6103878383610bdb565b60006103d082610c1f565b60006103d082610ca0565b60006103d082610ced565b6000610384848484610d2b565b6000610384848484610dd3565b61042b611fec565b6103d082610f00565b61043c611fec565b6103d082610fc2565b61044d611fec565b6103d082611516565b60006103d082611729565b60006103d082611750565b60006103d0826117bc565b60006103d082611867565b600061038783836118b8565b610496611fec565b6103d082611a10565b60006104ae8686868686611aad565b9695505050505050565b6104c0611fec565b6103a285858585611d9d565b60006103d082611f88565b60006104e1611fec565b6104ea85611516565b90506103a26040518061018001604052808660006002811061050e5761050e6127e7565b602002015181526020018660016002811061052b5761052b6127e7565b602002015181526020017f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed81526020017f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec81526020017f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d8152602001836000600281106105e0576105e06127e7565b60200201518152602001836001600281106105fd576105fd6127e7565b602002015181526020018560006004811061061a5761061a6127e7565b6020020151815260200185600160048110610637576106376127e7565b6020020151815260200185600260048110610654576106546127e7565b6020020151815260200185600360048110610671576106716127e7565b602002015190526117bc565b610685611fec565b835185511461071b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f4d69736d61746368206265747765656e20706f696e7473473120616e6420696e60448201527f646963657320617272617973000000000000000000000000000000000000000060648201526084015b60405180910390fd5b610723611fec565b600080825260208201819052808080808061073c611fec565b600096505b8b51871015610908578b878151811061075c5761075c6127e7565b602002602001015194508a87111561077357610908565b60019250600095505b8b51861015610801578b8681518110610797576107976127e7565b602002602001015193508a8611156107ae57610801565b848414156107bb576107ef565b6107c684868c610a22565b91507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182840992505b856107f981612874565b96505061077c565b8c8781518110610813576108136127e7565b6020026020010151905061086e60405180606001604052808360006002811061083e5761083e6127e7565b602002015181526020018360016002811061085b5761085b6127e7565b6020020151815260200185815250610f00565b90506108f460405180608001604052808a600060028110610891576108916127e7565b602002015181526020018a6001600281106108ae576108ae6127e7565b60200201518152602001836000600281106108cb576108cb6127e7565b60200201518152602001836001600281106108e8576108e86127e7565b60200201519052611a10565b97508661090081612874565b975050610741565b50959b9a5050505050505050505050565b600080838560405160200161092f9291906128ad565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815290829052805160209182012092506000916109799186918991016128ad565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152919052805160209091012090507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47817f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd477f0e0a77c19a07df2f666ea36f7879462c0a78eb28f5c70b3dd35d438dc58f0d9d8509089695505050505050565b600082841415610ab4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603460248201527f4d7573742068617665206b20213d206a207768656e20636f6d707574696e672060448201527f526a207061727469616c20636f6e7374616e74730000000000000000000000006064820152608401610712565b83600084821115610ad057610ac98587612917565b9050610b2d565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001610b1c60017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001612917565b83099150610b2a8686612917565b90505b83610b39600183612917565b81518110610b4957610b496127e7565b602002602001015190507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000180610b8157610b81612816565b8183099695505050505050565b60006103d0827f0c19139cb84c680a6e14116da060561765e05aa45a1c72a34f082305b61f3f527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47610d2b565b610be3611fec565b610beb611fec565b610bf484611516565b9050610c1760405180606001604052808360006002811061083e5761083e6127e7565b949350505050565b600080610c6d837f183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea37f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47610d2b565b90508015610c95576001610c84828216600261292e565b610c8e91906129ea565b9150610c9a565b600091505b50919050565b60006103d0827f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd457f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47610d2b565b600081610cfc57506000919050565b6103d0827f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47612917565b919050565b60008060405160208152602080820152602060408201528560608201528460808201528360a082015260208160c08360055afa90519250905080610dcb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f6d6f64756c6172206578706f6e656e74696174696f6e2066616c6965640000006044820152606401610712565b509392505050565b60016000808084610de657610de6612a5e565b6101008510610df757610df7612a5e565b600092505b8651831015610e7057868381518110610e1757610e176127e7565b602002602001015190508060001480610e2f57508481115b15610e3d5760009350610e70565b6001811b8216610e5557806001901b82179150610e5e565b60009350610e70565b82610e6881612874565b935050610dfc565b83610e7d57505050610387565b600092505b8551831015610ef657858381518110610e9d57610e9d6127e7565b602002602001015190508060001480610eb557508481115b15610ec35760009350610ef6565b6001811b8216610edb57806001901b82179150610ee4565b60009350610ef6565b82610eee81612874565b935050610e82565b5050509392505050565b610f08611fec565b600060408260608560077ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa905080610c9a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f656c6c6970746963206375727665206d756c7469706c69636174696f6e20666160448201527f696c6564000000000000000000000000000000000000000000000000000000006064820152608401610712565b610fca611fec565b600080807f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4785860992507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd476004840891507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47828409905061104a81610ca0565b905060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4783840990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4783820990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47848509935060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478577b3c4d79d41a91759a9e4c7e359b6b89eaec68e62effffffd0990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47838209905061112f81610ced565b90507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd477759e26bcea0d48bacd4f263f1acdb5c4f5763473177fffffe8208905060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd476001830890506111a181610ced565b905060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47847f2042def740cbc01bd03583cf0100e593ba56470b9af68708d2c05d64905353850990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47858209905061121a81610ced565b90507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760018208905060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4784850990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4784820990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760038208905060006112c382610c1f565b90507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4784850991507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4784830991507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47600383089150600061134383610c1f565b9050600060046113546003846129ea565b61135f6001866129ea565b611369919061292e565b6113739190612a8d565b61137e906001612b1c565b9050600081600114156113925750866113a5565b81600214156113a25750856113a5565b50845b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4781820994507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4781860994507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760038608945061142185610b8e565b9450600061142e8f611867565b90507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478187099550611473604051806040016040528084815260200188815250611f88565b6114fe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f496e76616c696420706f696e743a206e6f74206f6e20656c6c6970746963206360448201527f75727665000000000000000000000000000000000000000000000000000000006064820152608401610712565b508c5250505060208901525095979650505050505050565b61151e611fec565b600061154b83827f0100000000000000000000000000000000000000000000000000000000000000610919565b9050600061159a847f02000000000000000000000000000000000000000000000000000000000000007f0300000000000000000000000000000000000000000000000000000000000000610919565b905060006115a783610fc2565b905060006115b483610fc2565b90506115f46040518060800160405280846000600281106115d7576115d76127e7565b60200201518152602001846001600281106108ae576108ae6127e7565b94506115ff85611f88565b61168b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f496e76616c6964206861736820706f696e743a206e6f74206f6e20656c6c697060448201527f74696320637572766500000000000000000000000000000000000000000000006064820152608401610712565b61169485611729565b611720576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f44616e6765726f7573206861736820706f696e743a206e6f742073616665206660448201527f6f72207369676e696e67000000000000000000000000000000000000000000006064820152608401610712565b50505050919050565b8051600090158061173b575081516001145b1561174857506000919050565b506001919050565b600080600083600081518110611768576117686127e7565b602002602001015190506000600190505b8451811015610dcb57848181518110611794576117946127e7565b60200260200101519250818311156117aa578291505b806117b481612874565b915050611779565b60006117c661200a565b60006020826101808660087ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa90508061185c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f656c6c69707469632063757276652070616972696e67206661696c65640000006044820152606401610712565b505160011492915050565b60017f183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea3821115610d2657507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd46919050565b60008060008060006001905086516001876118d39190612917565b1115611988576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526044602482018190527f636865636b496e7665727365733a20696e73756666696369656e7420696e7665908201527f7273657320666f722067726f7570207369676e61747572652063616c63756c6160648201527f74696f6e00000000000000000000000000000000000000000000000000000000608482015260a401610712565b600193505b858410156104ae57866119a1600186612917565b815181106119b1576119b16127e7565b602002602001015192507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001806119e9576119e9612816565b8385099150816001146119fe575060006104ae565b83611a0881612874565b94505061198d565b611a18611fec565b600060408260808560067ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa905080610c9a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f656c6c6970746963206375727665206164646974696f6e206661696c656400006044820152606401610712565b6000611ab7611fec565b611abf611fec565b611b2660405180606001604052808a600060028110611ae057611ae06127e7565b602002015181526020018a600160028110611afd57611afd6127e7565b6020020151815260200186600160028110611b1a57611b1a6127e7565b60200201519052610f00565b9150611b83604051806060016040528089600060028110611b4957611b496127e7565b6020020151815260200189600160028110611b6657611b666127e7565b6020020151815260200186600060028110611b1a57611b1a6127e7565b90506000611bff604051806080016040528085600060028110611ba857611ba86127e7565b6020020151815260200185600160028110611bc557611bc56127e7565b6020020151815260200184600060028110611be257611be26127e7565b60200201518152602001846001600281106108e8576108e86127e7565b9050611c5c604051806060016040528089600060028110611c2257611c226127e7565b6020020151815260200189600160028110611c3f57611c3f6127e7565b6020020151815260200187600160028110611b1a57611b1a6127e7565b9250611cb9604051806060016040528088600060028110611c7f57611c7f6127e7565b6020020151815260200188600160028110611c9c57611c9c6127e7565b6020020151815260200187600060028110611b1a57611b1a6127e7565b91506000611d35604051806080016040528086600060028110611cde57611cde6127e7565b6020020151815260200186600160028110611cfb57611cfb6127e7565b6020020151815260200185600060028110611d1857611d186127e7565b60200201518152602001856001600281106108e8576108e86127e7565b905060008a8a8a8a8686604051602001611d5496959493929190612bb9565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0018152919052805160209091012096519096149a9950505050505050505050565b611da5611fec565b8351855114611e36576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603560248201527f4d69736d61746368206265747765656e206c656e677468206f66207369676e6160448201527f747572657320616e6420696e64657820617272617900000000000000000000006064820152608401610712565b82855111611ec6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f4661696c656420746f206d656574207265717569726564206e756d626572206f60448201527f66207369676e61747572657320666f72207468726573686f6c640000000000006064820152608401610712565b6000611ed185611750565b9050611edd83826118b8565b611f69576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f696e76417272617920646f6573206e6f7420696e636c75646520636f7272656360448201527f7420696e766572736573000000000000000000000000000000000000000000006064820152608401610712565b611f71611fec565b611f7d8787878761067d565b979650505050505050565b80516000907f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47906003908290819080098551090860208301517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd479080091492915050565b60405180604001604052806002906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561209e5761209e612028565b604052919050565b600082601f8301126120b757600080fd5b813567ffffffffffffffff8111156120d1576120d1612028565b61210260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601612057565b81815284602083860101111561211757600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f83011261214557600080fd5b6040516040810181811067ffffffffffffffff8211171561216857612168612028565b806040525080604084018581111561217f57600080fd5b845b81811015612199578035835260209283019201612181565b509195945050505050565b600082601f8301126121b557600080fd5b6040516080810181811067ffffffffffffffff821117156121d8576121d8612028565b60405280608084018581111561217f57600080fd5b600080600060e0848603121561220257600080fd5b833567ffffffffffffffff81111561221957600080fd5b612225868287016120a6565b9350506122358560208601612134565b915061224485606086016121a4565b90509250925092565b600067ffffffffffffffff82111561226757612267612028565b5060051b60200190565b600082601f83011261228257600080fd5b813560206122976122928361224d565b612057565b82815260059290921b840181019181810190868411156122b657600080fd5b8286015b848110156122d157803583529183019183016122ba565b509695505050505050565b600080600080608085870312156122f257600080fd5b843567ffffffffffffffff8082111561230a57600080fd5b818701915087601f83011261231e57600080fd5b8135602061232e6122928361224d565b82815260069290921b8401810191818101908b84111561234d57600080fd5b948201945b83861015612376576123648c87612134565b82528282019150604086019550612352565b9850508801359250508082111561238c57600080fd5b61239888838901612271565b94506040870135935060608701359150808211156123b557600080fd5b506123c287828801612271565b91505092959194509250565b60408101818360005b60028110156123f65781518352602092830192909101906001016123d7565b50505092915050565b80357fff0000000000000000000000000000000000000000000000000000000000000081168114610d2657600080fd5b60008060006060848603121561244457600080fd5b833567ffffffffffffffff81111561245b57600080fd5b612467868287016120a6565b935050612476602085016123ff565b9150612244604085016123ff565b60008060006060848603121561249957600080fd5b8335925060208401359150604084013567ffffffffffffffff8111156124be57600080fd5b6124ca86828701612271565b9150509250925092565b6000602082840312156124e657600080fd5b5035919050565b6000806040838503121561250057600080fd5b823567ffffffffffffffff81111561251757600080fd5b612523858286016120a6565b95602094909401359450505050565b60008060006060848603121561254757600080fd5b505081359360208301359350604090920135919050565b60008060006060848603121561257357600080fd5b833567ffffffffffffffff8082111561258b57600080fd5b61259787838801612271565b945060208601359150808211156125ad57600080fd5b506125ba86828701612271565b925050604084013590509250925092565b6000606082840312156125dd57600080fd5b82601f8301126125ec57600080fd5b6040516060810181811067ffffffffffffffff8211171561260f5761260f612028565b60405280606084018581111561217f57600080fd5b60006020828403121561263657600080fd5b813567ffffffffffffffff81111561264d57600080fd5b610c17848285016120a6565b60006040828403121561266b57600080fd5b6103878383612134565b60006020828403121561268757600080fd5b813567ffffffffffffffff81111561269e57600080fd5b610c1784828501612271565b60006101808083850312156126be57600080fd5b83601f8401126126cd57600080fd5b60405181810181811067ffffffffffffffff821117156126ef576126ef612028565b60405290830190808583111561270457600080fd5b845b8381101561271e578035825260209182019101612706565b509095945050505050565b6000806040838503121561273c57600080fd5b823567ffffffffffffffff81111561275357600080fd5b61252385828601612271565b60006080828403121561277157600080fd5b61038783836121a4565b6000806000806000610140868803121561279457600080fd5b61279e8787612134565b94506127ad8760408801612134565b93506127bc8760808801612134565b92506127cb8760c08801612134565b91506127db876101008801612134565b90509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156128a6576128a6612845565b5060010190565b7fff00000000000000000000000000000000000000000000000000000000000000831681526000825160005b818110156128f657602081860181015160018684010152016128d9565b81811115612908576000600183860101525b50919091016001019392505050565b60008282101561292957612929612845565b500390565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60008413600084138583048511828216161561296f5761296f612845565b7f800000000000000000000000000000000000000000000000000000000000000060008712868205881281841616156129aa576129aa612845565b600087129250878205871284841616156129c6576129c6612845565b878505871281841616156129dc576129dc612845565b505050929093029392505050565b6000808312837f800000000000000000000000000000000000000000000000000000000000000001831281151615612a2457612a24612845565b837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018313811615612a5857612a58612845565b50500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b600082612ac3577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83147f800000000000000000000000000000000000000000000000000000000000000083141615612b1757612b17612845565b500590565b6000808212827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03841381151615612b5657612b56612845565b827f8000000000000000000000000000000000000000000000000000000000000000038412811615612b8a57612b8a612845565b50500190565b8060005b6002811015612bb3578151845260209384019390910190600101612b94565b50505050565b612bc38188612b90565b612bd06040820187612b90565b612bdd6080820186612b90565b612bea60c0820185612b90565b612bf8610100820184612b90565b612c06610140820183612b90565b61018001969550505050505056fea2646970667358221220b066396ea90ad3424de4a50539e813d989fbffee7e31199f4179d9c6affd037e64736f6c634300080b0033",
}

// CryptoABI is the input ABI used to generate the binding from.
// Deprecated: Use CryptoMetaData.ABI instead.
var CryptoABI = CryptoMetaData.ABI

// CryptoBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use CryptoMetaData.Bin instead.
var CryptoBin = CryptoMetaData.Bin

// DeployCrypto deploys a new Ethereum contract, binding an instance of Crypto to it.
func DeployCrypto(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Crypto, error) {
	parsed, err := CryptoMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CryptoBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Crypto{CryptoCaller: CryptoCaller{contract: contract}, CryptoTransactor: CryptoTransactor{contract: contract}, CryptoFilterer: CryptoFilterer{contract: contract}}, nil
}

// Crypto is an auto generated Go binding around an Ethereum contract.
type Crypto struct {
	CryptoCaller     // Read-only binding to the contract
	CryptoTransactor // Write-only binding to the contract
	CryptoFilterer   // Log filterer for contract events
}

// CryptoCaller is an auto generated read-only Go binding around an Ethereum contract.
type CryptoCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CryptoTransactor is an auto generated write-only Go binding around an Ethereum contract.
type CryptoTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CryptoFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CryptoFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CryptoSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type CryptoSession struct {
	Contract     *Crypto           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CryptoCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type CryptoCallerSession struct {
	Contract *CryptoCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// CryptoTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type CryptoTransactorSession struct {
	Contract     *CryptoTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CryptoRaw is an auto generated low-level Go binding around an Ethereum contract.
type CryptoRaw struct {
	Contract *Crypto // Generic contract binding to access the raw methods on
}

// CryptoCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type CryptoCallerRaw struct {
	Contract *CryptoCaller // Generic read-only contract binding to access the raw methods on
}

// CryptoTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type CryptoTransactorRaw struct {
	Contract *CryptoTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCrypto creates a new instance of Crypto, bound to a specific deployed contract.
func NewCrypto(address common.Address, backend bind.ContractBackend) (*Crypto, error) {
	contract, err := bindCrypto(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Crypto{CryptoCaller: CryptoCaller{contract: contract}, CryptoTransactor: CryptoTransactor{contract: contract}, CryptoFilterer: CryptoFilterer{contract: contract}}, nil
}

// NewCryptoCaller creates a new read-only instance of Crypto, bound to a specific deployed contract.
func NewCryptoCaller(address common.Address, caller bind.ContractCaller) (*CryptoCaller, error) {
	contract, err := bindCrypto(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CryptoCaller{contract: contract}, nil
}

// NewCryptoTransactor creates a new write-only instance of Crypto, bound to a specific deployed contract.
func NewCryptoTransactor(address common.Address, transactor bind.ContractTransactor) (*CryptoTransactor, error) {
	contract, err := bindCrypto(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CryptoTransactor{contract: contract}, nil
}

// NewCryptoFilterer creates a new log filterer instance of Crypto, bound to a specific deployed contract.
func NewCryptoFilterer(address common.Address, filterer bind.ContractFilterer) (*CryptoFilterer, error) {
	contract, err := bindCrypto(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CryptoFilterer{contract: contract}, nil
}

// bindCrypto binds a generic wrapper to an already deployed contract.
func bindCrypto(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(CryptoABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Crypto *CryptoRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Crypto.Contract.CryptoCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Crypto *CryptoRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Crypto.Contract.CryptoTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Crypto *CryptoRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Crypto.Contract.CryptoTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Crypto *CryptoCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Crypto.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Crypto *CryptoTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Crypto.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Crypto *CryptoTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Crypto.Contract.contract.Transact(opts, method, params...)
}

// AggregateSignatures is a free data retrieval call binding the contract method 0xf022e061.
//
// Solidity: function AggregateSignatures(uint256[2][] sigs, uint256[] indices, uint256 threshold, uint256[] invArray) view returns(uint256[2])
func (_Crypto *CryptoCaller) AggregateSignatures(opts *bind.CallOpts, sigs [][2]*big.Int, indices []*big.Int, threshold *big.Int, invArray []*big.Int) ([2]*big.Int, error) {
	var out []interface{}
	err := _Crypto.contract.Call(opts, &out, "AggregateSignatures", sigs, indices, threshold, invArray)

	if err != nil {
		return *new([2]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([2]*big.Int)).(*[2]*big.Int)

	return out0, err

}

// AggregateSignatures is a free data retrieval call binding the contract method 0xf022e061.
//
// Solidity: function AggregateSignatures(uint256[2][] sigs, uint256[] indices, uint256 threshold, uint256[] invArray) view returns(uint256[2])
func (_Crypto *CryptoSession) AggregateSignatures(sigs [][2]*big.Int, indices []*big.Int, threshold *big.Int, invArray []*big.Int) ([2]*big.Int, error) {
	return _Crypto.Contract.AggregateSignatures(&_Crypto.CallOpts, sigs, indices, threshold, invArray)
}

// AggregateSignatures is a free data retrieval call binding the contract method 0xf022e061.
//
// Solidity: function AggregateSignatures(uint256[2][] sigs, uint256[] indices, uint256 threshold, uint256[] invArray) view returns(uint256[2])
func (_Crypto *CryptoCallerSession) AggregateSignatures(sigs [][2]*big.Int, indices []*big.Int, threshold *big.Int, invArray []*big.Int) ([2]*big.Int, error) {
	return _Crypto.Contract.AggregateSignatures(&_Crypto.CallOpts, sigs, indices, threshold, invArray)
}

// HashToG1 is a free data retrieval call binding the contract method 0x95add79c.
//
// Solidity: function HashToG1(bytes message) view returns(uint256[2] h)
func (_Crypto *CryptoCaller) HashToG1(opts *bind.CallOpts, message []byte) ([2]*big.Int, error) {
	var out []interface{}
	err := _Crypto.contract.Call(opts, &out, "HashToG1", message)

	if err != nil {
		return *new([2]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([2]*big.Int)).(*[2]*big.Int)

	return out0, err

}

// HashToG1 is a free data retrieval call binding the contract method 0x95add79c.
//
// Solidity: function HashToG1(bytes message) view returns(uint256[2] h)
func (_Crypto *CryptoSession) HashToG1(message []byte) ([2]*big.Int, error) {
	return _Crypto.Contract.HashToG1(&_Crypto.CallOpts, message)
}

// HashToG1 is a free data retrieval call binding the contract method 0x95add79c.
//
// Solidity: function HashToG1(bytes message) view returns(uint256[2] h)
func (_Crypto *CryptoCallerSession) HashToG1(message []byte) ([2]*big.Int, error) {
	return _Crypto.Contract.HashToG1(&_Crypto.CallOpts, message)
}

// LagrangeInterpolationG1 is a free data retrieval call binding the contract method 0x16534acd.
//
// Solidity: function LagrangeInterpolationG1(uint256[2][] pointsG1, uint256[] indices, uint256 threshold, uint256[] invArray) view returns(uint256[2])
func (_Crypto *CryptoCaller) LagrangeInterpolationG1(opts *bind.CallOpts, pointsG1 [][2]*big.Int, indices []*big.Int, threshold *big.Int, invArray []*big.Int) ([2]*big.Int, error) {
	var out []interface{}
	err := _Crypto.contract.Call(opts, &out, "LagrangeInterpolationG1", pointsG1, indices, threshold, invArray)

	if err != nil {
		return *new([2]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([2]*big.Int)).(*[2]*big.Int)

	return out0, err

}

// LagrangeInterpolationG1 is a free data retrieval call binding the contract method 0x16534acd.
//
// Solidity: function LagrangeInterpolationG1(uint256[2][] pointsG1, uint256[] indices, uint256 threshold, uint256[] invArray) view returns(uint256[2])
func (_Crypto *CryptoSession) LagrangeInterpolationG1(pointsG1 [][2]*big.Int, indices []*big.Int, threshold *big.Int, invArray []*big.Int) ([2]*big.Int, error) {
	return _Crypto.Contract.LagrangeInterpolationG1(&_Crypto.CallOpts, pointsG1, indices, threshold, invArray)
}

// LagrangeInterpolationG1 is a free data retrieval call binding the contract method 0x16534acd.
//
// Solidity: function LagrangeInterpolationG1(uint256[2][] pointsG1, uint256[] indices, uint256 threshold, uint256[] invArray) view returns(uint256[2])
func (_Crypto *CryptoCallerSession) LagrangeInterpolationG1(pointsG1 [][2]*big.Int, indices []*big.Int, threshold *big.Int, invArray []*big.Int) ([2]*big.Int, error) {
	return _Crypto.Contract.LagrangeInterpolationG1(&_Crypto.CallOpts, pointsG1, indices, threshold, invArray)
}

// Sign is a free data retrieval call binding the contract method 0x6bdf477c.
//
// Solidity: function Sign(bytes message, uint256 privK) view returns(uint256[2] sig)
func (_Crypto *CryptoCaller) Sign(opts *bind.CallOpts, message []byte, privK *big.Int) ([2]*big.Int, error) {
	var out []interface{}
	err := _Crypto.contract.Call(opts, &out, "Sign", message, privK)

	if err != nil {
		return *new([2]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([2]*big.Int)).(*[2]*big.Int)

	return out0, err

}

// Sign is a free data retrieval call binding the contract method 0x6bdf477c.
//
// Solidity: function Sign(bytes message, uint256 privK) view returns(uint256[2] sig)
func (_Crypto *CryptoSession) Sign(message []byte, privK *big.Int) ([2]*big.Int, error) {
	return _Crypto.Contract.Sign(&_Crypto.CallOpts, message, privK)
}

// Sign is a free data retrieval call binding the contract method 0x6bdf477c.
//
// Solidity: function Sign(bytes message, uint256 privK) view returns(uint256[2] sig)
func (_Crypto *CryptoCallerSession) Sign(message []byte, privK *big.Int) ([2]*big.Int, error) {
	return _Crypto.Contract.Sign(&_Crypto.CallOpts, message, privK)
}

// Verify is a free data retrieval call binding the contract method 0x06367587.
//
// Solidity: function Verify(bytes message, uint256[2] sig, uint256[4] pubK) view returns(bool v)
func (_Crypto *CryptoCaller) Verify(opts *bind.CallOpts, message []byte, sig [2]*big.Int, pubK [4]*big.Int) (bool, error) {
	var out []interface{}
	err := _Crypto.contract.Call(opts, &out, "Verify", message, sig, pubK)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Verify is a free data retrieval call binding the contract method 0x06367587.
//
// Solidity: function Verify(bytes message, uint256[2] sig, uint256[4] pubK) view returns(bool v)
func (_Crypto *CryptoSession) Verify(message []byte, sig [2]*big.Int, pubK [4]*big.Int) (bool, error) {
	return _Crypto.Contract.Verify(&_Crypto.CallOpts, message, sig, pubK)
}

// Verify is a free data retrieval call binding the contract method 0x06367587.
//
// Solidity: function Verify(bytes message, uint256[2] sig, uint256[4] pubK) view returns(bool v)
func (_Crypto *CryptoCallerSession) Verify(message []byte, sig [2]*big.Int, pubK [4]*big.Int) (bool, error) {
	return _Crypto.Contract.Verify(&_Crypto.CallOpts, message, sig, pubK)
}

// BaseToG1 is a free data retrieval call binding the contract method 0x8b6eb76e.
//
// Solidity: function baseToG1(uint256 t) view returns(uint256[2] h)
func (_Crypto *CryptoCaller) BaseToG1(opts *bind.CallOpts, t *big.Int) ([2]*big.Int, error) {
	var out []interface{}
	err := _Crypto.contract.Call(opts, &out, "baseToG1", t)

	if err != nil {
		return *new([2]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([2]*big.Int)).(*[2]*big.Int)

	return out0, err

}

// BaseToG1 is a free data retrieval call binding the contract method 0x8b6eb76e.
//
// Solidity: function baseToG1(uint256 t) view returns(uint256[2] h)
func (_Crypto *CryptoSession) BaseToG1(t *big.Int) ([2]*big.Int, error) {
	return _Crypto.Contract.BaseToG1(&_Crypto.CallOpts, t)
}

// BaseToG1 is a free data retrieval call binding the contract method 0x8b6eb76e.
//
// Solidity: function baseToG1(uint256 t) view returns(uint256[2] h)
func (_Crypto *CryptoCallerSession) BaseToG1(t *big.Int) ([2]*big.Int, error) {
	return _Crypto.Contract.BaseToG1(&_Crypto.CallOpts, t)
}

// Bn128Add is a free data retrieval call binding the contract method 0xe664725b.
//
// Solidity: function bn128_add(uint256[4] input) view returns(uint256[2] result)
func (_Crypto *CryptoCaller) Bn128Add(opts *bind.CallOpts, input [4]*big.Int) ([2]*big.Int, error) {
	var out []interface{}
	err := _Crypto.contract.Call(opts, &out, "bn128_add", input)

	if err != nil {
		return *new([2]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([2]*big.Int)).(*[2]*big.Int)

	return out0, err

}

// Bn128Add is a free data retrieval call binding the contract method 0xe664725b.
//
// Solidity: function bn128_add(uint256[4] input) view returns(uint256[2] result)
func (_Crypto *CryptoSession) Bn128Add(input [4]*big.Int) ([2]*big.Int, error) {
	return _Crypto.Contract.Bn128Add(&_Crypto.CallOpts, input)
}

// Bn128Add is a free data retrieval call binding the contract method 0xe664725b.
//
// Solidity: function bn128_add(uint256[4] input) view returns(uint256[2] result)
func (_Crypto *CryptoCallerSession) Bn128Add(input [4]*big.Int) ([2]*big.Int, error) {
	return _Crypto.Contract.Bn128Add(&_Crypto.CallOpts, input)
}

// Bn128CheckPairing is a free data retrieval call binding the contract method 0xb87cbafc.
//
// Solidity: function bn128_check_pairing(uint256[12] input) view returns(bool)
func (_Crypto *CryptoCaller) Bn128CheckPairing(opts *bind.CallOpts, input [12]*big.Int) (bool, error) {
	var out []interface{}
	err := _Crypto.contract.Call(opts, &out, "bn128_check_pairing", input)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Bn128CheckPairing is a free data retrieval call binding the contract method 0xb87cbafc.
//
// Solidity: function bn128_check_pairing(uint256[12] input) view returns(bool)
func (_Crypto *CryptoSession) Bn128CheckPairing(input [12]*big.Int) (bool, error) {
	return _Crypto.Contract.Bn128CheckPairing(&_Crypto.CallOpts, input)
}

// Bn128CheckPairing is a free data retrieval call binding the contract method 0xb87cbafc.
//
// Solidity: function bn128_check_pairing(uint256[12] input) view returns(bool)
func (_Crypto *CryptoCallerSession) Bn128CheckPairing(input [12]*big.Int) (bool, error) {
	return _Crypto.Contract.Bn128CheckPairing(&_Crypto.CallOpts, input)
}

// Bn128IsOnCurve is a free data retrieval call binding the contract method 0xf4d7d33d.
//
// Solidity: function bn128_is_on_curve(uint256[2] point) pure returns(bool)
func (_Crypto *CryptoCaller) Bn128IsOnCurve(opts *bind.CallOpts, point [2]*big.Int) (bool, error) {
	var out []interface{}
	err := _Crypto.contract.Call(opts, &out, "bn128_is_on_curve", point)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Bn128IsOnCurve is a free data retrieval call binding the contract method 0xf4d7d33d.
//
// Solidity: function bn128_is_on_curve(uint256[2] point) pure returns(bool)
func (_Crypto *CryptoSession) Bn128IsOnCurve(point [2]*big.Int) (bool, error) {
	return _Crypto.Contract.Bn128IsOnCurve(&_Crypto.CallOpts, point)
}

// Bn128IsOnCurve is a free data retrieval call binding the contract method 0xf4d7d33d.
//
// Solidity: function bn128_is_on_curve(uint256[2] point) pure returns(bool)
func (_Crypto *CryptoCallerSession) Bn128IsOnCurve(point [2]*big.Int) (bool, error) {
	return _Crypto.Contract.Bn128IsOnCurve(&_Crypto.CallOpts, point)
}

// Bn128Multiply is a free data retrieval call binding the contract method 0x82688f14.
//
// Solidity: function bn128_multiply(uint256[3] input) view returns(uint256[2] result)
func (_Crypto *CryptoCaller) Bn128Multiply(opts *bind.CallOpts, input [3]*big.Int) ([2]*big.Int, error) {
	var out []interface{}
	err := _Crypto.contract.Call(opts, &out, "bn128_multiply", input)

	if err != nil {
		return *new([2]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([2]*big.Int)).(*[2]*big.Int)

	return out0, err

}

// Bn128Multiply is a free data retrieval call binding the contract method 0x82688f14.
//
// Solidity: function bn128_multiply(uint256[3] input) view returns(uint256[2] result)
func (_Crypto *CryptoSession) Bn128Multiply(input [3]*big.Int) ([2]*big.Int, error) {
	return _Crypto.Contract.Bn128Multiply(&_Crypto.CallOpts, input)
}

// Bn128Multiply is a free data retrieval call binding the contract method 0x82688f14.
//
// Solidity: function bn128_multiply(uint256[3] input) view returns(uint256[2] result)
func (_Crypto *CryptoCallerSession) Bn128Multiply(input [3]*big.Int) ([2]*big.Int, error) {
	return _Crypto.Contract.Bn128Multiply(&_Crypto.CallOpts, input)
}

// CheckIndices is a free data retrieval call binding the contract method 0x80f4a922.
//
// Solidity: function checkIndices(uint256[] honestIndices, uint256[] dishonestIndices, uint256 n) pure returns(bool validIndices)
func (_Crypto *CryptoCaller) CheckIndices(opts *bind.CallOpts, honestIndices []*big.Int, dishonestIndices []*big.Int, n *big.Int) (bool, error) {
	var out []interface{}
	err := _Crypto.contract.Call(opts, &out, "checkIndices", honestIndices, dishonestIndices, n)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckIndices is a free data retrieval call binding the contract method 0x80f4a922.
//
// Solidity: function checkIndices(uint256[] honestIndices, uint256[] dishonestIndices, uint256 n) pure returns(bool validIndices)
func (_Crypto *CryptoSession) CheckIndices(honestIndices []*big.Int, dishonestIndices []*big.Int, n *big.Int) (bool, error) {
	return _Crypto.Contract.CheckIndices(&_Crypto.CallOpts, honestIndices, dishonestIndices, n)
}

// CheckIndices is a free data retrieval call binding the contract method 0x80f4a922.
//
// Solidity: function checkIndices(uint256[] honestIndices, uint256[] dishonestIndices, uint256 n) pure returns(bool validIndices)
func (_Crypto *CryptoCallerSession) CheckIndices(honestIndices []*big.Int, dishonestIndices []*big.Int, n *big.Int) (bool, error) {
	return _Crypto.Contract.CheckIndices(&_Crypto.CallOpts, honestIndices, dishonestIndices, n)
}

// CheckInverses is a free data retrieval call binding the contract method 0xe480a92e.
//
// Solidity: function checkInverses(uint256[] invArray, uint256 maxIndex) pure returns(bool)
func (_Crypto *CryptoCaller) CheckInverses(opts *bind.CallOpts, invArray []*big.Int, maxIndex *big.Int) (bool, error) {
	var out []interface{}
	err := _Crypto.contract.Call(opts, &out, "checkInverses", invArray, maxIndex)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckInverses is a free data retrieval call binding the contract method 0xe480a92e.
//
// Solidity: function checkInverses(uint256[] invArray, uint256 maxIndex) pure returns(bool)
func (_Crypto *CryptoSession) CheckInverses(invArray []*big.Int, maxIndex *big.Int) (bool, error) {
	return _Crypto.Contract.CheckInverses(&_Crypto.CallOpts, invArray, maxIndex)
}

// CheckInverses is a free data retrieval call binding the contract method 0xe480a92e.
//
// Solidity: function checkInverses(uint256[] invArray, uint256 maxIndex) pure returns(bool)
func (_Crypto *CryptoCallerSession) CheckInverses(invArray []*big.Int, maxIndex *big.Int) (bool, error) {
	return _Crypto.Contract.CheckInverses(&_Crypto.CallOpts, invArray, maxIndex)
}

// ComputeArrayMax is a free data retrieval call binding the contract method 0xa218e426.
//
// Solidity: function computeArrayMax(uint256[] uint256Array) pure returns(uint256)
func (_Crypto *CryptoCaller) ComputeArrayMax(opts *bind.CallOpts, uint256Array []*big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Crypto.contract.Call(opts, &out, "computeArrayMax", uint256Array)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ComputeArrayMax is a free data retrieval call binding the contract method 0xa218e426.
//
// Solidity: function computeArrayMax(uint256[] uint256Array) pure returns(uint256)
func (_Crypto *CryptoSession) ComputeArrayMax(uint256Array []*big.Int) (*big.Int, error) {
	return _Crypto.Contract.ComputeArrayMax(&_Crypto.CallOpts, uint256Array)
}

// ComputeArrayMax is a free data retrieval call binding the contract method 0xa218e426.
//
// Solidity: function computeArrayMax(uint256[] uint256Array) pure returns(uint256)
func (_Crypto *CryptoCallerSession) ComputeArrayMax(uint256Array []*big.Int) (*big.Int, error) {
	return _Crypto.Contract.ComputeArrayMax(&_Crypto.CallOpts, uint256Array)
}

// DleqVerify is a free data retrieval call binding the contract method 0xe81ee0e3.
//
// Solidity: function dleq_verify(uint256[2] x1, uint256[2] y1, uint256[2] x2, uint256[2] y2, uint256[2] proof) view returns(bool proof_is_valid)
func (_Crypto *CryptoCaller) DleqVerify(opts *bind.CallOpts, x1 [2]*big.Int, y1 [2]*big.Int, x2 [2]*big.Int, y2 [2]*big.Int, proof [2]*big.Int) (bool, error) {
	var out []interface{}
	err := _Crypto.contract.Call(opts, &out, "dleq_verify", x1, y1, x2, y2, proof)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// DleqVerify is a free data retrieval call binding the contract method 0xe81ee0e3.
//
// Solidity: function dleq_verify(uint256[2] x1, uint256[2] y1, uint256[2] x2, uint256[2] y2, uint256[2] proof) view returns(bool proof_is_valid)
func (_Crypto *CryptoSession) DleqVerify(x1 [2]*big.Int, y1 [2]*big.Int, x2 [2]*big.Int, y2 [2]*big.Int, proof [2]*big.Int) (bool, error) {
	return _Crypto.Contract.DleqVerify(&_Crypto.CallOpts, x1, y1, x2, y2, proof)
}

// DleqVerify is a free data retrieval call binding the contract method 0xe81ee0e3.
//
// Solidity: function dleq_verify(uint256[2] x1, uint256[2] y1, uint256[2] x2, uint256[2] y2, uint256[2] proof) view returns(bool proof_is_valid)
func (_Crypto *CryptoCallerSession) DleqVerify(x1 [2]*big.Int, y1 [2]*big.Int, x2 [2]*big.Int, y2 [2]*big.Int, proof [2]*big.Int) (bool, error) {
	return _Crypto.Contract.DleqVerify(&_Crypto.CallOpts, x1, y1, x2, y2, proof)
}

// Expmod is a free data retrieval call binding the contract method 0x783ce458.
//
// Solidity: function expmod(uint256 base, uint256 e, uint256 m) view returns(uint256 result)
func (_Crypto *CryptoCaller) Expmod(opts *bind.CallOpts, base *big.Int, e *big.Int, m *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Crypto.contract.Call(opts, &out, "expmod", base, e, m)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Expmod is a free data retrieval call binding the contract method 0x783ce458.
//
// Solidity: function expmod(uint256 base, uint256 e, uint256 m) view returns(uint256 result)
func (_Crypto *CryptoSession) Expmod(base *big.Int, e *big.Int, m *big.Int) (*big.Int, error) {
	return _Crypto.Contract.Expmod(&_Crypto.CallOpts, base, e, m)
}

// Expmod is a free data retrieval call binding the contract method 0x783ce458.
//
// Solidity: function expmod(uint256 base, uint256 e, uint256 m) view returns(uint256 result)
func (_Crypto *CryptoCallerSession) Expmod(base *big.Int, e *big.Int, m *big.Int) (*big.Int, error) {
	return _Crypto.Contract.Expmod(&_Crypto.CallOpts, base, e, m)
}

// HashToBase is a free data retrieval call binding the contract method 0x38529ab4.
//
// Solidity: function hashToBase(bytes message, bytes1 c0, bytes1 c1) pure returns(uint256 t)
func (_Crypto *CryptoCaller) HashToBase(opts *bind.CallOpts, message []byte, c0 [1]byte, c1 [1]byte) (*big.Int, error) {
	var out []interface{}
	err := _Crypto.contract.Call(opts, &out, "hashToBase", message, c0, c1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// HashToBase is a free data retrieval call binding the contract method 0x38529ab4.
//
// Solidity: function hashToBase(bytes message, bytes1 c0, bytes1 c1) pure returns(uint256 t)
func (_Crypto *CryptoSession) HashToBase(message []byte, c0 [1]byte, c1 [1]byte) (*big.Int, error) {
	return _Crypto.Contract.HashToBase(&_Crypto.CallOpts, message, c0, c1)
}

// HashToBase is a free data retrieval call binding the contract method 0x38529ab4.
//
// Solidity: function hashToBase(bytes message, bytes1 c0, bytes1 c1) pure returns(uint256 t)
func (_Crypto *CryptoCallerSession) HashToBase(message []byte, c0 [1]byte, c1 [1]byte) (*big.Int, error) {
	return _Crypto.Contract.HashToBase(&_Crypto.CallOpts, message, c0, c1)
}

// Invert is a free data retrieval call binding the contract method 0x7351ee37.
//
// Solidity: function invert(uint256 t) view returns(uint256 s)
func (_Crypto *CryptoCaller) Invert(opts *bind.CallOpts, t *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Crypto.contract.Call(opts, &out, "invert", t)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Invert is a free data retrieval call binding the contract method 0x7351ee37.
//
// Solidity: function invert(uint256 t) view returns(uint256 s)
func (_Crypto *CryptoSession) Invert(t *big.Int) (*big.Int, error) {
	return _Crypto.Contract.Invert(&_Crypto.CallOpts, t)
}

// Invert is a free data retrieval call binding the contract method 0x7351ee37.
//
// Solidity: function invert(uint256 t) view returns(uint256 s)
func (_Crypto *CryptoCallerSession) Invert(t *big.Int) (*big.Int, error) {
	return _Crypto.Contract.Invert(&_Crypto.CallOpts, t)
}

// Legendre is a free data retrieval call binding the contract method 0x6ef064a4.
//
// Solidity: function legendre(uint256 t) view returns(int256 chi)
func (_Crypto *CryptoCaller) Legendre(opts *bind.CallOpts, t *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Crypto.contract.Call(opts, &out, "legendre", t)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Legendre is a free data retrieval call binding the contract method 0x6ef064a4.
//
// Solidity: function legendre(uint256 t) view returns(int256 chi)
func (_Crypto *CryptoSession) Legendre(t *big.Int) (*big.Int, error) {
	return _Crypto.Contract.Legendre(&_Crypto.CallOpts, t)
}

// Legendre is a free data retrieval call binding the contract method 0x6ef064a4.
//
// Solidity: function legendre(uint256 t) view returns(int256 chi)
func (_Crypto *CryptoCallerSession) Legendre(t *big.Int) (*big.Int, error) {
	return _Crypto.Contract.Legendre(&_Crypto.CallOpts, t)
}

// LiRjPartialConst is a free data retrieval call binding the contract method 0x58ef876a.
//
// Solidity: function liRjPartialConst(uint256 k, uint256 j, uint256[] invArray) pure returns(uint256)
func (_Crypto *CryptoCaller) LiRjPartialConst(opts *bind.CallOpts, k *big.Int, j *big.Int, invArray []*big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Crypto.contract.Call(opts, &out, "liRjPartialConst", k, j, invArray)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LiRjPartialConst is a free data retrieval call binding the contract method 0x58ef876a.
//
// Solidity: function liRjPartialConst(uint256 k, uint256 j, uint256[] invArray) pure returns(uint256)
func (_Crypto *CryptoSession) LiRjPartialConst(k *big.Int, j *big.Int, invArray []*big.Int) (*big.Int, error) {
	return _Crypto.Contract.LiRjPartialConst(&_Crypto.CallOpts, k, j, invArray)
}

// LiRjPartialConst is a free data retrieval call binding the contract method 0x58ef876a.
//
// Solidity: function liRjPartialConst(uint256 k, uint256 j, uint256[] invArray) pure returns(uint256)
func (_Crypto *CryptoCallerSession) LiRjPartialConst(k *big.Int, j *big.Int, invArray []*big.Int) (*big.Int, error) {
	return _Crypto.Contract.LiRjPartialConst(&_Crypto.CallOpts, k, j, invArray)
}

// Neg is a free data retrieval call binding the contract method 0x77d2f203.
//
// Solidity: function neg(uint256 t) pure returns(uint256 s)
func (_Crypto *CryptoCaller) Neg(opts *bind.CallOpts, t *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Crypto.contract.Call(opts, &out, "neg", t)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Neg is a free data retrieval call binding the contract method 0x77d2f203.
//
// Solidity: function neg(uint256 t) pure returns(uint256 s)
func (_Crypto *CryptoSession) Neg(t *big.Int) (*big.Int, error) {
	return _Crypto.Contract.Neg(&_Crypto.CallOpts, t)
}

// Neg is a free data retrieval call binding the contract method 0x77d2f203.
//
// Solidity: function neg(uint256 t) pure returns(uint256 s)
func (_Crypto *CryptoCallerSession) Neg(t *big.Int) (*big.Int, error) {
	return _Crypto.Contract.Neg(&_Crypto.CallOpts, t)
}

// SafeSigningPoint is a free data retrieval call binding the contract method 0x96d95a6f.
//
// Solidity: function safeSigningPoint(uint256[2] input) pure returns(bool)
func (_Crypto *CryptoCaller) SafeSigningPoint(opts *bind.CallOpts, input [2]*big.Int) (bool, error) {
	var out []interface{}
	err := _Crypto.contract.Call(opts, &out, "safeSigningPoint", input)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SafeSigningPoint is a free data retrieval call binding the contract method 0x96d95a6f.
//
// Solidity: function safeSigningPoint(uint256[2] input) pure returns(bool)
func (_Crypto *CryptoSession) SafeSigningPoint(input [2]*big.Int) (bool, error) {
	return _Crypto.Contract.SafeSigningPoint(&_Crypto.CallOpts, input)
}

// SafeSigningPoint is a free data retrieval call binding the contract method 0x96d95a6f.
//
// Solidity: function safeSigningPoint(uint256[2] input) pure returns(bool)
func (_Crypto *CryptoCallerSession) SafeSigningPoint(input [2]*big.Int) (bool, error) {
	return _Crypto.Contract.SafeSigningPoint(&_Crypto.CallOpts, input)
}

// Sign0 is a free data retrieval call binding the contract method 0xccba3123.
//
// Solidity: function sign0(uint256 t) pure returns(uint256 s)
func (_Crypto *CryptoCaller) Sign0(opts *bind.CallOpts, t *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Crypto.contract.Call(opts, &out, "sign0", t)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Sign0 is a free data retrieval call binding the contract method 0xccba3123.
//
// Solidity: function sign0(uint256 t) pure returns(uint256 s)
func (_Crypto *CryptoSession) Sign0(t *big.Int) (*big.Int, error) {
	return _Crypto.Contract.Sign0(&_Crypto.CallOpts, t)
}

// Sign0 is a free data retrieval call binding the contract method 0xccba3123.
//
// Solidity: function sign0(uint256 t) pure returns(uint256 s)
func (_Crypto *CryptoCallerSession) Sign0(t *big.Int) (*big.Int, error) {
	return _Crypto.Contract.Sign0(&_Crypto.CallOpts, t)
}

// Sqrt is a free data retrieval call binding the contract method 0x677342ce.
//
// Solidity: function sqrt(uint256 t) view returns(uint256 s)
func (_Crypto *CryptoCaller) Sqrt(opts *bind.CallOpts, t *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Crypto.contract.Call(opts, &out, "sqrt", t)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Sqrt is a free data retrieval call binding the contract method 0x677342ce.
//
// Solidity: function sqrt(uint256 t) view returns(uint256 s)
func (_Crypto *CryptoSession) Sqrt(t *big.Int) (*big.Int, error) {
	return _Crypto.Contract.Sqrt(&_Crypto.CallOpts, t)
}

// Sqrt is a free data retrieval call binding the contract method 0x677342ce.
//
// Solidity: function sqrt(uint256 t) view returns(uint256 s)
func (_Crypto *CryptoCallerSession) Sqrt(t *big.Int) (*big.Int, error) {
	return _Crypto.Contract.Sqrt(&_Crypto.CallOpts, t)
}

// CryptoLibraryMetaData contains all meta data concerning the CryptoLibrary contract.
var CryptoLibraryMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220994791288a32cf328695c1966a31f9ac0bf430955880d1a217f5bfb523e4953b64736f6c634300080b0033",
}

// CryptoLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use CryptoLibraryMetaData.ABI instead.
var CryptoLibraryABI = CryptoLibraryMetaData.ABI

// CryptoLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use CryptoLibraryMetaData.Bin instead.
var CryptoLibraryBin = CryptoLibraryMetaData.Bin

// DeployCryptoLibrary deploys a new Ethereum contract, binding an instance of CryptoLibrary to it.
func DeployCryptoLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *CryptoLibrary, error) {
	parsed, err := CryptoLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CryptoLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &CryptoLibrary{CryptoLibraryCaller: CryptoLibraryCaller{contract: contract}, CryptoLibraryTransactor: CryptoLibraryTransactor{contract: contract}, CryptoLibraryFilterer: CryptoLibraryFilterer{contract: contract}}, nil
}

// CryptoLibrary is an auto generated Go binding around an Ethereum contract.
type CryptoLibrary struct {
	CryptoLibraryCaller     // Read-only binding to the contract
	CryptoLibraryTransactor // Write-only binding to the contract
	CryptoLibraryFilterer   // Log filterer for contract events
}

// CryptoLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type CryptoLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CryptoLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type CryptoLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CryptoLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CryptoLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CryptoLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type CryptoLibrarySession struct {
	Contract     *CryptoLibrary    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CryptoLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type CryptoLibraryCallerSession struct {
	Contract *CryptoLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// CryptoLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type CryptoLibraryTransactorSession struct {
	Contract     *CryptoLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// CryptoLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type CryptoLibraryRaw struct {
	Contract *CryptoLibrary // Generic contract binding to access the raw methods on
}

// CryptoLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type CryptoLibraryCallerRaw struct {
	Contract *CryptoLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// CryptoLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type CryptoLibraryTransactorRaw struct {
	Contract *CryptoLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCryptoLibrary creates a new instance of CryptoLibrary, bound to a specific deployed contract.
func NewCryptoLibrary(address common.Address, backend bind.ContractBackend) (*CryptoLibrary, error) {
	contract, err := bindCryptoLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CryptoLibrary{CryptoLibraryCaller: CryptoLibraryCaller{contract: contract}, CryptoLibraryTransactor: CryptoLibraryTransactor{contract: contract}, CryptoLibraryFilterer: CryptoLibraryFilterer{contract: contract}}, nil
}

// NewCryptoLibraryCaller creates a new read-only instance of CryptoLibrary, bound to a specific deployed contract.
func NewCryptoLibraryCaller(address common.Address, caller bind.ContractCaller) (*CryptoLibraryCaller, error) {
	contract, err := bindCryptoLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CryptoLibraryCaller{contract: contract}, nil
}

// NewCryptoLibraryTransactor creates a new write-only instance of CryptoLibrary, bound to a specific deployed contract.
func NewCryptoLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*CryptoLibraryTransactor, error) {
	contract, err := bindCryptoLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CryptoLibraryTransactor{contract: contract}, nil
}

// NewCryptoLibraryFilterer creates a new log filterer instance of CryptoLibrary, bound to a specific deployed contract.
func NewCryptoLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*CryptoLibraryFilterer, error) {
	contract, err := bindCryptoLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CryptoLibraryFilterer{contract: contract}, nil
}

// bindCryptoLibrary binds a generic wrapper to an already deployed contract.
func bindCryptoLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(CryptoLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CryptoLibrary *CryptoLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CryptoLibrary.Contract.CryptoLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CryptoLibrary *CryptoLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CryptoLibrary.Contract.CryptoLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CryptoLibrary *CryptoLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CryptoLibrary.Contract.CryptoLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CryptoLibrary *CryptoLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CryptoLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CryptoLibrary *CryptoLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CryptoLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CryptoLibrary *CryptoLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CryptoLibrary.Contract.contract.Transact(opts, method, params...)
}

// DSAuthMetaData contains all meta data concerning the DSAuth contract.
var DSAuthMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contractDSAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractDSAuthority\",\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50600180546001600160a01b031916339081179091556040517fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9490600090a26104cf8061005e6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806313af4035146100515780637a9e5e4b146100665780638da5cb5b14610079578063bf7e214f146100c2575b600080fd5b61006461005f366004610453565b6100e2565b005b610064610074366004610453565b6101ea565b6001546100999073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6000546100999073ffffffffffffffffffffffffffffffffffffffff1681565b610110336000357fffffffff00000000000000000000000000000000000000000000000000000000166102eb565b61017b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d617574682d756e617574686f72697a656400000000000000000000000060448201526064015b60405180910390fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040517fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9490600090a250565b610218336000357fffffffff00000000000000000000000000000000000000000000000000000000166102eb565b61027e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d617574682d756e617574686f72697a65640000000000000000000000006044820152606401610172565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316908117825560405190917f1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada491a250565b600073ffffffffffffffffffffffffffffffffffffffff831630141561031357506001610428565b60015473ffffffffffffffffffffffffffffffffffffffff8481169116141561033e57506001610428565b60005473ffffffffffffffffffffffffffffffffffffffff1661036357506000610428565b6000546040517fb700961300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301523060248301527fffffffff00000000000000000000000000000000000000000000000000000000851660448301529091169063b700961390606401602060405180830381865afa158015610401573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104259190610477565b90505b92915050565b73ffffffffffffffffffffffffffffffffffffffff8116811461045057600080fd5b50565b60006020828403121561046557600080fd5b81356104708161042e565b9392505050565b60006020828403121561048957600080fd5b8151801515811461047057600080fdfea2646970667358221220e6b740c54933643aed9719c2904c55bac12ea676d7fceee3cbe040c871008ee364736f6c634300080b0033",
}

// DSAuthABI is the input ABI used to generate the binding from.
// Deprecated: Use DSAuthMetaData.ABI instead.
var DSAuthABI = DSAuthMetaData.ABI

// DSAuthBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use DSAuthMetaData.Bin instead.
var DSAuthBin = DSAuthMetaData.Bin

// DeployDSAuth deploys a new Ethereum contract, binding an instance of DSAuth to it.
func DeployDSAuth(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *DSAuth, error) {
	parsed, err := DSAuthMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(DSAuthBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &DSAuth{DSAuthCaller: DSAuthCaller{contract: contract}, DSAuthTransactor: DSAuthTransactor{contract: contract}, DSAuthFilterer: DSAuthFilterer{contract: contract}}, nil
}

// DSAuth is an auto generated Go binding around an Ethereum contract.
type DSAuth struct {
	DSAuthCaller     // Read-only binding to the contract
	DSAuthTransactor // Write-only binding to the contract
	DSAuthFilterer   // Log filterer for contract events
}

// DSAuthCaller is an auto generated read-only Go binding around an Ethereum contract.
type DSAuthCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DSAuthTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DSAuthTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DSAuthFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DSAuthFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DSAuthSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DSAuthSession struct {
	Contract     *DSAuth           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DSAuthCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DSAuthCallerSession struct {
	Contract *DSAuthCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// DSAuthTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DSAuthTransactorSession struct {
	Contract     *DSAuthTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DSAuthRaw is an auto generated low-level Go binding around an Ethereum contract.
type DSAuthRaw struct {
	Contract *DSAuth // Generic contract binding to access the raw methods on
}

// DSAuthCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DSAuthCallerRaw struct {
	Contract *DSAuthCaller // Generic read-only contract binding to access the raw methods on
}

// DSAuthTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DSAuthTransactorRaw struct {
	Contract *DSAuthTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDSAuth creates a new instance of DSAuth, bound to a specific deployed contract.
func NewDSAuth(address common.Address, backend bind.ContractBackend) (*DSAuth, error) {
	contract, err := bindDSAuth(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &DSAuth{DSAuthCaller: DSAuthCaller{contract: contract}, DSAuthTransactor: DSAuthTransactor{contract: contract}, DSAuthFilterer: DSAuthFilterer{contract: contract}}, nil
}

// NewDSAuthCaller creates a new read-only instance of DSAuth, bound to a specific deployed contract.
func NewDSAuthCaller(address common.Address, caller bind.ContractCaller) (*DSAuthCaller, error) {
	contract, err := bindDSAuth(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DSAuthCaller{contract: contract}, nil
}

// NewDSAuthTransactor creates a new write-only instance of DSAuth, bound to a specific deployed contract.
func NewDSAuthTransactor(address common.Address, transactor bind.ContractTransactor) (*DSAuthTransactor, error) {
	contract, err := bindDSAuth(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DSAuthTransactor{contract: contract}, nil
}

// NewDSAuthFilterer creates a new log filterer instance of DSAuth, bound to a specific deployed contract.
func NewDSAuthFilterer(address common.Address, filterer bind.ContractFilterer) (*DSAuthFilterer, error) {
	contract, err := bindDSAuth(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DSAuthFilterer{contract: contract}, nil
}

// bindDSAuth binds a generic wrapper to an already deployed contract.
func bindDSAuth(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(DSAuthABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DSAuth *DSAuthRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DSAuth.Contract.DSAuthCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DSAuth *DSAuthRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DSAuth.Contract.DSAuthTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DSAuth *DSAuthRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DSAuth.Contract.DSAuthTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DSAuth *DSAuthCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DSAuth.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DSAuth *DSAuthTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DSAuth.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DSAuth *DSAuthTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DSAuth.Contract.contract.Transact(opts, method, params...)
}

// Authority is a free data retrieval call binding the contract method 0xbf7e214f.
//
// Solidity: function authority() view returns(address)
func (_DSAuth *DSAuthCaller) Authority(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _DSAuth.contract.Call(opts, &out, "authority")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Authority is a free data retrieval call binding the contract method 0xbf7e214f.
//
// Solidity: function authority() view returns(address)
func (_DSAuth *DSAuthSession) Authority() (common.Address, error) {
	return _DSAuth.Contract.Authority(&_DSAuth.CallOpts)
}

// Authority is a free data retrieval call binding the contract method 0xbf7e214f.
//
// Solidity: function authority() view returns(address)
func (_DSAuth *DSAuthCallerSession) Authority() (common.Address, error) {
	return _DSAuth.Contract.Authority(&_DSAuth.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_DSAuth *DSAuthCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _DSAuth.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_DSAuth *DSAuthSession) Owner() (common.Address, error) {
	return _DSAuth.Contract.Owner(&_DSAuth.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_DSAuth *DSAuthCallerSession) Owner() (common.Address, error) {
	return _DSAuth.Contract.Owner(&_DSAuth.CallOpts)
}

// SetAuthority is a paid mutator transaction binding the contract method 0x7a9e5e4b.
//
// Solidity: function setAuthority(address authority_) returns()
func (_DSAuth *DSAuthTransactor) SetAuthority(opts *bind.TransactOpts, authority_ common.Address) (*types.Transaction, error) {
	return _DSAuth.contract.Transact(opts, "setAuthority", authority_)
}

// SetAuthority is a paid mutator transaction binding the contract method 0x7a9e5e4b.
//
// Solidity: function setAuthority(address authority_) returns()
func (_DSAuth *DSAuthSession) SetAuthority(authority_ common.Address) (*types.Transaction, error) {
	return _DSAuth.Contract.SetAuthority(&_DSAuth.TransactOpts, authority_)
}

// SetAuthority is a paid mutator transaction binding the contract method 0x7a9e5e4b.
//
// Solidity: function setAuthority(address authority_) returns()
func (_DSAuth *DSAuthTransactorSession) SetAuthority(authority_ common.Address) (*types.Transaction, error) {
	return _DSAuth.Contract.SetAuthority(&_DSAuth.TransactOpts, authority_)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address owner_) returns()
func (_DSAuth *DSAuthTransactor) SetOwner(opts *bind.TransactOpts, owner_ common.Address) (*types.Transaction, error) {
	return _DSAuth.contract.Transact(opts, "setOwner", owner_)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address owner_) returns()
func (_DSAuth *DSAuthSession) SetOwner(owner_ common.Address) (*types.Transaction, error) {
	return _DSAuth.Contract.SetOwner(&_DSAuth.TransactOpts, owner_)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address owner_) returns()
func (_DSAuth *DSAuthTransactorSession) SetOwner(owner_ common.Address) (*types.Transaction, error) {
	return _DSAuth.Contract.SetOwner(&_DSAuth.TransactOpts, owner_)
}

// DSAuthLogSetAuthorityIterator is returned from FilterLogSetAuthority and is used to iterate over the raw logs and unpacked data for LogSetAuthority events raised by the DSAuth contract.
type DSAuthLogSetAuthorityIterator struct {
	Event *DSAuthLogSetAuthority // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DSAuthLogSetAuthorityIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DSAuthLogSetAuthority)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DSAuthLogSetAuthority)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DSAuthLogSetAuthorityIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DSAuthLogSetAuthorityIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DSAuthLogSetAuthority represents a LogSetAuthority event raised by the DSAuth contract.
type DSAuthLogSetAuthority struct {
	Authority common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterLogSetAuthority is a free log retrieval operation binding the contract event 0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4.
//
// Solidity: event LogSetAuthority(address indexed authority)
func (_DSAuth *DSAuthFilterer) FilterLogSetAuthority(opts *bind.FilterOpts, authority []common.Address) (*DSAuthLogSetAuthorityIterator, error) {

	var authorityRule []interface{}
	for _, authorityItem := range authority {
		authorityRule = append(authorityRule, authorityItem)
	}

	logs, sub, err := _DSAuth.contract.FilterLogs(opts, "LogSetAuthority", authorityRule)
	if err != nil {
		return nil, err
	}
	return &DSAuthLogSetAuthorityIterator{contract: _DSAuth.contract, event: "LogSetAuthority", logs: logs, sub: sub}, nil
}

// WatchLogSetAuthority is a free log subscription operation binding the contract event 0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4.
//
// Solidity: event LogSetAuthority(address indexed authority)
func (_DSAuth *DSAuthFilterer) WatchLogSetAuthority(opts *bind.WatchOpts, sink chan<- *DSAuthLogSetAuthority, authority []common.Address) (event.Subscription, error) {

	var authorityRule []interface{}
	for _, authorityItem := range authority {
		authorityRule = append(authorityRule, authorityItem)
	}

	logs, sub, err := _DSAuth.contract.WatchLogs(opts, "LogSetAuthority", authorityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DSAuthLogSetAuthority)
				if err := _DSAuth.contract.UnpackLog(event, "LogSetAuthority", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogSetAuthority is a log parse operation binding the contract event 0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4.
//
// Solidity: event LogSetAuthority(address indexed authority)
func (_DSAuth *DSAuthFilterer) ParseLogSetAuthority(log types.Log) (*DSAuthLogSetAuthority, error) {
	event := new(DSAuthLogSetAuthority)
	if err := _DSAuth.contract.UnpackLog(event, "LogSetAuthority", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DSAuthLogSetOwnerIterator is returned from FilterLogSetOwner and is used to iterate over the raw logs and unpacked data for LogSetOwner events raised by the DSAuth contract.
type DSAuthLogSetOwnerIterator struct {
	Event *DSAuthLogSetOwner // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DSAuthLogSetOwnerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DSAuthLogSetOwner)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DSAuthLogSetOwner)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DSAuthLogSetOwnerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DSAuthLogSetOwnerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DSAuthLogSetOwner represents a LogSetOwner event raised by the DSAuth contract.
type DSAuthLogSetOwner struct {
	Owner common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogSetOwner is a free log retrieval operation binding the contract event 0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94.
//
// Solidity: event LogSetOwner(address indexed owner)
func (_DSAuth *DSAuthFilterer) FilterLogSetOwner(opts *bind.FilterOpts, owner []common.Address) (*DSAuthLogSetOwnerIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _DSAuth.contract.FilterLogs(opts, "LogSetOwner", ownerRule)
	if err != nil {
		return nil, err
	}
	return &DSAuthLogSetOwnerIterator{contract: _DSAuth.contract, event: "LogSetOwner", logs: logs, sub: sub}, nil
}

// WatchLogSetOwner is a free log subscription operation binding the contract event 0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94.
//
// Solidity: event LogSetOwner(address indexed owner)
func (_DSAuth *DSAuthFilterer) WatchLogSetOwner(opts *bind.WatchOpts, sink chan<- *DSAuthLogSetOwner, owner []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _DSAuth.contract.WatchLogs(opts, "LogSetOwner", ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DSAuthLogSetOwner)
				if err := _DSAuth.contract.UnpackLog(event, "LogSetOwner", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogSetOwner is a log parse operation binding the contract event 0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94.
//
// Solidity: event LogSetOwner(address indexed owner)
func (_DSAuth *DSAuthFilterer) ParseLogSetOwner(log types.Log) (*DSAuthLogSetOwner, error) {
	event := new(DSAuthLogSetOwner)
	if err := _DSAuth.contract.UnpackLog(event, "LogSetOwner", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DSAuthEventsMetaData contains all meta data concerning the DSAuthEvents contract.
var DSAuthEventsMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"}]",
	Bin: "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220407940d972592316e21ba27e12789f56a28a1e5932d32d1af641e71179a1654164736f6c634300080b0033",
}

// DSAuthEventsABI is the input ABI used to generate the binding from.
// Deprecated: Use DSAuthEventsMetaData.ABI instead.
var DSAuthEventsABI = DSAuthEventsMetaData.ABI

// DSAuthEventsBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use DSAuthEventsMetaData.Bin instead.
var DSAuthEventsBin = DSAuthEventsMetaData.Bin

// DeployDSAuthEvents deploys a new Ethereum contract, binding an instance of DSAuthEvents to it.
func DeployDSAuthEvents(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *DSAuthEvents, error) {
	parsed, err := DSAuthEventsMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(DSAuthEventsBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &DSAuthEvents{DSAuthEventsCaller: DSAuthEventsCaller{contract: contract}, DSAuthEventsTransactor: DSAuthEventsTransactor{contract: contract}, DSAuthEventsFilterer: DSAuthEventsFilterer{contract: contract}}, nil
}

// DSAuthEvents is an auto generated Go binding around an Ethereum contract.
type DSAuthEvents struct {
	DSAuthEventsCaller     // Read-only binding to the contract
	DSAuthEventsTransactor // Write-only binding to the contract
	DSAuthEventsFilterer   // Log filterer for contract events
}

// DSAuthEventsCaller is an auto generated read-only Go binding around an Ethereum contract.
type DSAuthEventsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DSAuthEventsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DSAuthEventsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DSAuthEventsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DSAuthEventsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DSAuthEventsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DSAuthEventsSession struct {
	Contract     *DSAuthEvents     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DSAuthEventsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DSAuthEventsCallerSession struct {
	Contract *DSAuthEventsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// DSAuthEventsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DSAuthEventsTransactorSession struct {
	Contract     *DSAuthEventsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// DSAuthEventsRaw is an auto generated low-level Go binding around an Ethereum contract.
type DSAuthEventsRaw struct {
	Contract *DSAuthEvents // Generic contract binding to access the raw methods on
}

// DSAuthEventsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DSAuthEventsCallerRaw struct {
	Contract *DSAuthEventsCaller // Generic read-only contract binding to access the raw methods on
}

// DSAuthEventsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DSAuthEventsTransactorRaw struct {
	Contract *DSAuthEventsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDSAuthEvents creates a new instance of DSAuthEvents, bound to a specific deployed contract.
func NewDSAuthEvents(address common.Address, backend bind.ContractBackend) (*DSAuthEvents, error) {
	contract, err := bindDSAuthEvents(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &DSAuthEvents{DSAuthEventsCaller: DSAuthEventsCaller{contract: contract}, DSAuthEventsTransactor: DSAuthEventsTransactor{contract: contract}, DSAuthEventsFilterer: DSAuthEventsFilterer{contract: contract}}, nil
}

// NewDSAuthEventsCaller creates a new read-only instance of DSAuthEvents, bound to a specific deployed contract.
func NewDSAuthEventsCaller(address common.Address, caller bind.ContractCaller) (*DSAuthEventsCaller, error) {
	contract, err := bindDSAuthEvents(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DSAuthEventsCaller{contract: contract}, nil
}

// NewDSAuthEventsTransactor creates a new write-only instance of DSAuthEvents, bound to a specific deployed contract.
func NewDSAuthEventsTransactor(address common.Address, transactor bind.ContractTransactor) (*DSAuthEventsTransactor, error) {
	contract, err := bindDSAuthEvents(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DSAuthEventsTransactor{contract: contract}, nil
}

// NewDSAuthEventsFilterer creates a new log filterer instance of DSAuthEvents, bound to a specific deployed contract.
func NewDSAuthEventsFilterer(address common.Address, filterer bind.ContractFilterer) (*DSAuthEventsFilterer, error) {
	contract, err := bindDSAuthEvents(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DSAuthEventsFilterer{contract: contract}, nil
}

// bindDSAuthEvents binds a generic wrapper to an already deployed contract.
func bindDSAuthEvents(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(DSAuthEventsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DSAuthEvents *DSAuthEventsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DSAuthEvents.Contract.DSAuthEventsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DSAuthEvents *DSAuthEventsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DSAuthEvents.Contract.DSAuthEventsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DSAuthEvents *DSAuthEventsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DSAuthEvents.Contract.DSAuthEventsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DSAuthEvents *DSAuthEventsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DSAuthEvents.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DSAuthEvents *DSAuthEventsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DSAuthEvents.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DSAuthEvents *DSAuthEventsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DSAuthEvents.Contract.contract.Transact(opts, method, params...)
}

// DSAuthEventsLogSetAuthorityIterator is returned from FilterLogSetAuthority and is used to iterate over the raw logs and unpacked data for LogSetAuthority events raised by the DSAuthEvents contract.
type DSAuthEventsLogSetAuthorityIterator struct {
	Event *DSAuthEventsLogSetAuthority // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DSAuthEventsLogSetAuthorityIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DSAuthEventsLogSetAuthority)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DSAuthEventsLogSetAuthority)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DSAuthEventsLogSetAuthorityIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DSAuthEventsLogSetAuthorityIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DSAuthEventsLogSetAuthority represents a LogSetAuthority event raised by the DSAuthEvents contract.
type DSAuthEventsLogSetAuthority struct {
	Authority common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterLogSetAuthority is a free log retrieval operation binding the contract event 0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4.
//
// Solidity: event LogSetAuthority(address indexed authority)
func (_DSAuthEvents *DSAuthEventsFilterer) FilterLogSetAuthority(opts *bind.FilterOpts, authority []common.Address) (*DSAuthEventsLogSetAuthorityIterator, error) {

	var authorityRule []interface{}
	for _, authorityItem := range authority {
		authorityRule = append(authorityRule, authorityItem)
	}

	logs, sub, err := _DSAuthEvents.contract.FilterLogs(opts, "LogSetAuthority", authorityRule)
	if err != nil {
		return nil, err
	}
	return &DSAuthEventsLogSetAuthorityIterator{contract: _DSAuthEvents.contract, event: "LogSetAuthority", logs: logs, sub: sub}, nil
}

// WatchLogSetAuthority is a free log subscription operation binding the contract event 0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4.
//
// Solidity: event LogSetAuthority(address indexed authority)
func (_DSAuthEvents *DSAuthEventsFilterer) WatchLogSetAuthority(opts *bind.WatchOpts, sink chan<- *DSAuthEventsLogSetAuthority, authority []common.Address) (event.Subscription, error) {

	var authorityRule []interface{}
	for _, authorityItem := range authority {
		authorityRule = append(authorityRule, authorityItem)
	}

	logs, sub, err := _DSAuthEvents.contract.WatchLogs(opts, "LogSetAuthority", authorityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DSAuthEventsLogSetAuthority)
				if err := _DSAuthEvents.contract.UnpackLog(event, "LogSetAuthority", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogSetAuthority is a log parse operation binding the contract event 0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4.
//
// Solidity: event LogSetAuthority(address indexed authority)
func (_DSAuthEvents *DSAuthEventsFilterer) ParseLogSetAuthority(log types.Log) (*DSAuthEventsLogSetAuthority, error) {
	event := new(DSAuthEventsLogSetAuthority)
	if err := _DSAuthEvents.contract.UnpackLog(event, "LogSetAuthority", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DSAuthEventsLogSetOwnerIterator is returned from FilterLogSetOwner and is used to iterate over the raw logs and unpacked data for LogSetOwner events raised by the DSAuthEvents contract.
type DSAuthEventsLogSetOwnerIterator struct {
	Event *DSAuthEventsLogSetOwner // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DSAuthEventsLogSetOwnerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DSAuthEventsLogSetOwner)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DSAuthEventsLogSetOwner)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DSAuthEventsLogSetOwnerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DSAuthEventsLogSetOwnerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DSAuthEventsLogSetOwner represents a LogSetOwner event raised by the DSAuthEvents contract.
type DSAuthEventsLogSetOwner struct {
	Owner common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogSetOwner is a free log retrieval operation binding the contract event 0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94.
//
// Solidity: event LogSetOwner(address indexed owner)
func (_DSAuthEvents *DSAuthEventsFilterer) FilterLogSetOwner(opts *bind.FilterOpts, owner []common.Address) (*DSAuthEventsLogSetOwnerIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _DSAuthEvents.contract.FilterLogs(opts, "LogSetOwner", ownerRule)
	if err != nil {
		return nil, err
	}
	return &DSAuthEventsLogSetOwnerIterator{contract: _DSAuthEvents.contract, event: "LogSetOwner", logs: logs, sub: sub}, nil
}

// WatchLogSetOwner is a free log subscription operation binding the contract event 0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94.
//
// Solidity: event LogSetOwner(address indexed owner)
func (_DSAuthEvents *DSAuthEventsFilterer) WatchLogSetOwner(opts *bind.WatchOpts, sink chan<- *DSAuthEventsLogSetOwner, owner []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _DSAuthEvents.contract.WatchLogs(opts, "LogSetOwner", ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DSAuthEventsLogSetOwner)
				if err := _DSAuthEvents.contract.UnpackLog(event, "LogSetOwner", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogSetOwner is a log parse operation binding the contract event 0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94.
//
// Solidity: event LogSetOwner(address indexed owner)
func (_DSAuthEvents *DSAuthEventsFilterer) ParseLogSetOwner(log types.Log) (*DSAuthEventsLogSetOwner, error) {
	event := new(DSAuthEventsLogSetOwner)
	if err := _DSAuthEvents.contract.UnpackLog(event, "LogSetOwner", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DSAuthorityMetaData contains all meta data concerning the DSAuthority contract.
var DSAuthorityMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"}],\"name\":\"canCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// DSAuthorityABI is the input ABI used to generate the binding from.
// Deprecated: Use DSAuthorityMetaData.ABI instead.
var DSAuthorityABI = DSAuthorityMetaData.ABI

// DSAuthority is an auto generated Go binding around an Ethereum contract.
type DSAuthority struct {
	DSAuthorityCaller     // Read-only binding to the contract
	DSAuthorityTransactor // Write-only binding to the contract
	DSAuthorityFilterer   // Log filterer for contract events
}

// DSAuthorityCaller is an auto generated read-only Go binding around an Ethereum contract.
type DSAuthorityCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DSAuthorityTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DSAuthorityTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DSAuthorityFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DSAuthorityFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DSAuthoritySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DSAuthoritySession struct {
	Contract     *DSAuthority      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DSAuthorityCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DSAuthorityCallerSession struct {
	Contract *DSAuthorityCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// DSAuthorityTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DSAuthorityTransactorSession struct {
	Contract     *DSAuthorityTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// DSAuthorityRaw is an auto generated low-level Go binding around an Ethereum contract.
type DSAuthorityRaw struct {
	Contract *DSAuthority // Generic contract binding to access the raw methods on
}

// DSAuthorityCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DSAuthorityCallerRaw struct {
	Contract *DSAuthorityCaller // Generic read-only contract binding to access the raw methods on
}

// DSAuthorityTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DSAuthorityTransactorRaw struct {
	Contract *DSAuthorityTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDSAuthority creates a new instance of DSAuthority, bound to a specific deployed contract.
func NewDSAuthority(address common.Address, backend bind.ContractBackend) (*DSAuthority, error) {
	contract, err := bindDSAuthority(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &DSAuthority{DSAuthorityCaller: DSAuthorityCaller{contract: contract}, DSAuthorityTransactor: DSAuthorityTransactor{contract: contract}, DSAuthorityFilterer: DSAuthorityFilterer{contract: contract}}, nil
}

// NewDSAuthorityCaller creates a new read-only instance of DSAuthority, bound to a specific deployed contract.
func NewDSAuthorityCaller(address common.Address, caller bind.ContractCaller) (*DSAuthorityCaller, error) {
	contract, err := bindDSAuthority(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DSAuthorityCaller{contract: contract}, nil
}

// NewDSAuthorityTransactor creates a new write-only instance of DSAuthority, bound to a specific deployed contract.
func NewDSAuthorityTransactor(address common.Address, transactor bind.ContractTransactor) (*DSAuthorityTransactor, error) {
	contract, err := bindDSAuthority(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DSAuthorityTransactor{contract: contract}, nil
}

// NewDSAuthorityFilterer creates a new log filterer instance of DSAuthority, bound to a specific deployed contract.
func NewDSAuthorityFilterer(address common.Address, filterer bind.ContractFilterer) (*DSAuthorityFilterer, error) {
	contract, err := bindDSAuthority(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DSAuthorityFilterer{contract: contract}, nil
}

// bindDSAuthority binds a generic wrapper to an already deployed contract.
func bindDSAuthority(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(DSAuthorityABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DSAuthority *DSAuthorityRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DSAuthority.Contract.DSAuthorityCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DSAuthority *DSAuthorityRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DSAuthority.Contract.DSAuthorityTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DSAuthority *DSAuthorityRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DSAuthority.Contract.DSAuthorityTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DSAuthority *DSAuthorityCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DSAuthority.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DSAuthority *DSAuthorityTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DSAuthority.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DSAuthority *DSAuthorityTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DSAuthority.Contract.contract.Transact(opts, method, params...)
}

// CanCall is a free data retrieval call binding the contract method 0xb7009613.
//
// Solidity: function canCall(address src, address dst, bytes4 sig) view returns(bool)
func (_DSAuthority *DSAuthorityCaller) CanCall(opts *bind.CallOpts, src common.Address, dst common.Address, sig [4]byte) (bool, error) {
	var out []interface{}
	err := _DSAuthority.contract.Call(opts, &out, "canCall", src, dst, sig)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanCall is a free data retrieval call binding the contract method 0xb7009613.
//
// Solidity: function canCall(address src, address dst, bytes4 sig) view returns(bool)
func (_DSAuthority *DSAuthoritySession) CanCall(src common.Address, dst common.Address, sig [4]byte) (bool, error) {
	return _DSAuthority.Contract.CanCall(&_DSAuthority.CallOpts, src, dst, sig)
}

// CanCall is a free data retrieval call binding the contract method 0xb7009613.
//
// Solidity: function canCall(address src, address dst, bytes4 sig) view returns(bool)
func (_DSAuthority *DSAuthorityCallerSession) CanCall(src common.Address, dst common.Address, sig [4]byte) (bool, error) {
	return _DSAuthority.Contract.CanCall(&_DSAuthority.CallOpts, src, dst, sig)
}

// DSMathMetaData contains all meta data concerning the DSMath contract.
var DSMathMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220b803c6baec794a96a4f824b900744c27902ef99dbd084dd5d646340f9f03312964736f6c634300080b0033",
}

// DSMathABI is the input ABI used to generate the binding from.
// Deprecated: Use DSMathMetaData.ABI instead.
var DSMathABI = DSMathMetaData.ABI

// DSMathBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use DSMathMetaData.Bin instead.
var DSMathBin = DSMathMetaData.Bin

// DeployDSMath deploys a new Ethereum contract, binding an instance of DSMath to it.
func DeployDSMath(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *DSMath, error) {
	parsed, err := DSMathMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(DSMathBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &DSMath{DSMathCaller: DSMathCaller{contract: contract}, DSMathTransactor: DSMathTransactor{contract: contract}, DSMathFilterer: DSMathFilterer{contract: contract}}, nil
}

// DSMath is an auto generated Go binding around an Ethereum contract.
type DSMath struct {
	DSMathCaller     // Read-only binding to the contract
	DSMathTransactor // Write-only binding to the contract
	DSMathFilterer   // Log filterer for contract events
}

// DSMathCaller is an auto generated read-only Go binding around an Ethereum contract.
type DSMathCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DSMathTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DSMathTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DSMathFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DSMathFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DSMathSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DSMathSession struct {
	Contract     *DSMath           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DSMathCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DSMathCallerSession struct {
	Contract *DSMathCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// DSMathTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DSMathTransactorSession struct {
	Contract     *DSMathTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DSMathRaw is an auto generated low-level Go binding around an Ethereum contract.
type DSMathRaw struct {
	Contract *DSMath // Generic contract binding to access the raw methods on
}

// DSMathCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DSMathCallerRaw struct {
	Contract *DSMathCaller // Generic read-only contract binding to access the raw methods on
}

// DSMathTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DSMathTransactorRaw struct {
	Contract *DSMathTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDSMath creates a new instance of DSMath, bound to a specific deployed contract.
func NewDSMath(address common.Address, backend bind.ContractBackend) (*DSMath, error) {
	contract, err := bindDSMath(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &DSMath{DSMathCaller: DSMathCaller{contract: contract}, DSMathTransactor: DSMathTransactor{contract: contract}, DSMathFilterer: DSMathFilterer{contract: contract}}, nil
}

// NewDSMathCaller creates a new read-only instance of DSMath, bound to a specific deployed contract.
func NewDSMathCaller(address common.Address, caller bind.ContractCaller) (*DSMathCaller, error) {
	contract, err := bindDSMath(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DSMathCaller{contract: contract}, nil
}

// NewDSMathTransactor creates a new write-only instance of DSMath, bound to a specific deployed contract.
func NewDSMathTransactor(address common.Address, transactor bind.ContractTransactor) (*DSMathTransactor, error) {
	contract, err := bindDSMath(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DSMathTransactor{contract: contract}, nil
}

// NewDSMathFilterer creates a new log filterer instance of DSMath, bound to a specific deployed contract.
func NewDSMathFilterer(address common.Address, filterer bind.ContractFilterer) (*DSMathFilterer, error) {
	contract, err := bindDSMath(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DSMathFilterer{contract: contract}, nil
}

// bindDSMath binds a generic wrapper to an already deployed contract.
func bindDSMath(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(DSMathABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DSMath *DSMathRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DSMath.Contract.DSMathCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DSMath *DSMathRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DSMath.Contract.DSMathTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DSMath *DSMathRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DSMath.Contract.DSMathTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DSMath *DSMathCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DSMath.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DSMath *DSMathTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DSMath.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DSMath *DSMathTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DSMath.Contract.contract.Transact(opts, method, params...)
}

// DSNoteMetaData contains all meta data concerning the DSNote contract.
var DSNoteMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"foo\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"bar\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"fax\",\"type\":\"bytes\"}],\"name\":\"LogNote\",\"type\":\"event\"}]",
	Bin: "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea26469706673582212208036a0760b5f2efb195bc3110e8886dfc6cc80895b4dd8754e971668e08f396f64736f6c634300080b0033",
}

// DSNoteABI is the input ABI used to generate the binding from.
// Deprecated: Use DSNoteMetaData.ABI instead.
var DSNoteABI = DSNoteMetaData.ABI

// DSNoteBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use DSNoteMetaData.Bin instead.
var DSNoteBin = DSNoteMetaData.Bin

// DeployDSNote deploys a new Ethereum contract, binding an instance of DSNote to it.
func DeployDSNote(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *DSNote, error) {
	parsed, err := DSNoteMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(DSNoteBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &DSNote{DSNoteCaller: DSNoteCaller{contract: contract}, DSNoteTransactor: DSNoteTransactor{contract: contract}, DSNoteFilterer: DSNoteFilterer{contract: contract}}, nil
}

// DSNote is an auto generated Go binding around an Ethereum contract.
type DSNote struct {
	DSNoteCaller     // Read-only binding to the contract
	DSNoteTransactor // Write-only binding to the contract
	DSNoteFilterer   // Log filterer for contract events
}

// DSNoteCaller is an auto generated read-only Go binding around an Ethereum contract.
type DSNoteCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DSNoteTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DSNoteTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DSNoteFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DSNoteFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DSNoteSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DSNoteSession struct {
	Contract     *DSNote           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DSNoteCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DSNoteCallerSession struct {
	Contract *DSNoteCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// DSNoteTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DSNoteTransactorSession struct {
	Contract     *DSNoteTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DSNoteRaw is an auto generated low-level Go binding around an Ethereum contract.
type DSNoteRaw struct {
	Contract *DSNote // Generic contract binding to access the raw methods on
}

// DSNoteCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DSNoteCallerRaw struct {
	Contract *DSNoteCaller // Generic read-only contract binding to access the raw methods on
}

// DSNoteTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DSNoteTransactorRaw struct {
	Contract *DSNoteTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDSNote creates a new instance of DSNote, bound to a specific deployed contract.
func NewDSNote(address common.Address, backend bind.ContractBackend) (*DSNote, error) {
	contract, err := bindDSNote(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &DSNote{DSNoteCaller: DSNoteCaller{contract: contract}, DSNoteTransactor: DSNoteTransactor{contract: contract}, DSNoteFilterer: DSNoteFilterer{contract: contract}}, nil
}

// NewDSNoteCaller creates a new read-only instance of DSNote, bound to a specific deployed contract.
func NewDSNoteCaller(address common.Address, caller bind.ContractCaller) (*DSNoteCaller, error) {
	contract, err := bindDSNote(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DSNoteCaller{contract: contract}, nil
}

// NewDSNoteTransactor creates a new write-only instance of DSNote, bound to a specific deployed contract.
func NewDSNoteTransactor(address common.Address, transactor bind.ContractTransactor) (*DSNoteTransactor, error) {
	contract, err := bindDSNote(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DSNoteTransactor{contract: contract}, nil
}

// NewDSNoteFilterer creates a new log filterer instance of DSNote, bound to a specific deployed contract.
func NewDSNoteFilterer(address common.Address, filterer bind.ContractFilterer) (*DSNoteFilterer, error) {
	contract, err := bindDSNote(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DSNoteFilterer{contract: contract}, nil
}

// bindDSNote binds a generic wrapper to an already deployed contract.
func bindDSNote(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(DSNoteABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DSNote *DSNoteRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DSNote.Contract.DSNoteCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DSNote *DSNoteRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DSNote.Contract.DSNoteTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DSNote *DSNoteRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DSNote.Contract.DSNoteTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DSNote *DSNoteCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DSNote.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DSNote *DSNoteTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DSNote.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DSNote *DSNoteTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DSNote.Contract.contract.Transact(opts, method, params...)
}

// DSStopMetaData contains all meta data concerning the DSStop contract.
var DSStopMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"foo\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"bar\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"fax\",\"type\":\"bytes\"}],\"name\":\"LogNote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contractDSAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractDSAuthority\",\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50600180546001600160a01b031916339081179091556040517fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9490600090a26107c68061005e6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80637a9e5e4b1161005b5780637a9e5e4b146100d95780638da5cb5b146100ec578063be9a655514610131578063bf7e214f1461013957600080fd5b806307da68f51461008257806313af40351461008c57806375f12b211461009f575b600080fd5b61008a610159565b005b61008a61009a3660046106f6565b610287565b6001546100c49074010000000000000000000000000000000000000000900460ff1681565b60405190151581526020015b60405180910390f35b61008a6100e73660046106f6565b61038a565b60015461010c9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100d0565b61008a61048b565b60005461010c9073ffffffffffffffffffffffffffffffffffffffff1681565b610187336000357fffffffff000000000000000000000000000000000000000000000000000000001661058e565b6101f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d617574682d756e617574686f72697a656400000000000000000000000060448201526064015b60405180910390fd5b60018054740100000000000000000000000000000000000000007fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff90911617905560405160043590602435903490829084903390600080357fffffffff00000000000000000000000000000000000000000000000000000000169161027a918791369061071a565b60405180910390a4505050565b6102b5336000357fffffffff000000000000000000000000000000000000000000000000000000001661058e565b61031b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d617574682d756e617574686f72697a656400000000000000000000000060448201526064016101e9565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040517fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9490600090a250565b6103b8336000357fffffffff000000000000000000000000000000000000000000000000000000001661058e565b61041e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d617574682d756e617574686f72697a656400000000000000000000000060448201526064016101e9565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316908117825560405190917f1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada491a250565b6104b9336000357fffffffff000000000000000000000000000000000000000000000000000000001661058e565b61051f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d617574682d756e617574686f72697a656400000000000000000000000060448201526064016101e9565b600180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16905560405160043590602435903490829084903390600080357fffffffff00000000000000000000000000000000000000000000000000000000169161027a918791369061071a565b600073ffffffffffffffffffffffffffffffffffffffff83163014156105b6575060016106cb565b60015473ffffffffffffffffffffffffffffffffffffffff848116911614156105e1575060016106cb565b60005473ffffffffffffffffffffffffffffffffffffffff16610606575060006106cb565b6000546040517fb700961300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301523060248301527fffffffff00000000000000000000000000000000000000000000000000000000851660448301529091169063b700961390606401602060405180830381865afa1580156106a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c8919061076e565b90505b92915050565b73ffffffffffffffffffffffffffffffffffffffff811681146106f357600080fd5b50565b60006020828403121561070857600080fd5b8135610713816106d1565b9392505050565b83815260406020820152816040820152818360608301376000818301606090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016010192915050565b60006020828403121561078057600080fd5b8151801515811461071357600080fdfea2646970667358221220dd464f14a08f605557d7517c0992f30818385f6fd631e6a8f852cb5949ba8e1064736f6c634300080b0033",
}

// DSStopABI is the input ABI used to generate the binding from.
// Deprecated: Use DSStopMetaData.ABI instead.
var DSStopABI = DSStopMetaData.ABI

// DSStopBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use DSStopMetaData.Bin instead.
var DSStopBin = DSStopMetaData.Bin

// DeployDSStop deploys a new Ethereum contract, binding an instance of DSStop to it.
func DeployDSStop(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *DSStop, error) {
	parsed, err := DSStopMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(DSStopBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &DSStop{DSStopCaller: DSStopCaller{contract: contract}, DSStopTransactor: DSStopTransactor{contract: contract}, DSStopFilterer: DSStopFilterer{contract: contract}}, nil
}

// DSStop is an auto generated Go binding around an Ethereum contract.
type DSStop struct {
	DSStopCaller     // Read-only binding to the contract
	DSStopTransactor // Write-only binding to the contract
	DSStopFilterer   // Log filterer for contract events
}

// DSStopCaller is an auto generated read-only Go binding around an Ethereum contract.
type DSStopCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DSStopTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DSStopTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DSStopFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DSStopFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DSStopSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DSStopSession struct {
	Contract     *DSStop           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DSStopCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DSStopCallerSession struct {
	Contract *DSStopCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// DSStopTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DSStopTransactorSession struct {
	Contract     *DSStopTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DSStopRaw is an auto generated low-level Go binding around an Ethereum contract.
type DSStopRaw struct {
	Contract *DSStop // Generic contract binding to access the raw methods on
}

// DSStopCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DSStopCallerRaw struct {
	Contract *DSStopCaller // Generic read-only contract binding to access the raw methods on
}

// DSStopTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DSStopTransactorRaw struct {
	Contract *DSStopTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDSStop creates a new instance of DSStop, bound to a specific deployed contract.
func NewDSStop(address common.Address, backend bind.ContractBackend) (*DSStop, error) {
	contract, err := bindDSStop(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &DSStop{DSStopCaller: DSStopCaller{contract: contract}, DSStopTransactor: DSStopTransactor{contract: contract}, DSStopFilterer: DSStopFilterer{contract: contract}}, nil
}

// NewDSStopCaller creates a new read-only instance of DSStop, bound to a specific deployed contract.
func NewDSStopCaller(address common.Address, caller bind.ContractCaller) (*DSStopCaller, error) {
	contract, err := bindDSStop(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DSStopCaller{contract: contract}, nil
}

// NewDSStopTransactor creates a new write-only instance of DSStop, bound to a specific deployed contract.
func NewDSStopTransactor(address common.Address, transactor bind.ContractTransactor) (*DSStopTransactor, error) {
	contract, err := bindDSStop(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DSStopTransactor{contract: contract}, nil
}

// NewDSStopFilterer creates a new log filterer instance of DSStop, bound to a specific deployed contract.
func NewDSStopFilterer(address common.Address, filterer bind.ContractFilterer) (*DSStopFilterer, error) {
	contract, err := bindDSStop(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DSStopFilterer{contract: contract}, nil
}

// bindDSStop binds a generic wrapper to an already deployed contract.
func bindDSStop(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(DSStopABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DSStop *DSStopRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DSStop.Contract.DSStopCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DSStop *DSStopRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DSStop.Contract.DSStopTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DSStop *DSStopRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DSStop.Contract.DSStopTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DSStop *DSStopCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DSStop.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DSStop *DSStopTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DSStop.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DSStop *DSStopTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DSStop.Contract.contract.Transact(opts, method, params...)
}

// Authority is a free data retrieval call binding the contract method 0xbf7e214f.
//
// Solidity: function authority() view returns(address)
func (_DSStop *DSStopCaller) Authority(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _DSStop.contract.Call(opts, &out, "authority")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Authority is a free data retrieval call binding the contract method 0xbf7e214f.
//
// Solidity: function authority() view returns(address)
func (_DSStop *DSStopSession) Authority() (common.Address, error) {
	return _DSStop.Contract.Authority(&_DSStop.CallOpts)
}

// Authority is a free data retrieval call binding the contract method 0xbf7e214f.
//
// Solidity: function authority() view returns(address)
func (_DSStop *DSStopCallerSession) Authority() (common.Address, error) {
	return _DSStop.Contract.Authority(&_DSStop.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_DSStop *DSStopCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _DSStop.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_DSStop *DSStopSession) Owner() (common.Address, error) {
	return _DSStop.Contract.Owner(&_DSStop.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_DSStop *DSStopCallerSession) Owner() (common.Address, error) {
	return _DSStop.Contract.Owner(&_DSStop.CallOpts)
}

// Stopped is a free data retrieval call binding the contract method 0x75f12b21.
//
// Solidity: function stopped() view returns(bool)
func (_DSStop *DSStopCaller) Stopped(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _DSStop.contract.Call(opts, &out, "stopped")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Stopped is a free data retrieval call binding the contract method 0x75f12b21.
//
// Solidity: function stopped() view returns(bool)
func (_DSStop *DSStopSession) Stopped() (bool, error) {
	return _DSStop.Contract.Stopped(&_DSStop.CallOpts)
}

// Stopped is a free data retrieval call binding the contract method 0x75f12b21.
//
// Solidity: function stopped() view returns(bool)
func (_DSStop *DSStopCallerSession) Stopped() (bool, error) {
	return _DSStop.Contract.Stopped(&_DSStop.CallOpts)
}

// SetAuthority is a paid mutator transaction binding the contract method 0x7a9e5e4b.
//
// Solidity: function setAuthority(address authority_) returns()
func (_DSStop *DSStopTransactor) SetAuthority(opts *bind.TransactOpts, authority_ common.Address) (*types.Transaction, error) {
	return _DSStop.contract.Transact(opts, "setAuthority", authority_)
}

// SetAuthority is a paid mutator transaction binding the contract method 0x7a9e5e4b.
//
// Solidity: function setAuthority(address authority_) returns()
func (_DSStop *DSStopSession) SetAuthority(authority_ common.Address) (*types.Transaction, error) {
	return _DSStop.Contract.SetAuthority(&_DSStop.TransactOpts, authority_)
}

// SetAuthority is a paid mutator transaction binding the contract method 0x7a9e5e4b.
//
// Solidity: function setAuthority(address authority_) returns()
func (_DSStop *DSStopTransactorSession) SetAuthority(authority_ common.Address) (*types.Transaction, error) {
	return _DSStop.Contract.SetAuthority(&_DSStop.TransactOpts, authority_)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address owner_) returns()
func (_DSStop *DSStopTransactor) SetOwner(opts *bind.TransactOpts, owner_ common.Address) (*types.Transaction, error) {
	return _DSStop.contract.Transact(opts, "setOwner", owner_)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address owner_) returns()
func (_DSStop *DSStopSession) SetOwner(owner_ common.Address) (*types.Transaction, error) {
	return _DSStop.Contract.SetOwner(&_DSStop.TransactOpts, owner_)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address owner_) returns()
func (_DSStop *DSStopTransactorSession) SetOwner(owner_ common.Address) (*types.Transaction, error) {
	return _DSStop.Contract.SetOwner(&_DSStop.TransactOpts, owner_)
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_DSStop *DSStopTransactor) Start(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DSStop.contract.Transact(opts, "start")
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_DSStop *DSStopSession) Start() (*types.Transaction, error) {
	return _DSStop.Contract.Start(&_DSStop.TransactOpts)
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_DSStop *DSStopTransactorSession) Start() (*types.Transaction, error) {
	return _DSStop.Contract.Start(&_DSStop.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_DSStop *DSStopTransactor) Stop(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DSStop.contract.Transact(opts, "stop")
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_DSStop *DSStopSession) Stop() (*types.Transaction, error) {
	return _DSStop.Contract.Stop(&_DSStop.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_DSStop *DSStopTransactorSession) Stop() (*types.Transaction, error) {
	return _DSStop.Contract.Stop(&_DSStop.TransactOpts)
}

// DSStopLogSetAuthorityIterator is returned from FilterLogSetAuthority and is used to iterate over the raw logs and unpacked data for LogSetAuthority events raised by the DSStop contract.
type DSStopLogSetAuthorityIterator struct {
	Event *DSStopLogSetAuthority // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DSStopLogSetAuthorityIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DSStopLogSetAuthority)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DSStopLogSetAuthority)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DSStopLogSetAuthorityIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DSStopLogSetAuthorityIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DSStopLogSetAuthority represents a LogSetAuthority event raised by the DSStop contract.
type DSStopLogSetAuthority struct {
	Authority common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterLogSetAuthority is a free log retrieval operation binding the contract event 0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4.
//
// Solidity: event LogSetAuthority(address indexed authority)
func (_DSStop *DSStopFilterer) FilterLogSetAuthority(opts *bind.FilterOpts, authority []common.Address) (*DSStopLogSetAuthorityIterator, error) {

	var authorityRule []interface{}
	for _, authorityItem := range authority {
		authorityRule = append(authorityRule, authorityItem)
	}

	logs, sub, err := _DSStop.contract.FilterLogs(opts, "LogSetAuthority", authorityRule)
	if err != nil {
		return nil, err
	}
	return &DSStopLogSetAuthorityIterator{contract: _DSStop.contract, event: "LogSetAuthority", logs: logs, sub: sub}, nil
}

// WatchLogSetAuthority is a free log subscription operation binding the contract event 0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4.
//
// Solidity: event LogSetAuthority(address indexed authority)
func (_DSStop *DSStopFilterer) WatchLogSetAuthority(opts *bind.WatchOpts, sink chan<- *DSStopLogSetAuthority, authority []common.Address) (event.Subscription, error) {

	var authorityRule []interface{}
	for _, authorityItem := range authority {
		authorityRule = append(authorityRule, authorityItem)
	}

	logs, sub, err := _DSStop.contract.WatchLogs(opts, "LogSetAuthority", authorityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DSStopLogSetAuthority)
				if err := _DSStop.contract.UnpackLog(event, "LogSetAuthority", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogSetAuthority is a log parse operation binding the contract event 0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4.
//
// Solidity: event LogSetAuthority(address indexed authority)
func (_DSStop *DSStopFilterer) ParseLogSetAuthority(log types.Log) (*DSStopLogSetAuthority, error) {
	event := new(DSStopLogSetAuthority)
	if err := _DSStop.contract.UnpackLog(event, "LogSetAuthority", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DSStopLogSetOwnerIterator is returned from FilterLogSetOwner and is used to iterate over the raw logs and unpacked data for LogSetOwner events raised by the DSStop contract.
type DSStopLogSetOwnerIterator struct {
	Event *DSStopLogSetOwner // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DSStopLogSetOwnerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DSStopLogSetOwner)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DSStopLogSetOwner)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DSStopLogSetOwnerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DSStopLogSetOwnerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DSStopLogSetOwner represents a LogSetOwner event raised by the DSStop contract.
type DSStopLogSetOwner struct {
	Owner common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogSetOwner is a free log retrieval operation binding the contract event 0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94.
//
// Solidity: event LogSetOwner(address indexed owner)
func (_DSStop *DSStopFilterer) FilterLogSetOwner(opts *bind.FilterOpts, owner []common.Address) (*DSStopLogSetOwnerIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _DSStop.contract.FilterLogs(opts, "LogSetOwner", ownerRule)
	if err != nil {
		return nil, err
	}
	return &DSStopLogSetOwnerIterator{contract: _DSStop.contract, event: "LogSetOwner", logs: logs, sub: sub}, nil
}

// WatchLogSetOwner is a free log subscription operation binding the contract event 0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94.
//
// Solidity: event LogSetOwner(address indexed owner)
func (_DSStop *DSStopFilterer) WatchLogSetOwner(opts *bind.WatchOpts, sink chan<- *DSStopLogSetOwner, owner []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _DSStop.contract.WatchLogs(opts, "LogSetOwner", ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DSStopLogSetOwner)
				if err := _DSStop.contract.UnpackLog(event, "LogSetOwner", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogSetOwner is a log parse operation binding the contract event 0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94.
//
// Solidity: event LogSetOwner(address indexed owner)
func (_DSStop *DSStopFilterer) ParseLogSetOwner(log types.Log) (*DSStopLogSetOwner, error) {
	event := new(DSStopLogSetOwner)
	if err := _DSStop.contract.UnpackLog(event, "LogSetOwner", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DSTokenMetaData contains all meta data concerning the DSToken contract.
var DSTokenMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"symbol_\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Start\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Stop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contractDSAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"move\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"pull\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"push\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractDSAuthority\",\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"name_\",\"type\":\"bytes32\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040526012600655600060075534801561001a57600080fd5b5060405161178f38038061178f8339810160408190526100399161007f565b600180546001600160a01b031916339081179091556040517fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9490600090a2600555610098565b60006020828403121561009157600080fd5b5051919050565b6116e8806100a76000396000f3fe608060405234801561001057600080fd5b50600436106101a35760003560e01c80637a9e5e4b116100ee578063b753a98c11610097578063bf7e214f11610071578063bf7e214f1461036f578063daea85c51461038f578063dd62ed3e146103a2578063f2d5d56b146103cd57600080fd5b8063b753a98c14610341578063bb35783b14610354578063be9a65551461036757600080fd5b80639dc29fac116100c85780639dc29fac14610308578063a0712d681461031b578063a9059cbb1461032e57600080fd5b80637a9e5e4b146102a75780638da5cb5b146102ba57806395d89b41146102ff57600080fd5b8063313ce567116101505780635ac801fe1161012a5780635ac801fe1461024f57806370a082311461026257806375f12b211461028257600080fd5b8063313ce5671461022057806340c10f191461022957806342966c681461023c57600080fd5b806313af40351161018157806313af4035146101f157806318160ddd1461020457806323b872dd1461020d57600080fd5b806306fdde03146101a857806307da68f5146101c4578063095ea7b3146101ce575b600080fd5b6101b160075481565b6040519081526020015b60405180910390f35b6101cc6103e0565b005b6101e16101dc366004611556565b6104e3565b60405190151581526020016101bb565b6101cc6101ff366004611582565b6105dd565b6101b160025481565b6101e161021b36600461159f565b6106e0565b6101b160065481565b6101cc610237366004611556565b610a58565b6101cc61024a3660046115e0565b610c27565b6101cc61025d3660046115e0565b610c34565b6101b1610270366004611582565b60036020526000908152604090205481565b6001546101e19074010000000000000000000000000000000000000000900460ff1681565b6101cc6102b5366004611582565b610ccd565b6001546102da9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101bb565b6101b160055481565b6101cc610316366004611556565b610dce565b6101cc6103293660046115e0565b6111a6565b6101e161033c366004611556565b6111b0565b6101cc61034f366004611556565b6111c4565b6101cc61036236600461159f565b6111d4565b6101cc6111e5565b6000546102da9073ffffffffffffffffffffffffffffffffffffffff1681565b6101e161039d366004611582565b6112cc565b6101b16103b03660046115f9565b600460209081526000928352604080842090915290825290205481565b6101cc6103db366004611556565b6112f8565b61040e336000357fffffffff0000000000000000000000000000000000000000000000000000000016611303565b610479576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d617574682d756e617574686f72697a656400000000000000000000000060448201526064015b60405180910390fd5b600180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001790556040517fbedf0f4abfe86d4ffad593d9607fe70e83ea706033d44d24b3b6283cf3fc4f6b90600090a1565b60015460009074010000000000000000000000000000000000000000900460ff161561056b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f64732d73746f702d69732d73746f7070656400000000000000000000000000006044820152606401610470565b33600081815260046020908152604080832073ffffffffffffffffffffffffffffffffffffffff881680855290835292819020869055518581529192917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a35060015b92915050565b61060b336000357fffffffff0000000000000000000000000000000000000000000000000000000016611303565b610671576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d617574682d756e617574686f72697a65640000000000000000000000006044820152606401610470565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040517fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9490600090a250565b60015460009074010000000000000000000000000000000000000000900460ff1615610768576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f64732d73746f702d69732d73746f7070656400000000000000000000000000006044820152606401610470565b73ffffffffffffffffffffffffffffffffffffffff841633148015906107de575073ffffffffffffffffffffffffffffffffffffffff841660009081526004602090815260408083203384529091529020547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff14155b156108ea5773ffffffffffffffffffffffffffffffffffffffff8416600090815260046020908152604080832033845290915290205482111561087d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f64732d746f6b656e2d696e73756666696369656e742d617070726f76616c00006044820152606401610470565b73ffffffffffffffffffffffffffffffffffffffff841660009081526004602090815260408083203384529091529020546108b89083611444565b73ffffffffffffffffffffffffffffffffffffffff851660009081526004602090815260408083203384529091529020555b73ffffffffffffffffffffffffffffffffffffffff8416600090815260036020526040902054821115610979576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f64732d746f6b656e2d696e73756666696369656e742d62616c616e63650000006044820152606401610470565b73ffffffffffffffffffffffffffffffffffffffff84166000908152600360205260409020546109a99083611444565b73ffffffffffffffffffffffffffffffffffffffff80861660009081526003602052604080822093909355908516815220546109e590836114bc565b73ffffffffffffffffffffffffffffffffffffffff80851660008181526003602052604090819020939093559151908616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610a469086815260200190565b60405180910390a35060019392505050565b610a86336000357fffffffff0000000000000000000000000000000000000000000000000000000016611303565b610aec576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d617574682d756e617574686f72697a65640000000000000000000000006044820152606401610470565b60015474010000000000000000000000000000000000000000900460ff1615610b71576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f64732d73746f702d69732d73746f7070656400000000000000000000000000006044820152606401610470565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260036020526040902054610ba190826114bc565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260036020526040902055600254610bd490826114bc565b60025560405181815273ffffffffffffffffffffffffffffffffffffffff8316907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885906020015b60405180910390a25050565b610c313382610dce565b50565b610c62336000357fffffffff0000000000000000000000000000000000000000000000000000000016611303565b610cc8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d617574682d756e617574686f72697a65640000000000000000000000006044820152606401610470565b600755565b610cfb336000357fffffffff0000000000000000000000000000000000000000000000000000000016611303565b610d61576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d617574682d756e617574686f72697a65640000000000000000000000006044820152606401610470565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316908117825560405190917f1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada491a250565b610dfc336000357fffffffff0000000000000000000000000000000000000000000000000000000016611303565b610e62576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d617574682d756e617574686f72697a65640000000000000000000000006044820152606401610470565b60015474010000000000000000000000000000000000000000900460ff1615610ee7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f64732d73746f702d69732d73746f7070656400000000000000000000000000006044820152606401610470565b73ffffffffffffffffffffffffffffffffffffffff82163314801590610f5d575073ffffffffffffffffffffffffffffffffffffffff821660009081526004602090815260408083203384529091529020547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff14155b156110695773ffffffffffffffffffffffffffffffffffffffff82166000908152600460209081526040808320338452909152902054811115610ffc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f64732d746f6b656e2d696e73756666696369656e742d617070726f76616c00006044820152606401610470565b73ffffffffffffffffffffffffffffffffffffffff821660009081526004602090815260408083203384529091529020546110379082611444565b73ffffffffffffffffffffffffffffffffffffffff831660009081526004602090815260408083203384529091529020555b73ffffffffffffffffffffffffffffffffffffffff82166000908152600360205260409020548111156110f8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f64732d746f6b656e2d696e73756666696369656e742d62616c616e63650000006044820152606401610470565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600360205260409020546111289082611444565b73ffffffffffffffffffffffffffffffffffffffff831660009081526003602052604090205560025461115b9082611444565b60025560405181815273ffffffffffffffffffffffffffffffffffffffff8316907fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca590602001610c1b565b610c313382610a58565b60006111bd3384846106e0565b9392505050565b6111cf3383836106e0565b505050565b6111df8383836106e0565b50505050565b611213336000357fffffffff0000000000000000000000000000000000000000000000000000000016611303565b611279576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d617574682d756e617574686f72697a65640000000000000000000000006044820152606401610470565b600180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1690556040517f1b55ba3aa851a46be3b365aee5b5c140edd620d578922f3e8466d2cbd96f954b90600090a1565b60006105d7827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6104e3565b6111cf8233836106e0565b600073ffffffffffffffffffffffffffffffffffffffff831630141561132b575060016105d7565b60015473ffffffffffffffffffffffffffffffffffffffff84811691161415611356575060016105d7565b60005473ffffffffffffffffffffffffffffffffffffffff1661137b575060006105d7565b6000546040517fb700961300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301523060248301527fffffffff00000000000000000000000000000000000000000000000000000000851660448301529091169063b700961390606401602060405180830381865afa158015611419573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143d9190611632565b90506105d7565b6000826114518382611683565b91508111156105d7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f64732d6d6174682d7375622d756e646572666c6f7700000000000000000000006044820152606401610470565b6000826114c9838261169a565b91508110156105d7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d6d6174682d6164642d6f766572666c6f770000000000000000000000006044820152606401610470565b73ffffffffffffffffffffffffffffffffffffffff81168114610c3157600080fd5b6000806040838503121561156957600080fd5b823561157481611534565b946020939093013593505050565b60006020828403121561159457600080fd5b81356111bd81611534565b6000806000606084860312156115b457600080fd5b83356115bf81611534565b925060208401356115cf81611534565b929592945050506040919091013590565b6000602082840312156115f257600080fd5b5035919050565b6000806040838503121561160c57600080fd5b823561161781611534565b9150602083013561162781611534565b809150509250929050565b60006020828403121561164457600080fd5b815180151581146111bd57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008282101561169557611695611654565b500390565b600082198211156116ad576116ad611654565b50019056fea26469706673582212202befba1208d7a3535c7812c32249ebf34439ed81de4d0e29b6982f9e3ac851d164736f6c634300080b0033",
}

// DSTokenABI is the input ABI used to generate the binding from.
// Deprecated: Use DSTokenMetaData.ABI instead.
var DSTokenABI = DSTokenMetaData.ABI

// DSTokenBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use DSTokenMetaData.Bin instead.
var DSTokenBin = DSTokenMetaData.Bin

// DeployDSToken deploys a new Ethereum contract, binding an instance of DSToken to it.
func DeployDSToken(auth *bind.TransactOpts, backend bind.ContractBackend, symbol_ [32]byte) (common.Address, *types.Transaction, *DSToken, error) {
	parsed, err := DSTokenMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(DSTokenBin), backend, symbol_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &DSToken{DSTokenCaller: DSTokenCaller{contract: contract}, DSTokenTransactor: DSTokenTransactor{contract: contract}, DSTokenFilterer: DSTokenFilterer{contract: contract}}, nil
}

// DSToken is an auto generated Go binding around an Ethereum contract.
type DSToken struct {
	DSTokenCaller     // Read-only binding to the contract
	DSTokenTransactor // Write-only binding to the contract
	DSTokenFilterer   // Log filterer for contract events
}

// DSTokenCaller is an auto generated read-only Go binding around an Ethereum contract.
type DSTokenCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DSTokenTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DSTokenTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DSTokenFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DSTokenFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DSTokenSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DSTokenSession struct {
	Contract     *DSToken          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DSTokenCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DSTokenCallerSession struct {
	Contract *DSTokenCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// DSTokenTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DSTokenTransactorSession struct {
	Contract     *DSTokenTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// DSTokenRaw is an auto generated low-level Go binding around an Ethereum contract.
type DSTokenRaw struct {
	Contract *DSToken // Generic contract binding to access the raw methods on
}

// DSTokenCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DSTokenCallerRaw struct {
	Contract *DSTokenCaller // Generic read-only contract binding to access the raw methods on
}

// DSTokenTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DSTokenTransactorRaw struct {
	Contract *DSTokenTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDSToken creates a new instance of DSToken, bound to a specific deployed contract.
func NewDSToken(address common.Address, backend bind.ContractBackend) (*DSToken, error) {
	contract, err := bindDSToken(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &DSToken{DSTokenCaller: DSTokenCaller{contract: contract}, DSTokenTransactor: DSTokenTransactor{contract: contract}, DSTokenFilterer: DSTokenFilterer{contract: contract}}, nil
}

// NewDSTokenCaller creates a new read-only instance of DSToken, bound to a specific deployed contract.
func NewDSTokenCaller(address common.Address, caller bind.ContractCaller) (*DSTokenCaller, error) {
	contract, err := bindDSToken(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DSTokenCaller{contract: contract}, nil
}

// NewDSTokenTransactor creates a new write-only instance of DSToken, bound to a specific deployed contract.
func NewDSTokenTransactor(address common.Address, transactor bind.ContractTransactor) (*DSTokenTransactor, error) {
	contract, err := bindDSToken(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DSTokenTransactor{contract: contract}, nil
}

// NewDSTokenFilterer creates a new log filterer instance of DSToken, bound to a specific deployed contract.
func NewDSTokenFilterer(address common.Address, filterer bind.ContractFilterer) (*DSTokenFilterer, error) {
	contract, err := bindDSToken(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DSTokenFilterer{contract: contract}, nil
}

// bindDSToken binds a generic wrapper to an already deployed contract.
func bindDSToken(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(DSTokenABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DSToken *DSTokenRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DSToken.Contract.DSTokenCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DSToken *DSTokenRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DSToken.Contract.DSTokenTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DSToken *DSTokenRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DSToken.Contract.DSTokenTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DSToken *DSTokenCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DSToken.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DSToken *DSTokenTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DSToken.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DSToken *DSTokenTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DSToken.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address , address ) view returns(uint256)
func (_DSToken *DSTokenCaller) Allowance(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _DSToken.contract.Call(opts, &out, "allowance", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address , address ) view returns(uint256)
func (_DSToken *DSTokenSession) Allowance(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _DSToken.Contract.Allowance(&_DSToken.CallOpts, arg0, arg1)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address , address ) view returns(uint256)
func (_DSToken *DSTokenCallerSession) Allowance(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _DSToken.Contract.Allowance(&_DSToken.CallOpts, arg0, arg1)
}

// Authority is a free data retrieval call binding the contract method 0xbf7e214f.
//
// Solidity: function authority() view returns(address)
func (_DSToken *DSTokenCaller) Authority(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _DSToken.contract.Call(opts, &out, "authority")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Authority is a free data retrieval call binding the contract method 0xbf7e214f.
//
// Solidity: function authority() view returns(address)
func (_DSToken *DSTokenSession) Authority() (common.Address, error) {
	return _DSToken.Contract.Authority(&_DSToken.CallOpts)
}

// Authority is a free data retrieval call binding the contract method 0xbf7e214f.
//
// Solidity: function authority() view returns(address)
func (_DSToken *DSTokenCallerSession) Authority() (common.Address, error) {
	return _DSToken.Contract.Authority(&_DSToken.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address ) view returns(uint256)
func (_DSToken *DSTokenCaller) BalanceOf(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _DSToken.contract.Call(opts, &out, "balanceOf", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address ) view returns(uint256)
func (_DSToken *DSTokenSession) BalanceOf(arg0 common.Address) (*big.Int, error) {
	return _DSToken.Contract.BalanceOf(&_DSToken.CallOpts, arg0)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address ) view returns(uint256)
func (_DSToken *DSTokenCallerSession) BalanceOf(arg0 common.Address) (*big.Int, error) {
	return _DSToken.Contract.BalanceOf(&_DSToken.CallOpts, arg0)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint256)
func (_DSToken *DSTokenCaller) Decimals(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DSToken.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint256)
func (_DSToken *DSTokenSession) Decimals() (*big.Int, error) {
	return _DSToken.Contract.Decimals(&_DSToken.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint256)
func (_DSToken *DSTokenCallerSession) Decimals() (*big.Int, error) {
	return _DSToken.Contract.Decimals(&_DSToken.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(bytes32)
func (_DSToken *DSTokenCaller) Name(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _DSToken.contract.Call(opts, &out, "name")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(bytes32)
func (_DSToken *DSTokenSession) Name() ([32]byte, error) {
	return _DSToken.Contract.Name(&_DSToken.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(bytes32)
func (_DSToken *DSTokenCallerSession) Name() ([32]byte, error) {
	return _DSToken.Contract.Name(&_DSToken.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_DSToken *DSTokenCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _DSToken.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_DSToken *DSTokenSession) Owner() (common.Address, error) {
	return _DSToken.Contract.Owner(&_DSToken.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_DSToken *DSTokenCallerSession) Owner() (common.Address, error) {
	return _DSToken.Contract.Owner(&_DSToken.CallOpts)
}

// Stopped is a free data retrieval call binding the contract method 0x75f12b21.
//
// Solidity: function stopped() view returns(bool)
func (_DSToken *DSTokenCaller) Stopped(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _DSToken.contract.Call(opts, &out, "stopped")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Stopped is a free data retrieval call binding the contract method 0x75f12b21.
//
// Solidity: function stopped() view returns(bool)
func (_DSToken *DSTokenSession) Stopped() (bool, error) {
	return _DSToken.Contract.Stopped(&_DSToken.CallOpts)
}

// Stopped is a free data retrieval call binding the contract method 0x75f12b21.
//
// Solidity: function stopped() view returns(bool)
func (_DSToken *DSTokenCallerSession) Stopped() (bool, error) {
	return _DSToken.Contract.Stopped(&_DSToken.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(bytes32)
func (_DSToken *DSTokenCaller) Symbol(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _DSToken.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(bytes32)
func (_DSToken *DSTokenSession) Symbol() ([32]byte, error) {
	return _DSToken.Contract.Symbol(&_DSToken.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(bytes32)
func (_DSToken *DSTokenCallerSession) Symbol() ([32]byte, error) {
	return _DSToken.Contract.Symbol(&_DSToken.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_DSToken *DSTokenCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DSToken.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_DSToken *DSTokenSession) TotalSupply() (*big.Int, error) {
	return _DSToken.Contract.TotalSupply(&_DSToken.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_DSToken *DSTokenCallerSession) TotalSupply() (*big.Int, error) {
	return _DSToken.Contract.TotalSupply(&_DSToken.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address guy, uint256 wad) returns(bool)
func (_DSToken *DSTokenTransactor) Approve(opts *bind.TransactOpts, guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.contract.Transact(opts, "approve", guy, wad)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address guy, uint256 wad) returns(bool)
func (_DSToken *DSTokenSession) Approve(guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.Contract.Approve(&_DSToken.TransactOpts, guy, wad)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address guy, uint256 wad) returns(bool)
func (_DSToken *DSTokenTransactorSession) Approve(guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.Contract.Approve(&_DSToken.TransactOpts, guy, wad)
}

// Approve0 is a paid mutator transaction binding the contract method 0xdaea85c5.
//
// Solidity: function approve(address guy) returns(bool)
func (_DSToken *DSTokenTransactor) Approve0(opts *bind.TransactOpts, guy common.Address) (*types.Transaction, error) {
	return _DSToken.contract.Transact(opts, "approve0", guy)
}

// Approve0 is a paid mutator transaction binding the contract method 0xdaea85c5.
//
// Solidity: function approve(address guy) returns(bool)
func (_DSToken *DSTokenSession) Approve0(guy common.Address) (*types.Transaction, error) {
	return _DSToken.Contract.Approve0(&_DSToken.TransactOpts, guy)
}

// Approve0 is a paid mutator transaction binding the contract method 0xdaea85c5.
//
// Solidity: function approve(address guy) returns(bool)
func (_DSToken *DSTokenTransactorSession) Approve0(guy common.Address) (*types.Transaction, error) {
	return _DSToken.Contract.Approve0(&_DSToken.TransactOpts, guy)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 wad) returns()
func (_DSToken *DSTokenTransactor) Burn(opts *bind.TransactOpts, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.contract.Transact(opts, "burn", wad)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 wad) returns()
func (_DSToken *DSTokenSession) Burn(wad *big.Int) (*types.Transaction, error) {
	return _DSToken.Contract.Burn(&_DSToken.TransactOpts, wad)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 wad) returns()
func (_DSToken *DSTokenTransactorSession) Burn(wad *big.Int) (*types.Transaction, error) {
	return _DSToken.Contract.Burn(&_DSToken.TransactOpts, wad)
}

// Burn0 is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address guy, uint256 wad) returns()
func (_DSToken *DSTokenTransactor) Burn0(opts *bind.TransactOpts, guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.contract.Transact(opts, "burn0", guy, wad)
}

// Burn0 is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address guy, uint256 wad) returns()
func (_DSToken *DSTokenSession) Burn0(guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.Contract.Burn0(&_DSToken.TransactOpts, guy, wad)
}

// Burn0 is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address guy, uint256 wad) returns()
func (_DSToken *DSTokenTransactorSession) Burn0(guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.Contract.Burn0(&_DSToken.TransactOpts, guy, wad)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address guy, uint256 wad) returns()
func (_DSToken *DSTokenTransactor) Mint(opts *bind.TransactOpts, guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.contract.Transact(opts, "mint", guy, wad)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address guy, uint256 wad) returns()
func (_DSToken *DSTokenSession) Mint(guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.Contract.Mint(&_DSToken.TransactOpts, guy, wad)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address guy, uint256 wad) returns()
func (_DSToken *DSTokenTransactorSession) Mint(guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.Contract.Mint(&_DSToken.TransactOpts, guy, wad)
}

// Mint0 is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 wad) returns()
func (_DSToken *DSTokenTransactor) Mint0(opts *bind.TransactOpts, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.contract.Transact(opts, "mint0", wad)
}

// Mint0 is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 wad) returns()
func (_DSToken *DSTokenSession) Mint0(wad *big.Int) (*types.Transaction, error) {
	return _DSToken.Contract.Mint0(&_DSToken.TransactOpts, wad)
}

// Mint0 is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 wad) returns()
func (_DSToken *DSTokenTransactorSession) Mint0(wad *big.Int) (*types.Transaction, error) {
	return _DSToken.Contract.Mint0(&_DSToken.TransactOpts, wad)
}

// Move is a paid mutator transaction binding the contract method 0xbb35783b.
//
// Solidity: function move(address src, address dst, uint256 wad) returns()
func (_DSToken *DSTokenTransactor) Move(opts *bind.TransactOpts, src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.contract.Transact(opts, "move", src, dst, wad)
}

// Move is a paid mutator transaction binding the contract method 0xbb35783b.
//
// Solidity: function move(address src, address dst, uint256 wad) returns()
func (_DSToken *DSTokenSession) Move(src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.Contract.Move(&_DSToken.TransactOpts, src, dst, wad)
}

// Move is a paid mutator transaction binding the contract method 0xbb35783b.
//
// Solidity: function move(address src, address dst, uint256 wad) returns()
func (_DSToken *DSTokenTransactorSession) Move(src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.Contract.Move(&_DSToken.TransactOpts, src, dst, wad)
}

// Pull is a paid mutator transaction binding the contract method 0xf2d5d56b.
//
// Solidity: function pull(address src, uint256 wad) returns()
func (_DSToken *DSTokenTransactor) Pull(opts *bind.TransactOpts, src common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.contract.Transact(opts, "pull", src, wad)
}

// Pull is a paid mutator transaction binding the contract method 0xf2d5d56b.
//
// Solidity: function pull(address src, uint256 wad) returns()
func (_DSToken *DSTokenSession) Pull(src common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.Contract.Pull(&_DSToken.TransactOpts, src, wad)
}

// Pull is a paid mutator transaction binding the contract method 0xf2d5d56b.
//
// Solidity: function pull(address src, uint256 wad) returns()
func (_DSToken *DSTokenTransactorSession) Pull(src common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.Contract.Pull(&_DSToken.TransactOpts, src, wad)
}

// Push is a paid mutator transaction binding the contract method 0xb753a98c.
//
// Solidity: function push(address dst, uint256 wad) returns()
func (_DSToken *DSTokenTransactor) Push(opts *bind.TransactOpts, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.contract.Transact(opts, "push", dst, wad)
}

// Push is a paid mutator transaction binding the contract method 0xb753a98c.
//
// Solidity: function push(address dst, uint256 wad) returns()
func (_DSToken *DSTokenSession) Push(dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.Contract.Push(&_DSToken.TransactOpts, dst, wad)
}

// Push is a paid mutator transaction binding the contract method 0xb753a98c.
//
// Solidity: function push(address dst, uint256 wad) returns()
func (_DSToken *DSTokenTransactorSession) Push(dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.Contract.Push(&_DSToken.TransactOpts, dst, wad)
}

// SetAuthority is a paid mutator transaction binding the contract method 0x7a9e5e4b.
//
// Solidity: function setAuthority(address authority_) returns()
func (_DSToken *DSTokenTransactor) SetAuthority(opts *bind.TransactOpts, authority_ common.Address) (*types.Transaction, error) {
	return _DSToken.contract.Transact(opts, "setAuthority", authority_)
}

// SetAuthority is a paid mutator transaction binding the contract method 0x7a9e5e4b.
//
// Solidity: function setAuthority(address authority_) returns()
func (_DSToken *DSTokenSession) SetAuthority(authority_ common.Address) (*types.Transaction, error) {
	return _DSToken.Contract.SetAuthority(&_DSToken.TransactOpts, authority_)
}

// SetAuthority is a paid mutator transaction binding the contract method 0x7a9e5e4b.
//
// Solidity: function setAuthority(address authority_) returns()
func (_DSToken *DSTokenTransactorSession) SetAuthority(authority_ common.Address) (*types.Transaction, error) {
	return _DSToken.Contract.SetAuthority(&_DSToken.TransactOpts, authority_)
}

// SetName is a paid mutator transaction binding the contract method 0x5ac801fe.
//
// Solidity: function setName(bytes32 name_) returns()
func (_DSToken *DSTokenTransactor) SetName(opts *bind.TransactOpts, name_ [32]byte) (*types.Transaction, error) {
	return _DSToken.contract.Transact(opts, "setName", name_)
}

// SetName is a paid mutator transaction binding the contract method 0x5ac801fe.
//
// Solidity: function setName(bytes32 name_) returns()
func (_DSToken *DSTokenSession) SetName(name_ [32]byte) (*types.Transaction, error) {
	return _DSToken.Contract.SetName(&_DSToken.TransactOpts, name_)
}

// SetName is a paid mutator transaction binding the contract method 0x5ac801fe.
//
// Solidity: function setName(bytes32 name_) returns()
func (_DSToken *DSTokenTransactorSession) SetName(name_ [32]byte) (*types.Transaction, error) {
	return _DSToken.Contract.SetName(&_DSToken.TransactOpts, name_)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address owner_) returns()
func (_DSToken *DSTokenTransactor) SetOwner(opts *bind.TransactOpts, owner_ common.Address) (*types.Transaction, error) {
	return _DSToken.contract.Transact(opts, "setOwner", owner_)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address owner_) returns()
func (_DSToken *DSTokenSession) SetOwner(owner_ common.Address) (*types.Transaction, error) {
	return _DSToken.Contract.SetOwner(&_DSToken.TransactOpts, owner_)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address owner_) returns()
func (_DSToken *DSTokenTransactorSession) SetOwner(owner_ common.Address) (*types.Transaction, error) {
	return _DSToken.Contract.SetOwner(&_DSToken.TransactOpts, owner_)
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_DSToken *DSTokenTransactor) Start(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DSToken.contract.Transact(opts, "start")
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_DSToken *DSTokenSession) Start() (*types.Transaction, error) {
	return _DSToken.Contract.Start(&_DSToken.TransactOpts)
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_DSToken *DSTokenTransactorSession) Start() (*types.Transaction, error) {
	return _DSToken.Contract.Start(&_DSToken.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_DSToken *DSTokenTransactor) Stop(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DSToken.contract.Transact(opts, "stop")
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_DSToken *DSTokenSession) Stop() (*types.Transaction, error) {
	return _DSToken.Contract.Stop(&_DSToken.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_DSToken *DSTokenTransactorSession) Stop() (*types.Transaction, error) {
	return _DSToken.Contract.Stop(&_DSToken.TransactOpts)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address dst, uint256 wad) returns(bool)
func (_DSToken *DSTokenTransactor) Transfer(opts *bind.TransactOpts, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.contract.Transact(opts, "transfer", dst, wad)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address dst, uint256 wad) returns(bool)
func (_DSToken *DSTokenSession) Transfer(dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.Contract.Transfer(&_DSToken.TransactOpts, dst, wad)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address dst, uint256 wad) returns(bool)
func (_DSToken *DSTokenTransactorSession) Transfer(dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.Contract.Transfer(&_DSToken.TransactOpts, dst, wad)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address src, address dst, uint256 wad) returns(bool)
func (_DSToken *DSTokenTransactor) TransferFrom(opts *bind.TransactOpts, src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.contract.Transact(opts, "transferFrom", src, dst, wad)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address src, address dst, uint256 wad) returns(bool)
func (_DSToken *DSTokenSession) TransferFrom(src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.Contract.TransferFrom(&_DSToken.TransactOpts, src, dst, wad)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address src, address dst, uint256 wad) returns(bool)
func (_DSToken *DSTokenTransactorSession) TransferFrom(src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.Contract.TransferFrom(&_DSToken.TransactOpts, src, dst, wad)
}

// DSTokenApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the DSToken contract.
type DSTokenApprovalIterator struct {
	Event *DSTokenApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DSTokenApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DSTokenApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DSTokenApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DSTokenApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DSTokenApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DSTokenApproval represents a Approval event raised by the DSToken contract.
type DSTokenApproval struct {
	Src common.Address
	Guy common.Address
	Wad *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed src, address indexed guy, uint256 wad)
func (_DSToken *DSTokenFilterer) FilterApproval(opts *bind.FilterOpts, src []common.Address, guy []common.Address) (*DSTokenApprovalIterator, error) {

	var srcRule []interface{}
	for _, srcItem := range src {
		srcRule = append(srcRule, srcItem)
	}
	var guyRule []interface{}
	for _, guyItem := range guy {
		guyRule = append(guyRule, guyItem)
	}

	logs, sub, err := _DSToken.contract.FilterLogs(opts, "Approval", srcRule, guyRule)
	if err != nil {
		return nil, err
	}
	return &DSTokenApprovalIterator{contract: _DSToken.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed src, address indexed guy, uint256 wad)
func (_DSToken *DSTokenFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *DSTokenApproval, src []common.Address, guy []common.Address) (event.Subscription, error) {

	var srcRule []interface{}
	for _, srcItem := range src {
		srcRule = append(srcRule, srcItem)
	}
	var guyRule []interface{}
	for _, guyItem := range guy {
		guyRule = append(guyRule, guyItem)
	}

	logs, sub, err := _DSToken.contract.WatchLogs(opts, "Approval", srcRule, guyRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DSTokenApproval)
				if err := _DSToken.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed src, address indexed guy, uint256 wad)
func (_DSToken *DSTokenFilterer) ParseApproval(log types.Log) (*DSTokenApproval, error) {
	event := new(DSTokenApproval)
	if err := _DSToken.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DSTokenBurnIterator is returned from FilterBurn and is used to iterate over the raw logs and unpacked data for Burn events raised by the DSToken contract.
type DSTokenBurnIterator struct {
	Event *DSTokenBurn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DSTokenBurnIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DSTokenBurn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DSTokenBurn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DSTokenBurnIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DSTokenBurnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DSTokenBurn represents a Burn event raised by the DSToken contract.
type DSTokenBurn struct {
	Guy common.Address
	Wad *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterBurn is a free log retrieval operation binding the contract event 0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5.
//
// Solidity: event Burn(address indexed guy, uint256 wad)
func (_DSToken *DSTokenFilterer) FilterBurn(opts *bind.FilterOpts, guy []common.Address) (*DSTokenBurnIterator, error) {

	var guyRule []interface{}
	for _, guyItem := range guy {
		guyRule = append(guyRule, guyItem)
	}

	logs, sub, err := _DSToken.contract.FilterLogs(opts, "Burn", guyRule)
	if err != nil {
		return nil, err
	}
	return &DSTokenBurnIterator{contract: _DSToken.contract, event: "Burn", logs: logs, sub: sub}, nil
}

// WatchBurn is a free log subscription operation binding the contract event 0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5.
//
// Solidity: event Burn(address indexed guy, uint256 wad)
func (_DSToken *DSTokenFilterer) WatchBurn(opts *bind.WatchOpts, sink chan<- *DSTokenBurn, guy []common.Address) (event.Subscription, error) {

	var guyRule []interface{}
	for _, guyItem := range guy {
		guyRule = append(guyRule, guyItem)
	}

	logs, sub, err := _DSToken.contract.WatchLogs(opts, "Burn", guyRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DSTokenBurn)
				if err := _DSToken.contract.UnpackLog(event, "Burn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBurn is a log parse operation binding the contract event 0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5.
//
// Solidity: event Burn(address indexed guy, uint256 wad)
func (_DSToken *DSTokenFilterer) ParseBurn(log types.Log) (*DSTokenBurn, error) {
	event := new(DSTokenBurn)
	if err := _DSToken.contract.UnpackLog(event, "Burn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DSTokenLogSetAuthorityIterator is returned from FilterLogSetAuthority and is used to iterate over the raw logs and unpacked data for LogSetAuthority events raised by the DSToken contract.
type DSTokenLogSetAuthorityIterator struct {
	Event *DSTokenLogSetAuthority // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DSTokenLogSetAuthorityIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DSTokenLogSetAuthority)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DSTokenLogSetAuthority)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DSTokenLogSetAuthorityIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DSTokenLogSetAuthorityIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DSTokenLogSetAuthority represents a LogSetAuthority event raised by the DSToken contract.
type DSTokenLogSetAuthority struct {
	Authority common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterLogSetAuthority is a free log retrieval operation binding the contract event 0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4.
//
// Solidity: event LogSetAuthority(address indexed authority)
func (_DSToken *DSTokenFilterer) FilterLogSetAuthority(opts *bind.FilterOpts, authority []common.Address) (*DSTokenLogSetAuthorityIterator, error) {

	var authorityRule []interface{}
	for _, authorityItem := range authority {
		authorityRule = append(authorityRule, authorityItem)
	}

	logs, sub, err := _DSToken.contract.FilterLogs(opts, "LogSetAuthority", authorityRule)
	if err != nil {
		return nil, err
	}
	return &DSTokenLogSetAuthorityIterator{contract: _DSToken.contract, event: "LogSetAuthority", logs: logs, sub: sub}, nil
}

// WatchLogSetAuthority is a free log subscription operation binding the contract event 0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4.
//
// Solidity: event LogSetAuthority(address indexed authority)
func (_DSToken *DSTokenFilterer) WatchLogSetAuthority(opts *bind.WatchOpts, sink chan<- *DSTokenLogSetAuthority, authority []common.Address) (event.Subscription, error) {

	var authorityRule []interface{}
	for _, authorityItem := range authority {
		authorityRule = append(authorityRule, authorityItem)
	}

	logs, sub, err := _DSToken.contract.WatchLogs(opts, "LogSetAuthority", authorityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DSTokenLogSetAuthority)
				if err := _DSToken.contract.UnpackLog(event, "LogSetAuthority", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogSetAuthority is a log parse operation binding the contract event 0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4.
//
// Solidity: event LogSetAuthority(address indexed authority)
func (_DSToken *DSTokenFilterer) ParseLogSetAuthority(log types.Log) (*DSTokenLogSetAuthority, error) {
	event := new(DSTokenLogSetAuthority)
	if err := _DSToken.contract.UnpackLog(event, "LogSetAuthority", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DSTokenLogSetOwnerIterator is returned from FilterLogSetOwner and is used to iterate over the raw logs and unpacked data for LogSetOwner events raised by the DSToken contract.
type DSTokenLogSetOwnerIterator struct {
	Event *DSTokenLogSetOwner // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DSTokenLogSetOwnerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DSTokenLogSetOwner)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DSTokenLogSetOwner)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DSTokenLogSetOwnerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DSTokenLogSetOwnerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DSTokenLogSetOwner represents a LogSetOwner event raised by the DSToken contract.
type DSTokenLogSetOwner struct {
	Owner common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogSetOwner is a free log retrieval operation binding the contract event 0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94.
//
// Solidity: event LogSetOwner(address indexed owner)
func (_DSToken *DSTokenFilterer) FilterLogSetOwner(opts *bind.FilterOpts, owner []common.Address) (*DSTokenLogSetOwnerIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _DSToken.contract.FilterLogs(opts, "LogSetOwner", ownerRule)
	if err != nil {
		return nil, err
	}
	return &DSTokenLogSetOwnerIterator{contract: _DSToken.contract, event: "LogSetOwner", logs: logs, sub: sub}, nil
}

// WatchLogSetOwner is a free log subscription operation binding the contract event 0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94.
//
// Solidity: event LogSetOwner(address indexed owner)
func (_DSToken *DSTokenFilterer) WatchLogSetOwner(opts *bind.WatchOpts, sink chan<- *DSTokenLogSetOwner, owner []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _DSToken.contract.WatchLogs(opts, "LogSetOwner", ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DSTokenLogSetOwner)
				if err := _DSToken.contract.UnpackLog(event, "LogSetOwner", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogSetOwner is a log parse operation binding the contract event 0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94.
//
// Solidity: event LogSetOwner(address indexed owner)
func (_DSToken *DSTokenFilterer) ParseLogSetOwner(log types.Log) (*DSTokenLogSetOwner, error) {
	event := new(DSTokenLogSetOwner)
	if err := _DSToken.contract.UnpackLog(event, "LogSetOwner", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DSTokenMintIterator is returned from FilterMint and is used to iterate over the raw logs and unpacked data for Mint events raised by the DSToken contract.
type DSTokenMintIterator struct {
	Event *DSTokenMint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DSTokenMintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DSTokenMint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DSTokenMint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DSTokenMintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DSTokenMintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DSTokenMint represents a Mint event raised by the DSToken contract.
type DSTokenMint struct {
	Guy common.Address
	Wad *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterMint is a free log retrieval operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
//
// Solidity: event Mint(address indexed guy, uint256 wad)
func (_DSToken *DSTokenFilterer) FilterMint(opts *bind.FilterOpts, guy []common.Address) (*DSTokenMintIterator, error) {

	var guyRule []interface{}
	for _, guyItem := range guy {
		guyRule = append(guyRule, guyItem)
	}

	logs, sub, err := _DSToken.contract.FilterLogs(opts, "Mint", guyRule)
	if err != nil {
		return nil, err
	}
	return &DSTokenMintIterator{contract: _DSToken.contract, event: "Mint", logs: logs, sub: sub}, nil
}

// WatchMint is a free log subscription operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
//
// Solidity: event Mint(address indexed guy, uint256 wad)
func (_DSToken *DSTokenFilterer) WatchMint(opts *bind.WatchOpts, sink chan<- *DSTokenMint, guy []common.Address) (event.Subscription, error) {

	var guyRule []interface{}
	for _, guyItem := range guy {
		guyRule = append(guyRule, guyItem)
	}

	logs, sub, err := _DSToken.contract.WatchLogs(opts, "Mint", guyRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DSTokenMint)
				if err := _DSToken.contract.UnpackLog(event, "Mint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMint is a log parse operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
//
// Solidity: event Mint(address indexed guy, uint256 wad)
func (_DSToken *DSTokenFilterer) ParseMint(log types.Log) (*DSTokenMint, error) {
	event := new(DSTokenMint)
	if err := _DSToken.contract.UnpackLog(event, "Mint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DSTokenStartIterator is returned from FilterStart and is used to iterate over the raw logs and unpacked data for Start events raised by the DSToken contract.
type DSTokenStartIterator struct {
	Event *DSTokenStart // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DSTokenStartIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DSTokenStart)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DSTokenStart)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DSTokenStartIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DSTokenStartIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DSTokenStart represents a Start event raised by the DSToken contract.
type DSTokenStart struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterStart is a free log retrieval operation binding the contract event 0x1b55ba3aa851a46be3b365aee5b5c140edd620d578922f3e8466d2cbd96f954b.
//
// Solidity: event Start()
func (_DSToken *DSTokenFilterer) FilterStart(opts *bind.FilterOpts) (*DSTokenStartIterator, error) {

	logs, sub, err := _DSToken.contract.FilterLogs(opts, "Start")
	if err != nil {
		return nil, err
	}
	return &DSTokenStartIterator{contract: _DSToken.contract, event: "Start", logs: logs, sub: sub}, nil
}

// WatchStart is a free log subscription operation binding the contract event 0x1b55ba3aa851a46be3b365aee5b5c140edd620d578922f3e8466d2cbd96f954b.
//
// Solidity: event Start()
func (_DSToken *DSTokenFilterer) WatchStart(opts *bind.WatchOpts, sink chan<- *DSTokenStart) (event.Subscription, error) {

	logs, sub, err := _DSToken.contract.WatchLogs(opts, "Start")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DSTokenStart)
				if err := _DSToken.contract.UnpackLog(event, "Start", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStart is a log parse operation binding the contract event 0x1b55ba3aa851a46be3b365aee5b5c140edd620d578922f3e8466d2cbd96f954b.
//
// Solidity: event Start()
func (_DSToken *DSTokenFilterer) ParseStart(log types.Log) (*DSTokenStart, error) {
	event := new(DSTokenStart)
	if err := _DSToken.contract.UnpackLog(event, "Start", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DSTokenStopIterator is returned from FilterStop and is used to iterate over the raw logs and unpacked data for Stop events raised by the DSToken contract.
type DSTokenStopIterator struct {
	Event *DSTokenStop // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DSTokenStopIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DSTokenStop)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DSTokenStop)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DSTokenStopIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DSTokenStopIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DSTokenStop represents a Stop event raised by the DSToken contract.
type DSTokenStop struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterStop is a free log retrieval operation binding the contract event 0xbedf0f4abfe86d4ffad593d9607fe70e83ea706033d44d24b3b6283cf3fc4f6b.
//
// Solidity: event Stop()
func (_DSToken *DSTokenFilterer) FilterStop(opts *bind.FilterOpts) (*DSTokenStopIterator, error) {

	logs, sub, err := _DSToken.contract.FilterLogs(opts, "Stop")
	if err != nil {
		return nil, err
	}
	return &DSTokenStopIterator{contract: _DSToken.contract, event: "Stop", logs: logs, sub: sub}, nil
}

// WatchStop is a free log subscription operation binding the contract event 0xbedf0f4abfe86d4ffad593d9607fe70e83ea706033d44d24b3b6283cf3fc4f6b.
//
// Solidity: event Stop()
func (_DSToken *DSTokenFilterer) WatchStop(opts *bind.WatchOpts, sink chan<- *DSTokenStop) (event.Subscription, error) {

	logs, sub, err := _DSToken.contract.WatchLogs(opts, "Stop")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DSTokenStop)
				if err := _DSToken.contract.UnpackLog(event, "Stop", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStop is a log parse operation binding the contract event 0xbedf0f4abfe86d4ffad593d9607fe70e83ea706033d44d24b3b6283cf3fc4f6b.
//
// Solidity: event Stop()
func (_DSToken *DSTokenFilterer) ParseStop(log types.Log) (*DSTokenStop, error) {
	event := new(DSTokenStop)
	if err := _DSToken.contract.UnpackLog(event, "Stop", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DSTokenTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the DSToken contract.
type DSTokenTransferIterator struct {
	Event *DSTokenTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DSTokenTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DSTokenTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DSTokenTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DSTokenTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DSTokenTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DSTokenTransfer represents a Transfer event raised by the DSToken contract.
type DSTokenTransfer struct {
	Src common.Address
	Dst common.Address
	Wad *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed src, address indexed dst, uint256 wad)
func (_DSToken *DSTokenFilterer) FilterTransfer(opts *bind.FilterOpts, src []common.Address, dst []common.Address) (*DSTokenTransferIterator, error) {

	var srcRule []interface{}
	for _, srcItem := range src {
		srcRule = append(srcRule, srcItem)
	}
	var dstRule []interface{}
	for _, dstItem := range dst {
		dstRule = append(dstRule, dstItem)
	}

	logs, sub, err := _DSToken.contract.FilterLogs(opts, "Transfer", srcRule, dstRule)
	if err != nil {
		return nil, err
	}
	return &DSTokenTransferIterator{contract: _DSToken.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed src, address indexed dst, uint256 wad)
func (_DSToken *DSTokenFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *DSTokenTransfer, src []common.Address, dst []common.Address) (event.Subscription, error) {

	var srcRule []interface{}
	for _, srcItem := range src {
		srcRule = append(srcRule, srcItem)
	}
	var dstRule []interface{}
	for _, dstItem := range dst {
		dstRule = append(dstRule, dstItem)
	}

	logs, sub, err := _DSToken.contract.WatchLogs(opts, "Transfer", srcRule, dstRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DSTokenTransfer)
				if err := _DSToken.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed src, address indexed dst, uint256 wad)
func (_DSToken *DSTokenFilterer) ParseTransfer(log types.Log) (*DSTokenTransfer, error) {
	event := new(DSTokenTransfer)
	if err := _DSToken.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DepositMetaData contains all meta data concerning the Deposit contract.
var DepositMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractRegistry\",\"name\":\"registry_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"key_share_G1\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"key_share_G1_correctness_proof\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[4]\",\"name\":\"key_share_G2\",\"type\":\"uint256[4]\"}],\"name\":\"KeyShareSubmission\",\"type\":\"event\"},{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"foo\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"bar\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"fax\",\"type\":\"bytes\"}],\"name\":\"LogNote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dkgStarts\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"registrationEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shareDistributionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"disputeEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"keyShareSubmissionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mpkSubmissionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gpkjSubmissionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gpkjDisputeEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dkgComplete\",\"type\":\"uint256\"}],\"name\":\"RegistrationOpen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"encrypted_shares\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[2][]\",\"name\":\"commitments\",\"type\":\"uint256[2][]\"}],\"name\":\"ShareDistribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share3\",\"type\":\"uint256\"}],\"name\":\"ValidatorMember\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"validatorCount\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"ethHeight\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"madHeight\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey3\",\"type\":\"uint256\"}],\"name\":\"ValidatorSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contractDSAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositID\",\"type\":\"uint256\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"directDeposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reloadRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractDSAuthority\",\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositID\",\"type\":\"uint256\"}],\"name\":\"setDepositID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b5060405162001b2c38038062001b2c8339810160408190526200003491620001b5565b600180546001600160a01b031916339081179091556040517fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9490600090a2600480546001600160a01b031916339081179091556200009290620000e6565b600580546001600160a01b0319166001600160a01b0383161790556000620000d77f1f4a8eb7cf654c75cb9376a8ca57eea8125f02544d28c8b83107dea51810f21290565b60019081015550620002119050565b6004546001600160a01b03163314806200010f57503360009081526002602052604090205460ff165b6200017a5760405162461bcd60e51b815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527037b934bd32b21037b832b930ba37b9399760791b606482015260840160405180910390fd5b6001600160a01b0381166000908152600260205260408120805460ff191660011790556003805491620001ad83620001e7565b919050555050565b600060208284031215620001c857600080fd5b81516001600160a01b0381168114620001e057600080fd5b9392505050565b60006000198214156200020a57634e487b7160e01b600052601160045260246000fd5b5060010190565b61190b80620002216000396000f3fe608060405234801561001057600080fd5b506004361061011b5760003560e01c8063b3117446116100b2578063da7f7eb711610081578063ec68426f11610066578063ec68426f146102bf578063fad8b32a146102d2578063ff50abdc146102e557600080fd5b8063da7f7eb714610299578063e348da13146102ac57600080fd5b8063b311744614610237578063b6b55f251461025e578063be9a655514610271578063bf7e214f1461027957600080fd5b806375f12b21116100ee57806375f12b211461016d5780637a9e5e4b146101925780638da5cb5b146101a5578063b02c43d0146101ea57600080fd5b806307da68f51461012057806313af40351461012a5780631476601d1461013d5780632f4f21e214610145575b600080fd5b61012861030c565b005b610128610138366004611662565b61043a565b61012861053d565b610158610153366004611686565b610795565b60405190151581526020015b60405180910390f35b6001546101589074010000000000000000000000000000000000000000900460ff1681565b6101286101a0366004611662565b610830565b6001546101c59073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610164565b6102296101f83660046116b2565b60009081527f1f4a8eb7cf654c75cb9376a8ca57eea8125f02544d28c8b83107dea51810f214602052604090205490565b604051908152602001610164565b7f1f4a8eb7cf654c75cb9376a8ca57eea8125f02544d28c8b83107dea51810f21354610229565b61015861026c3660046116b2565b610931565b6101286109c3565b6000546101c59073ffffffffffffffffffffffffffffffffffffffff1681565b6101286102a73660046116b2565b610ac6565b6101286102ba366004611662565b610bab565b6101586102cd3660046116cb565b610cd0565b6101286102e0366004611662565b611017565b7f1f4a8eb7cf654c75cb9376a8ca57eea8125f02544d28c8b83107dea51810f21254610229565b61033a336000357fffffffff000000000000000000000000000000000000000000000000000000001661119d565b6103a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d617574682d756e617574686f72697a656400000000000000000000000060448201526064015b60405180910390fd5b60018054740100000000000000000000000000000000000000007fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff90911617905560405160043590602435903490829084903390600080357fffffffff00000000000000000000000000000000000000000000000000000000169161042d9187913690611703565b60405180910390a4505050565b610468336000357fffffffff000000000000000000000000000000000000000000000000000000001661119d565b6104ce576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d617574682d756e617574686f72697a6564000000000000000000000000604482015260640161039c565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040517fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9490600090a250565b60045473ffffffffffffffffffffffffffffffffffffffff1633148061057257503360009081526002602052604090205460ff165b6105fe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527f6f72697a6564206f70657261746f72732e000000000000000000000000000000606482015260840161039c565b600554604080518082018252600f81527f7574696c697479546f6b656e2f76310000000000000000000000000000000000602082015290517ff67187ac0000000000000000000000000000000000000000000000000000000081527f1f4a8eb7cf654c75cb9376a8ca57eea8125f02544d28c8b83107dea51810f2129273ffffffffffffffffffffffffffffffffffffffff169163f67187ac916106a59190600401611757565b602060405180830381865afa1580156106c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e691906117ca565b6004820180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff929092169182179055610792576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f696e76616c6964206164647265737320666f7220746f6b656e00000000000000604482015260640161039c565b50565b60015460009074010000000000000000000000000000000000000000900460ff161561081d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f64732d73746f702d69732d73746f707065640000000000000000000000000000604482015260640161039c565b61082733836112de565b90505b92915050565b61085e336000357fffffffff000000000000000000000000000000000000000000000000000000001661119d565b6108c4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d617574682d756e617574686f72697a6564000000000000000000000000604482015260640161039c565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316908117825560405190917f1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada491a250565b60015460009074010000000000000000000000000000000000000000900460ff16156109b9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f64732d73746f702d69732d73746f707065640000000000000000000000000000604482015260640161039c565b61082a33836112de565b6109f1336000357fffffffff000000000000000000000000000000000000000000000000000000001661119d565b610a57576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d617574682d756e617574686f72697a6564000000000000000000000000604482015260640161039c565b600180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16905560405160043590602435903490829084903390600080357fffffffff00000000000000000000000000000000000000000000000000000000169161042d9187913690611703565b60045473ffffffffffffffffffffffffffffffffffffffff16331480610afb57503360009081526002602052604090205460ff165b610b87576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527f6f72697a6564206f70657261746f72732e000000000000000000000000000000606482015260840161039c565b7f1f4a8eb7cf654c75cb9376a8ca57eea8125f02544d28c8b83107dea51810f21355565b60045473ffffffffffffffffffffffffffffffffffffffff16331480610be057503360009081526002602052604090205460ff165b610c6c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527f6f72697a6564206f70657261746f72732e000000000000000000000000000000606482015260840161039c565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260026020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790556003805491610cc883611816565b919050555050565b60015460009074010000000000000000000000000000000000000000900460ff1615610d58576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f64732d73746f702d69732d73746f707065640000000000000000000000000000604482015260640161039c565b60045473ffffffffffffffffffffffffffffffffffffffff16331480610d8d57503360009081526002602052604090205460ff165b610e19576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527f6f72697a6564206f70657261746f72732e000000000000000000000000000000606482015260840161039c565b6040805185815273ffffffffffffffffffffffffffffffffffffffff851660208201529081018390527f5b063c6569a91e8133fc6cd71d31a4ca5c65c652fd53ae093f46107754f085419060600160405180910390a160008481527f1f4a8eb7cf654c75cb9376a8ca57eea8125f02544d28c8b83107dea51810f214602090815260408083208054908690557f1f4a8eb7cf654c75cb9376a8ca57eea8125f02544d28c8b83107dea51810f21590925290912080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86161790557f1f4a8eb7cf654c75cb9376a8ca57eea8125f02544d28c8b83107dea51810f2129080841115610f57576000610f408583611550565b8354909150610f4f90826115c8565b835550610f7e565b80841015610f7e576000610f6b8286611550565b8354909150610f7a9082611550565b8355505b6004828101546040517f40c10f1900000000000000000000000000000000000000000000000000000000815230928101929092526024820186905273ffffffffffffffffffffffffffffffffffffffff169081906340c10f1990604401600060405180830381600087803b158015610ff557600080fd5b505af1158015611009573d6000803e3d6000fd5b505050505050509392505050565b60045473ffffffffffffffffffffffffffffffffffffffff1633148061104c57503360009081526002602052604090205460ff165b6110d8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527f6f72697a6564206f70657261746f72732e000000000000000000000000000000606482015260840161039c565b600160035411611144576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f43616e27742072656d6f766520616c6c206f70657261746f7273000000000000604482015260640161039c565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260026020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690556003805491610cc88361184f565b600073ffffffffffffffffffffffffffffffffffffffff83163014156111c55750600161082a565b60015473ffffffffffffffffffffffffffffffffffffffff848116911614156111f05750600161082a565b60005473ffffffffffffffffffffffffffffffffffffffff166112155750600061082a565b6000546040517fb700961300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301523060248301527fffffffff00000000000000000000000000000000000000000000000000000000851660448301529091169063b700961390606401602060405180830381865afa1580156112b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d79190611884565b905061082a565b7f1f4a8eb7cf654c75cb9376a8ca57eea8125f02544d28c8b83107dea51810f213805460009081527f1f4a8eb7cf654c75cb9376a8ca57eea8125f02544d28c8b83107dea51810f21460209081526040808320859055925482527f1f4a8eb7cf654c75cb9376a8ca57eea8125f02544d28c8b83107dea51810f215905290812080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff85161790557f1f4a8eb7cf654c75cb9376a8ca57eea8125f02544d28c8b83107dea51810f21280546113c990846115c8565b815560018101546040805191825273ffffffffffffffffffffffffffffffffffffffff8616602083015281018490527f5b063c6569a91e8133fc6cd71d31a4ca5c65c652fd53ae093f46107754f085419060600160405180910390a1600181810154611434916115c8565b60018201556004808201546040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87811693820193909352306024820152604481018690529116906323b872dd906064016020604051808303816000875af11580156114bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e09190611884565b611546576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5472616e73666572206661696c65640000000000000000000000000000000000604482015260640161039c565b5060019392505050565b60008261155d83826118a6565b915081111561082a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f64732d6d6174682d7375622d756e646572666c6f770000000000000000000000604482015260640161039c565b6000826115d583826118bd565b915081101561082a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d6d6174682d6164642d6f766572666c6f77000000000000000000000000604482015260640161039c565b73ffffffffffffffffffffffffffffffffffffffff8116811461079257600080fd5b60006020828403121561167457600080fd5b813561167f81611640565b9392505050565b6000806040838503121561169957600080fd5b82356116a481611640565b946020939093013593505050565b6000602082840312156116c457600080fd5b5035919050565b6000806000606084860312156116e057600080fd5b8335925060208401356116f281611640565b929592945050506040919091013590565b83815260406020820152816040820152818360608301376000818301606090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016010192915050565b600060208083528351808285015260005b8181101561178457858101830151858201604001528201611768565b81811115611796576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b6000602082840312156117dc57600080fd5b815161167f81611640565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611848576118486117e7565b5060010190565b60008161185e5761185e6117e7565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b60006020828403121561189657600080fd5b8151801515811461167f57600080fd5b6000828210156118b8576118b86117e7565b500390565b600082198211156118d0576118d06117e7565b50019056fea26469706673582212204d0940da1c049e7f76ca7681e3dc87e3a8c180a22e6c4ae177b1ff2ca7b42dbe64736f6c634300080b0033",
}

// DepositABI is the input ABI used to generate the binding from.
// Deprecated: Use DepositMetaData.ABI instead.
var DepositABI = DepositMetaData.ABI

// DepositBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use DepositMetaData.Bin instead.
var DepositBin = DepositMetaData.Bin

// DeployDeposit deploys a new Ethereum contract, binding an instance of Deposit to it.
func DeployDeposit(auth *bind.TransactOpts, backend bind.ContractBackend, registry_ common.Address) (common.Address, *types.Transaction, *Deposit, error) {
	parsed, err := DepositMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(DepositBin), backend, registry_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Deposit{DepositCaller: DepositCaller{contract: contract}, DepositTransactor: DepositTransactor{contract: contract}, DepositFilterer: DepositFilterer{contract: contract}}, nil
}

// Deposit is an auto generated Go binding around an Ethereum contract.
type Deposit struct {
	DepositCaller     // Read-only binding to the contract
	DepositTransactor // Write-only binding to the contract
	DepositFilterer   // Log filterer for contract events
}

// DepositCaller is an auto generated read-only Go binding around an Ethereum contract.
type DepositCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DepositTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DepositTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DepositFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DepositFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DepositSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DepositSession struct {
	Contract     *Deposit          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DepositCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DepositCallerSession struct {
	Contract *DepositCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// DepositTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DepositTransactorSession struct {
	Contract     *DepositTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// DepositRaw is an auto generated low-level Go binding around an Ethereum contract.
type DepositRaw struct {
	Contract *Deposit // Generic contract binding to access the raw methods on
}

// DepositCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DepositCallerRaw struct {
	Contract *DepositCaller // Generic read-only contract binding to access the raw methods on
}

// DepositTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DepositTransactorRaw struct {
	Contract *DepositTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDeposit creates a new instance of Deposit, bound to a specific deployed contract.
func NewDeposit(address common.Address, backend bind.ContractBackend) (*Deposit, error) {
	contract, err := bindDeposit(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Deposit{DepositCaller: DepositCaller{contract: contract}, DepositTransactor: DepositTransactor{contract: contract}, DepositFilterer: DepositFilterer{contract: contract}}, nil
}

// NewDepositCaller creates a new read-only instance of Deposit, bound to a specific deployed contract.
func NewDepositCaller(address common.Address, caller bind.ContractCaller) (*DepositCaller, error) {
	contract, err := bindDeposit(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DepositCaller{contract: contract}, nil
}

// NewDepositTransactor creates a new write-only instance of Deposit, bound to a specific deployed contract.
func NewDepositTransactor(address common.Address, transactor bind.ContractTransactor) (*DepositTransactor, error) {
	contract, err := bindDeposit(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DepositTransactor{contract: contract}, nil
}

// NewDepositFilterer creates a new log filterer instance of Deposit, bound to a specific deployed contract.
func NewDepositFilterer(address common.Address, filterer bind.ContractFilterer) (*DepositFilterer, error) {
	contract, err := bindDeposit(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DepositFilterer{contract: contract}, nil
}

// bindDeposit binds a generic wrapper to an already deployed contract.
func bindDeposit(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(DepositABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Deposit *DepositRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Deposit.Contract.DepositCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Deposit *DepositRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Deposit.Contract.DepositTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Deposit *DepositRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Deposit.Contract.DepositTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Deposit *DepositCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Deposit.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Deposit *DepositTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Deposit.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Deposit *DepositTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Deposit.Contract.contract.Transact(opts, method, params...)
}

// Authority is a free data retrieval call binding the contract method 0xbf7e214f.
//
// Solidity: function authority() view returns(address)
func (_Deposit *DepositCaller) Authority(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Deposit.contract.Call(opts, &out, "authority")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Authority is a free data retrieval call binding the contract method 0xbf7e214f.
//
// Solidity: function authority() view returns(address)
func (_Deposit *DepositSession) Authority() (common.Address, error) {
	return _Deposit.Contract.Authority(&_Deposit.CallOpts)
}

// Authority is a free data retrieval call binding the contract method 0xbf7e214f.
//
// Solidity: function authority() view returns(address)
func (_Deposit *DepositCallerSession) Authority() (common.Address, error) {
	return _Deposit.Contract.Authority(&_Deposit.CallOpts)
}

// DepositID is a free data retrieval call binding the contract method 0xb3117446.
//
// Solidity: function depositID() view returns(uint256)
func (_Deposit *DepositCaller) DepositID(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Deposit.contract.Call(opts, &out, "depositID")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DepositID is a free data retrieval call binding the contract method 0xb3117446.
//
// Solidity: function depositID() view returns(uint256)
func (_Deposit *DepositSession) DepositID() (*big.Int, error) {
	return _Deposit.Contract.DepositID(&_Deposit.CallOpts)
}

// DepositID is a free data retrieval call binding the contract method 0xb3117446.
//
// Solidity: function depositID() view returns(uint256)
func (_Deposit *DepositCallerSession) DepositID() (*big.Int, error) {
	return _Deposit.Contract.DepositID(&_Deposit.CallOpts)
}

// Deposits is a free data retrieval call binding the contract method 0xb02c43d0.
//
// Solidity: function deposits(uint256 _depositID) view returns(uint256)
func (_Deposit *DepositCaller) Deposits(opts *bind.CallOpts, _depositID *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Deposit.contract.Call(opts, &out, "deposits", _depositID)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Deposits is a free data retrieval call binding the contract method 0xb02c43d0.
//
// Solidity: function deposits(uint256 _depositID) view returns(uint256)
func (_Deposit *DepositSession) Deposits(_depositID *big.Int) (*big.Int, error) {
	return _Deposit.Contract.Deposits(&_Deposit.CallOpts, _depositID)
}

// Deposits is a free data retrieval call binding the contract method 0xb02c43d0.
//
// Solidity: function deposits(uint256 _depositID) view returns(uint256)
func (_Deposit *DepositCallerSession) Deposits(_depositID *big.Int) (*big.Int, error) {
	return _Deposit.Contract.Deposits(&_Deposit.CallOpts, _depositID)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Deposit *DepositCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Deposit.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Deposit *DepositSession) Owner() (common.Address, error) {
	return _Deposit.Contract.Owner(&_Deposit.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Deposit *DepositCallerSession) Owner() (common.Address, error) {
	return _Deposit.Contract.Owner(&_Deposit.CallOpts)
}

// Stopped is a free data retrieval call binding the contract method 0x75f12b21.
//
// Solidity: function stopped() view returns(bool)
func (_Deposit *DepositCaller) Stopped(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Deposit.contract.Call(opts, &out, "stopped")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Stopped is a free data retrieval call binding the contract method 0x75f12b21.
//
// Solidity: function stopped() view returns(bool)
func (_Deposit *DepositSession) Stopped() (bool, error) {
	return _Deposit.Contract.Stopped(&_Deposit.CallOpts)
}

// Stopped is a free data retrieval call binding the contract method 0x75f12b21.
//
// Solidity: function stopped() view returns(bool)
func (_Deposit *DepositCallerSession) Stopped() (bool, error) {
	return _Deposit.Contract.Stopped(&_Deposit.CallOpts)
}

// TotalDeposited is a free data retrieval call binding the contract method 0xff50abdc.
//
// Solidity: function totalDeposited() view returns(uint256)
func (_Deposit *DepositCaller) TotalDeposited(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Deposit.contract.Call(opts, &out, "totalDeposited")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalDeposited is a free data retrieval call binding the contract method 0xff50abdc.
//
// Solidity: function totalDeposited() view returns(uint256)
func (_Deposit *DepositSession) TotalDeposited() (*big.Int, error) {
	return _Deposit.Contract.TotalDeposited(&_Deposit.CallOpts)
}

// TotalDeposited is a free data retrieval call binding the contract method 0xff50abdc.
//
// Solidity: function totalDeposited() view returns(uint256)
func (_Deposit *DepositCallerSession) TotalDeposited() (*big.Int, error) {
	return _Deposit.Contract.TotalDeposited(&_Deposit.CallOpts)
}

// Deposit is a paid mutator transaction binding the contract method 0xb6b55f25.
//
// Solidity: function deposit(uint256 amount) returns(bool)
func (_Deposit *DepositTransactor) Deposit(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Deposit.contract.Transact(opts, "deposit", amount)
}

// Deposit is a paid mutator transaction binding the contract method 0xb6b55f25.
//
// Solidity: function deposit(uint256 amount) returns(bool)
func (_Deposit *DepositSession) Deposit(amount *big.Int) (*types.Transaction, error) {
	return _Deposit.Contract.Deposit(&_Deposit.TransactOpts, amount)
}

// Deposit is a paid mutator transaction binding the contract method 0xb6b55f25.
//
// Solidity: function deposit(uint256 amount) returns(bool)
func (_Deposit *DepositTransactorSession) Deposit(amount *big.Int) (*types.Transaction, error) {
	return _Deposit.Contract.Deposit(&_Deposit.TransactOpts, amount)
}

// DepositFor is a paid mutator transaction binding the contract method 0x2f4f21e2.
//
// Solidity: function depositFor(address who, uint256 amount) returns(bool)
func (_Deposit *DepositTransactor) DepositFor(opts *bind.TransactOpts, who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Deposit.contract.Transact(opts, "depositFor", who, amount)
}

// DepositFor is a paid mutator transaction binding the contract method 0x2f4f21e2.
//
// Solidity: function depositFor(address who, uint256 amount) returns(bool)
func (_Deposit *DepositSession) DepositFor(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Deposit.Contract.DepositFor(&_Deposit.TransactOpts, who, amount)
}

// DepositFor is a paid mutator transaction binding the contract method 0x2f4f21e2.
//
// Solidity: function depositFor(address who, uint256 amount) returns(bool)
func (_Deposit *DepositTransactorSession) DepositFor(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Deposit.Contract.DepositFor(&_Deposit.TransactOpts, who, amount)
}

// DirectDeposit is a paid mutator transaction binding the contract method 0xec68426f.
//
// Solidity: function directDeposit(uint256 _depositID, address who, uint256 amount) returns(bool)
func (_Deposit *DepositTransactor) DirectDeposit(opts *bind.TransactOpts, _depositID *big.Int, who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Deposit.contract.Transact(opts, "directDeposit", _depositID, who, amount)
}

// DirectDeposit is a paid mutator transaction binding the contract method 0xec68426f.
//
// Solidity: function directDeposit(uint256 _depositID, address who, uint256 amount) returns(bool)
func (_Deposit *DepositSession) DirectDeposit(_depositID *big.Int, who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Deposit.Contract.DirectDeposit(&_Deposit.TransactOpts, _depositID, who, amount)
}

// DirectDeposit is a paid mutator transaction binding the contract method 0xec68426f.
//
// Solidity: function directDeposit(uint256 _depositID, address who, uint256 amount) returns(bool)
func (_Deposit *DepositTransactorSession) DirectDeposit(_depositID *big.Int, who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Deposit.Contract.DirectDeposit(&_Deposit.TransactOpts, _depositID, who, amount)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_Deposit *DepositTransactor) GrantOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _Deposit.contract.Transact(opts, "grantOperator", _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_Deposit *DepositSession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _Deposit.Contract.GrantOperator(&_Deposit.TransactOpts, _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_Deposit *DepositTransactorSession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _Deposit.Contract.GrantOperator(&_Deposit.TransactOpts, _operator)
}

// ReloadRegistry is a paid mutator transaction binding the contract method 0x1476601d.
//
// Solidity: function reloadRegistry() returns()
func (_Deposit *DepositTransactor) ReloadRegistry(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Deposit.contract.Transact(opts, "reloadRegistry")
}

// ReloadRegistry is a paid mutator transaction binding the contract method 0x1476601d.
//
// Solidity: function reloadRegistry() returns()
func (_Deposit *DepositSession) ReloadRegistry() (*types.Transaction, error) {
	return _Deposit.Contract.ReloadRegistry(&_Deposit.TransactOpts)
}

// ReloadRegistry is a paid mutator transaction binding the contract method 0x1476601d.
//
// Solidity: function reloadRegistry() returns()
func (_Deposit *DepositTransactorSession) ReloadRegistry() (*types.Transaction, error) {
	return _Deposit.Contract.ReloadRegistry(&_Deposit.TransactOpts)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_Deposit *DepositTransactor) RevokeOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _Deposit.contract.Transact(opts, "revokeOperator", _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_Deposit *DepositSession) RevokeOperator(_operator common.Address) (*types.Transaction, error) {
	return _Deposit.Contract.RevokeOperator(&_Deposit.TransactOpts, _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_Deposit *DepositTransactorSession) RevokeOperator(_operator common.Address) (*types.Transaction, error) {
	return _Deposit.Contract.RevokeOperator(&_Deposit.TransactOpts, _operator)
}

// SetAuthority is a paid mutator transaction binding the contract method 0x7a9e5e4b.
//
// Solidity: function setAuthority(address authority_) returns()
func (_Deposit *DepositTransactor) SetAuthority(opts *bind.TransactOpts, authority_ common.Address) (*types.Transaction, error) {
	return _Deposit.contract.Transact(opts, "setAuthority", authority_)
}

// SetAuthority is a paid mutator transaction binding the contract method 0x7a9e5e4b.
//
// Solidity: function setAuthority(address authority_) returns()
func (_Deposit *DepositSession) SetAuthority(authority_ common.Address) (*types.Transaction, error) {
	return _Deposit.Contract.SetAuthority(&_Deposit.TransactOpts, authority_)
}

// SetAuthority is a paid mutator transaction binding the contract method 0x7a9e5e4b.
//
// Solidity: function setAuthority(address authority_) returns()
func (_Deposit *DepositTransactorSession) SetAuthority(authority_ common.Address) (*types.Transaction, error) {
	return _Deposit.Contract.SetAuthority(&_Deposit.TransactOpts, authority_)
}

// SetDepositID is a paid mutator transaction binding the contract method 0xda7f7eb7.
//
// Solidity: function setDepositID(uint256 _depositID) returns()
func (_Deposit *DepositTransactor) SetDepositID(opts *bind.TransactOpts, _depositID *big.Int) (*types.Transaction, error) {
	return _Deposit.contract.Transact(opts, "setDepositID", _depositID)
}

// SetDepositID is a paid mutator transaction binding the contract method 0xda7f7eb7.
//
// Solidity: function setDepositID(uint256 _depositID) returns()
func (_Deposit *DepositSession) SetDepositID(_depositID *big.Int) (*types.Transaction, error) {
	return _Deposit.Contract.SetDepositID(&_Deposit.TransactOpts, _depositID)
}

// SetDepositID is a paid mutator transaction binding the contract method 0xda7f7eb7.
//
// Solidity: function setDepositID(uint256 _depositID) returns()
func (_Deposit *DepositTransactorSession) SetDepositID(_depositID *big.Int) (*types.Transaction, error) {
	return _Deposit.Contract.SetDepositID(&_Deposit.TransactOpts, _depositID)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address owner_) returns()
func (_Deposit *DepositTransactor) SetOwner(opts *bind.TransactOpts, owner_ common.Address) (*types.Transaction, error) {
	return _Deposit.contract.Transact(opts, "setOwner", owner_)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address owner_) returns()
func (_Deposit *DepositSession) SetOwner(owner_ common.Address) (*types.Transaction, error) {
	return _Deposit.Contract.SetOwner(&_Deposit.TransactOpts, owner_)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address owner_) returns()
func (_Deposit *DepositTransactorSession) SetOwner(owner_ common.Address) (*types.Transaction, error) {
	return _Deposit.Contract.SetOwner(&_Deposit.TransactOpts, owner_)
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_Deposit *DepositTransactor) Start(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Deposit.contract.Transact(opts, "start")
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_Deposit *DepositSession) Start() (*types.Transaction, error) {
	return _Deposit.Contract.Start(&_Deposit.TransactOpts)
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_Deposit *DepositTransactorSession) Start() (*types.Transaction, error) {
	return _Deposit.Contract.Start(&_Deposit.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_Deposit *DepositTransactor) Stop(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Deposit.contract.Transact(opts, "stop")
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_Deposit *DepositSession) Stop() (*types.Transaction, error) {
	return _Deposit.Contract.Stop(&_Deposit.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_Deposit *DepositTransactorSession) Stop() (*types.Transaction, error) {
	return _Deposit.Contract.Stop(&_Deposit.TransactOpts)
}

// DepositDepositReceivedIterator is returned from FilterDepositReceived and is used to iterate over the raw logs and unpacked data for DepositReceived events raised by the Deposit contract.
type DepositDepositReceivedIterator struct {
	Event *DepositDepositReceived // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DepositDepositReceivedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DepositDepositReceived)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DepositDepositReceived)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DepositDepositReceivedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DepositDepositReceivedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DepositDepositReceived represents a DepositReceived event raised by the Deposit contract.
type DepositDepositReceived struct {
	DepositID *big.Int
	Depositor common.Address
	Amount    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterDepositReceived is a free log retrieval operation binding the contract event 0x5b063c6569a91e8133fc6cd71d31a4ca5c65c652fd53ae093f46107754f08541.
//
// Solidity: event DepositReceived(uint256 depositID, address depositor, uint256 amount)
func (_Deposit *DepositFilterer) FilterDepositReceived(opts *bind.FilterOpts) (*DepositDepositReceivedIterator, error) {

	logs, sub, err := _Deposit.contract.FilterLogs(opts, "DepositReceived")
	if err != nil {
		return nil, err
	}
	return &DepositDepositReceivedIterator{contract: _Deposit.contract, event: "DepositReceived", logs: logs, sub: sub}, nil
}

// WatchDepositReceived is a free log subscription operation binding the contract event 0x5b063c6569a91e8133fc6cd71d31a4ca5c65c652fd53ae093f46107754f08541.
//
// Solidity: event DepositReceived(uint256 depositID, address depositor, uint256 amount)
func (_Deposit *DepositFilterer) WatchDepositReceived(opts *bind.WatchOpts, sink chan<- *DepositDepositReceived) (event.Subscription, error) {

	logs, sub, err := _Deposit.contract.WatchLogs(opts, "DepositReceived")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DepositDepositReceived)
				if err := _Deposit.contract.UnpackLog(event, "DepositReceived", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDepositReceived is a log parse operation binding the contract event 0x5b063c6569a91e8133fc6cd71d31a4ca5c65c652fd53ae093f46107754f08541.
//
// Solidity: event DepositReceived(uint256 depositID, address depositor, uint256 amount)
func (_Deposit *DepositFilterer) ParseDepositReceived(log types.Log) (*DepositDepositReceived, error) {
	event := new(DepositDepositReceived)
	if err := _Deposit.contract.UnpackLog(event, "DepositReceived", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DepositKeyShareSubmissionIterator is returned from FilterKeyShareSubmission and is used to iterate over the raw logs and unpacked data for KeyShareSubmission events raised by the Deposit contract.
type DepositKeyShareSubmissionIterator struct {
	Event *DepositKeyShareSubmission // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DepositKeyShareSubmissionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DepositKeyShareSubmission)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DepositKeyShareSubmission)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DepositKeyShareSubmissionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DepositKeyShareSubmissionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DepositKeyShareSubmission represents a KeyShareSubmission event raised by the Deposit contract.
type DepositKeyShareSubmission struct {
	Issuer                     common.Address
	KeyShareG1                 [2]*big.Int
	KeyShareG1CorrectnessProof [2]*big.Int
	KeyShareG2                 [4]*big.Int
	Raw                        types.Log // Blockchain specific contextual infos
}

// FilterKeyShareSubmission is a free log retrieval operation binding the contract event 0xb0ee36c3780de716eb6c83687f433ae2558a6923e090fd238b657fb6c896badc.
//
// Solidity: event KeyShareSubmission(address issuer, uint256[2] key_share_G1, uint256[2] key_share_G1_correctness_proof, uint256[4] key_share_G2)
func (_Deposit *DepositFilterer) FilterKeyShareSubmission(opts *bind.FilterOpts) (*DepositKeyShareSubmissionIterator, error) {

	logs, sub, err := _Deposit.contract.FilterLogs(opts, "KeyShareSubmission")
	if err != nil {
		return nil, err
	}
	return &DepositKeyShareSubmissionIterator{contract: _Deposit.contract, event: "KeyShareSubmission", logs: logs, sub: sub}, nil
}

// WatchKeyShareSubmission is a free log subscription operation binding the contract event 0xb0ee36c3780de716eb6c83687f433ae2558a6923e090fd238b657fb6c896badc.
//
// Solidity: event KeyShareSubmission(address issuer, uint256[2] key_share_G1, uint256[2] key_share_G1_correctness_proof, uint256[4] key_share_G2)
func (_Deposit *DepositFilterer) WatchKeyShareSubmission(opts *bind.WatchOpts, sink chan<- *DepositKeyShareSubmission) (event.Subscription, error) {

	logs, sub, err := _Deposit.contract.WatchLogs(opts, "KeyShareSubmission")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DepositKeyShareSubmission)
				if err := _Deposit.contract.UnpackLog(event, "KeyShareSubmission", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKeyShareSubmission is a log parse operation binding the contract event 0xb0ee36c3780de716eb6c83687f433ae2558a6923e090fd238b657fb6c896badc.
//
// Solidity: event KeyShareSubmission(address issuer, uint256[2] key_share_G1, uint256[2] key_share_G1_correctness_proof, uint256[4] key_share_G2)
func (_Deposit *DepositFilterer) ParseKeyShareSubmission(log types.Log) (*DepositKeyShareSubmission, error) {
	event := new(DepositKeyShareSubmission)
	if err := _Deposit.contract.UnpackLog(event, "KeyShareSubmission", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DepositLogSetAuthorityIterator is returned from FilterLogSetAuthority and is used to iterate over the raw logs and unpacked data for LogSetAuthority events raised by the Deposit contract.
type DepositLogSetAuthorityIterator struct {
	Event *DepositLogSetAuthority // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DepositLogSetAuthorityIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DepositLogSetAuthority)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DepositLogSetAuthority)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DepositLogSetAuthorityIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DepositLogSetAuthorityIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DepositLogSetAuthority represents a LogSetAuthority event raised by the Deposit contract.
type DepositLogSetAuthority struct {
	Authority common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterLogSetAuthority is a free log retrieval operation binding the contract event 0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4.
//
// Solidity: event LogSetAuthority(address indexed authority)
func (_Deposit *DepositFilterer) FilterLogSetAuthority(opts *bind.FilterOpts, authority []common.Address) (*DepositLogSetAuthorityIterator, error) {

	var authorityRule []interface{}
	for _, authorityItem := range authority {
		authorityRule = append(authorityRule, authorityItem)
	}

	logs, sub, err := _Deposit.contract.FilterLogs(opts, "LogSetAuthority", authorityRule)
	if err != nil {
		return nil, err
	}
	return &DepositLogSetAuthorityIterator{contract: _Deposit.contract, event: "LogSetAuthority", logs: logs, sub: sub}, nil
}

// WatchLogSetAuthority is a free log subscription operation binding the contract event 0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4.
//
// Solidity: event LogSetAuthority(address indexed authority)
func (_Deposit *DepositFilterer) WatchLogSetAuthority(opts *bind.WatchOpts, sink chan<- *DepositLogSetAuthority, authority []common.Address) (event.Subscription, error) {

	var authorityRule []interface{}
	for _, authorityItem := range authority {
		authorityRule = append(authorityRule, authorityItem)
	}

	logs, sub, err := _Deposit.contract.WatchLogs(opts, "LogSetAuthority", authorityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DepositLogSetAuthority)
				if err := _Deposit.contract.UnpackLog(event, "LogSetAuthority", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogSetAuthority is a log parse operation binding the contract event 0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4.
//
// Solidity: event LogSetAuthority(address indexed authority)
func (_Deposit *DepositFilterer) ParseLogSetAuthority(log types.Log) (*DepositLogSetAuthority, error) {
	event := new(DepositLogSetAuthority)
	if err := _Deposit.contract.UnpackLog(event, "LogSetAuthority", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DepositLogSetOwnerIterator is returned from FilterLogSetOwner and is used to iterate over the raw logs and unpacked data for LogSetOwner events raised by the Deposit contract.
type DepositLogSetOwnerIterator struct {
	Event *DepositLogSetOwner // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DepositLogSetOwnerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DepositLogSetOwner)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DepositLogSetOwner)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DepositLogSetOwnerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DepositLogSetOwnerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DepositLogSetOwner represents a LogSetOwner event raised by the Deposit contract.
type DepositLogSetOwner struct {
	Owner common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogSetOwner is a free log retrieval operation binding the contract event 0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94.
//
// Solidity: event LogSetOwner(address indexed owner)
func (_Deposit *DepositFilterer) FilterLogSetOwner(opts *bind.FilterOpts, owner []common.Address) (*DepositLogSetOwnerIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _Deposit.contract.FilterLogs(opts, "LogSetOwner", ownerRule)
	if err != nil {
		return nil, err
	}
	return &DepositLogSetOwnerIterator{contract: _Deposit.contract, event: "LogSetOwner", logs: logs, sub: sub}, nil
}

// WatchLogSetOwner is a free log subscription operation binding the contract event 0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94.
//
// Solidity: event LogSetOwner(address indexed owner)
func (_Deposit *DepositFilterer) WatchLogSetOwner(opts *bind.WatchOpts, sink chan<- *DepositLogSetOwner, owner []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _Deposit.contract.WatchLogs(opts, "LogSetOwner", ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DepositLogSetOwner)
				if err := _Deposit.contract.UnpackLog(event, "LogSetOwner", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogSetOwner is a log parse operation binding the contract event 0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94.
//
// Solidity: event LogSetOwner(address indexed owner)
func (_Deposit *DepositFilterer) ParseLogSetOwner(log types.Log) (*DepositLogSetOwner, error) {
	event := new(DepositLogSetOwner)
	if err := _Deposit.contract.UnpackLog(event, "LogSetOwner", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DepositRegistrationOpenIterator is returned from FilterRegistrationOpen and is used to iterate over the raw logs and unpacked data for RegistrationOpen events raised by the Deposit contract.
type DepositRegistrationOpenIterator struct {
	Event *DepositRegistrationOpen // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DepositRegistrationOpenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DepositRegistrationOpen)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DepositRegistrationOpen)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DepositRegistrationOpenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DepositRegistrationOpenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DepositRegistrationOpen represents a RegistrationOpen event raised by the Deposit contract.
type DepositRegistrationOpen struct {
	DkgStarts              *big.Int
	RegistrationEnds       *big.Int
	ShareDistributionEnds  *big.Int
	DisputeEnds            *big.Int
	KeyShareSubmissionEnds *big.Int
	MpkSubmissionEnds      *big.Int
	GpkjSubmissionEnds     *big.Int
	GpkjDisputeEnds        *big.Int
	DkgComplete            *big.Int
	Raw                    types.Log // Blockchain specific contextual infos
}

// FilterRegistrationOpen is a free log retrieval operation binding the contract event 0x9c6f8368fe7e77e8cb9438744581403bcb3f53298e517f04c1b8475487402e97.
//
// Solidity: event RegistrationOpen(uint256 dkgStarts, uint256 registrationEnds, uint256 shareDistributionEnds, uint256 disputeEnds, uint256 keyShareSubmissionEnds, uint256 mpkSubmissionEnds, uint256 gpkjSubmissionEnds, uint256 gpkjDisputeEnds, uint256 dkgComplete)
func (_Deposit *DepositFilterer) FilterRegistrationOpen(opts *bind.FilterOpts) (*DepositRegistrationOpenIterator, error) {

	logs, sub, err := _Deposit.contract.FilterLogs(opts, "RegistrationOpen")
	if err != nil {
		return nil, err
	}
	return &DepositRegistrationOpenIterator{contract: _Deposit.contract, event: "RegistrationOpen", logs: logs, sub: sub}, nil
}

// WatchRegistrationOpen is a free log subscription operation binding the contract event 0x9c6f8368fe7e77e8cb9438744581403bcb3f53298e517f04c1b8475487402e97.
//
// Solidity: event RegistrationOpen(uint256 dkgStarts, uint256 registrationEnds, uint256 shareDistributionEnds, uint256 disputeEnds, uint256 keyShareSubmissionEnds, uint256 mpkSubmissionEnds, uint256 gpkjSubmissionEnds, uint256 gpkjDisputeEnds, uint256 dkgComplete)
func (_Deposit *DepositFilterer) WatchRegistrationOpen(opts *bind.WatchOpts, sink chan<- *DepositRegistrationOpen) (event.Subscription, error) {

	logs, sub, err := _Deposit.contract.WatchLogs(opts, "RegistrationOpen")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DepositRegistrationOpen)
				if err := _Deposit.contract.UnpackLog(event, "RegistrationOpen", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegistrationOpen is a log parse operation binding the contract event 0x9c6f8368fe7e77e8cb9438744581403bcb3f53298e517f04c1b8475487402e97.
//
// Solidity: event RegistrationOpen(uint256 dkgStarts, uint256 registrationEnds, uint256 shareDistributionEnds, uint256 disputeEnds, uint256 keyShareSubmissionEnds, uint256 mpkSubmissionEnds, uint256 gpkjSubmissionEnds, uint256 gpkjDisputeEnds, uint256 dkgComplete)
func (_Deposit *DepositFilterer) ParseRegistrationOpen(log types.Log) (*DepositRegistrationOpen, error) {
	event := new(DepositRegistrationOpen)
	if err := _Deposit.contract.UnpackLog(event, "RegistrationOpen", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DepositShareDistributionIterator is returned from FilterShareDistribution and is used to iterate over the raw logs and unpacked data for ShareDistribution events raised by the Deposit contract.
type DepositShareDistributionIterator struct {
	Event *DepositShareDistribution // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DepositShareDistributionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DepositShareDistribution)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DepositShareDistribution)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DepositShareDistributionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DepositShareDistributionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DepositShareDistribution represents a ShareDistribution event raised by the Deposit contract.
type DepositShareDistribution struct {
	Issuer          common.Address
	Index           *big.Int
	EncryptedShares []*big.Int
	Commitments     [][2]*big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterShareDistribution is a free log retrieval operation binding the contract event 0xa84d294194d6169652a99150fd2ef10e18b0d2caa10beeea237bbddcc6e22b10.
//
// Solidity: event ShareDistribution(address issuer, uint256 index, uint256[] encrypted_shares, uint256[2][] commitments)
func (_Deposit *DepositFilterer) FilterShareDistribution(opts *bind.FilterOpts) (*DepositShareDistributionIterator, error) {

	logs, sub, err := _Deposit.contract.FilterLogs(opts, "ShareDistribution")
	if err != nil {
		return nil, err
	}
	return &DepositShareDistributionIterator{contract: _Deposit.contract, event: "ShareDistribution", logs: logs, sub: sub}, nil
}

// WatchShareDistribution is a free log subscription operation binding the contract event 0xa84d294194d6169652a99150fd2ef10e18b0d2caa10beeea237bbddcc6e22b10.
//
// Solidity: event ShareDistribution(address issuer, uint256 index, uint256[] encrypted_shares, uint256[2][] commitments)
func (_Deposit *DepositFilterer) WatchShareDistribution(opts *bind.WatchOpts, sink chan<- *DepositShareDistribution) (event.Subscription, error) {

	logs, sub, err := _Deposit.contract.WatchLogs(opts, "ShareDistribution")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DepositShareDistribution)
				if err := _Deposit.contract.UnpackLog(event, "ShareDistribution", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseShareDistribution is a log parse operation binding the contract event 0xa84d294194d6169652a99150fd2ef10e18b0d2caa10beeea237bbddcc6e22b10.
//
// Solidity: event ShareDistribution(address issuer, uint256 index, uint256[] encrypted_shares, uint256[2][] commitments)
func (_Deposit *DepositFilterer) ParseShareDistribution(log types.Log) (*DepositShareDistribution, error) {
	event := new(DepositShareDistribution)
	if err := _Deposit.contract.UnpackLog(event, "ShareDistribution", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DepositValidatorMemberIterator is returned from FilterValidatorMember and is used to iterate over the raw logs and unpacked data for ValidatorMember events raised by the Deposit contract.
type DepositValidatorMemberIterator struct {
	Event *DepositValidatorMember // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DepositValidatorMemberIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DepositValidatorMember)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DepositValidatorMember)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DepositValidatorMemberIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DepositValidatorMemberIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DepositValidatorMember represents a ValidatorMember event raised by the Deposit contract.
type DepositValidatorMember struct {
	Account common.Address
	Epoch   *big.Int
	Index   *big.Int
	Share0  *big.Int
	Share1  *big.Int
	Share2  *big.Int
	Share3  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterValidatorMember is a free log retrieval operation binding the contract event 0x113b129fac2dde341b9fbbec2bb79a95b9945b0e80fda711fc8ae5c7b0ea83b0.
//
// Solidity: event ValidatorMember(address account, uint256 epoch, uint256 index, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_Deposit *DepositFilterer) FilterValidatorMember(opts *bind.FilterOpts) (*DepositValidatorMemberIterator, error) {

	logs, sub, err := _Deposit.contract.FilterLogs(opts, "ValidatorMember")
	if err != nil {
		return nil, err
	}
	return &DepositValidatorMemberIterator{contract: _Deposit.contract, event: "ValidatorMember", logs: logs, sub: sub}, nil
}

// WatchValidatorMember is a free log subscription operation binding the contract event 0x113b129fac2dde341b9fbbec2bb79a95b9945b0e80fda711fc8ae5c7b0ea83b0.
//
// Solidity: event ValidatorMember(address account, uint256 epoch, uint256 index, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_Deposit *DepositFilterer) WatchValidatorMember(opts *bind.WatchOpts, sink chan<- *DepositValidatorMember) (event.Subscription, error) {

	logs, sub, err := _Deposit.contract.WatchLogs(opts, "ValidatorMember")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DepositValidatorMember)
				if err := _Deposit.contract.UnpackLog(event, "ValidatorMember", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorMember is a log parse operation binding the contract event 0x113b129fac2dde341b9fbbec2bb79a95b9945b0e80fda711fc8ae5c7b0ea83b0.
//
// Solidity: event ValidatorMember(address account, uint256 epoch, uint256 index, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_Deposit *DepositFilterer) ParseValidatorMember(log types.Log) (*DepositValidatorMember, error) {
	event := new(DepositValidatorMember)
	if err := _Deposit.contract.UnpackLog(event, "ValidatorMember", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DepositValidatorSetIterator is returned from FilterValidatorSet and is used to iterate over the raw logs and unpacked data for ValidatorSet events raised by the Deposit contract.
type DepositValidatorSetIterator struct {
	Event *DepositValidatorSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DepositValidatorSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DepositValidatorSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DepositValidatorSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DepositValidatorSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DepositValidatorSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DepositValidatorSet represents a ValidatorSet event raised by the Deposit contract.
type DepositValidatorSet struct {
	ValidatorCount uint8
	Epoch          *big.Int
	EthHeight      uint32
	MadHeight      uint32
	GroupKey0      *big.Int
	GroupKey1      *big.Int
	GroupKey2      *big.Int
	GroupKey3      *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterValidatorSet is a free log retrieval operation binding the contract event 0x1c85ff1efe0a905f8feca811e617102cb7ec896aded693eb96366c8ef22bb09f.
//
// Solidity: event ValidatorSet(uint8 validatorCount, uint256 epoch, uint32 ethHeight, uint32 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_Deposit *DepositFilterer) FilterValidatorSet(opts *bind.FilterOpts) (*DepositValidatorSetIterator, error) {

	logs, sub, err := _Deposit.contract.FilterLogs(opts, "ValidatorSet")
	if err != nil {
		return nil, err
	}
	return &DepositValidatorSetIterator{contract: _Deposit.contract, event: "ValidatorSet", logs: logs, sub: sub}, nil
}

// WatchValidatorSet is a free log subscription operation binding the contract event 0x1c85ff1efe0a905f8feca811e617102cb7ec896aded693eb96366c8ef22bb09f.
//
// Solidity: event ValidatorSet(uint8 validatorCount, uint256 epoch, uint32 ethHeight, uint32 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_Deposit *DepositFilterer) WatchValidatorSet(opts *bind.WatchOpts, sink chan<- *DepositValidatorSet) (event.Subscription, error) {

	logs, sub, err := _Deposit.contract.WatchLogs(opts, "ValidatorSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DepositValidatorSet)
				if err := _Deposit.contract.UnpackLog(event, "ValidatorSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorSet is a log parse operation binding the contract event 0x1c85ff1efe0a905f8feca811e617102cb7ec896aded693eb96366c8ef22bb09f.
//
// Solidity: event ValidatorSet(uint8 validatorCount, uint256 epoch, uint32 ethHeight, uint32 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_Deposit *DepositFilterer) ParseValidatorSet(log types.Log) (*DepositValidatorSet, error) {
	event := new(DepositValidatorSet)
	if err := _Deposit.contract.UnpackLog(event, "ValidatorSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DiamondMetaData contains all meta data concerning the Diamond contract.
var DiamondMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "",
}

// DiamondABI is the input ABI used to generate the binding from.
// Deprecated: Use DiamondMetaData.ABI instead.
var DiamondABI = DiamondMetaData.ABI

// DiamondBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use DiamondMetaData.Bin instead.
var DiamondBin = DiamondMetaData.Bin

// DeployDiamond deploys a new Ethereum contract, binding an instance of Diamond to it.
func DeployDiamond(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Diamond, error) {
	parsed, err := DiamondMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(DiamondBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Diamond{DiamondCaller: DiamondCaller{contract: contract}, DiamondTransactor: DiamondTransactor{contract: contract}, DiamondFilterer: DiamondFilterer{contract: contract}}, nil
}

// Diamond is an auto generated Go binding around an Ethereum contract.
type Diamond struct {
	DiamondCaller     // Read-only binding to the contract
	DiamondTransactor // Write-only binding to the contract
	DiamondFilterer   // Log filterer for contract events
}

// DiamondCaller is an auto generated read-only Go binding around an Ethereum contract.
type DiamondCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DiamondTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DiamondTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DiamondFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DiamondFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DiamondSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DiamondSession struct {
	Contract     *Diamond          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DiamondCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DiamondCallerSession struct {
	Contract *DiamondCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// DiamondTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DiamondTransactorSession struct {
	Contract     *DiamondTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// DiamondRaw is an auto generated low-level Go binding around an Ethereum contract.
type DiamondRaw struct {
	Contract *Diamond // Generic contract binding to access the raw methods on
}

// DiamondCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DiamondCallerRaw struct {
	Contract *DiamondCaller // Generic read-only contract binding to access the raw methods on
}

// DiamondTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DiamondTransactorRaw struct {
	Contract *DiamondTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDiamond creates a new instance of Diamond, bound to a specific deployed contract.
func NewDiamond(address common.Address, backend bind.ContractBackend) (*Diamond, error) {
	contract, err := bindDiamond(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Diamond{DiamondCaller: DiamondCaller{contract: contract}, DiamondTransactor: DiamondTransactor{contract: contract}, DiamondFilterer: DiamondFilterer{contract: contract}}, nil
}

// NewDiamondCaller creates a new read-only instance of Diamond, bound to a specific deployed contract.
func NewDiamondCaller(address common.Address, caller bind.ContractCaller) (*DiamondCaller, error) {
	contract, err := bindDiamond(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DiamondCaller{contract: contract}, nil
}

// NewDiamondTransactor creates a new write-only instance of Diamond, bound to a specific deployed contract.
func NewDiamondTransactor(address common.Address, transactor bind.ContractTransactor) (*DiamondTransactor, error) {
	contract, err := bindDiamond(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DiamondTransactor{contract: contract}, nil
}

// NewDiamondFilterer creates a new log filterer instance of Diamond, bound to a specific deployed contract.
func NewDiamondFilterer(address common.Address, filterer bind.ContractFilterer) (*DiamondFilterer, error) {
	contract, err := bindDiamond(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DiamondFilterer{contract: contract}, nil
}

// bindDiamond binds a generic wrapper to an already deployed contract.
func bindDiamond(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(DiamondABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Diamond *DiamondRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Diamond.Contract.DiamondCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Diamond *DiamondRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Diamond.Contract.DiamondTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Diamond *DiamondRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Diamond.Contract.DiamondTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Diamond *DiamondCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Diamond.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Diamond *DiamondTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Diamond.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Diamond *DiamondTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Diamond.Contract.contract.Transact(opts, method, params...)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_Diamond *DiamondTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _Diamond.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_Diamond *DiamondSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _Diamond.Contract.Fallback(&_Diamond.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_Diamond *DiamondTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _Diamond.Contract.Fallback(&_Diamond.TransactOpts, calldata)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Diamond *DiamondTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Diamond.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Diamond *DiamondSession) Receive() (*types.Transaction, error) {
	return _Diamond.Contract.Receive(&_Diamond.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Diamond *DiamondTransactorSession) Receive() (*types.Transaction, error) {
	return _Diamond.Contract.Receive(&_Diamond.TransactOpts)
}

// DiamondStorageLibraryMetaData contains all meta data concerning the DiamondStorageLibrary contract.
var DiamondStorageLibraryMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220fbdf52e7e93b99ec905365e21167809ab4c24a9140c701480309189d408534af64736f6c634300080b0033",
}

// DiamondStorageLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use DiamondStorageLibraryMetaData.ABI instead.
var DiamondStorageLibraryABI = DiamondStorageLibraryMetaData.ABI

// DiamondStorageLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use DiamondStorageLibraryMetaData.Bin instead.
var DiamondStorageLibraryBin = DiamondStorageLibraryMetaData.Bin

// DeployDiamondStorageLibrary deploys a new Ethereum contract, binding an instance of DiamondStorageLibrary to it.
func DeployDiamondStorageLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *DiamondStorageLibrary, error) {
	parsed, err := DiamondStorageLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(DiamondStorageLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &DiamondStorageLibrary{DiamondStorageLibraryCaller: DiamondStorageLibraryCaller{contract: contract}, DiamondStorageLibraryTransactor: DiamondStorageLibraryTransactor{contract: contract}, DiamondStorageLibraryFilterer: DiamondStorageLibraryFilterer{contract: contract}}, nil
}

// DiamondStorageLibrary is an auto generated Go binding around an Ethereum contract.
type DiamondStorageLibrary struct {
	DiamondStorageLibraryCaller     // Read-only binding to the contract
	DiamondStorageLibraryTransactor // Write-only binding to the contract
	DiamondStorageLibraryFilterer   // Log filterer for contract events
}

// DiamondStorageLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type DiamondStorageLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DiamondStorageLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DiamondStorageLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DiamondStorageLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DiamondStorageLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DiamondStorageLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DiamondStorageLibrarySession struct {
	Contract     *DiamondStorageLibrary // Generic contract binding to set the session for
	CallOpts     bind.CallOpts          // Call options to use throughout this session
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// DiamondStorageLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DiamondStorageLibraryCallerSession struct {
	Contract *DiamondStorageLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                // Call options to use throughout this session
}

// DiamondStorageLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DiamondStorageLibraryTransactorSession struct {
	Contract     *DiamondStorageLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                // Transaction auth options to use throughout this session
}

// DiamondStorageLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type DiamondStorageLibraryRaw struct {
	Contract *DiamondStorageLibrary // Generic contract binding to access the raw methods on
}

// DiamondStorageLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DiamondStorageLibraryCallerRaw struct {
	Contract *DiamondStorageLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// DiamondStorageLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DiamondStorageLibraryTransactorRaw struct {
	Contract *DiamondStorageLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDiamondStorageLibrary creates a new instance of DiamondStorageLibrary, bound to a specific deployed contract.
func NewDiamondStorageLibrary(address common.Address, backend bind.ContractBackend) (*DiamondStorageLibrary, error) {
	contract, err := bindDiamondStorageLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &DiamondStorageLibrary{DiamondStorageLibraryCaller: DiamondStorageLibraryCaller{contract: contract}, DiamondStorageLibraryTransactor: DiamondStorageLibraryTransactor{contract: contract}, DiamondStorageLibraryFilterer: DiamondStorageLibraryFilterer{contract: contract}}, nil
}

// NewDiamondStorageLibraryCaller creates a new read-only instance of DiamondStorageLibrary, bound to a specific deployed contract.
func NewDiamondStorageLibraryCaller(address common.Address, caller bind.ContractCaller) (*DiamondStorageLibraryCaller, error) {
	contract, err := bindDiamondStorageLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DiamondStorageLibraryCaller{contract: contract}, nil
}

// NewDiamondStorageLibraryTransactor creates a new write-only instance of DiamondStorageLibrary, bound to a specific deployed contract.
func NewDiamondStorageLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*DiamondStorageLibraryTransactor, error) {
	contract, err := bindDiamondStorageLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DiamondStorageLibraryTransactor{contract: contract}, nil
}

// NewDiamondStorageLibraryFilterer creates a new log filterer instance of DiamondStorageLibrary, bound to a specific deployed contract.
func NewDiamondStorageLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*DiamondStorageLibraryFilterer, error) {
	contract, err := bindDiamondStorageLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DiamondStorageLibraryFilterer{contract: contract}, nil
}

// bindDiamondStorageLibrary binds a generic wrapper to an already deployed contract.
func bindDiamondStorageLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(DiamondStorageLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DiamondStorageLibrary *DiamondStorageLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DiamondStorageLibrary.Contract.DiamondStorageLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DiamondStorageLibrary *DiamondStorageLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DiamondStorageLibrary.Contract.DiamondStorageLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DiamondStorageLibrary *DiamondStorageLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DiamondStorageLibrary.Contract.DiamondStorageLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DiamondStorageLibrary *DiamondStorageLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DiamondStorageLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DiamondStorageLibrary *DiamondStorageLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DiamondStorageLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DiamondStorageLibrary *DiamondStorageLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DiamondStorageLibrary.Contract.contract.Transact(opts, method, params...)
}

// DiamondUpdateFacetMetaData contains all meta data concerning the DiamondUpdateFacet contract.
var DiamondUpdateFacetMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"facet\",\"type\":\"address\"}],\"name\":\"addFacet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"grantOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"removeFacet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"facet\",\"type\":\"address\"}],\"name\":\"replaceFacet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governance_\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50600061002561003e60201b610d4d1760201c565b60010180546001600160a01b0319163317905550610062565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90565b610e70806100716000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063dc9780591161005b578063dc978059146100d0578063de380fbf146100e3578063e348da13146100f6578063fad8b32a1461010957600080fd5b8063208865cc1461008d57806360536172146100a2578063ab033ea9146100aa578063ca5a0fae146100bd575b600080fd5b6100a061009b366004610dca565b61011c565b005b6100a061032d565b6100a06100b8366004610dfd565b610452565b6100a06100cb366004610e1f565b6105a1565b6100a06100de366004610dfd565b61078e565b6100a06100f1366004610dca565b6108dd565b6100a0610104366004610dfd565b610a6e565b6100a0610117366004610dfd565b610bdf565b3360009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a602081905260409091205460ff166101e2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160448201527f6c6c6f776564000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b7fffffffff00000000000000000000000000000000000000000000000000000000831660009081527f2031468f0c30f7087de4da9398818763b546d7f89935fa65485c24ff1df26bf3602081905260409091205473ffffffffffffffffffffffffffffffffffffffff16156102b3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f73656c6563746f7220616c72656164792065786973747300000000000000000060448201526064016101d9565b7fffffffff0000000000000000000000000000000000000000000000000000000093909316600090815260209390935250604090912080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909216919091179055565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520c547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff163314610415576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f41636365737320436f6e74726f6c3a206f776e657273686970206e6f7420677260448201527f616e74656400000000000000000000000000000000000000000000000000000060648201526084016101d9565b6002810180547fffffffffffffffffffffffff00000000000000000000000000000000000000009081169091556001909101805490911633179055565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff16331461053a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e657220697320616c60448201527f6c6f77656400000000000000000000000000000000000000000000000000000060648201526084016101d9565b507f31434318735a8e6385da596be365952169e52986860b974818986b522d23520d80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b3360009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a602081905260409091205460ff16610662576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160448201527f6c6c6f776564000000000000000000000000000000000000000000000000000060648201526084016101d9565b7fffffffff00000000000000000000000000000000000000000000000000000000821660009081527f2031468f0c30f7087de4da9398818763b546d7f89935fa65485c24ff1df26bf3602081905260409091205473ffffffffffffffffffffffffffffffffffffffff16610732576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f73656c6563746f7220646f6573206e6f7420657869737400000000000000000060448201526064016101d9565b7fffffffff000000000000000000000000000000000000000000000000000000009092166000908152602092909252506040902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff163314610876576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e657220697320616c60448201527f6c6f77656400000000000000000000000000000000000000000000000000000060648201526084016101d9565b507f31434318735a8e6385da596be365952169e52986860b974818986b522d23520c80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b3360009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a602081905260409091205460ff1661099e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160448201527f6c6c6f776564000000000000000000000000000000000000000000000000000060648201526084016101d9565b7fffffffff00000000000000000000000000000000000000000000000000000000831660009081527f2031468f0c30f7087de4da9398818763b546d7f89935fa65485c24ff1df26bf3602081905260409091205473ffffffffffffffffffffffffffffffffffffffff166102b3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f73656c6563746f7220646f6573206e6f7420657869737400000000000000000060448201526064016101d9565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff16331480610ae457503360009081526020829052604090205460ff165b610b70576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e6572206f72206f7060448201527f657261746f7220616c6c6f77656400000000000000000000000000000000000060648201526084016101d9565b5073ffffffffffffffffffffffffffffffffffffffff1660009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff16331480610c5557503360009081526020829052604090205460ff165b610ce1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e6572206f72206f7060448201527f657261746f7220616c6c6f77656400000000000000000000000000000000000060648201526084016101d9565b5073ffffffffffffffffffffffffffffffffffffffff1660009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90565b80357fffffffff0000000000000000000000000000000000000000000000000000000081168114610da157600080fd5b919050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610da157600080fd5b60008060408385031215610ddd57600080fd5b610de683610d71565b9150610df460208401610da6565b90509250929050565b600060208284031215610e0f57600080fd5b610e1882610da6565b9392505050565b600060208284031215610e3157600080fd5b610e1882610d7156fea264697066735822122063ab818d1f372cc10d92575592aa760438aa381a0436992b2f44e78b788fd01b64736f6c634300080b0033",
}

// DiamondUpdateFacetABI is the input ABI used to generate the binding from.
// Deprecated: Use DiamondUpdateFacetMetaData.ABI instead.
var DiamondUpdateFacetABI = DiamondUpdateFacetMetaData.ABI

// DiamondUpdateFacetBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use DiamondUpdateFacetMetaData.Bin instead.
var DiamondUpdateFacetBin = DiamondUpdateFacetMetaData.Bin

// DeployDiamondUpdateFacet deploys a new Ethereum contract, binding an instance of DiamondUpdateFacet to it.
func DeployDiamondUpdateFacet(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *DiamondUpdateFacet, error) {
	parsed, err := DiamondUpdateFacetMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(DiamondUpdateFacetBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &DiamondUpdateFacet{DiamondUpdateFacetCaller: DiamondUpdateFacetCaller{contract: contract}, DiamondUpdateFacetTransactor: DiamondUpdateFacetTransactor{contract: contract}, DiamondUpdateFacetFilterer: DiamondUpdateFacetFilterer{contract: contract}}, nil
}

// DiamondUpdateFacet is an auto generated Go binding around an Ethereum contract.
type DiamondUpdateFacet struct {
	DiamondUpdateFacetCaller     // Read-only binding to the contract
	DiamondUpdateFacetTransactor // Write-only binding to the contract
	DiamondUpdateFacetFilterer   // Log filterer for contract events
}

// DiamondUpdateFacetCaller is an auto generated read-only Go binding around an Ethereum contract.
type DiamondUpdateFacetCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DiamondUpdateFacetTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DiamondUpdateFacetTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DiamondUpdateFacetFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DiamondUpdateFacetFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DiamondUpdateFacetSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DiamondUpdateFacetSession struct {
	Contract     *DiamondUpdateFacet // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// DiamondUpdateFacetCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DiamondUpdateFacetCallerSession struct {
	Contract *DiamondUpdateFacetCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// DiamondUpdateFacetTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DiamondUpdateFacetTransactorSession struct {
	Contract     *DiamondUpdateFacetTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// DiamondUpdateFacetRaw is an auto generated low-level Go binding around an Ethereum contract.
type DiamondUpdateFacetRaw struct {
	Contract *DiamondUpdateFacet // Generic contract binding to access the raw methods on
}

// DiamondUpdateFacetCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DiamondUpdateFacetCallerRaw struct {
	Contract *DiamondUpdateFacetCaller // Generic read-only contract binding to access the raw methods on
}

// DiamondUpdateFacetTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DiamondUpdateFacetTransactorRaw struct {
	Contract *DiamondUpdateFacetTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDiamondUpdateFacet creates a new instance of DiamondUpdateFacet, bound to a specific deployed contract.
func NewDiamondUpdateFacet(address common.Address, backend bind.ContractBackend) (*DiamondUpdateFacet, error) {
	contract, err := bindDiamondUpdateFacet(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &DiamondUpdateFacet{DiamondUpdateFacetCaller: DiamondUpdateFacetCaller{contract: contract}, DiamondUpdateFacetTransactor: DiamondUpdateFacetTransactor{contract: contract}, DiamondUpdateFacetFilterer: DiamondUpdateFacetFilterer{contract: contract}}, nil
}

// NewDiamondUpdateFacetCaller creates a new read-only instance of DiamondUpdateFacet, bound to a specific deployed contract.
func NewDiamondUpdateFacetCaller(address common.Address, caller bind.ContractCaller) (*DiamondUpdateFacetCaller, error) {
	contract, err := bindDiamondUpdateFacet(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DiamondUpdateFacetCaller{contract: contract}, nil
}

// NewDiamondUpdateFacetTransactor creates a new write-only instance of DiamondUpdateFacet, bound to a specific deployed contract.
func NewDiamondUpdateFacetTransactor(address common.Address, transactor bind.ContractTransactor) (*DiamondUpdateFacetTransactor, error) {
	contract, err := bindDiamondUpdateFacet(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DiamondUpdateFacetTransactor{contract: contract}, nil
}

// NewDiamondUpdateFacetFilterer creates a new log filterer instance of DiamondUpdateFacet, bound to a specific deployed contract.
func NewDiamondUpdateFacetFilterer(address common.Address, filterer bind.ContractFilterer) (*DiamondUpdateFacetFilterer, error) {
	contract, err := bindDiamondUpdateFacet(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DiamondUpdateFacetFilterer{contract: contract}, nil
}

// bindDiamondUpdateFacet binds a generic wrapper to an already deployed contract.
func bindDiamondUpdateFacet(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(DiamondUpdateFacetABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DiamondUpdateFacet *DiamondUpdateFacetRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DiamondUpdateFacet.Contract.DiamondUpdateFacetCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DiamondUpdateFacet *DiamondUpdateFacetRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DiamondUpdateFacet.Contract.DiamondUpdateFacetTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DiamondUpdateFacet *DiamondUpdateFacetRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DiamondUpdateFacet.Contract.DiamondUpdateFacetTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DiamondUpdateFacet *DiamondUpdateFacetCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DiamondUpdateFacet.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DiamondUpdateFacet *DiamondUpdateFacetTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DiamondUpdateFacet.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DiamondUpdateFacet *DiamondUpdateFacetTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DiamondUpdateFacet.Contract.contract.Transact(opts, method, params...)
}

// AddFacet is a paid mutator transaction binding the contract method 0x208865cc.
//
// Solidity: function addFacet(bytes4 selector, address facet) returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetTransactor) AddFacet(opts *bind.TransactOpts, selector [4]byte, facet common.Address) (*types.Transaction, error) {
	return _DiamondUpdateFacet.contract.Transact(opts, "addFacet", selector, facet)
}

// AddFacet is a paid mutator transaction binding the contract method 0x208865cc.
//
// Solidity: function addFacet(bytes4 selector, address facet) returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetSession) AddFacet(selector [4]byte, facet common.Address) (*types.Transaction, error) {
	return _DiamondUpdateFacet.Contract.AddFacet(&_DiamondUpdateFacet.TransactOpts, selector, facet)
}

// AddFacet is a paid mutator transaction binding the contract method 0x208865cc.
//
// Solidity: function addFacet(bytes4 selector, address facet) returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetTransactorSession) AddFacet(selector [4]byte, facet common.Address) (*types.Transaction, error) {
	return _DiamondUpdateFacet.Contract.AddFacet(&_DiamondUpdateFacet.TransactOpts, selector, facet)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetTransactor) GrantOperator(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _DiamondUpdateFacet.contract.Transact(opts, "grantOperator", who)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetSession) GrantOperator(who common.Address) (*types.Transaction, error) {
	return _DiamondUpdateFacet.Contract.GrantOperator(&_DiamondUpdateFacet.TransactOpts, who)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetTransactorSession) GrantOperator(who common.Address) (*types.Transaction, error) {
	return _DiamondUpdateFacet.Contract.GrantOperator(&_DiamondUpdateFacet.TransactOpts, who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetTransactor) GrantOwner(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _DiamondUpdateFacet.contract.Transact(opts, "grantOwner", who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetSession) GrantOwner(who common.Address) (*types.Transaction, error) {
	return _DiamondUpdateFacet.Contract.GrantOwner(&_DiamondUpdateFacet.TransactOpts, who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetTransactorSession) GrantOwner(who common.Address) (*types.Transaction, error) {
	return _DiamondUpdateFacet.Contract.GrantOwner(&_DiamondUpdateFacet.TransactOpts, who)
}

// RemoveFacet is a paid mutator transaction binding the contract method 0xca5a0fae.
//
// Solidity: function removeFacet(bytes4 selector) returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetTransactor) RemoveFacet(opts *bind.TransactOpts, selector [4]byte) (*types.Transaction, error) {
	return _DiamondUpdateFacet.contract.Transact(opts, "removeFacet", selector)
}

// RemoveFacet is a paid mutator transaction binding the contract method 0xca5a0fae.
//
// Solidity: function removeFacet(bytes4 selector) returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetSession) RemoveFacet(selector [4]byte) (*types.Transaction, error) {
	return _DiamondUpdateFacet.Contract.RemoveFacet(&_DiamondUpdateFacet.TransactOpts, selector)
}

// RemoveFacet is a paid mutator transaction binding the contract method 0xca5a0fae.
//
// Solidity: function removeFacet(bytes4 selector) returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetTransactorSession) RemoveFacet(selector [4]byte) (*types.Transaction, error) {
	return _DiamondUpdateFacet.Contract.RemoveFacet(&_DiamondUpdateFacet.TransactOpts, selector)
}

// ReplaceFacet is a paid mutator transaction binding the contract method 0xde380fbf.
//
// Solidity: function replaceFacet(bytes4 selector, address facet) returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetTransactor) ReplaceFacet(opts *bind.TransactOpts, selector [4]byte, facet common.Address) (*types.Transaction, error) {
	return _DiamondUpdateFacet.contract.Transact(opts, "replaceFacet", selector, facet)
}

// ReplaceFacet is a paid mutator transaction binding the contract method 0xde380fbf.
//
// Solidity: function replaceFacet(bytes4 selector, address facet) returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetSession) ReplaceFacet(selector [4]byte, facet common.Address) (*types.Transaction, error) {
	return _DiamondUpdateFacet.Contract.ReplaceFacet(&_DiamondUpdateFacet.TransactOpts, selector, facet)
}

// ReplaceFacet is a paid mutator transaction binding the contract method 0xde380fbf.
//
// Solidity: function replaceFacet(bytes4 selector, address facet) returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetTransactorSession) ReplaceFacet(selector [4]byte, facet common.Address) (*types.Transaction, error) {
	return _DiamondUpdateFacet.Contract.ReplaceFacet(&_DiamondUpdateFacet.TransactOpts, selector, facet)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetTransactor) RevokeOperator(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _DiamondUpdateFacet.contract.Transact(opts, "revokeOperator", who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetSession) RevokeOperator(who common.Address) (*types.Transaction, error) {
	return _DiamondUpdateFacet.Contract.RevokeOperator(&_DiamondUpdateFacet.TransactOpts, who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetTransactorSession) RevokeOperator(who common.Address) (*types.Transaction, error) {
	return _DiamondUpdateFacet.Contract.RevokeOperator(&_DiamondUpdateFacet.TransactOpts, who)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetTransactor) SetGovernance(opts *bind.TransactOpts, governance_ common.Address) (*types.Transaction, error) {
	return _DiamondUpdateFacet.contract.Transact(opts, "setGovernance", governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _DiamondUpdateFacet.Contract.SetGovernance(&_DiamondUpdateFacet.TransactOpts, governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetTransactorSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _DiamondUpdateFacet.Contract.SetGovernance(&_DiamondUpdateFacet.TransactOpts, governance_)
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetTransactor) TakeOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DiamondUpdateFacet.contract.Transact(opts, "takeOwnership")
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetSession) TakeOwnership() (*types.Transaction, error) {
	return _DiamondUpdateFacet.Contract.TakeOwnership(&_DiamondUpdateFacet.TransactOpts)
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetTransactorSession) TakeOwnership() (*types.Transaction, error) {
	return _DiamondUpdateFacet.Contract.TakeOwnership(&_DiamondUpdateFacet.TransactOpts)
}

// DirectGovernanceMetaData contains all meta data concerning the DirectGovernance contract.
var DirectGovernanceMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"ValueUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"name\":\"updateValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50600280546001600160a01b0319163390811790915561002f90610034565b610129565b6002546001600160a01b031633148061005c57503360009081526020819052604090205460ff165b6100c65760405162461bcd60e51b815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527037b934bd32b21037b832b930ba37b9399760791b606482015260840160405180910390fd5b6001600160a01b0381166000908152602081905260408120805460ff191660019081179091558054916100f883610100565b919050555050565b600060001982141561012257634e487b7160e01b600052601160045260246000fd5b5060010190565b61056c806101386000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80634651248614610046578063e348da131461005b578063fad8b32a1461006e575b600080fd5b610059610054366004610430565b610081565b005b61005961006936600461045c565b610185565b61005961007c36600461045c565b6102ab565b60025473ffffffffffffffffffffffffffffffffffffffff163314806100b657503360009081526020819052604090205460ff165b610147576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527f6f72697a6564206f70657261746f72732e00000000000000000000000000000060648201526084015b60405180910390fd5b6040513381528190839085907f36dcd0e03525dedd9d5c21a263ef5f35d030298b5c48f1a713006aefc064ad059060200160405180910390a4505050565b60025473ffffffffffffffffffffffffffffffffffffffff163314806101ba57503360009081526020819052604090205460ff165b610246576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527f6f72697a6564206f70657261746f72732e000000000000000000000000000000606482015260840161013e565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260208190526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660019081179091558054916102a3836104c8565b919050555050565b60025473ffffffffffffffffffffffffffffffffffffffff163314806102e057503360009081526020819052604090205460ff165b61036c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527f6f72697a6564206f70657261746f72732e000000000000000000000000000000606482015260840161013e565b60018054116103d7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f43616e27742072656d6f766520616c6c206f70657261746f7273000000000000604482015260640161013e565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260208190526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905560018054916102a383610501565b60008060006060848603121561044557600080fd5b505081359360208301359350604090920135919050565b60006020828403121561046e57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461049257600080fd5b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156104fa576104fa610499565b5060010190565b60008161051057610510610499565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019056fea26469706673582212200dc6bbe4b9d4615b8286e936c928a019e0d9c1a66d6577bfb99c8889c48b943f64736f6c634300080b0033",
}

// DirectGovernanceABI is the input ABI used to generate the binding from.
// Deprecated: Use DirectGovernanceMetaData.ABI instead.
var DirectGovernanceABI = DirectGovernanceMetaData.ABI

// DirectGovernanceBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use DirectGovernanceMetaData.Bin instead.
var DirectGovernanceBin = DirectGovernanceMetaData.Bin

// DeployDirectGovernance deploys a new Ethereum contract, binding an instance of DirectGovernance to it.
func DeployDirectGovernance(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *DirectGovernance, error) {
	parsed, err := DirectGovernanceMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(DirectGovernanceBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &DirectGovernance{DirectGovernanceCaller: DirectGovernanceCaller{contract: contract}, DirectGovernanceTransactor: DirectGovernanceTransactor{contract: contract}, DirectGovernanceFilterer: DirectGovernanceFilterer{contract: contract}}, nil
}

// DirectGovernance is an auto generated Go binding around an Ethereum contract.
type DirectGovernance struct {
	DirectGovernanceCaller     // Read-only binding to the contract
	DirectGovernanceTransactor // Write-only binding to the contract
	DirectGovernanceFilterer   // Log filterer for contract events
}

// DirectGovernanceCaller is an auto generated read-only Go binding around an Ethereum contract.
type DirectGovernanceCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DirectGovernanceTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DirectGovernanceTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DirectGovernanceFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DirectGovernanceFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DirectGovernanceSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DirectGovernanceSession struct {
	Contract     *DirectGovernance // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DirectGovernanceCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DirectGovernanceCallerSession struct {
	Contract *DirectGovernanceCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// DirectGovernanceTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DirectGovernanceTransactorSession struct {
	Contract     *DirectGovernanceTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// DirectGovernanceRaw is an auto generated low-level Go binding around an Ethereum contract.
type DirectGovernanceRaw struct {
	Contract *DirectGovernance // Generic contract binding to access the raw methods on
}

// DirectGovernanceCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DirectGovernanceCallerRaw struct {
	Contract *DirectGovernanceCaller // Generic read-only contract binding to access the raw methods on
}

// DirectGovernanceTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DirectGovernanceTransactorRaw struct {
	Contract *DirectGovernanceTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDirectGovernance creates a new instance of DirectGovernance, bound to a specific deployed contract.
func NewDirectGovernance(address common.Address, backend bind.ContractBackend) (*DirectGovernance, error) {
	contract, err := bindDirectGovernance(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &DirectGovernance{DirectGovernanceCaller: DirectGovernanceCaller{contract: contract}, DirectGovernanceTransactor: DirectGovernanceTransactor{contract: contract}, DirectGovernanceFilterer: DirectGovernanceFilterer{contract: contract}}, nil
}

// NewDirectGovernanceCaller creates a new read-only instance of DirectGovernance, bound to a specific deployed contract.
func NewDirectGovernanceCaller(address common.Address, caller bind.ContractCaller) (*DirectGovernanceCaller, error) {
	contract, err := bindDirectGovernance(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DirectGovernanceCaller{contract: contract}, nil
}

// NewDirectGovernanceTransactor creates a new write-only instance of DirectGovernance, bound to a specific deployed contract.
func NewDirectGovernanceTransactor(address common.Address, transactor bind.ContractTransactor) (*DirectGovernanceTransactor, error) {
	contract, err := bindDirectGovernance(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DirectGovernanceTransactor{contract: contract}, nil
}

// NewDirectGovernanceFilterer creates a new log filterer instance of DirectGovernance, bound to a specific deployed contract.
func NewDirectGovernanceFilterer(address common.Address, filterer bind.ContractFilterer) (*DirectGovernanceFilterer, error) {
	contract, err := bindDirectGovernance(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DirectGovernanceFilterer{contract: contract}, nil
}

// bindDirectGovernance binds a generic wrapper to an already deployed contract.
func bindDirectGovernance(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(DirectGovernanceABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DirectGovernance *DirectGovernanceRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DirectGovernance.Contract.DirectGovernanceCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DirectGovernance *DirectGovernanceRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DirectGovernance.Contract.DirectGovernanceTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DirectGovernance *DirectGovernanceRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DirectGovernance.Contract.DirectGovernanceTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DirectGovernance *DirectGovernanceCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DirectGovernance.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DirectGovernance *DirectGovernanceTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DirectGovernance.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DirectGovernance *DirectGovernanceTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DirectGovernance.Contract.contract.Transact(opts, method, params...)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_DirectGovernance *DirectGovernanceTransactor) GrantOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _DirectGovernance.contract.Transact(opts, "grantOperator", _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_DirectGovernance *DirectGovernanceSession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _DirectGovernance.Contract.GrantOperator(&_DirectGovernance.TransactOpts, _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_DirectGovernance *DirectGovernanceTransactorSession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _DirectGovernance.Contract.GrantOperator(&_DirectGovernance.TransactOpts, _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_DirectGovernance *DirectGovernanceTransactor) RevokeOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _DirectGovernance.contract.Transact(opts, "revokeOperator", _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_DirectGovernance *DirectGovernanceSession) RevokeOperator(_operator common.Address) (*types.Transaction, error) {
	return _DirectGovernance.Contract.RevokeOperator(&_DirectGovernance.TransactOpts, _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_DirectGovernance *DirectGovernanceTransactorSession) RevokeOperator(_operator common.Address) (*types.Transaction, error) {
	return _DirectGovernance.Contract.RevokeOperator(&_DirectGovernance.TransactOpts, _operator)
}

// UpdateValue is a paid mutator transaction binding the contract method 0x46512486.
//
// Solidity: function updateValue(uint256 epoch, uint256 key, bytes32 value) returns()
func (_DirectGovernance *DirectGovernanceTransactor) UpdateValue(opts *bind.TransactOpts, epoch *big.Int, key *big.Int, value [32]byte) (*types.Transaction, error) {
	return _DirectGovernance.contract.Transact(opts, "updateValue", epoch, key, value)
}

// UpdateValue is a paid mutator transaction binding the contract method 0x46512486.
//
// Solidity: function updateValue(uint256 epoch, uint256 key, bytes32 value) returns()
func (_DirectGovernance *DirectGovernanceSession) UpdateValue(epoch *big.Int, key *big.Int, value [32]byte) (*types.Transaction, error) {
	return _DirectGovernance.Contract.UpdateValue(&_DirectGovernance.TransactOpts, epoch, key, value)
}

// UpdateValue is a paid mutator transaction binding the contract method 0x46512486.
//
// Solidity: function updateValue(uint256 epoch, uint256 key, bytes32 value) returns()
func (_DirectGovernance *DirectGovernanceTransactorSession) UpdateValue(epoch *big.Int, key *big.Int, value [32]byte) (*types.Transaction, error) {
	return _DirectGovernance.Contract.UpdateValue(&_DirectGovernance.TransactOpts, epoch, key, value)
}

// DirectGovernanceValueUpdatedIterator is returned from FilterValueUpdated and is used to iterate over the raw logs and unpacked data for ValueUpdated events raised by the DirectGovernance contract.
type DirectGovernanceValueUpdatedIterator struct {
	Event *DirectGovernanceValueUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DirectGovernanceValueUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DirectGovernanceValueUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DirectGovernanceValueUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DirectGovernanceValueUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DirectGovernanceValueUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DirectGovernanceValueUpdated represents a ValueUpdated event raised by the DirectGovernance contract.
type DirectGovernanceValueUpdated struct {
	Epoch *big.Int
	Key   *big.Int
	Value [32]byte
	Who   common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterValueUpdated is a free log retrieval operation binding the contract event 0x36dcd0e03525dedd9d5c21a263ef5f35d030298b5c48f1a713006aefc064ad05.
//
// Solidity: event ValueUpdated(uint256 indexed epoch, uint256 indexed key, bytes32 indexed value, address who)
func (_DirectGovernance *DirectGovernanceFilterer) FilterValueUpdated(opts *bind.FilterOpts, epoch []*big.Int, key []*big.Int, value [][32]byte) (*DirectGovernanceValueUpdatedIterator, error) {

	var epochRule []interface{}
	for _, epochItem := range epoch {
		epochRule = append(epochRule, epochItem)
	}
	var keyRule []interface{}
	for _, keyItem := range key {
		keyRule = append(keyRule, keyItem)
	}
	var valueRule []interface{}
	for _, valueItem := range value {
		valueRule = append(valueRule, valueItem)
	}

	logs, sub, err := _DirectGovernance.contract.FilterLogs(opts, "ValueUpdated", epochRule, keyRule, valueRule)
	if err != nil {
		return nil, err
	}
	return &DirectGovernanceValueUpdatedIterator{contract: _DirectGovernance.contract, event: "ValueUpdated", logs: logs, sub: sub}, nil
}

// WatchValueUpdated is a free log subscription operation binding the contract event 0x36dcd0e03525dedd9d5c21a263ef5f35d030298b5c48f1a713006aefc064ad05.
//
// Solidity: event ValueUpdated(uint256 indexed epoch, uint256 indexed key, bytes32 indexed value, address who)
func (_DirectGovernance *DirectGovernanceFilterer) WatchValueUpdated(opts *bind.WatchOpts, sink chan<- *DirectGovernanceValueUpdated, epoch []*big.Int, key []*big.Int, value [][32]byte) (event.Subscription, error) {

	var epochRule []interface{}
	for _, epochItem := range epoch {
		epochRule = append(epochRule, epochItem)
	}
	var keyRule []interface{}
	for _, keyItem := range key {
		keyRule = append(keyRule, keyItem)
	}
	var valueRule []interface{}
	for _, valueItem := range value {
		valueRule = append(valueRule, valueItem)
	}

	logs, sub, err := _DirectGovernance.contract.WatchLogs(opts, "ValueUpdated", epochRule, keyRule, valueRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DirectGovernanceValueUpdated)
				if err := _DirectGovernance.contract.UnpackLog(event, "ValueUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValueUpdated is a log parse operation binding the contract event 0x36dcd0e03525dedd9d5c21a263ef5f35d030298b5c48f1a713006aefc064ad05.
//
// Solidity: event ValueUpdated(uint256 indexed epoch, uint256 indexed key, bytes32 indexed value, address who)
func (_DirectGovernance *DirectGovernanceFilterer) ParseValueUpdated(log types.Log) (*DirectGovernanceValueUpdated, error) {
	event := new(DirectGovernanceValueUpdated)
	if err := _DirectGovernance.contract.UnpackLog(event, "ValueUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC165MetaData contains all meta data concerning the ERC165 contract.
var ERC165MetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// ERC165ABI is the input ABI used to generate the binding from.
// Deprecated: Use ERC165MetaData.ABI instead.
var ERC165ABI = ERC165MetaData.ABI

// ERC165 is an auto generated Go binding around an Ethereum contract.
type ERC165 struct {
	ERC165Caller     // Read-only binding to the contract
	ERC165Transactor // Write-only binding to the contract
	ERC165Filterer   // Log filterer for contract events
}

// ERC165Caller is an auto generated read-only Go binding around an Ethereum contract.
type ERC165Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC165Transactor is an auto generated write-only Go binding around an Ethereum contract.
type ERC165Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC165Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ERC165Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC165Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ERC165Session struct {
	Contract     *ERC165           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ERC165CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ERC165CallerSession struct {
	Contract *ERC165Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// ERC165TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ERC165TransactorSession struct {
	Contract     *ERC165Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ERC165Raw is an auto generated low-level Go binding around an Ethereum contract.
type ERC165Raw struct {
	Contract *ERC165 // Generic contract binding to access the raw methods on
}

// ERC165CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ERC165CallerRaw struct {
	Contract *ERC165Caller // Generic read-only contract binding to access the raw methods on
}

// ERC165TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ERC165TransactorRaw struct {
	Contract *ERC165Transactor // Generic write-only contract binding to access the raw methods on
}

// NewERC165 creates a new instance of ERC165, bound to a specific deployed contract.
func NewERC165(address common.Address, backend bind.ContractBackend) (*ERC165, error) {
	contract, err := bindERC165(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ERC165{ERC165Caller: ERC165Caller{contract: contract}, ERC165Transactor: ERC165Transactor{contract: contract}, ERC165Filterer: ERC165Filterer{contract: contract}}, nil
}

// NewERC165Caller creates a new read-only instance of ERC165, bound to a specific deployed contract.
func NewERC165Caller(address common.Address, caller bind.ContractCaller) (*ERC165Caller, error) {
	contract, err := bindERC165(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ERC165Caller{contract: contract}, nil
}

// NewERC165Transactor creates a new write-only instance of ERC165, bound to a specific deployed contract.
func NewERC165Transactor(address common.Address, transactor bind.ContractTransactor) (*ERC165Transactor, error) {
	contract, err := bindERC165(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ERC165Transactor{contract: contract}, nil
}

// NewERC165Filterer creates a new log filterer instance of ERC165, bound to a specific deployed contract.
func NewERC165Filterer(address common.Address, filterer bind.ContractFilterer) (*ERC165Filterer, error) {
	contract, err := bindERC165(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ERC165Filterer{contract: contract}, nil
}

// bindERC165 binds a generic wrapper to an already deployed contract.
func bindERC165(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ERC165ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC165 *ERC165Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC165.Contract.ERC165Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC165 *ERC165Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC165.Contract.ERC165Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC165 *ERC165Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC165.Contract.ERC165Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC165 *ERC165CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC165.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC165 *ERC165TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC165.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC165 *ERC165TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC165.Contract.contract.Transact(opts, method, params...)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceID) view returns(bool)
func (_ERC165 *ERC165Caller) SupportsInterface(opts *bind.CallOpts, interfaceID [4]byte) (bool, error) {
	var out []interface{}
	err := _ERC165.contract.Call(opts, &out, "supportsInterface", interfaceID)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceID) view returns(bool)
func (_ERC165 *ERC165Session) SupportsInterface(interfaceID [4]byte) (bool, error) {
	return _ERC165.Contract.SupportsInterface(&_ERC165.CallOpts, interfaceID)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceID) view returns(bool)
func (_ERC165 *ERC165CallerSession) SupportsInterface(interfaceID [4]byte) (bool, error) {
	return _ERC165.Contract.SupportsInterface(&_ERC165.CallOpts, interfaceID)
}

// ERC165LibraryMetaData contains all meta data concerning the ERC165Library contract.
var ERC165LibraryMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208e66a5c5246e94a027f46d36de01ce079c7f53016f9f9cf6ccf4341327d6041364736f6c634300080b0033",
}

// ERC165LibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use ERC165LibraryMetaData.ABI instead.
var ERC165LibraryABI = ERC165LibraryMetaData.ABI

// ERC165LibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ERC165LibraryMetaData.Bin instead.
var ERC165LibraryBin = ERC165LibraryMetaData.Bin

// DeployERC165Library deploys a new Ethereum contract, binding an instance of ERC165Library to it.
func DeployERC165Library(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ERC165Library, error) {
	parsed, err := ERC165LibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ERC165LibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ERC165Library{ERC165LibraryCaller: ERC165LibraryCaller{contract: contract}, ERC165LibraryTransactor: ERC165LibraryTransactor{contract: contract}, ERC165LibraryFilterer: ERC165LibraryFilterer{contract: contract}}, nil
}

// ERC165Library is an auto generated Go binding around an Ethereum contract.
type ERC165Library struct {
	ERC165LibraryCaller     // Read-only binding to the contract
	ERC165LibraryTransactor // Write-only binding to the contract
	ERC165LibraryFilterer   // Log filterer for contract events
}

// ERC165LibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type ERC165LibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC165LibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ERC165LibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC165LibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ERC165LibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC165LibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ERC165LibrarySession struct {
	Contract     *ERC165Library    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ERC165LibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ERC165LibraryCallerSession struct {
	Contract *ERC165LibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// ERC165LibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ERC165LibraryTransactorSession struct {
	Contract     *ERC165LibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// ERC165LibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type ERC165LibraryRaw struct {
	Contract *ERC165Library // Generic contract binding to access the raw methods on
}

// ERC165LibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ERC165LibraryCallerRaw struct {
	Contract *ERC165LibraryCaller // Generic read-only contract binding to access the raw methods on
}

// ERC165LibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ERC165LibraryTransactorRaw struct {
	Contract *ERC165LibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewERC165Library creates a new instance of ERC165Library, bound to a specific deployed contract.
func NewERC165Library(address common.Address, backend bind.ContractBackend) (*ERC165Library, error) {
	contract, err := bindERC165Library(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ERC165Library{ERC165LibraryCaller: ERC165LibraryCaller{contract: contract}, ERC165LibraryTransactor: ERC165LibraryTransactor{contract: contract}, ERC165LibraryFilterer: ERC165LibraryFilterer{contract: contract}}, nil
}

// NewERC165LibraryCaller creates a new read-only instance of ERC165Library, bound to a specific deployed contract.
func NewERC165LibraryCaller(address common.Address, caller bind.ContractCaller) (*ERC165LibraryCaller, error) {
	contract, err := bindERC165Library(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ERC165LibraryCaller{contract: contract}, nil
}

// NewERC165LibraryTransactor creates a new write-only instance of ERC165Library, bound to a specific deployed contract.
func NewERC165LibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*ERC165LibraryTransactor, error) {
	contract, err := bindERC165Library(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ERC165LibraryTransactor{contract: contract}, nil
}

// NewERC165LibraryFilterer creates a new log filterer instance of ERC165Library, bound to a specific deployed contract.
func NewERC165LibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*ERC165LibraryFilterer, error) {
	contract, err := bindERC165Library(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ERC165LibraryFilterer{contract: contract}, nil
}

// bindERC165Library binds a generic wrapper to an already deployed contract.
func bindERC165Library(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ERC165LibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC165Library *ERC165LibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC165Library.Contract.ERC165LibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC165Library *ERC165LibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC165Library.Contract.ERC165LibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC165Library *ERC165LibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC165Library.Contract.ERC165LibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC165Library *ERC165LibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC165Library.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC165Library *ERC165LibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC165Library.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC165Library *ERC165LibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC165Library.Contract.contract.Transact(opts, method, params...)
}

// ETHDKGMetaData contains all meta data concerning the ETHDKG contract.
var ETHDKGMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"publicKey\",\"type\":\"uint256[2]\"}],\"name\":\"AddressRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"GPKJSubmissionComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"KeyShareSubmissionComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"keyShareG1\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"keyShareG1CorrectnessProof\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[4]\",\"name\":\"keyShareG2\",\"type\":\"uint256[4]\"}],\"name\":\"KeyShareSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[4]\",\"name\":\"mpk\",\"type\":\"uint256[4]\"}],\"name\":\"MPKSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"RegistrationComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numberValidators\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"phaseLength\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"confirmationLength\",\"type\":\"uint256\"}],\"name\":\"RegistrationOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"ShareDistributionComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"encryptedShares\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[2][]\",\"name\":\"commitments\",\"type\":\"uint256[2][]\"}],\"name\":\"SharesDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share3\",\"type\":\"uint256\"}],\"name\":\"ValidatorMemberAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validatorCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethHeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"madHeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey3\",\"type\":\"uint256\"}],\"name\":\"ValidatorSetCompleted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"dishonestAddresses\",\"type\":\"address[]\"}],\"name\":\"accuseParticipantDidNotDistributeShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"dishonestAddresses\",\"type\":\"address[]\"}],\"name\":\"accuseParticipantDidNotSubmitGPKJ\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"dishonestAddresses\",\"type\":\"address[]\"}],\"name\":\"accuseParticipantDidNotSubmitKeyShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dishonestAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"encryptedShares\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[2][]\",\"name\":\"commitments\",\"type\":\"uint256[2][]\"},{\"internalType\":\"uint256[2]\",\"name\":\"sharedKey\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"sharedKeyCorrectnessProof\",\"type\":\"uint256[2]\"}],\"name\":\"accuseParticipantDistributedBadShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"dishonestAddresses\",\"type\":\"address[]\"}],\"name\":\"accuseParticipantNotRegistered\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"encryptedSharesHash\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[2][][]\",\"name\":\"commitments\",\"type\":\"uint256[2][][]\"},{\"internalType\":\"address\",\"name\":\"dishonestAddress\",\"type\":\"address\"}],\"name\":\"accuseParticipantSubmittedBadGPKJ\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"complete\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"encryptedShares\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[2][]\",\"name\":\"commitments\",\"type\":\"uint256[2][]\"}],\"name\":\"distributeShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBadParticipants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConfirmationLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getETHDKGPhase\",\"outputs\":[{\"internalType\":\"enumPhase\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMasterPublicKey\",\"outputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"\",\"type\":\"uint256[4]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinValidators\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumParticipants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"getParticipantInternalState\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"publicKey\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"enumPhase\",\"name\":\"phase\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"distributedSharesHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[2]\",\"name\":\"commitmentsFirstCoefficient\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"keyShares\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[4]\",\"name\":\"gpkj\",\"type\":\"uint256[4]\"}],\"internalType\":\"structParticipant\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"participantAddresses\",\"type\":\"address[]\"}],\"name\":\"getParticipantsInternalState\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"publicKey\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"enumPhase\",\"name\":\"phase\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"distributedSharesHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[2]\",\"name\":\"commitmentsFirstCoefficient\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"keyShares\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[4]\",\"name\":\"gpkj\",\"type\":\"uint256[4]\"}],\"internalType\":\"structParticipant[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPhaseLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPhaseStartBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validatorPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"snapshots\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ethdkgAccusations\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ethdkgPhases\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeETHDKG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isETHDKGCompleted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isETHDKGHalted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isETHDKGRunning\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMasterPublicKeySet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"publicKey\",\"type\":\"uint256[2]\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"confirmationLength_\",\"type\":\"uint16\"}],\"name\":\"setConfirmationLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"madnetHeight\",\"type\":\"uint256\"}],\"name\":\"setCustomMadnetHeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"minValidators_\",\"type\":\"uint16\"}],\"name\":\"setMinNumberOfValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"phaseLength_\",\"type\":\"uint16\"}],\"name\":\"setPhaseLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"snapshots\",\"type\":\"address\"}],\"name\":\"setSnapshotsAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validatorPool\",\"type\":\"address\"}],\"name\":\"setValidatorPoolAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"gpkj\",\"type\":\"uint256[4]\"}],\"name\":\"submitGPKJ\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"keyShareG1\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"keyShareG1CorrectnessProof\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[4]\",\"name\":\"keyShareG2\",\"type\":\"uint256[4]\"}],\"name\":\"submitKeyShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"masterPublicKey_\",\"type\":\"uint256[4]\"}],\"name\":\"submitMasterPublicKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"tryGetParticipantIndex\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b50604051620037283803806200372883398101604081905262000034916200005a565b600680546001600160a01b0319166001600160a01b03929092169190911790556200008c565b6000602082840312156200006d57600080fd5b81516001600160a01b03811681146200008557600080fd5b9392505050565b61368c806200009c6000396000f3fe608060405234801561001057600080fd5b50600436106102925760003560e01c80638328cdf711610160578063e146372a116100d8578063f8c8765e1161008c578063fd478ca911610071578063fd478ca91461068b578063fe0fe422146106ae578063ff3e5e45146106c157600080fd5b8063f8c8765e146105a3578063fb89c8991461067857600080fd5b8063ecbadb36116100bd578063ecbadb3614610556578063edbe7bf71461057d578063f72c45b61461059057600080fd5b8063e146372a1461052e578063e83232241461054357600080fd5b8063bf7786b61161012f578063d087d28811610114578063d087d288146104f6578063d855280614610508578063dae681bc1461051b57600080fd5b8063bf7786b6146104b6578063c016baee146104d657600080fd5b80638328cdf7146104475780638a3c24cc1461045a5780638c848d321461046d578063a2bc9c781461049857600080fd5b8063522e11771161020e578063704b6c02116101c25780637df24ee9116101a75780637df24ee91461040e578063800012641461042157806380b97e011461043457600080fd5b8063704b6c02146103f3578063747b217c1461040657600080fd5b806362a6523e116101f357806362a6523e1461038e57806365e62b9b146103a15780636e9960c3146103cb57600080fd5b8063522e11771461037e57806357b51c9c1461038657600080fd5b80632958e81c1161026557806332d4d5701161024a57806332d4d5701461033e5780633442af5c1461036357806343ced5341461037657600080fd5b80632958e81c1461030f5780632b7c67241461033657600080fd5b8063043a6f121461029757806308efcf16146102ac578063101f49c1146102c9578063106da57d146102dc575b600080fd5b6102aa6102a5366004612aea565b6106d4565b005b6102b4610767565b60405190151581526020015b60405180910390f35b6102aa6102d7366004612b95565b610798565b600054790100000000000000000000000000000000000000000000000000900461ffff165b6040519081526020016102c0565b600054700100000000000000000000000000000000900460ff166040516102c09190612c1b565b6102b4610924565b6000547501000000000000000000000000000000000000000000900461ffff16610301565b6102aa610371366004612c74565b61092e565b6102b4610ab5565b6102aa610abf565b6102aa610c1a565b6102aa61039c366004612c90565b610ccb565b6103b46103af366004612cd7565b610e5c565b6040805192151583526020830191909152016102c0565b60075460405173ffffffffffffffffffffffffffffffffffffffff90911681526020016102c0565b6102aa610401366004612cd7565b611064565b6102b4611152565b6102aa61041c366004612aea565b61115c565b6102aa61042f366004612dd6565b6111eb565b6102aa610442366004612f1e565b61137f565b6102aa610455366004612f82565b61150d565b6102aa610468366004612f9b565b6115b9565b6000547b01000000000000000000000000000000000000000000000000000000900461ffff16610301565b60005468010000000000000000900467ffffffffffffffff16610301565b6104c96104c4366004612cd7565b61176d565b6040516102c0919061308b565b6104e96104e436600461309a565b6118f7565b6040516102c0919061310f565b60005467ffffffffffffffff16610301565b6102aa610516366004612cd7565b611b3c565b6102aa610529366004612aea565b611c2a565b610536611cb9565b6040516102c0919061315e565b6102aa610551366004612b95565b611cf4565b60005477010000000000000000000000000000000000000000000000900461ffff16610301565b6102aa61058b36600461316c565b611d83565b6102aa61059e366004612aea565b611f1a565b6102aa6105b1366004613204565b600080547fffffff000000000000000000000000ff00000000000000000000000000000000167b06002800040000000000000000000000000000000000000000000000179055600380547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff968716179091556002805482169486169490941790935560048054841692851692909217909155600580548316919093161790915560078054339216919091179055565b6102aa610686366004612f9b565b611fa9565b60005471010000000000000000000000000000000000900463ffffffff16610301565b6102aa6106bc366004612cd7565b6120a0565b6102aa6106cf366004612f9b565b61218e565b610763816040516024016106e8919061329e565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f043a6f1200000000000000000000000000000000000000000000000000000000179052612344565b5050565b60085460009015158061077b575060095415155b806107875750600a5415155b806107935750600b5415155b905090565b6003546040517ffacd743b00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063facd743b90602401602060405180830381865afa158015610806573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082a91906132e0565b610895576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f455448444b473a204f6e6c792076616c696461746f727320616c6c6f7765642160448201526064015b60405180910390fd5b610763816040516024016108a9919061315e565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f101f49c1000000000000000000000000000000000000000000000000000000001790526123d2565b6000610793612402565b6003546040517ffacd743b00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063facd743b90602401602060405180830381865afa15801561099c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c091906132e0565b610a26576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f455448444b473a204f6e6c792076616c696461746f727320616c6c6f77656421604482015260640161088c565b61076381604051602401610a3a9190613302565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f3442af5c000000000000000000000000000000000000000000000000000000001790526123d2565b6000610793612437565b6003546040517ffacd743b00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063facd743b90602401602060405180830381865afa158015610b2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5191906132e0565b610bb7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f455448444b473a204f6e6c792076616c696461746f727320616c6c6f77656421604482015260640161088c565b6040805160048152602481019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f522e117700000000000000000000000000000000000000000000000000000000179052610c17906123d2565b50565b60035473ffffffffffffffffffffffffffffffffffffffff163314610cc1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f455448444b473a204f6e6c792076616c696461746f72506f6f6c20636f6e747260448201527f61637420616c6c6f776564210000000000000000000000000000000000000000606482015260840161088c565b610cc961259a565b565b6003546040517ffacd743b00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063facd743b90602401602060405180830381865afa158015610d39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5d91906132e0565b610dc3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f455448444b473a204f6e6c792076616c696461746f727320616c6c6f77656421604482015260640161088c565b610e56838383604051602401610ddb93929190613310565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f62a6523e000000000000000000000000000000000000000000000000000000001790526123d2565b50505050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600e602052604080822081516101408101909252829182918161010081018260028282826020028201915b815481526020019060010190808311610ea3575050509183525050600282015467ffffffffffffffff8082166020840152680100000000000000008204166040830152606090910190700100000000000000000000000000000000900460ff166007811115610f1457610f14612bb1565b6007811115610f2557610f25612bb1565b8152600382015460208201526040805180820182529101906004830160028282826020028201915b815481526020019060010190808311610f4d575050509183525050604080518082019182905260209092019190600684019060029082845b815481526020019060010190808311610f8557505050918352505060408051608081019182905260209092019190600884019060049082845b815481526020019060010190808311610fbe57505050505081525050905060008054906101000a900467ffffffffffffffff1667ffffffffffffffff16816020015167ffffffffffffffff1614156110585750505073ffffffffffffffffffffffffffffffffffffffff166000908152600e60205260409020600201546001916801000000000000000090910467ffffffffffffffff1690565b50600093849350915050565b60075473ffffffffffffffffffffffffffffffffffffffff16331461110b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f455448444b473a2072657175697265732061646d696e2070726976696c65676560448201527f7300000000000000000000000000000000000000000000000000000000000000606482015260840161088c565b600780547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6000610793612880565b61076381604051602401611170919061329e565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f7df24ee900000000000000000000000000000000000000000000000000000000179052612344565b6003546040517ffacd743b00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063facd743b90602401602060405180830381865afa158015611259573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061127d91906132e0565b6112e3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f455448444b473a204f6e6c792076616c696461746f727320616c6c6f77656421604482015260640161088c565b611378848484846040516024016112fd9493929190613373565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f8000126400000000000000000000000000000000000000000000000000000000179052612344565b5050505050565b6003546040517ffacd743b00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063facd743b90602401602060405180830381865afa1580156113ed573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061141191906132e0565b611477576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f455448444b473a204f6e6c792076616c696461746f727320616c6c6f77656421604482015260640161088c565b611508828260405160240161148d92919061348f565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f80b97e01000000000000000000000000000000000000000000000000000000001790526123d2565b505050565b60035473ffffffffffffffffffffffffffffffffffffffff1633146115b4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f455448444b473a204f6e6c792076616c696461746f72506f6f6c20636f6e747260448201527f61637420616c6c6f776564210000000000000000000000000000000000000000606482015260840161088c565b600155565b60075473ffffffffffffffffffffffffffffffffffffffff163314611660576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f455448444b473a2072657175697265732061646d696e2070726976696c65676560448201527f7300000000000000000000000000000000000000000000000000000000000000606482015260840161088c565b611668612880565b1561171b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604260248201527f455448444b473a2054686973207661726961626c652063616e6e6f742062652060448201527f73657420696620616e20455448444b4720726f756e642069732072756e6e696e60648201527f6721000000000000000000000000000000000000000000000000000000000000608482015260a40161088c565b6000805461ffff909216790100000000000000000000000000000000000000000000000000027fffffffffff0000ffffffffffffffffffffffffffffffffffffffffffffffffff909216919091179055565b6117756128c2565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600e602052604090819020815161014081019092528161010081018260028282826020028201915b8154815260200190600101908083116117b9575050509183525050600282015467ffffffffffffffff8082166020840152680100000000000000008204166040830152606090910190700100000000000000000000000000000000900460ff16600781111561182a5761182a612bb1565b600781111561183b5761183b612bb1565b8152600382015460208201526040805180820182529101906004830160028282826020028201915b815481526020019060010190808311611863575050509183525050604080518082019182905260209092019190600684019060029082845b81548152602001906001019080831161189b57505050918352505060408051608081019182905260209092019190600884019060049082845b8154815260200190600101908083116118d4575050505050815250509050919050565b606060008267ffffffffffffffff811115611914576119146129ad565b60405190808252806020026020018201604052801561194d57816020015b61193a6128c2565b8152602001906001900390816119325790505b50905060005b83811015611b3257600e6000868684818110611971576119716132b1565b90506020020160208101906119869190612cd7565b73ffffffffffffffffffffffffffffffffffffffff16815260208101919091526040908101600020815161014081019092528161010081018260028282826020028201915b8154815260200190600101908083116119cb575050509183525050600282015467ffffffffffffffff8082166020840152680100000000000000008204166040830152606090910190700100000000000000000000000000000000900460ff166007811115611a3c57611a3c612bb1565b6007811115611a4d57611a4d612bb1565b8152600382015460208201526040805180820182529101906004830160028282826020028201915b815481526020019060010190808311611a75575050509183525050604080518082019182905260209092019190600684019060029082845b815481526020019060010190808311611aad57505050918352505060408051608081019182905260209092019190600884019060049082845b815481526020019060010190808311611ae657505050505081525050828281518110611b1457611b146132b1565b60200260200101819052508080611b2a906134e3565b915050611953565b5090505b92915050565b60075473ffffffffffffffffffffffffffffffffffffffff163314611be3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f455448444b473a2072657175697265732061646d696e2070726976696c65676560448201527f7300000000000000000000000000000000000000000000000000000000000000606482015260840161088c565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b61076381604051602401611c3e919061329e565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fdae681bc00000000000000000000000000000000000000000000000000000000179052612344565b611cc161291e565b6040805160808101918290529060089060049082845b815481526020019060010190808311611cd7575050505050905090565b61076381604051602401611d08919061315e565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fe8323224000000000000000000000000000000000000000000000000000000001790526123d2565b6003546040517ffacd743b00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063facd743b90602401602060405180830381865afa158015611df1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e1591906132e0565b611e7b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f455448444b473a204f6e6c792076616c696461746f727320616c6c6f77656421604482015260640161088c565b611f128585858585604051602401611e9795949392919061351c565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fedbe7bf700000000000000000000000000000000000000000000000000000000179052612344565b505050505050565b61076381604051602401611f2e919061329e565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167ff72c45b600000000000000000000000000000000000000000000000000000000179052612344565b60075473ffffffffffffffffffffffffffffffffffffffff163314612050576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f455448444b473a2072657175697265732061646d696e2070726976696c65676560448201527f7300000000000000000000000000000000000000000000000000000000000000606482015260840161088c565b6000805461ffff90921677010000000000000000000000000000000000000000000000027fffffffffffffff0000ffffffffffffffffffffffffffffffffffffffffffffff909216919091179055565b60075473ffffffffffffffffffffffffffffffffffffffff163314612147576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f455448444b473a2072657175697265732061646d696e2070726976696c65676560448201527f7300000000000000000000000000000000000000000000000000000000000000606482015260840161088c565b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60075473ffffffffffffffffffffffffffffffffffffffff163314612235576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f455448444b473a2072657175697265732061646d696e2070726976696c65676560448201527f7300000000000000000000000000000000000000000000000000000000000000606482015260840161088c565b61223d612880565b156122f0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604260248201527f455448444b473a2054686973207661726961626c652063616e6e6f742062652060448201527f73657420696620616e20455448444b4720726f756e642069732072756e6e696e60648201527f6721000000000000000000000000000000000000000000000000000000000000608482015260a40161088c565b6000805461ffff9092167b01000000000000000000000000000000000000000000000000000000027fffffff0000ffffffffffffffffffffffffffffffffffffffffffffffffffffff909216919091179055565b600454604051606091600091829173ffffffffffffffffffffffffffffffffffffffff1690612374908690613584565b600060405180830381855af49150503d80600081146123af576040519150601f19603f3d011682016040523d82523d6000602084013e6123b4565b606091505b5091509150816123cb576040513d806000833e8082fd5b9392505050565b600554604051606091600091829173ffffffffffffffffffffffffffffffffffffffff1690612374908690613584565b60006007600054700100000000000000000000000000000000900460ff16600781111561243157612431612bb1565b14905090565b6000806002600054700100000000000000000000000000000000900460ff16600781111561246757612467612bb1565b148061249d57506006600054700100000000000000000000000000000000900460ff16600781111561249b5761249b612bb1565b145b80156124f657506000546124e890790100000000000000000000000000000000000000000000000000810461ffff169068010000000000000000900467ffffffffffffffff166135bf565b67ffffffffffffffff164310155b801561252057506000547501000000000000000000000000000000000000000000900461ffff1615155b600080549192509061255490790100000000000000000000000000000000000000000000000000900461ffff1660026135eb565b60005461257b9161ffff169068010000000000000000900467ffffffffffffffff166135bf565b67ffffffffffffffff16431015905080806125935750815b9250505090565b600354604080517f27498240000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163274982409160048083019260209291908290030181865afa15801561260a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061262e9190613615565b60005490915077010000000000000000000000000000000000000000000000900461ffff168110156126e2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603460248201527f455448444b473a204d696e696d756d206e756d626572206f662076616c69646160448201527f746f7273207374616b6564206e6f74206d657421000000000000000000000000606482015260840161088c565b6000805467ffffffffffffffff43811668010000000000000000027fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff831681178455811691161790806127348361362e565b825467ffffffffffffffff9182166101009390930a928302919092021990911617905550600080547fffffffffffffffffff000000000000ffffffffffffffffffffffffffffffffff1681556040805180820190915281815260208101919091526127a390600c90600261293c565b50600080547fffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffff811680835560088390556009839055600a839055600b92909255604080514381526020810185905267ffffffffffffffff9092169082015261ffff7901000000000000000000000000000000000000000000000000008304811660608301527b0100000000000000000000000000000000000000000000000000000090920490911660808201527fbda431b9b63510f1398bf33d700e013315bcba905507078a1780f13ea5b354b99060a00160405180910390a150565b6000805468010000000000000000900467ffffffffffffffff166128a45750600090565b6128ac612402565b15801561079357506128bc612437565b15905090565b6040518061010001604052806128d661297a565b81526000602082018190526040820181905260608201819052608082015260a0016128ff61297a565b815260200161290c61297a565b815260200161291961291e565b905290565b60405180608001604052806004906020820280368337509192915050565b826002810192821561296a579160200282015b8281111561296a57825182559160200191906001019061294f565b50612976929150612998565b5090565b60405180604001604052806002906020820280368337509192915050565b5b808211156129765760008155600101612999565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715612a2357612a236129ad565b604052919050565b600067ffffffffffffffff821115612a4557612a456129ad565b5060051b60200190565b803573ffffffffffffffffffffffffffffffffffffffff81168114612a7357600080fd5b919050565b600082601f830112612a8957600080fd5b81356020612a9e612a9983612a2b565b6129dc565b82815260059290921b84018101918181019086841115612abd57600080fd5b8286015b84811015612adf57612ad281612a4f565b8352918301918301612ac1565b509695505050505050565b600060208284031215612afc57600080fd5b813567ffffffffffffffff811115612b1357600080fd5b612b1f84828501612a78565b949350505050565b600082601f830112612b3857600080fd5b6040516080810181811067ffffffffffffffff82111715612b5b57612b5b6129ad565b604052806080840185811115612b7057600080fd5b845b81811015612b8a578035835260209283019201612b72565b509195945050505050565b600060808284031215612ba757600080fd5b6123cb8383612b27565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60088110612c17577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9052565b60208101611b368284612be0565b600082601f830112612c3a57600080fd5b6040516040810181811067ffffffffffffffff82111715612c5d57612c5d6129ad565b8060405250806040840185811115612b7057600080fd5b600060408284031215612c8657600080fd5b6123cb8383612c29565b60008060006101008486031215612ca657600080fd5b612cb08585612c29565b9250612cbf8560408601612c29565b9150612cce8560808601612b27565b90509250925092565b600060208284031215612ce957600080fd5b6123cb82612a4f565b600082601f830112612d0357600080fd5b81356020612d13612a9983612a2b565b82815260069290921b84018101918181019086841115612d3257600080fd5b8286015b84811015612adf57612d488882612c29565b835291830191604001612d36565b600082601f830112612d6757600080fd5b81356020612d77612a9983612a2b565b82815260059290921b84018101918181019086841115612d9657600080fd5b8286015b84811015612adf57803567ffffffffffffffff811115612dba5760008081fd5b612dc88986838b0101612cf2565b845250918301918301612d9a565b60008060008060808587031215612dec57600080fd5b843567ffffffffffffffff80821115612e0457600080fd5b612e1088838901612a78565b9550602091508187013581811115612e2757600080fd5b8701601f81018913612e3857600080fd5b8035612e46612a9982612a2b565b81815260059190911b8201840190848101908b831115612e6557600080fd5b928501925b82841015612e8357833582529285019290850190612e6a565b97505050506040870135915080821115612e9c57600080fd5b50612ea987828801612d56565b925050612eb860608601612a4f565b905092959194509250565b600082601f830112612ed457600080fd5b81356020612ee4612a9983612a2b565b82815260059290921b84018101918181019086841115612f0357600080fd5b8286015b84811015612adf5780358352918301918301612f07565b60008060408385031215612f3157600080fd5b823567ffffffffffffffff80821115612f4957600080fd5b612f5586838701612ec3565b93506020850135915080821115612f6b57600080fd5b50612f7885828601612cf2565b9150509250929050565b600060208284031215612f9457600080fd5b5035919050565b600060208284031215612fad57600080fd5b813561ffff811681146123cb57600080fd5b8060005b6002811015610e56578151845260209384019390910190600101612fc3565b8060005b6004811015610e56578151845260209384019390910190600101612fe6565b613010828251612fbf565b602081015167ffffffffffffffff8082166040850152806040840151166060850152505060608101516130466080840182612be0565b50608081015160a083015260a081015161306360c0840182612fbf565b5060c0810151613077610100840182612fbf565b5060e0810151611508610140840182612fe2565b6101c08101611b368284613005565b600080602083850312156130ad57600080fd5b823567ffffffffffffffff808211156130c557600080fd5b818501915085601f8301126130d957600080fd5b8135818111156130e857600080fd5b8660208260051b85010111156130fd57600080fd5b60209290920196919550909350505050565b6020808252825182820181905260009190848201906040850190845b818110156131525761313e838551613005565b928401926101c0929092019160010161312b565b50909695505050505050565b60808101611b368284612fe2565b600080600080600060e0868803121561318457600080fd5b61318d86612a4f565b9450602086013567ffffffffffffffff808211156131aa57600080fd5b6131b689838a01612ec3565b955060408801359150808211156131cc57600080fd5b506131d988828901612cf2565b9350506131e98760608801612c29565b91506131f88760a08801612c29565b90509295509295909350565b6000806000806080858703121561321a57600080fd5b61322385612a4f565b935061323160208601612a4f565b925061323f60408601612a4f565b9150612eb860608601612a4f565b600081518084526020808501945080840160005b8381101561329357815173ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101613261565b509495945050505050565b6020815260006123cb602083018461324d565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082840312156132f257600080fd5b815180151581146123cb57600080fd5b60408101611b368284612fbf565b610100810161331f8286612fbf565b61332c6040830185612fbf565b612b1f6080830184612fe2565b600081518084526020808501945080840160005b8381101561329357613360878351612fbf565b604096909601959082019060010161334d565b608081526000613386608083018761324d565b82810360208481019190915286518083528782019282019060005b818110156133bd578451835293830193918301916001016133a1565b5050848103604086015286518082528282019350600581901b8201830183890160005b8381101561342c577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe085840301875261341a838351613339565b968601969250908501906001016133e0565b505073ffffffffffffffffffffffffffffffffffffffff8816606088015294506134569350505050565b95945050505050565b600081518084526020808501945080840160005b8381101561329357815187529582019590820190600101613473565b6040815260006134a2604083018561345f565b82810360208401526134568185613339565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613515576135156134b4565b5060010190565b73ffffffffffffffffffffffffffffffffffffffff8616815260e06020820152600061354b60e083018761345f565b828103604084015261355d8187613339565b91505061356d6060830185612fbf565b61357a60a0830184612fbf565b9695505050505050565b6000825160005b818110156135a5576020818601810151858301520161358b565b818111156135b4576000828501525b509190910192915050565b600067ffffffffffffffff8083168185168083038211156135e2576135e26134b4565b01949350505050565b600061ffff8083168185168183048111821515161561360c5761360c6134b4565b02949350505050565b60006020828403121561362757600080fd5b5051919050565b600067ffffffffffffffff8083168181141561364c5761364c6134b4565b600101939250505056fea2646970667358221220ffb5156b48a63f3b31449b4033a00ec8db1bce66c03f4910228ade1432199f5764736f6c634300080b0033",
}

// ETHDKGABI is the input ABI used to generate the binding from.
// Deprecated: Use ETHDKGMetaData.ABI instead.
var ETHDKGABI = ETHDKGMetaData.ABI

// ETHDKGBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ETHDKGMetaData.Bin instead.
var ETHDKGBin = ETHDKGMetaData.Bin

// DeployETHDKG deploys a new Ethereum contract, binding an instance of ETHDKG to it.
func DeployETHDKG(auth *bind.TransactOpts, backend bind.ContractBackend, factory_ common.Address) (common.Address, *types.Transaction, *ETHDKG, error) {
	parsed, err := ETHDKGMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ETHDKGBin), backend, factory_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ETHDKG{ETHDKGCaller: ETHDKGCaller{contract: contract}, ETHDKGTransactor: ETHDKGTransactor{contract: contract}, ETHDKGFilterer: ETHDKGFilterer{contract: contract}}, nil
}

// ETHDKG is an auto generated Go binding around an Ethereum contract.
type ETHDKG struct {
	ETHDKGCaller     // Read-only binding to the contract
	ETHDKGTransactor // Write-only binding to the contract
	ETHDKGFilterer   // Log filterer for contract events
}

// ETHDKGCaller is an auto generated read-only Go binding around an Ethereum contract.
type ETHDKGCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETHDKGTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ETHDKGTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETHDKGFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ETHDKGFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETHDKGSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ETHDKGSession struct {
	Contract     *ETHDKG           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ETHDKGCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ETHDKGCallerSession struct {
	Contract *ETHDKGCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// ETHDKGTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ETHDKGTransactorSession struct {
	Contract     *ETHDKGTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ETHDKGRaw is an auto generated low-level Go binding around an Ethereum contract.
type ETHDKGRaw struct {
	Contract *ETHDKG // Generic contract binding to access the raw methods on
}

// ETHDKGCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ETHDKGCallerRaw struct {
	Contract *ETHDKGCaller // Generic read-only contract binding to access the raw methods on
}

// ETHDKGTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ETHDKGTransactorRaw struct {
	Contract *ETHDKGTransactor // Generic write-only contract binding to access the raw methods on
}

// NewETHDKG creates a new instance of ETHDKG, bound to a specific deployed contract.
func NewETHDKG(address common.Address, backend bind.ContractBackend) (*ETHDKG, error) {
	contract, err := bindETHDKG(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ETHDKG{ETHDKGCaller: ETHDKGCaller{contract: contract}, ETHDKGTransactor: ETHDKGTransactor{contract: contract}, ETHDKGFilterer: ETHDKGFilterer{contract: contract}}, nil
}

// NewETHDKGCaller creates a new read-only instance of ETHDKG, bound to a specific deployed contract.
func NewETHDKGCaller(address common.Address, caller bind.ContractCaller) (*ETHDKGCaller, error) {
	contract, err := bindETHDKG(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ETHDKGCaller{contract: contract}, nil
}

// NewETHDKGTransactor creates a new write-only instance of ETHDKG, bound to a specific deployed contract.
func NewETHDKGTransactor(address common.Address, transactor bind.ContractTransactor) (*ETHDKGTransactor, error) {
	contract, err := bindETHDKG(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ETHDKGTransactor{contract: contract}, nil
}

// NewETHDKGFilterer creates a new log filterer instance of ETHDKG, bound to a specific deployed contract.
func NewETHDKGFilterer(address common.Address, filterer bind.ContractFilterer) (*ETHDKGFilterer, error) {
	contract, err := bindETHDKG(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ETHDKGFilterer{contract: contract}, nil
}

// bindETHDKG binds a generic wrapper to an already deployed contract.
func bindETHDKG(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ETHDKGABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ETHDKG *ETHDKGRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ETHDKG.Contract.ETHDKGCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ETHDKG *ETHDKGRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETHDKG.Contract.ETHDKGTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ETHDKG *ETHDKGRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ETHDKG.Contract.ETHDKGTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ETHDKG *ETHDKGCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ETHDKG.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ETHDKG *ETHDKGTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETHDKG.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ETHDKG *ETHDKGTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ETHDKG.Contract.contract.Transact(opts, method, params...)
}

// GetAdmin is a free data retrieval call binding the contract method 0x6e9960c3.
//
// Solidity: function getAdmin() view returns(address)
func (_ETHDKG *ETHDKGCaller) GetAdmin(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "getAdmin")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetAdmin is a free data retrieval call binding the contract method 0x6e9960c3.
//
// Solidity: function getAdmin() view returns(address)
func (_ETHDKG *ETHDKGSession) GetAdmin() (common.Address, error) {
	return _ETHDKG.Contract.GetAdmin(&_ETHDKG.CallOpts)
}

// GetAdmin is a free data retrieval call binding the contract method 0x6e9960c3.
//
// Solidity: function getAdmin() view returns(address)
func (_ETHDKG *ETHDKGCallerSession) GetAdmin() (common.Address, error) {
	return _ETHDKG.Contract.GetAdmin(&_ETHDKG.CallOpts)
}

// GetBadParticipants is a free data retrieval call binding the contract method 0x32d4d570.
//
// Solidity: function getBadParticipants() view returns(uint256)
func (_ETHDKG *ETHDKGCaller) GetBadParticipants(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "getBadParticipants")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetBadParticipants is a free data retrieval call binding the contract method 0x32d4d570.
//
// Solidity: function getBadParticipants() view returns(uint256)
func (_ETHDKG *ETHDKGSession) GetBadParticipants() (*big.Int, error) {
	return _ETHDKG.Contract.GetBadParticipants(&_ETHDKG.CallOpts)
}

// GetBadParticipants is a free data retrieval call binding the contract method 0x32d4d570.
//
// Solidity: function getBadParticipants() view returns(uint256)
func (_ETHDKG *ETHDKGCallerSession) GetBadParticipants() (*big.Int, error) {
	return _ETHDKG.Contract.GetBadParticipants(&_ETHDKG.CallOpts)
}

// GetConfirmationLength is a free data retrieval call binding the contract method 0x8c848d32.
//
// Solidity: function getConfirmationLength() view returns(uint256)
func (_ETHDKG *ETHDKGCaller) GetConfirmationLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "getConfirmationLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetConfirmationLength is a free data retrieval call binding the contract method 0x8c848d32.
//
// Solidity: function getConfirmationLength() view returns(uint256)
func (_ETHDKG *ETHDKGSession) GetConfirmationLength() (*big.Int, error) {
	return _ETHDKG.Contract.GetConfirmationLength(&_ETHDKG.CallOpts)
}

// GetConfirmationLength is a free data retrieval call binding the contract method 0x8c848d32.
//
// Solidity: function getConfirmationLength() view returns(uint256)
func (_ETHDKG *ETHDKGCallerSession) GetConfirmationLength() (*big.Int, error) {
	return _ETHDKG.Contract.GetConfirmationLength(&_ETHDKG.CallOpts)
}

// GetETHDKGPhase is a free data retrieval call binding the contract method 0x2958e81c.
//
// Solidity: function getETHDKGPhase() view returns(uint8)
func (_ETHDKG *ETHDKGCaller) GetETHDKGPhase(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "getETHDKGPhase")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetETHDKGPhase is a free data retrieval call binding the contract method 0x2958e81c.
//
// Solidity: function getETHDKGPhase() view returns(uint8)
func (_ETHDKG *ETHDKGSession) GetETHDKGPhase() (uint8, error) {
	return _ETHDKG.Contract.GetETHDKGPhase(&_ETHDKG.CallOpts)
}

// GetETHDKGPhase is a free data retrieval call binding the contract method 0x2958e81c.
//
// Solidity: function getETHDKGPhase() view returns(uint8)
func (_ETHDKG *ETHDKGCallerSession) GetETHDKGPhase() (uint8, error) {
	return _ETHDKG.Contract.GetETHDKGPhase(&_ETHDKG.CallOpts)
}

// GetMasterPublicKey is a free data retrieval call binding the contract method 0xe146372a.
//
// Solidity: function getMasterPublicKey() view returns(uint256[4])
func (_ETHDKG *ETHDKGCaller) GetMasterPublicKey(opts *bind.CallOpts) ([4]*big.Int, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "getMasterPublicKey")

	if err != nil {
		return *new([4]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([4]*big.Int)).(*[4]*big.Int)

	return out0, err

}

// GetMasterPublicKey is a free data retrieval call binding the contract method 0xe146372a.
//
// Solidity: function getMasterPublicKey() view returns(uint256[4])
func (_ETHDKG *ETHDKGSession) GetMasterPublicKey() ([4]*big.Int, error) {
	return _ETHDKG.Contract.GetMasterPublicKey(&_ETHDKG.CallOpts)
}

// GetMasterPublicKey is a free data retrieval call binding the contract method 0xe146372a.
//
// Solidity: function getMasterPublicKey() view returns(uint256[4])
func (_ETHDKG *ETHDKGCallerSession) GetMasterPublicKey() ([4]*big.Int, error) {
	return _ETHDKG.Contract.GetMasterPublicKey(&_ETHDKG.CallOpts)
}

// GetMinValidators is a free data retrieval call binding the contract method 0xecbadb36.
//
// Solidity: function getMinValidators() view returns(uint256)
func (_ETHDKG *ETHDKGCaller) GetMinValidators(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "getMinValidators")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMinValidators is a free data retrieval call binding the contract method 0xecbadb36.
//
// Solidity: function getMinValidators() view returns(uint256)
func (_ETHDKG *ETHDKGSession) GetMinValidators() (*big.Int, error) {
	return _ETHDKG.Contract.GetMinValidators(&_ETHDKG.CallOpts)
}

// GetMinValidators is a free data retrieval call binding the contract method 0xecbadb36.
//
// Solidity: function getMinValidators() view returns(uint256)
func (_ETHDKG *ETHDKGCallerSession) GetMinValidators() (*big.Int, error) {
	return _ETHDKG.Contract.GetMinValidators(&_ETHDKG.CallOpts)
}

// GetNonce is a free data retrieval call binding the contract method 0xd087d288.
//
// Solidity: function getNonce() view returns(uint256)
func (_ETHDKG *ETHDKGCaller) GetNonce(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "getNonce")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetNonce is a free data retrieval call binding the contract method 0xd087d288.
//
// Solidity: function getNonce() view returns(uint256)
func (_ETHDKG *ETHDKGSession) GetNonce() (*big.Int, error) {
	return _ETHDKG.Contract.GetNonce(&_ETHDKG.CallOpts)
}

// GetNonce is a free data retrieval call binding the contract method 0xd087d288.
//
// Solidity: function getNonce() view returns(uint256)
func (_ETHDKG *ETHDKGCallerSession) GetNonce() (*big.Int, error) {
	return _ETHDKG.Contract.GetNonce(&_ETHDKG.CallOpts)
}

// GetNumParticipants is a free data retrieval call binding the contract method 0xfd478ca9.
//
// Solidity: function getNumParticipants() view returns(uint256)
func (_ETHDKG *ETHDKGCaller) GetNumParticipants(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "getNumParticipants")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetNumParticipants is a free data retrieval call binding the contract method 0xfd478ca9.
//
// Solidity: function getNumParticipants() view returns(uint256)
func (_ETHDKG *ETHDKGSession) GetNumParticipants() (*big.Int, error) {
	return _ETHDKG.Contract.GetNumParticipants(&_ETHDKG.CallOpts)
}

// GetNumParticipants is a free data retrieval call binding the contract method 0xfd478ca9.
//
// Solidity: function getNumParticipants() view returns(uint256)
func (_ETHDKG *ETHDKGCallerSession) GetNumParticipants() (*big.Int, error) {
	return _ETHDKG.Contract.GetNumParticipants(&_ETHDKG.CallOpts)
}

// GetParticipantInternalState is a free data retrieval call binding the contract method 0xbf7786b6.
//
// Solidity: function getParticipantInternalState(address participant) view returns((uint256[2],uint64,uint64,uint8,bytes32,uint256[2],uint256[2],uint256[4]))
func (_ETHDKG *ETHDKGCaller) GetParticipantInternalState(opts *bind.CallOpts, participant common.Address) (Participant, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "getParticipantInternalState", participant)

	if err != nil {
		return *new(Participant), err
	}

	out0 := *abi.ConvertType(out[0], new(Participant)).(*Participant)

	return out0, err

}

// GetParticipantInternalState is a free data retrieval call binding the contract method 0xbf7786b6.
//
// Solidity: function getParticipantInternalState(address participant) view returns((uint256[2],uint64,uint64,uint8,bytes32,uint256[2],uint256[2],uint256[4]))
func (_ETHDKG *ETHDKGSession) GetParticipantInternalState(participant common.Address) (Participant, error) {
	return _ETHDKG.Contract.GetParticipantInternalState(&_ETHDKG.CallOpts, participant)
}

// GetParticipantInternalState is a free data retrieval call binding the contract method 0xbf7786b6.
//
// Solidity: function getParticipantInternalState(address participant) view returns((uint256[2],uint64,uint64,uint8,bytes32,uint256[2],uint256[2],uint256[4]))
func (_ETHDKG *ETHDKGCallerSession) GetParticipantInternalState(participant common.Address) (Participant, error) {
	return _ETHDKG.Contract.GetParticipantInternalState(&_ETHDKG.CallOpts, participant)
}

// GetParticipantsInternalState is a free data retrieval call binding the contract method 0xc016baee.
//
// Solidity: function getParticipantsInternalState(address[] participantAddresses) view returns((uint256[2],uint64,uint64,uint8,bytes32,uint256[2],uint256[2],uint256[4])[])
func (_ETHDKG *ETHDKGCaller) GetParticipantsInternalState(opts *bind.CallOpts, participantAddresses []common.Address) ([]Participant, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "getParticipantsInternalState", participantAddresses)

	if err != nil {
		return *new([]Participant), err
	}

	out0 := *abi.ConvertType(out[0], new([]Participant)).(*[]Participant)

	return out0, err

}

// GetParticipantsInternalState is a free data retrieval call binding the contract method 0xc016baee.
//
// Solidity: function getParticipantsInternalState(address[] participantAddresses) view returns((uint256[2],uint64,uint64,uint8,bytes32,uint256[2],uint256[2],uint256[4])[])
func (_ETHDKG *ETHDKGSession) GetParticipantsInternalState(participantAddresses []common.Address) ([]Participant, error) {
	return _ETHDKG.Contract.GetParticipantsInternalState(&_ETHDKG.CallOpts, participantAddresses)
}

// GetParticipantsInternalState is a free data retrieval call binding the contract method 0xc016baee.
//
// Solidity: function getParticipantsInternalState(address[] participantAddresses) view returns((uint256[2],uint64,uint64,uint8,bytes32,uint256[2],uint256[2],uint256[4])[])
func (_ETHDKG *ETHDKGCallerSession) GetParticipantsInternalState(participantAddresses []common.Address) ([]Participant, error) {
	return _ETHDKG.Contract.GetParticipantsInternalState(&_ETHDKG.CallOpts, participantAddresses)
}

// GetPhaseLength is a free data retrieval call binding the contract method 0x106da57d.
//
// Solidity: function getPhaseLength() view returns(uint256)
func (_ETHDKG *ETHDKGCaller) GetPhaseLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "getPhaseLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPhaseLength is a free data retrieval call binding the contract method 0x106da57d.
//
// Solidity: function getPhaseLength() view returns(uint256)
func (_ETHDKG *ETHDKGSession) GetPhaseLength() (*big.Int, error) {
	return _ETHDKG.Contract.GetPhaseLength(&_ETHDKG.CallOpts)
}

// GetPhaseLength is a free data retrieval call binding the contract method 0x106da57d.
//
// Solidity: function getPhaseLength() view returns(uint256)
func (_ETHDKG *ETHDKGCallerSession) GetPhaseLength() (*big.Int, error) {
	return _ETHDKG.Contract.GetPhaseLength(&_ETHDKG.CallOpts)
}

// GetPhaseStartBlock is a free data retrieval call binding the contract method 0xa2bc9c78.
//
// Solidity: function getPhaseStartBlock() view returns(uint256)
func (_ETHDKG *ETHDKGCaller) GetPhaseStartBlock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "getPhaseStartBlock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPhaseStartBlock is a free data retrieval call binding the contract method 0xa2bc9c78.
//
// Solidity: function getPhaseStartBlock() view returns(uint256)
func (_ETHDKG *ETHDKGSession) GetPhaseStartBlock() (*big.Int, error) {
	return _ETHDKG.Contract.GetPhaseStartBlock(&_ETHDKG.CallOpts)
}

// GetPhaseStartBlock is a free data retrieval call binding the contract method 0xa2bc9c78.
//
// Solidity: function getPhaseStartBlock() view returns(uint256)
func (_ETHDKG *ETHDKGCallerSession) GetPhaseStartBlock() (*big.Int, error) {
	return _ETHDKG.Contract.GetPhaseStartBlock(&_ETHDKG.CallOpts)
}

// IsETHDKGCompleted is a free data retrieval call binding the contract method 0x2b7c6724.
//
// Solidity: function isETHDKGCompleted() view returns(bool)
func (_ETHDKG *ETHDKGCaller) IsETHDKGCompleted(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "isETHDKGCompleted")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsETHDKGCompleted is a free data retrieval call binding the contract method 0x2b7c6724.
//
// Solidity: function isETHDKGCompleted() view returns(bool)
func (_ETHDKG *ETHDKGSession) IsETHDKGCompleted() (bool, error) {
	return _ETHDKG.Contract.IsETHDKGCompleted(&_ETHDKG.CallOpts)
}

// IsETHDKGCompleted is a free data retrieval call binding the contract method 0x2b7c6724.
//
// Solidity: function isETHDKGCompleted() view returns(bool)
func (_ETHDKG *ETHDKGCallerSession) IsETHDKGCompleted() (bool, error) {
	return _ETHDKG.Contract.IsETHDKGCompleted(&_ETHDKG.CallOpts)
}

// IsETHDKGHalted is a free data retrieval call binding the contract method 0x43ced534.
//
// Solidity: function isETHDKGHalted() view returns(bool)
func (_ETHDKG *ETHDKGCaller) IsETHDKGHalted(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "isETHDKGHalted")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsETHDKGHalted is a free data retrieval call binding the contract method 0x43ced534.
//
// Solidity: function isETHDKGHalted() view returns(bool)
func (_ETHDKG *ETHDKGSession) IsETHDKGHalted() (bool, error) {
	return _ETHDKG.Contract.IsETHDKGHalted(&_ETHDKG.CallOpts)
}

// IsETHDKGHalted is a free data retrieval call binding the contract method 0x43ced534.
//
// Solidity: function isETHDKGHalted() view returns(bool)
func (_ETHDKG *ETHDKGCallerSession) IsETHDKGHalted() (bool, error) {
	return _ETHDKG.Contract.IsETHDKGHalted(&_ETHDKG.CallOpts)
}

// IsETHDKGRunning is a free data retrieval call binding the contract method 0x747b217c.
//
// Solidity: function isETHDKGRunning() view returns(bool)
func (_ETHDKG *ETHDKGCaller) IsETHDKGRunning(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "isETHDKGRunning")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsETHDKGRunning is a free data retrieval call binding the contract method 0x747b217c.
//
// Solidity: function isETHDKGRunning() view returns(bool)
func (_ETHDKG *ETHDKGSession) IsETHDKGRunning() (bool, error) {
	return _ETHDKG.Contract.IsETHDKGRunning(&_ETHDKG.CallOpts)
}

// IsETHDKGRunning is a free data retrieval call binding the contract method 0x747b217c.
//
// Solidity: function isETHDKGRunning() view returns(bool)
func (_ETHDKG *ETHDKGCallerSession) IsETHDKGRunning() (bool, error) {
	return _ETHDKG.Contract.IsETHDKGRunning(&_ETHDKG.CallOpts)
}

// IsMasterPublicKeySet is a free data retrieval call binding the contract method 0x08efcf16.
//
// Solidity: function isMasterPublicKeySet() view returns(bool)
func (_ETHDKG *ETHDKGCaller) IsMasterPublicKeySet(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "isMasterPublicKeySet")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsMasterPublicKeySet is a free data retrieval call binding the contract method 0x08efcf16.
//
// Solidity: function isMasterPublicKeySet() view returns(bool)
func (_ETHDKG *ETHDKGSession) IsMasterPublicKeySet() (bool, error) {
	return _ETHDKG.Contract.IsMasterPublicKeySet(&_ETHDKG.CallOpts)
}

// IsMasterPublicKeySet is a free data retrieval call binding the contract method 0x08efcf16.
//
// Solidity: function isMasterPublicKeySet() view returns(bool)
func (_ETHDKG *ETHDKGCallerSession) IsMasterPublicKeySet() (bool, error) {
	return _ETHDKG.Contract.IsMasterPublicKeySet(&_ETHDKG.CallOpts)
}

// TryGetParticipantIndex is a free data retrieval call binding the contract method 0x65e62b9b.
//
// Solidity: function tryGetParticipantIndex(address participant) view returns(bool, uint256)
func (_ETHDKG *ETHDKGCaller) TryGetParticipantIndex(opts *bind.CallOpts, participant common.Address) (bool, *big.Int, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "tryGetParticipantIndex", participant)

	if err != nil {
		return *new(bool), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return out0, out1, err

}

// TryGetParticipantIndex is a free data retrieval call binding the contract method 0x65e62b9b.
//
// Solidity: function tryGetParticipantIndex(address participant) view returns(bool, uint256)
func (_ETHDKG *ETHDKGSession) TryGetParticipantIndex(participant common.Address) (bool, *big.Int, error) {
	return _ETHDKG.Contract.TryGetParticipantIndex(&_ETHDKG.CallOpts, participant)
}

// TryGetParticipantIndex is a free data retrieval call binding the contract method 0x65e62b9b.
//
// Solidity: function tryGetParticipantIndex(address participant) view returns(bool, uint256)
func (_ETHDKG *ETHDKGCallerSession) TryGetParticipantIndex(participant common.Address) (bool, *big.Int, error) {
	return _ETHDKG.Contract.TryGetParticipantIndex(&_ETHDKG.CallOpts, participant)
}

// AccuseParticipantDidNotDistributeShares is a paid mutator transaction binding the contract method 0xdae681bc.
//
// Solidity: function accuseParticipantDidNotDistributeShares(address[] dishonestAddresses) returns()
func (_ETHDKG *ETHDKGTransactor) AccuseParticipantDidNotDistributeShares(opts *bind.TransactOpts, dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "accuseParticipantDidNotDistributeShares", dishonestAddresses)
}

// AccuseParticipantDidNotDistributeShares is a paid mutator transaction binding the contract method 0xdae681bc.
//
// Solidity: function accuseParticipantDidNotDistributeShares(address[] dishonestAddresses) returns()
func (_ETHDKG *ETHDKGSession) AccuseParticipantDidNotDistributeShares(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKG.Contract.AccuseParticipantDidNotDistributeShares(&_ETHDKG.TransactOpts, dishonestAddresses)
}

// AccuseParticipantDidNotDistributeShares is a paid mutator transaction binding the contract method 0xdae681bc.
//
// Solidity: function accuseParticipantDidNotDistributeShares(address[] dishonestAddresses) returns()
func (_ETHDKG *ETHDKGTransactorSession) AccuseParticipantDidNotDistributeShares(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKG.Contract.AccuseParticipantDidNotDistributeShares(&_ETHDKG.TransactOpts, dishonestAddresses)
}

// AccuseParticipantDidNotSubmitGPKJ is a paid mutator transaction binding the contract method 0x7df24ee9.
//
// Solidity: function accuseParticipantDidNotSubmitGPKJ(address[] dishonestAddresses) returns()
func (_ETHDKG *ETHDKGTransactor) AccuseParticipantDidNotSubmitGPKJ(opts *bind.TransactOpts, dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "accuseParticipantDidNotSubmitGPKJ", dishonestAddresses)
}

// AccuseParticipantDidNotSubmitGPKJ is a paid mutator transaction binding the contract method 0x7df24ee9.
//
// Solidity: function accuseParticipantDidNotSubmitGPKJ(address[] dishonestAddresses) returns()
func (_ETHDKG *ETHDKGSession) AccuseParticipantDidNotSubmitGPKJ(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKG.Contract.AccuseParticipantDidNotSubmitGPKJ(&_ETHDKG.TransactOpts, dishonestAddresses)
}

// AccuseParticipantDidNotSubmitGPKJ is a paid mutator transaction binding the contract method 0x7df24ee9.
//
// Solidity: function accuseParticipantDidNotSubmitGPKJ(address[] dishonestAddresses) returns()
func (_ETHDKG *ETHDKGTransactorSession) AccuseParticipantDidNotSubmitGPKJ(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKG.Contract.AccuseParticipantDidNotSubmitGPKJ(&_ETHDKG.TransactOpts, dishonestAddresses)
}

// AccuseParticipantDidNotSubmitKeyShares is a paid mutator transaction binding the contract method 0x043a6f12.
//
// Solidity: function accuseParticipantDidNotSubmitKeyShares(address[] dishonestAddresses) returns()
func (_ETHDKG *ETHDKGTransactor) AccuseParticipantDidNotSubmitKeyShares(opts *bind.TransactOpts, dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "accuseParticipantDidNotSubmitKeyShares", dishonestAddresses)
}

// AccuseParticipantDidNotSubmitKeyShares is a paid mutator transaction binding the contract method 0x043a6f12.
//
// Solidity: function accuseParticipantDidNotSubmitKeyShares(address[] dishonestAddresses) returns()
func (_ETHDKG *ETHDKGSession) AccuseParticipantDidNotSubmitKeyShares(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKG.Contract.AccuseParticipantDidNotSubmitKeyShares(&_ETHDKG.TransactOpts, dishonestAddresses)
}

// AccuseParticipantDidNotSubmitKeyShares is a paid mutator transaction binding the contract method 0x043a6f12.
//
// Solidity: function accuseParticipantDidNotSubmitKeyShares(address[] dishonestAddresses) returns()
func (_ETHDKG *ETHDKGTransactorSession) AccuseParticipantDidNotSubmitKeyShares(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKG.Contract.AccuseParticipantDidNotSubmitKeyShares(&_ETHDKG.TransactOpts, dishonestAddresses)
}

// AccuseParticipantDistributedBadShares is a paid mutator transaction binding the contract method 0xedbe7bf7.
//
// Solidity: function accuseParticipantDistributedBadShares(address dishonestAddress, uint256[] encryptedShares, uint256[2][] commitments, uint256[2] sharedKey, uint256[2] sharedKeyCorrectnessProof) returns()
func (_ETHDKG *ETHDKGTransactor) AccuseParticipantDistributedBadShares(opts *bind.TransactOpts, dishonestAddress common.Address, encryptedShares []*big.Int, commitments [][2]*big.Int, sharedKey [2]*big.Int, sharedKeyCorrectnessProof [2]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "accuseParticipantDistributedBadShares", dishonestAddress, encryptedShares, commitments, sharedKey, sharedKeyCorrectnessProof)
}

// AccuseParticipantDistributedBadShares is a paid mutator transaction binding the contract method 0xedbe7bf7.
//
// Solidity: function accuseParticipantDistributedBadShares(address dishonestAddress, uint256[] encryptedShares, uint256[2][] commitments, uint256[2] sharedKey, uint256[2] sharedKeyCorrectnessProof) returns()
func (_ETHDKG *ETHDKGSession) AccuseParticipantDistributedBadShares(dishonestAddress common.Address, encryptedShares []*big.Int, commitments [][2]*big.Int, sharedKey [2]*big.Int, sharedKeyCorrectnessProof [2]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.AccuseParticipantDistributedBadShares(&_ETHDKG.TransactOpts, dishonestAddress, encryptedShares, commitments, sharedKey, sharedKeyCorrectnessProof)
}

// AccuseParticipantDistributedBadShares is a paid mutator transaction binding the contract method 0xedbe7bf7.
//
// Solidity: function accuseParticipantDistributedBadShares(address dishonestAddress, uint256[] encryptedShares, uint256[2][] commitments, uint256[2] sharedKey, uint256[2] sharedKeyCorrectnessProof) returns()
func (_ETHDKG *ETHDKGTransactorSession) AccuseParticipantDistributedBadShares(dishonestAddress common.Address, encryptedShares []*big.Int, commitments [][2]*big.Int, sharedKey [2]*big.Int, sharedKeyCorrectnessProof [2]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.AccuseParticipantDistributedBadShares(&_ETHDKG.TransactOpts, dishonestAddress, encryptedShares, commitments, sharedKey, sharedKeyCorrectnessProof)
}

// AccuseParticipantNotRegistered is a paid mutator transaction binding the contract method 0xf72c45b6.
//
// Solidity: function accuseParticipantNotRegistered(address[] dishonestAddresses) returns()
func (_ETHDKG *ETHDKGTransactor) AccuseParticipantNotRegistered(opts *bind.TransactOpts, dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "accuseParticipantNotRegistered", dishonestAddresses)
}

// AccuseParticipantNotRegistered is a paid mutator transaction binding the contract method 0xf72c45b6.
//
// Solidity: function accuseParticipantNotRegistered(address[] dishonestAddresses) returns()
func (_ETHDKG *ETHDKGSession) AccuseParticipantNotRegistered(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKG.Contract.AccuseParticipantNotRegistered(&_ETHDKG.TransactOpts, dishonestAddresses)
}

// AccuseParticipantNotRegistered is a paid mutator transaction binding the contract method 0xf72c45b6.
//
// Solidity: function accuseParticipantNotRegistered(address[] dishonestAddresses) returns()
func (_ETHDKG *ETHDKGTransactorSession) AccuseParticipantNotRegistered(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKG.Contract.AccuseParticipantNotRegistered(&_ETHDKG.TransactOpts, dishonestAddresses)
}

// AccuseParticipantSubmittedBadGPKJ is a paid mutator transaction binding the contract method 0x80001264.
//
// Solidity: function accuseParticipantSubmittedBadGPKJ(address[] validators, bytes32[] encryptedSharesHash, uint256[2][][] commitments, address dishonestAddress) returns()
func (_ETHDKG *ETHDKGTransactor) AccuseParticipantSubmittedBadGPKJ(opts *bind.TransactOpts, validators []common.Address, encryptedSharesHash [][32]byte, commitments [][][2]*big.Int, dishonestAddress common.Address) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "accuseParticipantSubmittedBadGPKJ", validators, encryptedSharesHash, commitments, dishonestAddress)
}

// AccuseParticipantSubmittedBadGPKJ is a paid mutator transaction binding the contract method 0x80001264.
//
// Solidity: function accuseParticipantSubmittedBadGPKJ(address[] validators, bytes32[] encryptedSharesHash, uint256[2][][] commitments, address dishonestAddress) returns()
func (_ETHDKG *ETHDKGSession) AccuseParticipantSubmittedBadGPKJ(validators []common.Address, encryptedSharesHash [][32]byte, commitments [][][2]*big.Int, dishonestAddress common.Address) (*types.Transaction, error) {
	return _ETHDKG.Contract.AccuseParticipantSubmittedBadGPKJ(&_ETHDKG.TransactOpts, validators, encryptedSharesHash, commitments, dishonestAddress)
}

// AccuseParticipantSubmittedBadGPKJ is a paid mutator transaction binding the contract method 0x80001264.
//
// Solidity: function accuseParticipantSubmittedBadGPKJ(address[] validators, bytes32[] encryptedSharesHash, uint256[2][][] commitments, address dishonestAddress) returns()
func (_ETHDKG *ETHDKGTransactorSession) AccuseParticipantSubmittedBadGPKJ(validators []common.Address, encryptedSharesHash [][32]byte, commitments [][][2]*big.Int, dishonestAddress common.Address) (*types.Transaction, error) {
	return _ETHDKG.Contract.AccuseParticipantSubmittedBadGPKJ(&_ETHDKG.TransactOpts, validators, encryptedSharesHash, commitments, dishonestAddress)
}

// Complete is a paid mutator transaction binding the contract method 0x522e1177.
//
// Solidity: function complete() returns()
func (_ETHDKG *ETHDKGTransactor) Complete(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "complete")
}

// Complete is a paid mutator transaction binding the contract method 0x522e1177.
//
// Solidity: function complete() returns()
func (_ETHDKG *ETHDKGSession) Complete() (*types.Transaction, error) {
	return _ETHDKG.Contract.Complete(&_ETHDKG.TransactOpts)
}

// Complete is a paid mutator transaction binding the contract method 0x522e1177.
//
// Solidity: function complete() returns()
func (_ETHDKG *ETHDKGTransactorSession) Complete() (*types.Transaction, error) {
	return _ETHDKG.Contract.Complete(&_ETHDKG.TransactOpts)
}

// DistributeShares is a paid mutator transaction binding the contract method 0x80b97e01.
//
// Solidity: function distributeShares(uint256[] encryptedShares, uint256[2][] commitments) returns()
func (_ETHDKG *ETHDKGTransactor) DistributeShares(opts *bind.TransactOpts, encryptedShares []*big.Int, commitments [][2]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "distributeShares", encryptedShares, commitments)
}

// DistributeShares is a paid mutator transaction binding the contract method 0x80b97e01.
//
// Solidity: function distributeShares(uint256[] encryptedShares, uint256[2][] commitments) returns()
func (_ETHDKG *ETHDKGSession) DistributeShares(encryptedShares []*big.Int, commitments [][2]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.DistributeShares(&_ETHDKG.TransactOpts, encryptedShares, commitments)
}

// DistributeShares is a paid mutator transaction binding the contract method 0x80b97e01.
//
// Solidity: function distributeShares(uint256[] encryptedShares, uint256[2][] commitments) returns()
func (_ETHDKG *ETHDKGTransactorSession) DistributeShares(encryptedShares []*big.Int, commitments [][2]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.DistributeShares(&_ETHDKG.TransactOpts, encryptedShares, commitments)
}

// Initialize is a paid mutator transaction binding the contract method 0xf8c8765e.
//
// Solidity: function initialize(address validatorPool, address snapshots, address ethdkgAccusations, address ethdkgPhases) returns()
func (_ETHDKG *ETHDKGTransactor) Initialize(opts *bind.TransactOpts, validatorPool common.Address, snapshots common.Address, ethdkgAccusations common.Address, ethdkgPhases common.Address) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "initialize", validatorPool, snapshots, ethdkgAccusations, ethdkgPhases)
}

// Initialize is a paid mutator transaction binding the contract method 0xf8c8765e.
//
// Solidity: function initialize(address validatorPool, address snapshots, address ethdkgAccusations, address ethdkgPhases) returns()
func (_ETHDKG *ETHDKGSession) Initialize(validatorPool common.Address, snapshots common.Address, ethdkgAccusations common.Address, ethdkgPhases common.Address) (*types.Transaction, error) {
	return _ETHDKG.Contract.Initialize(&_ETHDKG.TransactOpts, validatorPool, snapshots, ethdkgAccusations, ethdkgPhases)
}

// Initialize is a paid mutator transaction binding the contract method 0xf8c8765e.
//
// Solidity: function initialize(address validatorPool, address snapshots, address ethdkgAccusations, address ethdkgPhases) returns()
func (_ETHDKG *ETHDKGTransactorSession) Initialize(validatorPool common.Address, snapshots common.Address, ethdkgAccusations common.Address, ethdkgPhases common.Address) (*types.Transaction, error) {
	return _ETHDKG.Contract.Initialize(&_ETHDKG.TransactOpts, validatorPool, snapshots, ethdkgAccusations, ethdkgPhases)
}

// InitializeETHDKG is a paid mutator transaction binding the contract method 0x57b51c9c.
//
// Solidity: function initializeETHDKG() returns()
func (_ETHDKG *ETHDKGTransactor) InitializeETHDKG(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "initializeETHDKG")
}

// InitializeETHDKG is a paid mutator transaction binding the contract method 0x57b51c9c.
//
// Solidity: function initializeETHDKG() returns()
func (_ETHDKG *ETHDKGSession) InitializeETHDKG() (*types.Transaction, error) {
	return _ETHDKG.Contract.InitializeETHDKG(&_ETHDKG.TransactOpts)
}

// InitializeETHDKG is a paid mutator transaction binding the contract method 0x57b51c9c.
//
// Solidity: function initializeETHDKG() returns()
func (_ETHDKG *ETHDKGTransactorSession) InitializeETHDKG() (*types.Transaction, error) {
	return _ETHDKG.Contract.InitializeETHDKG(&_ETHDKG.TransactOpts)
}

// Register is a paid mutator transaction binding the contract method 0x3442af5c.
//
// Solidity: function register(uint256[2] publicKey) returns()
func (_ETHDKG *ETHDKGTransactor) Register(opts *bind.TransactOpts, publicKey [2]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "register", publicKey)
}

// Register is a paid mutator transaction binding the contract method 0x3442af5c.
//
// Solidity: function register(uint256[2] publicKey) returns()
func (_ETHDKG *ETHDKGSession) Register(publicKey [2]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.Register(&_ETHDKG.TransactOpts, publicKey)
}

// Register is a paid mutator transaction binding the contract method 0x3442af5c.
//
// Solidity: function register(uint256[2] publicKey) returns()
func (_ETHDKG *ETHDKGTransactorSession) Register(publicKey [2]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.Register(&_ETHDKG.TransactOpts, publicKey)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address admin_) returns()
func (_ETHDKG *ETHDKGTransactor) SetAdmin(opts *bind.TransactOpts, admin_ common.Address) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "setAdmin", admin_)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address admin_) returns()
func (_ETHDKG *ETHDKGSession) SetAdmin(admin_ common.Address) (*types.Transaction, error) {
	return _ETHDKG.Contract.SetAdmin(&_ETHDKG.TransactOpts, admin_)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address admin_) returns()
func (_ETHDKG *ETHDKGTransactorSession) SetAdmin(admin_ common.Address) (*types.Transaction, error) {
	return _ETHDKG.Contract.SetAdmin(&_ETHDKG.TransactOpts, admin_)
}

// SetConfirmationLength is a paid mutator transaction binding the contract method 0xff3e5e45.
//
// Solidity: function setConfirmationLength(uint16 confirmationLength_) returns()
func (_ETHDKG *ETHDKGTransactor) SetConfirmationLength(opts *bind.TransactOpts, confirmationLength_ uint16) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "setConfirmationLength", confirmationLength_)
}

// SetConfirmationLength is a paid mutator transaction binding the contract method 0xff3e5e45.
//
// Solidity: function setConfirmationLength(uint16 confirmationLength_) returns()
func (_ETHDKG *ETHDKGSession) SetConfirmationLength(confirmationLength_ uint16) (*types.Transaction, error) {
	return _ETHDKG.Contract.SetConfirmationLength(&_ETHDKG.TransactOpts, confirmationLength_)
}

// SetConfirmationLength is a paid mutator transaction binding the contract method 0xff3e5e45.
//
// Solidity: function setConfirmationLength(uint16 confirmationLength_) returns()
func (_ETHDKG *ETHDKGTransactorSession) SetConfirmationLength(confirmationLength_ uint16) (*types.Transaction, error) {
	return _ETHDKG.Contract.SetConfirmationLength(&_ETHDKG.TransactOpts, confirmationLength_)
}

// SetCustomMadnetHeight is a paid mutator transaction binding the contract method 0x8328cdf7.
//
// Solidity: function setCustomMadnetHeight(uint256 madnetHeight) returns()
func (_ETHDKG *ETHDKGTransactor) SetCustomMadnetHeight(opts *bind.TransactOpts, madnetHeight *big.Int) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "setCustomMadnetHeight", madnetHeight)
}

// SetCustomMadnetHeight is a paid mutator transaction binding the contract method 0x8328cdf7.
//
// Solidity: function setCustomMadnetHeight(uint256 madnetHeight) returns()
func (_ETHDKG *ETHDKGSession) SetCustomMadnetHeight(madnetHeight *big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.SetCustomMadnetHeight(&_ETHDKG.TransactOpts, madnetHeight)
}

// SetCustomMadnetHeight is a paid mutator transaction binding the contract method 0x8328cdf7.
//
// Solidity: function setCustomMadnetHeight(uint256 madnetHeight) returns()
func (_ETHDKG *ETHDKGTransactorSession) SetCustomMadnetHeight(madnetHeight *big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.SetCustomMadnetHeight(&_ETHDKG.TransactOpts, madnetHeight)
}

// SetMinNumberOfValidator is a paid mutator transaction binding the contract method 0xfb89c899.
//
// Solidity: function setMinNumberOfValidator(uint16 minValidators_) returns()
func (_ETHDKG *ETHDKGTransactor) SetMinNumberOfValidator(opts *bind.TransactOpts, minValidators_ uint16) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "setMinNumberOfValidator", minValidators_)
}

// SetMinNumberOfValidator is a paid mutator transaction binding the contract method 0xfb89c899.
//
// Solidity: function setMinNumberOfValidator(uint16 minValidators_) returns()
func (_ETHDKG *ETHDKGSession) SetMinNumberOfValidator(minValidators_ uint16) (*types.Transaction, error) {
	return _ETHDKG.Contract.SetMinNumberOfValidator(&_ETHDKG.TransactOpts, minValidators_)
}

// SetMinNumberOfValidator is a paid mutator transaction binding the contract method 0xfb89c899.
//
// Solidity: function setMinNumberOfValidator(uint16 minValidators_) returns()
func (_ETHDKG *ETHDKGTransactorSession) SetMinNumberOfValidator(minValidators_ uint16) (*types.Transaction, error) {
	return _ETHDKG.Contract.SetMinNumberOfValidator(&_ETHDKG.TransactOpts, minValidators_)
}

// SetPhaseLength is a paid mutator transaction binding the contract method 0x8a3c24cc.
//
// Solidity: function setPhaseLength(uint16 phaseLength_) returns()
func (_ETHDKG *ETHDKGTransactor) SetPhaseLength(opts *bind.TransactOpts, phaseLength_ uint16) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "setPhaseLength", phaseLength_)
}

// SetPhaseLength is a paid mutator transaction binding the contract method 0x8a3c24cc.
//
// Solidity: function setPhaseLength(uint16 phaseLength_) returns()
func (_ETHDKG *ETHDKGSession) SetPhaseLength(phaseLength_ uint16) (*types.Transaction, error) {
	return _ETHDKG.Contract.SetPhaseLength(&_ETHDKG.TransactOpts, phaseLength_)
}

// SetPhaseLength is a paid mutator transaction binding the contract method 0x8a3c24cc.
//
// Solidity: function setPhaseLength(uint16 phaseLength_) returns()
func (_ETHDKG *ETHDKGTransactorSession) SetPhaseLength(phaseLength_ uint16) (*types.Transaction, error) {
	return _ETHDKG.Contract.SetPhaseLength(&_ETHDKG.TransactOpts, phaseLength_)
}

// SetSnapshotsAddress is a paid mutator transaction binding the contract method 0xd8552806.
//
// Solidity: function setSnapshotsAddress(address snapshots) returns()
func (_ETHDKG *ETHDKGTransactor) SetSnapshotsAddress(opts *bind.TransactOpts, snapshots common.Address) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "setSnapshotsAddress", snapshots)
}

// SetSnapshotsAddress is a paid mutator transaction binding the contract method 0xd8552806.
//
// Solidity: function setSnapshotsAddress(address snapshots) returns()
func (_ETHDKG *ETHDKGSession) SetSnapshotsAddress(snapshots common.Address) (*types.Transaction, error) {
	return _ETHDKG.Contract.SetSnapshotsAddress(&_ETHDKG.TransactOpts, snapshots)
}

// SetSnapshotsAddress is a paid mutator transaction binding the contract method 0xd8552806.
//
// Solidity: function setSnapshotsAddress(address snapshots) returns()
func (_ETHDKG *ETHDKGTransactorSession) SetSnapshotsAddress(snapshots common.Address) (*types.Transaction, error) {
	return _ETHDKG.Contract.SetSnapshotsAddress(&_ETHDKG.TransactOpts, snapshots)
}

// SetValidatorPoolAddress is a paid mutator transaction binding the contract method 0xfe0fe422.
//
// Solidity: function setValidatorPoolAddress(address validatorPool) returns()
func (_ETHDKG *ETHDKGTransactor) SetValidatorPoolAddress(opts *bind.TransactOpts, validatorPool common.Address) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "setValidatorPoolAddress", validatorPool)
}

// SetValidatorPoolAddress is a paid mutator transaction binding the contract method 0xfe0fe422.
//
// Solidity: function setValidatorPoolAddress(address validatorPool) returns()
func (_ETHDKG *ETHDKGSession) SetValidatorPoolAddress(validatorPool common.Address) (*types.Transaction, error) {
	return _ETHDKG.Contract.SetValidatorPoolAddress(&_ETHDKG.TransactOpts, validatorPool)
}

// SetValidatorPoolAddress is a paid mutator transaction binding the contract method 0xfe0fe422.
//
// Solidity: function setValidatorPoolAddress(address validatorPool) returns()
func (_ETHDKG *ETHDKGTransactorSession) SetValidatorPoolAddress(validatorPool common.Address) (*types.Transaction, error) {
	return _ETHDKG.Contract.SetValidatorPoolAddress(&_ETHDKG.TransactOpts, validatorPool)
}

// SubmitGPKJ is a paid mutator transaction binding the contract method 0x101f49c1.
//
// Solidity: function submitGPKJ(uint256[4] gpkj) returns()
func (_ETHDKG *ETHDKGTransactor) SubmitGPKJ(opts *bind.TransactOpts, gpkj [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "submitGPKJ", gpkj)
}

// SubmitGPKJ is a paid mutator transaction binding the contract method 0x101f49c1.
//
// Solidity: function submitGPKJ(uint256[4] gpkj) returns()
func (_ETHDKG *ETHDKGSession) SubmitGPKJ(gpkj [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.SubmitGPKJ(&_ETHDKG.TransactOpts, gpkj)
}

// SubmitGPKJ is a paid mutator transaction binding the contract method 0x101f49c1.
//
// Solidity: function submitGPKJ(uint256[4] gpkj) returns()
func (_ETHDKG *ETHDKGTransactorSession) SubmitGPKJ(gpkj [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.SubmitGPKJ(&_ETHDKG.TransactOpts, gpkj)
}

// SubmitKeyShare is a paid mutator transaction binding the contract method 0x62a6523e.
//
// Solidity: function submitKeyShare(uint256[2] keyShareG1, uint256[2] keyShareG1CorrectnessProof, uint256[4] keyShareG2) returns()
func (_ETHDKG *ETHDKGTransactor) SubmitKeyShare(opts *bind.TransactOpts, keyShareG1 [2]*big.Int, keyShareG1CorrectnessProof [2]*big.Int, keyShareG2 [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "submitKeyShare", keyShareG1, keyShareG1CorrectnessProof, keyShareG2)
}

// SubmitKeyShare is a paid mutator transaction binding the contract method 0x62a6523e.
//
// Solidity: function submitKeyShare(uint256[2] keyShareG1, uint256[2] keyShareG1CorrectnessProof, uint256[4] keyShareG2) returns()
func (_ETHDKG *ETHDKGSession) SubmitKeyShare(keyShareG1 [2]*big.Int, keyShareG1CorrectnessProof [2]*big.Int, keyShareG2 [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.SubmitKeyShare(&_ETHDKG.TransactOpts, keyShareG1, keyShareG1CorrectnessProof, keyShareG2)
}

// SubmitKeyShare is a paid mutator transaction binding the contract method 0x62a6523e.
//
// Solidity: function submitKeyShare(uint256[2] keyShareG1, uint256[2] keyShareG1CorrectnessProof, uint256[4] keyShareG2) returns()
func (_ETHDKG *ETHDKGTransactorSession) SubmitKeyShare(keyShareG1 [2]*big.Int, keyShareG1CorrectnessProof [2]*big.Int, keyShareG2 [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.SubmitKeyShare(&_ETHDKG.TransactOpts, keyShareG1, keyShareG1CorrectnessProof, keyShareG2)
}

// SubmitMasterPublicKey is a paid mutator transaction binding the contract method 0xe8323224.
//
// Solidity: function submitMasterPublicKey(uint256[4] masterPublicKey_) returns()
func (_ETHDKG *ETHDKGTransactor) SubmitMasterPublicKey(opts *bind.TransactOpts, masterPublicKey_ [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "submitMasterPublicKey", masterPublicKey_)
}

// SubmitMasterPublicKey is a paid mutator transaction binding the contract method 0xe8323224.
//
// Solidity: function submitMasterPublicKey(uint256[4] masterPublicKey_) returns()
func (_ETHDKG *ETHDKGSession) SubmitMasterPublicKey(masterPublicKey_ [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.SubmitMasterPublicKey(&_ETHDKG.TransactOpts, masterPublicKey_)
}

// SubmitMasterPublicKey is a paid mutator transaction binding the contract method 0xe8323224.
//
// Solidity: function submitMasterPublicKey(uint256[4] masterPublicKey_) returns()
func (_ETHDKG *ETHDKGTransactorSession) SubmitMasterPublicKey(masterPublicKey_ [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.SubmitMasterPublicKey(&_ETHDKG.TransactOpts, masterPublicKey_)
}

// ETHDKGAddressRegisteredIterator is returned from FilterAddressRegistered and is used to iterate over the raw logs and unpacked data for AddressRegistered events raised by the ETHDKG contract.
type ETHDKGAddressRegisteredIterator struct {
	Event *ETHDKGAddressRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGAddressRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGAddressRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGAddressRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGAddressRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGAddressRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGAddressRegistered represents a AddressRegistered event raised by the ETHDKG contract.
type ETHDKGAddressRegistered struct {
	Account   common.Address
	Index     *big.Int
	Nonce     *big.Int
	PublicKey [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAddressRegistered is a free log retrieval operation binding the contract event 0x7f1304057ec61140fbf2f5f236790f34fcafe123d3eb0d298d92317c97da500d.
//
// Solidity: event AddressRegistered(address account, uint256 index, uint256 nonce, uint256[2] publicKey)
func (_ETHDKG *ETHDKGFilterer) FilterAddressRegistered(opts *bind.FilterOpts) (*ETHDKGAddressRegisteredIterator, error) {

	logs, sub, err := _ETHDKG.contract.FilterLogs(opts, "AddressRegistered")
	if err != nil {
		return nil, err
	}
	return &ETHDKGAddressRegisteredIterator{contract: _ETHDKG.contract, event: "AddressRegistered", logs: logs, sub: sub}, nil
}

// WatchAddressRegistered is a free log subscription operation binding the contract event 0x7f1304057ec61140fbf2f5f236790f34fcafe123d3eb0d298d92317c97da500d.
//
// Solidity: event AddressRegistered(address account, uint256 index, uint256 nonce, uint256[2] publicKey)
func (_ETHDKG *ETHDKGFilterer) WatchAddressRegistered(opts *bind.WatchOpts, sink chan<- *ETHDKGAddressRegistered) (event.Subscription, error) {

	logs, sub, err := _ETHDKG.contract.WatchLogs(opts, "AddressRegistered")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGAddressRegistered)
				if err := _ETHDKG.contract.UnpackLog(event, "AddressRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddressRegistered is a log parse operation binding the contract event 0x7f1304057ec61140fbf2f5f236790f34fcafe123d3eb0d298d92317c97da500d.
//
// Solidity: event AddressRegistered(address account, uint256 index, uint256 nonce, uint256[2] publicKey)
func (_ETHDKG *ETHDKGFilterer) ParseAddressRegistered(log types.Log) (*ETHDKGAddressRegistered, error) {
	event := new(ETHDKGAddressRegistered)
	if err := _ETHDKG.contract.UnpackLog(event, "AddressRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGGPKJSubmissionCompleteIterator is returned from FilterGPKJSubmissionComplete and is used to iterate over the raw logs and unpacked data for GPKJSubmissionComplete events raised by the ETHDKG contract.
type ETHDKGGPKJSubmissionCompleteIterator struct {
	Event *ETHDKGGPKJSubmissionComplete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGGPKJSubmissionCompleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGGPKJSubmissionComplete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGGPKJSubmissionComplete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGGPKJSubmissionCompleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGGPKJSubmissionCompleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGGPKJSubmissionComplete represents a GPKJSubmissionComplete event raised by the ETHDKG contract.
type ETHDKGGPKJSubmissionComplete struct {
	BlockNumber *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterGPKJSubmissionComplete is a free log retrieval operation binding the contract event 0x87bfe600b78cad9f7cf68c99eb582c1748f636b3269842b37d5873b0e069f628.
//
// Solidity: event GPKJSubmissionComplete(uint256 blockNumber)
func (_ETHDKG *ETHDKGFilterer) FilterGPKJSubmissionComplete(opts *bind.FilterOpts) (*ETHDKGGPKJSubmissionCompleteIterator, error) {

	logs, sub, err := _ETHDKG.contract.FilterLogs(opts, "GPKJSubmissionComplete")
	if err != nil {
		return nil, err
	}
	return &ETHDKGGPKJSubmissionCompleteIterator{contract: _ETHDKG.contract, event: "GPKJSubmissionComplete", logs: logs, sub: sub}, nil
}

// WatchGPKJSubmissionComplete is a free log subscription operation binding the contract event 0x87bfe600b78cad9f7cf68c99eb582c1748f636b3269842b37d5873b0e069f628.
//
// Solidity: event GPKJSubmissionComplete(uint256 blockNumber)
func (_ETHDKG *ETHDKGFilterer) WatchGPKJSubmissionComplete(opts *bind.WatchOpts, sink chan<- *ETHDKGGPKJSubmissionComplete) (event.Subscription, error) {

	logs, sub, err := _ETHDKG.contract.WatchLogs(opts, "GPKJSubmissionComplete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGGPKJSubmissionComplete)
				if err := _ETHDKG.contract.UnpackLog(event, "GPKJSubmissionComplete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseGPKJSubmissionComplete is a log parse operation binding the contract event 0x87bfe600b78cad9f7cf68c99eb582c1748f636b3269842b37d5873b0e069f628.
//
// Solidity: event GPKJSubmissionComplete(uint256 blockNumber)
func (_ETHDKG *ETHDKGFilterer) ParseGPKJSubmissionComplete(log types.Log) (*ETHDKGGPKJSubmissionComplete, error) {
	event := new(ETHDKGGPKJSubmissionComplete)
	if err := _ETHDKG.contract.UnpackLog(event, "GPKJSubmissionComplete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGKeyShareSubmissionCompleteIterator is returned from FilterKeyShareSubmissionComplete and is used to iterate over the raw logs and unpacked data for KeyShareSubmissionComplete events raised by the ETHDKG contract.
type ETHDKGKeyShareSubmissionCompleteIterator struct {
	Event *ETHDKGKeyShareSubmissionComplete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGKeyShareSubmissionCompleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGKeyShareSubmissionComplete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGKeyShareSubmissionComplete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGKeyShareSubmissionCompleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGKeyShareSubmissionCompleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGKeyShareSubmissionComplete represents a KeyShareSubmissionComplete event raised by the ETHDKG contract.
type ETHDKGKeyShareSubmissionComplete struct {
	BlockNumber *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterKeyShareSubmissionComplete is a free log retrieval operation binding the contract event 0x522cec98f6caa194456c44afa9e8cef9ac63eecb0be60e20d180ce19cfb0ef59.
//
// Solidity: event KeyShareSubmissionComplete(uint256 blockNumber)
func (_ETHDKG *ETHDKGFilterer) FilterKeyShareSubmissionComplete(opts *bind.FilterOpts) (*ETHDKGKeyShareSubmissionCompleteIterator, error) {

	logs, sub, err := _ETHDKG.contract.FilterLogs(opts, "KeyShareSubmissionComplete")
	if err != nil {
		return nil, err
	}
	return &ETHDKGKeyShareSubmissionCompleteIterator{contract: _ETHDKG.contract, event: "KeyShareSubmissionComplete", logs: logs, sub: sub}, nil
}

// WatchKeyShareSubmissionComplete is a free log subscription operation binding the contract event 0x522cec98f6caa194456c44afa9e8cef9ac63eecb0be60e20d180ce19cfb0ef59.
//
// Solidity: event KeyShareSubmissionComplete(uint256 blockNumber)
func (_ETHDKG *ETHDKGFilterer) WatchKeyShareSubmissionComplete(opts *bind.WatchOpts, sink chan<- *ETHDKGKeyShareSubmissionComplete) (event.Subscription, error) {

	logs, sub, err := _ETHDKG.contract.WatchLogs(opts, "KeyShareSubmissionComplete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGKeyShareSubmissionComplete)
				if err := _ETHDKG.contract.UnpackLog(event, "KeyShareSubmissionComplete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKeyShareSubmissionComplete is a log parse operation binding the contract event 0x522cec98f6caa194456c44afa9e8cef9ac63eecb0be60e20d180ce19cfb0ef59.
//
// Solidity: event KeyShareSubmissionComplete(uint256 blockNumber)
func (_ETHDKG *ETHDKGFilterer) ParseKeyShareSubmissionComplete(log types.Log) (*ETHDKGKeyShareSubmissionComplete, error) {
	event := new(ETHDKGKeyShareSubmissionComplete)
	if err := _ETHDKG.contract.UnpackLog(event, "KeyShareSubmissionComplete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGKeyShareSubmittedIterator is returned from FilterKeyShareSubmitted and is used to iterate over the raw logs and unpacked data for KeyShareSubmitted events raised by the ETHDKG contract.
type ETHDKGKeyShareSubmittedIterator struct {
	Event *ETHDKGKeyShareSubmitted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGKeyShareSubmittedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGKeyShareSubmitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGKeyShareSubmitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGKeyShareSubmittedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGKeyShareSubmittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGKeyShareSubmitted represents a KeyShareSubmitted event raised by the ETHDKG contract.
type ETHDKGKeyShareSubmitted struct {
	Account                    common.Address
	Index                      *big.Int
	Nonce                      *big.Int
	KeyShareG1                 [2]*big.Int
	KeyShareG1CorrectnessProof [2]*big.Int
	KeyShareG2                 [4]*big.Int
	Raw                        types.Log // Blockchain specific contextual infos
}

// FilterKeyShareSubmitted is a free log retrieval operation binding the contract event 0x6162e2d11398e4063e4c8565dafc4fb6755bbead93747ea836a5ef73a594aaf7.
//
// Solidity: event KeyShareSubmitted(address account, uint256 index, uint256 nonce, uint256[2] keyShareG1, uint256[2] keyShareG1CorrectnessProof, uint256[4] keyShareG2)
func (_ETHDKG *ETHDKGFilterer) FilterKeyShareSubmitted(opts *bind.FilterOpts) (*ETHDKGKeyShareSubmittedIterator, error) {

	logs, sub, err := _ETHDKG.contract.FilterLogs(opts, "KeyShareSubmitted")
	if err != nil {
		return nil, err
	}
	return &ETHDKGKeyShareSubmittedIterator{contract: _ETHDKG.contract, event: "KeyShareSubmitted", logs: logs, sub: sub}, nil
}

// WatchKeyShareSubmitted is a free log subscription operation binding the contract event 0x6162e2d11398e4063e4c8565dafc4fb6755bbead93747ea836a5ef73a594aaf7.
//
// Solidity: event KeyShareSubmitted(address account, uint256 index, uint256 nonce, uint256[2] keyShareG1, uint256[2] keyShareG1CorrectnessProof, uint256[4] keyShareG2)
func (_ETHDKG *ETHDKGFilterer) WatchKeyShareSubmitted(opts *bind.WatchOpts, sink chan<- *ETHDKGKeyShareSubmitted) (event.Subscription, error) {

	logs, sub, err := _ETHDKG.contract.WatchLogs(opts, "KeyShareSubmitted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGKeyShareSubmitted)
				if err := _ETHDKG.contract.UnpackLog(event, "KeyShareSubmitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKeyShareSubmitted is a log parse operation binding the contract event 0x6162e2d11398e4063e4c8565dafc4fb6755bbead93747ea836a5ef73a594aaf7.
//
// Solidity: event KeyShareSubmitted(address account, uint256 index, uint256 nonce, uint256[2] keyShareG1, uint256[2] keyShareG1CorrectnessProof, uint256[4] keyShareG2)
func (_ETHDKG *ETHDKGFilterer) ParseKeyShareSubmitted(log types.Log) (*ETHDKGKeyShareSubmitted, error) {
	event := new(ETHDKGKeyShareSubmitted)
	if err := _ETHDKG.contract.UnpackLog(event, "KeyShareSubmitted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGMPKSetIterator is returned from FilterMPKSet and is used to iterate over the raw logs and unpacked data for MPKSet events raised by the ETHDKG contract.
type ETHDKGMPKSetIterator struct {
	Event *ETHDKGMPKSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGMPKSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGMPKSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGMPKSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGMPKSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGMPKSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGMPKSet represents a MPKSet event raised by the ETHDKG contract.
type ETHDKGMPKSet struct {
	BlockNumber *big.Int
	Nonce       *big.Int
	Mpk         [4]*big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterMPKSet is a free log retrieval operation binding the contract event 0x71b1ebd27be320895a22125d6458e3363aefa6944a312ede4bf275867e6d5a71.
//
// Solidity: event MPKSet(uint256 blockNumber, uint256 nonce, uint256[4] mpk)
func (_ETHDKG *ETHDKGFilterer) FilterMPKSet(opts *bind.FilterOpts) (*ETHDKGMPKSetIterator, error) {

	logs, sub, err := _ETHDKG.contract.FilterLogs(opts, "MPKSet")
	if err != nil {
		return nil, err
	}
	return &ETHDKGMPKSetIterator{contract: _ETHDKG.contract, event: "MPKSet", logs: logs, sub: sub}, nil
}

// WatchMPKSet is a free log subscription operation binding the contract event 0x71b1ebd27be320895a22125d6458e3363aefa6944a312ede4bf275867e6d5a71.
//
// Solidity: event MPKSet(uint256 blockNumber, uint256 nonce, uint256[4] mpk)
func (_ETHDKG *ETHDKGFilterer) WatchMPKSet(opts *bind.WatchOpts, sink chan<- *ETHDKGMPKSet) (event.Subscription, error) {

	logs, sub, err := _ETHDKG.contract.WatchLogs(opts, "MPKSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGMPKSet)
				if err := _ETHDKG.contract.UnpackLog(event, "MPKSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMPKSet is a log parse operation binding the contract event 0x71b1ebd27be320895a22125d6458e3363aefa6944a312ede4bf275867e6d5a71.
//
// Solidity: event MPKSet(uint256 blockNumber, uint256 nonce, uint256[4] mpk)
func (_ETHDKG *ETHDKGFilterer) ParseMPKSet(log types.Log) (*ETHDKGMPKSet, error) {
	event := new(ETHDKGMPKSet)
	if err := _ETHDKG.contract.UnpackLog(event, "MPKSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGRegistrationCompleteIterator is returned from FilterRegistrationComplete and is used to iterate over the raw logs and unpacked data for RegistrationComplete events raised by the ETHDKG contract.
type ETHDKGRegistrationCompleteIterator struct {
	Event *ETHDKGRegistrationComplete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGRegistrationCompleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGRegistrationComplete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGRegistrationComplete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGRegistrationCompleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGRegistrationCompleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGRegistrationComplete represents a RegistrationComplete event raised by the ETHDKG contract.
type ETHDKGRegistrationComplete struct {
	BlockNumber *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRegistrationComplete is a free log retrieval operation binding the contract event 0x833013b96b786b4eca83baac286920e5e53956c21ff3894f1d9f02e97d6ed764.
//
// Solidity: event RegistrationComplete(uint256 blockNumber)
func (_ETHDKG *ETHDKGFilterer) FilterRegistrationComplete(opts *bind.FilterOpts) (*ETHDKGRegistrationCompleteIterator, error) {

	logs, sub, err := _ETHDKG.contract.FilterLogs(opts, "RegistrationComplete")
	if err != nil {
		return nil, err
	}
	return &ETHDKGRegistrationCompleteIterator{contract: _ETHDKG.contract, event: "RegistrationComplete", logs: logs, sub: sub}, nil
}

// WatchRegistrationComplete is a free log subscription operation binding the contract event 0x833013b96b786b4eca83baac286920e5e53956c21ff3894f1d9f02e97d6ed764.
//
// Solidity: event RegistrationComplete(uint256 blockNumber)
func (_ETHDKG *ETHDKGFilterer) WatchRegistrationComplete(opts *bind.WatchOpts, sink chan<- *ETHDKGRegistrationComplete) (event.Subscription, error) {

	logs, sub, err := _ETHDKG.contract.WatchLogs(opts, "RegistrationComplete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGRegistrationComplete)
				if err := _ETHDKG.contract.UnpackLog(event, "RegistrationComplete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegistrationComplete is a log parse operation binding the contract event 0x833013b96b786b4eca83baac286920e5e53956c21ff3894f1d9f02e97d6ed764.
//
// Solidity: event RegistrationComplete(uint256 blockNumber)
func (_ETHDKG *ETHDKGFilterer) ParseRegistrationComplete(log types.Log) (*ETHDKGRegistrationComplete, error) {
	event := new(ETHDKGRegistrationComplete)
	if err := _ETHDKG.contract.UnpackLog(event, "RegistrationComplete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGRegistrationOpenedIterator is returned from FilterRegistrationOpened and is used to iterate over the raw logs and unpacked data for RegistrationOpened events raised by the ETHDKG contract.
type ETHDKGRegistrationOpenedIterator struct {
	Event *ETHDKGRegistrationOpened // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGRegistrationOpenedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGRegistrationOpened)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGRegistrationOpened)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGRegistrationOpenedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGRegistrationOpenedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGRegistrationOpened represents a RegistrationOpened event raised by the ETHDKG contract.
type ETHDKGRegistrationOpened struct {
	StartBlock         *big.Int
	NumberValidators   *big.Int
	Nonce              *big.Int
	PhaseLength        *big.Int
	ConfirmationLength *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterRegistrationOpened is a free log retrieval operation binding the contract event 0xbda431b9b63510f1398bf33d700e013315bcba905507078a1780f13ea5b354b9.
//
// Solidity: event RegistrationOpened(uint256 startBlock, uint256 numberValidators, uint256 nonce, uint256 phaseLength, uint256 confirmationLength)
func (_ETHDKG *ETHDKGFilterer) FilterRegistrationOpened(opts *bind.FilterOpts) (*ETHDKGRegistrationOpenedIterator, error) {

	logs, sub, err := _ETHDKG.contract.FilterLogs(opts, "RegistrationOpened")
	if err != nil {
		return nil, err
	}
	return &ETHDKGRegistrationOpenedIterator{contract: _ETHDKG.contract, event: "RegistrationOpened", logs: logs, sub: sub}, nil
}

// WatchRegistrationOpened is a free log subscription operation binding the contract event 0xbda431b9b63510f1398bf33d700e013315bcba905507078a1780f13ea5b354b9.
//
// Solidity: event RegistrationOpened(uint256 startBlock, uint256 numberValidators, uint256 nonce, uint256 phaseLength, uint256 confirmationLength)
func (_ETHDKG *ETHDKGFilterer) WatchRegistrationOpened(opts *bind.WatchOpts, sink chan<- *ETHDKGRegistrationOpened) (event.Subscription, error) {

	logs, sub, err := _ETHDKG.contract.WatchLogs(opts, "RegistrationOpened")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGRegistrationOpened)
				if err := _ETHDKG.contract.UnpackLog(event, "RegistrationOpened", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegistrationOpened is a log parse operation binding the contract event 0xbda431b9b63510f1398bf33d700e013315bcba905507078a1780f13ea5b354b9.
//
// Solidity: event RegistrationOpened(uint256 startBlock, uint256 numberValidators, uint256 nonce, uint256 phaseLength, uint256 confirmationLength)
func (_ETHDKG *ETHDKGFilterer) ParseRegistrationOpened(log types.Log) (*ETHDKGRegistrationOpened, error) {
	event := new(ETHDKGRegistrationOpened)
	if err := _ETHDKG.contract.UnpackLog(event, "RegistrationOpened", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGShareDistributionCompleteIterator is returned from FilterShareDistributionComplete and is used to iterate over the raw logs and unpacked data for ShareDistributionComplete events raised by the ETHDKG contract.
type ETHDKGShareDistributionCompleteIterator struct {
	Event *ETHDKGShareDistributionComplete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGShareDistributionCompleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGShareDistributionComplete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGShareDistributionComplete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGShareDistributionCompleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGShareDistributionCompleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGShareDistributionComplete represents a ShareDistributionComplete event raised by the ETHDKG contract.
type ETHDKGShareDistributionComplete struct {
	BlockNumber *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterShareDistributionComplete is a free log retrieval operation binding the contract event 0xbfe94ffef5ddde4d25ac7b652f3f67686ea63f9badbfe1f25451e26fc262d11c.
//
// Solidity: event ShareDistributionComplete(uint256 blockNumber)
func (_ETHDKG *ETHDKGFilterer) FilterShareDistributionComplete(opts *bind.FilterOpts) (*ETHDKGShareDistributionCompleteIterator, error) {

	logs, sub, err := _ETHDKG.contract.FilterLogs(opts, "ShareDistributionComplete")
	if err != nil {
		return nil, err
	}
	return &ETHDKGShareDistributionCompleteIterator{contract: _ETHDKG.contract, event: "ShareDistributionComplete", logs: logs, sub: sub}, nil
}

// WatchShareDistributionComplete is a free log subscription operation binding the contract event 0xbfe94ffef5ddde4d25ac7b652f3f67686ea63f9badbfe1f25451e26fc262d11c.
//
// Solidity: event ShareDistributionComplete(uint256 blockNumber)
func (_ETHDKG *ETHDKGFilterer) WatchShareDistributionComplete(opts *bind.WatchOpts, sink chan<- *ETHDKGShareDistributionComplete) (event.Subscription, error) {

	logs, sub, err := _ETHDKG.contract.WatchLogs(opts, "ShareDistributionComplete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGShareDistributionComplete)
				if err := _ETHDKG.contract.UnpackLog(event, "ShareDistributionComplete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseShareDistributionComplete is a log parse operation binding the contract event 0xbfe94ffef5ddde4d25ac7b652f3f67686ea63f9badbfe1f25451e26fc262d11c.
//
// Solidity: event ShareDistributionComplete(uint256 blockNumber)
func (_ETHDKG *ETHDKGFilterer) ParseShareDistributionComplete(log types.Log) (*ETHDKGShareDistributionComplete, error) {
	event := new(ETHDKGShareDistributionComplete)
	if err := _ETHDKG.contract.UnpackLog(event, "ShareDistributionComplete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGSharesDistributedIterator is returned from FilterSharesDistributed and is used to iterate over the raw logs and unpacked data for SharesDistributed events raised by the ETHDKG contract.
type ETHDKGSharesDistributedIterator struct {
	Event *ETHDKGSharesDistributed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGSharesDistributedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGSharesDistributed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGSharesDistributed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGSharesDistributedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGSharesDistributedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGSharesDistributed represents a SharesDistributed event raised by the ETHDKG contract.
type ETHDKGSharesDistributed struct {
	Account         common.Address
	Index           *big.Int
	Nonce           *big.Int
	EncryptedShares []*big.Int
	Commitments     [][2]*big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterSharesDistributed is a free log retrieval operation binding the contract event 0xf0c8b0ef2867c2b4639b404a0296b6bbf0bf97e20856af42144a5a6035c0d0d2.
//
// Solidity: event SharesDistributed(address account, uint256 index, uint256 nonce, uint256[] encryptedShares, uint256[2][] commitments)
func (_ETHDKG *ETHDKGFilterer) FilterSharesDistributed(opts *bind.FilterOpts) (*ETHDKGSharesDistributedIterator, error) {

	logs, sub, err := _ETHDKG.contract.FilterLogs(opts, "SharesDistributed")
	if err != nil {
		return nil, err
	}
	return &ETHDKGSharesDistributedIterator{contract: _ETHDKG.contract, event: "SharesDistributed", logs: logs, sub: sub}, nil
}

// WatchSharesDistributed is a free log subscription operation binding the contract event 0xf0c8b0ef2867c2b4639b404a0296b6bbf0bf97e20856af42144a5a6035c0d0d2.
//
// Solidity: event SharesDistributed(address account, uint256 index, uint256 nonce, uint256[] encryptedShares, uint256[2][] commitments)
func (_ETHDKG *ETHDKGFilterer) WatchSharesDistributed(opts *bind.WatchOpts, sink chan<- *ETHDKGSharesDistributed) (event.Subscription, error) {

	logs, sub, err := _ETHDKG.contract.WatchLogs(opts, "SharesDistributed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGSharesDistributed)
				if err := _ETHDKG.contract.UnpackLog(event, "SharesDistributed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSharesDistributed is a log parse operation binding the contract event 0xf0c8b0ef2867c2b4639b404a0296b6bbf0bf97e20856af42144a5a6035c0d0d2.
//
// Solidity: event SharesDistributed(address account, uint256 index, uint256 nonce, uint256[] encryptedShares, uint256[2][] commitments)
func (_ETHDKG *ETHDKGFilterer) ParseSharesDistributed(log types.Log) (*ETHDKGSharesDistributed, error) {
	event := new(ETHDKGSharesDistributed)
	if err := _ETHDKG.contract.UnpackLog(event, "SharesDistributed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGValidatorMemberAddedIterator is returned from FilterValidatorMemberAdded and is used to iterate over the raw logs and unpacked data for ValidatorMemberAdded events raised by the ETHDKG contract.
type ETHDKGValidatorMemberAddedIterator struct {
	Event *ETHDKGValidatorMemberAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGValidatorMemberAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGValidatorMemberAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGValidatorMemberAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGValidatorMemberAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGValidatorMemberAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGValidatorMemberAdded represents a ValidatorMemberAdded event raised by the ETHDKG contract.
type ETHDKGValidatorMemberAdded struct {
	Account common.Address
	Index   *big.Int
	Nonce   *big.Int
	Epoch   *big.Int
	Share0  *big.Int
	Share1  *big.Int
	Share2  *big.Int
	Share3  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterValidatorMemberAdded is a free log retrieval operation binding the contract event 0x09b90b08bbc3dbe22e9d2a0bc9c2c7614c7511cd0ad72177727a1e762115bf06.
//
// Solidity: event ValidatorMemberAdded(address account, uint256 index, uint256 nonce, uint256 epoch, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_ETHDKG *ETHDKGFilterer) FilterValidatorMemberAdded(opts *bind.FilterOpts) (*ETHDKGValidatorMemberAddedIterator, error) {

	logs, sub, err := _ETHDKG.contract.FilterLogs(opts, "ValidatorMemberAdded")
	if err != nil {
		return nil, err
	}
	return &ETHDKGValidatorMemberAddedIterator{contract: _ETHDKG.contract, event: "ValidatorMemberAdded", logs: logs, sub: sub}, nil
}

// WatchValidatorMemberAdded is a free log subscription operation binding the contract event 0x09b90b08bbc3dbe22e9d2a0bc9c2c7614c7511cd0ad72177727a1e762115bf06.
//
// Solidity: event ValidatorMemberAdded(address account, uint256 index, uint256 nonce, uint256 epoch, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_ETHDKG *ETHDKGFilterer) WatchValidatorMemberAdded(opts *bind.WatchOpts, sink chan<- *ETHDKGValidatorMemberAdded) (event.Subscription, error) {

	logs, sub, err := _ETHDKG.contract.WatchLogs(opts, "ValidatorMemberAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGValidatorMemberAdded)
				if err := _ETHDKG.contract.UnpackLog(event, "ValidatorMemberAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorMemberAdded is a log parse operation binding the contract event 0x09b90b08bbc3dbe22e9d2a0bc9c2c7614c7511cd0ad72177727a1e762115bf06.
//
// Solidity: event ValidatorMemberAdded(address account, uint256 index, uint256 nonce, uint256 epoch, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_ETHDKG *ETHDKGFilterer) ParseValidatorMemberAdded(log types.Log) (*ETHDKGValidatorMemberAdded, error) {
	event := new(ETHDKGValidatorMemberAdded)
	if err := _ETHDKG.contract.UnpackLog(event, "ValidatorMemberAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGValidatorSetCompletedIterator is returned from FilterValidatorSetCompleted and is used to iterate over the raw logs and unpacked data for ValidatorSetCompleted events raised by the ETHDKG contract.
type ETHDKGValidatorSetCompletedIterator struct {
	Event *ETHDKGValidatorSetCompleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGValidatorSetCompletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGValidatorSetCompleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGValidatorSetCompleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGValidatorSetCompletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGValidatorSetCompletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGValidatorSetCompleted represents a ValidatorSetCompleted event raised by the ETHDKG contract.
type ETHDKGValidatorSetCompleted struct {
	ValidatorCount *big.Int
	Nonce          *big.Int
	Epoch          *big.Int
	EthHeight      *big.Int
	MadHeight      *big.Int
	GroupKey0      *big.Int
	GroupKey1      *big.Int
	GroupKey2      *big.Int
	GroupKey3      *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterValidatorSetCompleted is a free log retrieval operation binding the contract event 0xd7237b781669fa700ecf77be6cd8fa0f4b98b1a24ac584a9b6b44c509216718a.
//
// Solidity: event ValidatorSetCompleted(uint256 validatorCount, uint256 nonce, uint256 epoch, uint256 ethHeight, uint256 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_ETHDKG *ETHDKGFilterer) FilterValidatorSetCompleted(opts *bind.FilterOpts) (*ETHDKGValidatorSetCompletedIterator, error) {

	logs, sub, err := _ETHDKG.contract.FilterLogs(opts, "ValidatorSetCompleted")
	if err != nil {
		return nil, err
	}
	return &ETHDKGValidatorSetCompletedIterator{contract: _ETHDKG.contract, event: "ValidatorSetCompleted", logs: logs, sub: sub}, nil
}

// WatchValidatorSetCompleted is a free log subscription operation binding the contract event 0xd7237b781669fa700ecf77be6cd8fa0f4b98b1a24ac584a9b6b44c509216718a.
//
// Solidity: event ValidatorSetCompleted(uint256 validatorCount, uint256 nonce, uint256 epoch, uint256 ethHeight, uint256 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_ETHDKG *ETHDKGFilterer) WatchValidatorSetCompleted(opts *bind.WatchOpts, sink chan<- *ETHDKGValidatorSetCompleted) (event.Subscription, error) {

	logs, sub, err := _ETHDKG.contract.WatchLogs(opts, "ValidatorSetCompleted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGValidatorSetCompleted)
				if err := _ETHDKG.contract.UnpackLog(event, "ValidatorSetCompleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorSetCompleted is a log parse operation binding the contract event 0xd7237b781669fa700ecf77be6cd8fa0f4b98b1a24ac584a9b6b44c509216718a.
//
// Solidity: event ValidatorSetCompleted(uint256 validatorCount, uint256 nonce, uint256 epoch, uint256 ethHeight, uint256 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_ETHDKG *ETHDKGFilterer) ParseValidatorSetCompleted(log types.Log) (*ETHDKGValidatorSetCompleted, error) {
	event := new(ETHDKGValidatorSetCompleted)
	if err := _ETHDKG.contract.UnpackLog(event, "ValidatorSetCompleted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGAccusationsMetaData contains all meta data concerning the ETHDKGAccusations contract.
var ETHDKGAccusationsMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"publicKey\",\"type\":\"uint256[2]\"}],\"name\":\"AddressRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"GPKJSubmissionComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"KeyShareSubmissionComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"keyShareG1\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"keyShareG1CorrectnessProof\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[4]\",\"name\":\"keyShareG2\",\"type\":\"uint256[4]\"}],\"name\":\"KeyShareSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[4]\",\"name\":\"mpk\",\"type\":\"uint256[4]\"}],\"name\":\"MPKSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"RegistrationComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numberValidators\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"phaseLength\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"confirmationLength\",\"type\":\"uint256\"}],\"name\":\"RegistrationOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"ShareDistributionComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"encryptedShares\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[2][]\",\"name\":\"commitments\",\"type\":\"uint256[2][]\"}],\"name\":\"SharesDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share3\",\"type\":\"uint256\"}],\"name\":\"ValidatorMemberAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validatorCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethHeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"madHeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey3\",\"type\":\"uint256\"}],\"name\":\"ValidatorSetCompleted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"dishonestAddresses\",\"type\":\"address[]\"}],\"name\":\"accuseParticipantDidNotDistributeShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"dishonestAddresses\",\"type\":\"address[]\"}],\"name\":\"accuseParticipantDidNotSubmitGPKJ\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"dishonestAddresses\",\"type\":\"address[]\"}],\"name\":\"accuseParticipantDidNotSubmitKeyShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dishonestAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"encryptedShares\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[2][]\",\"name\":\"commitments\",\"type\":\"uint256[2][]\"},{\"internalType\":\"uint256[2]\",\"name\":\"sharedKey\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"sharedKeyCorrectnessProof\",\"type\":\"uint256[2]\"}],\"name\":\"accuseParticipantDistributedBadShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"dishonestAddresses\",\"type\":\"address[]\"}],\"name\":\"accuseParticipantNotRegistered\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"encryptedSharesHash\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[2][][]\",\"name\":\"commitments\",\"type\":\"uint256[2][][]\"},{\"internalType\":\"address\",\"name\":\"dishonestAddress\",\"type\":\"address\"}],\"name\":\"accuseParticipantSubmittedBadGPKJ\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "",
}

// ETHDKGAccusationsABI is the input ABI used to generate the binding from.
// Deprecated: Use ETHDKGAccusationsMetaData.ABI instead.
var ETHDKGAccusationsABI = ETHDKGAccusationsMetaData.ABI

// ETHDKGAccusationsBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ETHDKGAccusationsMetaData.Bin instead.
var ETHDKGAccusationsBin = ETHDKGAccusationsMetaData.Bin

// DeployETHDKGAccusations deploys a new Ethereum contract, binding an instance of ETHDKGAccusations to it.
func DeployETHDKGAccusations(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ETHDKGAccusations, error) {
	parsed, err := ETHDKGAccusationsMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ETHDKGAccusationsBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ETHDKGAccusations{ETHDKGAccusationsCaller: ETHDKGAccusationsCaller{contract: contract}, ETHDKGAccusationsTransactor: ETHDKGAccusationsTransactor{contract: contract}, ETHDKGAccusationsFilterer: ETHDKGAccusationsFilterer{contract: contract}}, nil
}

// ETHDKGAccusations is an auto generated Go binding around an Ethereum contract.
type ETHDKGAccusations struct {
	ETHDKGAccusationsCaller     // Read-only binding to the contract
	ETHDKGAccusationsTransactor // Write-only binding to the contract
	ETHDKGAccusationsFilterer   // Log filterer for contract events
}

// ETHDKGAccusationsCaller is an auto generated read-only Go binding around an Ethereum contract.
type ETHDKGAccusationsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETHDKGAccusationsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ETHDKGAccusationsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETHDKGAccusationsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ETHDKGAccusationsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETHDKGAccusationsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ETHDKGAccusationsSession struct {
	Contract     *ETHDKGAccusations // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// ETHDKGAccusationsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ETHDKGAccusationsCallerSession struct {
	Contract *ETHDKGAccusationsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// ETHDKGAccusationsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ETHDKGAccusationsTransactorSession struct {
	Contract     *ETHDKGAccusationsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// ETHDKGAccusationsRaw is an auto generated low-level Go binding around an Ethereum contract.
type ETHDKGAccusationsRaw struct {
	Contract *ETHDKGAccusations // Generic contract binding to access the raw methods on
}

// ETHDKGAccusationsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ETHDKGAccusationsCallerRaw struct {
	Contract *ETHDKGAccusationsCaller // Generic read-only contract binding to access the raw methods on
}

// ETHDKGAccusationsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ETHDKGAccusationsTransactorRaw struct {
	Contract *ETHDKGAccusationsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewETHDKGAccusations creates a new instance of ETHDKGAccusations, bound to a specific deployed contract.
func NewETHDKGAccusations(address common.Address, backend bind.ContractBackend) (*ETHDKGAccusations, error) {
	contract, err := bindETHDKGAccusations(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ETHDKGAccusations{ETHDKGAccusationsCaller: ETHDKGAccusationsCaller{contract: contract}, ETHDKGAccusationsTransactor: ETHDKGAccusationsTransactor{contract: contract}, ETHDKGAccusationsFilterer: ETHDKGAccusationsFilterer{contract: contract}}, nil
}

// NewETHDKGAccusationsCaller creates a new read-only instance of ETHDKGAccusations, bound to a specific deployed contract.
func NewETHDKGAccusationsCaller(address common.Address, caller bind.ContractCaller) (*ETHDKGAccusationsCaller, error) {
	contract, err := bindETHDKGAccusations(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ETHDKGAccusationsCaller{contract: contract}, nil
}

// NewETHDKGAccusationsTransactor creates a new write-only instance of ETHDKGAccusations, bound to a specific deployed contract.
func NewETHDKGAccusationsTransactor(address common.Address, transactor bind.ContractTransactor) (*ETHDKGAccusationsTransactor, error) {
	contract, err := bindETHDKGAccusations(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ETHDKGAccusationsTransactor{contract: contract}, nil
}

// NewETHDKGAccusationsFilterer creates a new log filterer instance of ETHDKGAccusations, bound to a specific deployed contract.
func NewETHDKGAccusationsFilterer(address common.Address, filterer bind.ContractFilterer) (*ETHDKGAccusationsFilterer, error) {
	contract, err := bindETHDKGAccusations(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ETHDKGAccusationsFilterer{contract: contract}, nil
}

// bindETHDKGAccusations binds a generic wrapper to an already deployed contract.
func bindETHDKGAccusations(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ETHDKGAccusationsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ETHDKGAccusations *ETHDKGAccusationsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ETHDKGAccusations.Contract.ETHDKGAccusationsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ETHDKGAccusations *ETHDKGAccusationsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETHDKGAccusations.Contract.ETHDKGAccusationsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ETHDKGAccusations *ETHDKGAccusationsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ETHDKGAccusations.Contract.ETHDKGAccusationsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ETHDKGAccusations *ETHDKGAccusationsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ETHDKGAccusations.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ETHDKGAccusations *ETHDKGAccusationsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETHDKGAccusations.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ETHDKGAccusations *ETHDKGAccusationsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ETHDKGAccusations.Contract.contract.Transact(opts, method, params...)
}

// AccuseParticipantDidNotDistributeShares is a paid mutator transaction binding the contract method 0xdae681bc.
//
// Solidity: function accuseParticipantDidNotDistributeShares(address[] dishonestAddresses) returns()
func (_ETHDKGAccusations *ETHDKGAccusationsTransactor) AccuseParticipantDidNotDistributeShares(opts *bind.TransactOpts, dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKGAccusations.contract.Transact(opts, "accuseParticipantDidNotDistributeShares", dishonestAddresses)
}

// AccuseParticipantDidNotDistributeShares is a paid mutator transaction binding the contract method 0xdae681bc.
//
// Solidity: function accuseParticipantDidNotDistributeShares(address[] dishonestAddresses) returns()
func (_ETHDKGAccusations *ETHDKGAccusationsSession) AccuseParticipantDidNotDistributeShares(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKGAccusations.Contract.AccuseParticipantDidNotDistributeShares(&_ETHDKGAccusations.TransactOpts, dishonestAddresses)
}

// AccuseParticipantDidNotDistributeShares is a paid mutator transaction binding the contract method 0xdae681bc.
//
// Solidity: function accuseParticipantDidNotDistributeShares(address[] dishonestAddresses) returns()
func (_ETHDKGAccusations *ETHDKGAccusationsTransactorSession) AccuseParticipantDidNotDistributeShares(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKGAccusations.Contract.AccuseParticipantDidNotDistributeShares(&_ETHDKGAccusations.TransactOpts, dishonestAddresses)
}

// AccuseParticipantDidNotSubmitGPKJ is a paid mutator transaction binding the contract method 0x7df24ee9.
//
// Solidity: function accuseParticipantDidNotSubmitGPKJ(address[] dishonestAddresses) returns()
func (_ETHDKGAccusations *ETHDKGAccusationsTransactor) AccuseParticipantDidNotSubmitGPKJ(opts *bind.TransactOpts, dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKGAccusations.contract.Transact(opts, "accuseParticipantDidNotSubmitGPKJ", dishonestAddresses)
}

// AccuseParticipantDidNotSubmitGPKJ is a paid mutator transaction binding the contract method 0x7df24ee9.
//
// Solidity: function accuseParticipantDidNotSubmitGPKJ(address[] dishonestAddresses) returns()
func (_ETHDKGAccusations *ETHDKGAccusationsSession) AccuseParticipantDidNotSubmitGPKJ(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKGAccusations.Contract.AccuseParticipantDidNotSubmitGPKJ(&_ETHDKGAccusations.TransactOpts, dishonestAddresses)
}

// AccuseParticipantDidNotSubmitGPKJ is a paid mutator transaction binding the contract method 0x7df24ee9.
//
// Solidity: function accuseParticipantDidNotSubmitGPKJ(address[] dishonestAddresses) returns()
func (_ETHDKGAccusations *ETHDKGAccusationsTransactorSession) AccuseParticipantDidNotSubmitGPKJ(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKGAccusations.Contract.AccuseParticipantDidNotSubmitGPKJ(&_ETHDKGAccusations.TransactOpts, dishonestAddresses)
}

// AccuseParticipantDidNotSubmitKeyShares is a paid mutator transaction binding the contract method 0x043a6f12.
//
// Solidity: function accuseParticipantDidNotSubmitKeyShares(address[] dishonestAddresses) returns()
func (_ETHDKGAccusations *ETHDKGAccusationsTransactor) AccuseParticipantDidNotSubmitKeyShares(opts *bind.TransactOpts, dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKGAccusations.contract.Transact(opts, "accuseParticipantDidNotSubmitKeyShares", dishonestAddresses)
}

// AccuseParticipantDidNotSubmitKeyShares is a paid mutator transaction binding the contract method 0x043a6f12.
//
// Solidity: function accuseParticipantDidNotSubmitKeyShares(address[] dishonestAddresses) returns()
func (_ETHDKGAccusations *ETHDKGAccusationsSession) AccuseParticipantDidNotSubmitKeyShares(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKGAccusations.Contract.AccuseParticipantDidNotSubmitKeyShares(&_ETHDKGAccusations.TransactOpts, dishonestAddresses)
}

// AccuseParticipantDidNotSubmitKeyShares is a paid mutator transaction binding the contract method 0x043a6f12.
//
// Solidity: function accuseParticipantDidNotSubmitKeyShares(address[] dishonestAddresses) returns()
func (_ETHDKGAccusations *ETHDKGAccusationsTransactorSession) AccuseParticipantDidNotSubmitKeyShares(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKGAccusations.Contract.AccuseParticipantDidNotSubmitKeyShares(&_ETHDKGAccusations.TransactOpts, dishonestAddresses)
}

// AccuseParticipantDistributedBadShares is a paid mutator transaction binding the contract method 0xedbe7bf7.
//
// Solidity: function accuseParticipantDistributedBadShares(address dishonestAddress, uint256[] encryptedShares, uint256[2][] commitments, uint256[2] sharedKey, uint256[2] sharedKeyCorrectnessProof) returns()
func (_ETHDKGAccusations *ETHDKGAccusationsTransactor) AccuseParticipantDistributedBadShares(opts *bind.TransactOpts, dishonestAddress common.Address, encryptedShares []*big.Int, commitments [][2]*big.Int, sharedKey [2]*big.Int, sharedKeyCorrectnessProof [2]*big.Int) (*types.Transaction, error) {
	return _ETHDKGAccusations.contract.Transact(opts, "accuseParticipantDistributedBadShares", dishonestAddress, encryptedShares, commitments, sharedKey, sharedKeyCorrectnessProof)
}

// AccuseParticipantDistributedBadShares is a paid mutator transaction binding the contract method 0xedbe7bf7.
//
// Solidity: function accuseParticipantDistributedBadShares(address dishonestAddress, uint256[] encryptedShares, uint256[2][] commitments, uint256[2] sharedKey, uint256[2] sharedKeyCorrectnessProof) returns()
func (_ETHDKGAccusations *ETHDKGAccusationsSession) AccuseParticipantDistributedBadShares(dishonestAddress common.Address, encryptedShares []*big.Int, commitments [][2]*big.Int, sharedKey [2]*big.Int, sharedKeyCorrectnessProof [2]*big.Int) (*types.Transaction, error) {
	return _ETHDKGAccusations.Contract.AccuseParticipantDistributedBadShares(&_ETHDKGAccusations.TransactOpts, dishonestAddress, encryptedShares, commitments, sharedKey, sharedKeyCorrectnessProof)
}

// AccuseParticipantDistributedBadShares is a paid mutator transaction binding the contract method 0xedbe7bf7.
//
// Solidity: function accuseParticipantDistributedBadShares(address dishonestAddress, uint256[] encryptedShares, uint256[2][] commitments, uint256[2] sharedKey, uint256[2] sharedKeyCorrectnessProof) returns()
func (_ETHDKGAccusations *ETHDKGAccusationsTransactorSession) AccuseParticipantDistributedBadShares(dishonestAddress common.Address, encryptedShares []*big.Int, commitments [][2]*big.Int, sharedKey [2]*big.Int, sharedKeyCorrectnessProof [2]*big.Int) (*types.Transaction, error) {
	return _ETHDKGAccusations.Contract.AccuseParticipantDistributedBadShares(&_ETHDKGAccusations.TransactOpts, dishonestAddress, encryptedShares, commitments, sharedKey, sharedKeyCorrectnessProof)
}

// AccuseParticipantNotRegistered is a paid mutator transaction binding the contract method 0xf72c45b6.
//
// Solidity: function accuseParticipantNotRegistered(address[] dishonestAddresses) returns()
func (_ETHDKGAccusations *ETHDKGAccusationsTransactor) AccuseParticipantNotRegistered(opts *bind.TransactOpts, dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKGAccusations.contract.Transact(opts, "accuseParticipantNotRegistered", dishonestAddresses)
}

// AccuseParticipantNotRegistered is a paid mutator transaction binding the contract method 0xf72c45b6.
//
// Solidity: function accuseParticipantNotRegistered(address[] dishonestAddresses) returns()
func (_ETHDKGAccusations *ETHDKGAccusationsSession) AccuseParticipantNotRegistered(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKGAccusations.Contract.AccuseParticipantNotRegistered(&_ETHDKGAccusations.TransactOpts, dishonestAddresses)
}

// AccuseParticipantNotRegistered is a paid mutator transaction binding the contract method 0xf72c45b6.
//
// Solidity: function accuseParticipantNotRegistered(address[] dishonestAddresses) returns()
func (_ETHDKGAccusations *ETHDKGAccusationsTransactorSession) AccuseParticipantNotRegistered(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKGAccusations.Contract.AccuseParticipantNotRegistered(&_ETHDKGAccusations.TransactOpts, dishonestAddresses)
}

// AccuseParticipantSubmittedBadGPKJ is a paid mutator transaction binding the contract method 0x80001264.
//
// Solidity: function accuseParticipantSubmittedBadGPKJ(address[] validators, bytes32[] encryptedSharesHash, uint256[2][][] commitments, address dishonestAddress) returns()
func (_ETHDKGAccusations *ETHDKGAccusationsTransactor) AccuseParticipantSubmittedBadGPKJ(opts *bind.TransactOpts, validators []common.Address, encryptedSharesHash [][32]byte, commitments [][][2]*big.Int, dishonestAddress common.Address) (*types.Transaction, error) {
	return _ETHDKGAccusations.contract.Transact(opts, "accuseParticipantSubmittedBadGPKJ", validators, encryptedSharesHash, commitments, dishonestAddress)
}

// AccuseParticipantSubmittedBadGPKJ is a paid mutator transaction binding the contract method 0x80001264.
//
// Solidity: function accuseParticipantSubmittedBadGPKJ(address[] validators, bytes32[] encryptedSharesHash, uint256[2][][] commitments, address dishonestAddress) returns()
func (_ETHDKGAccusations *ETHDKGAccusationsSession) AccuseParticipantSubmittedBadGPKJ(validators []common.Address, encryptedSharesHash [][32]byte, commitments [][][2]*big.Int, dishonestAddress common.Address) (*types.Transaction, error) {
	return _ETHDKGAccusations.Contract.AccuseParticipantSubmittedBadGPKJ(&_ETHDKGAccusations.TransactOpts, validators, encryptedSharesHash, commitments, dishonestAddress)
}

// AccuseParticipantSubmittedBadGPKJ is a paid mutator transaction binding the contract method 0x80001264.
//
// Solidity: function accuseParticipantSubmittedBadGPKJ(address[] validators, bytes32[] encryptedSharesHash, uint256[2][][] commitments, address dishonestAddress) returns()
func (_ETHDKGAccusations *ETHDKGAccusationsTransactorSession) AccuseParticipantSubmittedBadGPKJ(validators []common.Address, encryptedSharesHash [][32]byte, commitments [][][2]*big.Int, dishonestAddress common.Address) (*types.Transaction, error) {
	return _ETHDKGAccusations.Contract.AccuseParticipantSubmittedBadGPKJ(&_ETHDKGAccusations.TransactOpts, validators, encryptedSharesHash, commitments, dishonestAddress)
}

// ETHDKGAccusationsAddressRegisteredIterator is returned from FilterAddressRegistered and is used to iterate over the raw logs and unpacked data for AddressRegistered events raised by the ETHDKGAccusations contract.
type ETHDKGAccusationsAddressRegisteredIterator struct {
	Event *ETHDKGAccusationsAddressRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGAccusationsAddressRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGAccusationsAddressRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGAccusationsAddressRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGAccusationsAddressRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGAccusationsAddressRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGAccusationsAddressRegistered represents a AddressRegistered event raised by the ETHDKGAccusations contract.
type ETHDKGAccusationsAddressRegistered struct {
	Account   common.Address
	Index     *big.Int
	Nonce     *big.Int
	PublicKey [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAddressRegistered is a free log retrieval operation binding the contract event 0x7f1304057ec61140fbf2f5f236790f34fcafe123d3eb0d298d92317c97da500d.
//
// Solidity: event AddressRegistered(address account, uint256 index, uint256 nonce, uint256[2] publicKey)
func (_ETHDKGAccusations *ETHDKGAccusationsFilterer) FilterAddressRegistered(opts *bind.FilterOpts) (*ETHDKGAccusationsAddressRegisteredIterator, error) {

	logs, sub, err := _ETHDKGAccusations.contract.FilterLogs(opts, "AddressRegistered")
	if err != nil {
		return nil, err
	}
	return &ETHDKGAccusationsAddressRegisteredIterator{contract: _ETHDKGAccusations.contract, event: "AddressRegistered", logs: logs, sub: sub}, nil
}

// WatchAddressRegistered is a free log subscription operation binding the contract event 0x7f1304057ec61140fbf2f5f236790f34fcafe123d3eb0d298d92317c97da500d.
//
// Solidity: event AddressRegistered(address account, uint256 index, uint256 nonce, uint256[2] publicKey)
func (_ETHDKGAccusations *ETHDKGAccusationsFilterer) WatchAddressRegistered(opts *bind.WatchOpts, sink chan<- *ETHDKGAccusationsAddressRegistered) (event.Subscription, error) {

	logs, sub, err := _ETHDKGAccusations.contract.WatchLogs(opts, "AddressRegistered")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGAccusationsAddressRegistered)
				if err := _ETHDKGAccusations.contract.UnpackLog(event, "AddressRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddressRegistered is a log parse operation binding the contract event 0x7f1304057ec61140fbf2f5f236790f34fcafe123d3eb0d298d92317c97da500d.
//
// Solidity: event AddressRegistered(address account, uint256 index, uint256 nonce, uint256[2] publicKey)
func (_ETHDKGAccusations *ETHDKGAccusationsFilterer) ParseAddressRegistered(log types.Log) (*ETHDKGAccusationsAddressRegistered, error) {
	event := new(ETHDKGAccusationsAddressRegistered)
	if err := _ETHDKGAccusations.contract.UnpackLog(event, "AddressRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGAccusationsGPKJSubmissionCompleteIterator is returned from FilterGPKJSubmissionComplete and is used to iterate over the raw logs and unpacked data for GPKJSubmissionComplete events raised by the ETHDKGAccusations contract.
type ETHDKGAccusationsGPKJSubmissionCompleteIterator struct {
	Event *ETHDKGAccusationsGPKJSubmissionComplete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGAccusationsGPKJSubmissionCompleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGAccusationsGPKJSubmissionComplete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGAccusationsGPKJSubmissionComplete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGAccusationsGPKJSubmissionCompleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGAccusationsGPKJSubmissionCompleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGAccusationsGPKJSubmissionComplete represents a GPKJSubmissionComplete event raised by the ETHDKGAccusations contract.
type ETHDKGAccusationsGPKJSubmissionComplete struct {
	BlockNumber *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterGPKJSubmissionComplete is a free log retrieval operation binding the contract event 0x87bfe600b78cad9f7cf68c99eb582c1748f636b3269842b37d5873b0e069f628.
//
// Solidity: event GPKJSubmissionComplete(uint256 blockNumber)
func (_ETHDKGAccusations *ETHDKGAccusationsFilterer) FilterGPKJSubmissionComplete(opts *bind.FilterOpts) (*ETHDKGAccusationsGPKJSubmissionCompleteIterator, error) {

	logs, sub, err := _ETHDKGAccusations.contract.FilterLogs(opts, "GPKJSubmissionComplete")
	if err != nil {
		return nil, err
	}
	return &ETHDKGAccusationsGPKJSubmissionCompleteIterator{contract: _ETHDKGAccusations.contract, event: "GPKJSubmissionComplete", logs: logs, sub: sub}, nil
}

// WatchGPKJSubmissionComplete is a free log subscription operation binding the contract event 0x87bfe600b78cad9f7cf68c99eb582c1748f636b3269842b37d5873b0e069f628.
//
// Solidity: event GPKJSubmissionComplete(uint256 blockNumber)
func (_ETHDKGAccusations *ETHDKGAccusationsFilterer) WatchGPKJSubmissionComplete(opts *bind.WatchOpts, sink chan<- *ETHDKGAccusationsGPKJSubmissionComplete) (event.Subscription, error) {

	logs, sub, err := _ETHDKGAccusations.contract.WatchLogs(opts, "GPKJSubmissionComplete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGAccusationsGPKJSubmissionComplete)
				if err := _ETHDKGAccusations.contract.UnpackLog(event, "GPKJSubmissionComplete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseGPKJSubmissionComplete is a log parse operation binding the contract event 0x87bfe600b78cad9f7cf68c99eb582c1748f636b3269842b37d5873b0e069f628.
//
// Solidity: event GPKJSubmissionComplete(uint256 blockNumber)
func (_ETHDKGAccusations *ETHDKGAccusationsFilterer) ParseGPKJSubmissionComplete(log types.Log) (*ETHDKGAccusationsGPKJSubmissionComplete, error) {
	event := new(ETHDKGAccusationsGPKJSubmissionComplete)
	if err := _ETHDKGAccusations.contract.UnpackLog(event, "GPKJSubmissionComplete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGAccusationsKeyShareSubmissionCompleteIterator is returned from FilterKeyShareSubmissionComplete and is used to iterate over the raw logs and unpacked data for KeyShareSubmissionComplete events raised by the ETHDKGAccusations contract.
type ETHDKGAccusationsKeyShareSubmissionCompleteIterator struct {
	Event *ETHDKGAccusationsKeyShareSubmissionComplete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGAccusationsKeyShareSubmissionCompleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGAccusationsKeyShareSubmissionComplete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGAccusationsKeyShareSubmissionComplete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGAccusationsKeyShareSubmissionCompleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGAccusationsKeyShareSubmissionCompleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGAccusationsKeyShareSubmissionComplete represents a KeyShareSubmissionComplete event raised by the ETHDKGAccusations contract.
type ETHDKGAccusationsKeyShareSubmissionComplete struct {
	BlockNumber *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterKeyShareSubmissionComplete is a free log retrieval operation binding the contract event 0x522cec98f6caa194456c44afa9e8cef9ac63eecb0be60e20d180ce19cfb0ef59.
//
// Solidity: event KeyShareSubmissionComplete(uint256 blockNumber)
func (_ETHDKGAccusations *ETHDKGAccusationsFilterer) FilterKeyShareSubmissionComplete(opts *bind.FilterOpts) (*ETHDKGAccusationsKeyShareSubmissionCompleteIterator, error) {

	logs, sub, err := _ETHDKGAccusations.contract.FilterLogs(opts, "KeyShareSubmissionComplete")
	if err != nil {
		return nil, err
	}
	return &ETHDKGAccusationsKeyShareSubmissionCompleteIterator{contract: _ETHDKGAccusations.contract, event: "KeyShareSubmissionComplete", logs: logs, sub: sub}, nil
}

// WatchKeyShareSubmissionComplete is a free log subscription operation binding the contract event 0x522cec98f6caa194456c44afa9e8cef9ac63eecb0be60e20d180ce19cfb0ef59.
//
// Solidity: event KeyShareSubmissionComplete(uint256 blockNumber)
func (_ETHDKGAccusations *ETHDKGAccusationsFilterer) WatchKeyShareSubmissionComplete(opts *bind.WatchOpts, sink chan<- *ETHDKGAccusationsKeyShareSubmissionComplete) (event.Subscription, error) {

	logs, sub, err := _ETHDKGAccusations.contract.WatchLogs(opts, "KeyShareSubmissionComplete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGAccusationsKeyShareSubmissionComplete)
				if err := _ETHDKGAccusations.contract.UnpackLog(event, "KeyShareSubmissionComplete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKeyShareSubmissionComplete is a log parse operation binding the contract event 0x522cec98f6caa194456c44afa9e8cef9ac63eecb0be60e20d180ce19cfb0ef59.
//
// Solidity: event KeyShareSubmissionComplete(uint256 blockNumber)
func (_ETHDKGAccusations *ETHDKGAccusationsFilterer) ParseKeyShareSubmissionComplete(log types.Log) (*ETHDKGAccusationsKeyShareSubmissionComplete, error) {
	event := new(ETHDKGAccusationsKeyShareSubmissionComplete)
	if err := _ETHDKGAccusations.contract.UnpackLog(event, "KeyShareSubmissionComplete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGAccusationsKeyShareSubmittedIterator is returned from FilterKeyShareSubmitted and is used to iterate over the raw logs and unpacked data for KeyShareSubmitted events raised by the ETHDKGAccusations contract.
type ETHDKGAccusationsKeyShareSubmittedIterator struct {
	Event *ETHDKGAccusationsKeyShareSubmitted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGAccusationsKeyShareSubmittedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGAccusationsKeyShareSubmitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGAccusationsKeyShareSubmitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGAccusationsKeyShareSubmittedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGAccusationsKeyShareSubmittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGAccusationsKeyShareSubmitted represents a KeyShareSubmitted event raised by the ETHDKGAccusations contract.
type ETHDKGAccusationsKeyShareSubmitted struct {
	Account                    common.Address
	Index                      *big.Int
	Nonce                      *big.Int
	KeyShareG1                 [2]*big.Int
	KeyShareG1CorrectnessProof [2]*big.Int
	KeyShareG2                 [4]*big.Int
	Raw                        types.Log // Blockchain specific contextual infos
}

// FilterKeyShareSubmitted is a free log retrieval operation binding the contract event 0x6162e2d11398e4063e4c8565dafc4fb6755bbead93747ea836a5ef73a594aaf7.
//
// Solidity: event KeyShareSubmitted(address account, uint256 index, uint256 nonce, uint256[2] keyShareG1, uint256[2] keyShareG1CorrectnessProof, uint256[4] keyShareG2)
func (_ETHDKGAccusations *ETHDKGAccusationsFilterer) FilterKeyShareSubmitted(opts *bind.FilterOpts) (*ETHDKGAccusationsKeyShareSubmittedIterator, error) {

	logs, sub, err := _ETHDKGAccusations.contract.FilterLogs(opts, "KeyShareSubmitted")
	if err != nil {
		return nil, err
	}
	return &ETHDKGAccusationsKeyShareSubmittedIterator{contract: _ETHDKGAccusations.contract, event: "KeyShareSubmitted", logs: logs, sub: sub}, nil
}

// WatchKeyShareSubmitted is a free log subscription operation binding the contract event 0x6162e2d11398e4063e4c8565dafc4fb6755bbead93747ea836a5ef73a594aaf7.
//
// Solidity: event KeyShareSubmitted(address account, uint256 index, uint256 nonce, uint256[2] keyShareG1, uint256[2] keyShareG1CorrectnessProof, uint256[4] keyShareG2)
func (_ETHDKGAccusations *ETHDKGAccusationsFilterer) WatchKeyShareSubmitted(opts *bind.WatchOpts, sink chan<- *ETHDKGAccusationsKeyShareSubmitted) (event.Subscription, error) {

	logs, sub, err := _ETHDKGAccusations.contract.WatchLogs(opts, "KeyShareSubmitted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGAccusationsKeyShareSubmitted)
				if err := _ETHDKGAccusations.contract.UnpackLog(event, "KeyShareSubmitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKeyShareSubmitted is a log parse operation binding the contract event 0x6162e2d11398e4063e4c8565dafc4fb6755bbead93747ea836a5ef73a594aaf7.
//
// Solidity: event KeyShareSubmitted(address account, uint256 index, uint256 nonce, uint256[2] keyShareG1, uint256[2] keyShareG1CorrectnessProof, uint256[4] keyShareG2)
func (_ETHDKGAccusations *ETHDKGAccusationsFilterer) ParseKeyShareSubmitted(log types.Log) (*ETHDKGAccusationsKeyShareSubmitted, error) {
	event := new(ETHDKGAccusationsKeyShareSubmitted)
	if err := _ETHDKGAccusations.contract.UnpackLog(event, "KeyShareSubmitted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGAccusationsMPKSetIterator is returned from FilterMPKSet and is used to iterate over the raw logs and unpacked data for MPKSet events raised by the ETHDKGAccusations contract.
type ETHDKGAccusationsMPKSetIterator struct {
	Event *ETHDKGAccusationsMPKSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGAccusationsMPKSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGAccusationsMPKSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGAccusationsMPKSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGAccusationsMPKSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGAccusationsMPKSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGAccusationsMPKSet represents a MPKSet event raised by the ETHDKGAccusations contract.
type ETHDKGAccusationsMPKSet struct {
	BlockNumber *big.Int
	Nonce       *big.Int
	Mpk         [4]*big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterMPKSet is a free log retrieval operation binding the contract event 0x71b1ebd27be320895a22125d6458e3363aefa6944a312ede4bf275867e6d5a71.
//
// Solidity: event MPKSet(uint256 blockNumber, uint256 nonce, uint256[4] mpk)
func (_ETHDKGAccusations *ETHDKGAccusationsFilterer) FilterMPKSet(opts *bind.FilterOpts) (*ETHDKGAccusationsMPKSetIterator, error) {

	logs, sub, err := _ETHDKGAccusations.contract.FilterLogs(opts, "MPKSet")
	if err != nil {
		return nil, err
	}
	return &ETHDKGAccusationsMPKSetIterator{contract: _ETHDKGAccusations.contract, event: "MPKSet", logs: logs, sub: sub}, nil
}

// WatchMPKSet is a free log subscription operation binding the contract event 0x71b1ebd27be320895a22125d6458e3363aefa6944a312ede4bf275867e6d5a71.
//
// Solidity: event MPKSet(uint256 blockNumber, uint256 nonce, uint256[4] mpk)
func (_ETHDKGAccusations *ETHDKGAccusationsFilterer) WatchMPKSet(opts *bind.WatchOpts, sink chan<- *ETHDKGAccusationsMPKSet) (event.Subscription, error) {

	logs, sub, err := _ETHDKGAccusations.contract.WatchLogs(opts, "MPKSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGAccusationsMPKSet)
				if err := _ETHDKGAccusations.contract.UnpackLog(event, "MPKSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMPKSet is a log parse operation binding the contract event 0x71b1ebd27be320895a22125d6458e3363aefa6944a312ede4bf275867e6d5a71.
//
// Solidity: event MPKSet(uint256 blockNumber, uint256 nonce, uint256[4] mpk)
func (_ETHDKGAccusations *ETHDKGAccusationsFilterer) ParseMPKSet(log types.Log) (*ETHDKGAccusationsMPKSet, error) {
	event := new(ETHDKGAccusationsMPKSet)
	if err := _ETHDKGAccusations.contract.UnpackLog(event, "MPKSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGAccusationsRegistrationCompleteIterator is returned from FilterRegistrationComplete and is used to iterate over the raw logs and unpacked data for RegistrationComplete events raised by the ETHDKGAccusations contract.
type ETHDKGAccusationsRegistrationCompleteIterator struct {
	Event *ETHDKGAccusationsRegistrationComplete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGAccusationsRegistrationCompleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGAccusationsRegistrationComplete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGAccusationsRegistrationComplete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGAccusationsRegistrationCompleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGAccusationsRegistrationCompleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGAccusationsRegistrationComplete represents a RegistrationComplete event raised by the ETHDKGAccusations contract.
type ETHDKGAccusationsRegistrationComplete struct {
	BlockNumber *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRegistrationComplete is a free log retrieval operation binding the contract event 0x833013b96b786b4eca83baac286920e5e53956c21ff3894f1d9f02e97d6ed764.
//
// Solidity: event RegistrationComplete(uint256 blockNumber)
func (_ETHDKGAccusations *ETHDKGAccusationsFilterer) FilterRegistrationComplete(opts *bind.FilterOpts) (*ETHDKGAccusationsRegistrationCompleteIterator, error) {

	logs, sub, err := _ETHDKGAccusations.contract.FilterLogs(opts, "RegistrationComplete")
	if err != nil {
		return nil, err
	}
	return &ETHDKGAccusationsRegistrationCompleteIterator{contract: _ETHDKGAccusations.contract, event: "RegistrationComplete", logs: logs, sub: sub}, nil
}

// WatchRegistrationComplete is a free log subscription operation binding the contract event 0x833013b96b786b4eca83baac286920e5e53956c21ff3894f1d9f02e97d6ed764.
//
// Solidity: event RegistrationComplete(uint256 blockNumber)
func (_ETHDKGAccusations *ETHDKGAccusationsFilterer) WatchRegistrationComplete(opts *bind.WatchOpts, sink chan<- *ETHDKGAccusationsRegistrationComplete) (event.Subscription, error) {

	logs, sub, err := _ETHDKGAccusations.contract.WatchLogs(opts, "RegistrationComplete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGAccusationsRegistrationComplete)
				if err := _ETHDKGAccusations.contract.UnpackLog(event, "RegistrationComplete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegistrationComplete is a log parse operation binding the contract event 0x833013b96b786b4eca83baac286920e5e53956c21ff3894f1d9f02e97d6ed764.
//
// Solidity: event RegistrationComplete(uint256 blockNumber)
func (_ETHDKGAccusations *ETHDKGAccusationsFilterer) ParseRegistrationComplete(log types.Log) (*ETHDKGAccusationsRegistrationComplete, error) {
	event := new(ETHDKGAccusationsRegistrationComplete)
	if err := _ETHDKGAccusations.contract.UnpackLog(event, "RegistrationComplete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGAccusationsRegistrationOpenedIterator is returned from FilterRegistrationOpened and is used to iterate over the raw logs and unpacked data for RegistrationOpened events raised by the ETHDKGAccusations contract.
type ETHDKGAccusationsRegistrationOpenedIterator struct {
	Event *ETHDKGAccusationsRegistrationOpened // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGAccusationsRegistrationOpenedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGAccusationsRegistrationOpened)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGAccusationsRegistrationOpened)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGAccusationsRegistrationOpenedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGAccusationsRegistrationOpenedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGAccusationsRegistrationOpened represents a RegistrationOpened event raised by the ETHDKGAccusations contract.
type ETHDKGAccusationsRegistrationOpened struct {
	StartBlock         *big.Int
	NumberValidators   *big.Int
	Nonce              *big.Int
	PhaseLength        *big.Int
	ConfirmationLength *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterRegistrationOpened is a free log retrieval operation binding the contract event 0xbda431b9b63510f1398bf33d700e013315bcba905507078a1780f13ea5b354b9.
//
// Solidity: event RegistrationOpened(uint256 startBlock, uint256 numberValidators, uint256 nonce, uint256 phaseLength, uint256 confirmationLength)
func (_ETHDKGAccusations *ETHDKGAccusationsFilterer) FilterRegistrationOpened(opts *bind.FilterOpts) (*ETHDKGAccusationsRegistrationOpenedIterator, error) {

	logs, sub, err := _ETHDKGAccusations.contract.FilterLogs(opts, "RegistrationOpened")
	if err != nil {
		return nil, err
	}
	return &ETHDKGAccusationsRegistrationOpenedIterator{contract: _ETHDKGAccusations.contract, event: "RegistrationOpened", logs: logs, sub: sub}, nil
}

// WatchRegistrationOpened is a free log subscription operation binding the contract event 0xbda431b9b63510f1398bf33d700e013315bcba905507078a1780f13ea5b354b9.
//
// Solidity: event RegistrationOpened(uint256 startBlock, uint256 numberValidators, uint256 nonce, uint256 phaseLength, uint256 confirmationLength)
func (_ETHDKGAccusations *ETHDKGAccusationsFilterer) WatchRegistrationOpened(opts *bind.WatchOpts, sink chan<- *ETHDKGAccusationsRegistrationOpened) (event.Subscription, error) {

	logs, sub, err := _ETHDKGAccusations.contract.WatchLogs(opts, "RegistrationOpened")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGAccusationsRegistrationOpened)
				if err := _ETHDKGAccusations.contract.UnpackLog(event, "RegistrationOpened", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegistrationOpened is a log parse operation binding the contract event 0xbda431b9b63510f1398bf33d700e013315bcba905507078a1780f13ea5b354b9.
//
// Solidity: event RegistrationOpened(uint256 startBlock, uint256 numberValidators, uint256 nonce, uint256 phaseLength, uint256 confirmationLength)
func (_ETHDKGAccusations *ETHDKGAccusationsFilterer) ParseRegistrationOpened(log types.Log) (*ETHDKGAccusationsRegistrationOpened, error) {
	event := new(ETHDKGAccusationsRegistrationOpened)
	if err := _ETHDKGAccusations.contract.UnpackLog(event, "RegistrationOpened", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGAccusationsShareDistributionCompleteIterator is returned from FilterShareDistributionComplete and is used to iterate over the raw logs and unpacked data for ShareDistributionComplete events raised by the ETHDKGAccusations contract.
type ETHDKGAccusationsShareDistributionCompleteIterator struct {
	Event *ETHDKGAccusationsShareDistributionComplete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGAccusationsShareDistributionCompleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGAccusationsShareDistributionComplete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGAccusationsShareDistributionComplete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGAccusationsShareDistributionCompleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGAccusationsShareDistributionCompleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGAccusationsShareDistributionComplete represents a ShareDistributionComplete event raised by the ETHDKGAccusations contract.
type ETHDKGAccusationsShareDistributionComplete struct {
	BlockNumber *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterShareDistributionComplete is a free log retrieval operation binding the contract event 0xbfe94ffef5ddde4d25ac7b652f3f67686ea63f9badbfe1f25451e26fc262d11c.
//
// Solidity: event ShareDistributionComplete(uint256 blockNumber)
func (_ETHDKGAccusations *ETHDKGAccusationsFilterer) FilterShareDistributionComplete(opts *bind.FilterOpts) (*ETHDKGAccusationsShareDistributionCompleteIterator, error) {

	logs, sub, err := _ETHDKGAccusations.contract.FilterLogs(opts, "ShareDistributionComplete")
	if err != nil {
		return nil, err
	}
	return &ETHDKGAccusationsShareDistributionCompleteIterator{contract: _ETHDKGAccusations.contract, event: "ShareDistributionComplete", logs: logs, sub: sub}, nil
}

// WatchShareDistributionComplete is a free log subscription operation binding the contract event 0xbfe94ffef5ddde4d25ac7b652f3f67686ea63f9badbfe1f25451e26fc262d11c.
//
// Solidity: event ShareDistributionComplete(uint256 blockNumber)
func (_ETHDKGAccusations *ETHDKGAccusationsFilterer) WatchShareDistributionComplete(opts *bind.WatchOpts, sink chan<- *ETHDKGAccusationsShareDistributionComplete) (event.Subscription, error) {

	logs, sub, err := _ETHDKGAccusations.contract.WatchLogs(opts, "ShareDistributionComplete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGAccusationsShareDistributionComplete)
				if err := _ETHDKGAccusations.contract.UnpackLog(event, "ShareDistributionComplete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseShareDistributionComplete is a log parse operation binding the contract event 0xbfe94ffef5ddde4d25ac7b652f3f67686ea63f9badbfe1f25451e26fc262d11c.
//
// Solidity: event ShareDistributionComplete(uint256 blockNumber)
func (_ETHDKGAccusations *ETHDKGAccusationsFilterer) ParseShareDistributionComplete(log types.Log) (*ETHDKGAccusationsShareDistributionComplete, error) {
	event := new(ETHDKGAccusationsShareDistributionComplete)
	if err := _ETHDKGAccusations.contract.UnpackLog(event, "ShareDistributionComplete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGAccusationsSharesDistributedIterator is returned from FilterSharesDistributed and is used to iterate over the raw logs and unpacked data for SharesDistributed events raised by the ETHDKGAccusations contract.
type ETHDKGAccusationsSharesDistributedIterator struct {
	Event *ETHDKGAccusationsSharesDistributed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGAccusationsSharesDistributedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGAccusationsSharesDistributed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGAccusationsSharesDistributed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGAccusationsSharesDistributedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGAccusationsSharesDistributedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGAccusationsSharesDistributed represents a SharesDistributed event raised by the ETHDKGAccusations contract.
type ETHDKGAccusationsSharesDistributed struct {
	Account         common.Address
	Index           *big.Int
	Nonce           *big.Int
	EncryptedShares []*big.Int
	Commitments     [][2]*big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterSharesDistributed is a free log retrieval operation binding the contract event 0xf0c8b0ef2867c2b4639b404a0296b6bbf0bf97e20856af42144a5a6035c0d0d2.
//
// Solidity: event SharesDistributed(address account, uint256 index, uint256 nonce, uint256[] encryptedShares, uint256[2][] commitments)
func (_ETHDKGAccusations *ETHDKGAccusationsFilterer) FilterSharesDistributed(opts *bind.FilterOpts) (*ETHDKGAccusationsSharesDistributedIterator, error) {

	logs, sub, err := _ETHDKGAccusations.contract.FilterLogs(opts, "SharesDistributed")
	if err != nil {
		return nil, err
	}
	return &ETHDKGAccusationsSharesDistributedIterator{contract: _ETHDKGAccusations.contract, event: "SharesDistributed", logs: logs, sub: sub}, nil
}

// WatchSharesDistributed is a free log subscription operation binding the contract event 0xf0c8b0ef2867c2b4639b404a0296b6bbf0bf97e20856af42144a5a6035c0d0d2.
//
// Solidity: event SharesDistributed(address account, uint256 index, uint256 nonce, uint256[] encryptedShares, uint256[2][] commitments)
func (_ETHDKGAccusations *ETHDKGAccusationsFilterer) WatchSharesDistributed(opts *bind.WatchOpts, sink chan<- *ETHDKGAccusationsSharesDistributed) (event.Subscription, error) {

	logs, sub, err := _ETHDKGAccusations.contract.WatchLogs(opts, "SharesDistributed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGAccusationsSharesDistributed)
				if err := _ETHDKGAccusations.contract.UnpackLog(event, "SharesDistributed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSharesDistributed is a log parse operation binding the contract event 0xf0c8b0ef2867c2b4639b404a0296b6bbf0bf97e20856af42144a5a6035c0d0d2.
//
// Solidity: event SharesDistributed(address account, uint256 index, uint256 nonce, uint256[] encryptedShares, uint256[2][] commitments)
func (_ETHDKGAccusations *ETHDKGAccusationsFilterer) ParseSharesDistributed(log types.Log) (*ETHDKGAccusationsSharesDistributed, error) {
	event := new(ETHDKGAccusationsSharesDistributed)
	if err := _ETHDKGAccusations.contract.UnpackLog(event, "SharesDistributed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGAccusationsValidatorMemberAddedIterator is returned from FilterValidatorMemberAdded and is used to iterate over the raw logs and unpacked data for ValidatorMemberAdded events raised by the ETHDKGAccusations contract.
type ETHDKGAccusationsValidatorMemberAddedIterator struct {
	Event *ETHDKGAccusationsValidatorMemberAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGAccusationsValidatorMemberAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGAccusationsValidatorMemberAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGAccusationsValidatorMemberAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGAccusationsValidatorMemberAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGAccusationsValidatorMemberAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGAccusationsValidatorMemberAdded represents a ValidatorMemberAdded event raised by the ETHDKGAccusations contract.
type ETHDKGAccusationsValidatorMemberAdded struct {
	Account common.Address
	Index   *big.Int
	Nonce   *big.Int
	Epoch   *big.Int
	Share0  *big.Int
	Share1  *big.Int
	Share2  *big.Int
	Share3  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterValidatorMemberAdded is a free log retrieval operation binding the contract event 0x09b90b08bbc3dbe22e9d2a0bc9c2c7614c7511cd0ad72177727a1e762115bf06.
//
// Solidity: event ValidatorMemberAdded(address account, uint256 index, uint256 nonce, uint256 epoch, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_ETHDKGAccusations *ETHDKGAccusationsFilterer) FilterValidatorMemberAdded(opts *bind.FilterOpts) (*ETHDKGAccusationsValidatorMemberAddedIterator, error) {

	logs, sub, err := _ETHDKGAccusations.contract.FilterLogs(opts, "ValidatorMemberAdded")
	if err != nil {
		return nil, err
	}
	return &ETHDKGAccusationsValidatorMemberAddedIterator{contract: _ETHDKGAccusations.contract, event: "ValidatorMemberAdded", logs: logs, sub: sub}, nil
}

// WatchValidatorMemberAdded is a free log subscription operation binding the contract event 0x09b90b08bbc3dbe22e9d2a0bc9c2c7614c7511cd0ad72177727a1e762115bf06.
//
// Solidity: event ValidatorMemberAdded(address account, uint256 index, uint256 nonce, uint256 epoch, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_ETHDKGAccusations *ETHDKGAccusationsFilterer) WatchValidatorMemberAdded(opts *bind.WatchOpts, sink chan<- *ETHDKGAccusationsValidatorMemberAdded) (event.Subscription, error) {

	logs, sub, err := _ETHDKGAccusations.contract.WatchLogs(opts, "ValidatorMemberAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGAccusationsValidatorMemberAdded)
				if err := _ETHDKGAccusations.contract.UnpackLog(event, "ValidatorMemberAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorMemberAdded is a log parse operation binding the contract event 0x09b90b08bbc3dbe22e9d2a0bc9c2c7614c7511cd0ad72177727a1e762115bf06.
//
// Solidity: event ValidatorMemberAdded(address account, uint256 index, uint256 nonce, uint256 epoch, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_ETHDKGAccusations *ETHDKGAccusationsFilterer) ParseValidatorMemberAdded(log types.Log) (*ETHDKGAccusationsValidatorMemberAdded, error) {
	event := new(ETHDKGAccusationsValidatorMemberAdded)
	if err := _ETHDKGAccusations.contract.UnpackLog(event, "ValidatorMemberAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGAccusationsValidatorSetCompletedIterator is returned from FilterValidatorSetCompleted and is used to iterate over the raw logs and unpacked data for ValidatorSetCompleted events raised by the ETHDKGAccusations contract.
type ETHDKGAccusationsValidatorSetCompletedIterator struct {
	Event *ETHDKGAccusationsValidatorSetCompleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGAccusationsValidatorSetCompletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGAccusationsValidatorSetCompleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGAccusationsValidatorSetCompleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGAccusationsValidatorSetCompletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGAccusationsValidatorSetCompletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGAccusationsValidatorSetCompleted represents a ValidatorSetCompleted event raised by the ETHDKGAccusations contract.
type ETHDKGAccusationsValidatorSetCompleted struct {
	ValidatorCount *big.Int
	Nonce          *big.Int
	Epoch          *big.Int
	EthHeight      *big.Int
	MadHeight      *big.Int
	GroupKey0      *big.Int
	GroupKey1      *big.Int
	GroupKey2      *big.Int
	GroupKey3      *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterValidatorSetCompleted is a free log retrieval operation binding the contract event 0xd7237b781669fa700ecf77be6cd8fa0f4b98b1a24ac584a9b6b44c509216718a.
//
// Solidity: event ValidatorSetCompleted(uint256 validatorCount, uint256 nonce, uint256 epoch, uint256 ethHeight, uint256 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_ETHDKGAccusations *ETHDKGAccusationsFilterer) FilterValidatorSetCompleted(opts *bind.FilterOpts) (*ETHDKGAccusationsValidatorSetCompletedIterator, error) {

	logs, sub, err := _ETHDKGAccusations.contract.FilterLogs(opts, "ValidatorSetCompleted")
	if err != nil {
		return nil, err
	}
	return &ETHDKGAccusationsValidatorSetCompletedIterator{contract: _ETHDKGAccusations.contract, event: "ValidatorSetCompleted", logs: logs, sub: sub}, nil
}

// WatchValidatorSetCompleted is a free log subscription operation binding the contract event 0xd7237b781669fa700ecf77be6cd8fa0f4b98b1a24ac584a9b6b44c509216718a.
//
// Solidity: event ValidatorSetCompleted(uint256 validatorCount, uint256 nonce, uint256 epoch, uint256 ethHeight, uint256 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_ETHDKGAccusations *ETHDKGAccusationsFilterer) WatchValidatorSetCompleted(opts *bind.WatchOpts, sink chan<- *ETHDKGAccusationsValidatorSetCompleted) (event.Subscription, error) {

	logs, sub, err := _ETHDKGAccusations.contract.WatchLogs(opts, "ValidatorSetCompleted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGAccusationsValidatorSetCompleted)
				if err := _ETHDKGAccusations.contract.UnpackLog(event, "ValidatorSetCompleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorSetCompleted is a log parse operation binding the contract event 0xd7237b781669fa700ecf77be6cd8fa0f4b98b1a24ac584a9b6b44c509216718a.
//
// Solidity: event ValidatorSetCompleted(uint256 validatorCount, uint256 nonce, uint256 epoch, uint256 ethHeight, uint256 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_ETHDKGAccusations *ETHDKGAccusationsFilterer) ParseValidatorSetCompleted(log types.Log) (*ETHDKGAccusationsValidatorSetCompleted, error) {
	event := new(ETHDKGAccusationsValidatorSetCompleted)
	if err := _ETHDKGAccusations.contract.UnpackLog(event, "ValidatorSetCompleted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGPhasesMetaData contains all meta data concerning the ETHDKGPhases contract.
var ETHDKGPhasesMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"publicKey\",\"type\":\"uint256[2]\"}],\"name\":\"AddressRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"GPKJSubmissionComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"KeyShareSubmissionComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"keyShareG1\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"keyShareG1CorrectnessProof\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[4]\",\"name\":\"keyShareG2\",\"type\":\"uint256[4]\"}],\"name\":\"KeyShareSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[4]\",\"name\":\"mpk\",\"type\":\"uint256[4]\"}],\"name\":\"MPKSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"RegistrationComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numberValidators\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"phaseLength\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"confirmationLength\",\"type\":\"uint256\"}],\"name\":\"RegistrationOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"ShareDistributionComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"encryptedShares\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[2][]\",\"name\":\"commitments\",\"type\":\"uint256[2][]\"}],\"name\":\"SharesDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share3\",\"type\":\"uint256\"}],\"name\":\"ValidatorMemberAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validatorCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethHeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"madHeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey3\",\"type\":\"uint256\"}],\"name\":\"ValidatorSetCompleted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"complete\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"encryptedShares\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[2][]\",\"name\":\"commitments\",\"type\":\"uint256[2][]\"}],\"name\":\"distributeShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"publicKey\",\"type\":\"uint256[2]\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"gpkj\",\"type\":\"uint256[4]\"}],\"name\":\"submitGPKJ\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"keyShareG1\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"keyShareG1CorrectnessProof\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[4]\",\"name\":\"keyShareG2\",\"type\":\"uint256[4]\"}],\"name\":\"submitKeyShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"masterPublicKey_\",\"type\":\"uint256[4]\"}],\"name\":\"submitMasterPublicKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50613ea3806100206000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c806362a6523e1161005057806362a6523e146100a757806380b97e01146100ba578063e8323224146100cd57600080fd5b8063101f49c1146100775780633442af5c1461008c578063522e11771461009f575b600080fd5b61008a610085366004613762565b6100e0565b005b61008a61009a3660046137c9565b6108c1565b61008a610f25565b61008a6100b53660046137e5565b61146e565b61008a6100c83660046138c4565b61206d565b61008a6100db366004613762565b612be4565b6005600054700100000000000000000000000000000000900460ff16600781111561010d5761010d61397d565b148015610132575060005468010000000000000000900467ffffffffffffffff164310155b801561018a575060005461017d90790100000000000000000000000000000000000000000000000000810461ffff169068010000000000000000900467ffffffffffffffff166139db565b67ffffffffffffffff1643105b61021a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f455448444b473a204e6f7420696e2047504b4a207375626d697373696f6e207060448201527f686173650000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b336000908152600e6020526040808220815161014081019092528161010081018260028282826020028201915b815481526020019060010190808311610247575050509183525050600282015467ffffffffffffffff8082166020840152680100000000000000008204166040830152606090910190700100000000000000000000000000000000900460ff1660078111156102b8576102b861397d565b60078111156102c9576102c961397d565b8152600382015460208201526040805180820182529101906004830160028282826020028201915b8154815260200190600101908083116102f1575050509183525050604080518082019182905260209092019190600684019060029082845b81548152602001906001019080831161032957505050918352505060408051608081019182905260209092019190600884019060049082845b81548152602001906001019080831161036257505050505081525050905060008054906101000a900467ffffffffffffffff1667ffffffffffffffff16816020015167ffffffffffffffff1614610462576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526044602482018190527f455448444b473a204b6579207368617265207375626d697373696f6e20666169908201527f6c65642c207061727469636970616e74207769746820696e76616c6964206e6f60648201527f6e63652100000000000000000000000000000000000000000000000000000000608482015260a401610211565b60038160600151600781111561047a5761047a61397d565b14610507576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603d60248201527f455448444b473a205061727469636970616e7420616c7265616479207375626d60448201527f69747465642047504b6a207468697320455448444b4720726f756e64210000006064820152608401610211565b81511515806105195750602082015115155b806105275750604082015115155b806105355750606082015115155b6105c1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f455448444b473a2047504b6a2063616e6e6f7420626520616c6c207a65726f7360448201527f21000000000000000000000000000000000000000000000000000000000000006064820152608401610211565b60e0810182905260056060820152336000908152600e6020526040902081518291906105f090829060026135ba565b506020820151600282018054604085015167ffffffffffffffff90811668010000000000000000027fffffffffffffffffffffffffffffffff0000000000000000000000000000000090921693169290921791909117808255606084015191907fffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffff167001000000000000000000000000000000008360078111156106965761069661397d565b02179055506080820151600382015560a08201516106ba90600483019060026135ba565b5060c08201516106d090600683019060026135ba565b5060e08201516106e690600883019060046135f8565b509050507f09b90b08bbc3dbe22e9d2a0bc9c2c7614c7511cd0ad72177727a1e762115bf06338260400151836020015160018560e0015160006004811061072f5761072f613a07565b6020908102919091015160e08881015180840151604080830151606093840151825173ffffffffffffffffffffffffffffffffffffffff9c909c168c5267ffffffffffffffff9a8b16978c01979097529790981697890197909752870193909352608086015260a085019390935260c08401919091528201526101000160405180910390a1600080546107de9071010000000000000000000000000000000000900463ffffffff166001613a36565b63ffffffff1690506108826006600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663274982406040518163ffffffff1660e01b8152600401602060405180830381865afa158015610858573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087c9190613a55565b83612e70565b156108bc576040514381527f87bfe600b78cad9f7cf68c99eb582c1748f636b3269842b37d5873b0e069f628906020015b60405180910390a15b505050565b60008054700100000000000000000000000000000000900460ff1660078111156108ed576108ed61397d565b148015610912575060005468010000000000000000900467ffffffffffffffff164310155b801561096a575060005461095d90790100000000000000000000000000000000000000000000000000810461ffff169068010000000000000000900467ffffffffffffffff166139db565b67ffffffffffffffff1643105b6109f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f455448444b473a2043616e6e6f7420726567697374657220617420746865206d60448201527f6f6d656e740000000000000000000000000000000000000000000000000000006064820152608401610211565b805115801590610a095750602081015115155b610a9757604080517f08c379a00000000000000000000000000000000000000000000000000000000081526020600482015260248101919091527f455448444b473a20526567697374726174696f6e206661696c6564202d20707560448201527f624b65792073686f756c6420626520646966666572656e742066726f6d2030216064820152608401610211565b610aa081612f4c565b610b2c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603f60248201527f455448444b473a20526567697374726174696f6e206661696c6564202d20707560448201527f626c6963206b6579206e6f74206f6e20656c6c697074696320637572766521006064820152608401610211565b60008054338252600e60205260409091206002015467ffffffffffffffff918216911610610c02576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604260248201527f455448444b473a205061727469636970616e7420697320616c7265616479207060448201527f617274696369706174696e6720696e207468697320455448444b4720726f756e60648201527f6421000000000000000000000000000000000000000000000000000000000000608482015260a401610211565b60005471010000000000000000000000000000000000900463ffffffff1680610c2a81613a6e565b604080516101008101825285815260005467ffffffffffffffff8116602083015263ffffffff8416928201929092529193509091506060820190700100000000000000000000000000000000900460ff166007811115610c8c57610c8c61397d565b8152600060208083018290526040805180820182528381528083018490528185015280518082018252838152808301849052606080860191909152815160808181018452858252818501869052818401869052918101859052940193909352338252600e9052208151610d0290829060026135ba565b506020820151600282018054604085015167ffffffffffffffff90811668010000000000000000027fffffffffffffffffffffffffffffffff0000000000000000000000000000000090921693169290921791909117808255606084015191907fffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffff16700100000000000000000000000000000000836007811115610da857610da861397d565b02179055506080820151600382015560a0820151610dcc90600483019060026135ba565b5060c0820151610de290600683019060026135ba565b5060e0820151610df890600883019060046135f8565b50506000546040517f7f1304057ec61140fbf2f5f236790f34fcafe123d3eb0d298d92317c97da500d9250610e3d913391859167ffffffffffffffff16908790613abb565b60405180910390a1610ee76001600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663274982406040518163ffffffff1660e01b8152600401602060405180830381865afa158015610eb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610edb9190613a55565b8363ffffffff16612e70565b15610f21576040514381527f833013b96b786b4eca83baac286920e5e53956c21ff3894f1d9f02e97d6ed764906020015b60405180910390a15b5050565b6006600054700100000000000000000000000000000000900460ff166007811115610f5257610f5261397d565b148015610fac5750600054610f9e90790100000000000000000000000000000000000000000000000000810461ffff169068010000000000000000900467ffffffffffffffff166139db565b67ffffffffffffffff164310155b80156110165750600054610fe290790100000000000000000000000000000000000000000000000000900461ffff166002613b0a565b6000546110099161ffff169068010000000000000000900467ffffffffffffffff166139db565b67ffffffffffffffff1643105b6110a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f455448444b473a2073686f756c6420626520696e20706f73742d47504b4a446960448201527f73707574652070686173652100000000000000000000000000000000000000006064820152608401610211565b6000547501000000000000000000000000000000000000000000900461ffff1615611175576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604860248201527f455448444b473a204e6f7420616c6c207265717569736974657320746f20636f60448201527f6d706c657465207468697320455448444b4720726f756e64207765726520636f60648201527f6d706c6574656421000000000000000000000000000000000000000000000000608482015260a401610211565b61117f6007612fb0565b600254604080517f757991a8000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163757991a89160048083019260209291908290030181865afa1580156111ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112139190613a55565b90506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663026c2b7e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611284573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a89190613a55565b905060006001546000141561134f57600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639c2626716040518163ffffffff1660e01b8152600401602060405180830381865afa158015611324573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113489190613a55565b905061135a565b506001805460009091555b600354604080517f2749824000000000000000000000000000000000000000000000000000000000815290517fd7237b781669fa700ecf77be6cd8fa0f4b98b1a24ac584a9b6b44c509216718a9273ffffffffffffffffffffffffffffffffffffffff169163274982409160048083019260209291908290030181865afa1580156113e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140d9190613a55565b600054600854600954600a54600b546040805160ff97909716875267ffffffffffffffff9095166020870152938501899052606085018890526080850187905260a085019290925260c084015260e0830152610100820152610120016108b3565b6003600054700100000000000000000000000000000000900460ff16600781111561149b5761149b61397d565b1480156114c0575060005468010000000000000000900467ffffffffffffffff164310155b8015611518575060005461150b90790100000000000000000000000000000000000000000000000000810461ffff169068010000000000000000900467ffffffffffffffff166139db565b67ffffffffffffffff1643105b8061163857506002600054700100000000000000000000000000000000900460ff16600781111561154b5761154b61397d565b1480156115a5575060005461159790790100000000000000000000000000000000000000000000000000810461ffff169068010000000000000000900467ffffffffffffffff166139db565b67ffffffffffffffff164310155b801561160f57506000546115db90790100000000000000000000000000000000000000000000000000900461ffff166002613b0a565b6000546116029161ffff169068010000000000000000900467ffffffffffffffff166139db565b67ffffffffffffffff1643105b801561163857506000547501000000000000000000000000000000000000000000900461ffff16155b6116c4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603860248201527f455448444b473a2063616e6e6f74207061727469636970617465206f6e206b6560448201527f79207368617265207375626d697373696f6e20706861736500000000000000006064820152608401610211565b6003600054700100000000000000000000000000000000900460ff1660078111156116f1576116f161397d565b14611700576117006003612fb0565b336000908152600e6020526040808220815161014081019092528161010081018260028282826020028201915b81548152602001906001019080831161172d575050509183525050600282015467ffffffffffffffff8082166020840152680100000000000000008204166040830152606090910190700100000000000000000000000000000000900460ff16600781111561179e5761179e61397d565b60078111156117af576117af61397d565b8152600382015460208201526040805180820182529101906004830160028282826020028201915b8154815260200190600101908083116117d7575050509183525050604080518082019182905260209092019190600684019060029082845b81548152602001906001019080831161180f57505050918352505060408051608081019182905260209092019190600884019060049082845b81548152602001906001019080831161184857505050505081525050905060008054906101000a900467ffffffffffffffff1667ffffffffffffffff16816020015167ffffffffffffffff1614611948576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526044602482018190527f455448444b473a204b6579207368617265207375626d697373696f6e20666169908201527f6c65642c207061727469636970616e74207769746820696e76616c6964206e6f60648201527f6e63652100000000000000000000000000000000000000000000000000000000608482015260a401610211565b6001816060015160078111156119605761196061397d565b14611a13576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604360248201527f455448444b473a205061727469636970616e7420616c7265616479207375626d60448201527f6974746564206b657920736861726573207468697320455448444b4720726f7560648201527f6e64210000000000000000000000000000000000000000000000000000000000608482015260a401610211565b611a8e60405180604001604052807f062a0ad5cf656709286b38ae4fb927fc901c5f9cf9623bfd0b6d22d30f95a1f381526020017f1b4af7018d896f006d7e5c23d05903b5d2698da94674e546e51f77b6df70ffac8152508560405180604001604052806001815260200160028152508460a0015187613066565b611b1a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603b60248201527f455448444b473a204b6579207368617265207375626d697373696f6e2066616960448201527f6c6564202d20696e76616c6964206b65792073686172652047312100000000006064820152608401610211565b611cbd60405180610180016040528086600060028110611b3c57611b3c613a07565b6020020151815260200186600160028110611b5957611b59613a07565b602002015181526020017f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed81526020017f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec81526020017f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d81526020017f062a0ad5cf656709286b38ae4fb927fc901c5f9cf9623bfd0b6d22d30f95a1f381526020017f1b4af7018d896f006d7e5c23d05903b5d2698da94674e546e51f77b6df70ffac815260200184600060048110611c5a57611c5a613a07565b6020020151815260200184600160048110611c7757611c77613a07565b6020020151815260200184600260048110611c9457611c94613a07565b6020020151815260200184600360048110611cb157611cb1613a07565b60200201519052613356565b611d49576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603b60248201527f455448444b473a204b6579207368617265207375626d697373696f6e2066616960448201527f6c6564202d20696e76616c6964206b65792073686172652047322100000000006064820152608401610211565b60c0810184905260036060820152336000908152600e602052604090208151829190611d7890829060026135ba565b506020820151600282018054604085015167ffffffffffffffff90811668010000000000000000027fffffffffffffffffffffffffffffffff0000000000000000000000000000000090921693169290921791909117808255606084015191907fffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffff16700100000000000000000000000000000000836007811115611e1e57611e1e61397d565b02179055506080820151600382015560a0820151611e4290600483019060026135ba565b5060c0820151611e5890600683019060026135ba565b5060e0820151611e6e90600883019060046135f8565b505060408051808201918290526000925090600c9060029082845b815481526020019060010190808311611e895750505050509050611f2f604051806080016040528083600060028110611ec457611ec4613a07565b6020020151815260200183600160028110611ee157611ee1613a07565b602002015181526020018460c00151600060028110611f0257611f02613a07565b602002015181526020018460c00151600160028110611f2357611f23613a07565b60200201519052613401565b611f3d90600c9060026135ba565b5060008054611f689071010000000000000000000000000000000000900463ffffffff166001613a36565b63ffffffff1690507f6162e2d11398e4063e4c8565dafc4fb6755bbead93747ea836a5ef73a594aaf73384604001518560200151898989604051611fb196959493929190613b57565b60405180910390a1600354604080517f27498240000000000000000000000000000000000000000000000000000000008152905161202c9260049273ffffffffffffffffffffffffffffffffffffffff9091169163274982409180850191602091819003860181865afa158015610858573d6000803e3d6000fd5b15612065576040514381527f522cec98f6caa194456c44afa9e8cef9ac63eecb0be60e20d180ce19cfb0ef599060200160405180910390a15b505050505050565b6001600054700100000000000000000000000000000000900460ff16600781111561209a5761209a61397d565b1480156120bf575060005468010000000000000000900467ffffffffffffffff164310155b8015612117575060005461210a90790100000000000000000000000000000000000000000000000000810461ffff169068010000000000000000900467ffffffffffffffff166139db565b67ffffffffffffffff1643105b6121a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f455448444b473a2063616e6e6f74207061727469636970617465206f6e20746860448201527f69732070686173650000000000000000000000000000000000000000000000006064820152608401610211565b336000908152600e6020526040808220815161014081019092528161010081018260028282826020028201915b8154815260200190600101908083116121d0575050509183525050600282015467ffffffffffffffff8082166020840152680100000000000000008204166040830152606090910190700100000000000000000000000000000000900460ff1660078111156122415761224161397d565b60078111156122525761225261397d565b8152600382015460208201526040805180820182529101906004830160028282826020028201915b81548152602001906001019080831161227a575050509183525050604080518082019182905260209092019190600684019060029082845b8154815260200190600101908083116122b257505050918352505060408051608081019182905260209092019190600884019060049082845b8154815260200190600101908083116122eb57505050505081525050905060008054906101000a900467ffffffffffffffff1667ffffffffffffffff16816020015167ffffffffffffffff16146123ea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604260248201527f455448444b473a20536861726520646973747269627574696f6e206661696c6560448201527f642c207061727469636970616e74207769746820696e76616c6964206e6f6e6360648201527f6521000000000000000000000000000000000000000000000000000000000000608482015260a401610211565b6000816060015160078111156124025761240261397d565b146124b5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604160248201527f455448444b473a205061727469636970616e7420616c7265616479206469737460448201527f7269627574656420736861726573207468697320455448444b4720726f756e6460648201527f2100000000000000000000000000000000000000000000000000000000000000608482015260a401610211565b600354604080517f27498240000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163274982409160048083019260209291908290030181865afa158015612525573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125499190613a55565b90506000612556826134a4565b9050612563600183613bbf565b855114612618576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152605060248201527f455448444b473a20536861726520646973747269627574696f6e206661696c6560448201527f64202d20696e76616c6964206e756d626572206f6620656e637279707465642060648201527f7368617265732070726f76696465642100000000000000000000000000000000608482015260a401610211565b612623816001613bd6565b8451146126d9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526044602482018190527f455448444b473a204b65792073686172696e67206661696c6564202d20696e76908201527f616c6964206e756d626572206f6620636f6d6d69746d656e74732070726f766960648201527f6465642100000000000000000000000000000000000000000000000000000000608482015260a401610211565b60005b818111612860576127058582815181106126f8576126f8613a07565b6020026020010151612f4c565b612791576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603e60248201527f455448444b473a204b65792073686172696e67206661696c6564202d20636f6d60448201527f6d69746d656e74206e6f74206f6e20656c6c69707469632063757276652100006064820152608401610211565b8481815181106127a3576127a3613a07565b60200260200101516000600281106127bd576127bd613a07565b602002015161284e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f455448444b473a20436f6d6d69746d656e74732073686f756c646e277420626560448201527f207a65726f2100000000000000000000000000000000000000000000000000006064820152608401610211565b8061285881613bee565b9150506126dc565b506000856040516020016128749190613c27565b60405160208183030381529060405280519060200120905060008560405160200161289f9190613c5d565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815282825280516020918201209083018590529082018190529150606001604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190528051602090910120608086018190526129d5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152605260248201527f455448444b473a205468652068617368206f6620656e6372797074656453686160448201527f72657320616e6420636f6d6d69746d656e74732073686f756c6420626520646960648201527f66666572656e742066726f6d207a65726f210000000000000000000000000000608482015260a401610211565b856000815181106129e8576129e8613a07565b60209081029190910181015160a087015260016060870152336000908152600e909152604090208551869190612a2190829060026135ba565b506020820151600282018054604085015167ffffffffffffffff90811668010000000000000000027fffffffffffffffffffffffffffffffff0000000000000000000000000000000090921693169290921791909117808255606084015191907fffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffff16700100000000000000000000000000000000836007811115612ac757612ac761397d565b02179055506080820151600382015560a0820151612aeb90600483019060026135ba565b5060c0820151612b0190600683019060026135ba565b5060e0820151612b1790600883019060046135f8565b505060008054909150612b469071010000000000000000000000000000000000900463ffffffff166001613a36565b63ffffffff1690507ff0c8b0ef2867c2b4639b404a0296b6bbf0bf97e20856af42144a5a6035c0d0d233876040015188602001518b8b604051612b8d959493929190613c91565b60405180910390a1612ba160028683612e70565b15612bda576040514381527fbfe94ffef5ddde4d25ac7b652f3f67686ea63f9badbfe1f25451e26fc262d11c9060200160405180910390a15b5050505050505050565b6004600054700100000000000000000000000000000000900460ff166007811115612c1157612c1161397d565b148015612c36575060005468010000000000000000900467ffffffffffffffff164310155b8015612c8e5750600054612c8190790100000000000000000000000000000000000000000000000000810461ffff169068010000000000000000900467ffffffffffffffff166139db565b67ffffffffffffffff1643105b612d1c57604080517f08c379a00000000000000000000000000000000000000000000000000000000081526020600482015260248101919091527f455448444b473a2063616e6e6f74207061727469636970617465206f6e206d6160448201527f73746572207075626c6963206b6579207375626d697373696f6e2070686173656064820152608401610211565b6040805180820191829052600091600c9060029082845b815481526020019060010190808311612d335750505050509050612d8c60405180610180016040528083600060028110612d6f57612d6f613a07565b6020020151815260200183600160028110611b5957611b59613a07565b612e18576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603360248201527f455448444b473a204d6173746572206b6579207375626d697373696f6e20706160448201527f6972696e6720636865636b206661696c656421000000000000000000000000006064820152608401610211565b612e2560088360046135f8565b50612e306005612fb0565b6000546040517f71b1ebd27be320895a22125d6458e3363aefa6944a312ede4bf275867e6d5a7191610f1891439167ffffffffffffffff16908690613d6e565b600082821415612eff57612e8384612fb0565b600080547b01000000000000000000000000000000000000000000000000000000810461ffff169190600890612ed090849068010000000000000000900467ffffffffffffffff166139db565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060019050612f45565b50600080547fffffffffffffffffffffff00000000ffffffffffffffffffffffffffffffffff167101000000000000000000000000000000000063ffffffff8416021781555b9392505050565b80516000907f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47906003908290819080098551090860208301517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd479080091492915050565b600080548291907fffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffff16700100000000000000000000000000000000836007811115612ffd57612ffd61397d565b021790555050600080547fffffffffffffffffffffff00000000ff0000000000000000ffffffffffffffff16680100000000000000004367ffffffffffffffff16027fffffffffffffffffffffff00000000ffffffffffffffffffffffffffffffffff16179055565b6000613070613625565b613078613625565b6130df60405180606001604052808a60006002811061309957613099613a07565b602002015181526020018a6001600281106130b6576130b6613a07565b60200201518152602001866001600281106130d3576130d3613a07565b602002015190526134f8565b915061313c60405180606001604052808960006002811061310257613102613a07565b602002015181526020018960016002811061311f5761311f613a07565b60200201518152602001866000600281106130d3576130d3613a07565b905060006131b860405180608001604052808560006002811061316157613161613a07565b602002015181526020018560016002811061317e5761317e613a07565b602002015181526020018460006002811061319b5761319b613a07565b6020020151815260200184600160028110611f2357611f23613a07565b90506132156040518060600160405280896000600281106131db576131db613a07565b60200201518152602001896001600281106131f8576131f8613a07565b60200201518152602001876001600281106130d3576130d3613a07565b925061327260405180606001604052808860006002811061323857613238613a07565b602002015181526020018860016002811061325557613255613a07565b60200201518152602001876000600281106130d3576130d3613a07565b915060006132ee60405180608001604052808660006002811061329757613297613a07565b60200201518152602001866001600281106132b4576132b4613a07565b60200201518152602001856000600281106132d1576132d1613a07565b6020020151815260200185600160028110611f2357611f23613a07565b905060008a8a8a8a868660405160200161330d96959493929190613d9a565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0018152919052805160209091012096519096149a9950505050505050505050565b6000613360613643565b60006020826101808660087ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa9050806133f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f656c6c69707469632063757276652070616972696e67206661696c65640000006044820152606401610211565b505160011492915050565b613409613625565b600060408260808560067ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa90508061349e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f656c6c6970746963206375727665206164646974696f6e206661696c656400006044820152606401610211565b50919050565b6000806134b2600384613df5565b90506134bf816002613e30565b915060006134ce826003613e30565b6134d89085613bbf565b905080600214156134f1576134ee836001613bd6565b92505b5050919050565b613500613625565b600060408260608560077ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa90508061349e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f656c6c6970746963206375727665206d756c7469706c69636174696f6e20666160448201527f696c6564000000000000000000000000000000000000000000000000000000006064820152608401610211565b82600281019282156135e8579160200282015b828111156135e85782518255916020019190600101906135cd565b506135f4929150613661565b5090565b82600481019282156135e857916020028201828111156135e85782518255916020019190600101906135cd565b60405180604001604052806002906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b5b808211156135f45760008155600101613662565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156136ec576136ec613676565b604052919050565b600082601f83011261370557600080fd5b6040516080810181811067ffffffffffffffff8211171561372857613728613676565b60405280608084018581111561373d57600080fd5b845b8181101561375757803583526020928301920161373f565b509195945050505050565b60006080828403121561377457600080fd5b612f4583836136f4565b600082601f83011261378f57600080fd5b6040516040810181811067ffffffffffffffff821117156137b2576137b2613676565b806040525080604084018581111561373d57600080fd5b6000604082840312156137db57600080fd5b612f45838361377e565b600080600061010084860312156137fb57600080fd5b613805858561377e565b9250613814856040860161377e565b915061382385608086016136f4565b90509250925092565b600067ffffffffffffffff82111561384657613846613676565b5060051b60200190565b600082601f83011261386157600080fd5b813560206138766138718361382c565b6136a5565b82815260069290921b8401810191818101908684111561389557600080fd5b8286015b848110156138b9576138ab888261377e565b835291830191604001613899565b509695505050505050565b600080604083850312156138d757600080fd5b823567ffffffffffffffff808211156138ef57600080fd5b818501915085601f83011261390357600080fd5b813560206139136138718361382c565b82815260059290921b8401810191818101908984111561393257600080fd5b948201945b8386101561395057853582529482019490820190613937565b9650508601359250508082111561396657600080fd5b5061397385828601613850565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600067ffffffffffffffff8083168185168083038211156139fe576139fe6139ac565b01949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600063ffffffff8083168185168083038211156139fe576139fe6139ac565b600060208284031215613a6757600080fd5b5051919050565b600063ffffffff80831681811415613a8857613a886139ac565b6001019392505050565b8060005b6002811015613ab5578151845260209384019390910190600101613a96565b50505050565b73ffffffffffffffffffffffffffffffffffffffff8516815263ffffffff8416602082015267ffffffffffffffff8316604082015260a08101613b016060830184613a92565b95945050505050565b600061ffff80831681851681830481118215151615613b2b57613b2b6139ac565b02949350505050565b8060005b6004811015613ab5578151845260209384019390910190600101613b38565b73ffffffffffffffffffffffffffffffffffffffff8716815267ffffffffffffffff8681166020830152851660408201526101608101613b9a6060830186613a92565b613ba760a0830185613a92565b613bb460e0830184613b34565b979650505050505050565b600082821015613bd157613bd16139ac565b500390565b60008219821115613be957613be96139ac565b500190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613c2057613c206139ac565b5060010190565b815160009082906020808601845b83811015613c5157815185529382019390820190600101613c35565b50929695505050505050565b815160009082906020808601845b83811015613c5157613c7e858351613a92565b6040949094019390820190600101613c6b565b600060a0820173ffffffffffffffffffffffffffffffffffffffff88168352602067ffffffffffffffff8089168286015260408189168187015260a06060870152839150875180855260c087019250838901945060005b81811015613d0457855184529484019492840192600101613ce8565b50508582036080870152865180835291830193508287019160005b81811015613d5d5783518660005b6002811015613d4a57825182529187019190870190600101613d2d565b5050509482019492840192600101613d1f565b50939b9a5050505050505050505050565b83815267ffffffffffffffff8316602082015260c08101613d926040830184613b34565b949350505050565b613da48188613a92565b613db16040820187613a92565b613dbe6080820186613a92565b613dcb60c0820185613a92565b613dd9610100820184613a92565b613de7610140820183613a92565b610180019695505050505050565b600082613e2b577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613e6857613e686139ac565b50029056fea2646970667358221220a1306ff7954ed6d653979de0ec09f7e3230b1a656b32f4dcb22e82ba9ec90cd864736f6c634300080b0033",
}

// ETHDKGPhasesABI is the input ABI used to generate the binding from.
// Deprecated: Use ETHDKGPhasesMetaData.ABI instead.
var ETHDKGPhasesABI = ETHDKGPhasesMetaData.ABI

// ETHDKGPhasesBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ETHDKGPhasesMetaData.Bin instead.
var ETHDKGPhasesBin = ETHDKGPhasesMetaData.Bin

// DeployETHDKGPhases deploys a new Ethereum contract, binding an instance of ETHDKGPhases to it.
func DeployETHDKGPhases(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ETHDKGPhases, error) {
	parsed, err := ETHDKGPhasesMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ETHDKGPhasesBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ETHDKGPhases{ETHDKGPhasesCaller: ETHDKGPhasesCaller{contract: contract}, ETHDKGPhasesTransactor: ETHDKGPhasesTransactor{contract: contract}, ETHDKGPhasesFilterer: ETHDKGPhasesFilterer{contract: contract}}, nil
}

// ETHDKGPhases is an auto generated Go binding around an Ethereum contract.
type ETHDKGPhases struct {
	ETHDKGPhasesCaller     // Read-only binding to the contract
	ETHDKGPhasesTransactor // Write-only binding to the contract
	ETHDKGPhasesFilterer   // Log filterer for contract events
}

// ETHDKGPhasesCaller is an auto generated read-only Go binding around an Ethereum contract.
type ETHDKGPhasesCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETHDKGPhasesTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ETHDKGPhasesTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETHDKGPhasesFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ETHDKGPhasesFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETHDKGPhasesSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ETHDKGPhasesSession struct {
	Contract     *ETHDKGPhases     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ETHDKGPhasesCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ETHDKGPhasesCallerSession struct {
	Contract *ETHDKGPhasesCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// ETHDKGPhasesTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ETHDKGPhasesTransactorSession struct {
	Contract     *ETHDKGPhasesTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// ETHDKGPhasesRaw is an auto generated low-level Go binding around an Ethereum contract.
type ETHDKGPhasesRaw struct {
	Contract *ETHDKGPhases // Generic contract binding to access the raw methods on
}

// ETHDKGPhasesCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ETHDKGPhasesCallerRaw struct {
	Contract *ETHDKGPhasesCaller // Generic read-only contract binding to access the raw methods on
}

// ETHDKGPhasesTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ETHDKGPhasesTransactorRaw struct {
	Contract *ETHDKGPhasesTransactor // Generic write-only contract binding to access the raw methods on
}

// NewETHDKGPhases creates a new instance of ETHDKGPhases, bound to a specific deployed contract.
func NewETHDKGPhases(address common.Address, backend bind.ContractBackend) (*ETHDKGPhases, error) {
	contract, err := bindETHDKGPhases(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ETHDKGPhases{ETHDKGPhasesCaller: ETHDKGPhasesCaller{contract: contract}, ETHDKGPhasesTransactor: ETHDKGPhasesTransactor{contract: contract}, ETHDKGPhasesFilterer: ETHDKGPhasesFilterer{contract: contract}}, nil
}

// NewETHDKGPhasesCaller creates a new read-only instance of ETHDKGPhases, bound to a specific deployed contract.
func NewETHDKGPhasesCaller(address common.Address, caller bind.ContractCaller) (*ETHDKGPhasesCaller, error) {
	contract, err := bindETHDKGPhases(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ETHDKGPhasesCaller{contract: contract}, nil
}

// NewETHDKGPhasesTransactor creates a new write-only instance of ETHDKGPhases, bound to a specific deployed contract.
func NewETHDKGPhasesTransactor(address common.Address, transactor bind.ContractTransactor) (*ETHDKGPhasesTransactor, error) {
	contract, err := bindETHDKGPhases(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ETHDKGPhasesTransactor{contract: contract}, nil
}

// NewETHDKGPhasesFilterer creates a new log filterer instance of ETHDKGPhases, bound to a specific deployed contract.
func NewETHDKGPhasesFilterer(address common.Address, filterer bind.ContractFilterer) (*ETHDKGPhasesFilterer, error) {
	contract, err := bindETHDKGPhases(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ETHDKGPhasesFilterer{contract: contract}, nil
}

// bindETHDKGPhases binds a generic wrapper to an already deployed contract.
func bindETHDKGPhases(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ETHDKGPhasesABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ETHDKGPhases *ETHDKGPhasesRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ETHDKGPhases.Contract.ETHDKGPhasesCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ETHDKGPhases *ETHDKGPhasesRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETHDKGPhases.Contract.ETHDKGPhasesTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ETHDKGPhases *ETHDKGPhasesRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ETHDKGPhases.Contract.ETHDKGPhasesTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ETHDKGPhases *ETHDKGPhasesCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ETHDKGPhases.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ETHDKGPhases *ETHDKGPhasesTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETHDKGPhases.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ETHDKGPhases *ETHDKGPhasesTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ETHDKGPhases.Contract.contract.Transact(opts, method, params...)
}

// Complete is a paid mutator transaction binding the contract method 0x522e1177.
//
// Solidity: function complete() returns()
func (_ETHDKGPhases *ETHDKGPhasesTransactor) Complete(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETHDKGPhases.contract.Transact(opts, "complete")
}

// Complete is a paid mutator transaction binding the contract method 0x522e1177.
//
// Solidity: function complete() returns()
func (_ETHDKGPhases *ETHDKGPhasesSession) Complete() (*types.Transaction, error) {
	return _ETHDKGPhases.Contract.Complete(&_ETHDKGPhases.TransactOpts)
}

// Complete is a paid mutator transaction binding the contract method 0x522e1177.
//
// Solidity: function complete() returns()
func (_ETHDKGPhases *ETHDKGPhasesTransactorSession) Complete() (*types.Transaction, error) {
	return _ETHDKGPhases.Contract.Complete(&_ETHDKGPhases.TransactOpts)
}

// DistributeShares is a paid mutator transaction binding the contract method 0x80b97e01.
//
// Solidity: function distributeShares(uint256[] encryptedShares, uint256[2][] commitments) returns()
func (_ETHDKGPhases *ETHDKGPhasesTransactor) DistributeShares(opts *bind.TransactOpts, encryptedShares []*big.Int, commitments [][2]*big.Int) (*types.Transaction, error) {
	return _ETHDKGPhases.contract.Transact(opts, "distributeShares", encryptedShares, commitments)
}

// DistributeShares is a paid mutator transaction binding the contract method 0x80b97e01.
//
// Solidity: function distributeShares(uint256[] encryptedShares, uint256[2][] commitments) returns()
func (_ETHDKGPhases *ETHDKGPhasesSession) DistributeShares(encryptedShares []*big.Int, commitments [][2]*big.Int) (*types.Transaction, error) {
	return _ETHDKGPhases.Contract.DistributeShares(&_ETHDKGPhases.TransactOpts, encryptedShares, commitments)
}

// DistributeShares is a paid mutator transaction binding the contract method 0x80b97e01.
//
// Solidity: function distributeShares(uint256[] encryptedShares, uint256[2][] commitments) returns()
func (_ETHDKGPhases *ETHDKGPhasesTransactorSession) DistributeShares(encryptedShares []*big.Int, commitments [][2]*big.Int) (*types.Transaction, error) {
	return _ETHDKGPhases.Contract.DistributeShares(&_ETHDKGPhases.TransactOpts, encryptedShares, commitments)
}

// Register is a paid mutator transaction binding the contract method 0x3442af5c.
//
// Solidity: function register(uint256[2] publicKey) returns()
func (_ETHDKGPhases *ETHDKGPhasesTransactor) Register(opts *bind.TransactOpts, publicKey [2]*big.Int) (*types.Transaction, error) {
	return _ETHDKGPhases.contract.Transact(opts, "register", publicKey)
}

// Register is a paid mutator transaction binding the contract method 0x3442af5c.
//
// Solidity: function register(uint256[2] publicKey) returns()
func (_ETHDKGPhases *ETHDKGPhasesSession) Register(publicKey [2]*big.Int) (*types.Transaction, error) {
	return _ETHDKGPhases.Contract.Register(&_ETHDKGPhases.TransactOpts, publicKey)
}

// Register is a paid mutator transaction binding the contract method 0x3442af5c.
//
// Solidity: function register(uint256[2] publicKey) returns()
func (_ETHDKGPhases *ETHDKGPhasesTransactorSession) Register(publicKey [2]*big.Int) (*types.Transaction, error) {
	return _ETHDKGPhases.Contract.Register(&_ETHDKGPhases.TransactOpts, publicKey)
}

// SubmitGPKJ is a paid mutator transaction binding the contract method 0x101f49c1.
//
// Solidity: function submitGPKJ(uint256[4] gpkj) returns()
func (_ETHDKGPhases *ETHDKGPhasesTransactor) SubmitGPKJ(opts *bind.TransactOpts, gpkj [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKGPhases.contract.Transact(opts, "submitGPKJ", gpkj)
}

// SubmitGPKJ is a paid mutator transaction binding the contract method 0x101f49c1.
//
// Solidity: function submitGPKJ(uint256[4] gpkj) returns()
func (_ETHDKGPhases *ETHDKGPhasesSession) SubmitGPKJ(gpkj [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKGPhases.Contract.SubmitGPKJ(&_ETHDKGPhases.TransactOpts, gpkj)
}

// SubmitGPKJ is a paid mutator transaction binding the contract method 0x101f49c1.
//
// Solidity: function submitGPKJ(uint256[4] gpkj) returns()
func (_ETHDKGPhases *ETHDKGPhasesTransactorSession) SubmitGPKJ(gpkj [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKGPhases.Contract.SubmitGPKJ(&_ETHDKGPhases.TransactOpts, gpkj)
}

// SubmitKeyShare is a paid mutator transaction binding the contract method 0x62a6523e.
//
// Solidity: function submitKeyShare(uint256[2] keyShareG1, uint256[2] keyShareG1CorrectnessProof, uint256[4] keyShareG2) returns()
func (_ETHDKGPhases *ETHDKGPhasesTransactor) SubmitKeyShare(opts *bind.TransactOpts, keyShareG1 [2]*big.Int, keyShareG1CorrectnessProof [2]*big.Int, keyShareG2 [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKGPhases.contract.Transact(opts, "submitKeyShare", keyShareG1, keyShareG1CorrectnessProof, keyShareG2)
}

// SubmitKeyShare is a paid mutator transaction binding the contract method 0x62a6523e.
//
// Solidity: function submitKeyShare(uint256[2] keyShareG1, uint256[2] keyShareG1CorrectnessProof, uint256[4] keyShareG2) returns()
func (_ETHDKGPhases *ETHDKGPhasesSession) SubmitKeyShare(keyShareG1 [2]*big.Int, keyShareG1CorrectnessProof [2]*big.Int, keyShareG2 [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKGPhases.Contract.SubmitKeyShare(&_ETHDKGPhases.TransactOpts, keyShareG1, keyShareG1CorrectnessProof, keyShareG2)
}

// SubmitKeyShare is a paid mutator transaction binding the contract method 0x62a6523e.
//
// Solidity: function submitKeyShare(uint256[2] keyShareG1, uint256[2] keyShareG1CorrectnessProof, uint256[4] keyShareG2) returns()
func (_ETHDKGPhases *ETHDKGPhasesTransactorSession) SubmitKeyShare(keyShareG1 [2]*big.Int, keyShareG1CorrectnessProof [2]*big.Int, keyShareG2 [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKGPhases.Contract.SubmitKeyShare(&_ETHDKGPhases.TransactOpts, keyShareG1, keyShareG1CorrectnessProof, keyShareG2)
}

// SubmitMasterPublicKey is a paid mutator transaction binding the contract method 0xe8323224.
//
// Solidity: function submitMasterPublicKey(uint256[4] masterPublicKey_) returns()
func (_ETHDKGPhases *ETHDKGPhasesTransactor) SubmitMasterPublicKey(opts *bind.TransactOpts, masterPublicKey_ [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKGPhases.contract.Transact(opts, "submitMasterPublicKey", masterPublicKey_)
}

// SubmitMasterPublicKey is a paid mutator transaction binding the contract method 0xe8323224.
//
// Solidity: function submitMasterPublicKey(uint256[4] masterPublicKey_) returns()
func (_ETHDKGPhases *ETHDKGPhasesSession) SubmitMasterPublicKey(masterPublicKey_ [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKGPhases.Contract.SubmitMasterPublicKey(&_ETHDKGPhases.TransactOpts, masterPublicKey_)
}

// SubmitMasterPublicKey is a paid mutator transaction binding the contract method 0xe8323224.
//
// Solidity: function submitMasterPublicKey(uint256[4] masterPublicKey_) returns()
func (_ETHDKGPhases *ETHDKGPhasesTransactorSession) SubmitMasterPublicKey(masterPublicKey_ [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKGPhases.Contract.SubmitMasterPublicKey(&_ETHDKGPhases.TransactOpts, masterPublicKey_)
}

// ETHDKGPhasesAddressRegisteredIterator is returned from FilterAddressRegistered and is used to iterate over the raw logs and unpacked data for AddressRegistered events raised by the ETHDKGPhases contract.
type ETHDKGPhasesAddressRegisteredIterator struct {
	Event *ETHDKGPhasesAddressRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGPhasesAddressRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGPhasesAddressRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGPhasesAddressRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGPhasesAddressRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGPhasesAddressRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGPhasesAddressRegistered represents a AddressRegistered event raised by the ETHDKGPhases contract.
type ETHDKGPhasesAddressRegistered struct {
	Account   common.Address
	Index     *big.Int
	Nonce     *big.Int
	PublicKey [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAddressRegistered is a free log retrieval operation binding the contract event 0x7f1304057ec61140fbf2f5f236790f34fcafe123d3eb0d298d92317c97da500d.
//
// Solidity: event AddressRegistered(address account, uint256 index, uint256 nonce, uint256[2] publicKey)
func (_ETHDKGPhases *ETHDKGPhasesFilterer) FilterAddressRegistered(opts *bind.FilterOpts) (*ETHDKGPhasesAddressRegisteredIterator, error) {

	logs, sub, err := _ETHDKGPhases.contract.FilterLogs(opts, "AddressRegistered")
	if err != nil {
		return nil, err
	}
	return &ETHDKGPhasesAddressRegisteredIterator{contract: _ETHDKGPhases.contract, event: "AddressRegistered", logs: logs, sub: sub}, nil
}

// WatchAddressRegistered is a free log subscription operation binding the contract event 0x7f1304057ec61140fbf2f5f236790f34fcafe123d3eb0d298d92317c97da500d.
//
// Solidity: event AddressRegistered(address account, uint256 index, uint256 nonce, uint256[2] publicKey)
func (_ETHDKGPhases *ETHDKGPhasesFilterer) WatchAddressRegistered(opts *bind.WatchOpts, sink chan<- *ETHDKGPhasesAddressRegistered) (event.Subscription, error) {

	logs, sub, err := _ETHDKGPhases.contract.WatchLogs(opts, "AddressRegistered")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGPhasesAddressRegistered)
				if err := _ETHDKGPhases.contract.UnpackLog(event, "AddressRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddressRegistered is a log parse operation binding the contract event 0x7f1304057ec61140fbf2f5f236790f34fcafe123d3eb0d298d92317c97da500d.
//
// Solidity: event AddressRegistered(address account, uint256 index, uint256 nonce, uint256[2] publicKey)
func (_ETHDKGPhases *ETHDKGPhasesFilterer) ParseAddressRegistered(log types.Log) (*ETHDKGPhasesAddressRegistered, error) {
	event := new(ETHDKGPhasesAddressRegistered)
	if err := _ETHDKGPhases.contract.UnpackLog(event, "AddressRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGPhasesGPKJSubmissionCompleteIterator is returned from FilterGPKJSubmissionComplete and is used to iterate over the raw logs and unpacked data for GPKJSubmissionComplete events raised by the ETHDKGPhases contract.
type ETHDKGPhasesGPKJSubmissionCompleteIterator struct {
	Event *ETHDKGPhasesGPKJSubmissionComplete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGPhasesGPKJSubmissionCompleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGPhasesGPKJSubmissionComplete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGPhasesGPKJSubmissionComplete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGPhasesGPKJSubmissionCompleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGPhasesGPKJSubmissionCompleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGPhasesGPKJSubmissionComplete represents a GPKJSubmissionComplete event raised by the ETHDKGPhases contract.
type ETHDKGPhasesGPKJSubmissionComplete struct {
	BlockNumber *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterGPKJSubmissionComplete is a free log retrieval operation binding the contract event 0x87bfe600b78cad9f7cf68c99eb582c1748f636b3269842b37d5873b0e069f628.
//
// Solidity: event GPKJSubmissionComplete(uint256 blockNumber)
func (_ETHDKGPhases *ETHDKGPhasesFilterer) FilterGPKJSubmissionComplete(opts *bind.FilterOpts) (*ETHDKGPhasesGPKJSubmissionCompleteIterator, error) {

	logs, sub, err := _ETHDKGPhases.contract.FilterLogs(opts, "GPKJSubmissionComplete")
	if err != nil {
		return nil, err
	}
	return &ETHDKGPhasesGPKJSubmissionCompleteIterator{contract: _ETHDKGPhases.contract, event: "GPKJSubmissionComplete", logs: logs, sub: sub}, nil
}

// WatchGPKJSubmissionComplete is a free log subscription operation binding the contract event 0x87bfe600b78cad9f7cf68c99eb582c1748f636b3269842b37d5873b0e069f628.
//
// Solidity: event GPKJSubmissionComplete(uint256 blockNumber)
func (_ETHDKGPhases *ETHDKGPhasesFilterer) WatchGPKJSubmissionComplete(opts *bind.WatchOpts, sink chan<- *ETHDKGPhasesGPKJSubmissionComplete) (event.Subscription, error) {

	logs, sub, err := _ETHDKGPhases.contract.WatchLogs(opts, "GPKJSubmissionComplete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGPhasesGPKJSubmissionComplete)
				if err := _ETHDKGPhases.contract.UnpackLog(event, "GPKJSubmissionComplete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseGPKJSubmissionComplete is a log parse operation binding the contract event 0x87bfe600b78cad9f7cf68c99eb582c1748f636b3269842b37d5873b0e069f628.
//
// Solidity: event GPKJSubmissionComplete(uint256 blockNumber)
func (_ETHDKGPhases *ETHDKGPhasesFilterer) ParseGPKJSubmissionComplete(log types.Log) (*ETHDKGPhasesGPKJSubmissionComplete, error) {
	event := new(ETHDKGPhasesGPKJSubmissionComplete)
	if err := _ETHDKGPhases.contract.UnpackLog(event, "GPKJSubmissionComplete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGPhasesKeyShareSubmissionCompleteIterator is returned from FilterKeyShareSubmissionComplete and is used to iterate over the raw logs and unpacked data for KeyShareSubmissionComplete events raised by the ETHDKGPhases contract.
type ETHDKGPhasesKeyShareSubmissionCompleteIterator struct {
	Event *ETHDKGPhasesKeyShareSubmissionComplete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGPhasesKeyShareSubmissionCompleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGPhasesKeyShareSubmissionComplete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGPhasesKeyShareSubmissionComplete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGPhasesKeyShareSubmissionCompleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGPhasesKeyShareSubmissionCompleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGPhasesKeyShareSubmissionComplete represents a KeyShareSubmissionComplete event raised by the ETHDKGPhases contract.
type ETHDKGPhasesKeyShareSubmissionComplete struct {
	BlockNumber *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterKeyShareSubmissionComplete is a free log retrieval operation binding the contract event 0x522cec98f6caa194456c44afa9e8cef9ac63eecb0be60e20d180ce19cfb0ef59.
//
// Solidity: event KeyShareSubmissionComplete(uint256 blockNumber)
func (_ETHDKGPhases *ETHDKGPhasesFilterer) FilterKeyShareSubmissionComplete(opts *bind.FilterOpts) (*ETHDKGPhasesKeyShareSubmissionCompleteIterator, error) {

	logs, sub, err := _ETHDKGPhases.contract.FilterLogs(opts, "KeyShareSubmissionComplete")
	if err != nil {
		return nil, err
	}
	return &ETHDKGPhasesKeyShareSubmissionCompleteIterator{contract: _ETHDKGPhases.contract, event: "KeyShareSubmissionComplete", logs: logs, sub: sub}, nil
}

// WatchKeyShareSubmissionComplete is a free log subscription operation binding the contract event 0x522cec98f6caa194456c44afa9e8cef9ac63eecb0be60e20d180ce19cfb0ef59.
//
// Solidity: event KeyShareSubmissionComplete(uint256 blockNumber)
func (_ETHDKGPhases *ETHDKGPhasesFilterer) WatchKeyShareSubmissionComplete(opts *bind.WatchOpts, sink chan<- *ETHDKGPhasesKeyShareSubmissionComplete) (event.Subscription, error) {

	logs, sub, err := _ETHDKGPhases.contract.WatchLogs(opts, "KeyShareSubmissionComplete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGPhasesKeyShareSubmissionComplete)
				if err := _ETHDKGPhases.contract.UnpackLog(event, "KeyShareSubmissionComplete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKeyShareSubmissionComplete is a log parse operation binding the contract event 0x522cec98f6caa194456c44afa9e8cef9ac63eecb0be60e20d180ce19cfb0ef59.
//
// Solidity: event KeyShareSubmissionComplete(uint256 blockNumber)
func (_ETHDKGPhases *ETHDKGPhasesFilterer) ParseKeyShareSubmissionComplete(log types.Log) (*ETHDKGPhasesKeyShareSubmissionComplete, error) {
	event := new(ETHDKGPhasesKeyShareSubmissionComplete)
	if err := _ETHDKGPhases.contract.UnpackLog(event, "KeyShareSubmissionComplete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGPhasesKeyShareSubmittedIterator is returned from FilterKeyShareSubmitted and is used to iterate over the raw logs and unpacked data for KeyShareSubmitted events raised by the ETHDKGPhases contract.
type ETHDKGPhasesKeyShareSubmittedIterator struct {
	Event *ETHDKGPhasesKeyShareSubmitted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGPhasesKeyShareSubmittedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGPhasesKeyShareSubmitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGPhasesKeyShareSubmitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGPhasesKeyShareSubmittedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGPhasesKeyShareSubmittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGPhasesKeyShareSubmitted represents a KeyShareSubmitted event raised by the ETHDKGPhases contract.
type ETHDKGPhasesKeyShareSubmitted struct {
	Account                    common.Address
	Index                      *big.Int
	Nonce                      *big.Int
	KeyShareG1                 [2]*big.Int
	KeyShareG1CorrectnessProof [2]*big.Int
	KeyShareG2                 [4]*big.Int
	Raw                        types.Log // Blockchain specific contextual infos
}

// FilterKeyShareSubmitted is a free log retrieval operation binding the contract event 0x6162e2d11398e4063e4c8565dafc4fb6755bbead93747ea836a5ef73a594aaf7.
//
// Solidity: event KeyShareSubmitted(address account, uint256 index, uint256 nonce, uint256[2] keyShareG1, uint256[2] keyShareG1CorrectnessProof, uint256[4] keyShareG2)
func (_ETHDKGPhases *ETHDKGPhasesFilterer) FilterKeyShareSubmitted(opts *bind.FilterOpts) (*ETHDKGPhasesKeyShareSubmittedIterator, error) {

	logs, sub, err := _ETHDKGPhases.contract.FilterLogs(opts, "KeyShareSubmitted")
	if err != nil {
		return nil, err
	}
	return &ETHDKGPhasesKeyShareSubmittedIterator{contract: _ETHDKGPhases.contract, event: "KeyShareSubmitted", logs: logs, sub: sub}, nil
}

// WatchKeyShareSubmitted is a free log subscription operation binding the contract event 0x6162e2d11398e4063e4c8565dafc4fb6755bbead93747ea836a5ef73a594aaf7.
//
// Solidity: event KeyShareSubmitted(address account, uint256 index, uint256 nonce, uint256[2] keyShareG1, uint256[2] keyShareG1CorrectnessProof, uint256[4] keyShareG2)
func (_ETHDKGPhases *ETHDKGPhasesFilterer) WatchKeyShareSubmitted(opts *bind.WatchOpts, sink chan<- *ETHDKGPhasesKeyShareSubmitted) (event.Subscription, error) {

	logs, sub, err := _ETHDKGPhases.contract.WatchLogs(opts, "KeyShareSubmitted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGPhasesKeyShareSubmitted)
				if err := _ETHDKGPhases.contract.UnpackLog(event, "KeyShareSubmitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKeyShareSubmitted is a log parse operation binding the contract event 0x6162e2d11398e4063e4c8565dafc4fb6755bbead93747ea836a5ef73a594aaf7.
//
// Solidity: event KeyShareSubmitted(address account, uint256 index, uint256 nonce, uint256[2] keyShareG1, uint256[2] keyShareG1CorrectnessProof, uint256[4] keyShareG2)
func (_ETHDKGPhases *ETHDKGPhasesFilterer) ParseKeyShareSubmitted(log types.Log) (*ETHDKGPhasesKeyShareSubmitted, error) {
	event := new(ETHDKGPhasesKeyShareSubmitted)
	if err := _ETHDKGPhases.contract.UnpackLog(event, "KeyShareSubmitted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGPhasesMPKSetIterator is returned from FilterMPKSet and is used to iterate over the raw logs and unpacked data for MPKSet events raised by the ETHDKGPhases contract.
type ETHDKGPhasesMPKSetIterator struct {
	Event *ETHDKGPhasesMPKSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGPhasesMPKSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGPhasesMPKSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGPhasesMPKSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGPhasesMPKSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGPhasesMPKSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGPhasesMPKSet represents a MPKSet event raised by the ETHDKGPhases contract.
type ETHDKGPhasesMPKSet struct {
	BlockNumber *big.Int
	Nonce       *big.Int
	Mpk         [4]*big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterMPKSet is a free log retrieval operation binding the contract event 0x71b1ebd27be320895a22125d6458e3363aefa6944a312ede4bf275867e6d5a71.
//
// Solidity: event MPKSet(uint256 blockNumber, uint256 nonce, uint256[4] mpk)
func (_ETHDKGPhases *ETHDKGPhasesFilterer) FilterMPKSet(opts *bind.FilterOpts) (*ETHDKGPhasesMPKSetIterator, error) {

	logs, sub, err := _ETHDKGPhases.contract.FilterLogs(opts, "MPKSet")
	if err != nil {
		return nil, err
	}
	return &ETHDKGPhasesMPKSetIterator{contract: _ETHDKGPhases.contract, event: "MPKSet", logs: logs, sub: sub}, nil
}

// WatchMPKSet is a free log subscription operation binding the contract event 0x71b1ebd27be320895a22125d6458e3363aefa6944a312ede4bf275867e6d5a71.
//
// Solidity: event MPKSet(uint256 blockNumber, uint256 nonce, uint256[4] mpk)
func (_ETHDKGPhases *ETHDKGPhasesFilterer) WatchMPKSet(opts *bind.WatchOpts, sink chan<- *ETHDKGPhasesMPKSet) (event.Subscription, error) {

	logs, sub, err := _ETHDKGPhases.contract.WatchLogs(opts, "MPKSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGPhasesMPKSet)
				if err := _ETHDKGPhases.contract.UnpackLog(event, "MPKSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMPKSet is a log parse operation binding the contract event 0x71b1ebd27be320895a22125d6458e3363aefa6944a312ede4bf275867e6d5a71.
//
// Solidity: event MPKSet(uint256 blockNumber, uint256 nonce, uint256[4] mpk)
func (_ETHDKGPhases *ETHDKGPhasesFilterer) ParseMPKSet(log types.Log) (*ETHDKGPhasesMPKSet, error) {
	event := new(ETHDKGPhasesMPKSet)
	if err := _ETHDKGPhases.contract.UnpackLog(event, "MPKSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGPhasesRegistrationCompleteIterator is returned from FilterRegistrationComplete and is used to iterate over the raw logs and unpacked data for RegistrationComplete events raised by the ETHDKGPhases contract.
type ETHDKGPhasesRegistrationCompleteIterator struct {
	Event *ETHDKGPhasesRegistrationComplete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGPhasesRegistrationCompleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGPhasesRegistrationComplete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGPhasesRegistrationComplete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGPhasesRegistrationCompleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGPhasesRegistrationCompleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGPhasesRegistrationComplete represents a RegistrationComplete event raised by the ETHDKGPhases contract.
type ETHDKGPhasesRegistrationComplete struct {
	BlockNumber *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRegistrationComplete is a free log retrieval operation binding the contract event 0x833013b96b786b4eca83baac286920e5e53956c21ff3894f1d9f02e97d6ed764.
//
// Solidity: event RegistrationComplete(uint256 blockNumber)
func (_ETHDKGPhases *ETHDKGPhasesFilterer) FilterRegistrationComplete(opts *bind.FilterOpts) (*ETHDKGPhasesRegistrationCompleteIterator, error) {

	logs, sub, err := _ETHDKGPhases.contract.FilterLogs(opts, "RegistrationComplete")
	if err != nil {
		return nil, err
	}
	return &ETHDKGPhasesRegistrationCompleteIterator{contract: _ETHDKGPhases.contract, event: "RegistrationComplete", logs: logs, sub: sub}, nil
}

// WatchRegistrationComplete is a free log subscription operation binding the contract event 0x833013b96b786b4eca83baac286920e5e53956c21ff3894f1d9f02e97d6ed764.
//
// Solidity: event RegistrationComplete(uint256 blockNumber)
func (_ETHDKGPhases *ETHDKGPhasesFilterer) WatchRegistrationComplete(opts *bind.WatchOpts, sink chan<- *ETHDKGPhasesRegistrationComplete) (event.Subscription, error) {

	logs, sub, err := _ETHDKGPhases.contract.WatchLogs(opts, "RegistrationComplete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGPhasesRegistrationComplete)
				if err := _ETHDKGPhases.contract.UnpackLog(event, "RegistrationComplete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegistrationComplete is a log parse operation binding the contract event 0x833013b96b786b4eca83baac286920e5e53956c21ff3894f1d9f02e97d6ed764.
//
// Solidity: event RegistrationComplete(uint256 blockNumber)
func (_ETHDKGPhases *ETHDKGPhasesFilterer) ParseRegistrationComplete(log types.Log) (*ETHDKGPhasesRegistrationComplete, error) {
	event := new(ETHDKGPhasesRegistrationComplete)
	if err := _ETHDKGPhases.contract.UnpackLog(event, "RegistrationComplete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGPhasesRegistrationOpenedIterator is returned from FilterRegistrationOpened and is used to iterate over the raw logs and unpacked data for RegistrationOpened events raised by the ETHDKGPhases contract.
type ETHDKGPhasesRegistrationOpenedIterator struct {
	Event *ETHDKGPhasesRegistrationOpened // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGPhasesRegistrationOpenedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGPhasesRegistrationOpened)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGPhasesRegistrationOpened)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGPhasesRegistrationOpenedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGPhasesRegistrationOpenedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGPhasesRegistrationOpened represents a RegistrationOpened event raised by the ETHDKGPhases contract.
type ETHDKGPhasesRegistrationOpened struct {
	StartBlock         *big.Int
	NumberValidators   *big.Int
	Nonce              *big.Int
	PhaseLength        *big.Int
	ConfirmationLength *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterRegistrationOpened is a free log retrieval operation binding the contract event 0xbda431b9b63510f1398bf33d700e013315bcba905507078a1780f13ea5b354b9.
//
// Solidity: event RegistrationOpened(uint256 startBlock, uint256 numberValidators, uint256 nonce, uint256 phaseLength, uint256 confirmationLength)
func (_ETHDKGPhases *ETHDKGPhasesFilterer) FilterRegistrationOpened(opts *bind.FilterOpts) (*ETHDKGPhasesRegistrationOpenedIterator, error) {

	logs, sub, err := _ETHDKGPhases.contract.FilterLogs(opts, "RegistrationOpened")
	if err != nil {
		return nil, err
	}
	return &ETHDKGPhasesRegistrationOpenedIterator{contract: _ETHDKGPhases.contract, event: "RegistrationOpened", logs: logs, sub: sub}, nil
}

// WatchRegistrationOpened is a free log subscription operation binding the contract event 0xbda431b9b63510f1398bf33d700e013315bcba905507078a1780f13ea5b354b9.
//
// Solidity: event RegistrationOpened(uint256 startBlock, uint256 numberValidators, uint256 nonce, uint256 phaseLength, uint256 confirmationLength)
func (_ETHDKGPhases *ETHDKGPhasesFilterer) WatchRegistrationOpened(opts *bind.WatchOpts, sink chan<- *ETHDKGPhasesRegistrationOpened) (event.Subscription, error) {

	logs, sub, err := _ETHDKGPhases.contract.WatchLogs(opts, "RegistrationOpened")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGPhasesRegistrationOpened)
				if err := _ETHDKGPhases.contract.UnpackLog(event, "RegistrationOpened", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegistrationOpened is a log parse operation binding the contract event 0xbda431b9b63510f1398bf33d700e013315bcba905507078a1780f13ea5b354b9.
//
// Solidity: event RegistrationOpened(uint256 startBlock, uint256 numberValidators, uint256 nonce, uint256 phaseLength, uint256 confirmationLength)
func (_ETHDKGPhases *ETHDKGPhasesFilterer) ParseRegistrationOpened(log types.Log) (*ETHDKGPhasesRegistrationOpened, error) {
	event := new(ETHDKGPhasesRegistrationOpened)
	if err := _ETHDKGPhases.contract.UnpackLog(event, "RegistrationOpened", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGPhasesShareDistributionCompleteIterator is returned from FilterShareDistributionComplete and is used to iterate over the raw logs and unpacked data for ShareDistributionComplete events raised by the ETHDKGPhases contract.
type ETHDKGPhasesShareDistributionCompleteIterator struct {
	Event *ETHDKGPhasesShareDistributionComplete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGPhasesShareDistributionCompleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGPhasesShareDistributionComplete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGPhasesShareDistributionComplete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGPhasesShareDistributionCompleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGPhasesShareDistributionCompleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGPhasesShareDistributionComplete represents a ShareDistributionComplete event raised by the ETHDKGPhases contract.
type ETHDKGPhasesShareDistributionComplete struct {
	BlockNumber *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterShareDistributionComplete is a free log retrieval operation binding the contract event 0xbfe94ffef5ddde4d25ac7b652f3f67686ea63f9badbfe1f25451e26fc262d11c.
//
// Solidity: event ShareDistributionComplete(uint256 blockNumber)
func (_ETHDKGPhases *ETHDKGPhasesFilterer) FilterShareDistributionComplete(opts *bind.FilterOpts) (*ETHDKGPhasesShareDistributionCompleteIterator, error) {

	logs, sub, err := _ETHDKGPhases.contract.FilterLogs(opts, "ShareDistributionComplete")
	if err != nil {
		return nil, err
	}
	return &ETHDKGPhasesShareDistributionCompleteIterator{contract: _ETHDKGPhases.contract, event: "ShareDistributionComplete", logs: logs, sub: sub}, nil
}

// WatchShareDistributionComplete is a free log subscription operation binding the contract event 0xbfe94ffef5ddde4d25ac7b652f3f67686ea63f9badbfe1f25451e26fc262d11c.
//
// Solidity: event ShareDistributionComplete(uint256 blockNumber)
func (_ETHDKGPhases *ETHDKGPhasesFilterer) WatchShareDistributionComplete(opts *bind.WatchOpts, sink chan<- *ETHDKGPhasesShareDistributionComplete) (event.Subscription, error) {

	logs, sub, err := _ETHDKGPhases.contract.WatchLogs(opts, "ShareDistributionComplete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGPhasesShareDistributionComplete)
				if err := _ETHDKGPhases.contract.UnpackLog(event, "ShareDistributionComplete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseShareDistributionComplete is a log parse operation binding the contract event 0xbfe94ffef5ddde4d25ac7b652f3f67686ea63f9badbfe1f25451e26fc262d11c.
//
// Solidity: event ShareDistributionComplete(uint256 blockNumber)
func (_ETHDKGPhases *ETHDKGPhasesFilterer) ParseShareDistributionComplete(log types.Log) (*ETHDKGPhasesShareDistributionComplete, error) {
	event := new(ETHDKGPhasesShareDistributionComplete)
	if err := _ETHDKGPhases.contract.UnpackLog(event, "ShareDistributionComplete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGPhasesSharesDistributedIterator is returned from FilterSharesDistributed and is used to iterate over the raw logs and unpacked data for SharesDistributed events raised by the ETHDKGPhases contract.
type ETHDKGPhasesSharesDistributedIterator struct {
	Event *ETHDKGPhasesSharesDistributed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGPhasesSharesDistributedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGPhasesSharesDistributed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGPhasesSharesDistributed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGPhasesSharesDistributedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGPhasesSharesDistributedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGPhasesSharesDistributed represents a SharesDistributed event raised by the ETHDKGPhases contract.
type ETHDKGPhasesSharesDistributed struct {
	Account         common.Address
	Index           *big.Int
	Nonce           *big.Int
	EncryptedShares []*big.Int
	Commitments     [][2]*big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterSharesDistributed is a free log retrieval operation binding the contract event 0xf0c8b0ef2867c2b4639b404a0296b6bbf0bf97e20856af42144a5a6035c0d0d2.
//
// Solidity: event SharesDistributed(address account, uint256 index, uint256 nonce, uint256[] encryptedShares, uint256[2][] commitments)
func (_ETHDKGPhases *ETHDKGPhasesFilterer) FilterSharesDistributed(opts *bind.FilterOpts) (*ETHDKGPhasesSharesDistributedIterator, error) {

	logs, sub, err := _ETHDKGPhases.contract.FilterLogs(opts, "SharesDistributed")
	if err != nil {
		return nil, err
	}
	return &ETHDKGPhasesSharesDistributedIterator{contract: _ETHDKGPhases.contract, event: "SharesDistributed", logs: logs, sub: sub}, nil
}

// WatchSharesDistributed is a free log subscription operation binding the contract event 0xf0c8b0ef2867c2b4639b404a0296b6bbf0bf97e20856af42144a5a6035c0d0d2.
//
// Solidity: event SharesDistributed(address account, uint256 index, uint256 nonce, uint256[] encryptedShares, uint256[2][] commitments)
func (_ETHDKGPhases *ETHDKGPhasesFilterer) WatchSharesDistributed(opts *bind.WatchOpts, sink chan<- *ETHDKGPhasesSharesDistributed) (event.Subscription, error) {

	logs, sub, err := _ETHDKGPhases.contract.WatchLogs(opts, "SharesDistributed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGPhasesSharesDistributed)
				if err := _ETHDKGPhases.contract.UnpackLog(event, "SharesDistributed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSharesDistributed is a log parse operation binding the contract event 0xf0c8b0ef2867c2b4639b404a0296b6bbf0bf97e20856af42144a5a6035c0d0d2.
//
// Solidity: event SharesDistributed(address account, uint256 index, uint256 nonce, uint256[] encryptedShares, uint256[2][] commitments)
func (_ETHDKGPhases *ETHDKGPhasesFilterer) ParseSharesDistributed(log types.Log) (*ETHDKGPhasesSharesDistributed, error) {
	event := new(ETHDKGPhasesSharesDistributed)
	if err := _ETHDKGPhases.contract.UnpackLog(event, "SharesDistributed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGPhasesValidatorMemberAddedIterator is returned from FilterValidatorMemberAdded and is used to iterate over the raw logs and unpacked data for ValidatorMemberAdded events raised by the ETHDKGPhases contract.
type ETHDKGPhasesValidatorMemberAddedIterator struct {
	Event *ETHDKGPhasesValidatorMemberAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGPhasesValidatorMemberAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGPhasesValidatorMemberAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGPhasesValidatorMemberAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGPhasesValidatorMemberAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGPhasesValidatorMemberAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGPhasesValidatorMemberAdded represents a ValidatorMemberAdded event raised by the ETHDKGPhases contract.
type ETHDKGPhasesValidatorMemberAdded struct {
	Account common.Address
	Index   *big.Int
	Nonce   *big.Int
	Epoch   *big.Int
	Share0  *big.Int
	Share1  *big.Int
	Share2  *big.Int
	Share3  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterValidatorMemberAdded is a free log retrieval operation binding the contract event 0x09b90b08bbc3dbe22e9d2a0bc9c2c7614c7511cd0ad72177727a1e762115bf06.
//
// Solidity: event ValidatorMemberAdded(address account, uint256 index, uint256 nonce, uint256 epoch, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_ETHDKGPhases *ETHDKGPhasesFilterer) FilterValidatorMemberAdded(opts *bind.FilterOpts) (*ETHDKGPhasesValidatorMemberAddedIterator, error) {

	logs, sub, err := _ETHDKGPhases.contract.FilterLogs(opts, "ValidatorMemberAdded")
	if err != nil {
		return nil, err
	}
	return &ETHDKGPhasesValidatorMemberAddedIterator{contract: _ETHDKGPhases.contract, event: "ValidatorMemberAdded", logs: logs, sub: sub}, nil
}

// WatchValidatorMemberAdded is a free log subscription operation binding the contract event 0x09b90b08bbc3dbe22e9d2a0bc9c2c7614c7511cd0ad72177727a1e762115bf06.
//
// Solidity: event ValidatorMemberAdded(address account, uint256 index, uint256 nonce, uint256 epoch, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_ETHDKGPhases *ETHDKGPhasesFilterer) WatchValidatorMemberAdded(opts *bind.WatchOpts, sink chan<- *ETHDKGPhasesValidatorMemberAdded) (event.Subscription, error) {

	logs, sub, err := _ETHDKGPhases.contract.WatchLogs(opts, "ValidatorMemberAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGPhasesValidatorMemberAdded)
				if err := _ETHDKGPhases.contract.UnpackLog(event, "ValidatorMemberAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorMemberAdded is a log parse operation binding the contract event 0x09b90b08bbc3dbe22e9d2a0bc9c2c7614c7511cd0ad72177727a1e762115bf06.
//
// Solidity: event ValidatorMemberAdded(address account, uint256 index, uint256 nonce, uint256 epoch, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_ETHDKGPhases *ETHDKGPhasesFilterer) ParseValidatorMemberAdded(log types.Log) (*ETHDKGPhasesValidatorMemberAdded, error) {
	event := new(ETHDKGPhasesValidatorMemberAdded)
	if err := _ETHDKGPhases.contract.UnpackLog(event, "ValidatorMemberAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGPhasesValidatorSetCompletedIterator is returned from FilterValidatorSetCompleted and is used to iterate over the raw logs and unpacked data for ValidatorSetCompleted events raised by the ETHDKGPhases contract.
type ETHDKGPhasesValidatorSetCompletedIterator struct {
	Event *ETHDKGPhasesValidatorSetCompleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGPhasesValidatorSetCompletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGPhasesValidatorSetCompleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGPhasesValidatorSetCompleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGPhasesValidatorSetCompletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGPhasesValidatorSetCompletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGPhasesValidatorSetCompleted represents a ValidatorSetCompleted event raised by the ETHDKGPhases contract.
type ETHDKGPhasesValidatorSetCompleted struct {
	ValidatorCount *big.Int
	Nonce          *big.Int
	Epoch          *big.Int
	EthHeight      *big.Int
	MadHeight      *big.Int
	GroupKey0      *big.Int
	GroupKey1      *big.Int
	GroupKey2      *big.Int
	GroupKey3      *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterValidatorSetCompleted is a free log retrieval operation binding the contract event 0xd7237b781669fa700ecf77be6cd8fa0f4b98b1a24ac584a9b6b44c509216718a.
//
// Solidity: event ValidatorSetCompleted(uint256 validatorCount, uint256 nonce, uint256 epoch, uint256 ethHeight, uint256 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_ETHDKGPhases *ETHDKGPhasesFilterer) FilterValidatorSetCompleted(opts *bind.FilterOpts) (*ETHDKGPhasesValidatorSetCompletedIterator, error) {

	logs, sub, err := _ETHDKGPhases.contract.FilterLogs(opts, "ValidatorSetCompleted")
	if err != nil {
		return nil, err
	}
	return &ETHDKGPhasesValidatorSetCompletedIterator{contract: _ETHDKGPhases.contract, event: "ValidatorSetCompleted", logs: logs, sub: sub}, nil
}

// WatchValidatorSetCompleted is a free log subscription operation binding the contract event 0xd7237b781669fa700ecf77be6cd8fa0f4b98b1a24ac584a9b6b44c509216718a.
//
// Solidity: event ValidatorSetCompleted(uint256 validatorCount, uint256 nonce, uint256 epoch, uint256 ethHeight, uint256 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_ETHDKGPhases *ETHDKGPhasesFilterer) WatchValidatorSetCompleted(opts *bind.WatchOpts, sink chan<- *ETHDKGPhasesValidatorSetCompleted) (event.Subscription, error) {

	logs, sub, err := _ETHDKGPhases.contract.WatchLogs(opts, "ValidatorSetCompleted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGPhasesValidatorSetCompleted)
				if err := _ETHDKGPhases.contract.UnpackLog(event, "ValidatorSetCompleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorSetCompleted is a log parse operation binding the contract event 0xd7237b781669fa700ecf77be6cd8fa0f4b98b1a24ac584a9b6b44c509216718a.
//
// Solidity: event ValidatorSetCompleted(uint256 validatorCount, uint256 nonce, uint256 epoch, uint256 ethHeight, uint256 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_ETHDKGPhases *ETHDKGPhasesFilterer) ParseValidatorSetCompleted(log types.Log) (*ETHDKGPhasesValidatorSetCompleted, error) {
	event := new(ETHDKGPhasesValidatorSetCompleted)
	if err := _ETHDKGPhases.contract.UnpackLog(event, "ValidatorSetCompleted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGStorageMetaData contains all meta data concerning the ETHDKGStorage contract.
var ETHDKGStorageMetaData = &bind.MetaData{
	ABI: "[]",
}

// ETHDKGStorageABI is the input ABI used to generate the binding from.
// Deprecated: Use ETHDKGStorageMetaData.ABI instead.
var ETHDKGStorageABI = ETHDKGStorageMetaData.ABI

// ETHDKGStorage is an auto generated Go binding around an Ethereum contract.
type ETHDKGStorage struct {
	ETHDKGStorageCaller     // Read-only binding to the contract
	ETHDKGStorageTransactor // Write-only binding to the contract
	ETHDKGStorageFilterer   // Log filterer for contract events
}

// ETHDKGStorageCaller is an auto generated read-only Go binding around an Ethereum contract.
type ETHDKGStorageCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETHDKGStorageTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ETHDKGStorageTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETHDKGStorageFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ETHDKGStorageFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETHDKGStorageSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ETHDKGStorageSession struct {
	Contract     *ETHDKGStorage    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ETHDKGStorageCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ETHDKGStorageCallerSession struct {
	Contract *ETHDKGStorageCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// ETHDKGStorageTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ETHDKGStorageTransactorSession struct {
	Contract     *ETHDKGStorageTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// ETHDKGStorageRaw is an auto generated low-level Go binding around an Ethereum contract.
type ETHDKGStorageRaw struct {
	Contract *ETHDKGStorage // Generic contract binding to access the raw methods on
}

// ETHDKGStorageCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ETHDKGStorageCallerRaw struct {
	Contract *ETHDKGStorageCaller // Generic read-only contract binding to access the raw methods on
}

// ETHDKGStorageTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ETHDKGStorageTransactorRaw struct {
	Contract *ETHDKGStorageTransactor // Generic write-only contract binding to access the raw methods on
}

// NewETHDKGStorage creates a new instance of ETHDKGStorage, bound to a specific deployed contract.
func NewETHDKGStorage(address common.Address, backend bind.ContractBackend) (*ETHDKGStorage, error) {
	contract, err := bindETHDKGStorage(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ETHDKGStorage{ETHDKGStorageCaller: ETHDKGStorageCaller{contract: contract}, ETHDKGStorageTransactor: ETHDKGStorageTransactor{contract: contract}, ETHDKGStorageFilterer: ETHDKGStorageFilterer{contract: contract}}, nil
}

// NewETHDKGStorageCaller creates a new read-only instance of ETHDKGStorage, bound to a specific deployed contract.
func NewETHDKGStorageCaller(address common.Address, caller bind.ContractCaller) (*ETHDKGStorageCaller, error) {
	contract, err := bindETHDKGStorage(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ETHDKGStorageCaller{contract: contract}, nil
}

// NewETHDKGStorageTransactor creates a new write-only instance of ETHDKGStorage, bound to a specific deployed contract.
func NewETHDKGStorageTransactor(address common.Address, transactor bind.ContractTransactor) (*ETHDKGStorageTransactor, error) {
	contract, err := bindETHDKGStorage(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ETHDKGStorageTransactor{contract: contract}, nil
}

// NewETHDKGStorageFilterer creates a new log filterer instance of ETHDKGStorage, bound to a specific deployed contract.
func NewETHDKGStorageFilterer(address common.Address, filterer bind.ContractFilterer) (*ETHDKGStorageFilterer, error) {
	contract, err := bindETHDKGStorage(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ETHDKGStorageFilterer{contract: contract}, nil
}

// bindETHDKGStorage binds a generic wrapper to an already deployed contract.
func bindETHDKGStorage(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ETHDKGStorageABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ETHDKGStorage *ETHDKGStorageRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ETHDKGStorage.Contract.ETHDKGStorageCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ETHDKGStorage *ETHDKGStorageRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETHDKGStorage.Contract.ETHDKGStorageTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ETHDKGStorage *ETHDKGStorageRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ETHDKGStorage.Contract.ETHDKGStorageTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ETHDKGStorage *ETHDKGStorageCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ETHDKGStorage.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ETHDKGStorage *ETHDKGStorageTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETHDKGStorage.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ETHDKGStorage *ETHDKGStorageTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ETHDKGStorage.Contract.contract.Transact(opts, method, params...)
}

// ETHDKGUtilsMetaData contains all meta data concerning the ETHDKGUtils contract.
var ETHDKGUtilsMetaData = &bind.MetaData{
	ABI: "[]",
}

// ETHDKGUtilsABI is the input ABI used to generate the binding from.
// Deprecated: Use ETHDKGUtilsMetaData.ABI instead.
var ETHDKGUtilsABI = ETHDKGUtilsMetaData.ABI

// ETHDKGUtils is an auto generated Go binding around an Ethereum contract.
type ETHDKGUtils struct {
	ETHDKGUtilsCaller     // Read-only binding to the contract
	ETHDKGUtilsTransactor // Write-only binding to the contract
	ETHDKGUtilsFilterer   // Log filterer for contract events
}

// ETHDKGUtilsCaller is an auto generated read-only Go binding around an Ethereum contract.
type ETHDKGUtilsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETHDKGUtilsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ETHDKGUtilsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETHDKGUtilsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ETHDKGUtilsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETHDKGUtilsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ETHDKGUtilsSession struct {
	Contract     *ETHDKGUtils      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ETHDKGUtilsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ETHDKGUtilsCallerSession struct {
	Contract *ETHDKGUtilsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// ETHDKGUtilsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ETHDKGUtilsTransactorSession struct {
	Contract     *ETHDKGUtilsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// ETHDKGUtilsRaw is an auto generated low-level Go binding around an Ethereum contract.
type ETHDKGUtilsRaw struct {
	Contract *ETHDKGUtils // Generic contract binding to access the raw methods on
}

// ETHDKGUtilsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ETHDKGUtilsCallerRaw struct {
	Contract *ETHDKGUtilsCaller // Generic read-only contract binding to access the raw methods on
}

// ETHDKGUtilsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ETHDKGUtilsTransactorRaw struct {
	Contract *ETHDKGUtilsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewETHDKGUtils creates a new instance of ETHDKGUtils, bound to a specific deployed contract.
func NewETHDKGUtils(address common.Address, backend bind.ContractBackend) (*ETHDKGUtils, error) {
	contract, err := bindETHDKGUtils(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ETHDKGUtils{ETHDKGUtilsCaller: ETHDKGUtilsCaller{contract: contract}, ETHDKGUtilsTransactor: ETHDKGUtilsTransactor{contract: contract}, ETHDKGUtilsFilterer: ETHDKGUtilsFilterer{contract: contract}}, nil
}

// NewETHDKGUtilsCaller creates a new read-only instance of ETHDKGUtils, bound to a specific deployed contract.
func NewETHDKGUtilsCaller(address common.Address, caller bind.ContractCaller) (*ETHDKGUtilsCaller, error) {
	contract, err := bindETHDKGUtils(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ETHDKGUtilsCaller{contract: contract}, nil
}

// NewETHDKGUtilsTransactor creates a new write-only instance of ETHDKGUtils, bound to a specific deployed contract.
func NewETHDKGUtilsTransactor(address common.Address, transactor bind.ContractTransactor) (*ETHDKGUtilsTransactor, error) {
	contract, err := bindETHDKGUtils(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ETHDKGUtilsTransactor{contract: contract}, nil
}

// NewETHDKGUtilsFilterer creates a new log filterer instance of ETHDKGUtils, bound to a specific deployed contract.
func NewETHDKGUtilsFilterer(address common.Address, filterer bind.ContractFilterer) (*ETHDKGUtilsFilterer, error) {
	contract, err := bindETHDKGUtils(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ETHDKGUtilsFilterer{contract: contract}, nil
}

// bindETHDKGUtils binds a generic wrapper to an already deployed contract.
func bindETHDKGUtils(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ETHDKGUtilsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ETHDKGUtils *ETHDKGUtilsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ETHDKGUtils.Contract.ETHDKGUtilsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ETHDKGUtils *ETHDKGUtilsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETHDKGUtils.Contract.ETHDKGUtilsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ETHDKGUtils *ETHDKGUtilsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ETHDKGUtils.Contract.ETHDKGUtilsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ETHDKGUtils *ETHDKGUtilsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ETHDKGUtils.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ETHDKGUtils *ETHDKGUtilsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETHDKGUtils.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ETHDKGUtils *ETHDKGUtilsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ETHDKGUtils.Contract.contract.Transact(opts, method, params...)
}

// EthDKGLibraryMetaData contains all meta data concerning the EthDKGLibrary contract.
var EthDKGLibraryMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"key_share_G1\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"key_share_G1_correctness_proof\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[4]\",\"name\":\"key_share_G2\",\"type\":\"uint256[4]\"}],\"name\":\"KeyShareSubmission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dkgStarts\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"registrationEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shareDistributionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"disputeEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"keyShareSubmissionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mpkSubmissionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gpkjSubmissionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gpkjDisputeEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dkgComplete\",\"type\":\"uint256\"}],\"name\":\"RegistrationOpen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"encrypted_shares\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[2][]\",\"name\":\"commitments\",\"type\":\"uint256[2][]\"}],\"name\":\"ShareDistribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share3\",\"type\":\"uint256\"}],\"name\":\"ValidatorMember\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"validatorCount\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"ethHeight\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"madHeight\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey3\",\"type\":\"uint256\"}],\"name\":\"ValidatorSet\",\"type\":\"event\"}]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ff41ab0a2a92fadcafc566144e3f9ac3f7ca1173e89283fa6ecb2d821a84a22b64736f6c634300080b0033",
}

// EthDKGLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use EthDKGLibraryMetaData.ABI instead.
var EthDKGLibraryABI = EthDKGLibraryMetaData.ABI

// EthDKGLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use EthDKGLibraryMetaData.Bin instead.
var EthDKGLibraryBin = EthDKGLibraryMetaData.Bin

// DeployEthDKGLibrary deploys a new Ethereum contract, binding an instance of EthDKGLibrary to it.
func DeployEthDKGLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *EthDKGLibrary, error) {
	parsed, err := EthDKGLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(EthDKGLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &EthDKGLibrary{EthDKGLibraryCaller: EthDKGLibraryCaller{contract: contract}, EthDKGLibraryTransactor: EthDKGLibraryTransactor{contract: contract}, EthDKGLibraryFilterer: EthDKGLibraryFilterer{contract: contract}}, nil
}

// EthDKGLibrary is an auto generated Go binding around an Ethereum contract.
type EthDKGLibrary struct {
	EthDKGLibraryCaller     // Read-only binding to the contract
	EthDKGLibraryTransactor // Write-only binding to the contract
	EthDKGLibraryFilterer   // Log filterer for contract events
}

// EthDKGLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type EthDKGLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EthDKGLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type EthDKGLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EthDKGLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type EthDKGLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EthDKGLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type EthDKGLibrarySession struct {
	Contract     *EthDKGLibrary    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// EthDKGLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type EthDKGLibraryCallerSession struct {
	Contract *EthDKGLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// EthDKGLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type EthDKGLibraryTransactorSession struct {
	Contract     *EthDKGLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// EthDKGLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type EthDKGLibraryRaw struct {
	Contract *EthDKGLibrary // Generic contract binding to access the raw methods on
}

// EthDKGLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type EthDKGLibraryCallerRaw struct {
	Contract *EthDKGLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// EthDKGLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type EthDKGLibraryTransactorRaw struct {
	Contract *EthDKGLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewEthDKGLibrary creates a new instance of EthDKGLibrary, bound to a specific deployed contract.
func NewEthDKGLibrary(address common.Address, backend bind.ContractBackend) (*EthDKGLibrary, error) {
	contract, err := bindEthDKGLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &EthDKGLibrary{EthDKGLibraryCaller: EthDKGLibraryCaller{contract: contract}, EthDKGLibraryTransactor: EthDKGLibraryTransactor{contract: contract}, EthDKGLibraryFilterer: EthDKGLibraryFilterer{contract: contract}}, nil
}

// NewEthDKGLibraryCaller creates a new read-only instance of EthDKGLibrary, bound to a specific deployed contract.
func NewEthDKGLibraryCaller(address common.Address, caller bind.ContractCaller) (*EthDKGLibraryCaller, error) {
	contract, err := bindEthDKGLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &EthDKGLibraryCaller{contract: contract}, nil
}

// NewEthDKGLibraryTransactor creates a new write-only instance of EthDKGLibrary, bound to a specific deployed contract.
func NewEthDKGLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*EthDKGLibraryTransactor, error) {
	contract, err := bindEthDKGLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &EthDKGLibraryTransactor{contract: contract}, nil
}

// NewEthDKGLibraryFilterer creates a new log filterer instance of EthDKGLibrary, bound to a specific deployed contract.
func NewEthDKGLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*EthDKGLibraryFilterer, error) {
	contract, err := bindEthDKGLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &EthDKGLibraryFilterer{contract: contract}, nil
}

// bindEthDKGLibrary binds a generic wrapper to an already deployed contract.
func bindEthDKGLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(EthDKGLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_EthDKGLibrary *EthDKGLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _EthDKGLibrary.Contract.EthDKGLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_EthDKGLibrary *EthDKGLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EthDKGLibrary.Contract.EthDKGLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_EthDKGLibrary *EthDKGLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _EthDKGLibrary.Contract.EthDKGLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_EthDKGLibrary *EthDKGLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _EthDKGLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_EthDKGLibrary *EthDKGLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EthDKGLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_EthDKGLibrary *EthDKGLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _EthDKGLibrary.Contract.contract.Transact(opts, method, params...)
}

// EthDKGLibraryKeyShareSubmissionIterator is returned from FilterKeyShareSubmission and is used to iterate over the raw logs and unpacked data for KeyShareSubmission events raised by the EthDKGLibrary contract.
type EthDKGLibraryKeyShareSubmissionIterator struct {
	Event *EthDKGLibraryKeyShareSubmission // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EthDKGLibraryKeyShareSubmissionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EthDKGLibraryKeyShareSubmission)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EthDKGLibraryKeyShareSubmission)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EthDKGLibraryKeyShareSubmissionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EthDKGLibraryKeyShareSubmissionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EthDKGLibraryKeyShareSubmission represents a KeyShareSubmission event raised by the EthDKGLibrary contract.
type EthDKGLibraryKeyShareSubmission struct {
	Issuer                     common.Address
	KeyShareG1                 [2]*big.Int
	KeyShareG1CorrectnessProof [2]*big.Int
	KeyShareG2                 [4]*big.Int
	Raw                        types.Log // Blockchain specific contextual infos
}

// FilterKeyShareSubmission is a free log retrieval operation binding the contract event 0xb0ee36c3780de716eb6c83687f433ae2558a6923e090fd238b657fb6c896badc.
//
// Solidity: event KeyShareSubmission(address issuer, uint256[2] key_share_G1, uint256[2] key_share_G1_correctness_proof, uint256[4] key_share_G2)
func (_EthDKGLibrary *EthDKGLibraryFilterer) FilterKeyShareSubmission(opts *bind.FilterOpts) (*EthDKGLibraryKeyShareSubmissionIterator, error) {

	logs, sub, err := _EthDKGLibrary.contract.FilterLogs(opts, "KeyShareSubmission")
	if err != nil {
		return nil, err
	}
	return &EthDKGLibraryKeyShareSubmissionIterator{contract: _EthDKGLibrary.contract, event: "KeyShareSubmission", logs: logs, sub: sub}, nil
}

// WatchKeyShareSubmission is a free log subscription operation binding the contract event 0xb0ee36c3780de716eb6c83687f433ae2558a6923e090fd238b657fb6c896badc.
//
// Solidity: event KeyShareSubmission(address issuer, uint256[2] key_share_G1, uint256[2] key_share_G1_correctness_proof, uint256[4] key_share_G2)
func (_EthDKGLibrary *EthDKGLibraryFilterer) WatchKeyShareSubmission(opts *bind.WatchOpts, sink chan<- *EthDKGLibraryKeyShareSubmission) (event.Subscription, error) {

	logs, sub, err := _EthDKGLibrary.contract.WatchLogs(opts, "KeyShareSubmission")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EthDKGLibraryKeyShareSubmission)
				if err := _EthDKGLibrary.contract.UnpackLog(event, "KeyShareSubmission", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKeyShareSubmission is a log parse operation binding the contract event 0xb0ee36c3780de716eb6c83687f433ae2558a6923e090fd238b657fb6c896badc.
//
// Solidity: event KeyShareSubmission(address issuer, uint256[2] key_share_G1, uint256[2] key_share_G1_correctness_proof, uint256[4] key_share_G2)
func (_EthDKGLibrary *EthDKGLibraryFilterer) ParseKeyShareSubmission(log types.Log) (*EthDKGLibraryKeyShareSubmission, error) {
	event := new(EthDKGLibraryKeyShareSubmission)
	if err := _EthDKGLibrary.contract.UnpackLog(event, "KeyShareSubmission", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// EthDKGLibraryRegistrationOpenIterator is returned from FilterRegistrationOpen and is used to iterate over the raw logs and unpacked data for RegistrationOpen events raised by the EthDKGLibrary contract.
type EthDKGLibraryRegistrationOpenIterator struct {
	Event *EthDKGLibraryRegistrationOpen // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EthDKGLibraryRegistrationOpenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EthDKGLibraryRegistrationOpen)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EthDKGLibraryRegistrationOpen)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EthDKGLibraryRegistrationOpenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EthDKGLibraryRegistrationOpenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EthDKGLibraryRegistrationOpen represents a RegistrationOpen event raised by the EthDKGLibrary contract.
type EthDKGLibraryRegistrationOpen struct {
	DkgStarts              *big.Int
	RegistrationEnds       *big.Int
	ShareDistributionEnds  *big.Int
	DisputeEnds            *big.Int
	KeyShareSubmissionEnds *big.Int
	MpkSubmissionEnds      *big.Int
	GpkjSubmissionEnds     *big.Int
	GpkjDisputeEnds        *big.Int
	DkgComplete            *big.Int
	Raw                    types.Log // Blockchain specific contextual infos
}

// FilterRegistrationOpen is a free log retrieval operation binding the contract event 0x9c6f8368fe7e77e8cb9438744581403bcb3f53298e517f04c1b8475487402e97.
//
// Solidity: event RegistrationOpen(uint256 dkgStarts, uint256 registrationEnds, uint256 shareDistributionEnds, uint256 disputeEnds, uint256 keyShareSubmissionEnds, uint256 mpkSubmissionEnds, uint256 gpkjSubmissionEnds, uint256 gpkjDisputeEnds, uint256 dkgComplete)
func (_EthDKGLibrary *EthDKGLibraryFilterer) FilterRegistrationOpen(opts *bind.FilterOpts) (*EthDKGLibraryRegistrationOpenIterator, error) {

	logs, sub, err := _EthDKGLibrary.contract.FilterLogs(opts, "RegistrationOpen")
	if err != nil {
		return nil, err
	}
	return &EthDKGLibraryRegistrationOpenIterator{contract: _EthDKGLibrary.contract, event: "RegistrationOpen", logs: logs, sub: sub}, nil
}

// WatchRegistrationOpen is a free log subscription operation binding the contract event 0x9c6f8368fe7e77e8cb9438744581403bcb3f53298e517f04c1b8475487402e97.
//
// Solidity: event RegistrationOpen(uint256 dkgStarts, uint256 registrationEnds, uint256 shareDistributionEnds, uint256 disputeEnds, uint256 keyShareSubmissionEnds, uint256 mpkSubmissionEnds, uint256 gpkjSubmissionEnds, uint256 gpkjDisputeEnds, uint256 dkgComplete)
func (_EthDKGLibrary *EthDKGLibraryFilterer) WatchRegistrationOpen(opts *bind.WatchOpts, sink chan<- *EthDKGLibraryRegistrationOpen) (event.Subscription, error) {

	logs, sub, err := _EthDKGLibrary.contract.WatchLogs(opts, "RegistrationOpen")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EthDKGLibraryRegistrationOpen)
				if err := _EthDKGLibrary.contract.UnpackLog(event, "RegistrationOpen", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegistrationOpen is a log parse operation binding the contract event 0x9c6f8368fe7e77e8cb9438744581403bcb3f53298e517f04c1b8475487402e97.
//
// Solidity: event RegistrationOpen(uint256 dkgStarts, uint256 registrationEnds, uint256 shareDistributionEnds, uint256 disputeEnds, uint256 keyShareSubmissionEnds, uint256 mpkSubmissionEnds, uint256 gpkjSubmissionEnds, uint256 gpkjDisputeEnds, uint256 dkgComplete)
func (_EthDKGLibrary *EthDKGLibraryFilterer) ParseRegistrationOpen(log types.Log) (*EthDKGLibraryRegistrationOpen, error) {
	event := new(EthDKGLibraryRegistrationOpen)
	if err := _EthDKGLibrary.contract.UnpackLog(event, "RegistrationOpen", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// EthDKGLibraryShareDistributionIterator is returned from FilterShareDistribution and is used to iterate over the raw logs and unpacked data for ShareDistribution events raised by the EthDKGLibrary contract.
type EthDKGLibraryShareDistributionIterator struct {
	Event *EthDKGLibraryShareDistribution // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EthDKGLibraryShareDistributionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EthDKGLibraryShareDistribution)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EthDKGLibraryShareDistribution)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EthDKGLibraryShareDistributionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EthDKGLibraryShareDistributionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EthDKGLibraryShareDistribution represents a ShareDistribution event raised by the EthDKGLibrary contract.
type EthDKGLibraryShareDistribution struct {
	Issuer          common.Address
	Index           *big.Int
	EncryptedShares []*big.Int
	Commitments     [][2]*big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterShareDistribution is a free log retrieval operation binding the contract event 0xa84d294194d6169652a99150fd2ef10e18b0d2caa10beeea237bbddcc6e22b10.
//
// Solidity: event ShareDistribution(address issuer, uint256 index, uint256[] encrypted_shares, uint256[2][] commitments)
func (_EthDKGLibrary *EthDKGLibraryFilterer) FilterShareDistribution(opts *bind.FilterOpts) (*EthDKGLibraryShareDistributionIterator, error) {

	logs, sub, err := _EthDKGLibrary.contract.FilterLogs(opts, "ShareDistribution")
	if err != nil {
		return nil, err
	}
	return &EthDKGLibraryShareDistributionIterator{contract: _EthDKGLibrary.contract, event: "ShareDistribution", logs: logs, sub: sub}, nil
}

// WatchShareDistribution is a free log subscription operation binding the contract event 0xa84d294194d6169652a99150fd2ef10e18b0d2caa10beeea237bbddcc6e22b10.
//
// Solidity: event ShareDistribution(address issuer, uint256 index, uint256[] encrypted_shares, uint256[2][] commitments)
func (_EthDKGLibrary *EthDKGLibraryFilterer) WatchShareDistribution(opts *bind.WatchOpts, sink chan<- *EthDKGLibraryShareDistribution) (event.Subscription, error) {

	logs, sub, err := _EthDKGLibrary.contract.WatchLogs(opts, "ShareDistribution")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EthDKGLibraryShareDistribution)
				if err := _EthDKGLibrary.contract.UnpackLog(event, "ShareDistribution", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseShareDistribution is a log parse operation binding the contract event 0xa84d294194d6169652a99150fd2ef10e18b0d2caa10beeea237bbddcc6e22b10.
//
// Solidity: event ShareDistribution(address issuer, uint256 index, uint256[] encrypted_shares, uint256[2][] commitments)
func (_EthDKGLibrary *EthDKGLibraryFilterer) ParseShareDistribution(log types.Log) (*EthDKGLibraryShareDistribution, error) {
	event := new(EthDKGLibraryShareDistribution)
	if err := _EthDKGLibrary.contract.UnpackLog(event, "ShareDistribution", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// EthDKGLibraryValidatorMemberIterator is returned from FilterValidatorMember and is used to iterate over the raw logs and unpacked data for ValidatorMember events raised by the EthDKGLibrary contract.
type EthDKGLibraryValidatorMemberIterator struct {
	Event *EthDKGLibraryValidatorMember // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EthDKGLibraryValidatorMemberIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EthDKGLibraryValidatorMember)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EthDKGLibraryValidatorMember)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EthDKGLibraryValidatorMemberIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EthDKGLibraryValidatorMemberIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EthDKGLibraryValidatorMember represents a ValidatorMember event raised by the EthDKGLibrary contract.
type EthDKGLibraryValidatorMember struct {
	Account common.Address
	Epoch   *big.Int
	Index   *big.Int
	Share0  *big.Int
	Share1  *big.Int
	Share2  *big.Int
	Share3  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterValidatorMember is a free log retrieval operation binding the contract event 0x113b129fac2dde341b9fbbec2bb79a95b9945b0e80fda711fc8ae5c7b0ea83b0.
//
// Solidity: event ValidatorMember(address account, uint256 epoch, uint256 index, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_EthDKGLibrary *EthDKGLibraryFilterer) FilterValidatorMember(opts *bind.FilterOpts) (*EthDKGLibraryValidatorMemberIterator, error) {

	logs, sub, err := _EthDKGLibrary.contract.FilterLogs(opts, "ValidatorMember")
	if err != nil {
		return nil, err
	}
	return &EthDKGLibraryValidatorMemberIterator{contract: _EthDKGLibrary.contract, event: "ValidatorMember", logs: logs, sub: sub}, nil
}

// WatchValidatorMember is a free log subscription operation binding the contract event 0x113b129fac2dde341b9fbbec2bb79a95b9945b0e80fda711fc8ae5c7b0ea83b0.
//
// Solidity: event ValidatorMember(address account, uint256 epoch, uint256 index, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_EthDKGLibrary *EthDKGLibraryFilterer) WatchValidatorMember(opts *bind.WatchOpts, sink chan<- *EthDKGLibraryValidatorMember) (event.Subscription, error) {

	logs, sub, err := _EthDKGLibrary.contract.WatchLogs(opts, "ValidatorMember")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EthDKGLibraryValidatorMember)
				if err := _EthDKGLibrary.contract.UnpackLog(event, "ValidatorMember", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorMember is a log parse operation binding the contract event 0x113b129fac2dde341b9fbbec2bb79a95b9945b0e80fda711fc8ae5c7b0ea83b0.
//
// Solidity: event ValidatorMember(address account, uint256 epoch, uint256 index, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_EthDKGLibrary *EthDKGLibraryFilterer) ParseValidatorMember(log types.Log) (*EthDKGLibraryValidatorMember, error) {
	event := new(EthDKGLibraryValidatorMember)
	if err := _EthDKGLibrary.contract.UnpackLog(event, "ValidatorMember", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// EthDKGLibraryValidatorSetIterator is returned from FilterValidatorSet and is used to iterate over the raw logs and unpacked data for ValidatorSet events raised by the EthDKGLibrary contract.
type EthDKGLibraryValidatorSetIterator struct {
	Event *EthDKGLibraryValidatorSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EthDKGLibraryValidatorSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EthDKGLibraryValidatorSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EthDKGLibraryValidatorSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EthDKGLibraryValidatorSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EthDKGLibraryValidatorSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EthDKGLibraryValidatorSet represents a ValidatorSet event raised by the EthDKGLibrary contract.
type EthDKGLibraryValidatorSet struct {
	ValidatorCount uint8
	Epoch          *big.Int
	EthHeight      uint32
	MadHeight      uint32
	GroupKey0      *big.Int
	GroupKey1      *big.Int
	GroupKey2      *big.Int
	GroupKey3      *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterValidatorSet is a free log retrieval operation binding the contract event 0x1c85ff1efe0a905f8feca811e617102cb7ec896aded693eb96366c8ef22bb09f.
//
// Solidity: event ValidatorSet(uint8 validatorCount, uint256 epoch, uint32 ethHeight, uint32 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_EthDKGLibrary *EthDKGLibraryFilterer) FilterValidatorSet(opts *bind.FilterOpts) (*EthDKGLibraryValidatorSetIterator, error) {

	logs, sub, err := _EthDKGLibrary.contract.FilterLogs(opts, "ValidatorSet")
	if err != nil {
		return nil, err
	}
	return &EthDKGLibraryValidatorSetIterator{contract: _EthDKGLibrary.contract, event: "ValidatorSet", logs: logs, sub: sub}, nil
}

// WatchValidatorSet is a free log subscription operation binding the contract event 0x1c85ff1efe0a905f8feca811e617102cb7ec896aded693eb96366c8ef22bb09f.
//
// Solidity: event ValidatorSet(uint8 validatorCount, uint256 epoch, uint32 ethHeight, uint32 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_EthDKGLibrary *EthDKGLibraryFilterer) WatchValidatorSet(opts *bind.WatchOpts, sink chan<- *EthDKGLibraryValidatorSet) (event.Subscription, error) {

	logs, sub, err := _EthDKGLibrary.contract.WatchLogs(opts, "ValidatorSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EthDKGLibraryValidatorSet)
				if err := _EthDKGLibrary.contract.UnpackLog(event, "ValidatorSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorSet is a log parse operation binding the contract event 0x1c85ff1efe0a905f8feca811e617102cb7ec896aded693eb96366c8ef22bb09f.
//
// Solidity: event ValidatorSet(uint8 validatorCount, uint256 epoch, uint32 ethHeight, uint32 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_EthDKGLibrary *EthDKGLibraryFilterer) ParseValidatorSet(log types.Log) (*EthDKGLibraryValidatorSet, error) {
	event := new(EthDKGLibraryValidatorSet)
	if err := _EthDKGLibrary.contract.UnpackLog(event, "ValidatorSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GovernorMetaData contains all meta data concerning the Governor contract.
var GovernorMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"ValueUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"name\":\"updateValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// GovernorABI is the input ABI used to generate the binding from.
// Deprecated: Use GovernorMetaData.ABI instead.
var GovernorABI = GovernorMetaData.ABI

// Governor is an auto generated Go binding around an Ethereum contract.
type Governor struct {
	GovernorCaller     // Read-only binding to the contract
	GovernorTransactor // Write-only binding to the contract
	GovernorFilterer   // Log filterer for contract events
}

// GovernorCaller is an auto generated read-only Go binding around an Ethereum contract.
type GovernorCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovernorTransactor is an auto generated write-only Go binding around an Ethereum contract.
type GovernorTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovernorFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type GovernorFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovernorSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type GovernorSession struct {
	Contract     *Governor         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// GovernorCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type GovernorCallerSession struct {
	Contract *GovernorCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// GovernorTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type GovernorTransactorSession struct {
	Contract     *GovernorTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// GovernorRaw is an auto generated low-level Go binding around an Ethereum contract.
type GovernorRaw struct {
	Contract *Governor // Generic contract binding to access the raw methods on
}

// GovernorCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type GovernorCallerRaw struct {
	Contract *GovernorCaller // Generic read-only contract binding to access the raw methods on
}

// GovernorTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type GovernorTransactorRaw struct {
	Contract *GovernorTransactor // Generic write-only contract binding to access the raw methods on
}

// NewGovernor creates a new instance of Governor, bound to a specific deployed contract.
func NewGovernor(address common.Address, backend bind.ContractBackend) (*Governor, error) {
	contract, err := bindGovernor(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Governor{GovernorCaller: GovernorCaller{contract: contract}, GovernorTransactor: GovernorTransactor{contract: contract}, GovernorFilterer: GovernorFilterer{contract: contract}}, nil
}

// NewGovernorCaller creates a new read-only instance of Governor, bound to a specific deployed contract.
func NewGovernorCaller(address common.Address, caller bind.ContractCaller) (*GovernorCaller, error) {
	contract, err := bindGovernor(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &GovernorCaller{contract: contract}, nil
}

// NewGovernorTransactor creates a new write-only instance of Governor, bound to a specific deployed contract.
func NewGovernorTransactor(address common.Address, transactor bind.ContractTransactor) (*GovernorTransactor, error) {
	contract, err := bindGovernor(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &GovernorTransactor{contract: contract}, nil
}

// NewGovernorFilterer creates a new log filterer instance of Governor, bound to a specific deployed contract.
func NewGovernorFilterer(address common.Address, filterer bind.ContractFilterer) (*GovernorFilterer, error) {
	contract, err := bindGovernor(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &GovernorFilterer{contract: contract}, nil
}

// bindGovernor binds a generic wrapper to an already deployed contract.
func bindGovernor(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(GovernorABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Governor *GovernorRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Governor.Contract.GovernorCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Governor *GovernorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Governor.Contract.GovernorTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Governor *GovernorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Governor.Contract.GovernorTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Governor *GovernorCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Governor.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Governor *GovernorTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Governor.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Governor *GovernorTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Governor.Contract.contract.Transact(opts, method, params...)
}

// UpdateValue is a paid mutator transaction binding the contract method 0x46512486.
//
// Solidity: function updateValue(uint256 epoch, uint256 key, bytes32 value) returns()
func (_Governor *GovernorTransactor) UpdateValue(opts *bind.TransactOpts, epoch *big.Int, key *big.Int, value [32]byte) (*types.Transaction, error) {
	return _Governor.contract.Transact(opts, "updateValue", epoch, key, value)
}

// UpdateValue is a paid mutator transaction binding the contract method 0x46512486.
//
// Solidity: function updateValue(uint256 epoch, uint256 key, bytes32 value) returns()
func (_Governor *GovernorSession) UpdateValue(epoch *big.Int, key *big.Int, value [32]byte) (*types.Transaction, error) {
	return _Governor.Contract.UpdateValue(&_Governor.TransactOpts, epoch, key, value)
}

// UpdateValue is a paid mutator transaction binding the contract method 0x46512486.
//
// Solidity: function updateValue(uint256 epoch, uint256 key, bytes32 value) returns()
func (_Governor *GovernorTransactorSession) UpdateValue(epoch *big.Int, key *big.Int, value [32]byte) (*types.Transaction, error) {
	return _Governor.Contract.UpdateValue(&_Governor.TransactOpts, epoch, key, value)
}

// GovernorValueUpdatedIterator is returned from FilterValueUpdated and is used to iterate over the raw logs and unpacked data for ValueUpdated events raised by the Governor contract.
type GovernorValueUpdatedIterator struct {
	Event *GovernorValueUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GovernorValueUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GovernorValueUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GovernorValueUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GovernorValueUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GovernorValueUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GovernorValueUpdated represents a ValueUpdated event raised by the Governor contract.
type GovernorValueUpdated struct {
	Epoch *big.Int
	Key   *big.Int
	Value [32]byte
	Who   common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterValueUpdated is a free log retrieval operation binding the contract event 0x36dcd0e03525dedd9d5c21a263ef5f35d030298b5c48f1a713006aefc064ad05.
//
// Solidity: event ValueUpdated(uint256 indexed epoch, uint256 indexed key, bytes32 indexed value, address who)
func (_Governor *GovernorFilterer) FilterValueUpdated(opts *bind.FilterOpts, epoch []*big.Int, key []*big.Int, value [][32]byte) (*GovernorValueUpdatedIterator, error) {

	var epochRule []interface{}
	for _, epochItem := range epoch {
		epochRule = append(epochRule, epochItem)
	}
	var keyRule []interface{}
	for _, keyItem := range key {
		keyRule = append(keyRule, keyItem)
	}
	var valueRule []interface{}
	for _, valueItem := range value {
		valueRule = append(valueRule, valueItem)
	}

	logs, sub, err := _Governor.contract.FilterLogs(opts, "ValueUpdated", epochRule, keyRule, valueRule)
	if err != nil {
		return nil, err
	}
	return &GovernorValueUpdatedIterator{contract: _Governor.contract, event: "ValueUpdated", logs: logs, sub: sub}, nil
}

// WatchValueUpdated is a free log subscription operation binding the contract event 0x36dcd0e03525dedd9d5c21a263ef5f35d030298b5c48f1a713006aefc064ad05.
//
// Solidity: event ValueUpdated(uint256 indexed epoch, uint256 indexed key, bytes32 indexed value, address who)
func (_Governor *GovernorFilterer) WatchValueUpdated(opts *bind.WatchOpts, sink chan<- *GovernorValueUpdated, epoch []*big.Int, key []*big.Int, value [][32]byte) (event.Subscription, error) {

	var epochRule []interface{}
	for _, epochItem := range epoch {
		epochRule = append(epochRule, epochItem)
	}
	var keyRule []interface{}
	for _, keyItem := range key {
		keyRule = append(keyRule, keyItem)
	}
	var valueRule []interface{}
	for _, valueItem := range value {
		valueRule = append(valueRule, valueItem)
	}

	logs, sub, err := _Governor.contract.WatchLogs(opts, "ValueUpdated", epochRule, keyRule, valueRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GovernorValueUpdated)
				if err := _Governor.contract.UnpackLog(event, "ValueUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValueUpdated is a log parse operation binding the contract event 0x36dcd0e03525dedd9d5c21a263ef5f35d030298b5c48f1a713006aefc064ad05.
//
// Solidity: event ValueUpdated(uint256 indexed epoch, uint256 indexed key, bytes32 indexed value, address who)
func (_Governor *GovernorFilterer) ParseValueUpdated(log types.Log) (*GovernorValueUpdated, error) {
	event := new(GovernorValueUpdated)
	if err := _Governor.contract.UnpackLog(event, "ValueUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GovernorEventsMetaData contains all meta data concerning the GovernorEvents contract.
var GovernorEventsMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"ValueUpdated\",\"type\":\"event\"}]",
}

// GovernorEventsABI is the input ABI used to generate the binding from.
// Deprecated: Use GovernorEventsMetaData.ABI instead.
var GovernorEventsABI = GovernorEventsMetaData.ABI

// GovernorEvents is an auto generated Go binding around an Ethereum contract.
type GovernorEvents struct {
	GovernorEventsCaller     // Read-only binding to the contract
	GovernorEventsTransactor // Write-only binding to the contract
	GovernorEventsFilterer   // Log filterer for contract events
}

// GovernorEventsCaller is an auto generated read-only Go binding around an Ethereum contract.
type GovernorEventsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovernorEventsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type GovernorEventsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovernorEventsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type GovernorEventsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovernorEventsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type GovernorEventsSession struct {
	Contract     *GovernorEvents   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// GovernorEventsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type GovernorEventsCallerSession struct {
	Contract *GovernorEventsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// GovernorEventsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type GovernorEventsTransactorSession struct {
	Contract     *GovernorEventsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// GovernorEventsRaw is an auto generated low-level Go binding around an Ethereum contract.
type GovernorEventsRaw struct {
	Contract *GovernorEvents // Generic contract binding to access the raw methods on
}

// GovernorEventsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type GovernorEventsCallerRaw struct {
	Contract *GovernorEventsCaller // Generic read-only contract binding to access the raw methods on
}

// GovernorEventsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type GovernorEventsTransactorRaw struct {
	Contract *GovernorEventsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewGovernorEvents creates a new instance of GovernorEvents, bound to a specific deployed contract.
func NewGovernorEvents(address common.Address, backend bind.ContractBackend) (*GovernorEvents, error) {
	contract, err := bindGovernorEvents(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &GovernorEvents{GovernorEventsCaller: GovernorEventsCaller{contract: contract}, GovernorEventsTransactor: GovernorEventsTransactor{contract: contract}, GovernorEventsFilterer: GovernorEventsFilterer{contract: contract}}, nil
}

// NewGovernorEventsCaller creates a new read-only instance of GovernorEvents, bound to a specific deployed contract.
func NewGovernorEventsCaller(address common.Address, caller bind.ContractCaller) (*GovernorEventsCaller, error) {
	contract, err := bindGovernorEvents(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &GovernorEventsCaller{contract: contract}, nil
}

// NewGovernorEventsTransactor creates a new write-only instance of GovernorEvents, bound to a specific deployed contract.
func NewGovernorEventsTransactor(address common.Address, transactor bind.ContractTransactor) (*GovernorEventsTransactor, error) {
	contract, err := bindGovernorEvents(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &GovernorEventsTransactor{contract: contract}, nil
}

// NewGovernorEventsFilterer creates a new log filterer instance of GovernorEvents, bound to a specific deployed contract.
func NewGovernorEventsFilterer(address common.Address, filterer bind.ContractFilterer) (*GovernorEventsFilterer, error) {
	contract, err := bindGovernorEvents(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &GovernorEventsFilterer{contract: contract}, nil
}

// bindGovernorEvents binds a generic wrapper to an already deployed contract.
func bindGovernorEvents(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(GovernorEventsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_GovernorEvents *GovernorEventsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _GovernorEvents.Contract.GovernorEventsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_GovernorEvents *GovernorEventsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GovernorEvents.Contract.GovernorEventsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_GovernorEvents *GovernorEventsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _GovernorEvents.Contract.GovernorEventsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_GovernorEvents *GovernorEventsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _GovernorEvents.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_GovernorEvents *GovernorEventsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GovernorEvents.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_GovernorEvents *GovernorEventsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _GovernorEvents.Contract.contract.Transact(opts, method, params...)
}

// GovernorEventsValueUpdatedIterator is returned from FilterValueUpdated and is used to iterate over the raw logs and unpacked data for ValueUpdated events raised by the GovernorEvents contract.
type GovernorEventsValueUpdatedIterator struct {
	Event *GovernorEventsValueUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GovernorEventsValueUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GovernorEventsValueUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GovernorEventsValueUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GovernorEventsValueUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GovernorEventsValueUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GovernorEventsValueUpdated represents a ValueUpdated event raised by the GovernorEvents contract.
type GovernorEventsValueUpdated struct {
	Epoch *big.Int
	Key   *big.Int
	Value [32]byte
	Who   common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterValueUpdated is a free log retrieval operation binding the contract event 0x36dcd0e03525dedd9d5c21a263ef5f35d030298b5c48f1a713006aefc064ad05.
//
// Solidity: event ValueUpdated(uint256 indexed epoch, uint256 indexed key, bytes32 indexed value, address who)
func (_GovernorEvents *GovernorEventsFilterer) FilterValueUpdated(opts *bind.FilterOpts, epoch []*big.Int, key []*big.Int, value [][32]byte) (*GovernorEventsValueUpdatedIterator, error) {

	var epochRule []interface{}
	for _, epochItem := range epoch {
		epochRule = append(epochRule, epochItem)
	}
	var keyRule []interface{}
	for _, keyItem := range key {
		keyRule = append(keyRule, keyItem)
	}
	var valueRule []interface{}
	for _, valueItem := range value {
		valueRule = append(valueRule, valueItem)
	}

	logs, sub, err := _GovernorEvents.contract.FilterLogs(opts, "ValueUpdated", epochRule, keyRule, valueRule)
	if err != nil {
		return nil, err
	}
	return &GovernorEventsValueUpdatedIterator{contract: _GovernorEvents.contract, event: "ValueUpdated", logs: logs, sub: sub}, nil
}

// WatchValueUpdated is a free log subscription operation binding the contract event 0x36dcd0e03525dedd9d5c21a263ef5f35d030298b5c48f1a713006aefc064ad05.
//
// Solidity: event ValueUpdated(uint256 indexed epoch, uint256 indexed key, bytes32 indexed value, address who)
func (_GovernorEvents *GovernorEventsFilterer) WatchValueUpdated(opts *bind.WatchOpts, sink chan<- *GovernorEventsValueUpdated, epoch []*big.Int, key []*big.Int, value [][32]byte) (event.Subscription, error) {

	var epochRule []interface{}
	for _, epochItem := range epoch {
		epochRule = append(epochRule, epochItem)
	}
	var keyRule []interface{}
	for _, keyItem := range key {
		keyRule = append(keyRule, keyItem)
	}
	var valueRule []interface{}
	for _, valueItem := range value {
		valueRule = append(valueRule, valueItem)
	}

	logs, sub, err := _GovernorEvents.contract.WatchLogs(opts, "ValueUpdated", epochRule, keyRule, valueRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GovernorEventsValueUpdated)
				if err := _GovernorEvents.contract.UnpackLog(event, "ValueUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValueUpdated is a log parse operation binding the contract event 0x36dcd0e03525dedd9d5c21a263ef5f35d030298b5c48f1a713006aefc064ad05.
//
// Solidity: event ValueUpdated(uint256 indexed epoch, uint256 indexed key, bytes32 indexed value, address who)
func (_GovernorEvents *GovernorEventsFilterer) ParseValueUpdated(log types.Log) (*GovernorEventsValueUpdated, error) {
	event := new(GovernorEventsValueUpdated)
	if err := _GovernorEvents.contract.UnpackLog(event, "ValueUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IETHDKGMetaData contains all meta data concerning the IETHDKG contract.
var IETHDKGMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"dishonestAddresses\",\"type\":\"address[]\"}],\"name\":\"accuseParticipantDidNotDistributeShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"dishonestAddresses\",\"type\":\"address[]\"}],\"name\":\"accuseParticipantDidNotSubmitGPKJ\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"dishonestAddresses\",\"type\":\"address[]\"}],\"name\":\"accuseParticipantDidNotSubmitKeyShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dishonestAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"encryptedShares\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[2][]\",\"name\":\"commitments\",\"type\":\"uint256[2][]\"},{\"internalType\":\"uint256[2]\",\"name\":\"sharedKey\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"sharedKeyCorrectnessProof\",\"type\":\"uint256[2]\"}],\"name\":\"accuseParticipantDistributedBadShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"dishonestAddresses\",\"type\":\"address[]\"}],\"name\":\"accuseParticipantNotRegistered\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"encryptedSharesHash\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[2][][]\",\"name\":\"commitments\",\"type\":\"uint256[2][][]\"},{\"internalType\":\"address\",\"name\":\"dishonestAddress\",\"type\":\"address\"}],\"name\":\"accuseParticipantSubmittedBadGPKJ\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"complete\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"encryptedShares\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[2][]\",\"name\":\"commitments\",\"type\":\"uint256[2][]\"}],\"name\":\"distributeShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBadParticipants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConfirmationLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getETHDKGPhase\",\"outputs\":[{\"internalType\":\"enumPhase\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMasterPublicKey\",\"outputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"\",\"type\":\"uint256[4]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinValidators\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumParticipants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"getParticipantInternalState\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"publicKey\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"enumPhase\",\"name\":\"phase\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"distributedSharesHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[2]\",\"name\":\"commitmentsFirstCoefficient\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"keyShares\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[4]\",\"name\":\"gpkj\",\"type\":\"uint256[4]\"}],\"internalType\":\"structParticipant\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPhaseLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPhaseStartBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeETHDKG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isETHDKGRunning\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMasterPublicKeySet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"publicKey\",\"type\":\"uint256[2]\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"confirmationLength_\",\"type\":\"uint16\"}],\"name\":\"setConfirmationLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"minValidators_\",\"type\":\"uint16\"}],\"name\":\"setMinNumberOfValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"phaseLength_\",\"type\":\"uint16\"}],\"name\":\"setPhaseLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validatorPool\",\"type\":\"address\"}],\"name\":\"setValidatorPoolAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"gpkj\",\"type\":\"uint256[4]\"}],\"name\":\"submitGPKJ\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"keyShareG1\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"keyShareG1CorrectnessProof\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[4]\",\"name\":\"keyShareG2\",\"type\":\"uint256[4]\"}],\"name\":\"submitKeyShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"masterPublicKey_\",\"type\":\"uint256[4]\"}],\"name\":\"submitMasterPublicKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"tryGetParticipantIndex\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// IETHDKGABI is the input ABI used to generate the binding from.
// Deprecated: Use IETHDKGMetaData.ABI instead.
var IETHDKGABI = IETHDKGMetaData.ABI

// IETHDKG is an auto generated Go binding around an Ethereum contract.
type IETHDKG struct {
	IETHDKGCaller     // Read-only binding to the contract
	IETHDKGTransactor // Write-only binding to the contract
	IETHDKGFilterer   // Log filterer for contract events
}

// IETHDKGCaller is an auto generated read-only Go binding around an Ethereum contract.
type IETHDKGCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IETHDKGTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IETHDKGTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IETHDKGFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IETHDKGFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IETHDKGSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IETHDKGSession struct {
	Contract     *IETHDKG          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IETHDKGCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IETHDKGCallerSession struct {
	Contract *IETHDKGCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// IETHDKGTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IETHDKGTransactorSession struct {
	Contract     *IETHDKGTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// IETHDKGRaw is an auto generated low-level Go binding around an Ethereum contract.
type IETHDKGRaw struct {
	Contract *IETHDKG // Generic contract binding to access the raw methods on
}

// IETHDKGCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IETHDKGCallerRaw struct {
	Contract *IETHDKGCaller // Generic read-only contract binding to access the raw methods on
}

// IETHDKGTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IETHDKGTransactorRaw struct {
	Contract *IETHDKGTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIETHDKG creates a new instance of IETHDKG, bound to a specific deployed contract.
func NewIETHDKG(address common.Address, backend bind.ContractBackend) (*IETHDKG, error) {
	contract, err := bindIETHDKG(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IETHDKG{IETHDKGCaller: IETHDKGCaller{contract: contract}, IETHDKGTransactor: IETHDKGTransactor{contract: contract}, IETHDKGFilterer: IETHDKGFilterer{contract: contract}}, nil
}

// NewIETHDKGCaller creates a new read-only instance of IETHDKG, bound to a specific deployed contract.
func NewIETHDKGCaller(address common.Address, caller bind.ContractCaller) (*IETHDKGCaller, error) {
	contract, err := bindIETHDKG(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IETHDKGCaller{contract: contract}, nil
}

// NewIETHDKGTransactor creates a new write-only instance of IETHDKG, bound to a specific deployed contract.
func NewIETHDKGTransactor(address common.Address, transactor bind.ContractTransactor) (*IETHDKGTransactor, error) {
	contract, err := bindIETHDKG(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IETHDKGTransactor{contract: contract}, nil
}

// NewIETHDKGFilterer creates a new log filterer instance of IETHDKG, bound to a specific deployed contract.
func NewIETHDKGFilterer(address common.Address, filterer bind.ContractFilterer) (*IETHDKGFilterer, error) {
	contract, err := bindIETHDKG(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IETHDKGFilterer{contract: contract}, nil
}

// bindIETHDKG binds a generic wrapper to an already deployed contract.
func bindIETHDKG(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IETHDKGABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IETHDKG *IETHDKGRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IETHDKG.Contract.IETHDKGCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IETHDKG *IETHDKGRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IETHDKG.Contract.IETHDKGTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IETHDKG *IETHDKGRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IETHDKG.Contract.IETHDKGTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IETHDKG *IETHDKGCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IETHDKG.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IETHDKG *IETHDKGTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IETHDKG.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IETHDKG *IETHDKGTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IETHDKG.Contract.contract.Transact(opts, method, params...)
}

// GetBadParticipants is a free data retrieval call binding the contract method 0x32d4d570.
//
// Solidity: function getBadParticipants() view returns(uint256)
func (_IETHDKG *IETHDKGCaller) GetBadParticipants(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IETHDKG.contract.Call(opts, &out, "getBadParticipants")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetBadParticipants is a free data retrieval call binding the contract method 0x32d4d570.
//
// Solidity: function getBadParticipants() view returns(uint256)
func (_IETHDKG *IETHDKGSession) GetBadParticipants() (*big.Int, error) {
	return _IETHDKG.Contract.GetBadParticipants(&_IETHDKG.CallOpts)
}

// GetBadParticipants is a free data retrieval call binding the contract method 0x32d4d570.
//
// Solidity: function getBadParticipants() view returns(uint256)
func (_IETHDKG *IETHDKGCallerSession) GetBadParticipants() (*big.Int, error) {
	return _IETHDKG.Contract.GetBadParticipants(&_IETHDKG.CallOpts)
}

// GetConfirmationLength is a free data retrieval call binding the contract method 0x8c848d32.
//
// Solidity: function getConfirmationLength() view returns(uint256)
func (_IETHDKG *IETHDKGCaller) GetConfirmationLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IETHDKG.contract.Call(opts, &out, "getConfirmationLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetConfirmationLength is a free data retrieval call binding the contract method 0x8c848d32.
//
// Solidity: function getConfirmationLength() view returns(uint256)
func (_IETHDKG *IETHDKGSession) GetConfirmationLength() (*big.Int, error) {
	return _IETHDKG.Contract.GetConfirmationLength(&_IETHDKG.CallOpts)
}

// GetConfirmationLength is a free data retrieval call binding the contract method 0x8c848d32.
//
// Solidity: function getConfirmationLength() view returns(uint256)
func (_IETHDKG *IETHDKGCallerSession) GetConfirmationLength() (*big.Int, error) {
	return _IETHDKG.Contract.GetConfirmationLength(&_IETHDKG.CallOpts)
}

// GetETHDKGPhase is a free data retrieval call binding the contract method 0x2958e81c.
//
// Solidity: function getETHDKGPhase() view returns(uint8)
func (_IETHDKG *IETHDKGCaller) GetETHDKGPhase(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _IETHDKG.contract.Call(opts, &out, "getETHDKGPhase")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetETHDKGPhase is a free data retrieval call binding the contract method 0x2958e81c.
//
// Solidity: function getETHDKGPhase() view returns(uint8)
func (_IETHDKG *IETHDKGSession) GetETHDKGPhase() (uint8, error) {
	return _IETHDKG.Contract.GetETHDKGPhase(&_IETHDKG.CallOpts)
}

// GetETHDKGPhase is a free data retrieval call binding the contract method 0x2958e81c.
//
// Solidity: function getETHDKGPhase() view returns(uint8)
func (_IETHDKG *IETHDKGCallerSession) GetETHDKGPhase() (uint8, error) {
	return _IETHDKG.Contract.GetETHDKGPhase(&_IETHDKG.CallOpts)
}

// GetMasterPublicKey is a free data retrieval call binding the contract method 0xe146372a.
//
// Solidity: function getMasterPublicKey() view returns(uint256[4])
func (_IETHDKG *IETHDKGCaller) GetMasterPublicKey(opts *bind.CallOpts) ([4]*big.Int, error) {
	var out []interface{}
	err := _IETHDKG.contract.Call(opts, &out, "getMasterPublicKey")

	if err != nil {
		return *new([4]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([4]*big.Int)).(*[4]*big.Int)

	return out0, err

}

// GetMasterPublicKey is a free data retrieval call binding the contract method 0xe146372a.
//
// Solidity: function getMasterPublicKey() view returns(uint256[4])
func (_IETHDKG *IETHDKGSession) GetMasterPublicKey() ([4]*big.Int, error) {
	return _IETHDKG.Contract.GetMasterPublicKey(&_IETHDKG.CallOpts)
}

// GetMasterPublicKey is a free data retrieval call binding the contract method 0xe146372a.
//
// Solidity: function getMasterPublicKey() view returns(uint256[4])
func (_IETHDKG *IETHDKGCallerSession) GetMasterPublicKey() ([4]*big.Int, error) {
	return _IETHDKG.Contract.GetMasterPublicKey(&_IETHDKG.CallOpts)
}

// GetMinValidators is a free data retrieval call binding the contract method 0xecbadb36.
//
// Solidity: function getMinValidators() view returns(uint256)
func (_IETHDKG *IETHDKGCaller) GetMinValidators(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IETHDKG.contract.Call(opts, &out, "getMinValidators")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMinValidators is a free data retrieval call binding the contract method 0xecbadb36.
//
// Solidity: function getMinValidators() view returns(uint256)
func (_IETHDKG *IETHDKGSession) GetMinValidators() (*big.Int, error) {
	return _IETHDKG.Contract.GetMinValidators(&_IETHDKG.CallOpts)
}

// GetMinValidators is a free data retrieval call binding the contract method 0xecbadb36.
//
// Solidity: function getMinValidators() view returns(uint256)
func (_IETHDKG *IETHDKGCallerSession) GetMinValidators() (*big.Int, error) {
	return _IETHDKG.Contract.GetMinValidators(&_IETHDKG.CallOpts)
}

// GetNonce is a free data retrieval call binding the contract method 0xd087d288.
//
// Solidity: function getNonce() view returns(uint256)
func (_IETHDKG *IETHDKGCaller) GetNonce(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IETHDKG.contract.Call(opts, &out, "getNonce")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetNonce is a free data retrieval call binding the contract method 0xd087d288.
//
// Solidity: function getNonce() view returns(uint256)
func (_IETHDKG *IETHDKGSession) GetNonce() (*big.Int, error) {
	return _IETHDKG.Contract.GetNonce(&_IETHDKG.CallOpts)
}

// GetNonce is a free data retrieval call binding the contract method 0xd087d288.
//
// Solidity: function getNonce() view returns(uint256)
func (_IETHDKG *IETHDKGCallerSession) GetNonce() (*big.Int, error) {
	return _IETHDKG.Contract.GetNonce(&_IETHDKG.CallOpts)
}

// GetNumParticipants is a free data retrieval call binding the contract method 0xfd478ca9.
//
// Solidity: function getNumParticipants() view returns(uint256)
func (_IETHDKG *IETHDKGCaller) GetNumParticipants(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IETHDKG.contract.Call(opts, &out, "getNumParticipants")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetNumParticipants is a free data retrieval call binding the contract method 0xfd478ca9.
//
// Solidity: function getNumParticipants() view returns(uint256)
func (_IETHDKG *IETHDKGSession) GetNumParticipants() (*big.Int, error) {
	return _IETHDKG.Contract.GetNumParticipants(&_IETHDKG.CallOpts)
}

// GetNumParticipants is a free data retrieval call binding the contract method 0xfd478ca9.
//
// Solidity: function getNumParticipants() view returns(uint256)
func (_IETHDKG *IETHDKGCallerSession) GetNumParticipants() (*big.Int, error) {
	return _IETHDKG.Contract.GetNumParticipants(&_IETHDKG.CallOpts)
}

// GetParticipantInternalState is a free data retrieval call binding the contract method 0xbf7786b6.
//
// Solidity: function getParticipantInternalState(address participant) view returns((uint256[2],uint64,uint64,uint8,bytes32,uint256[2],uint256[2],uint256[4]))
func (_IETHDKG *IETHDKGCaller) GetParticipantInternalState(opts *bind.CallOpts, participant common.Address) (Participant, error) {
	var out []interface{}
	err := _IETHDKG.contract.Call(opts, &out, "getParticipantInternalState", participant)

	if err != nil {
		return *new(Participant), err
	}

	out0 := *abi.ConvertType(out[0], new(Participant)).(*Participant)

	return out0, err

}

// GetParticipantInternalState is a free data retrieval call binding the contract method 0xbf7786b6.
//
// Solidity: function getParticipantInternalState(address participant) view returns((uint256[2],uint64,uint64,uint8,bytes32,uint256[2],uint256[2],uint256[4]))
func (_IETHDKG *IETHDKGSession) GetParticipantInternalState(participant common.Address) (Participant, error) {
	return _IETHDKG.Contract.GetParticipantInternalState(&_IETHDKG.CallOpts, participant)
}

// GetParticipantInternalState is a free data retrieval call binding the contract method 0xbf7786b6.
//
// Solidity: function getParticipantInternalState(address participant) view returns((uint256[2],uint64,uint64,uint8,bytes32,uint256[2],uint256[2],uint256[4]))
func (_IETHDKG *IETHDKGCallerSession) GetParticipantInternalState(participant common.Address) (Participant, error) {
	return _IETHDKG.Contract.GetParticipantInternalState(&_IETHDKG.CallOpts, participant)
}

// GetPhaseLength is a free data retrieval call binding the contract method 0x106da57d.
//
// Solidity: function getPhaseLength() view returns(uint256)
func (_IETHDKG *IETHDKGCaller) GetPhaseLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IETHDKG.contract.Call(opts, &out, "getPhaseLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPhaseLength is a free data retrieval call binding the contract method 0x106da57d.
//
// Solidity: function getPhaseLength() view returns(uint256)
func (_IETHDKG *IETHDKGSession) GetPhaseLength() (*big.Int, error) {
	return _IETHDKG.Contract.GetPhaseLength(&_IETHDKG.CallOpts)
}

// GetPhaseLength is a free data retrieval call binding the contract method 0x106da57d.
//
// Solidity: function getPhaseLength() view returns(uint256)
func (_IETHDKG *IETHDKGCallerSession) GetPhaseLength() (*big.Int, error) {
	return _IETHDKG.Contract.GetPhaseLength(&_IETHDKG.CallOpts)
}

// GetPhaseStartBlock is a free data retrieval call binding the contract method 0xa2bc9c78.
//
// Solidity: function getPhaseStartBlock() view returns(uint256)
func (_IETHDKG *IETHDKGCaller) GetPhaseStartBlock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IETHDKG.contract.Call(opts, &out, "getPhaseStartBlock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPhaseStartBlock is a free data retrieval call binding the contract method 0xa2bc9c78.
//
// Solidity: function getPhaseStartBlock() view returns(uint256)
func (_IETHDKG *IETHDKGSession) GetPhaseStartBlock() (*big.Int, error) {
	return _IETHDKG.Contract.GetPhaseStartBlock(&_IETHDKG.CallOpts)
}

// GetPhaseStartBlock is a free data retrieval call binding the contract method 0xa2bc9c78.
//
// Solidity: function getPhaseStartBlock() view returns(uint256)
func (_IETHDKG *IETHDKGCallerSession) GetPhaseStartBlock() (*big.Int, error) {
	return _IETHDKG.Contract.GetPhaseStartBlock(&_IETHDKG.CallOpts)
}

// IsETHDKGRunning is a free data retrieval call binding the contract method 0x747b217c.
//
// Solidity: function isETHDKGRunning() view returns(bool)
func (_IETHDKG *IETHDKGCaller) IsETHDKGRunning(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _IETHDKG.contract.Call(opts, &out, "isETHDKGRunning")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsETHDKGRunning is a free data retrieval call binding the contract method 0x747b217c.
//
// Solidity: function isETHDKGRunning() view returns(bool)
func (_IETHDKG *IETHDKGSession) IsETHDKGRunning() (bool, error) {
	return _IETHDKG.Contract.IsETHDKGRunning(&_IETHDKG.CallOpts)
}

// IsETHDKGRunning is a free data retrieval call binding the contract method 0x747b217c.
//
// Solidity: function isETHDKGRunning() view returns(bool)
func (_IETHDKG *IETHDKGCallerSession) IsETHDKGRunning() (bool, error) {
	return _IETHDKG.Contract.IsETHDKGRunning(&_IETHDKG.CallOpts)
}

// IsMasterPublicKeySet is a free data retrieval call binding the contract method 0x08efcf16.
//
// Solidity: function isMasterPublicKeySet() view returns(bool)
func (_IETHDKG *IETHDKGCaller) IsMasterPublicKeySet(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _IETHDKG.contract.Call(opts, &out, "isMasterPublicKeySet")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsMasterPublicKeySet is a free data retrieval call binding the contract method 0x08efcf16.
//
// Solidity: function isMasterPublicKeySet() view returns(bool)
func (_IETHDKG *IETHDKGSession) IsMasterPublicKeySet() (bool, error) {
	return _IETHDKG.Contract.IsMasterPublicKeySet(&_IETHDKG.CallOpts)
}

// IsMasterPublicKeySet is a free data retrieval call binding the contract method 0x08efcf16.
//
// Solidity: function isMasterPublicKeySet() view returns(bool)
func (_IETHDKG *IETHDKGCallerSession) IsMasterPublicKeySet() (bool, error) {
	return _IETHDKG.Contract.IsMasterPublicKeySet(&_IETHDKG.CallOpts)
}

// TryGetParticipantIndex is a free data retrieval call binding the contract method 0x65e62b9b.
//
// Solidity: function tryGetParticipantIndex(address participant) view returns(bool, uint256)
func (_IETHDKG *IETHDKGCaller) TryGetParticipantIndex(opts *bind.CallOpts, participant common.Address) (bool, *big.Int, error) {
	var out []interface{}
	err := _IETHDKG.contract.Call(opts, &out, "tryGetParticipantIndex", participant)

	if err != nil {
		return *new(bool), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return out0, out1, err

}

// TryGetParticipantIndex is a free data retrieval call binding the contract method 0x65e62b9b.
//
// Solidity: function tryGetParticipantIndex(address participant) view returns(bool, uint256)
func (_IETHDKG *IETHDKGSession) TryGetParticipantIndex(participant common.Address) (bool, *big.Int, error) {
	return _IETHDKG.Contract.TryGetParticipantIndex(&_IETHDKG.CallOpts, participant)
}

// TryGetParticipantIndex is a free data retrieval call binding the contract method 0x65e62b9b.
//
// Solidity: function tryGetParticipantIndex(address participant) view returns(bool, uint256)
func (_IETHDKG *IETHDKGCallerSession) TryGetParticipantIndex(participant common.Address) (bool, *big.Int, error) {
	return _IETHDKG.Contract.TryGetParticipantIndex(&_IETHDKG.CallOpts, participant)
}

// AccuseParticipantDidNotDistributeShares is a paid mutator transaction binding the contract method 0xdae681bc.
//
// Solidity: function accuseParticipantDidNotDistributeShares(address[] dishonestAddresses) returns()
func (_IETHDKG *IETHDKGTransactor) AccuseParticipantDidNotDistributeShares(opts *bind.TransactOpts, dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _IETHDKG.contract.Transact(opts, "accuseParticipantDidNotDistributeShares", dishonestAddresses)
}

// AccuseParticipantDidNotDistributeShares is a paid mutator transaction binding the contract method 0xdae681bc.
//
// Solidity: function accuseParticipantDidNotDistributeShares(address[] dishonestAddresses) returns()
func (_IETHDKG *IETHDKGSession) AccuseParticipantDidNotDistributeShares(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _IETHDKG.Contract.AccuseParticipantDidNotDistributeShares(&_IETHDKG.TransactOpts, dishonestAddresses)
}

// AccuseParticipantDidNotDistributeShares is a paid mutator transaction binding the contract method 0xdae681bc.
//
// Solidity: function accuseParticipantDidNotDistributeShares(address[] dishonestAddresses) returns()
func (_IETHDKG *IETHDKGTransactorSession) AccuseParticipantDidNotDistributeShares(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _IETHDKG.Contract.AccuseParticipantDidNotDistributeShares(&_IETHDKG.TransactOpts, dishonestAddresses)
}

// AccuseParticipantDidNotSubmitGPKJ is a paid mutator transaction binding the contract method 0x7df24ee9.
//
// Solidity: function accuseParticipantDidNotSubmitGPKJ(address[] dishonestAddresses) returns()
func (_IETHDKG *IETHDKGTransactor) AccuseParticipantDidNotSubmitGPKJ(opts *bind.TransactOpts, dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _IETHDKG.contract.Transact(opts, "accuseParticipantDidNotSubmitGPKJ", dishonestAddresses)
}

// AccuseParticipantDidNotSubmitGPKJ is a paid mutator transaction binding the contract method 0x7df24ee9.
//
// Solidity: function accuseParticipantDidNotSubmitGPKJ(address[] dishonestAddresses) returns()
func (_IETHDKG *IETHDKGSession) AccuseParticipantDidNotSubmitGPKJ(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _IETHDKG.Contract.AccuseParticipantDidNotSubmitGPKJ(&_IETHDKG.TransactOpts, dishonestAddresses)
}

// AccuseParticipantDidNotSubmitGPKJ is a paid mutator transaction binding the contract method 0x7df24ee9.
//
// Solidity: function accuseParticipantDidNotSubmitGPKJ(address[] dishonestAddresses) returns()
func (_IETHDKG *IETHDKGTransactorSession) AccuseParticipantDidNotSubmitGPKJ(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _IETHDKG.Contract.AccuseParticipantDidNotSubmitGPKJ(&_IETHDKG.TransactOpts, dishonestAddresses)
}

// AccuseParticipantDidNotSubmitKeyShares is a paid mutator transaction binding the contract method 0x043a6f12.
//
// Solidity: function accuseParticipantDidNotSubmitKeyShares(address[] dishonestAddresses) returns()
func (_IETHDKG *IETHDKGTransactor) AccuseParticipantDidNotSubmitKeyShares(opts *bind.TransactOpts, dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _IETHDKG.contract.Transact(opts, "accuseParticipantDidNotSubmitKeyShares", dishonestAddresses)
}

// AccuseParticipantDidNotSubmitKeyShares is a paid mutator transaction binding the contract method 0x043a6f12.
//
// Solidity: function accuseParticipantDidNotSubmitKeyShares(address[] dishonestAddresses) returns()
func (_IETHDKG *IETHDKGSession) AccuseParticipantDidNotSubmitKeyShares(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _IETHDKG.Contract.AccuseParticipantDidNotSubmitKeyShares(&_IETHDKG.TransactOpts, dishonestAddresses)
}

// AccuseParticipantDidNotSubmitKeyShares is a paid mutator transaction binding the contract method 0x043a6f12.
//
// Solidity: function accuseParticipantDidNotSubmitKeyShares(address[] dishonestAddresses) returns()
func (_IETHDKG *IETHDKGTransactorSession) AccuseParticipantDidNotSubmitKeyShares(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _IETHDKG.Contract.AccuseParticipantDidNotSubmitKeyShares(&_IETHDKG.TransactOpts, dishonestAddresses)
}

// AccuseParticipantDistributedBadShares is a paid mutator transaction binding the contract method 0xedbe7bf7.
//
// Solidity: function accuseParticipantDistributedBadShares(address dishonestAddress, uint256[] encryptedShares, uint256[2][] commitments, uint256[2] sharedKey, uint256[2] sharedKeyCorrectnessProof) returns()
func (_IETHDKG *IETHDKGTransactor) AccuseParticipantDistributedBadShares(opts *bind.TransactOpts, dishonestAddress common.Address, encryptedShares []*big.Int, commitments [][2]*big.Int, sharedKey [2]*big.Int, sharedKeyCorrectnessProof [2]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.contract.Transact(opts, "accuseParticipantDistributedBadShares", dishonestAddress, encryptedShares, commitments, sharedKey, sharedKeyCorrectnessProof)
}

// AccuseParticipantDistributedBadShares is a paid mutator transaction binding the contract method 0xedbe7bf7.
//
// Solidity: function accuseParticipantDistributedBadShares(address dishonestAddress, uint256[] encryptedShares, uint256[2][] commitments, uint256[2] sharedKey, uint256[2] sharedKeyCorrectnessProof) returns()
func (_IETHDKG *IETHDKGSession) AccuseParticipantDistributedBadShares(dishonestAddress common.Address, encryptedShares []*big.Int, commitments [][2]*big.Int, sharedKey [2]*big.Int, sharedKeyCorrectnessProof [2]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.Contract.AccuseParticipantDistributedBadShares(&_IETHDKG.TransactOpts, dishonestAddress, encryptedShares, commitments, sharedKey, sharedKeyCorrectnessProof)
}

// AccuseParticipantDistributedBadShares is a paid mutator transaction binding the contract method 0xedbe7bf7.
//
// Solidity: function accuseParticipantDistributedBadShares(address dishonestAddress, uint256[] encryptedShares, uint256[2][] commitments, uint256[2] sharedKey, uint256[2] sharedKeyCorrectnessProof) returns()
func (_IETHDKG *IETHDKGTransactorSession) AccuseParticipantDistributedBadShares(dishonestAddress common.Address, encryptedShares []*big.Int, commitments [][2]*big.Int, sharedKey [2]*big.Int, sharedKeyCorrectnessProof [2]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.Contract.AccuseParticipantDistributedBadShares(&_IETHDKG.TransactOpts, dishonestAddress, encryptedShares, commitments, sharedKey, sharedKeyCorrectnessProof)
}

// AccuseParticipantNotRegistered is a paid mutator transaction binding the contract method 0xf72c45b6.
//
// Solidity: function accuseParticipantNotRegistered(address[] dishonestAddresses) returns()
func (_IETHDKG *IETHDKGTransactor) AccuseParticipantNotRegistered(opts *bind.TransactOpts, dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _IETHDKG.contract.Transact(opts, "accuseParticipantNotRegistered", dishonestAddresses)
}

// AccuseParticipantNotRegistered is a paid mutator transaction binding the contract method 0xf72c45b6.
//
// Solidity: function accuseParticipantNotRegistered(address[] dishonestAddresses) returns()
func (_IETHDKG *IETHDKGSession) AccuseParticipantNotRegistered(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _IETHDKG.Contract.AccuseParticipantNotRegistered(&_IETHDKG.TransactOpts, dishonestAddresses)
}

// AccuseParticipantNotRegistered is a paid mutator transaction binding the contract method 0xf72c45b6.
//
// Solidity: function accuseParticipantNotRegistered(address[] dishonestAddresses) returns()
func (_IETHDKG *IETHDKGTransactorSession) AccuseParticipantNotRegistered(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _IETHDKG.Contract.AccuseParticipantNotRegistered(&_IETHDKG.TransactOpts, dishonestAddresses)
}

// AccuseParticipantSubmittedBadGPKJ is a paid mutator transaction binding the contract method 0x80001264.
//
// Solidity: function accuseParticipantSubmittedBadGPKJ(address[] validators, bytes32[] encryptedSharesHash, uint256[2][][] commitments, address dishonestAddress) returns()
func (_IETHDKG *IETHDKGTransactor) AccuseParticipantSubmittedBadGPKJ(opts *bind.TransactOpts, validators []common.Address, encryptedSharesHash [][32]byte, commitments [][][2]*big.Int, dishonestAddress common.Address) (*types.Transaction, error) {
	return _IETHDKG.contract.Transact(opts, "accuseParticipantSubmittedBadGPKJ", validators, encryptedSharesHash, commitments, dishonestAddress)
}

// AccuseParticipantSubmittedBadGPKJ is a paid mutator transaction binding the contract method 0x80001264.
//
// Solidity: function accuseParticipantSubmittedBadGPKJ(address[] validators, bytes32[] encryptedSharesHash, uint256[2][][] commitments, address dishonestAddress) returns()
func (_IETHDKG *IETHDKGSession) AccuseParticipantSubmittedBadGPKJ(validators []common.Address, encryptedSharesHash [][32]byte, commitments [][][2]*big.Int, dishonestAddress common.Address) (*types.Transaction, error) {
	return _IETHDKG.Contract.AccuseParticipantSubmittedBadGPKJ(&_IETHDKG.TransactOpts, validators, encryptedSharesHash, commitments, dishonestAddress)
}

// AccuseParticipantSubmittedBadGPKJ is a paid mutator transaction binding the contract method 0x80001264.
//
// Solidity: function accuseParticipantSubmittedBadGPKJ(address[] validators, bytes32[] encryptedSharesHash, uint256[2][][] commitments, address dishonestAddress) returns()
func (_IETHDKG *IETHDKGTransactorSession) AccuseParticipantSubmittedBadGPKJ(validators []common.Address, encryptedSharesHash [][32]byte, commitments [][][2]*big.Int, dishonestAddress common.Address) (*types.Transaction, error) {
	return _IETHDKG.Contract.AccuseParticipantSubmittedBadGPKJ(&_IETHDKG.TransactOpts, validators, encryptedSharesHash, commitments, dishonestAddress)
}

// Complete is a paid mutator transaction binding the contract method 0x522e1177.
//
// Solidity: function complete() returns()
func (_IETHDKG *IETHDKGTransactor) Complete(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IETHDKG.contract.Transact(opts, "complete")
}

// Complete is a paid mutator transaction binding the contract method 0x522e1177.
//
// Solidity: function complete() returns()
func (_IETHDKG *IETHDKGSession) Complete() (*types.Transaction, error) {
	return _IETHDKG.Contract.Complete(&_IETHDKG.TransactOpts)
}

// Complete is a paid mutator transaction binding the contract method 0x522e1177.
//
// Solidity: function complete() returns()
func (_IETHDKG *IETHDKGTransactorSession) Complete() (*types.Transaction, error) {
	return _IETHDKG.Contract.Complete(&_IETHDKG.TransactOpts)
}

// DistributeShares is a paid mutator transaction binding the contract method 0x80b97e01.
//
// Solidity: function distributeShares(uint256[] encryptedShares, uint256[2][] commitments) returns()
func (_IETHDKG *IETHDKGTransactor) DistributeShares(opts *bind.TransactOpts, encryptedShares []*big.Int, commitments [][2]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.contract.Transact(opts, "distributeShares", encryptedShares, commitments)
}

// DistributeShares is a paid mutator transaction binding the contract method 0x80b97e01.
//
// Solidity: function distributeShares(uint256[] encryptedShares, uint256[2][] commitments) returns()
func (_IETHDKG *IETHDKGSession) DistributeShares(encryptedShares []*big.Int, commitments [][2]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.Contract.DistributeShares(&_IETHDKG.TransactOpts, encryptedShares, commitments)
}

// DistributeShares is a paid mutator transaction binding the contract method 0x80b97e01.
//
// Solidity: function distributeShares(uint256[] encryptedShares, uint256[2][] commitments) returns()
func (_IETHDKG *IETHDKGTransactorSession) DistributeShares(encryptedShares []*big.Int, commitments [][2]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.Contract.DistributeShares(&_IETHDKG.TransactOpts, encryptedShares, commitments)
}

// InitializeETHDKG is a paid mutator transaction binding the contract method 0x57b51c9c.
//
// Solidity: function initializeETHDKG() returns()
func (_IETHDKG *IETHDKGTransactor) InitializeETHDKG(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IETHDKG.contract.Transact(opts, "initializeETHDKG")
}

// InitializeETHDKG is a paid mutator transaction binding the contract method 0x57b51c9c.
//
// Solidity: function initializeETHDKG() returns()
func (_IETHDKG *IETHDKGSession) InitializeETHDKG() (*types.Transaction, error) {
	return _IETHDKG.Contract.InitializeETHDKG(&_IETHDKG.TransactOpts)
}

// InitializeETHDKG is a paid mutator transaction binding the contract method 0x57b51c9c.
//
// Solidity: function initializeETHDKG() returns()
func (_IETHDKG *IETHDKGTransactorSession) InitializeETHDKG() (*types.Transaction, error) {
	return _IETHDKG.Contract.InitializeETHDKG(&_IETHDKG.TransactOpts)
}

// Register is a paid mutator transaction binding the contract method 0x3442af5c.
//
// Solidity: function register(uint256[2] publicKey) returns()
func (_IETHDKG *IETHDKGTransactor) Register(opts *bind.TransactOpts, publicKey [2]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.contract.Transact(opts, "register", publicKey)
}

// Register is a paid mutator transaction binding the contract method 0x3442af5c.
//
// Solidity: function register(uint256[2] publicKey) returns()
func (_IETHDKG *IETHDKGSession) Register(publicKey [2]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.Contract.Register(&_IETHDKG.TransactOpts, publicKey)
}

// Register is a paid mutator transaction binding the contract method 0x3442af5c.
//
// Solidity: function register(uint256[2] publicKey) returns()
func (_IETHDKG *IETHDKGTransactorSession) Register(publicKey [2]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.Contract.Register(&_IETHDKG.TransactOpts, publicKey)
}

// SetConfirmationLength is a paid mutator transaction binding the contract method 0xff3e5e45.
//
// Solidity: function setConfirmationLength(uint16 confirmationLength_) returns()
func (_IETHDKG *IETHDKGTransactor) SetConfirmationLength(opts *bind.TransactOpts, confirmationLength_ uint16) (*types.Transaction, error) {
	return _IETHDKG.contract.Transact(opts, "setConfirmationLength", confirmationLength_)
}

// SetConfirmationLength is a paid mutator transaction binding the contract method 0xff3e5e45.
//
// Solidity: function setConfirmationLength(uint16 confirmationLength_) returns()
func (_IETHDKG *IETHDKGSession) SetConfirmationLength(confirmationLength_ uint16) (*types.Transaction, error) {
	return _IETHDKG.Contract.SetConfirmationLength(&_IETHDKG.TransactOpts, confirmationLength_)
}

// SetConfirmationLength is a paid mutator transaction binding the contract method 0xff3e5e45.
//
// Solidity: function setConfirmationLength(uint16 confirmationLength_) returns()
func (_IETHDKG *IETHDKGTransactorSession) SetConfirmationLength(confirmationLength_ uint16) (*types.Transaction, error) {
	return _IETHDKG.Contract.SetConfirmationLength(&_IETHDKG.TransactOpts, confirmationLength_)
}

// SetMinNumberOfValidator is a paid mutator transaction binding the contract method 0xfb89c899.
//
// Solidity: function setMinNumberOfValidator(uint16 minValidators_) returns()
func (_IETHDKG *IETHDKGTransactor) SetMinNumberOfValidator(opts *bind.TransactOpts, minValidators_ uint16) (*types.Transaction, error) {
	return _IETHDKG.contract.Transact(opts, "setMinNumberOfValidator", minValidators_)
}

// SetMinNumberOfValidator is a paid mutator transaction binding the contract method 0xfb89c899.
//
// Solidity: function setMinNumberOfValidator(uint16 minValidators_) returns()
func (_IETHDKG *IETHDKGSession) SetMinNumberOfValidator(minValidators_ uint16) (*types.Transaction, error) {
	return _IETHDKG.Contract.SetMinNumberOfValidator(&_IETHDKG.TransactOpts, minValidators_)
}

// SetMinNumberOfValidator is a paid mutator transaction binding the contract method 0xfb89c899.
//
// Solidity: function setMinNumberOfValidator(uint16 minValidators_) returns()
func (_IETHDKG *IETHDKGTransactorSession) SetMinNumberOfValidator(minValidators_ uint16) (*types.Transaction, error) {
	return _IETHDKG.Contract.SetMinNumberOfValidator(&_IETHDKG.TransactOpts, minValidators_)
}

// SetPhaseLength is a paid mutator transaction binding the contract method 0x8a3c24cc.
//
// Solidity: function setPhaseLength(uint16 phaseLength_) returns()
func (_IETHDKG *IETHDKGTransactor) SetPhaseLength(opts *bind.TransactOpts, phaseLength_ uint16) (*types.Transaction, error) {
	return _IETHDKG.contract.Transact(opts, "setPhaseLength", phaseLength_)
}

// SetPhaseLength is a paid mutator transaction binding the contract method 0x8a3c24cc.
//
// Solidity: function setPhaseLength(uint16 phaseLength_) returns()
func (_IETHDKG *IETHDKGSession) SetPhaseLength(phaseLength_ uint16) (*types.Transaction, error) {
	return _IETHDKG.Contract.SetPhaseLength(&_IETHDKG.TransactOpts, phaseLength_)
}

// SetPhaseLength is a paid mutator transaction binding the contract method 0x8a3c24cc.
//
// Solidity: function setPhaseLength(uint16 phaseLength_) returns()
func (_IETHDKG *IETHDKGTransactorSession) SetPhaseLength(phaseLength_ uint16) (*types.Transaction, error) {
	return _IETHDKG.Contract.SetPhaseLength(&_IETHDKG.TransactOpts, phaseLength_)
}

// SetValidatorPoolAddress is a paid mutator transaction binding the contract method 0xfe0fe422.
//
// Solidity: function setValidatorPoolAddress(address validatorPool) returns()
func (_IETHDKG *IETHDKGTransactor) SetValidatorPoolAddress(opts *bind.TransactOpts, validatorPool common.Address) (*types.Transaction, error) {
	return _IETHDKG.contract.Transact(opts, "setValidatorPoolAddress", validatorPool)
}

// SetValidatorPoolAddress is a paid mutator transaction binding the contract method 0xfe0fe422.
//
// Solidity: function setValidatorPoolAddress(address validatorPool) returns()
func (_IETHDKG *IETHDKGSession) SetValidatorPoolAddress(validatorPool common.Address) (*types.Transaction, error) {
	return _IETHDKG.Contract.SetValidatorPoolAddress(&_IETHDKG.TransactOpts, validatorPool)
}

// SetValidatorPoolAddress is a paid mutator transaction binding the contract method 0xfe0fe422.
//
// Solidity: function setValidatorPoolAddress(address validatorPool) returns()
func (_IETHDKG *IETHDKGTransactorSession) SetValidatorPoolAddress(validatorPool common.Address) (*types.Transaction, error) {
	return _IETHDKG.Contract.SetValidatorPoolAddress(&_IETHDKG.TransactOpts, validatorPool)
}

// SubmitGPKJ is a paid mutator transaction binding the contract method 0x101f49c1.
//
// Solidity: function submitGPKJ(uint256[4] gpkj) returns()
func (_IETHDKG *IETHDKGTransactor) SubmitGPKJ(opts *bind.TransactOpts, gpkj [4]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.contract.Transact(opts, "submitGPKJ", gpkj)
}

// SubmitGPKJ is a paid mutator transaction binding the contract method 0x101f49c1.
//
// Solidity: function submitGPKJ(uint256[4] gpkj) returns()
func (_IETHDKG *IETHDKGSession) SubmitGPKJ(gpkj [4]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.Contract.SubmitGPKJ(&_IETHDKG.TransactOpts, gpkj)
}

// SubmitGPKJ is a paid mutator transaction binding the contract method 0x101f49c1.
//
// Solidity: function submitGPKJ(uint256[4] gpkj) returns()
func (_IETHDKG *IETHDKGTransactorSession) SubmitGPKJ(gpkj [4]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.Contract.SubmitGPKJ(&_IETHDKG.TransactOpts, gpkj)
}

// SubmitKeyShare is a paid mutator transaction binding the contract method 0x62a6523e.
//
// Solidity: function submitKeyShare(uint256[2] keyShareG1, uint256[2] keyShareG1CorrectnessProof, uint256[4] keyShareG2) returns()
func (_IETHDKG *IETHDKGTransactor) SubmitKeyShare(opts *bind.TransactOpts, keyShareG1 [2]*big.Int, keyShareG1CorrectnessProof [2]*big.Int, keyShareG2 [4]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.contract.Transact(opts, "submitKeyShare", keyShareG1, keyShareG1CorrectnessProof, keyShareG2)
}

// SubmitKeyShare is a paid mutator transaction binding the contract method 0x62a6523e.
//
// Solidity: function submitKeyShare(uint256[2] keyShareG1, uint256[2] keyShareG1CorrectnessProof, uint256[4] keyShareG2) returns()
func (_IETHDKG *IETHDKGSession) SubmitKeyShare(keyShareG1 [2]*big.Int, keyShareG1CorrectnessProof [2]*big.Int, keyShareG2 [4]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.Contract.SubmitKeyShare(&_IETHDKG.TransactOpts, keyShareG1, keyShareG1CorrectnessProof, keyShareG2)
}

// SubmitKeyShare is a paid mutator transaction binding the contract method 0x62a6523e.
//
// Solidity: function submitKeyShare(uint256[2] keyShareG1, uint256[2] keyShareG1CorrectnessProof, uint256[4] keyShareG2) returns()
func (_IETHDKG *IETHDKGTransactorSession) SubmitKeyShare(keyShareG1 [2]*big.Int, keyShareG1CorrectnessProof [2]*big.Int, keyShareG2 [4]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.Contract.SubmitKeyShare(&_IETHDKG.TransactOpts, keyShareG1, keyShareG1CorrectnessProof, keyShareG2)
}

// SubmitMasterPublicKey is a paid mutator transaction binding the contract method 0xe8323224.
//
// Solidity: function submitMasterPublicKey(uint256[4] masterPublicKey_) returns()
func (_IETHDKG *IETHDKGTransactor) SubmitMasterPublicKey(opts *bind.TransactOpts, masterPublicKey_ [4]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.contract.Transact(opts, "submitMasterPublicKey", masterPublicKey_)
}

// SubmitMasterPublicKey is a paid mutator transaction binding the contract method 0xe8323224.
//
// Solidity: function submitMasterPublicKey(uint256[4] masterPublicKey_) returns()
func (_IETHDKG *IETHDKGSession) SubmitMasterPublicKey(masterPublicKey_ [4]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.Contract.SubmitMasterPublicKey(&_IETHDKG.TransactOpts, masterPublicKey_)
}

// SubmitMasterPublicKey is a paid mutator transaction binding the contract method 0xe8323224.
//
// Solidity: function submitMasterPublicKey(uint256[4] masterPublicKey_) returns()
func (_IETHDKG *IETHDKGTransactorSession) SubmitMasterPublicKey(masterPublicKey_ [4]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.Contract.SubmitMasterPublicKey(&_IETHDKG.TransactOpts, masterPublicKey_)
}

// IETHDKGEventsMetaData contains all meta data concerning the IETHDKGEvents contract.
var IETHDKGEventsMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"publicKey\",\"type\":\"uint256[2]\"}],\"name\":\"AddressRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"GPKJSubmissionComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"KeyShareSubmissionComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"keyShareG1\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"keyShareG1CorrectnessProof\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[4]\",\"name\":\"keyShareG2\",\"type\":\"uint256[4]\"}],\"name\":\"KeyShareSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[4]\",\"name\":\"mpk\",\"type\":\"uint256[4]\"}],\"name\":\"MPKSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"RegistrationComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numberValidators\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"phaseLength\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"confirmationLength\",\"type\":\"uint256\"}],\"name\":\"RegistrationOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"ShareDistributionComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"encryptedShares\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[2][]\",\"name\":\"commitments\",\"type\":\"uint256[2][]\"}],\"name\":\"SharesDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share3\",\"type\":\"uint256\"}],\"name\":\"ValidatorMemberAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validatorCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethHeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"madHeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey3\",\"type\":\"uint256\"}],\"name\":\"ValidatorSetCompleted\",\"type\":\"event\"}]",
}

// IETHDKGEventsABI is the input ABI used to generate the binding from.
// Deprecated: Use IETHDKGEventsMetaData.ABI instead.
var IETHDKGEventsABI = IETHDKGEventsMetaData.ABI

// IETHDKGEvents is an auto generated Go binding around an Ethereum contract.
type IETHDKGEvents struct {
	IETHDKGEventsCaller     // Read-only binding to the contract
	IETHDKGEventsTransactor // Write-only binding to the contract
	IETHDKGEventsFilterer   // Log filterer for contract events
}

// IETHDKGEventsCaller is an auto generated read-only Go binding around an Ethereum contract.
type IETHDKGEventsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IETHDKGEventsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IETHDKGEventsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IETHDKGEventsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IETHDKGEventsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IETHDKGEventsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IETHDKGEventsSession struct {
	Contract     *IETHDKGEvents    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IETHDKGEventsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IETHDKGEventsCallerSession struct {
	Contract *IETHDKGEventsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// IETHDKGEventsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IETHDKGEventsTransactorSession struct {
	Contract     *IETHDKGEventsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// IETHDKGEventsRaw is an auto generated low-level Go binding around an Ethereum contract.
type IETHDKGEventsRaw struct {
	Contract *IETHDKGEvents // Generic contract binding to access the raw methods on
}

// IETHDKGEventsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IETHDKGEventsCallerRaw struct {
	Contract *IETHDKGEventsCaller // Generic read-only contract binding to access the raw methods on
}

// IETHDKGEventsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IETHDKGEventsTransactorRaw struct {
	Contract *IETHDKGEventsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIETHDKGEvents creates a new instance of IETHDKGEvents, bound to a specific deployed contract.
func NewIETHDKGEvents(address common.Address, backend bind.ContractBackend) (*IETHDKGEvents, error) {
	contract, err := bindIETHDKGEvents(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IETHDKGEvents{IETHDKGEventsCaller: IETHDKGEventsCaller{contract: contract}, IETHDKGEventsTransactor: IETHDKGEventsTransactor{contract: contract}, IETHDKGEventsFilterer: IETHDKGEventsFilterer{contract: contract}}, nil
}

// NewIETHDKGEventsCaller creates a new read-only instance of IETHDKGEvents, bound to a specific deployed contract.
func NewIETHDKGEventsCaller(address common.Address, caller bind.ContractCaller) (*IETHDKGEventsCaller, error) {
	contract, err := bindIETHDKGEvents(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IETHDKGEventsCaller{contract: contract}, nil
}

// NewIETHDKGEventsTransactor creates a new write-only instance of IETHDKGEvents, bound to a specific deployed contract.
func NewIETHDKGEventsTransactor(address common.Address, transactor bind.ContractTransactor) (*IETHDKGEventsTransactor, error) {
	contract, err := bindIETHDKGEvents(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IETHDKGEventsTransactor{contract: contract}, nil
}

// NewIETHDKGEventsFilterer creates a new log filterer instance of IETHDKGEvents, bound to a specific deployed contract.
func NewIETHDKGEventsFilterer(address common.Address, filterer bind.ContractFilterer) (*IETHDKGEventsFilterer, error) {
	contract, err := bindIETHDKGEvents(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IETHDKGEventsFilterer{contract: contract}, nil
}

// bindIETHDKGEvents binds a generic wrapper to an already deployed contract.
func bindIETHDKGEvents(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IETHDKGEventsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IETHDKGEvents *IETHDKGEventsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IETHDKGEvents.Contract.IETHDKGEventsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IETHDKGEvents *IETHDKGEventsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IETHDKGEvents.Contract.IETHDKGEventsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IETHDKGEvents *IETHDKGEventsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IETHDKGEvents.Contract.IETHDKGEventsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IETHDKGEvents *IETHDKGEventsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IETHDKGEvents.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IETHDKGEvents *IETHDKGEventsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IETHDKGEvents.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IETHDKGEvents *IETHDKGEventsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IETHDKGEvents.Contract.contract.Transact(opts, method, params...)
}

// IETHDKGEventsAddressRegisteredIterator is returned from FilterAddressRegistered and is used to iterate over the raw logs and unpacked data for AddressRegistered events raised by the IETHDKGEvents contract.
type IETHDKGEventsAddressRegisteredIterator struct {
	Event *IETHDKGEventsAddressRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IETHDKGEventsAddressRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IETHDKGEventsAddressRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IETHDKGEventsAddressRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IETHDKGEventsAddressRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IETHDKGEventsAddressRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IETHDKGEventsAddressRegistered represents a AddressRegistered event raised by the IETHDKGEvents contract.
type IETHDKGEventsAddressRegistered struct {
	Account   common.Address
	Index     *big.Int
	Nonce     *big.Int
	PublicKey [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAddressRegistered is a free log retrieval operation binding the contract event 0x7f1304057ec61140fbf2f5f236790f34fcafe123d3eb0d298d92317c97da500d.
//
// Solidity: event AddressRegistered(address account, uint256 index, uint256 nonce, uint256[2] publicKey)
func (_IETHDKGEvents *IETHDKGEventsFilterer) FilterAddressRegistered(opts *bind.FilterOpts) (*IETHDKGEventsAddressRegisteredIterator, error) {

	logs, sub, err := _IETHDKGEvents.contract.FilterLogs(opts, "AddressRegistered")
	if err != nil {
		return nil, err
	}
	return &IETHDKGEventsAddressRegisteredIterator{contract: _IETHDKGEvents.contract, event: "AddressRegistered", logs: logs, sub: sub}, nil
}

// WatchAddressRegistered is a free log subscription operation binding the contract event 0x7f1304057ec61140fbf2f5f236790f34fcafe123d3eb0d298d92317c97da500d.
//
// Solidity: event AddressRegistered(address account, uint256 index, uint256 nonce, uint256[2] publicKey)
func (_IETHDKGEvents *IETHDKGEventsFilterer) WatchAddressRegistered(opts *bind.WatchOpts, sink chan<- *IETHDKGEventsAddressRegistered) (event.Subscription, error) {

	logs, sub, err := _IETHDKGEvents.contract.WatchLogs(opts, "AddressRegistered")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IETHDKGEventsAddressRegistered)
				if err := _IETHDKGEvents.contract.UnpackLog(event, "AddressRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddressRegistered is a log parse operation binding the contract event 0x7f1304057ec61140fbf2f5f236790f34fcafe123d3eb0d298d92317c97da500d.
//
// Solidity: event AddressRegistered(address account, uint256 index, uint256 nonce, uint256[2] publicKey)
func (_IETHDKGEvents *IETHDKGEventsFilterer) ParseAddressRegistered(log types.Log) (*IETHDKGEventsAddressRegistered, error) {
	event := new(IETHDKGEventsAddressRegistered)
	if err := _IETHDKGEvents.contract.UnpackLog(event, "AddressRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IETHDKGEventsGPKJSubmissionCompleteIterator is returned from FilterGPKJSubmissionComplete and is used to iterate over the raw logs and unpacked data for GPKJSubmissionComplete events raised by the IETHDKGEvents contract.
type IETHDKGEventsGPKJSubmissionCompleteIterator struct {
	Event *IETHDKGEventsGPKJSubmissionComplete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IETHDKGEventsGPKJSubmissionCompleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IETHDKGEventsGPKJSubmissionComplete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IETHDKGEventsGPKJSubmissionComplete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IETHDKGEventsGPKJSubmissionCompleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IETHDKGEventsGPKJSubmissionCompleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IETHDKGEventsGPKJSubmissionComplete represents a GPKJSubmissionComplete event raised by the IETHDKGEvents contract.
type IETHDKGEventsGPKJSubmissionComplete struct {
	BlockNumber *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterGPKJSubmissionComplete is a free log retrieval operation binding the contract event 0x87bfe600b78cad9f7cf68c99eb582c1748f636b3269842b37d5873b0e069f628.
//
// Solidity: event GPKJSubmissionComplete(uint256 blockNumber)
func (_IETHDKGEvents *IETHDKGEventsFilterer) FilterGPKJSubmissionComplete(opts *bind.FilterOpts) (*IETHDKGEventsGPKJSubmissionCompleteIterator, error) {

	logs, sub, err := _IETHDKGEvents.contract.FilterLogs(opts, "GPKJSubmissionComplete")
	if err != nil {
		return nil, err
	}
	return &IETHDKGEventsGPKJSubmissionCompleteIterator{contract: _IETHDKGEvents.contract, event: "GPKJSubmissionComplete", logs: logs, sub: sub}, nil
}

// WatchGPKJSubmissionComplete is a free log subscription operation binding the contract event 0x87bfe600b78cad9f7cf68c99eb582c1748f636b3269842b37d5873b0e069f628.
//
// Solidity: event GPKJSubmissionComplete(uint256 blockNumber)
func (_IETHDKGEvents *IETHDKGEventsFilterer) WatchGPKJSubmissionComplete(opts *bind.WatchOpts, sink chan<- *IETHDKGEventsGPKJSubmissionComplete) (event.Subscription, error) {

	logs, sub, err := _IETHDKGEvents.contract.WatchLogs(opts, "GPKJSubmissionComplete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IETHDKGEventsGPKJSubmissionComplete)
				if err := _IETHDKGEvents.contract.UnpackLog(event, "GPKJSubmissionComplete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseGPKJSubmissionComplete is a log parse operation binding the contract event 0x87bfe600b78cad9f7cf68c99eb582c1748f636b3269842b37d5873b0e069f628.
//
// Solidity: event GPKJSubmissionComplete(uint256 blockNumber)
func (_IETHDKGEvents *IETHDKGEventsFilterer) ParseGPKJSubmissionComplete(log types.Log) (*IETHDKGEventsGPKJSubmissionComplete, error) {
	event := new(IETHDKGEventsGPKJSubmissionComplete)
	if err := _IETHDKGEvents.contract.UnpackLog(event, "GPKJSubmissionComplete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IETHDKGEventsKeyShareSubmissionCompleteIterator is returned from FilterKeyShareSubmissionComplete and is used to iterate over the raw logs and unpacked data for KeyShareSubmissionComplete events raised by the IETHDKGEvents contract.
type IETHDKGEventsKeyShareSubmissionCompleteIterator struct {
	Event *IETHDKGEventsKeyShareSubmissionComplete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IETHDKGEventsKeyShareSubmissionCompleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IETHDKGEventsKeyShareSubmissionComplete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IETHDKGEventsKeyShareSubmissionComplete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IETHDKGEventsKeyShareSubmissionCompleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IETHDKGEventsKeyShareSubmissionCompleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IETHDKGEventsKeyShareSubmissionComplete represents a KeyShareSubmissionComplete event raised by the IETHDKGEvents contract.
type IETHDKGEventsKeyShareSubmissionComplete struct {
	BlockNumber *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterKeyShareSubmissionComplete is a free log retrieval operation binding the contract event 0x522cec98f6caa194456c44afa9e8cef9ac63eecb0be60e20d180ce19cfb0ef59.
//
// Solidity: event KeyShareSubmissionComplete(uint256 blockNumber)
func (_IETHDKGEvents *IETHDKGEventsFilterer) FilterKeyShareSubmissionComplete(opts *bind.FilterOpts) (*IETHDKGEventsKeyShareSubmissionCompleteIterator, error) {

	logs, sub, err := _IETHDKGEvents.contract.FilterLogs(opts, "KeyShareSubmissionComplete")
	if err != nil {
		return nil, err
	}
	return &IETHDKGEventsKeyShareSubmissionCompleteIterator{contract: _IETHDKGEvents.contract, event: "KeyShareSubmissionComplete", logs: logs, sub: sub}, nil
}

// WatchKeyShareSubmissionComplete is a free log subscription operation binding the contract event 0x522cec98f6caa194456c44afa9e8cef9ac63eecb0be60e20d180ce19cfb0ef59.
//
// Solidity: event KeyShareSubmissionComplete(uint256 blockNumber)
func (_IETHDKGEvents *IETHDKGEventsFilterer) WatchKeyShareSubmissionComplete(opts *bind.WatchOpts, sink chan<- *IETHDKGEventsKeyShareSubmissionComplete) (event.Subscription, error) {

	logs, sub, err := _IETHDKGEvents.contract.WatchLogs(opts, "KeyShareSubmissionComplete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IETHDKGEventsKeyShareSubmissionComplete)
				if err := _IETHDKGEvents.contract.UnpackLog(event, "KeyShareSubmissionComplete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKeyShareSubmissionComplete is a log parse operation binding the contract event 0x522cec98f6caa194456c44afa9e8cef9ac63eecb0be60e20d180ce19cfb0ef59.
//
// Solidity: event KeyShareSubmissionComplete(uint256 blockNumber)
func (_IETHDKGEvents *IETHDKGEventsFilterer) ParseKeyShareSubmissionComplete(log types.Log) (*IETHDKGEventsKeyShareSubmissionComplete, error) {
	event := new(IETHDKGEventsKeyShareSubmissionComplete)
	if err := _IETHDKGEvents.contract.UnpackLog(event, "KeyShareSubmissionComplete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IETHDKGEventsKeyShareSubmittedIterator is returned from FilterKeyShareSubmitted and is used to iterate over the raw logs and unpacked data for KeyShareSubmitted events raised by the IETHDKGEvents contract.
type IETHDKGEventsKeyShareSubmittedIterator struct {
	Event *IETHDKGEventsKeyShareSubmitted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IETHDKGEventsKeyShareSubmittedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IETHDKGEventsKeyShareSubmitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IETHDKGEventsKeyShareSubmitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IETHDKGEventsKeyShareSubmittedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IETHDKGEventsKeyShareSubmittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IETHDKGEventsKeyShareSubmitted represents a KeyShareSubmitted event raised by the IETHDKGEvents contract.
type IETHDKGEventsKeyShareSubmitted struct {
	Account                    common.Address
	Index                      *big.Int
	Nonce                      *big.Int
	KeyShareG1                 [2]*big.Int
	KeyShareG1CorrectnessProof [2]*big.Int
	KeyShareG2                 [4]*big.Int
	Raw                        types.Log // Blockchain specific contextual infos
}

// FilterKeyShareSubmitted is a free log retrieval operation binding the contract event 0x6162e2d11398e4063e4c8565dafc4fb6755bbead93747ea836a5ef73a594aaf7.
//
// Solidity: event KeyShareSubmitted(address account, uint256 index, uint256 nonce, uint256[2] keyShareG1, uint256[2] keyShareG1CorrectnessProof, uint256[4] keyShareG2)
func (_IETHDKGEvents *IETHDKGEventsFilterer) FilterKeyShareSubmitted(opts *bind.FilterOpts) (*IETHDKGEventsKeyShareSubmittedIterator, error) {

	logs, sub, err := _IETHDKGEvents.contract.FilterLogs(opts, "KeyShareSubmitted")
	if err != nil {
		return nil, err
	}
	return &IETHDKGEventsKeyShareSubmittedIterator{contract: _IETHDKGEvents.contract, event: "KeyShareSubmitted", logs: logs, sub: sub}, nil
}

// WatchKeyShareSubmitted is a free log subscription operation binding the contract event 0x6162e2d11398e4063e4c8565dafc4fb6755bbead93747ea836a5ef73a594aaf7.
//
// Solidity: event KeyShareSubmitted(address account, uint256 index, uint256 nonce, uint256[2] keyShareG1, uint256[2] keyShareG1CorrectnessProof, uint256[4] keyShareG2)
func (_IETHDKGEvents *IETHDKGEventsFilterer) WatchKeyShareSubmitted(opts *bind.WatchOpts, sink chan<- *IETHDKGEventsKeyShareSubmitted) (event.Subscription, error) {

	logs, sub, err := _IETHDKGEvents.contract.WatchLogs(opts, "KeyShareSubmitted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IETHDKGEventsKeyShareSubmitted)
				if err := _IETHDKGEvents.contract.UnpackLog(event, "KeyShareSubmitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKeyShareSubmitted is a log parse operation binding the contract event 0x6162e2d11398e4063e4c8565dafc4fb6755bbead93747ea836a5ef73a594aaf7.
//
// Solidity: event KeyShareSubmitted(address account, uint256 index, uint256 nonce, uint256[2] keyShareG1, uint256[2] keyShareG1CorrectnessProof, uint256[4] keyShareG2)
func (_IETHDKGEvents *IETHDKGEventsFilterer) ParseKeyShareSubmitted(log types.Log) (*IETHDKGEventsKeyShareSubmitted, error) {
	event := new(IETHDKGEventsKeyShareSubmitted)
	if err := _IETHDKGEvents.contract.UnpackLog(event, "KeyShareSubmitted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IETHDKGEventsMPKSetIterator is returned from FilterMPKSet and is used to iterate over the raw logs and unpacked data for MPKSet events raised by the IETHDKGEvents contract.
type IETHDKGEventsMPKSetIterator struct {
	Event *IETHDKGEventsMPKSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IETHDKGEventsMPKSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IETHDKGEventsMPKSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IETHDKGEventsMPKSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IETHDKGEventsMPKSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IETHDKGEventsMPKSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IETHDKGEventsMPKSet represents a MPKSet event raised by the IETHDKGEvents contract.
type IETHDKGEventsMPKSet struct {
	BlockNumber *big.Int
	Nonce       *big.Int
	Mpk         [4]*big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterMPKSet is a free log retrieval operation binding the contract event 0x71b1ebd27be320895a22125d6458e3363aefa6944a312ede4bf275867e6d5a71.
//
// Solidity: event MPKSet(uint256 blockNumber, uint256 nonce, uint256[4] mpk)
func (_IETHDKGEvents *IETHDKGEventsFilterer) FilterMPKSet(opts *bind.FilterOpts) (*IETHDKGEventsMPKSetIterator, error) {

	logs, sub, err := _IETHDKGEvents.contract.FilterLogs(opts, "MPKSet")
	if err != nil {
		return nil, err
	}
	return &IETHDKGEventsMPKSetIterator{contract: _IETHDKGEvents.contract, event: "MPKSet", logs: logs, sub: sub}, nil
}

// WatchMPKSet is a free log subscription operation binding the contract event 0x71b1ebd27be320895a22125d6458e3363aefa6944a312ede4bf275867e6d5a71.
//
// Solidity: event MPKSet(uint256 blockNumber, uint256 nonce, uint256[4] mpk)
func (_IETHDKGEvents *IETHDKGEventsFilterer) WatchMPKSet(opts *bind.WatchOpts, sink chan<- *IETHDKGEventsMPKSet) (event.Subscription, error) {

	logs, sub, err := _IETHDKGEvents.contract.WatchLogs(opts, "MPKSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IETHDKGEventsMPKSet)
				if err := _IETHDKGEvents.contract.UnpackLog(event, "MPKSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMPKSet is a log parse operation binding the contract event 0x71b1ebd27be320895a22125d6458e3363aefa6944a312ede4bf275867e6d5a71.
//
// Solidity: event MPKSet(uint256 blockNumber, uint256 nonce, uint256[4] mpk)
func (_IETHDKGEvents *IETHDKGEventsFilterer) ParseMPKSet(log types.Log) (*IETHDKGEventsMPKSet, error) {
	event := new(IETHDKGEventsMPKSet)
	if err := _IETHDKGEvents.contract.UnpackLog(event, "MPKSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IETHDKGEventsRegistrationCompleteIterator is returned from FilterRegistrationComplete and is used to iterate over the raw logs and unpacked data for RegistrationComplete events raised by the IETHDKGEvents contract.
type IETHDKGEventsRegistrationCompleteIterator struct {
	Event *IETHDKGEventsRegistrationComplete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IETHDKGEventsRegistrationCompleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IETHDKGEventsRegistrationComplete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IETHDKGEventsRegistrationComplete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IETHDKGEventsRegistrationCompleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IETHDKGEventsRegistrationCompleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IETHDKGEventsRegistrationComplete represents a RegistrationComplete event raised by the IETHDKGEvents contract.
type IETHDKGEventsRegistrationComplete struct {
	BlockNumber *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRegistrationComplete is a free log retrieval operation binding the contract event 0x833013b96b786b4eca83baac286920e5e53956c21ff3894f1d9f02e97d6ed764.
//
// Solidity: event RegistrationComplete(uint256 blockNumber)
func (_IETHDKGEvents *IETHDKGEventsFilterer) FilterRegistrationComplete(opts *bind.FilterOpts) (*IETHDKGEventsRegistrationCompleteIterator, error) {

	logs, sub, err := _IETHDKGEvents.contract.FilterLogs(opts, "RegistrationComplete")
	if err != nil {
		return nil, err
	}
	return &IETHDKGEventsRegistrationCompleteIterator{contract: _IETHDKGEvents.contract, event: "RegistrationComplete", logs: logs, sub: sub}, nil
}

// WatchRegistrationComplete is a free log subscription operation binding the contract event 0x833013b96b786b4eca83baac286920e5e53956c21ff3894f1d9f02e97d6ed764.
//
// Solidity: event RegistrationComplete(uint256 blockNumber)
func (_IETHDKGEvents *IETHDKGEventsFilterer) WatchRegistrationComplete(opts *bind.WatchOpts, sink chan<- *IETHDKGEventsRegistrationComplete) (event.Subscription, error) {

	logs, sub, err := _IETHDKGEvents.contract.WatchLogs(opts, "RegistrationComplete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IETHDKGEventsRegistrationComplete)
				if err := _IETHDKGEvents.contract.UnpackLog(event, "RegistrationComplete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegistrationComplete is a log parse operation binding the contract event 0x833013b96b786b4eca83baac286920e5e53956c21ff3894f1d9f02e97d6ed764.
//
// Solidity: event RegistrationComplete(uint256 blockNumber)
func (_IETHDKGEvents *IETHDKGEventsFilterer) ParseRegistrationComplete(log types.Log) (*IETHDKGEventsRegistrationComplete, error) {
	event := new(IETHDKGEventsRegistrationComplete)
	if err := _IETHDKGEvents.contract.UnpackLog(event, "RegistrationComplete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IETHDKGEventsRegistrationOpenedIterator is returned from FilterRegistrationOpened and is used to iterate over the raw logs and unpacked data for RegistrationOpened events raised by the IETHDKGEvents contract.
type IETHDKGEventsRegistrationOpenedIterator struct {
	Event *IETHDKGEventsRegistrationOpened // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IETHDKGEventsRegistrationOpenedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IETHDKGEventsRegistrationOpened)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IETHDKGEventsRegistrationOpened)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IETHDKGEventsRegistrationOpenedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IETHDKGEventsRegistrationOpenedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IETHDKGEventsRegistrationOpened represents a RegistrationOpened event raised by the IETHDKGEvents contract.
type IETHDKGEventsRegistrationOpened struct {
	StartBlock         *big.Int
	NumberValidators   *big.Int
	Nonce              *big.Int
	PhaseLength        *big.Int
	ConfirmationLength *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterRegistrationOpened is a free log retrieval operation binding the contract event 0xbda431b9b63510f1398bf33d700e013315bcba905507078a1780f13ea5b354b9.
//
// Solidity: event RegistrationOpened(uint256 startBlock, uint256 numberValidators, uint256 nonce, uint256 phaseLength, uint256 confirmationLength)
func (_IETHDKGEvents *IETHDKGEventsFilterer) FilterRegistrationOpened(opts *bind.FilterOpts) (*IETHDKGEventsRegistrationOpenedIterator, error) {

	logs, sub, err := _IETHDKGEvents.contract.FilterLogs(opts, "RegistrationOpened")
	if err != nil {
		return nil, err
	}
	return &IETHDKGEventsRegistrationOpenedIterator{contract: _IETHDKGEvents.contract, event: "RegistrationOpened", logs: logs, sub: sub}, nil
}

// WatchRegistrationOpened is a free log subscription operation binding the contract event 0xbda431b9b63510f1398bf33d700e013315bcba905507078a1780f13ea5b354b9.
//
// Solidity: event RegistrationOpened(uint256 startBlock, uint256 numberValidators, uint256 nonce, uint256 phaseLength, uint256 confirmationLength)
func (_IETHDKGEvents *IETHDKGEventsFilterer) WatchRegistrationOpened(opts *bind.WatchOpts, sink chan<- *IETHDKGEventsRegistrationOpened) (event.Subscription, error) {

	logs, sub, err := _IETHDKGEvents.contract.WatchLogs(opts, "RegistrationOpened")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IETHDKGEventsRegistrationOpened)
				if err := _IETHDKGEvents.contract.UnpackLog(event, "RegistrationOpened", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegistrationOpened is a log parse operation binding the contract event 0xbda431b9b63510f1398bf33d700e013315bcba905507078a1780f13ea5b354b9.
//
// Solidity: event RegistrationOpened(uint256 startBlock, uint256 numberValidators, uint256 nonce, uint256 phaseLength, uint256 confirmationLength)
func (_IETHDKGEvents *IETHDKGEventsFilterer) ParseRegistrationOpened(log types.Log) (*IETHDKGEventsRegistrationOpened, error) {
	event := new(IETHDKGEventsRegistrationOpened)
	if err := _IETHDKGEvents.contract.UnpackLog(event, "RegistrationOpened", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IETHDKGEventsShareDistributionCompleteIterator is returned from FilterShareDistributionComplete and is used to iterate over the raw logs and unpacked data for ShareDistributionComplete events raised by the IETHDKGEvents contract.
type IETHDKGEventsShareDistributionCompleteIterator struct {
	Event *IETHDKGEventsShareDistributionComplete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IETHDKGEventsShareDistributionCompleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IETHDKGEventsShareDistributionComplete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IETHDKGEventsShareDistributionComplete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IETHDKGEventsShareDistributionCompleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IETHDKGEventsShareDistributionCompleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IETHDKGEventsShareDistributionComplete represents a ShareDistributionComplete event raised by the IETHDKGEvents contract.
type IETHDKGEventsShareDistributionComplete struct {
	BlockNumber *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterShareDistributionComplete is a free log retrieval operation binding the contract event 0xbfe94ffef5ddde4d25ac7b652f3f67686ea63f9badbfe1f25451e26fc262d11c.
//
// Solidity: event ShareDistributionComplete(uint256 blockNumber)
func (_IETHDKGEvents *IETHDKGEventsFilterer) FilterShareDistributionComplete(opts *bind.FilterOpts) (*IETHDKGEventsShareDistributionCompleteIterator, error) {

	logs, sub, err := _IETHDKGEvents.contract.FilterLogs(opts, "ShareDistributionComplete")
	if err != nil {
		return nil, err
	}
	return &IETHDKGEventsShareDistributionCompleteIterator{contract: _IETHDKGEvents.contract, event: "ShareDistributionComplete", logs: logs, sub: sub}, nil
}

// WatchShareDistributionComplete is a free log subscription operation binding the contract event 0xbfe94ffef5ddde4d25ac7b652f3f67686ea63f9badbfe1f25451e26fc262d11c.
//
// Solidity: event ShareDistributionComplete(uint256 blockNumber)
func (_IETHDKGEvents *IETHDKGEventsFilterer) WatchShareDistributionComplete(opts *bind.WatchOpts, sink chan<- *IETHDKGEventsShareDistributionComplete) (event.Subscription, error) {

	logs, sub, err := _IETHDKGEvents.contract.WatchLogs(opts, "ShareDistributionComplete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IETHDKGEventsShareDistributionComplete)
				if err := _IETHDKGEvents.contract.UnpackLog(event, "ShareDistributionComplete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseShareDistributionComplete is a log parse operation binding the contract event 0xbfe94ffef5ddde4d25ac7b652f3f67686ea63f9badbfe1f25451e26fc262d11c.
//
// Solidity: event ShareDistributionComplete(uint256 blockNumber)
func (_IETHDKGEvents *IETHDKGEventsFilterer) ParseShareDistributionComplete(log types.Log) (*IETHDKGEventsShareDistributionComplete, error) {
	event := new(IETHDKGEventsShareDistributionComplete)
	if err := _IETHDKGEvents.contract.UnpackLog(event, "ShareDistributionComplete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IETHDKGEventsSharesDistributedIterator is returned from FilterSharesDistributed and is used to iterate over the raw logs and unpacked data for SharesDistributed events raised by the IETHDKGEvents contract.
type IETHDKGEventsSharesDistributedIterator struct {
	Event *IETHDKGEventsSharesDistributed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IETHDKGEventsSharesDistributedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IETHDKGEventsSharesDistributed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IETHDKGEventsSharesDistributed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IETHDKGEventsSharesDistributedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IETHDKGEventsSharesDistributedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IETHDKGEventsSharesDistributed represents a SharesDistributed event raised by the IETHDKGEvents contract.
type IETHDKGEventsSharesDistributed struct {
	Account         common.Address
	Index           *big.Int
	Nonce           *big.Int
	EncryptedShares []*big.Int
	Commitments     [][2]*big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterSharesDistributed is a free log retrieval operation binding the contract event 0xf0c8b0ef2867c2b4639b404a0296b6bbf0bf97e20856af42144a5a6035c0d0d2.
//
// Solidity: event SharesDistributed(address account, uint256 index, uint256 nonce, uint256[] encryptedShares, uint256[2][] commitments)
func (_IETHDKGEvents *IETHDKGEventsFilterer) FilterSharesDistributed(opts *bind.FilterOpts) (*IETHDKGEventsSharesDistributedIterator, error) {

	logs, sub, err := _IETHDKGEvents.contract.FilterLogs(opts, "SharesDistributed")
	if err != nil {
		return nil, err
	}
	return &IETHDKGEventsSharesDistributedIterator{contract: _IETHDKGEvents.contract, event: "SharesDistributed", logs: logs, sub: sub}, nil
}

// WatchSharesDistributed is a free log subscription operation binding the contract event 0xf0c8b0ef2867c2b4639b404a0296b6bbf0bf97e20856af42144a5a6035c0d0d2.
//
// Solidity: event SharesDistributed(address account, uint256 index, uint256 nonce, uint256[] encryptedShares, uint256[2][] commitments)
func (_IETHDKGEvents *IETHDKGEventsFilterer) WatchSharesDistributed(opts *bind.WatchOpts, sink chan<- *IETHDKGEventsSharesDistributed) (event.Subscription, error) {

	logs, sub, err := _IETHDKGEvents.contract.WatchLogs(opts, "SharesDistributed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IETHDKGEventsSharesDistributed)
				if err := _IETHDKGEvents.contract.UnpackLog(event, "SharesDistributed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSharesDistributed is a log parse operation binding the contract event 0xf0c8b0ef2867c2b4639b404a0296b6bbf0bf97e20856af42144a5a6035c0d0d2.
//
// Solidity: event SharesDistributed(address account, uint256 index, uint256 nonce, uint256[] encryptedShares, uint256[2][] commitments)
func (_IETHDKGEvents *IETHDKGEventsFilterer) ParseSharesDistributed(log types.Log) (*IETHDKGEventsSharesDistributed, error) {
	event := new(IETHDKGEventsSharesDistributed)
	if err := _IETHDKGEvents.contract.UnpackLog(event, "SharesDistributed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IETHDKGEventsValidatorMemberAddedIterator is returned from FilterValidatorMemberAdded and is used to iterate over the raw logs and unpacked data for ValidatorMemberAdded events raised by the IETHDKGEvents contract.
type IETHDKGEventsValidatorMemberAddedIterator struct {
	Event *IETHDKGEventsValidatorMemberAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IETHDKGEventsValidatorMemberAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IETHDKGEventsValidatorMemberAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IETHDKGEventsValidatorMemberAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IETHDKGEventsValidatorMemberAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IETHDKGEventsValidatorMemberAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IETHDKGEventsValidatorMemberAdded represents a ValidatorMemberAdded event raised by the IETHDKGEvents contract.
type IETHDKGEventsValidatorMemberAdded struct {
	Account common.Address
	Index   *big.Int
	Nonce   *big.Int
	Epoch   *big.Int
	Share0  *big.Int
	Share1  *big.Int
	Share2  *big.Int
	Share3  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterValidatorMemberAdded is a free log retrieval operation binding the contract event 0x09b90b08bbc3dbe22e9d2a0bc9c2c7614c7511cd0ad72177727a1e762115bf06.
//
// Solidity: event ValidatorMemberAdded(address account, uint256 index, uint256 nonce, uint256 epoch, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_IETHDKGEvents *IETHDKGEventsFilterer) FilterValidatorMemberAdded(opts *bind.FilterOpts) (*IETHDKGEventsValidatorMemberAddedIterator, error) {

	logs, sub, err := _IETHDKGEvents.contract.FilterLogs(opts, "ValidatorMemberAdded")
	if err != nil {
		return nil, err
	}
	return &IETHDKGEventsValidatorMemberAddedIterator{contract: _IETHDKGEvents.contract, event: "ValidatorMemberAdded", logs: logs, sub: sub}, nil
}

// WatchValidatorMemberAdded is a free log subscription operation binding the contract event 0x09b90b08bbc3dbe22e9d2a0bc9c2c7614c7511cd0ad72177727a1e762115bf06.
//
// Solidity: event ValidatorMemberAdded(address account, uint256 index, uint256 nonce, uint256 epoch, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_IETHDKGEvents *IETHDKGEventsFilterer) WatchValidatorMemberAdded(opts *bind.WatchOpts, sink chan<- *IETHDKGEventsValidatorMemberAdded) (event.Subscription, error) {

	logs, sub, err := _IETHDKGEvents.contract.WatchLogs(opts, "ValidatorMemberAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IETHDKGEventsValidatorMemberAdded)
				if err := _IETHDKGEvents.contract.UnpackLog(event, "ValidatorMemberAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorMemberAdded is a log parse operation binding the contract event 0x09b90b08bbc3dbe22e9d2a0bc9c2c7614c7511cd0ad72177727a1e762115bf06.
//
// Solidity: event ValidatorMemberAdded(address account, uint256 index, uint256 nonce, uint256 epoch, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_IETHDKGEvents *IETHDKGEventsFilterer) ParseValidatorMemberAdded(log types.Log) (*IETHDKGEventsValidatorMemberAdded, error) {
	event := new(IETHDKGEventsValidatorMemberAdded)
	if err := _IETHDKGEvents.contract.UnpackLog(event, "ValidatorMemberAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IETHDKGEventsValidatorSetCompletedIterator is returned from FilterValidatorSetCompleted and is used to iterate over the raw logs and unpacked data for ValidatorSetCompleted events raised by the IETHDKGEvents contract.
type IETHDKGEventsValidatorSetCompletedIterator struct {
	Event *IETHDKGEventsValidatorSetCompleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IETHDKGEventsValidatorSetCompletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IETHDKGEventsValidatorSetCompleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IETHDKGEventsValidatorSetCompleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IETHDKGEventsValidatorSetCompletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IETHDKGEventsValidatorSetCompletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IETHDKGEventsValidatorSetCompleted represents a ValidatorSetCompleted event raised by the IETHDKGEvents contract.
type IETHDKGEventsValidatorSetCompleted struct {
	ValidatorCount *big.Int
	Nonce          *big.Int
	Epoch          *big.Int
	EthHeight      *big.Int
	MadHeight      *big.Int
	GroupKey0      *big.Int
	GroupKey1      *big.Int
	GroupKey2      *big.Int
	GroupKey3      *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterValidatorSetCompleted is a free log retrieval operation binding the contract event 0xd7237b781669fa700ecf77be6cd8fa0f4b98b1a24ac584a9b6b44c509216718a.
//
// Solidity: event ValidatorSetCompleted(uint256 validatorCount, uint256 nonce, uint256 epoch, uint256 ethHeight, uint256 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_IETHDKGEvents *IETHDKGEventsFilterer) FilterValidatorSetCompleted(opts *bind.FilterOpts) (*IETHDKGEventsValidatorSetCompletedIterator, error) {

	logs, sub, err := _IETHDKGEvents.contract.FilterLogs(opts, "ValidatorSetCompleted")
	if err != nil {
		return nil, err
	}
	return &IETHDKGEventsValidatorSetCompletedIterator{contract: _IETHDKGEvents.contract, event: "ValidatorSetCompleted", logs: logs, sub: sub}, nil
}

// WatchValidatorSetCompleted is a free log subscription operation binding the contract event 0xd7237b781669fa700ecf77be6cd8fa0f4b98b1a24ac584a9b6b44c509216718a.
//
// Solidity: event ValidatorSetCompleted(uint256 validatorCount, uint256 nonce, uint256 epoch, uint256 ethHeight, uint256 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_IETHDKGEvents *IETHDKGEventsFilterer) WatchValidatorSetCompleted(opts *bind.WatchOpts, sink chan<- *IETHDKGEventsValidatorSetCompleted) (event.Subscription, error) {

	logs, sub, err := _IETHDKGEvents.contract.WatchLogs(opts, "ValidatorSetCompleted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IETHDKGEventsValidatorSetCompleted)
				if err := _IETHDKGEvents.contract.UnpackLog(event, "ValidatorSetCompleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorSetCompleted is a log parse operation binding the contract event 0xd7237b781669fa700ecf77be6cd8fa0f4b98b1a24ac584a9b6b44c509216718a.
//
// Solidity: event ValidatorSetCompleted(uint256 validatorCount, uint256 nonce, uint256 epoch, uint256 ethHeight, uint256 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_IETHDKGEvents *IETHDKGEventsFilterer) ParseValidatorSetCompleted(log types.Log) (*IETHDKGEventsValidatorSetCompleted, error) {
	event := new(IETHDKGEventsValidatorSetCompleted)
	if err := _IETHDKGEvents.contract.UnpackLog(event, "ValidatorSetCompleted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ISnapshotsMetaData contains all meta data concerning the ISnapshots contract.
var ISnapshotsMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"safeToProceedConsensus\",\"type\":\"bool\"}],\"name\":\"SnapshotTaken\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getBlockClaimsFromLatestSnapshot\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"chainId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"height\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"txCount\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"prevBlock\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"txRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"headerRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structBClaimsParserLibrary.BClaims\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotNumber\",\"type\":\"uint256\"}],\"name\":\"getBlockClaimsFromSnapshot\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"chainId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"height\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"txCount\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"prevBlock\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"txRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"headerRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structBClaimsParserLibrary.BClaims\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainIdFromLatestSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotNumber\",\"type\":\"uint256\"}],\"name\":\"getChainIdFromSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommittedHeightFromLatestSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotNumber\",\"type\":\"uint256\"}],\"name\":\"getCommittedHeightFromSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEpochLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestSnapshot\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"committedAt\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"chainId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"height\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"txCount\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"prevBlock\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"txRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"headerRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structBClaimsParserLibrary.BClaims\",\"name\":\"blockClaims\",\"type\":\"tuple\"},{\"internalType\":\"uint256[2]\",\"name\":\"signature\",\"type\":\"uint256[2]\"}],\"internalType\":\"structISnapshots.Snapshot\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMadnetHeightFromLatestSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotNumber\",\"type\":\"uint256\"}],\"name\":\"getMadnetHeightFromSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSignatureFromLatestSnapshot\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotNumber\",\"type\":\"uint256\"}],\"name\":\"getSignatureFromSnapshot\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotNumber\",\"type\":\"uint256\"}],\"name\":\"getSnapshot\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"committedAt\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"chainId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"height\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"txCount\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"prevBlock\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"txRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"headerRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structBClaimsParserLibrary.BClaims\",\"name\":\"blockClaims\",\"type\":\"tuple\"},{\"internalType\":\"uint256[2]\",\"name\":\"signature\",\"type\":\"uint256[2]\"}],\"internalType\":\"structISnapshots.Snapshot\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSnapshotDesperationDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSnapshotDesperationFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"numValidators\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"myIdx\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"blocksSinceDesperation\",\"type\":\"int256\"},{\"internalType\":\"bytes32\",\"name\":\"blsig\",\"type\":\"bytes32\"},{\"internalType\":\"int256\",\"name\":\"desperationFactor\",\"type\":\"int256\"}],\"name\":\"mayValidatorSnapshot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"epochLength_\",\"type\":\"uint32\"}],\"name\":\"setEpochLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"desperationDelay_\",\"type\":\"uint32\"}],\"name\":\"setSnapshotDesperationDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"desperationFactor_\",\"type\":\"uint32\"}],\"name\":\"setSnapshotDesperationFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signatureGroup_\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"bClaims_\",\"type\":\"bytes\"}],\"name\":\"snapshot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// ISnapshotsABI is the input ABI used to generate the binding from.
// Deprecated: Use ISnapshotsMetaData.ABI instead.
var ISnapshotsABI = ISnapshotsMetaData.ABI

// ISnapshots is an auto generated Go binding around an Ethereum contract.
type ISnapshots struct {
	ISnapshotsCaller     // Read-only binding to the contract
	ISnapshotsTransactor // Write-only binding to the contract
	ISnapshotsFilterer   // Log filterer for contract events
}

// ISnapshotsCaller is an auto generated read-only Go binding around an Ethereum contract.
type ISnapshotsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ISnapshotsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ISnapshotsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ISnapshotsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ISnapshotsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ISnapshotsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ISnapshotsSession struct {
	Contract     *ISnapshots       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ISnapshotsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ISnapshotsCallerSession struct {
	Contract *ISnapshotsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// ISnapshotsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ISnapshotsTransactorSession struct {
	Contract     *ISnapshotsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// ISnapshotsRaw is an auto generated low-level Go binding around an Ethereum contract.
type ISnapshotsRaw struct {
	Contract *ISnapshots // Generic contract binding to access the raw methods on
}

// ISnapshotsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ISnapshotsCallerRaw struct {
	Contract *ISnapshotsCaller // Generic read-only contract binding to access the raw methods on
}

// ISnapshotsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ISnapshotsTransactorRaw struct {
	Contract *ISnapshotsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewISnapshots creates a new instance of ISnapshots, bound to a specific deployed contract.
func NewISnapshots(address common.Address, backend bind.ContractBackend) (*ISnapshots, error) {
	contract, err := bindISnapshots(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ISnapshots{ISnapshotsCaller: ISnapshotsCaller{contract: contract}, ISnapshotsTransactor: ISnapshotsTransactor{contract: contract}, ISnapshotsFilterer: ISnapshotsFilterer{contract: contract}}, nil
}

// NewISnapshotsCaller creates a new read-only instance of ISnapshots, bound to a specific deployed contract.
func NewISnapshotsCaller(address common.Address, caller bind.ContractCaller) (*ISnapshotsCaller, error) {
	contract, err := bindISnapshots(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ISnapshotsCaller{contract: contract}, nil
}

// NewISnapshotsTransactor creates a new write-only instance of ISnapshots, bound to a specific deployed contract.
func NewISnapshotsTransactor(address common.Address, transactor bind.ContractTransactor) (*ISnapshotsTransactor, error) {
	contract, err := bindISnapshots(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ISnapshotsTransactor{contract: contract}, nil
}

// NewISnapshotsFilterer creates a new log filterer instance of ISnapshots, bound to a specific deployed contract.
func NewISnapshotsFilterer(address common.Address, filterer bind.ContractFilterer) (*ISnapshotsFilterer, error) {
	contract, err := bindISnapshots(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ISnapshotsFilterer{contract: contract}, nil
}

// bindISnapshots binds a generic wrapper to an already deployed contract.
func bindISnapshots(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ISnapshotsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ISnapshots *ISnapshotsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ISnapshots.Contract.ISnapshotsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ISnapshots *ISnapshotsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ISnapshots.Contract.ISnapshotsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ISnapshots *ISnapshotsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ISnapshots.Contract.ISnapshotsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ISnapshots *ISnapshotsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ISnapshots.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ISnapshots *ISnapshotsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ISnapshots.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ISnapshots *ISnapshotsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ISnapshots.Contract.contract.Transact(opts, method, params...)
}

// GetBlockClaimsFromLatestSnapshot is a free data retrieval call binding the contract method 0xc2ea6603.
//
// Solidity: function getBlockClaimsFromLatestSnapshot() view returns((uint32,uint32,uint32,bytes32,bytes32,bytes32,bytes32))
func (_ISnapshots *ISnapshotsCaller) GetBlockClaimsFromLatestSnapshot(opts *bind.CallOpts) (BClaimsParserLibraryBClaims, error) {
	var out []interface{}
	err := _ISnapshots.contract.Call(opts, &out, "getBlockClaimsFromLatestSnapshot")

	if err != nil {
		return *new(BClaimsParserLibraryBClaims), err
	}

	out0 := *abi.ConvertType(out[0], new(BClaimsParserLibraryBClaims)).(*BClaimsParserLibraryBClaims)

	return out0, err

}

// GetBlockClaimsFromLatestSnapshot is a free data retrieval call binding the contract method 0xc2ea6603.
//
// Solidity: function getBlockClaimsFromLatestSnapshot() view returns((uint32,uint32,uint32,bytes32,bytes32,bytes32,bytes32))
func (_ISnapshots *ISnapshotsSession) GetBlockClaimsFromLatestSnapshot() (BClaimsParserLibraryBClaims, error) {
	return _ISnapshots.Contract.GetBlockClaimsFromLatestSnapshot(&_ISnapshots.CallOpts)
}

// GetBlockClaimsFromLatestSnapshot is a free data retrieval call binding the contract method 0xc2ea6603.
//
// Solidity: function getBlockClaimsFromLatestSnapshot() view returns((uint32,uint32,uint32,bytes32,bytes32,bytes32,bytes32))
func (_ISnapshots *ISnapshotsCallerSession) GetBlockClaimsFromLatestSnapshot() (BClaimsParserLibraryBClaims, error) {
	return _ISnapshots.Contract.GetBlockClaimsFromLatestSnapshot(&_ISnapshots.CallOpts)
}

// GetBlockClaimsFromSnapshot is a free data retrieval call binding the contract method 0x45dfc599.
//
// Solidity: function getBlockClaimsFromSnapshot(uint256 snapshotNumber) view returns((uint32,uint32,uint32,bytes32,bytes32,bytes32,bytes32))
func (_ISnapshots *ISnapshotsCaller) GetBlockClaimsFromSnapshot(opts *bind.CallOpts, snapshotNumber *big.Int) (BClaimsParserLibraryBClaims, error) {
	var out []interface{}
	err := _ISnapshots.contract.Call(opts, &out, "getBlockClaimsFromSnapshot", snapshotNumber)

	if err != nil {
		return *new(BClaimsParserLibraryBClaims), err
	}

	out0 := *abi.ConvertType(out[0], new(BClaimsParserLibraryBClaims)).(*BClaimsParserLibraryBClaims)

	return out0, err

}

// GetBlockClaimsFromSnapshot is a free data retrieval call binding the contract method 0x45dfc599.
//
// Solidity: function getBlockClaimsFromSnapshot(uint256 snapshotNumber) view returns((uint32,uint32,uint32,bytes32,bytes32,bytes32,bytes32))
func (_ISnapshots *ISnapshotsSession) GetBlockClaimsFromSnapshot(snapshotNumber *big.Int) (BClaimsParserLibraryBClaims, error) {
	return _ISnapshots.Contract.GetBlockClaimsFromSnapshot(&_ISnapshots.CallOpts, snapshotNumber)
}

// GetBlockClaimsFromSnapshot is a free data retrieval call binding the contract method 0x45dfc599.
//
// Solidity: function getBlockClaimsFromSnapshot(uint256 snapshotNumber) view returns((uint32,uint32,uint32,bytes32,bytes32,bytes32,bytes32))
func (_ISnapshots *ISnapshotsCallerSession) GetBlockClaimsFromSnapshot(snapshotNumber *big.Int) (BClaimsParserLibraryBClaims, error) {
	return _ISnapshots.Contract.GetBlockClaimsFromSnapshot(&_ISnapshots.CallOpts, snapshotNumber)
}

// GetChainId is a free data retrieval call binding the contract method 0x3408e470.
//
// Solidity: function getChainId() view returns(uint256)
func (_ISnapshots *ISnapshotsCaller) GetChainId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ISnapshots.contract.Call(opts, &out, "getChainId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetChainId is a free data retrieval call binding the contract method 0x3408e470.
//
// Solidity: function getChainId() view returns(uint256)
func (_ISnapshots *ISnapshotsSession) GetChainId() (*big.Int, error) {
	return _ISnapshots.Contract.GetChainId(&_ISnapshots.CallOpts)
}

// GetChainId is a free data retrieval call binding the contract method 0x3408e470.
//
// Solidity: function getChainId() view returns(uint256)
func (_ISnapshots *ISnapshotsCallerSession) GetChainId() (*big.Int, error) {
	return _ISnapshots.Contract.GetChainId(&_ISnapshots.CallOpts)
}

// GetChainIdFromLatestSnapshot is a free data retrieval call binding the contract method 0xd9c11657.
//
// Solidity: function getChainIdFromLatestSnapshot() view returns(uint256)
func (_ISnapshots *ISnapshotsCaller) GetChainIdFromLatestSnapshot(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ISnapshots.contract.Call(opts, &out, "getChainIdFromLatestSnapshot")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetChainIdFromLatestSnapshot is a free data retrieval call binding the contract method 0xd9c11657.
//
// Solidity: function getChainIdFromLatestSnapshot() view returns(uint256)
func (_ISnapshots *ISnapshotsSession) GetChainIdFromLatestSnapshot() (*big.Int, error) {
	return _ISnapshots.Contract.GetChainIdFromLatestSnapshot(&_ISnapshots.CallOpts)
}

// GetChainIdFromLatestSnapshot is a free data retrieval call binding the contract method 0xd9c11657.
//
// Solidity: function getChainIdFromLatestSnapshot() view returns(uint256)
func (_ISnapshots *ISnapshotsCallerSession) GetChainIdFromLatestSnapshot() (*big.Int, error) {
	return _ISnapshots.Contract.GetChainIdFromLatestSnapshot(&_ISnapshots.CallOpts)
}

// GetChainIdFromSnapshot is a free data retrieval call binding the contract method 0x19f74669.
//
// Solidity: function getChainIdFromSnapshot(uint256 snapshotNumber) view returns(uint256)
func (_ISnapshots *ISnapshotsCaller) GetChainIdFromSnapshot(opts *bind.CallOpts, snapshotNumber *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ISnapshots.contract.Call(opts, &out, "getChainIdFromSnapshot", snapshotNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetChainIdFromSnapshot is a free data retrieval call binding the contract method 0x19f74669.
//
// Solidity: function getChainIdFromSnapshot(uint256 snapshotNumber) view returns(uint256)
func (_ISnapshots *ISnapshotsSession) GetChainIdFromSnapshot(snapshotNumber *big.Int) (*big.Int, error) {
	return _ISnapshots.Contract.GetChainIdFromSnapshot(&_ISnapshots.CallOpts, snapshotNumber)
}

// GetChainIdFromSnapshot is a free data retrieval call binding the contract method 0x19f74669.
//
// Solidity: function getChainIdFromSnapshot(uint256 snapshotNumber) view returns(uint256)
func (_ISnapshots *ISnapshotsCallerSession) GetChainIdFromSnapshot(snapshotNumber *big.Int) (*big.Int, error) {
	return _ISnapshots.Contract.GetChainIdFromSnapshot(&_ISnapshots.CallOpts, snapshotNumber)
}

// GetCommittedHeightFromLatestSnapshot is a free data retrieval call binding the contract method 0x026c2b7e.
//
// Solidity: function getCommittedHeightFromLatestSnapshot() view returns(uint256)
func (_ISnapshots *ISnapshotsCaller) GetCommittedHeightFromLatestSnapshot(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ISnapshots.contract.Call(opts, &out, "getCommittedHeightFromLatestSnapshot")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCommittedHeightFromLatestSnapshot is a free data retrieval call binding the contract method 0x026c2b7e.
//
// Solidity: function getCommittedHeightFromLatestSnapshot() view returns(uint256)
func (_ISnapshots *ISnapshotsSession) GetCommittedHeightFromLatestSnapshot() (*big.Int, error) {
	return _ISnapshots.Contract.GetCommittedHeightFromLatestSnapshot(&_ISnapshots.CallOpts)
}

// GetCommittedHeightFromLatestSnapshot is a free data retrieval call binding the contract method 0x026c2b7e.
//
// Solidity: function getCommittedHeightFromLatestSnapshot() view returns(uint256)
func (_ISnapshots *ISnapshotsCallerSession) GetCommittedHeightFromLatestSnapshot() (*big.Int, error) {
	return _ISnapshots.Contract.GetCommittedHeightFromLatestSnapshot(&_ISnapshots.CallOpts)
}

// GetCommittedHeightFromSnapshot is a free data retrieval call binding the contract method 0xe18c697a.
//
// Solidity: function getCommittedHeightFromSnapshot(uint256 snapshotNumber) view returns(uint256)
func (_ISnapshots *ISnapshotsCaller) GetCommittedHeightFromSnapshot(opts *bind.CallOpts, snapshotNumber *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ISnapshots.contract.Call(opts, &out, "getCommittedHeightFromSnapshot", snapshotNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCommittedHeightFromSnapshot is a free data retrieval call binding the contract method 0xe18c697a.
//
// Solidity: function getCommittedHeightFromSnapshot(uint256 snapshotNumber) view returns(uint256)
func (_ISnapshots *ISnapshotsSession) GetCommittedHeightFromSnapshot(snapshotNumber *big.Int) (*big.Int, error) {
	return _ISnapshots.Contract.GetCommittedHeightFromSnapshot(&_ISnapshots.CallOpts, snapshotNumber)
}

// GetCommittedHeightFromSnapshot is a free data retrieval call binding the contract method 0xe18c697a.
//
// Solidity: function getCommittedHeightFromSnapshot(uint256 snapshotNumber) view returns(uint256)
func (_ISnapshots *ISnapshotsCallerSession) GetCommittedHeightFromSnapshot(snapshotNumber *big.Int) (*big.Int, error) {
	return _ISnapshots.Contract.GetCommittedHeightFromSnapshot(&_ISnapshots.CallOpts, snapshotNumber)
}

// GetEpoch is a free data retrieval call binding the contract method 0x757991a8.
//
// Solidity: function getEpoch() view returns(uint256)
func (_ISnapshots *ISnapshotsCaller) GetEpoch(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ISnapshots.contract.Call(opts, &out, "getEpoch")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetEpoch is a free data retrieval call binding the contract method 0x757991a8.
//
// Solidity: function getEpoch() view returns(uint256)
func (_ISnapshots *ISnapshotsSession) GetEpoch() (*big.Int, error) {
	return _ISnapshots.Contract.GetEpoch(&_ISnapshots.CallOpts)
}

// GetEpoch is a free data retrieval call binding the contract method 0x757991a8.
//
// Solidity: function getEpoch() view returns(uint256)
func (_ISnapshots *ISnapshotsCallerSession) GetEpoch() (*big.Int, error) {
	return _ISnapshots.Contract.GetEpoch(&_ISnapshots.CallOpts)
}

// GetEpochLength is a free data retrieval call binding the contract method 0xcfe8a73b.
//
// Solidity: function getEpochLength() view returns(uint256)
func (_ISnapshots *ISnapshotsCaller) GetEpochLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ISnapshots.contract.Call(opts, &out, "getEpochLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetEpochLength is a free data retrieval call binding the contract method 0xcfe8a73b.
//
// Solidity: function getEpochLength() view returns(uint256)
func (_ISnapshots *ISnapshotsSession) GetEpochLength() (*big.Int, error) {
	return _ISnapshots.Contract.GetEpochLength(&_ISnapshots.CallOpts)
}

// GetEpochLength is a free data retrieval call binding the contract method 0xcfe8a73b.
//
// Solidity: function getEpochLength() view returns(uint256)
func (_ISnapshots *ISnapshotsCallerSession) GetEpochLength() (*big.Int, error) {
	return _ISnapshots.Contract.GetEpochLength(&_ISnapshots.CallOpts)
}

// GetLatestSnapshot is a free data retrieval call binding the contract method 0xd518f243.
//
// Solidity: function getLatestSnapshot() view returns((uint256,(uint32,uint32,uint32,bytes32,bytes32,bytes32,bytes32),uint256[2]))
func (_ISnapshots *ISnapshotsCaller) GetLatestSnapshot(opts *bind.CallOpts) (ISnapshotsSnapshot, error) {
	var out []interface{}
	err := _ISnapshots.contract.Call(opts, &out, "getLatestSnapshot")

	if err != nil {
		return *new(ISnapshotsSnapshot), err
	}

	out0 := *abi.ConvertType(out[0], new(ISnapshotsSnapshot)).(*ISnapshotsSnapshot)

	return out0, err

}

// GetLatestSnapshot is a free data retrieval call binding the contract method 0xd518f243.
//
// Solidity: function getLatestSnapshot() view returns((uint256,(uint32,uint32,uint32,bytes32,bytes32,bytes32,bytes32),uint256[2]))
func (_ISnapshots *ISnapshotsSession) GetLatestSnapshot() (ISnapshotsSnapshot, error) {
	return _ISnapshots.Contract.GetLatestSnapshot(&_ISnapshots.CallOpts)
}

// GetLatestSnapshot is a free data retrieval call binding the contract method 0xd518f243.
//
// Solidity: function getLatestSnapshot() view returns((uint256,(uint32,uint32,uint32,bytes32,bytes32,bytes32,bytes32),uint256[2]))
func (_ISnapshots *ISnapshotsCallerSession) GetLatestSnapshot() (ISnapshotsSnapshot, error) {
	return _ISnapshots.Contract.GetLatestSnapshot(&_ISnapshots.CallOpts)
}

// GetMadnetHeightFromLatestSnapshot is a free data retrieval call binding the contract method 0x9c262671.
//
// Solidity: function getMadnetHeightFromLatestSnapshot() view returns(uint256)
func (_ISnapshots *ISnapshotsCaller) GetMadnetHeightFromLatestSnapshot(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ISnapshots.contract.Call(opts, &out, "getMadnetHeightFromLatestSnapshot")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMadnetHeightFromLatestSnapshot is a free data retrieval call binding the contract method 0x9c262671.
//
// Solidity: function getMadnetHeightFromLatestSnapshot() view returns(uint256)
func (_ISnapshots *ISnapshotsSession) GetMadnetHeightFromLatestSnapshot() (*big.Int, error) {
	return _ISnapshots.Contract.GetMadnetHeightFromLatestSnapshot(&_ISnapshots.CallOpts)
}

// GetMadnetHeightFromLatestSnapshot is a free data retrieval call binding the contract method 0x9c262671.
//
// Solidity: function getMadnetHeightFromLatestSnapshot() view returns(uint256)
func (_ISnapshots *ISnapshotsCallerSession) GetMadnetHeightFromLatestSnapshot() (*big.Int, error) {
	return _ISnapshots.Contract.GetMadnetHeightFromLatestSnapshot(&_ISnapshots.CallOpts)
}

// GetMadnetHeightFromSnapshot is a free data retrieval call binding the contract method 0xa8c07fc3.
//
// Solidity: function getMadnetHeightFromSnapshot(uint256 snapshotNumber) view returns(uint256)
func (_ISnapshots *ISnapshotsCaller) GetMadnetHeightFromSnapshot(opts *bind.CallOpts, snapshotNumber *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ISnapshots.contract.Call(opts, &out, "getMadnetHeightFromSnapshot", snapshotNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMadnetHeightFromSnapshot is a free data retrieval call binding the contract method 0xa8c07fc3.
//
// Solidity: function getMadnetHeightFromSnapshot(uint256 snapshotNumber) view returns(uint256)
func (_ISnapshots *ISnapshotsSession) GetMadnetHeightFromSnapshot(snapshotNumber *big.Int) (*big.Int, error) {
	return _ISnapshots.Contract.GetMadnetHeightFromSnapshot(&_ISnapshots.CallOpts, snapshotNumber)
}

// GetMadnetHeightFromSnapshot is a free data retrieval call binding the contract method 0xa8c07fc3.
//
// Solidity: function getMadnetHeightFromSnapshot(uint256 snapshotNumber) view returns(uint256)
func (_ISnapshots *ISnapshotsCallerSession) GetMadnetHeightFromSnapshot(snapshotNumber *big.Int) (*big.Int, error) {
	return _ISnapshots.Contract.GetMadnetHeightFromSnapshot(&_ISnapshots.CallOpts, snapshotNumber)
}

// GetSignatureFromLatestSnapshot is a free data retrieval call binding the contract method 0xc0804ea9.
//
// Solidity: function getSignatureFromLatestSnapshot() view returns(uint256[2])
func (_ISnapshots *ISnapshotsCaller) GetSignatureFromLatestSnapshot(opts *bind.CallOpts) ([2]*big.Int, error) {
	var out []interface{}
	err := _ISnapshots.contract.Call(opts, &out, "getSignatureFromLatestSnapshot")

	if err != nil {
		return *new([2]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([2]*big.Int)).(*[2]*big.Int)

	return out0, err

}

// GetSignatureFromLatestSnapshot is a free data retrieval call binding the contract method 0xc0804ea9.
//
// Solidity: function getSignatureFromLatestSnapshot() view returns(uint256[2])
func (_ISnapshots *ISnapshotsSession) GetSignatureFromLatestSnapshot() ([2]*big.Int, error) {
	return _ISnapshots.Contract.GetSignatureFromLatestSnapshot(&_ISnapshots.CallOpts)
}

// GetSignatureFromLatestSnapshot is a free data retrieval call binding the contract method 0xc0804ea9.
//
// Solidity: function getSignatureFromLatestSnapshot() view returns(uint256[2])
func (_ISnapshots *ISnapshotsCallerSession) GetSignatureFromLatestSnapshot() ([2]*big.Int, error) {
	return _ISnapshots.Contract.GetSignatureFromLatestSnapshot(&_ISnapshots.CallOpts)
}

// GetSignatureFromSnapshot is a free data retrieval call binding the contract method 0xdbe7eae7.
//
// Solidity: function getSignatureFromSnapshot(uint256 snapshotNumber) view returns(uint256[2])
func (_ISnapshots *ISnapshotsCaller) GetSignatureFromSnapshot(opts *bind.CallOpts, snapshotNumber *big.Int) ([2]*big.Int, error) {
	var out []interface{}
	err := _ISnapshots.contract.Call(opts, &out, "getSignatureFromSnapshot", snapshotNumber)

	if err != nil {
		return *new([2]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([2]*big.Int)).(*[2]*big.Int)

	return out0, err

}

// GetSignatureFromSnapshot is a free data retrieval call binding the contract method 0xdbe7eae7.
//
// Solidity: function getSignatureFromSnapshot(uint256 snapshotNumber) view returns(uint256[2])
func (_ISnapshots *ISnapshotsSession) GetSignatureFromSnapshot(snapshotNumber *big.Int) ([2]*big.Int, error) {
	return _ISnapshots.Contract.GetSignatureFromSnapshot(&_ISnapshots.CallOpts, snapshotNumber)
}

// GetSignatureFromSnapshot is a free data retrieval call binding the contract method 0xdbe7eae7.
//
// Solidity: function getSignatureFromSnapshot(uint256 snapshotNumber) view returns(uint256[2])
func (_ISnapshots *ISnapshotsCallerSession) GetSignatureFromSnapshot(snapshotNumber *big.Int) ([2]*big.Int, error) {
	return _ISnapshots.Contract.GetSignatureFromSnapshot(&_ISnapshots.CallOpts, snapshotNumber)
}

// GetSnapshot is a free data retrieval call binding the contract method 0x76f10ad0.
//
// Solidity: function getSnapshot(uint256 snapshotNumber) view returns((uint256,(uint32,uint32,uint32,bytes32,bytes32,bytes32,bytes32),uint256[2]))
func (_ISnapshots *ISnapshotsCaller) GetSnapshot(opts *bind.CallOpts, snapshotNumber *big.Int) (ISnapshotsSnapshot, error) {
	var out []interface{}
	err := _ISnapshots.contract.Call(opts, &out, "getSnapshot", snapshotNumber)

	if err != nil {
		return *new(ISnapshotsSnapshot), err
	}

	out0 := *abi.ConvertType(out[0], new(ISnapshotsSnapshot)).(*ISnapshotsSnapshot)

	return out0, err

}

// GetSnapshot is a free data retrieval call binding the contract method 0x76f10ad0.
//
// Solidity: function getSnapshot(uint256 snapshotNumber) view returns((uint256,(uint32,uint32,uint32,bytes32,bytes32,bytes32,bytes32),uint256[2]))
func (_ISnapshots *ISnapshotsSession) GetSnapshot(snapshotNumber *big.Int) (ISnapshotsSnapshot, error) {
	return _ISnapshots.Contract.GetSnapshot(&_ISnapshots.CallOpts, snapshotNumber)
}

// GetSnapshot is a free data retrieval call binding the contract method 0x76f10ad0.
//
// Solidity: function getSnapshot(uint256 snapshotNumber) view returns((uint256,(uint32,uint32,uint32,bytes32,bytes32,bytes32,bytes32),uint256[2]))
func (_ISnapshots *ISnapshotsCallerSession) GetSnapshot(snapshotNumber *big.Int) (ISnapshotsSnapshot, error) {
	return _ISnapshots.Contract.GetSnapshot(&_ISnapshots.CallOpts, snapshotNumber)
}

// GetSnapshotDesperationDelay is a free data retrieval call binding the contract method 0xd17fcc56.
//
// Solidity: function getSnapshotDesperationDelay() view returns(uint256)
func (_ISnapshots *ISnapshotsCaller) GetSnapshotDesperationDelay(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ISnapshots.contract.Call(opts, &out, "getSnapshotDesperationDelay")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetSnapshotDesperationDelay is a free data retrieval call binding the contract method 0xd17fcc56.
//
// Solidity: function getSnapshotDesperationDelay() view returns(uint256)
func (_ISnapshots *ISnapshotsSession) GetSnapshotDesperationDelay() (*big.Int, error) {
	return _ISnapshots.Contract.GetSnapshotDesperationDelay(&_ISnapshots.CallOpts)
}

// GetSnapshotDesperationDelay is a free data retrieval call binding the contract method 0xd17fcc56.
//
// Solidity: function getSnapshotDesperationDelay() view returns(uint256)
func (_ISnapshots *ISnapshotsCallerSession) GetSnapshotDesperationDelay() (*big.Int, error) {
	return _ISnapshots.Contract.GetSnapshotDesperationDelay(&_ISnapshots.CallOpts)
}

// GetSnapshotDesperationFactor is a free data retrieval call binding the contract method 0x7cc4cce6.
//
// Solidity: function getSnapshotDesperationFactor() view returns(uint256)
func (_ISnapshots *ISnapshotsCaller) GetSnapshotDesperationFactor(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ISnapshots.contract.Call(opts, &out, "getSnapshotDesperationFactor")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetSnapshotDesperationFactor is a free data retrieval call binding the contract method 0x7cc4cce6.
//
// Solidity: function getSnapshotDesperationFactor() view returns(uint256)
func (_ISnapshots *ISnapshotsSession) GetSnapshotDesperationFactor() (*big.Int, error) {
	return _ISnapshots.Contract.GetSnapshotDesperationFactor(&_ISnapshots.CallOpts)
}

// GetSnapshotDesperationFactor is a free data retrieval call binding the contract method 0x7cc4cce6.
//
// Solidity: function getSnapshotDesperationFactor() view returns(uint256)
func (_ISnapshots *ISnapshotsCallerSession) GetSnapshotDesperationFactor() (*big.Int, error) {
	return _ISnapshots.Contract.GetSnapshotDesperationFactor(&_ISnapshots.CallOpts)
}

// MayValidatorSnapshot is a free data retrieval call binding the contract method 0x3ff33f9d.
//
// Solidity: function mayValidatorSnapshot(int256 numValidators, int256 myIdx, int256 blocksSinceDesperation, bytes32 blsig, int256 desperationFactor) pure returns(bool)
func (_ISnapshots *ISnapshotsCaller) MayValidatorSnapshot(opts *bind.CallOpts, numValidators *big.Int, myIdx *big.Int, blocksSinceDesperation *big.Int, blsig [32]byte, desperationFactor *big.Int) (bool, error) {
	var out []interface{}
	err := _ISnapshots.contract.Call(opts, &out, "mayValidatorSnapshot", numValidators, myIdx, blocksSinceDesperation, blsig, desperationFactor)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// MayValidatorSnapshot is a free data retrieval call binding the contract method 0x3ff33f9d.
//
// Solidity: function mayValidatorSnapshot(int256 numValidators, int256 myIdx, int256 blocksSinceDesperation, bytes32 blsig, int256 desperationFactor) pure returns(bool)
func (_ISnapshots *ISnapshotsSession) MayValidatorSnapshot(numValidators *big.Int, myIdx *big.Int, blocksSinceDesperation *big.Int, blsig [32]byte, desperationFactor *big.Int) (bool, error) {
	return _ISnapshots.Contract.MayValidatorSnapshot(&_ISnapshots.CallOpts, numValidators, myIdx, blocksSinceDesperation, blsig, desperationFactor)
}

// MayValidatorSnapshot is a free data retrieval call binding the contract method 0x3ff33f9d.
//
// Solidity: function mayValidatorSnapshot(int256 numValidators, int256 myIdx, int256 blocksSinceDesperation, bytes32 blsig, int256 desperationFactor) pure returns(bool)
func (_ISnapshots *ISnapshotsCallerSession) MayValidatorSnapshot(numValidators *big.Int, myIdx *big.Int, blocksSinceDesperation *big.Int, blsig [32]byte, desperationFactor *big.Int) (bool, error) {
	return _ISnapshots.Contract.MayValidatorSnapshot(&_ISnapshots.CallOpts, numValidators, myIdx, blocksSinceDesperation, blsig, desperationFactor)
}

// SetEpochLength is a paid mutator transaction binding the contract method 0xdeb1e56e.
//
// Solidity: function setEpochLength(uint32 epochLength_) returns()
func (_ISnapshots *ISnapshotsTransactor) SetEpochLength(opts *bind.TransactOpts, epochLength_ uint32) (*types.Transaction, error) {
	return _ISnapshots.contract.Transact(opts, "setEpochLength", epochLength_)
}

// SetEpochLength is a paid mutator transaction binding the contract method 0xdeb1e56e.
//
// Solidity: function setEpochLength(uint32 epochLength_) returns()
func (_ISnapshots *ISnapshotsSession) SetEpochLength(epochLength_ uint32) (*types.Transaction, error) {
	return _ISnapshots.Contract.SetEpochLength(&_ISnapshots.TransactOpts, epochLength_)
}

// SetEpochLength is a paid mutator transaction binding the contract method 0xdeb1e56e.
//
// Solidity: function setEpochLength(uint32 epochLength_) returns()
func (_ISnapshots *ISnapshotsTransactorSession) SetEpochLength(epochLength_ uint32) (*types.Transaction, error) {
	return _ISnapshots.Contract.SetEpochLength(&_ISnapshots.TransactOpts, epochLength_)
}

// SetSnapshotDesperationDelay is a paid mutator transaction binding the contract method 0xc2e8fef2.
//
// Solidity: function setSnapshotDesperationDelay(uint32 desperationDelay_) returns()
func (_ISnapshots *ISnapshotsTransactor) SetSnapshotDesperationDelay(opts *bind.TransactOpts, desperationDelay_ uint32) (*types.Transaction, error) {
	return _ISnapshots.contract.Transact(opts, "setSnapshotDesperationDelay", desperationDelay_)
}

// SetSnapshotDesperationDelay is a paid mutator transaction binding the contract method 0xc2e8fef2.
//
// Solidity: function setSnapshotDesperationDelay(uint32 desperationDelay_) returns()
func (_ISnapshots *ISnapshotsSession) SetSnapshotDesperationDelay(desperationDelay_ uint32) (*types.Transaction, error) {
	return _ISnapshots.Contract.SetSnapshotDesperationDelay(&_ISnapshots.TransactOpts, desperationDelay_)
}

// SetSnapshotDesperationDelay is a paid mutator transaction binding the contract method 0xc2e8fef2.
//
// Solidity: function setSnapshotDesperationDelay(uint32 desperationDelay_) returns()
func (_ISnapshots *ISnapshotsTransactorSession) SetSnapshotDesperationDelay(desperationDelay_ uint32) (*types.Transaction, error) {
	return _ISnapshots.Contract.SetSnapshotDesperationDelay(&_ISnapshots.TransactOpts, desperationDelay_)
}

// SetSnapshotDesperationFactor is a paid mutator transaction binding the contract method 0x3fa7a1ad.
//
// Solidity: function setSnapshotDesperationFactor(uint32 desperationFactor_) returns()
func (_ISnapshots *ISnapshotsTransactor) SetSnapshotDesperationFactor(opts *bind.TransactOpts, desperationFactor_ uint32) (*types.Transaction, error) {
	return _ISnapshots.contract.Transact(opts, "setSnapshotDesperationFactor", desperationFactor_)
}

// SetSnapshotDesperationFactor is a paid mutator transaction binding the contract method 0x3fa7a1ad.
//
// Solidity: function setSnapshotDesperationFactor(uint32 desperationFactor_) returns()
func (_ISnapshots *ISnapshotsSession) SetSnapshotDesperationFactor(desperationFactor_ uint32) (*types.Transaction, error) {
	return _ISnapshots.Contract.SetSnapshotDesperationFactor(&_ISnapshots.TransactOpts, desperationFactor_)
}

// SetSnapshotDesperationFactor is a paid mutator transaction binding the contract method 0x3fa7a1ad.
//
// Solidity: function setSnapshotDesperationFactor(uint32 desperationFactor_) returns()
func (_ISnapshots *ISnapshotsTransactorSession) SetSnapshotDesperationFactor(desperationFactor_ uint32) (*types.Transaction, error) {
	return _ISnapshots.Contract.SetSnapshotDesperationFactor(&_ISnapshots.TransactOpts, desperationFactor_)
}

// Snapshot is a paid mutator transaction binding the contract method 0x08ca1f25.
//
// Solidity: function snapshot(bytes signatureGroup_, bytes bClaims_) returns(bool)
func (_ISnapshots *ISnapshotsTransactor) Snapshot(opts *bind.TransactOpts, signatureGroup_ []byte, bClaims_ []byte) (*types.Transaction, error) {
	return _ISnapshots.contract.Transact(opts, "snapshot", signatureGroup_, bClaims_)
}

// Snapshot is a paid mutator transaction binding the contract method 0x08ca1f25.
//
// Solidity: function snapshot(bytes signatureGroup_, bytes bClaims_) returns(bool)
func (_ISnapshots *ISnapshotsSession) Snapshot(signatureGroup_ []byte, bClaims_ []byte) (*types.Transaction, error) {
	return _ISnapshots.Contract.Snapshot(&_ISnapshots.TransactOpts, signatureGroup_, bClaims_)
}

// Snapshot is a paid mutator transaction binding the contract method 0x08ca1f25.
//
// Solidity: function snapshot(bytes signatureGroup_, bytes bClaims_) returns(bool)
func (_ISnapshots *ISnapshotsTransactorSession) Snapshot(signatureGroup_ []byte, bClaims_ []byte) (*types.Transaction, error) {
	return _ISnapshots.Contract.Snapshot(&_ISnapshots.TransactOpts, signatureGroup_, bClaims_)
}

// ISnapshotsSnapshotTakenIterator is returned from FilterSnapshotTaken and is used to iterate over the raw logs and unpacked data for SnapshotTaken events raised by the ISnapshots contract.
type ISnapshotsSnapshotTakenIterator struct {
	Event *ISnapshotsSnapshotTaken // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ISnapshotsSnapshotTakenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ISnapshotsSnapshotTaken)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ISnapshotsSnapshotTaken)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ISnapshotsSnapshotTakenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ISnapshotsSnapshotTakenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ISnapshotsSnapshotTaken represents a SnapshotTaken event raised by the ISnapshots contract.
type ISnapshotsSnapshotTaken struct {
	ChainId                *big.Int
	Epoch                  *big.Int
	Height                 *big.Int
	Validator              common.Address
	SafeToProceedConsensus bool
	Raw                    types.Log // Blockchain specific contextual infos
}

// FilterSnapshotTaken is a free log retrieval operation binding the contract event 0x740c230bf3b8e6d0997cb207d19155e2721234d5690acf42dbc85615aedc362f.
//
// Solidity: event SnapshotTaken(uint256 chainId, uint256 indexed epoch, uint256 height, address indexed validator, bool safeToProceedConsensus)
func (_ISnapshots *ISnapshotsFilterer) FilterSnapshotTaken(opts *bind.FilterOpts, epoch []*big.Int, validator []common.Address) (*ISnapshotsSnapshotTakenIterator, error) {

	var epochRule []interface{}
	for _, epochItem := range epoch {
		epochRule = append(epochRule, epochItem)
	}

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ISnapshots.contract.FilterLogs(opts, "SnapshotTaken", epochRule, validatorRule)
	if err != nil {
		return nil, err
	}
	return &ISnapshotsSnapshotTakenIterator{contract: _ISnapshots.contract, event: "SnapshotTaken", logs: logs, sub: sub}, nil
}

// WatchSnapshotTaken is a free log subscription operation binding the contract event 0x740c230bf3b8e6d0997cb207d19155e2721234d5690acf42dbc85615aedc362f.
//
// Solidity: event SnapshotTaken(uint256 chainId, uint256 indexed epoch, uint256 height, address indexed validator, bool safeToProceedConsensus)
func (_ISnapshots *ISnapshotsFilterer) WatchSnapshotTaken(opts *bind.WatchOpts, sink chan<- *ISnapshotsSnapshotTaken, epoch []*big.Int, validator []common.Address) (event.Subscription, error) {

	var epochRule []interface{}
	for _, epochItem := range epoch {
		epochRule = append(epochRule, epochItem)
	}

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ISnapshots.contract.WatchLogs(opts, "SnapshotTaken", epochRule, validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ISnapshotsSnapshotTaken)
				if err := _ISnapshots.contract.UnpackLog(event, "SnapshotTaken", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSnapshotTaken is a log parse operation binding the contract event 0x740c230bf3b8e6d0997cb207d19155e2721234d5690acf42dbc85615aedc362f.
//
// Solidity: event SnapshotTaken(uint256 chainId, uint256 indexed epoch, uint256 height, address indexed validator, bool safeToProceedConsensus)
func (_ISnapshots *ISnapshotsFilterer) ParseSnapshotTaken(log types.Log) (*ISnapshotsSnapshotTaken, error) {
	event := new(ISnapshotsSnapshotTaken)
	if err := _ISnapshots.contract.UnpackLog(event, "SnapshotTaken", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IValidatorPoolMetaData contains all meta data concerning the IValidatorPool contract.
var IValidatorPoolMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"claimStakeNFTPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeTokenID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectProfits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payoutEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payoutToken\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllLocations\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"getLocation\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getValidator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidatorAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidatorsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeETHDKG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMaintenanceScheduled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"majorSlash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"minorSlash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"madnetHeight\",\"type\":\"uint256\"}],\"name\":\"pauseConsensus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxNumValidators_\",\"type\":\"uint256\"}],\"name\":\"setMaxNumValidators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumStake_\",\"type\":\"uint256\"}],\"name\":\"setMinimumStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"ip\",\"type\":\"string\"}],\"name\":\"setMyLocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// IValidatorPoolABI is the input ABI used to generate the binding from.
// Deprecated: Use IValidatorPoolMetaData.ABI instead.
var IValidatorPoolABI = IValidatorPoolMetaData.ABI

// IValidatorPool is an auto generated Go binding around an Ethereum contract.
type IValidatorPool struct {
	IValidatorPoolCaller     // Read-only binding to the contract
	IValidatorPoolTransactor // Write-only binding to the contract
	IValidatorPoolFilterer   // Log filterer for contract events
}

// IValidatorPoolCaller is an auto generated read-only Go binding around an Ethereum contract.
type IValidatorPoolCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IValidatorPoolTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IValidatorPoolTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IValidatorPoolFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IValidatorPoolFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IValidatorPoolSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IValidatorPoolSession struct {
	Contract     *IValidatorPool   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IValidatorPoolCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IValidatorPoolCallerSession struct {
	Contract *IValidatorPoolCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// IValidatorPoolTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IValidatorPoolTransactorSession struct {
	Contract     *IValidatorPoolTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// IValidatorPoolRaw is an auto generated low-level Go binding around an Ethereum contract.
type IValidatorPoolRaw struct {
	Contract *IValidatorPool // Generic contract binding to access the raw methods on
}

// IValidatorPoolCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IValidatorPoolCallerRaw struct {
	Contract *IValidatorPoolCaller // Generic read-only contract binding to access the raw methods on
}

// IValidatorPoolTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IValidatorPoolTransactorRaw struct {
	Contract *IValidatorPoolTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIValidatorPool creates a new instance of IValidatorPool, bound to a specific deployed contract.
func NewIValidatorPool(address common.Address, backend bind.ContractBackend) (*IValidatorPool, error) {
	contract, err := bindIValidatorPool(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IValidatorPool{IValidatorPoolCaller: IValidatorPoolCaller{contract: contract}, IValidatorPoolTransactor: IValidatorPoolTransactor{contract: contract}, IValidatorPoolFilterer: IValidatorPoolFilterer{contract: contract}}, nil
}

// NewIValidatorPoolCaller creates a new read-only instance of IValidatorPool, bound to a specific deployed contract.
func NewIValidatorPoolCaller(address common.Address, caller bind.ContractCaller) (*IValidatorPoolCaller, error) {
	contract, err := bindIValidatorPool(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IValidatorPoolCaller{contract: contract}, nil
}

// NewIValidatorPoolTransactor creates a new write-only instance of IValidatorPool, bound to a specific deployed contract.
func NewIValidatorPoolTransactor(address common.Address, transactor bind.ContractTransactor) (*IValidatorPoolTransactor, error) {
	contract, err := bindIValidatorPool(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IValidatorPoolTransactor{contract: contract}, nil
}

// NewIValidatorPoolFilterer creates a new log filterer instance of IValidatorPool, bound to a specific deployed contract.
func NewIValidatorPoolFilterer(address common.Address, filterer bind.ContractFilterer) (*IValidatorPoolFilterer, error) {
	contract, err := bindIValidatorPool(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IValidatorPoolFilterer{contract: contract}, nil
}

// bindIValidatorPool binds a generic wrapper to an already deployed contract.
func bindIValidatorPool(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IValidatorPoolABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IValidatorPool *IValidatorPoolRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IValidatorPool.Contract.IValidatorPoolCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IValidatorPool *IValidatorPoolRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IValidatorPool.Contract.IValidatorPoolTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IValidatorPool *IValidatorPoolRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IValidatorPool.Contract.IValidatorPoolTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IValidatorPool *IValidatorPoolCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IValidatorPool.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IValidatorPool *IValidatorPoolTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IValidatorPool.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IValidatorPool *IValidatorPoolTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IValidatorPool.Contract.contract.Transact(opts, method, params...)
}

// GetAllLocations is a free data retrieval call binding the contract method 0x1076e967.
//
// Solidity: function getAllLocations() view returns(string[])
func (_IValidatorPool *IValidatorPoolCaller) GetAllLocations(opts *bind.CallOpts) ([]string, error) {
	var out []interface{}
	err := _IValidatorPool.contract.Call(opts, &out, "getAllLocations")

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// GetAllLocations is a free data retrieval call binding the contract method 0x1076e967.
//
// Solidity: function getAllLocations() view returns(string[])
func (_IValidatorPool *IValidatorPoolSession) GetAllLocations() ([]string, error) {
	return _IValidatorPool.Contract.GetAllLocations(&_IValidatorPool.CallOpts)
}

// GetAllLocations is a free data retrieval call binding the contract method 0x1076e967.
//
// Solidity: function getAllLocations() view returns(string[])
func (_IValidatorPool *IValidatorPoolCallerSession) GetAllLocations() ([]string, error) {
	return _IValidatorPool.Contract.GetAllLocations(&_IValidatorPool.CallOpts)
}

// GetLocation is a free data retrieval call binding the contract method 0xd9e0dc59.
//
// Solidity: function getLocation(address validator) view returns(string)
func (_IValidatorPool *IValidatorPoolCaller) GetLocation(opts *bind.CallOpts, validator common.Address) (string, error) {
	var out []interface{}
	err := _IValidatorPool.contract.Call(opts, &out, "getLocation", validator)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetLocation is a free data retrieval call binding the contract method 0xd9e0dc59.
//
// Solidity: function getLocation(address validator) view returns(string)
func (_IValidatorPool *IValidatorPoolSession) GetLocation(validator common.Address) (string, error) {
	return _IValidatorPool.Contract.GetLocation(&_IValidatorPool.CallOpts, validator)
}

// GetLocation is a free data retrieval call binding the contract method 0xd9e0dc59.
//
// Solidity: function getLocation(address validator) view returns(string)
func (_IValidatorPool *IValidatorPoolCallerSession) GetLocation(validator common.Address) (string, error) {
	return _IValidatorPool.Contract.GetLocation(&_IValidatorPool.CallOpts, validator)
}

// GetValidator is a free data retrieval call binding the contract method 0xb5d89627.
//
// Solidity: function getValidator(uint256 index) view returns(address)
func (_IValidatorPool *IValidatorPoolCaller) GetValidator(opts *bind.CallOpts, index *big.Int) (common.Address, error) {
	var out []interface{}
	err := _IValidatorPool.contract.Call(opts, &out, "getValidator", index)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetValidator is a free data retrieval call binding the contract method 0xb5d89627.
//
// Solidity: function getValidator(uint256 index) view returns(address)
func (_IValidatorPool *IValidatorPoolSession) GetValidator(index *big.Int) (common.Address, error) {
	return _IValidatorPool.Contract.GetValidator(&_IValidatorPool.CallOpts, index)
}

// GetValidator is a free data retrieval call binding the contract method 0xb5d89627.
//
// Solidity: function getValidator(uint256 index) view returns(address)
func (_IValidatorPool *IValidatorPoolCallerSession) GetValidator(index *big.Int) (common.Address, error) {
	return _IValidatorPool.Contract.GetValidator(&_IValidatorPool.CallOpts, index)
}

// GetValidatorAddresses is a free data retrieval call binding the contract method 0xf74e921f.
//
// Solidity: function getValidatorAddresses() view returns(address[])
func (_IValidatorPool *IValidatorPoolCaller) GetValidatorAddresses(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _IValidatorPool.contract.Call(opts, &out, "getValidatorAddresses")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetValidatorAddresses is a free data retrieval call binding the contract method 0xf74e921f.
//
// Solidity: function getValidatorAddresses() view returns(address[])
func (_IValidatorPool *IValidatorPoolSession) GetValidatorAddresses() ([]common.Address, error) {
	return _IValidatorPool.Contract.GetValidatorAddresses(&_IValidatorPool.CallOpts)
}

// GetValidatorAddresses is a free data retrieval call binding the contract method 0xf74e921f.
//
// Solidity: function getValidatorAddresses() view returns(address[])
func (_IValidatorPool *IValidatorPoolCallerSession) GetValidatorAddresses() ([]common.Address, error) {
	return _IValidatorPool.Contract.GetValidatorAddresses(&_IValidatorPool.CallOpts)
}

// GetValidatorsCount is a free data retrieval call binding the contract method 0x27498240.
//
// Solidity: function getValidatorsCount() view returns(uint256)
func (_IValidatorPool *IValidatorPoolCaller) GetValidatorsCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IValidatorPool.contract.Call(opts, &out, "getValidatorsCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetValidatorsCount is a free data retrieval call binding the contract method 0x27498240.
//
// Solidity: function getValidatorsCount() view returns(uint256)
func (_IValidatorPool *IValidatorPoolSession) GetValidatorsCount() (*big.Int, error) {
	return _IValidatorPool.Contract.GetValidatorsCount(&_IValidatorPool.CallOpts)
}

// GetValidatorsCount is a free data retrieval call binding the contract method 0x27498240.
//
// Solidity: function getValidatorsCount() view returns(uint256)
func (_IValidatorPool *IValidatorPoolCallerSession) GetValidatorsCount() (*big.Int, error) {
	return _IValidatorPool.Contract.GetValidatorsCount(&_IValidatorPool.CallOpts)
}

// IsMaintenanceScheduled is a free data retrieval call binding the contract method 0x1885570f.
//
// Solidity: function isMaintenanceScheduled() view returns(bool)
func (_IValidatorPool *IValidatorPoolCaller) IsMaintenanceScheduled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _IValidatorPool.contract.Call(opts, &out, "isMaintenanceScheduled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsMaintenanceScheduled is a free data retrieval call binding the contract method 0x1885570f.
//
// Solidity: function isMaintenanceScheduled() view returns(bool)
func (_IValidatorPool *IValidatorPoolSession) IsMaintenanceScheduled() (bool, error) {
	return _IValidatorPool.Contract.IsMaintenanceScheduled(&_IValidatorPool.CallOpts)
}

// IsMaintenanceScheduled is a free data retrieval call binding the contract method 0x1885570f.
//
// Solidity: function isMaintenanceScheduled() view returns(bool)
func (_IValidatorPool *IValidatorPoolCallerSession) IsMaintenanceScheduled() (bool, error) {
	return _IValidatorPool.Contract.IsMaintenanceScheduled(&_IValidatorPool.CallOpts)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address participant) view returns(bool)
func (_IValidatorPool *IValidatorPoolCaller) IsValidator(opts *bind.CallOpts, participant common.Address) (bool, error) {
	var out []interface{}
	err := _IValidatorPool.contract.Call(opts, &out, "isValidator", participant)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address participant) view returns(bool)
func (_IValidatorPool *IValidatorPoolSession) IsValidator(participant common.Address) (bool, error) {
	return _IValidatorPool.Contract.IsValidator(&_IValidatorPool.CallOpts, participant)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address participant) view returns(bool)
func (_IValidatorPool *IValidatorPoolCallerSession) IsValidator(participant common.Address) (bool, error) {
	return _IValidatorPool.Contract.IsValidator(&_IValidatorPool.CallOpts, participant)
}

// ClaimStakeNFTPosition is a paid mutator transaction binding the contract method 0xd9b4a939.
//
// Solidity: function claimStakeNFTPosition() returns(uint256 stakeTokenID)
func (_IValidatorPool *IValidatorPoolTransactor) ClaimStakeNFTPosition(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IValidatorPool.contract.Transact(opts, "claimStakeNFTPosition")
}

// ClaimStakeNFTPosition is a paid mutator transaction binding the contract method 0xd9b4a939.
//
// Solidity: function claimStakeNFTPosition() returns(uint256 stakeTokenID)
func (_IValidatorPool *IValidatorPoolSession) ClaimStakeNFTPosition() (*types.Transaction, error) {
	return _IValidatorPool.Contract.ClaimStakeNFTPosition(&_IValidatorPool.TransactOpts)
}

// ClaimStakeNFTPosition is a paid mutator transaction binding the contract method 0xd9b4a939.
//
// Solidity: function claimStakeNFTPosition() returns(uint256 stakeTokenID)
func (_IValidatorPool *IValidatorPoolTransactorSession) ClaimStakeNFTPosition() (*types.Transaction, error) {
	return _IValidatorPool.Contract.ClaimStakeNFTPosition(&_IValidatorPool.TransactOpts)
}

// CollectProfits is a paid mutator transaction binding the contract method 0xc958e0d6.
//
// Solidity: function collectProfits() returns(uint256 payoutEth, uint256 payoutToken)
func (_IValidatorPool *IValidatorPoolTransactor) CollectProfits(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IValidatorPool.contract.Transact(opts, "collectProfits")
}

// CollectProfits is a paid mutator transaction binding the contract method 0xc958e0d6.
//
// Solidity: function collectProfits() returns(uint256 payoutEth, uint256 payoutToken)
func (_IValidatorPool *IValidatorPoolSession) CollectProfits() (*types.Transaction, error) {
	return _IValidatorPool.Contract.CollectProfits(&_IValidatorPool.TransactOpts)
}

// CollectProfits is a paid mutator transaction binding the contract method 0xc958e0d6.
//
// Solidity: function collectProfits() returns(uint256 payoutEth, uint256 payoutToken)
func (_IValidatorPool *IValidatorPoolTransactorSession) CollectProfits() (*types.Transaction, error) {
	return _IValidatorPool.Contract.CollectProfits(&_IValidatorPool.TransactOpts)
}

// InitializeETHDKG is a paid mutator transaction binding the contract method 0x57b51c9c.
//
// Solidity: function initializeETHDKG() returns()
func (_IValidatorPool *IValidatorPoolTransactor) InitializeETHDKG(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IValidatorPool.contract.Transact(opts, "initializeETHDKG")
}

// InitializeETHDKG is a paid mutator transaction binding the contract method 0x57b51c9c.
//
// Solidity: function initializeETHDKG() returns()
func (_IValidatorPool *IValidatorPoolSession) InitializeETHDKG() (*types.Transaction, error) {
	return _IValidatorPool.Contract.InitializeETHDKG(&_IValidatorPool.TransactOpts)
}

// InitializeETHDKG is a paid mutator transaction binding the contract method 0x57b51c9c.
//
// Solidity: function initializeETHDKG() returns()
func (_IValidatorPool *IValidatorPoolTransactorSession) InitializeETHDKG() (*types.Transaction, error) {
	return _IValidatorPool.Contract.InitializeETHDKG(&_IValidatorPool.TransactOpts)
}

// MajorSlash is a paid mutator transaction binding the contract method 0x150ef01b.
//
// Solidity: function majorSlash(address participant) returns()
func (_IValidatorPool *IValidatorPoolTransactor) MajorSlash(opts *bind.TransactOpts, participant common.Address) (*types.Transaction, error) {
	return _IValidatorPool.contract.Transact(opts, "majorSlash", participant)
}

// MajorSlash is a paid mutator transaction binding the contract method 0x150ef01b.
//
// Solidity: function majorSlash(address participant) returns()
func (_IValidatorPool *IValidatorPoolSession) MajorSlash(participant common.Address) (*types.Transaction, error) {
	return _IValidatorPool.Contract.MajorSlash(&_IValidatorPool.TransactOpts, participant)
}

// MajorSlash is a paid mutator transaction binding the contract method 0x150ef01b.
//
// Solidity: function majorSlash(address participant) returns()
func (_IValidatorPool *IValidatorPoolTransactorSession) MajorSlash(participant common.Address) (*types.Transaction, error) {
	return _IValidatorPool.Contract.MajorSlash(&_IValidatorPool.TransactOpts, participant)
}

// MinorSlash is a paid mutator transaction binding the contract method 0xa19ebb21.
//
// Solidity: function minorSlash(address participant) returns()
func (_IValidatorPool *IValidatorPoolTransactor) MinorSlash(opts *bind.TransactOpts, participant common.Address) (*types.Transaction, error) {
	return _IValidatorPool.contract.Transact(opts, "minorSlash", participant)
}

// MinorSlash is a paid mutator transaction binding the contract method 0xa19ebb21.
//
// Solidity: function minorSlash(address participant) returns()
func (_IValidatorPool *IValidatorPoolSession) MinorSlash(participant common.Address) (*types.Transaction, error) {
	return _IValidatorPool.Contract.MinorSlash(&_IValidatorPool.TransactOpts, participant)
}

// MinorSlash is a paid mutator transaction binding the contract method 0xa19ebb21.
//
// Solidity: function minorSlash(address participant) returns()
func (_IValidatorPool *IValidatorPoolTransactorSession) MinorSlash(participant common.Address) (*types.Transaction, error) {
	return _IValidatorPool.Contract.MinorSlash(&_IValidatorPool.TransactOpts, participant)
}

// PauseConsensus is a paid mutator transaction binding the contract method 0x8fb17912.
//
// Solidity: function pauseConsensus(uint256 madnetHeight) returns()
func (_IValidatorPool *IValidatorPoolTransactor) PauseConsensus(opts *bind.TransactOpts, madnetHeight *big.Int) (*types.Transaction, error) {
	return _IValidatorPool.contract.Transact(opts, "pauseConsensus", madnetHeight)
}

// PauseConsensus is a paid mutator transaction binding the contract method 0x8fb17912.
//
// Solidity: function pauseConsensus(uint256 madnetHeight) returns()
func (_IValidatorPool *IValidatorPoolSession) PauseConsensus(madnetHeight *big.Int) (*types.Transaction, error) {
	return _IValidatorPool.Contract.PauseConsensus(&_IValidatorPool.TransactOpts, madnetHeight)
}

// PauseConsensus is a paid mutator transaction binding the contract method 0x8fb17912.
//
// Solidity: function pauseConsensus(uint256 madnetHeight) returns()
func (_IValidatorPool *IValidatorPoolTransactorSession) PauseConsensus(madnetHeight *big.Int) (*types.Transaction, error) {
	return _IValidatorPool.Contract.PauseConsensus(&_IValidatorPool.TransactOpts, madnetHeight)
}

// SetMaxNumValidators is a paid mutator transaction binding the contract method 0x6c0da0b4.
//
// Solidity: function setMaxNumValidators(uint256 maxNumValidators_) returns()
func (_IValidatorPool *IValidatorPoolTransactor) SetMaxNumValidators(opts *bind.TransactOpts, maxNumValidators_ *big.Int) (*types.Transaction, error) {
	return _IValidatorPool.contract.Transact(opts, "setMaxNumValidators", maxNumValidators_)
}

// SetMaxNumValidators is a paid mutator transaction binding the contract method 0x6c0da0b4.
//
// Solidity: function setMaxNumValidators(uint256 maxNumValidators_) returns()
func (_IValidatorPool *IValidatorPoolSession) SetMaxNumValidators(maxNumValidators_ *big.Int) (*types.Transaction, error) {
	return _IValidatorPool.Contract.SetMaxNumValidators(&_IValidatorPool.TransactOpts, maxNumValidators_)
}

// SetMaxNumValidators is a paid mutator transaction binding the contract method 0x6c0da0b4.
//
// Solidity: function setMaxNumValidators(uint256 maxNumValidators_) returns()
func (_IValidatorPool *IValidatorPoolTransactorSession) SetMaxNumValidators(maxNumValidators_ *big.Int) (*types.Transaction, error) {
	return _IValidatorPool.Contract.SetMaxNumValidators(&_IValidatorPool.TransactOpts, maxNumValidators_)
}

// SetMinimumStake is a paid mutator transaction binding the contract method 0x233e9903.
//
// Solidity: function setMinimumStake(uint256 minimumStake_) returns()
func (_IValidatorPool *IValidatorPoolTransactor) SetMinimumStake(opts *bind.TransactOpts, minimumStake_ *big.Int) (*types.Transaction, error) {
	return _IValidatorPool.contract.Transact(opts, "setMinimumStake", minimumStake_)
}

// SetMinimumStake is a paid mutator transaction binding the contract method 0x233e9903.
//
// Solidity: function setMinimumStake(uint256 minimumStake_) returns()
func (_IValidatorPool *IValidatorPoolSession) SetMinimumStake(minimumStake_ *big.Int) (*types.Transaction, error) {
	return _IValidatorPool.Contract.SetMinimumStake(&_IValidatorPool.TransactOpts, minimumStake_)
}

// SetMinimumStake is a paid mutator transaction binding the contract method 0x233e9903.
//
// Solidity: function setMinimumStake(uint256 minimumStake_) returns()
func (_IValidatorPool *IValidatorPoolTransactorSession) SetMinimumStake(minimumStake_ *big.Int) (*types.Transaction, error) {
	return _IValidatorPool.Contract.SetMinimumStake(&_IValidatorPool.TransactOpts, minimumStake_)
}

// SetMyLocation is a paid mutator transaction binding the contract method 0xed7a558c.
//
// Solidity: function setMyLocation(string ip) returns()
func (_IValidatorPool *IValidatorPoolTransactor) SetMyLocation(opts *bind.TransactOpts, ip string) (*types.Transaction, error) {
	return _IValidatorPool.contract.Transact(opts, "setMyLocation", ip)
}

// SetMyLocation is a paid mutator transaction binding the contract method 0xed7a558c.
//
// Solidity: function setMyLocation(string ip) returns()
func (_IValidatorPool *IValidatorPoolSession) SetMyLocation(ip string) (*types.Transaction, error) {
	return _IValidatorPool.Contract.SetMyLocation(&_IValidatorPool.TransactOpts, ip)
}

// SetMyLocation is a paid mutator transaction binding the contract method 0xed7a558c.
//
// Solidity: function setMyLocation(string ip) returns()
func (_IValidatorPool *IValidatorPoolTransactorSession) SetMyLocation(ip string) (*types.Transaction, error) {
	return _IValidatorPool.Contract.SetMyLocation(&_IValidatorPool.TransactOpts, ip)
}

// MerkleProofLibraryMetaData contains all meta data concerning the MerkleProofLibrary contract.
var MerkleProofLibraryMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a6480ff04a27c0f4da64e4bccc372e38389954b8be111090d2cbdf9c7a97e04a64736f6c634300080b0033",
}

// MerkleProofLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use MerkleProofLibraryMetaData.ABI instead.
var MerkleProofLibraryABI = MerkleProofLibraryMetaData.ABI

// MerkleProofLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MerkleProofLibraryMetaData.Bin instead.
var MerkleProofLibraryBin = MerkleProofLibraryMetaData.Bin

// DeployMerkleProofLibrary deploys a new Ethereum contract, binding an instance of MerkleProofLibrary to it.
func DeployMerkleProofLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *MerkleProofLibrary, error) {
	parsed, err := MerkleProofLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MerkleProofLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MerkleProofLibrary{MerkleProofLibraryCaller: MerkleProofLibraryCaller{contract: contract}, MerkleProofLibraryTransactor: MerkleProofLibraryTransactor{contract: contract}, MerkleProofLibraryFilterer: MerkleProofLibraryFilterer{contract: contract}}, nil
}

// MerkleProofLibrary is an auto generated Go binding around an Ethereum contract.
type MerkleProofLibrary struct {
	MerkleProofLibraryCaller     // Read-only binding to the contract
	MerkleProofLibraryTransactor // Write-only binding to the contract
	MerkleProofLibraryFilterer   // Log filterer for contract events
}

// MerkleProofLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type MerkleProofLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MerkleProofLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MerkleProofLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MerkleProofLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MerkleProofLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MerkleProofLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MerkleProofLibrarySession struct {
	Contract     *MerkleProofLibrary // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// MerkleProofLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MerkleProofLibraryCallerSession struct {
	Contract *MerkleProofLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// MerkleProofLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MerkleProofLibraryTransactorSession struct {
	Contract     *MerkleProofLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// MerkleProofLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type MerkleProofLibraryRaw struct {
	Contract *MerkleProofLibrary // Generic contract binding to access the raw methods on
}

// MerkleProofLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MerkleProofLibraryCallerRaw struct {
	Contract *MerkleProofLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// MerkleProofLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MerkleProofLibraryTransactorRaw struct {
	Contract *MerkleProofLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMerkleProofLibrary creates a new instance of MerkleProofLibrary, bound to a specific deployed contract.
func NewMerkleProofLibrary(address common.Address, backend bind.ContractBackend) (*MerkleProofLibrary, error) {
	contract, err := bindMerkleProofLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MerkleProofLibrary{MerkleProofLibraryCaller: MerkleProofLibraryCaller{contract: contract}, MerkleProofLibraryTransactor: MerkleProofLibraryTransactor{contract: contract}, MerkleProofLibraryFilterer: MerkleProofLibraryFilterer{contract: contract}}, nil
}

// NewMerkleProofLibraryCaller creates a new read-only instance of MerkleProofLibrary, bound to a specific deployed contract.
func NewMerkleProofLibraryCaller(address common.Address, caller bind.ContractCaller) (*MerkleProofLibraryCaller, error) {
	contract, err := bindMerkleProofLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MerkleProofLibraryCaller{contract: contract}, nil
}

// NewMerkleProofLibraryTransactor creates a new write-only instance of MerkleProofLibrary, bound to a specific deployed contract.
func NewMerkleProofLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*MerkleProofLibraryTransactor, error) {
	contract, err := bindMerkleProofLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MerkleProofLibraryTransactor{contract: contract}, nil
}

// NewMerkleProofLibraryFilterer creates a new log filterer instance of MerkleProofLibrary, bound to a specific deployed contract.
func NewMerkleProofLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*MerkleProofLibraryFilterer, error) {
	contract, err := bindMerkleProofLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MerkleProofLibraryFilterer{contract: contract}, nil
}

// bindMerkleProofLibrary binds a generic wrapper to an already deployed contract.
func bindMerkleProofLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MerkleProofLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MerkleProofLibrary *MerkleProofLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MerkleProofLibrary.Contract.MerkleProofLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MerkleProofLibrary *MerkleProofLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MerkleProofLibrary.Contract.MerkleProofLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MerkleProofLibrary *MerkleProofLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MerkleProofLibrary.Contract.MerkleProofLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MerkleProofLibrary *MerkleProofLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MerkleProofLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MerkleProofLibrary *MerkleProofLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MerkleProofLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MerkleProofLibrary *MerkleProofLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MerkleProofLibrary.Contract.contract.Transact(opts, method, params...)
}

// MerkleProofParserLibraryMetaData contains all meta data concerning the MerkleProofParserLibrary contract.
var MerkleProofParserLibraryMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220136b88f9334ef9cec1414dc099c76cc960b9a86775069c49ccb9d7e9609a394a64736f6c634300080b0033",
}

// MerkleProofParserLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use MerkleProofParserLibraryMetaData.ABI instead.
var MerkleProofParserLibraryABI = MerkleProofParserLibraryMetaData.ABI

// MerkleProofParserLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MerkleProofParserLibraryMetaData.Bin instead.
var MerkleProofParserLibraryBin = MerkleProofParserLibraryMetaData.Bin

// DeployMerkleProofParserLibrary deploys a new Ethereum contract, binding an instance of MerkleProofParserLibrary to it.
func DeployMerkleProofParserLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *MerkleProofParserLibrary, error) {
	parsed, err := MerkleProofParserLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MerkleProofParserLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MerkleProofParserLibrary{MerkleProofParserLibraryCaller: MerkleProofParserLibraryCaller{contract: contract}, MerkleProofParserLibraryTransactor: MerkleProofParserLibraryTransactor{contract: contract}, MerkleProofParserLibraryFilterer: MerkleProofParserLibraryFilterer{contract: contract}}, nil
}

// MerkleProofParserLibrary is an auto generated Go binding around an Ethereum contract.
type MerkleProofParserLibrary struct {
	MerkleProofParserLibraryCaller     // Read-only binding to the contract
	MerkleProofParserLibraryTransactor // Write-only binding to the contract
	MerkleProofParserLibraryFilterer   // Log filterer for contract events
}

// MerkleProofParserLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type MerkleProofParserLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MerkleProofParserLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MerkleProofParserLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MerkleProofParserLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MerkleProofParserLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MerkleProofParserLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MerkleProofParserLibrarySession struct {
	Contract     *MerkleProofParserLibrary // Generic contract binding to set the session for
	CallOpts     bind.CallOpts             // Call options to use throughout this session
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// MerkleProofParserLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MerkleProofParserLibraryCallerSession struct {
	Contract *MerkleProofParserLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                   // Call options to use throughout this session
}

// MerkleProofParserLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MerkleProofParserLibraryTransactorSession struct {
	Contract     *MerkleProofParserLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                   // Transaction auth options to use throughout this session
}

// MerkleProofParserLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type MerkleProofParserLibraryRaw struct {
	Contract *MerkleProofParserLibrary // Generic contract binding to access the raw methods on
}

// MerkleProofParserLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MerkleProofParserLibraryCallerRaw struct {
	Contract *MerkleProofParserLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// MerkleProofParserLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MerkleProofParserLibraryTransactorRaw struct {
	Contract *MerkleProofParserLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMerkleProofParserLibrary creates a new instance of MerkleProofParserLibrary, bound to a specific deployed contract.
func NewMerkleProofParserLibrary(address common.Address, backend bind.ContractBackend) (*MerkleProofParserLibrary, error) {
	contract, err := bindMerkleProofParserLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MerkleProofParserLibrary{MerkleProofParserLibraryCaller: MerkleProofParserLibraryCaller{contract: contract}, MerkleProofParserLibraryTransactor: MerkleProofParserLibraryTransactor{contract: contract}, MerkleProofParserLibraryFilterer: MerkleProofParserLibraryFilterer{contract: contract}}, nil
}

// NewMerkleProofParserLibraryCaller creates a new read-only instance of MerkleProofParserLibrary, bound to a specific deployed contract.
func NewMerkleProofParserLibraryCaller(address common.Address, caller bind.ContractCaller) (*MerkleProofParserLibraryCaller, error) {
	contract, err := bindMerkleProofParserLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MerkleProofParserLibraryCaller{contract: contract}, nil
}

// NewMerkleProofParserLibraryTransactor creates a new write-only instance of MerkleProofParserLibrary, bound to a specific deployed contract.
func NewMerkleProofParserLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*MerkleProofParserLibraryTransactor, error) {
	contract, err := bindMerkleProofParserLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MerkleProofParserLibraryTransactor{contract: contract}, nil
}

// NewMerkleProofParserLibraryFilterer creates a new log filterer instance of MerkleProofParserLibrary, bound to a specific deployed contract.
func NewMerkleProofParserLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*MerkleProofParserLibraryFilterer, error) {
	contract, err := bindMerkleProofParserLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MerkleProofParserLibraryFilterer{contract: contract}, nil
}

// bindMerkleProofParserLibrary binds a generic wrapper to an already deployed contract.
func bindMerkleProofParserLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MerkleProofParserLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MerkleProofParserLibrary *MerkleProofParserLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MerkleProofParserLibrary.Contract.MerkleProofParserLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MerkleProofParserLibrary *MerkleProofParserLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MerkleProofParserLibrary.Contract.MerkleProofParserLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MerkleProofParserLibrary *MerkleProofParserLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MerkleProofParserLibrary.Contract.MerkleProofParserLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MerkleProofParserLibrary *MerkleProofParserLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MerkleProofParserLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MerkleProofParserLibrary *MerkleProofParserLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MerkleProofParserLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MerkleProofParserLibrary *MerkleProofParserLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MerkleProofParserLibrary.Contract.contract.Transact(opts, method, params...)
}

// MigrateETHDKGMetaData contains all meta data concerning the MigrateETHDKG contract.
var MigrateETHDKGMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"grantOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_ethHeight\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_madHeight\",\"type\":\"uint32\"},{\"internalType\":\"uint256[4]\",\"name\":\"_master_public_key\",\"type\":\"uint256[4]\"},{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[4][]\",\"name\":\"_gpkj\",\"type\":\"uint256[4][]\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governance_\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50600061002561003e60201b610aeb1760201c565b60010180546001600160a01b0319163317905550610062565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90565b610fa3806100716000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063dc97805911610050578063dc978059146100a7578063e348da13146100ba578063fad8b32a146100cd57600080fd5b80636053617214610077578063ab033ea914610081578063d35d5cbf14610094575b600080fd5b61007f6100e0565b005b61007f61008f366004610c05565b61020a565b61007f6100a2366004610dbf565b610359565b61007f6100b5366004610c05565b6106bd565b61007f6100c8366004610c05565b61080c565b61007f6100db366004610c05565b61097d565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520c547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff1633146101cd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f41636365737320436f6e74726f6c3a206f776e657273686970206e6f7420677260448201527f616e74656400000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6002810180547fffffffffffffffffffffffff00000000000000000000000000000000000000009081169091556001909101805490911633179055565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff1633146102f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e657220697320616c60448201527f6c6f77656400000000000000000000000000000000000000000000000000000060648201526084016101c4565b507f31434318735a8e6385da596be365952169e52986860b974818986b522d23520d80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b3360009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a602081905260409091205460ff1661041a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160448201527f6c6c6f776564000000000000000000000000000000000000000000000000000060648201526084016101c4565b82517fd2d37756412c577f56b4802b8e643c9a817fa92cc18ff383f317fce7fab4282b9061044e9082906020870190610b0f565b5061045e60098201866004610b99565b50835185516020808801516040808a01516060808c0151835160ff90981688529487018f905263ffffffff8e8116888501528d1690870152608086019490945260a085019190915260c084019290925260e0830152517f1c85ff1efe0a905f8feca811e617102cb7ec896aded693eb96366c8ef22bb09f918190036101000190a160005b84518110156106b25760008582815181106104ff576104ff610ebe565b6020026020010151905084828151811061051b5761051b610ebe565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff8316600090815260058601909252604090912061055a916004610b99565b507f113b129fac2dde341b9fbbec2bb79a95b9945b0e80fda711fc8ae5c7b0ea83b0818b610589856001610f1c565b88868151811061059b5761059b610ebe565b60200260200101516000600481106105b5576105b5610ebe565b60200201518987815181106105cc576105cc610ebe565b60200260200101516001600481106105e6576105e6610ebe565b60200201518a88815181106105fd576105fd610ebe565b602002602001015160026004811061061757610617610ebe565b60200201518b898151811061062e5761062e610ebe565b602002602001015160036004811061064857610648610ebe565b602090810291909101516040805173ffffffffffffffffffffffffffffffffffffffff9099168952918801969096528601939093526060850191909152608084015260a083015260c082015260e00160405180910390a150806106aa81610f34565b9150506104e2565b505050505050505050565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff1633146107a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e657220697320616c60448201527f6c6f77656400000000000000000000000000000000000000000000000000000060648201526084016101c4565b507f31434318735a8e6385da596be365952169e52986860b974818986b522d23520c80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff1633148061088257503360009081526020829052604090205460ff165b61090e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e6572206f72206f7060448201527f657261746f7220616c6c6f77656400000000000000000000000000000000000060648201526084016101c4565b5073ffffffffffffffffffffffffffffffffffffffff1660009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff163314806109f357503360009081526020829052604090205460ff165b610a7f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e6572206f72206f7060448201527f657261746f7220616c6c6f77656400000000000000000000000000000000000060648201526084016101c4565b5073ffffffffffffffffffffffffffffffffffffffff1660009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90565b828054828255906000526020600020908101928215610b89579160200282015b82811115610b8957825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909116178255602090920191600190910190610b2f565b50610b95929150610bc7565b5090565b8260048101928215610b89579160200282015b82811115610b89578251825591602001919060010190610bac565b5b80821115610b955760008155600101610bc8565b803573ffffffffffffffffffffffffffffffffffffffff81168114610c0057600080fd5b919050565b600060208284031215610c1757600080fd5b610c2082610bdc565b9392505050565b803563ffffffff81168114610c0057600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715610cb157610cb1610c3b565b604052919050565b600082601f830112610cca57600080fd5b6040516080810181811067ffffffffffffffff82111715610ced57610ced610c3b565b604052806080840185811115610d0257600080fd5b845b81811015610d1c578035835260209283019201610d04565b509195945050505050565b600067ffffffffffffffff821115610d4157610d41610c3b565b5060051b60200190565b600082601f830112610d5c57600080fd5b81356020610d71610d6c83610d27565b610c6a565b82815260079290921b84018101918181019086841115610d9057600080fd5b8286015b84811015610db457610da68882610cb9565b835291830191608001610d94565b509695505050505050565b6000806000806000806101208789031215610dd957600080fd5b863595506020610dea818901610c27565b9550610df860408901610c27565b9450610e078960608a01610cb9565b935060e088013567ffffffffffffffff80821115610e2457600080fd5b818a0191508a601f830112610e3857600080fd5b8135610e46610d6c82610d27565b81815260059190911b8301840190848101908d831115610e6557600080fd5b938501935b82851015610e8a57610e7b85610bdc565b82529385019390850190610e6a565b965050506101008a0135925080831115610ea357600080fd5b5050610eb189828a01610d4b565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115610f2f57610f2f610eed565b500190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610f6657610f66610eed565b506001019056fea264697066735822122048856dd3c02717a28de26acff5cd0a48c0be17d70603311acf3489ec1c9f0ec064736f6c634300080b0033",
}

// MigrateETHDKGABI is the input ABI used to generate the binding from.
// Deprecated: Use MigrateETHDKGMetaData.ABI instead.
var MigrateETHDKGABI = MigrateETHDKGMetaData.ABI

// MigrateETHDKGBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MigrateETHDKGMetaData.Bin instead.
var MigrateETHDKGBin = MigrateETHDKGMetaData.Bin

// DeployMigrateETHDKG deploys a new Ethereum contract, binding an instance of MigrateETHDKG to it.
func DeployMigrateETHDKG(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *MigrateETHDKG, error) {
	parsed, err := MigrateETHDKGMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MigrateETHDKGBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MigrateETHDKG{MigrateETHDKGCaller: MigrateETHDKGCaller{contract: contract}, MigrateETHDKGTransactor: MigrateETHDKGTransactor{contract: contract}, MigrateETHDKGFilterer: MigrateETHDKGFilterer{contract: contract}}, nil
}

// MigrateETHDKG is an auto generated Go binding around an Ethereum contract.
type MigrateETHDKG struct {
	MigrateETHDKGCaller     // Read-only binding to the contract
	MigrateETHDKGTransactor // Write-only binding to the contract
	MigrateETHDKGFilterer   // Log filterer for contract events
}

// MigrateETHDKGCaller is an auto generated read-only Go binding around an Ethereum contract.
type MigrateETHDKGCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MigrateETHDKGTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MigrateETHDKGTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MigrateETHDKGFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MigrateETHDKGFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MigrateETHDKGSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MigrateETHDKGSession struct {
	Contract     *MigrateETHDKG    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MigrateETHDKGCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MigrateETHDKGCallerSession struct {
	Contract *MigrateETHDKGCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// MigrateETHDKGTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MigrateETHDKGTransactorSession struct {
	Contract     *MigrateETHDKGTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// MigrateETHDKGRaw is an auto generated low-level Go binding around an Ethereum contract.
type MigrateETHDKGRaw struct {
	Contract *MigrateETHDKG // Generic contract binding to access the raw methods on
}

// MigrateETHDKGCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MigrateETHDKGCallerRaw struct {
	Contract *MigrateETHDKGCaller // Generic read-only contract binding to access the raw methods on
}

// MigrateETHDKGTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MigrateETHDKGTransactorRaw struct {
	Contract *MigrateETHDKGTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMigrateETHDKG creates a new instance of MigrateETHDKG, bound to a specific deployed contract.
func NewMigrateETHDKG(address common.Address, backend bind.ContractBackend) (*MigrateETHDKG, error) {
	contract, err := bindMigrateETHDKG(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MigrateETHDKG{MigrateETHDKGCaller: MigrateETHDKGCaller{contract: contract}, MigrateETHDKGTransactor: MigrateETHDKGTransactor{contract: contract}, MigrateETHDKGFilterer: MigrateETHDKGFilterer{contract: contract}}, nil
}

// NewMigrateETHDKGCaller creates a new read-only instance of MigrateETHDKG, bound to a specific deployed contract.
func NewMigrateETHDKGCaller(address common.Address, caller bind.ContractCaller) (*MigrateETHDKGCaller, error) {
	contract, err := bindMigrateETHDKG(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MigrateETHDKGCaller{contract: contract}, nil
}

// NewMigrateETHDKGTransactor creates a new write-only instance of MigrateETHDKG, bound to a specific deployed contract.
func NewMigrateETHDKGTransactor(address common.Address, transactor bind.ContractTransactor) (*MigrateETHDKGTransactor, error) {
	contract, err := bindMigrateETHDKG(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MigrateETHDKGTransactor{contract: contract}, nil
}

// NewMigrateETHDKGFilterer creates a new log filterer instance of MigrateETHDKG, bound to a specific deployed contract.
func NewMigrateETHDKGFilterer(address common.Address, filterer bind.ContractFilterer) (*MigrateETHDKGFilterer, error) {
	contract, err := bindMigrateETHDKG(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MigrateETHDKGFilterer{contract: contract}, nil
}

// bindMigrateETHDKG binds a generic wrapper to an already deployed contract.
func bindMigrateETHDKG(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MigrateETHDKGABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MigrateETHDKG *MigrateETHDKGRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MigrateETHDKG.Contract.MigrateETHDKGCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MigrateETHDKG *MigrateETHDKGRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MigrateETHDKG.Contract.MigrateETHDKGTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MigrateETHDKG *MigrateETHDKGRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MigrateETHDKG.Contract.MigrateETHDKGTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MigrateETHDKG *MigrateETHDKGCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MigrateETHDKG.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MigrateETHDKG *MigrateETHDKGTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MigrateETHDKG.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MigrateETHDKG *MigrateETHDKGTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MigrateETHDKG.Contract.contract.Transact(opts, method, params...)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_MigrateETHDKG *MigrateETHDKGTransactor) GrantOperator(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _MigrateETHDKG.contract.Transact(opts, "grantOperator", who)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_MigrateETHDKG *MigrateETHDKGSession) GrantOperator(who common.Address) (*types.Transaction, error) {
	return _MigrateETHDKG.Contract.GrantOperator(&_MigrateETHDKG.TransactOpts, who)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_MigrateETHDKG *MigrateETHDKGTransactorSession) GrantOperator(who common.Address) (*types.Transaction, error) {
	return _MigrateETHDKG.Contract.GrantOperator(&_MigrateETHDKG.TransactOpts, who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_MigrateETHDKG *MigrateETHDKGTransactor) GrantOwner(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _MigrateETHDKG.contract.Transact(opts, "grantOwner", who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_MigrateETHDKG *MigrateETHDKGSession) GrantOwner(who common.Address) (*types.Transaction, error) {
	return _MigrateETHDKG.Contract.GrantOwner(&_MigrateETHDKG.TransactOpts, who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_MigrateETHDKG *MigrateETHDKGTransactorSession) GrantOwner(who common.Address) (*types.Transaction, error) {
	return _MigrateETHDKG.Contract.GrantOwner(&_MigrateETHDKG.TransactOpts, who)
}

// Migrate is a paid mutator transaction binding the contract method 0xd35d5cbf.
//
// Solidity: function migrate(uint256 _epoch, uint32 _ethHeight, uint32 _madHeight, uint256[4] _master_public_key, address[] _addresses, uint256[4][] _gpkj) returns()
func (_MigrateETHDKG *MigrateETHDKGTransactor) Migrate(opts *bind.TransactOpts, _epoch *big.Int, _ethHeight uint32, _madHeight uint32, _master_public_key [4]*big.Int, _addresses []common.Address, _gpkj [][4]*big.Int) (*types.Transaction, error) {
	return _MigrateETHDKG.contract.Transact(opts, "migrate", _epoch, _ethHeight, _madHeight, _master_public_key, _addresses, _gpkj)
}

// Migrate is a paid mutator transaction binding the contract method 0xd35d5cbf.
//
// Solidity: function migrate(uint256 _epoch, uint32 _ethHeight, uint32 _madHeight, uint256[4] _master_public_key, address[] _addresses, uint256[4][] _gpkj) returns()
func (_MigrateETHDKG *MigrateETHDKGSession) Migrate(_epoch *big.Int, _ethHeight uint32, _madHeight uint32, _master_public_key [4]*big.Int, _addresses []common.Address, _gpkj [][4]*big.Int) (*types.Transaction, error) {
	return _MigrateETHDKG.Contract.Migrate(&_MigrateETHDKG.TransactOpts, _epoch, _ethHeight, _madHeight, _master_public_key, _addresses, _gpkj)
}

// Migrate is a paid mutator transaction binding the contract method 0xd35d5cbf.
//
// Solidity: function migrate(uint256 _epoch, uint32 _ethHeight, uint32 _madHeight, uint256[4] _master_public_key, address[] _addresses, uint256[4][] _gpkj) returns()
func (_MigrateETHDKG *MigrateETHDKGTransactorSession) Migrate(_epoch *big.Int, _ethHeight uint32, _madHeight uint32, _master_public_key [4]*big.Int, _addresses []common.Address, _gpkj [][4]*big.Int) (*types.Transaction, error) {
	return _MigrateETHDKG.Contract.Migrate(&_MigrateETHDKG.TransactOpts, _epoch, _ethHeight, _madHeight, _master_public_key, _addresses, _gpkj)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_MigrateETHDKG *MigrateETHDKGTransactor) RevokeOperator(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _MigrateETHDKG.contract.Transact(opts, "revokeOperator", who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_MigrateETHDKG *MigrateETHDKGSession) RevokeOperator(who common.Address) (*types.Transaction, error) {
	return _MigrateETHDKG.Contract.RevokeOperator(&_MigrateETHDKG.TransactOpts, who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_MigrateETHDKG *MigrateETHDKGTransactorSession) RevokeOperator(who common.Address) (*types.Transaction, error) {
	return _MigrateETHDKG.Contract.RevokeOperator(&_MigrateETHDKG.TransactOpts, who)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_MigrateETHDKG *MigrateETHDKGTransactor) SetGovernance(opts *bind.TransactOpts, governance_ common.Address) (*types.Transaction, error) {
	return _MigrateETHDKG.contract.Transact(opts, "setGovernance", governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_MigrateETHDKG *MigrateETHDKGSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _MigrateETHDKG.Contract.SetGovernance(&_MigrateETHDKG.TransactOpts, governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_MigrateETHDKG *MigrateETHDKGTransactorSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _MigrateETHDKG.Contract.SetGovernance(&_MigrateETHDKG.TransactOpts, governance_)
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_MigrateETHDKG *MigrateETHDKGTransactor) TakeOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MigrateETHDKG.contract.Transact(opts, "takeOwnership")
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_MigrateETHDKG *MigrateETHDKGSession) TakeOwnership() (*types.Transaction, error) {
	return _MigrateETHDKG.Contract.TakeOwnership(&_MigrateETHDKG.TransactOpts)
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_MigrateETHDKG *MigrateETHDKGTransactorSession) TakeOwnership() (*types.Transaction, error) {
	return _MigrateETHDKG.Contract.TakeOwnership(&_MigrateETHDKG.TransactOpts)
}

// MigrateParticipantsFacetMetaData contains all meta data concerning the MigrateParticipantsFacet contract.
var MigrateParticipantsFacetMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256[2]\",\"name\":\"_madID\",\"type\":\"uint256[2]\"}],\"name\":\"addValidatorImmediate\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"grantOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256[2]\",\"name\":\"_madID\",\"type\":\"uint256[2]\"}],\"name\":\"removeValidatorImmediate\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governance_\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50600061002561003e60201b610fde1760201c565b60010180546001600160a01b0319163317905550610062565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90565b6112b8806100716000396000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c8063ab033ea911610076578063dc9780591161005b578063dc97805914610109578063e348da131461011c578063fad8b32a1461012f57600080fd5b8063ab033ea9146100f6578063be9a6555146100d157600080fd5b806306246a1d146100a857806307da68f5146100d157806360536172146100db57806371612d07146100e3575b600080fd5b6100bb6100b63660046110fc565b610142565b60405160ff909116815260200160405180910390f35b6100d96105b7565b005b6100d961067b565b6100bb6100f13660046110fc565b6107a0565b6100d9610104366004611136565b610a61565b6100d9610117366004611136565b610bb0565b6100d961012a366004611136565b610cff565b6100d961013d366004611136565b610e70565b3360009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a6020819052604082205460ff16610207576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160448201527f6c6c6f776564000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff841660009081527f310970b1d84cbb8af371a12019b396e9511a9b44411c1dabeec3e3d59d9a50f860205260409020547f310970b1d84cbb8af371a12019b396e9511a9b44411c1dabeec3e3d59d9a50f69060ff16156105a85773ffffffffffffffffffffffffffffffffffffffff851660009081526001808301602052604082205483549092916102ad91611187565b905060008360000182815481106102c6576102c661119e565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff1680835260018701909152604090912084905584549091508490839081106103135761031361119e565b600091825260209091200154845473ffffffffffffffffffffffffffffffffffffffff9091169085908590811061034c5761034c61119e565b600091825260209091200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9290921691909117905583548490806103ab576103ab6111cd565b600082815260208082207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff908401810180547fffffffffffffffffffffffff000000000000000000000000000000000000000016905590920190925573ffffffffffffffffffffffffffffffffffffffff8a16825260018681018252604080842084905560028801835280842080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690556003880183528084208481559091018390557f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237f89091529020547f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237ef9080156105265773ffffffffffffffffffffffffffffffffffffffff8a1660009081526009830160205260409020600401546104f49082611002565b73ffffffffffffffffffffffffffffffffffffffff8b1660009081526009840160205260408120600481019290925590555b8973ffffffffffffffffffffffffffffffffffffffff167f319bbadb03b94aedc69babb34a28675536a9cb30f4bbde343e1d0018c44ebd948a60405161056c91906111fc565b60405180910390a260048601805460ff169060006105898361120f565b91906101000a81548160ff021916908360ff1602179055505050505050505b6004015460ff16949350505050565b3360009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a602081905260409091205460ff16610678576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160448201527f6c6c6f776564000000000000000000000000000000000000000000000000000060648201526084016101fe565b50565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520c547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff163314610763576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f41636365737320436f6e74726f6c3a206f776e657273686970206e6f7420677260448201527f616e74656400000000000000000000000000000000000000000000000000000060648201526084016101fe565b6002810180547fffffffffffffffffffffffff00000000000000000000000000000000000000009081169091556001909101805490911633179055565b3360009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a6020819052604082205460ff16610860576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160448201527f6c6c6f776564000000000000000000000000000000000000000000000000000060648201526084016101fe565b73ffffffffffffffffffffffffffffffffffffffff841660009081527f310970b1d84cbb8af371a12019b396e9511a9b44411c1dabeec3e3d59d9a50f860205260409020547f310970b1d84cbb8af371a12019b396e9511a9b44411c1dabeec3e3d59d9a50f69060ff1661094d57805460018101825560008281526020812090910180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff881617905560048201805460ff16916109338361124a565b91906101000a81548160ff021916908360ff160217905550505b805461095b90600190611187565b73ffffffffffffffffffffffffffffffffffffffff86166000908152600180840160209081526040808420949094556002808601825284842080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169093179092556003850190529190206109d2918690611080565b506004810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffff166201000017905560405173ffffffffffffffffffffffffffffffffffffffff8616907f8c25e214c5693ebaf8008875bacedeb9e0aafd393864a314ed1801b2a4e13dd990610a4a9087906111fc565b60405180910390a26004015460ff16949350505050565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff163314610b49576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e657220697320616c60448201527f6c6f77656400000000000000000000000000000000000000000000000000000060648201526084016101fe565b507f31434318735a8e6385da596be365952169e52986860b974818986b522d23520d80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff163314610c98576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e657220697320616c60448201527f6c6f77656400000000000000000000000000000000000000000000000000000060648201526084016101fe565b507f31434318735a8e6385da596be365952169e52986860b974818986b522d23520c80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff16331480610d7557503360009081526020829052604090205460ff165b610e01576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e6572206f72206f7060448201527f657261746f7220616c6c6f77656400000000000000000000000000000000000060648201526084016101fe565b5073ffffffffffffffffffffffffffffffffffffffff1660009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff16331480610ee657503360009081526020829052604090205460ff165b610f72576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e6572206f72206f7060448201527f657261746f7220616c6c6f77656400000000000000000000000000000000000060648201526084016101fe565b5073ffffffffffffffffffffffffffffffffffffffff1660009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90565b60008261100f838261126a565b915081101561107a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d6d6174682d6164642d6f766572666c6f7700000000000000000000000060448201526064016101fe565b92915050565b82600281019282156110ae579160200282015b828111156110ae578235825591602001919060010190611093565b506110ba9291506110be565b5090565b5b808211156110ba57600081556001016110bf565b803573ffffffffffffffffffffffffffffffffffffffff811681146110f757600080fd5b919050565b6000806060838503121561110f57600080fd5b611118836110d3565b91508360608401111561112a57600080fd5b50926020919091019150565b60006020828403121561114857600080fd5b611151826110d3565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008282101561119957611199611158565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6040818101908383376000815292915050565b600060ff82168061122257611222611158565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0192915050565b600060ff821660ff81141561126157611261611158565b60010192915050565b6000821982111561127d5761127d611158565b50019056fea26469706673582212201f5961c9e52f7c997c88df3260b0ca9b3d9545d0ae36b9b3fc88fbe5a65da18264736f6c634300080b0033",
}

// MigrateParticipantsFacetABI is the input ABI used to generate the binding from.
// Deprecated: Use MigrateParticipantsFacetMetaData.ABI instead.
var MigrateParticipantsFacetABI = MigrateParticipantsFacetMetaData.ABI

// MigrateParticipantsFacetBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MigrateParticipantsFacetMetaData.Bin instead.
var MigrateParticipantsFacetBin = MigrateParticipantsFacetMetaData.Bin

// DeployMigrateParticipantsFacet deploys a new Ethereum contract, binding an instance of MigrateParticipantsFacet to it.
func DeployMigrateParticipantsFacet(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *MigrateParticipantsFacet, error) {
	parsed, err := MigrateParticipantsFacetMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MigrateParticipantsFacetBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MigrateParticipantsFacet{MigrateParticipantsFacetCaller: MigrateParticipantsFacetCaller{contract: contract}, MigrateParticipantsFacetTransactor: MigrateParticipantsFacetTransactor{contract: contract}, MigrateParticipantsFacetFilterer: MigrateParticipantsFacetFilterer{contract: contract}}, nil
}

// MigrateParticipantsFacet is an auto generated Go binding around an Ethereum contract.
type MigrateParticipantsFacet struct {
	MigrateParticipantsFacetCaller     // Read-only binding to the contract
	MigrateParticipantsFacetTransactor // Write-only binding to the contract
	MigrateParticipantsFacetFilterer   // Log filterer for contract events
}

// MigrateParticipantsFacetCaller is an auto generated read-only Go binding around an Ethereum contract.
type MigrateParticipantsFacetCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MigrateParticipantsFacetTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MigrateParticipantsFacetTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MigrateParticipantsFacetFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MigrateParticipantsFacetFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MigrateParticipantsFacetSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MigrateParticipantsFacetSession struct {
	Contract     *MigrateParticipantsFacet // Generic contract binding to set the session for
	CallOpts     bind.CallOpts             // Call options to use throughout this session
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// MigrateParticipantsFacetCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MigrateParticipantsFacetCallerSession struct {
	Contract *MigrateParticipantsFacetCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                   // Call options to use throughout this session
}

// MigrateParticipantsFacetTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MigrateParticipantsFacetTransactorSession struct {
	Contract     *MigrateParticipantsFacetTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                   // Transaction auth options to use throughout this session
}

// MigrateParticipantsFacetRaw is an auto generated low-level Go binding around an Ethereum contract.
type MigrateParticipantsFacetRaw struct {
	Contract *MigrateParticipantsFacet // Generic contract binding to access the raw methods on
}

// MigrateParticipantsFacetCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MigrateParticipantsFacetCallerRaw struct {
	Contract *MigrateParticipantsFacetCaller // Generic read-only contract binding to access the raw methods on
}

// MigrateParticipantsFacetTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MigrateParticipantsFacetTransactorRaw struct {
	Contract *MigrateParticipantsFacetTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMigrateParticipantsFacet creates a new instance of MigrateParticipantsFacet, bound to a specific deployed contract.
func NewMigrateParticipantsFacet(address common.Address, backend bind.ContractBackend) (*MigrateParticipantsFacet, error) {
	contract, err := bindMigrateParticipantsFacet(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MigrateParticipantsFacet{MigrateParticipantsFacetCaller: MigrateParticipantsFacetCaller{contract: contract}, MigrateParticipantsFacetTransactor: MigrateParticipantsFacetTransactor{contract: contract}, MigrateParticipantsFacetFilterer: MigrateParticipantsFacetFilterer{contract: contract}}, nil
}

// NewMigrateParticipantsFacetCaller creates a new read-only instance of MigrateParticipantsFacet, bound to a specific deployed contract.
func NewMigrateParticipantsFacetCaller(address common.Address, caller bind.ContractCaller) (*MigrateParticipantsFacetCaller, error) {
	contract, err := bindMigrateParticipantsFacet(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MigrateParticipantsFacetCaller{contract: contract}, nil
}

// NewMigrateParticipantsFacetTransactor creates a new write-only instance of MigrateParticipantsFacet, bound to a specific deployed contract.
func NewMigrateParticipantsFacetTransactor(address common.Address, transactor bind.ContractTransactor) (*MigrateParticipantsFacetTransactor, error) {
	contract, err := bindMigrateParticipantsFacet(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MigrateParticipantsFacetTransactor{contract: contract}, nil
}

// NewMigrateParticipantsFacetFilterer creates a new log filterer instance of MigrateParticipantsFacet, bound to a specific deployed contract.
func NewMigrateParticipantsFacetFilterer(address common.Address, filterer bind.ContractFilterer) (*MigrateParticipantsFacetFilterer, error) {
	contract, err := bindMigrateParticipantsFacet(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MigrateParticipantsFacetFilterer{contract: contract}, nil
}

// bindMigrateParticipantsFacet binds a generic wrapper to an already deployed contract.
func bindMigrateParticipantsFacet(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MigrateParticipantsFacetABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MigrateParticipantsFacet *MigrateParticipantsFacetRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MigrateParticipantsFacet.Contract.MigrateParticipantsFacetCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MigrateParticipantsFacet *MigrateParticipantsFacetRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.Contract.MigrateParticipantsFacetTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MigrateParticipantsFacet *MigrateParticipantsFacetRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.Contract.MigrateParticipantsFacetTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MigrateParticipantsFacet *MigrateParticipantsFacetCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MigrateParticipantsFacet.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MigrateParticipantsFacet *MigrateParticipantsFacetTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MigrateParticipantsFacet *MigrateParticipantsFacetTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.Contract.contract.Transact(opts, method, params...)
}

// AddValidatorImmediate is a paid mutator transaction binding the contract method 0x71612d07.
//
// Solidity: function addValidatorImmediate(address _validator, uint256[2] _madID) returns(uint8)
func (_MigrateParticipantsFacet *MigrateParticipantsFacetTransactor) AddValidatorImmediate(opts *bind.TransactOpts, _validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.contract.Transact(opts, "addValidatorImmediate", _validator, _madID)
}

// AddValidatorImmediate is a paid mutator transaction binding the contract method 0x71612d07.
//
// Solidity: function addValidatorImmediate(address _validator, uint256[2] _madID) returns(uint8)
func (_MigrateParticipantsFacet *MigrateParticipantsFacetSession) AddValidatorImmediate(_validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.Contract.AddValidatorImmediate(&_MigrateParticipantsFacet.TransactOpts, _validator, _madID)
}

// AddValidatorImmediate is a paid mutator transaction binding the contract method 0x71612d07.
//
// Solidity: function addValidatorImmediate(address _validator, uint256[2] _madID) returns(uint8)
func (_MigrateParticipantsFacet *MigrateParticipantsFacetTransactorSession) AddValidatorImmediate(_validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.Contract.AddValidatorImmediate(&_MigrateParticipantsFacet.TransactOpts, _validator, _madID)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_MigrateParticipantsFacet *MigrateParticipantsFacetTransactor) GrantOperator(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.contract.Transact(opts, "grantOperator", who)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_MigrateParticipantsFacet *MigrateParticipantsFacetSession) GrantOperator(who common.Address) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.Contract.GrantOperator(&_MigrateParticipantsFacet.TransactOpts, who)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_MigrateParticipantsFacet *MigrateParticipantsFacetTransactorSession) GrantOperator(who common.Address) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.Contract.GrantOperator(&_MigrateParticipantsFacet.TransactOpts, who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_MigrateParticipantsFacet *MigrateParticipantsFacetTransactor) GrantOwner(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.contract.Transact(opts, "grantOwner", who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_MigrateParticipantsFacet *MigrateParticipantsFacetSession) GrantOwner(who common.Address) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.Contract.GrantOwner(&_MigrateParticipantsFacet.TransactOpts, who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_MigrateParticipantsFacet *MigrateParticipantsFacetTransactorSession) GrantOwner(who common.Address) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.Contract.GrantOwner(&_MigrateParticipantsFacet.TransactOpts, who)
}

// RemoveValidatorImmediate is a paid mutator transaction binding the contract method 0x06246a1d.
//
// Solidity: function removeValidatorImmediate(address _validator, uint256[2] _madID) returns(uint8)
func (_MigrateParticipantsFacet *MigrateParticipantsFacetTransactor) RemoveValidatorImmediate(opts *bind.TransactOpts, _validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.contract.Transact(opts, "removeValidatorImmediate", _validator, _madID)
}

// RemoveValidatorImmediate is a paid mutator transaction binding the contract method 0x06246a1d.
//
// Solidity: function removeValidatorImmediate(address _validator, uint256[2] _madID) returns(uint8)
func (_MigrateParticipantsFacet *MigrateParticipantsFacetSession) RemoveValidatorImmediate(_validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.Contract.RemoveValidatorImmediate(&_MigrateParticipantsFacet.TransactOpts, _validator, _madID)
}

// RemoveValidatorImmediate is a paid mutator transaction binding the contract method 0x06246a1d.
//
// Solidity: function removeValidatorImmediate(address _validator, uint256[2] _madID) returns(uint8)
func (_MigrateParticipantsFacet *MigrateParticipantsFacetTransactorSession) RemoveValidatorImmediate(_validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.Contract.RemoveValidatorImmediate(&_MigrateParticipantsFacet.TransactOpts, _validator, _madID)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_MigrateParticipantsFacet *MigrateParticipantsFacetTransactor) RevokeOperator(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.contract.Transact(opts, "revokeOperator", who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_MigrateParticipantsFacet *MigrateParticipantsFacetSession) RevokeOperator(who common.Address) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.Contract.RevokeOperator(&_MigrateParticipantsFacet.TransactOpts, who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_MigrateParticipantsFacet *MigrateParticipantsFacetTransactorSession) RevokeOperator(who common.Address) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.Contract.RevokeOperator(&_MigrateParticipantsFacet.TransactOpts, who)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_MigrateParticipantsFacet *MigrateParticipantsFacetTransactor) SetGovernance(opts *bind.TransactOpts, governance_ common.Address) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.contract.Transact(opts, "setGovernance", governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_MigrateParticipantsFacet *MigrateParticipantsFacetSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.Contract.SetGovernance(&_MigrateParticipantsFacet.TransactOpts, governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_MigrateParticipantsFacet *MigrateParticipantsFacetTransactorSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.Contract.SetGovernance(&_MigrateParticipantsFacet.TransactOpts, governance_)
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_MigrateParticipantsFacet *MigrateParticipantsFacetTransactor) Start(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.contract.Transact(opts, "start")
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_MigrateParticipantsFacet *MigrateParticipantsFacetSession) Start() (*types.Transaction, error) {
	return _MigrateParticipantsFacet.Contract.Start(&_MigrateParticipantsFacet.TransactOpts)
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_MigrateParticipantsFacet *MigrateParticipantsFacetTransactorSession) Start() (*types.Transaction, error) {
	return _MigrateParticipantsFacet.Contract.Start(&_MigrateParticipantsFacet.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_MigrateParticipantsFacet *MigrateParticipantsFacetTransactor) Stop(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.contract.Transact(opts, "stop")
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_MigrateParticipantsFacet *MigrateParticipantsFacetSession) Stop() (*types.Transaction, error) {
	return _MigrateParticipantsFacet.Contract.Stop(&_MigrateParticipantsFacet.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_MigrateParticipantsFacet *MigrateParticipantsFacetTransactorSession) Stop() (*types.Transaction, error) {
	return _MigrateParticipantsFacet.Contract.Stop(&_MigrateParticipantsFacet.TransactOpts)
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_MigrateParticipantsFacet *MigrateParticipantsFacetTransactor) TakeOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.contract.Transact(opts, "takeOwnership")
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_MigrateParticipantsFacet *MigrateParticipantsFacetSession) TakeOwnership() (*types.Transaction, error) {
	return _MigrateParticipantsFacet.Contract.TakeOwnership(&_MigrateParticipantsFacet.TransactOpts)
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_MigrateParticipantsFacet *MigrateParticipantsFacetTransactorSession) TakeOwnership() (*types.Transaction, error) {
	return _MigrateParticipantsFacet.Contract.TakeOwnership(&_MigrateParticipantsFacet.TransactOpts)
}

// MigrateSnapshotsFacetMetaData contains all meta data concerning the MigrateSnapshotsFacet contract.
var MigrateSnapshotsFacetMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"grantOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governance_\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signatureGroup\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_bclaims\",\"type\":\"bytes\"}],\"name\":\"snapshot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50600061002561003e60201b610a5b1760201c565b60010180546001600160a01b0319163317905550610062565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90565b610df3806100716000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063dc97805911610050578063dc978059146100a7578063e348da13146100ba578063fad8b32a146100cd57600080fd5b806360536172146100775780637d7335b014610081578063ab033ea914610094575b600080fd5b61007f6100e0565b005b61007f61008f366004610c44565b61020a565b61007f6100a2366004610cbe565b6104de565b61007f6100b5366004610cbe565b61062d565b61007f6100c8366004610cbe565b61077c565b61007f6100db366004610cbe565b6108ed565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520c547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff1633146101cd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f41636365737320436f6e74726f6c3a206f776e657273686970206e6f7420677260448201527f616e74656400000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6002810180547fffffffffffffffffffffffff00000000000000000000000000000000000000009081169091556001909101805490911633179055565b3360009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a602081905260409091205460ff166102cb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160448201527f6c6c6f776564000000000000000000000000000000000000000000000000000060648201526084016101c4565b60007fd02b08f6836233a79224d6de3c3df078574b0f84d75d2a48f85a5a3cacc729159050600061033485858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525060089250610a7f915050565b9050600061037a86868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250600c9250610a7f915050565b60008a815260208590526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660019081178255919250906103c49082018888610b44565b506103d3600282018a8a610b44565b5060038101805463ffffffff848116640100000000027fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000090921643821617919091179091558154908416610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000ff909116178155600184015460009060ff161561045c575060015b6001850180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690556040805163ffffffff868116825285166020820152600081830152905133918d917f6d438b6b835d16cdae6efdc0259fdfba17e6aa32dae81863a2467866f85f724a9181900360600190a35050505050505050505050565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff1633146105c6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e657220697320616c60448201527f6c6f77656400000000000000000000000000000000000000000000000000000060648201526084016101c4565b507f31434318735a8e6385da596be365952169e52986860b974818986b522d23520d80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff163314610715576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e657220697320616c60448201527f6c6f77656400000000000000000000000000000000000000000000000000000060648201526084016101c4565b507f31434318735a8e6385da596be365952169e52986860b974818986b522d23520c80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff163314806107f257503360009081526020829052604090205460ff165b61087e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e6572206f72206f7060448201527f657261746f7220616c6c6f77656400000000000000000000000000000000000060648201526084016101c4565b5073ffffffffffffffffffffffffffffffffffffffff1660009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff1633148061096357503360009081526020829052604090205460ff165b6109ef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e6572206f72206f7060448201527f657261746f7220616c6c6f77656400000000000000000000000000000000000060648201526084016101c4565b5073ffffffffffffffffffffffffffffffffffffffff1660009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90565b600082610a8d836003610cfb565b81518110610a9d57610a9d610d3a565b016020015160f81c905082610ab3836002610cfb565b81518110610ac357610ac3610d3a565b60209101015160f81c60089190911b64ffffffff00161782610ae6836001610cfb565b81518110610af657610af6610d3a565b602001015160f81c60f81b60f81c60ff1660088263ffffffff16901b179050828281518110610b2757610b27610d3a565b60209101015160f81c60089190911b64ffffffff00161792915050565b828054610b5090610d69565b90600052602060002090601f016020900481019282610b725760008555610bd6565b82601f10610ba9578280017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00823516178555610bd6565b82800160010185558215610bd6579182015b82811115610bd6578235825591602001919060010190610bbb565b50610be2929150610be6565b5090565b5b80821115610be25760008155600101610be7565b60008083601f840112610c0d57600080fd5b50813567ffffffffffffffff811115610c2557600080fd5b602083019150836020828501011115610c3d57600080fd5b9250929050565b600080600080600060608688031215610c5c57600080fd5b85359450602086013567ffffffffffffffff80821115610c7b57600080fd5b610c8789838a01610bfb565b90965094506040880135915080821115610ca057600080fd5b50610cad88828901610bfb565b969995985093965092949392505050565b600060208284031215610cd057600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610cf457600080fd5b9392505050565b60008219821115610d35577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600181811c90821680610d7d57607f821691505b60208210811415610db7577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b5091905056fea26469706673582212209a6ada66955c7d1246bd6823cc6219919d0f630c6add4cd4ebd0edeb54da7e8864736f6c634300080b0033",
}

// MigrateSnapshotsFacetABI is the input ABI used to generate the binding from.
// Deprecated: Use MigrateSnapshotsFacetMetaData.ABI instead.
var MigrateSnapshotsFacetABI = MigrateSnapshotsFacetMetaData.ABI

// MigrateSnapshotsFacetBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MigrateSnapshotsFacetMetaData.Bin instead.
var MigrateSnapshotsFacetBin = MigrateSnapshotsFacetMetaData.Bin

// DeployMigrateSnapshotsFacet deploys a new Ethereum contract, binding an instance of MigrateSnapshotsFacet to it.
func DeployMigrateSnapshotsFacet(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *MigrateSnapshotsFacet, error) {
	parsed, err := MigrateSnapshotsFacetMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MigrateSnapshotsFacetBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MigrateSnapshotsFacet{MigrateSnapshotsFacetCaller: MigrateSnapshotsFacetCaller{contract: contract}, MigrateSnapshotsFacetTransactor: MigrateSnapshotsFacetTransactor{contract: contract}, MigrateSnapshotsFacetFilterer: MigrateSnapshotsFacetFilterer{contract: contract}}, nil
}

// MigrateSnapshotsFacet is an auto generated Go binding around an Ethereum contract.
type MigrateSnapshotsFacet struct {
	MigrateSnapshotsFacetCaller     // Read-only binding to the contract
	MigrateSnapshotsFacetTransactor // Write-only binding to the contract
	MigrateSnapshotsFacetFilterer   // Log filterer for contract events
}

// MigrateSnapshotsFacetCaller is an auto generated read-only Go binding around an Ethereum contract.
type MigrateSnapshotsFacetCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MigrateSnapshotsFacetTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MigrateSnapshotsFacetTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MigrateSnapshotsFacetFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MigrateSnapshotsFacetFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MigrateSnapshotsFacetSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MigrateSnapshotsFacetSession struct {
	Contract     *MigrateSnapshotsFacet // Generic contract binding to set the session for
	CallOpts     bind.CallOpts          // Call options to use throughout this session
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// MigrateSnapshotsFacetCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MigrateSnapshotsFacetCallerSession struct {
	Contract *MigrateSnapshotsFacetCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                // Call options to use throughout this session
}

// MigrateSnapshotsFacetTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MigrateSnapshotsFacetTransactorSession struct {
	Contract     *MigrateSnapshotsFacetTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                // Transaction auth options to use throughout this session
}

// MigrateSnapshotsFacetRaw is an auto generated low-level Go binding around an Ethereum contract.
type MigrateSnapshotsFacetRaw struct {
	Contract *MigrateSnapshotsFacet // Generic contract binding to access the raw methods on
}

// MigrateSnapshotsFacetCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MigrateSnapshotsFacetCallerRaw struct {
	Contract *MigrateSnapshotsFacetCaller // Generic read-only contract binding to access the raw methods on
}

// MigrateSnapshotsFacetTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MigrateSnapshotsFacetTransactorRaw struct {
	Contract *MigrateSnapshotsFacetTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMigrateSnapshotsFacet creates a new instance of MigrateSnapshotsFacet, bound to a specific deployed contract.
func NewMigrateSnapshotsFacet(address common.Address, backend bind.ContractBackend) (*MigrateSnapshotsFacet, error) {
	contract, err := bindMigrateSnapshotsFacet(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MigrateSnapshotsFacet{MigrateSnapshotsFacetCaller: MigrateSnapshotsFacetCaller{contract: contract}, MigrateSnapshotsFacetTransactor: MigrateSnapshotsFacetTransactor{contract: contract}, MigrateSnapshotsFacetFilterer: MigrateSnapshotsFacetFilterer{contract: contract}}, nil
}

// NewMigrateSnapshotsFacetCaller creates a new read-only instance of MigrateSnapshotsFacet, bound to a specific deployed contract.
func NewMigrateSnapshotsFacetCaller(address common.Address, caller bind.ContractCaller) (*MigrateSnapshotsFacetCaller, error) {
	contract, err := bindMigrateSnapshotsFacet(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MigrateSnapshotsFacetCaller{contract: contract}, nil
}

// NewMigrateSnapshotsFacetTransactor creates a new write-only instance of MigrateSnapshotsFacet, bound to a specific deployed contract.
func NewMigrateSnapshotsFacetTransactor(address common.Address, transactor bind.ContractTransactor) (*MigrateSnapshotsFacetTransactor, error) {
	contract, err := bindMigrateSnapshotsFacet(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MigrateSnapshotsFacetTransactor{contract: contract}, nil
}

// NewMigrateSnapshotsFacetFilterer creates a new log filterer instance of MigrateSnapshotsFacet, bound to a specific deployed contract.
func NewMigrateSnapshotsFacetFilterer(address common.Address, filterer bind.ContractFilterer) (*MigrateSnapshotsFacetFilterer, error) {
	contract, err := bindMigrateSnapshotsFacet(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MigrateSnapshotsFacetFilterer{contract: contract}, nil
}

// bindMigrateSnapshotsFacet binds a generic wrapper to an already deployed contract.
func bindMigrateSnapshotsFacet(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MigrateSnapshotsFacetABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MigrateSnapshotsFacet.Contract.MigrateSnapshotsFacetCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MigrateSnapshotsFacet.Contract.MigrateSnapshotsFacetTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MigrateSnapshotsFacet.Contract.MigrateSnapshotsFacetTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MigrateSnapshotsFacet.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MigrateSnapshotsFacet.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MigrateSnapshotsFacet.Contract.contract.Transact(opts, method, params...)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetTransactor) GrantOperator(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _MigrateSnapshotsFacet.contract.Transact(opts, "grantOperator", who)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetSession) GrantOperator(who common.Address) (*types.Transaction, error) {
	return _MigrateSnapshotsFacet.Contract.GrantOperator(&_MigrateSnapshotsFacet.TransactOpts, who)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetTransactorSession) GrantOperator(who common.Address) (*types.Transaction, error) {
	return _MigrateSnapshotsFacet.Contract.GrantOperator(&_MigrateSnapshotsFacet.TransactOpts, who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetTransactor) GrantOwner(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _MigrateSnapshotsFacet.contract.Transact(opts, "grantOwner", who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetSession) GrantOwner(who common.Address) (*types.Transaction, error) {
	return _MigrateSnapshotsFacet.Contract.GrantOwner(&_MigrateSnapshotsFacet.TransactOpts, who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetTransactorSession) GrantOwner(who common.Address) (*types.Transaction, error) {
	return _MigrateSnapshotsFacet.Contract.GrantOwner(&_MigrateSnapshotsFacet.TransactOpts, who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetTransactor) RevokeOperator(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _MigrateSnapshotsFacet.contract.Transact(opts, "revokeOperator", who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetSession) RevokeOperator(who common.Address) (*types.Transaction, error) {
	return _MigrateSnapshotsFacet.Contract.RevokeOperator(&_MigrateSnapshotsFacet.TransactOpts, who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetTransactorSession) RevokeOperator(who common.Address) (*types.Transaction, error) {
	return _MigrateSnapshotsFacet.Contract.RevokeOperator(&_MigrateSnapshotsFacet.TransactOpts, who)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetTransactor) SetGovernance(opts *bind.TransactOpts, governance_ common.Address) (*types.Transaction, error) {
	return _MigrateSnapshotsFacet.contract.Transact(opts, "setGovernance", governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _MigrateSnapshotsFacet.Contract.SetGovernance(&_MigrateSnapshotsFacet.TransactOpts, governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetTransactorSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _MigrateSnapshotsFacet.Contract.SetGovernance(&_MigrateSnapshotsFacet.TransactOpts, governance_)
}

// Snapshot is a paid mutator transaction binding the contract method 0x7d7335b0.
//
// Solidity: function snapshot(uint256 snapshotId, bytes _signatureGroup, bytes _bclaims) returns()
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetTransactor) Snapshot(opts *bind.TransactOpts, snapshotId *big.Int, _signatureGroup []byte, _bclaims []byte) (*types.Transaction, error) {
	return _MigrateSnapshotsFacet.contract.Transact(opts, "snapshot", snapshotId, _signatureGroup, _bclaims)
}

// Snapshot is a paid mutator transaction binding the contract method 0x7d7335b0.
//
// Solidity: function snapshot(uint256 snapshotId, bytes _signatureGroup, bytes _bclaims) returns()
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetSession) Snapshot(snapshotId *big.Int, _signatureGroup []byte, _bclaims []byte) (*types.Transaction, error) {
	return _MigrateSnapshotsFacet.Contract.Snapshot(&_MigrateSnapshotsFacet.TransactOpts, snapshotId, _signatureGroup, _bclaims)
}

// Snapshot is a paid mutator transaction binding the contract method 0x7d7335b0.
//
// Solidity: function snapshot(uint256 snapshotId, bytes _signatureGroup, bytes _bclaims) returns()
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetTransactorSession) Snapshot(snapshotId *big.Int, _signatureGroup []byte, _bclaims []byte) (*types.Transaction, error) {
	return _MigrateSnapshotsFacet.Contract.Snapshot(&_MigrateSnapshotsFacet.TransactOpts, snapshotId, _signatureGroup, _bclaims)
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetTransactor) TakeOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MigrateSnapshotsFacet.contract.Transact(opts, "takeOwnership")
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetSession) TakeOwnership() (*types.Transaction, error) {
	return _MigrateSnapshotsFacet.Contract.TakeOwnership(&_MigrateSnapshotsFacet.TransactOpts)
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetTransactorSession) TakeOwnership() (*types.Transaction, error) {
	return _MigrateSnapshotsFacet.Contract.TakeOwnership(&_MigrateSnapshotsFacet.TransactOpts)
}

// MigrateStakingFacetMetaData contains all meta data concerning the MigrateStakingFacet contract.
var MigrateStakingFacetMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"grantOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockedReward\",\"type\":\"uint256\"}],\"name\":\"setBalancesFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governance_\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50600061002561003e60201b610ed21760201c565b60010180546001600160a01b0319163317905550610062565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90565b61108e806100716000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063dc9780591161005b578063dc978059146100b2578063e348da13146100c5578063e86a737d146100d8578063fad8b32a146100eb57600080fd5b806307da68f51461008d5780636053617214610097578063ab033ea91461009f578063be9a65551461008d575b600080fd5b6100956100fe565b005b6100956101c7565b6100956100ad366004610f9d565b6102ec565b6100956100c0366004610f9d565b61043b565b6100956100d3366004610f9d565b61058a565b6100956100e6366004610fbf565b6106fb565b6100956100f9366004610f9d565b610d64565b3360009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a602081905260409091205460ff166101c4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160448201527f6c6c6f776564000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b50565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520c547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff1633146102af576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f41636365737320436f6e74726f6c3a206f776e657273686970206e6f7420677260448201527f616e74656400000000000000000000000000000000000000000000000000000060648201526084016101bb565b6002810180547fffffffffffffffffffffffff00000000000000000000000000000000000000009081169091556001909101805490911633179055565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff1633146103d4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e657220697320616c60448201527f6c6f77656400000000000000000000000000000000000000000000000000000060648201526084016101bb565b507f31434318735a8e6385da596be365952169e52986860b974818986b522d23520d80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff163314610523576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e657220697320616c60448201527f6c6f77656400000000000000000000000000000000000000000000000000000060648201526084016101bb565b507f31434318735a8e6385da596be365952169e52986860b974818986b522d23520c80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff1633148061060057503360009081526020829052604090205460ff165b61068c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e6572206f72206f7060448201527f657261746f7220616c6c6f77656400000000000000000000000000000000000060648201526084016101bb565b5073ffffffffffffffffffffffffffffffffffffffff1660009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b3360009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a602081905260409091205460ff166107bc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160448201527f6c6c6f776564000000000000000000000000000000000000000000000000000060648201526084016101bb565b7fcab1f840c5079216f50ee5ceadd06b2639a4db685e2943cdfe10511c4e47eee4805460ff1615610849576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f69732073746f707065640000000000000000000000000000000000000000000060448201526064016101bb565b73ffffffffffffffffffffffffffffffffffffffff861660009081527f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237f860205260409020547f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237ef908087111561095a5760006108c48883610ef6565b60078401546040517f40c10f190000000000000000000000000000000000000000000000000000000081523060048201526024810183905291925073ffffffffffffffffffffffffffffffffffffffff169081906340c10f1990604401600060405180830381600087803b15801561093b57600080fd5b505af115801561094f573d6000803e3d6000fd5b505050505050610a0f565b80871015610a0f57600061096e8289610ef6565b60078401546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526024810183905291925073ffffffffffffffffffffffffffffffffffffffff169063a9059cbb906044016020604051808303816000875af11580156109e8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0c9190610ff8565b50505b73ffffffffffffffffffffffffffffffffffffffff8816600090815260098301602052604090208781556004015480871115610ae7576000610a518883610ef6565b60078501546040517f40c10f190000000000000000000000000000000000000000000000000000000081523060048201526024810183905291925073ffffffffffffffffffffffffffffffffffffffff169081906340c10f1990604401600060405180830381600087803b158015610ac857600080fd5b505af1158015610adc573d6000803e3d6000fd5b505050505050610b9c565b80871015610b9c576000610afb8289610ef6565b60078501546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526024810183905291925073ffffffffffffffffffffffffffffffffffffffff169063a9059cbb906044016020604051808303816000875af1158015610b75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b999190610ff8565b50505b73ffffffffffffffffffffffffffffffffffffffff891660009081526009840160205260409020600481018890556003015480871115610c75576000610be28883610ef6565b60088601546040517f40c10f190000000000000000000000000000000000000000000000000000000081523060048201526024810183905291925073ffffffffffffffffffffffffffffffffffffffff16906340c10f1990604401600060405180830381600087803b158015610c5757600080fd5b505af1158015610c6b573d6000803e3d6000fd5b5050505050610d2a565b80871015610d2a576000610c898289610ef6565b60088601546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526024810183905291925073ffffffffffffffffffffffffffffffffffffffff169063a9059cbb906044016020604051808303816000875af1158015610d03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d279190610ff8565b50505b50505073ffffffffffffffffffffffffffffffffffffffff9096166000908152600990960160205250506040909320600301929092555050565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff16331480610dda57503360009081526020829052604090205460ff165b610e66576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e6572206f72206f7060448201527f657261746f7220616c6c6f77656400000000000000000000000000000000000060648201526084016101bb565b5073ffffffffffffffffffffffffffffffffffffffff1660009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90565b600082610f03838261101a565b9150811115610f6e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f64732d6d6174682d7375622d756e646572666c6f77000000000000000000000060448201526064016101bb565b92915050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610f9857600080fd5b919050565b600060208284031215610faf57600080fd5b610fb882610f74565b9392505050565b60008060008060808587031215610fd557600080fd5b610fde85610f74565b966020860135965060408601359560600135945092505050565b60006020828403121561100a57600080fd5b81518015158114610fb857600080fd5b600082821015611053577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b50039056fea26469706673582212205800dfd3b611fd5c79805e254545baec64450a2b836fb7ee5a6325cefb88efca64736f6c634300080b0033",
}

// MigrateStakingFacetABI is the input ABI used to generate the binding from.
// Deprecated: Use MigrateStakingFacetMetaData.ABI instead.
var MigrateStakingFacetABI = MigrateStakingFacetMetaData.ABI

// MigrateStakingFacetBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MigrateStakingFacetMetaData.Bin instead.
var MigrateStakingFacetBin = MigrateStakingFacetMetaData.Bin

// DeployMigrateStakingFacet deploys a new Ethereum contract, binding an instance of MigrateStakingFacet to it.
func DeployMigrateStakingFacet(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *MigrateStakingFacet, error) {
	parsed, err := MigrateStakingFacetMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MigrateStakingFacetBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MigrateStakingFacet{MigrateStakingFacetCaller: MigrateStakingFacetCaller{contract: contract}, MigrateStakingFacetTransactor: MigrateStakingFacetTransactor{contract: contract}, MigrateStakingFacetFilterer: MigrateStakingFacetFilterer{contract: contract}}, nil
}

// MigrateStakingFacet is an auto generated Go binding around an Ethereum contract.
type MigrateStakingFacet struct {
	MigrateStakingFacetCaller     // Read-only binding to the contract
	MigrateStakingFacetTransactor // Write-only binding to the contract
	MigrateStakingFacetFilterer   // Log filterer for contract events
}

// MigrateStakingFacetCaller is an auto generated read-only Go binding around an Ethereum contract.
type MigrateStakingFacetCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MigrateStakingFacetTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MigrateStakingFacetTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MigrateStakingFacetFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MigrateStakingFacetFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MigrateStakingFacetSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MigrateStakingFacetSession struct {
	Contract     *MigrateStakingFacet // Generic contract binding to set the session for
	CallOpts     bind.CallOpts        // Call options to use throughout this session
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// MigrateStakingFacetCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MigrateStakingFacetCallerSession struct {
	Contract *MigrateStakingFacetCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts              // Call options to use throughout this session
}

// MigrateStakingFacetTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MigrateStakingFacetTransactorSession struct {
	Contract     *MigrateStakingFacetTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts              // Transaction auth options to use throughout this session
}

// MigrateStakingFacetRaw is an auto generated low-level Go binding around an Ethereum contract.
type MigrateStakingFacetRaw struct {
	Contract *MigrateStakingFacet // Generic contract binding to access the raw methods on
}

// MigrateStakingFacetCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MigrateStakingFacetCallerRaw struct {
	Contract *MigrateStakingFacetCaller // Generic read-only contract binding to access the raw methods on
}

// MigrateStakingFacetTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MigrateStakingFacetTransactorRaw struct {
	Contract *MigrateStakingFacetTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMigrateStakingFacet creates a new instance of MigrateStakingFacet, bound to a specific deployed contract.
func NewMigrateStakingFacet(address common.Address, backend bind.ContractBackend) (*MigrateStakingFacet, error) {
	contract, err := bindMigrateStakingFacet(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MigrateStakingFacet{MigrateStakingFacetCaller: MigrateStakingFacetCaller{contract: contract}, MigrateStakingFacetTransactor: MigrateStakingFacetTransactor{contract: contract}, MigrateStakingFacetFilterer: MigrateStakingFacetFilterer{contract: contract}}, nil
}

// NewMigrateStakingFacetCaller creates a new read-only instance of MigrateStakingFacet, bound to a specific deployed contract.
func NewMigrateStakingFacetCaller(address common.Address, caller bind.ContractCaller) (*MigrateStakingFacetCaller, error) {
	contract, err := bindMigrateStakingFacet(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MigrateStakingFacetCaller{contract: contract}, nil
}

// NewMigrateStakingFacetTransactor creates a new write-only instance of MigrateStakingFacet, bound to a specific deployed contract.
func NewMigrateStakingFacetTransactor(address common.Address, transactor bind.ContractTransactor) (*MigrateStakingFacetTransactor, error) {
	contract, err := bindMigrateStakingFacet(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MigrateStakingFacetTransactor{contract: contract}, nil
}

// NewMigrateStakingFacetFilterer creates a new log filterer instance of MigrateStakingFacet, bound to a specific deployed contract.
func NewMigrateStakingFacetFilterer(address common.Address, filterer bind.ContractFilterer) (*MigrateStakingFacetFilterer, error) {
	contract, err := bindMigrateStakingFacet(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MigrateStakingFacetFilterer{contract: contract}, nil
}

// bindMigrateStakingFacet binds a generic wrapper to an already deployed contract.
func bindMigrateStakingFacet(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MigrateStakingFacetABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MigrateStakingFacet *MigrateStakingFacetRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MigrateStakingFacet.Contract.MigrateStakingFacetCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MigrateStakingFacet *MigrateStakingFacetRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MigrateStakingFacet.Contract.MigrateStakingFacetTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MigrateStakingFacet *MigrateStakingFacetRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MigrateStakingFacet.Contract.MigrateStakingFacetTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MigrateStakingFacet *MigrateStakingFacetCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MigrateStakingFacet.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MigrateStakingFacet *MigrateStakingFacetTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MigrateStakingFacet.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MigrateStakingFacet *MigrateStakingFacetTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MigrateStakingFacet.Contract.contract.Transact(opts, method, params...)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_MigrateStakingFacet *MigrateStakingFacetTransactor) GrantOperator(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _MigrateStakingFacet.contract.Transact(opts, "grantOperator", who)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_MigrateStakingFacet *MigrateStakingFacetSession) GrantOperator(who common.Address) (*types.Transaction, error) {
	return _MigrateStakingFacet.Contract.GrantOperator(&_MigrateStakingFacet.TransactOpts, who)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_MigrateStakingFacet *MigrateStakingFacetTransactorSession) GrantOperator(who common.Address) (*types.Transaction, error) {
	return _MigrateStakingFacet.Contract.GrantOperator(&_MigrateStakingFacet.TransactOpts, who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_MigrateStakingFacet *MigrateStakingFacetTransactor) GrantOwner(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _MigrateStakingFacet.contract.Transact(opts, "grantOwner", who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_MigrateStakingFacet *MigrateStakingFacetSession) GrantOwner(who common.Address) (*types.Transaction, error) {
	return _MigrateStakingFacet.Contract.GrantOwner(&_MigrateStakingFacet.TransactOpts, who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_MigrateStakingFacet *MigrateStakingFacetTransactorSession) GrantOwner(who common.Address) (*types.Transaction, error) {
	return _MigrateStakingFacet.Contract.GrantOwner(&_MigrateStakingFacet.TransactOpts, who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_MigrateStakingFacet *MigrateStakingFacetTransactor) RevokeOperator(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _MigrateStakingFacet.contract.Transact(opts, "revokeOperator", who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_MigrateStakingFacet *MigrateStakingFacetSession) RevokeOperator(who common.Address) (*types.Transaction, error) {
	return _MigrateStakingFacet.Contract.RevokeOperator(&_MigrateStakingFacet.TransactOpts, who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_MigrateStakingFacet *MigrateStakingFacetTransactorSession) RevokeOperator(who common.Address) (*types.Transaction, error) {
	return _MigrateStakingFacet.Contract.RevokeOperator(&_MigrateStakingFacet.TransactOpts, who)
}

// SetBalancesFor is a paid mutator transaction binding the contract method 0xe86a737d.
//
// Solidity: function setBalancesFor(address who, uint256 lockedStake, uint256 unlockedStake, uint256 unlockedReward) returns()
func (_MigrateStakingFacet *MigrateStakingFacetTransactor) SetBalancesFor(opts *bind.TransactOpts, who common.Address, lockedStake *big.Int, unlockedStake *big.Int, unlockedReward *big.Int) (*types.Transaction, error) {
	return _MigrateStakingFacet.contract.Transact(opts, "setBalancesFor", who, lockedStake, unlockedStake, unlockedReward)
}

// SetBalancesFor is a paid mutator transaction binding the contract method 0xe86a737d.
//
// Solidity: function setBalancesFor(address who, uint256 lockedStake, uint256 unlockedStake, uint256 unlockedReward) returns()
func (_MigrateStakingFacet *MigrateStakingFacetSession) SetBalancesFor(who common.Address, lockedStake *big.Int, unlockedStake *big.Int, unlockedReward *big.Int) (*types.Transaction, error) {
	return _MigrateStakingFacet.Contract.SetBalancesFor(&_MigrateStakingFacet.TransactOpts, who, lockedStake, unlockedStake, unlockedReward)
}

// SetBalancesFor is a paid mutator transaction binding the contract method 0xe86a737d.
//
// Solidity: function setBalancesFor(address who, uint256 lockedStake, uint256 unlockedStake, uint256 unlockedReward) returns()
func (_MigrateStakingFacet *MigrateStakingFacetTransactorSession) SetBalancesFor(who common.Address, lockedStake *big.Int, unlockedStake *big.Int, unlockedReward *big.Int) (*types.Transaction, error) {
	return _MigrateStakingFacet.Contract.SetBalancesFor(&_MigrateStakingFacet.TransactOpts, who, lockedStake, unlockedStake, unlockedReward)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_MigrateStakingFacet *MigrateStakingFacetTransactor) SetGovernance(opts *bind.TransactOpts, governance_ common.Address) (*types.Transaction, error) {
	return _MigrateStakingFacet.contract.Transact(opts, "setGovernance", governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_MigrateStakingFacet *MigrateStakingFacetSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _MigrateStakingFacet.Contract.SetGovernance(&_MigrateStakingFacet.TransactOpts, governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_MigrateStakingFacet *MigrateStakingFacetTransactorSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _MigrateStakingFacet.Contract.SetGovernance(&_MigrateStakingFacet.TransactOpts, governance_)
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_MigrateStakingFacet *MigrateStakingFacetTransactor) Start(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MigrateStakingFacet.contract.Transact(opts, "start")
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_MigrateStakingFacet *MigrateStakingFacetSession) Start() (*types.Transaction, error) {
	return _MigrateStakingFacet.Contract.Start(&_MigrateStakingFacet.TransactOpts)
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_MigrateStakingFacet *MigrateStakingFacetTransactorSession) Start() (*types.Transaction, error) {
	return _MigrateStakingFacet.Contract.Start(&_MigrateStakingFacet.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_MigrateStakingFacet *MigrateStakingFacetTransactor) Stop(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MigrateStakingFacet.contract.Transact(opts, "stop")
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_MigrateStakingFacet *MigrateStakingFacetSession) Stop() (*types.Transaction, error) {
	return _MigrateStakingFacet.Contract.Stop(&_MigrateStakingFacet.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_MigrateStakingFacet *MigrateStakingFacetTransactorSession) Stop() (*types.Transaction, error) {
	return _MigrateStakingFacet.Contract.Stop(&_MigrateStakingFacet.TransactOpts)
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_MigrateStakingFacet *MigrateStakingFacetTransactor) TakeOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MigrateStakingFacet.contract.Transact(opts, "takeOwnership")
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_MigrateStakingFacet *MigrateStakingFacetSession) TakeOwnership() (*types.Transaction, error) {
	return _MigrateStakingFacet.Contract.TakeOwnership(&_MigrateStakingFacet.TransactOpts)
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_MigrateStakingFacet *MigrateStakingFacetTransactorSession) TakeOwnership() (*types.Transaction, error) {
	return _MigrateStakingFacet.Contract.TakeOwnership(&_MigrateStakingFacet.TransactOpts)
}

// MintableERC20MetaData contains all meta data concerning the MintableERC20 contract.
var MintableERC20MetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// MintableERC20ABI is the input ABI used to generate the binding from.
// Deprecated: Use MintableERC20MetaData.ABI instead.
var MintableERC20ABI = MintableERC20MetaData.ABI

// MintableERC20 is an auto generated Go binding around an Ethereum contract.
type MintableERC20 struct {
	MintableERC20Caller     // Read-only binding to the contract
	MintableERC20Transactor // Write-only binding to the contract
	MintableERC20Filterer   // Log filterer for contract events
}

// MintableERC20Caller is an auto generated read-only Go binding around an Ethereum contract.
type MintableERC20Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MintableERC20Transactor is an auto generated write-only Go binding around an Ethereum contract.
type MintableERC20Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MintableERC20Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MintableERC20Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MintableERC20Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MintableERC20Session struct {
	Contract     *MintableERC20    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MintableERC20CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MintableERC20CallerSession struct {
	Contract *MintableERC20Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// MintableERC20TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MintableERC20TransactorSession struct {
	Contract     *MintableERC20Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// MintableERC20Raw is an auto generated low-level Go binding around an Ethereum contract.
type MintableERC20Raw struct {
	Contract *MintableERC20 // Generic contract binding to access the raw methods on
}

// MintableERC20CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MintableERC20CallerRaw struct {
	Contract *MintableERC20Caller // Generic read-only contract binding to access the raw methods on
}

// MintableERC20TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MintableERC20TransactorRaw struct {
	Contract *MintableERC20Transactor // Generic write-only contract binding to access the raw methods on
}

// NewMintableERC20 creates a new instance of MintableERC20, bound to a specific deployed contract.
func NewMintableERC20(address common.Address, backend bind.ContractBackend) (*MintableERC20, error) {
	contract, err := bindMintableERC20(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MintableERC20{MintableERC20Caller: MintableERC20Caller{contract: contract}, MintableERC20Transactor: MintableERC20Transactor{contract: contract}, MintableERC20Filterer: MintableERC20Filterer{contract: contract}}, nil
}

// NewMintableERC20Caller creates a new read-only instance of MintableERC20, bound to a specific deployed contract.
func NewMintableERC20Caller(address common.Address, caller bind.ContractCaller) (*MintableERC20Caller, error) {
	contract, err := bindMintableERC20(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MintableERC20Caller{contract: contract}, nil
}

// NewMintableERC20Transactor creates a new write-only instance of MintableERC20, bound to a specific deployed contract.
func NewMintableERC20Transactor(address common.Address, transactor bind.ContractTransactor) (*MintableERC20Transactor, error) {
	contract, err := bindMintableERC20(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MintableERC20Transactor{contract: contract}, nil
}

// NewMintableERC20Filterer creates a new log filterer instance of MintableERC20, bound to a specific deployed contract.
func NewMintableERC20Filterer(address common.Address, filterer bind.ContractFilterer) (*MintableERC20Filterer, error) {
	contract, err := bindMintableERC20(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MintableERC20Filterer{contract: contract}, nil
}

// bindMintableERC20 binds a generic wrapper to an already deployed contract.
func bindMintableERC20(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MintableERC20ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MintableERC20 *MintableERC20Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MintableERC20.Contract.MintableERC20Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MintableERC20 *MintableERC20Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MintableERC20.Contract.MintableERC20Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MintableERC20 *MintableERC20Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MintableERC20.Contract.MintableERC20Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MintableERC20 *MintableERC20CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MintableERC20.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MintableERC20 *MintableERC20TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MintableERC20.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MintableERC20 *MintableERC20TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MintableERC20.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address src, address who) view returns(uint256)
func (_MintableERC20 *MintableERC20Caller) Allowance(opts *bind.CallOpts, src common.Address, who common.Address) (*big.Int, error) {
	var out []interface{}
	err := _MintableERC20.contract.Call(opts, &out, "allowance", src, who)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address src, address who) view returns(uint256)
func (_MintableERC20 *MintableERC20Session) Allowance(src common.Address, who common.Address) (*big.Int, error) {
	return _MintableERC20.Contract.Allowance(&_MintableERC20.CallOpts, src, who)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address src, address who) view returns(uint256)
func (_MintableERC20 *MintableERC20CallerSession) Allowance(src common.Address, who common.Address) (*big.Int, error) {
	return _MintableERC20.Contract.Allowance(&_MintableERC20.CallOpts, src, who)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address who) view returns(uint256)
func (_MintableERC20 *MintableERC20Caller) BalanceOf(opts *bind.CallOpts, who common.Address) (*big.Int, error) {
	var out []interface{}
	err := _MintableERC20.contract.Call(opts, &out, "balanceOf", who)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address who) view returns(uint256)
func (_MintableERC20 *MintableERC20Session) BalanceOf(who common.Address) (*big.Int, error) {
	return _MintableERC20.Contract.BalanceOf(&_MintableERC20.CallOpts, who)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address who) view returns(uint256)
func (_MintableERC20 *MintableERC20CallerSession) BalanceOf(who common.Address) (*big.Int, error) {
	return _MintableERC20.Contract.BalanceOf(&_MintableERC20.CallOpts, who)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_MintableERC20 *MintableERC20Caller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _MintableERC20.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_MintableERC20 *MintableERC20Session) TotalSupply() (*big.Int, error) {
	return _MintableERC20.Contract.TotalSupply(&_MintableERC20.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_MintableERC20 *MintableERC20CallerSession) TotalSupply() (*big.Int, error) {
	return _MintableERC20.Contract.TotalSupply(&_MintableERC20.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address who, uint256 wad) returns(bool)
func (_MintableERC20 *MintableERC20Transactor) Approve(opts *bind.TransactOpts, who common.Address, wad *big.Int) (*types.Transaction, error) {
	return _MintableERC20.contract.Transact(opts, "approve", who, wad)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address who, uint256 wad) returns(bool)
func (_MintableERC20 *MintableERC20Session) Approve(who common.Address, wad *big.Int) (*types.Transaction, error) {
	return _MintableERC20.Contract.Approve(&_MintableERC20.TransactOpts, who, wad)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address who, uint256 wad) returns(bool)
func (_MintableERC20 *MintableERC20TransactorSession) Approve(who common.Address, wad *big.Int) (*types.Transaction, error) {
	return _MintableERC20.Contract.Approve(&_MintableERC20.TransactOpts, who, wad)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_MintableERC20 *MintableERC20Transactor) GrantOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _MintableERC20.contract.Transact(opts, "grantOperator", _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_MintableERC20 *MintableERC20Session) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _MintableERC20.Contract.GrantOperator(&_MintableERC20.TransactOpts, _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_MintableERC20 *MintableERC20TransactorSession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _MintableERC20.Contract.GrantOperator(&_MintableERC20.TransactOpts, _operator)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address guy, uint256 wad) returns()
func (_MintableERC20 *MintableERC20Transactor) Mint(opts *bind.TransactOpts, guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _MintableERC20.contract.Transact(opts, "mint", guy, wad)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address guy, uint256 wad) returns()
func (_MintableERC20 *MintableERC20Session) Mint(guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _MintableERC20.Contract.Mint(&_MintableERC20.TransactOpts, guy, wad)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address guy, uint256 wad) returns()
func (_MintableERC20 *MintableERC20TransactorSession) Mint(guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _MintableERC20.Contract.Mint(&_MintableERC20.TransactOpts, guy, wad)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address dst, uint256 wad) returns(bool)
func (_MintableERC20 *MintableERC20Transactor) Transfer(opts *bind.TransactOpts, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _MintableERC20.contract.Transact(opts, "transfer", dst, wad)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address dst, uint256 wad) returns(bool)
func (_MintableERC20 *MintableERC20Session) Transfer(dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _MintableERC20.Contract.Transfer(&_MintableERC20.TransactOpts, dst, wad)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address dst, uint256 wad) returns(bool)
func (_MintableERC20 *MintableERC20TransactorSession) Transfer(dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _MintableERC20.Contract.Transfer(&_MintableERC20.TransactOpts, dst, wad)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address src, address dst, uint256 wad) returns(bool)
func (_MintableERC20 *MintableERC20Transactor) TransferFrom(opts *bind.TransactOpts, src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _MintableERC20.contract.Transact(opts, "transferFrom", src, dst, wad)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address src, address dst, uint256 wad) returns(bool)
func (_MintableERC20 *MintableERC20Session) TransferFrom(src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _MintableERC20.Contract.TransferFrom(&_MintableERC20.TransactOpts, src, dst, wad)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address src, address dst, uint256 wad) returns(bool)
func (_MintableERC20 *MintableERC20TransactorSession) TransferFrom(src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _MintableERC20.Contract.TransferFrom(&_MintableERC20.TransactOpts, src, dst, wad)
}

// PClaimsParserLibraryMetaData contains all meta data concerning the PClaimsParserLibrary contract.
var PClaimsParserLibraryMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d7f7fd69a5f3fd1d24981d8a9274663860d5c9092ce907512ff29b9da4a1911964736f6c634300080b0033",
}

// PClaimsParserLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use PClaimsParserLibraryMetaData.ABI instead.
var PClaimsParserLibraryABI = PClaimsParserLibraryMetaData.ABI

// PClaimsParserLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use PClaimsParserLibraryMetaData.Bin instead.
var PClaimsParserLibraryBin = PClaimsParserLibraryMetaData.Bin

// DeployPClaimsParserLibrary deploys a new Ethereum contract, binding an instance of PClaimsParserLibrary to it.
func DeployPClaimsParserLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *PClaimsParserLibrary, error) {
	parsed, err := PClaimsParserLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(PClaimsParserLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &PClaimsParserLibrary{PClaimsParserLibraryCaller: PClaimsParserLibraryCaller{contract: contract}, PClaimsParserLibraryTransactor: PClaimsParserLibraryTransactor{contract: contract}, PClaimsParserLibraryFilterer: PClaimsParserLibraryFilterer{contract: contract}}, nil
}

// PClaimsParserLibrary is an auto generated Go binding around an Ethereum contract.
type PClaimsParserLibrary struct {
	PClaimsParserLibraryCaller     // Read-only binding to the contract
	PClaimsParserLibraryTransactor // Write-only binding to the contract
	PClaimsParserLibraryFilterer   // Log filterer for contract events
}

// PClaimsParserLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type PClaimsParserLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PClaimsParserLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PClaimsParserLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PClaimsParserLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PClaimsParserLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PClaimsParserLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PClaimsParserLibrarySession struct {
	Contract     *PClaimsParserLibrary // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// PClaimsParserLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PClaimsParserLibraryCallerSession struct {
	Contract *PClaimsParserLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// PClaimsParserLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PClaimsParserLibraryTransactorSession struct {
	Contract     *PClaimsParserLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// PClaimsParserLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type PClaimsParserLibraryRaw struct {
	Contract *PClaimsParserLibrary // Generic contract binding to access the raw methods on
}

// PClaimsParserLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PClaimsParserLibraryCallerRaw struct {
	Contract *PClaimsParserLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// PClaimsParserLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PClaimsParserLibraryTransactorRaw struct {
	Contract *PClaimsParserLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPClaimsParserLibrary creates a new instance of PClaimsParserLibrary, bound to a specific deployed contract.
func NewPClaimsParserLibrary(address common.Address, backend bind.ContractBackend) (*PClaimsParserLibrary, error) {
	contract, err := bindPClaimsParserLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &PClaimsParserLibrary{PClaimsParserLibraryCaller: PClaimsParserLibraryCaller{contract: contract}, PClaimsParserLibraryTransactor: PClaimsParserLibraryTransactor{contract: contract}, PClaimsParserLibraryFilterer: PClaimsParserLibraryFilterer{contract: contract}}, nil
}

// NewPClaimsParserLibraryCaller creates a new read-only instance of PClaimsParserLibrary, bound to a specific deployed contract.
func NewPClaimsParserLibraryCaller(address common.Address, caller bind.ContractCaller) (*PClaimsParserLibraryCaller, error) {
	contract, err := bindPClaimsParserLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PClaimsParserLibraryCaller{contract: contract}, nil
}

// NewPClaimsParserLibraryTransactor creates a new write-only instance of PClaimsParserLibrary, bound to a specific deployed contract.
func NewPClaimsParserLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*PClaimsParserLibraryTransactor, error) {
	contract, err := bindPClaimsParserLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PClaimsParserLibraryTransactor{contract: contract}, nil
}

// NewPClaimsParserLibraryFilterer creates a new log filterer instance of PClaimsParserLibrary, bound to a specific deployed contract.
func NewPClaimsParserLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*PClaimsParserLibraryFilterer, error) {
	contract, err := bindPClaimsParserLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PClaimsParserLibraryFilterer{contract: contract}, nil
}

// bindPClaimsParserLibrary binds a generic wrapper to an already deployed contract.
func bindPClaimsParserLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(PClaimsParserLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PClaimsParserLibrary *PClaimsParserLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PClaimsParserLibrary.Contract.PClaimsParserLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PClaimsParserLibrary *PClaimsParserLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PClaimsParserLibrary.Contract.PClaimsParserLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PClaimsParserLibrary *PClaimsParserLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PClaimsParserLibrary.Contract.PClaimsParserLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PClaimsParserLibrary *PClaimsParserLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PClaimsParserLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PClaimsParserLibrary *PClaimsParserLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PClaimsParserLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PClaimsParserLibrary *PClaimsParserLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PClaimsParserLibrary.Contract.contract.Transact(opts, method, params...)
}

// ParticipantsMetaData contains all meta data concerning the Participants contract.
var ParticipantsMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"madID\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"madID\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"pkHash\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorLeft\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"pkHash\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorQueued\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256[2]\",\"name\":\"_madID\",\"type\":\"uint256[2]\"}],\"name\":\"addValidator\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmValidators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"getValidatorPublicKey\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractRegistry\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"initializeParticipants\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256[2]\",\"name\":\"_madID\",\"type\":\"uint256[2]\"}],\"name\":\"removeValidator\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_chainId\",\"type\":\"uint32\"}],\"name\":\"setChainId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"max\",\"type\":\"uint8\"}],\"name\":\"setValidatorMaxCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorMaxCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// ParticipantsABI is the input ABI used to generate the binding from.
// Deprecated: Use ParticipantsMetaData.ABI instead.
var ParticipantsABI = ParticipantsMetaData.ABI

// Participants is an auto generated Go binding around an Ethereum contract.
type Participants struct {
	ParticipantsCaller     // Read-only binding to the contract
	ParticipantsTransactor // Write-only binding to the contract
	ParticipantsFilterer   // Log filterer for contract events
}

// ParticipantsCaller is an auto generated read-only Go binding around an Ethereum contract.
type ParticipantsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ParticipantsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ParticipantsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ParticipantsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ParticipantsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ParticipantsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ParticipantsSession struct {
	Contract     *Participants     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ParticipantsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ParticipantsCallerSession struct {
	Contract *ParticipantsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// ParticipantsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ParticipantsTransactorSession struct {
	Contract     *ParticipantsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// ParticipantsRaw is an auto generated low-level Go binding around an Ethereum contract.
type ParticipantsRaw struct {
	Contract *Participants // Generic contract binding to access the raw methods on
}

// ParticipantsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ParticipantsCallerRaw struct {
	Contract *ParticipantsCaller // Generic read-only contract binding to access the raw methods on
}

// ParticipantsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ParticipantsTransactorRaw struct {
	Contract *ParticipantsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewParticipants creates a new instance of Participants, bound to a specific deployed contract.
func NewParticipants(address common.Address, backend bind.ContractBackend) (*Participants, error) {
	contract, err := bindParticipants(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Participants{ParticipantsCaller: ParticipantsCaller{contract: contract}, ParticipantsTransactor: ParticipantsTransactor{contract: contract}, ParticipantsFilterer: ParticipantsFilterer{contract: contract}}, nil
}

// NewParticipantsCaller creates a new read-only instance of Participants, bound to a specific deployed contract.
func NewParticipantsCaller(address common.Address, caller bind.ContractCaller) (*ParticipantsCaller, error) {
	contract, err := bindParticipants(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ParticipantsCaller{contract: contract}, nil
}

// NewParticipantsTransactor creates a new write-only instance of Participants, bound to a specific deployed contract.
func NewParticipantsTransactor(address common.Address, transactor bind.ContractTransactor) (*ParticipantsTransactor, error) {
	contract, err := bindParticipants(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ParticipantsTransactor{contract: contract}, nil
}

// NewParticipantsFilterer creates a new log filterer instance of Participants, bound to a specific deployed contract.
func NewParticipantsFilterer(address common.Address, filterer bind.ContractFilterer) (*ParticipantsFilterer, error) {
	contract, err := bindParticipants(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ParticipantsFilterer{contract: contract}, nil
}

// bindParticipants binds a generic wrapper to an already deployed contract.
func bindParticipants(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ParticipantsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Participants *ParticipantsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Participants.Contract.ParticipantsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Participants *ParticipantsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Participants.Contract.ParticipantsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Participants *ParticipantsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Participants.Contract.ParticipantsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Participants *ParticipantsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Participants.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Participants *ParticipantsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Participants.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Participants *ParticipantsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Participants.Contract.contract.Transact(opts, method, params...)
}

// GetChainId is a free data retrieval call binding the contract method 0x3408e470.
//
// Solidity: function getChainId() view returns(uint32)
func (_Participants *ParticipantsCaller) GetChainId(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _Participants.contract.Call(opts, &out, "getChainId")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// GetChainId is a free data retrieval call binding the contract method 0x3408e470.
//
// Solidity: function getChainId() view returns(uint32)
func (_Participants *ParticipantsSession) GetChainId() (uint32, error) {
	return _Participants.Contract.GetChainId(&_Participants.CallOpts)
}

// GetChainId is a free data retrieval call binding the contract method 0x3408e470.
//
// Solidity: function getChainId() view returns(uint32)
func (_Participants *ParticipantsCallerSession) GetChainId() (uint32, error) {
	return _Participants.Contract.GetChainId(&_Participants.CallOpts)
}

// GetValidatorPublicKey is a free data retrieval call binding the contract method 0x4e6f4a22.
//
// Solidity: function getValidatorPublicKey(address _validator) view returns(uint256[2])
func (_Participants *ParticipantsCaller) GetValidatorPublicKey(opts *bind.CallOpts, _validator common.Address) ([2]*big.Int, error) {
	var out []interface{}
	err := _Participants.contract.Call(opts, &out, "getValidatorPublicKey", _validator)

	if err != nil {
		return *new([2]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([2]*big.Int)).(*[2]*big.Int)

	return out0, err

}

// GetValidatorPublicKey is a free data retrieval call binding the contract method 0x4e6f4a22.
//
// Solidity: function getValidatorPublicKey(address _validator) view returns(uint256[2])
func (_Participants *ParticipantsSession) GetValidatorPublicKey(_validator common.Address) ([2]*big.Int, error) {
	return _Participants.Contract.GetValidatorPublicKey(&_Participants.CallOpts, _validator)
}

// GetValidatorPublicKey is a free data retrieval call binding the contract method 0x4e6f4a22.
//
// Solidity: function getValidatorPublicKey(address _validator) view returns(uint256[2])
func (_Participants *ParticipantsCallerSession) GetValidatorPublicKey(_validator common.Address) ([2]*big.Int, error) {
	return _Participants.Contract.GetValidatorPublicKey(&_Participants.CallOpts, _validator)
}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() view returns(address[])
func (_Participants *ParticipantsCaller) GetValidators(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _Participants.contract.Call(opts, &out, "getValidators")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() view returns(address[])
func (_Participants *ParticipantsSession) GetValidators() ([]common.Address, error) {
	return _Participants.Contract.GetValidators(&_Participants.CallOpts)
}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() view returns(address[])
func (_Participants *ParticipantsCallerSession) GetValidators() ([]common.Address, error) {
	return _Participants.Contract.GetValidators(&_Participants.CallOpts)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address validator) view returns(bool)
func (_Participants *ParticipantsCaller) IsValidator(opts *bind.CallOpts, validator common.Address) (bool, error) {
	var out []interface{}
	err := _Participants.contract.Call(opts, &out, "isValidator", validator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address validator) view returns(bool)
func (_Participants *ParticipantsSession) IsValidator(validator common.Address) (bool, error) {
	return _Participants.Contract.IsValidator(&_Participants.CallOpts, validator)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address validator) view returns(bool)
func (_Participants *ParticipantsCallerSession) IsValidator(validator common.Address) (bool, error) {
	return _Participants.Contract.IsValidator(&_Participants.CallOpts, validator)
}

// AddValidator is a paid mutator transaction binding the contract method 0xeb6320c7.
//
// Solidity: function addValidator(address _validator, uint256[2] _madID) returns(uint8)
func (_Participants *ParticipantsTransactor) AddValidator(opts *bind.TransactOpts, _validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _Participants.contract.Transact(opts, "addValidator", _validator, _madID)
}

// AddValidator is a paid mutator transaction binding the contract method 0xeb6320c7.
//
// Solidity: function addValidator(address _validator, uint256[2] _madID) returns(uint8)
func (_Participants *ParticipantsSession) AddValidator(_validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _Participants.Contract.AddValidator(&_Participants.TransactOpts, _validator, _madID)
}

// AddValidator is a paid mutator transaction binding the contract method 0xeb6320c7.
//
// Solidity: function addValidator(address _validator, uint256[2] _madID) returns(uint8)
func (_Participants *ParticipantsTransactorSession) AddValidator(_validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _Participants.Contract.AddValidator(&_Participants.TransactOpts, _validator, _madID)
}

// ConfirmValidators is a paid mutator transaction binding the contract method 0x35c6a163.
//
// Solidity: function confirmValidators() returns(bool)
func (_Participants *ParticipantsTransactor) ConfirmValidators(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Participants.contract.Transact(opts, "confirmValidators")
}

// ConfirmValidators is a paid mutator transaction binding the contract method 0x35c6a163.
//
// Solidity: function confirmValidators() returns(bool)
func (_Participants *ParticipantsSession) ConfirmValidators() (*types.Transaction, error) {
	return _Participants.Contract.ConfirmValidators(&_Participants.TransactOpts)
}

// ConfirmValidators is a paid mutator transaction binding the contract method 0x35c6a163.
//
// Solidity: function confirmValidators() returns(bool)
func (_Participants *ParticipantsTransactorSession) ConfirmValidators() (*types.Transaction, error) {
	return _Participants.Contract.ConfirmValidators(&_Participants.TransactOpts)
}

// InitializeParticipants is a paid mutator transaction binding the contract method 0xee8420dd.
//
// Solidity: function initializeParticipants(address registry) returns()
func (_Participants *ParticipantsTransactor) InitializeParticipants(opts *bind.TransactOpts, registry common.Address) (*types.Transaction, error) {
	return _Participants.contract.Transact(opts, "initializeParticipants", registry)
}

// InitializeParticipants is a paid mutator transaction binding the contract method 0xee8420dd.
//
// Solidity: function initializeParticipants(address registry) returns()
func (_Participants *ParticipantsSession) InitializeParticipants(registry common.Address) (*types.Transaction, error) {
	return _Participants.Contract.InitializeParticipants(&_Participants.TransactOpts, registry)
}

// InitializeParticipants is a paid mutator transaction binding the contract method 0xee8420dd.
//
// Solidity: function initializeParticipants(address registry) returns()
func (_Participants *ParticipantsTransactorSession) InitializeParticipants(registry common.Address) (*types.Transaction, error) {
	return _Participants.Contract.InitializeParticipants(&_Participants.TransactOpts, registry)
}

// RemoveValidator is a paid mutator transaction binding the contract method 0x844469b2.
//
// Solidity: function removeValidator(address _validator, uint256[2] _madID) returns(uint8)
func (_Participants *ParticipantsTransactor) RemoveValidator(opts *bind.TransactOpts, _validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _Participants.contract.Transact(opts, "removeValidator", _validator, _madID)
}

// RemoveValidator is a paid mutator transaction binding the contract method 0x844469b2.
//
// Solidity: function removeValidator(address _validator, uint256[2] _madID) returns(uint8)
func (_Participants *ParticipantsSession) RemoveValidator(_validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _Participants.Contract.RemoveValidator(&_Participants.TransactOpts, _validator, _madID)
}

// RemoveValidator is a paid mutator transaction binding the contract method 0x844469b2.
//
// Solidity: function removeValidator(address _validator, uint256[2] _madID) returns(uint8)
func (_Participants *ParticipantsTransactorSession) RemoveValidator(_validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _Participants.Contract.RemoveValidator(&_Participants.TransactOpts, _validator, _madID)
}

// SetChainId is a paid mutator transaction binding the contract method 0xa179f124.
//
// Solidity: function setChainId(uint32 _chainId) returns()
func (_Participants *ParticipantsTransactor) SetChainId(opts *bind.TransactOpts, _chainId uint32) (*types.Transaction, error) {
	return _Participants.contract.Transact(opts, "setChainId", _chainId)
}

// SetChainId is a paid mutator transaction binding the contract method 0xa179f124.
//
// Solidity: function setChainId(uint32 _chainId) returns()
func (_Participants *ParticipantsSession) SetChainId(_chainId uint32) (*types.Transaction, error) {
	return _Participants.Contract.SetChainId(&_Participants.TransactOpts, _chainId)
}

// SetChainId is a paid mutator transaction binding the contract method 0xa179f124.
//
// Solidity: function setChainId(uint32 _chainId) returns()
func (_Participants *ParticipantsTransactorSession) SetChainId(_chainId uint32) (*types.Transaction, error) {
	return _Participants.Contract.SetChainId(&_Participants.TransactOpts, _chainId)
}

// SetValidatorMaxCount is a paid mutator transaction binding the contract method 0x2cab37f7.
//
// Solidity: function setValidatorMaxCount(uint8 max) returns()
func (_Participants *ParticipantsTransactor) SetValidatorMaxCount(opts *bind.TransactOpts, max uint8) (*types.Transaction, error) {
	return _Participants.contract.Transact(opts, "setValidatorMaxCount", max)
}

// SetValidatorMaxCount is a paid mutator transaction binding the contract method 0x2cab37f7.
//
// Solidity: function setValidatorMaxCount(uint8 max) returns()
func (_Participants *ParticipantsSession) SetValidatorMaxCount(max uint8) (*types.Transaction, error) {
	return _Participants.Contract.SetValidatorMaxCount(&_Participants.TransactOpts, max)
}

// SetValidatorMaxCount is a paid mutator transaction binding the contract method 0x2cab37f7.
//
// Solidity: function setValidatorMaxCount(uint8 max) returns()
func (_Participants *ParticipantsTransactorSession) SetValidatorMaxCount(max uint8) (*types.Transaction, error) {
	return _Participants.Contract.SetValidatorMaxCount(&_Participants.TransactOpts, max)
}

// ValidatorCount is a paid mutator transaction binding the contract method 0x0f43a677.
//
// Solidity: function validatorCount() returns(uint8)
func (_Participants *ParticipantsTransactor) ValidatorCount(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Participants.contract.Transact(opts, "validatorCount")
}

// ValidatorCount is a paid mutator transaction binding the contract method 0x0f43a677.
//
// Solidity: function validatorCount() returns(uint8)
func (_Participants *ParticipantsSession) ValidatorCount() (*types.Transaction, error) {
	return _Participants.Contract.ValidatorCount(&_Participants.TransactOpts)
}

// ValidatorCount is a paid mutator transaction binding the contract method 0x0f43a677.
//
// Solidity: function validatorCount() returns(uint8)
func (_Participants *ParticipantsTransactorSession) ValidatorCount() (*types.Transaction, error) {
	return _Participants.Contract.ValidatorCount(&_Participants.TransactOpts)
}

// ValidatorMaxCount is a paid mutator transaction binding the contract method 0x09f0d45d.
//
// Solidity: function validatorMaxCount() returns(uint8)
func (_Participants *ParticipantsTransactor) ValidatorMaxCount(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Participants.contract.Transact(opts, "validatorMaxCount")
}

// ValidatorMaxCount is a paid mutator transaction binding the contract method 0x09f0d45d.
//
// Solidity: function validatorMaxCount() returns(uint8)
func (_Participants *ParticipantsSession) ValidatorMaxCount() (*types.Transaction, error) {
	return _Participants.Contract.ValidatorMaxCount(&_Participants.TransactOpts)
}

// ValidatorMaxCount is a paid mutator transaction binding the contract method 0x09f0d45d.
//
// Solidity: function validatorMaxCount() returns(uint8)
func (_Participants *ParticipantsTransactorSession) ValidatorMaxCount() (*types.Transaction, error) {
	return _Participants.Contract.ValidatorMaxCount(&_Participants.TransactOpts)
}

// ParticipantsValidatorCreatedIterator is returned from FilterValidatorCreated and is used to iterate over the raw logs and unpacked data for ValidatorCreated events raised by the Participants contract.
type ParticipantsValidatorCreatedIterator struct {
	Event *ParticipantsValidatorCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParticipantsValidatorCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParticipantsValidatorCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParticipantsValidatorCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParticipantsValidatorCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParticipantsValidatorCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParticipantsValidatorCreated represents a ValidatorCreated event raised by the Participants contract.
type ParticipantsValidatorCreated struct {
	Validator common.Address
	Signer    common.Address
	MadID     [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorCreated is a free log retrieval operation binding the contract event 0xef5e89a9416c26e0a0a37c1f630958c8c88d9efad59f553f94cff0bed0a268d3.
//
// Solidity: event ValidatorCreated(address indexed validator, address indexed signer, uint256[2] madID)
func (_Participants *ParticipantsFilterer) FilterValidatorCreated(opts *bind.FilterOpts, validator []common.Address, signer []common.Address) (*ParticipantsValidatorCreatedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var signerRule []interface{}
	for _, signerItem := range signer {
		signerRule = append(signerRule, signerItem)
	}

	logs, sub, err := _Participants.contract.FilterLogs(opts, "ValidatorCreated", validatorRule, signerRule)
	if err != nil {
		return nil, err
	}
	return &ParticipantsValidatorCreatedIterator{contract: _Participants.contract, event: "ValidatorCreated", logs: logs, sub: sub}, nil
}

// WatchValidatorCreated is a free log subscription operation binding the contract event 0xef5e89a9416c26e0a0a37c1f630958c8c88d9efad59f553f94cff0bed0a268d3.
//
// Solidity: event ValidatorCreated(address indexed validator, address indexed signer, uint256[2] madID)
func (_Participants *ParticipantsFilterer) WatchValidatorCreated(opts *bind.WatchOpts, sink chan<- *ParticipantsValidatorCreated, validator []common.Address, signer []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var signerRule []interface{}
	for _, signerItem := range signer {
		signerRule = append(signerRule, signerItem)
	}

	logs, sub, err := _Participants.contract.WatchLogs(opts, "ValidatorCreated", validatorRule, signerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParticipantsValidatorCreated)
				if err := _Participants.contract.UnpackLog(event, "ValidatorCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorCreated is a log parse operation binding the contract event 0xef5e89a9416c26e0a0a37c1f630958c8c88d9efad59f553f94cff0bed0a268d3.
//
// Solidity: event ValidatorCreated(address indexed validator, address indexed signer, uint256[2] madID)
func (_Participants *ParticipantsFilterer) ParseValidatorCreated(log types.Log) (*ParticipantsValidatorCreated, error) {
	event := new(ParticipantsValidatorCreated)
	if err := _Participants.contract.UnpackLog(event, "ValidatorCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ParticipantsValidatorJoinedIterator is returned from FilterValidatorJoined and is used to iterate over the raw logs and unpacked data for ValidatorJoined events raised by the Participants contract.
type ParticipantsValidatorJoinedIterator struct {
	Event *ParticipantsValidatorJoined // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParticipantsValidatorJoinedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParticipantsValidatorJoined)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParticipantsValidatorJoined)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParticipantsValidatorJoinedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParticipantsValidatorJoinedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParticipantsValidatorJoined represents a ValidatorJoined event raised by the Participants contract.
type ParticipantsValidatorJoined struct {
	Validator common.Address
	MadID     [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorJoined is a free log retrieval operation binding the contract event 0x8c25e214c5693ebaf8008875bacedeb9e0aafd393864a314ed1801b2a4e13dd9.
//
// Solidity: event ValidatorJoined(address indexed validator, uint256[2] madID)
func (_Participants *ParticipantsFilterer) FilterValidatorJoined(opts *bind.FilterOpts, validator []common.Address) (*ParticipantsValidatorJoinedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _Participants.contract.FilterLogs(opts, "ValidatorJoined", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ParticipantsValidatorJoinedIterator{contract: _Participants.contract, event: "ValidatorJoined", logs: logs, sub: sub}, nil
}

// WatchValidatorJoined is a free log subscription operation binding the contract event 0x8c25e214c5693ebaf8008875bacedeb9e0aafd393864a314ed1801b2a4e13dd9.
//
// Solidity: event ValidatorJoined(address indexed validator, uint256[2] madID)
func (_Participants *ParticipantsFilterer) WatchValidatorJoined(opts *bind.WatchOpts, sink chan<- *ParticipantsValidatorJoined, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _Participants.contract.WatchLogs(opts, "ValidatorJoined", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParticipantsValidatorJoined)
				if err := _Participants.contract.UnpackLog(event, "ValidatorJoined", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorJoined is a log parse operation binding the contract event 0x8c25e214c5693ebaf8008875bacedeb9e0aafd393864a314ed1801b2a4e13dd9.
//
// Solidity: event ValidatorJoined(address indexed validator, uint256[2] madID)
func (_Participants *ParticipantsFilterer) ParseValidatorJoined(log types.Log) (*ParticipantsValidatorJoined, error) {
	event := new(ParticipantsValidatorJoined)
	if err := _Participants.contract.UnpackLog(event, "ValidatorJoined", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ParticipantsValidatorLeftIterator is returned from FilterValidatorLeft and is used to iterate over the raw logs and unpacked data for ValidatorLeft events raised by the Participants contract.
type ParticipantsValidatorLeftIterator struct {
	Event *ParticipantsValidatorLeft // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParticipantsValidatorLeftIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParticipantsValidatorLeft)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParticipantsValidatorLeft)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParticipantsValidatorLeftIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParticipantsValidatorLeftIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParticipantsValidatorLeft represents a ValidatorLeft event raised by the Participants contract.
type ParticipantsValidatorLeft struct {
	Validator common.Address
	PkHash    [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorLeft is a free log retrieval operation binding the contract event 0x319bbadb03b94aedc69babb34a28675536a9cb30f4bbde343e1d0018c44ebd94.
//
// Solidity: event ValidatorLeft(address indexed validator, uint256[2] pkHash)
func (_Participants *ParticipantsFilterer) FilterValidatorLeft(opts *bind.FilterOpts, validator []common.Address) (*ParticipantsValidatorLeftIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _Participants.contract.FilterLogs(opts, "ValidatorLeft", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ParticipantsValidatorLeftIterator{contract: _Participants.contract, event: "ValidatorLeft", logs: logs, sub: sub}, nil
}

// WatchValidatorLeft is a free log subscription operation binding the contract event 0x319bbadb03b94aedc69babb34a28675536a9cb30f4bbde343e1d0018c44ebd94.
//
// Solidity: event ValidatorLeft(address indexed validator, uint256[2] pkHash)
func (_Participants *ParticipantsFilterer) WatchValidatorLeft(opts *bind.WatchOpts, sink chan<- *ParticipantsValidatorLeft, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _Participants.contract.WatchLogs(opts, "ValidatorLeft", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParticipantsValidatorLeft)
				if err := _Participants.contract.UnpackLog(event, "ValidatorLeft", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorLeft is a log parse operation binding the contract event 0x319bbadb03b94aedc69babb34a28675536a9cb30f4bbde343e1d0018c44ebd94.
//
// Solidity: event ValidatorLeft(address indexed validator, uint256[2] pkHash)
func (_Participants *ParticipantsFilterer) ParseValidatorLeft(log types.Log) (*ParticipantsValidatorLeft, error) {
	event := new(ParticipantsValidatorLeft)
	if err := _Participants.contract.UnpackLog(event, "ValidatorLeft", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ParticipantsValidatorQueuedIterator is returned from FilterValidatorQueued and is used to iterate over the raw logs and unpacked data for ValidatorQueued events raised by the Participants contract.
type ParticipantsValidatorQueuedIterator struct {
	Event *ParticipantsValidatorQueued // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParticipantsValidatorQueuedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParticipantsValidatorQueued)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParticipantsValidatorQueued)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParticipantsValidatorQueuedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParticipantsValidatorQueuedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParticipantsValidatorQueued represents a ValidatorQueued event raised by the Participants contract.
type ParticipantsValidatorQueued struct {
	Validator common.Address
	PkHash    [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorQueued is a free log retrieval operation binding the contract event 0xb4389eb1c66b46169245bc8c147e4b13a2b88adcaa44d001b0fadf25890b773d.
//
// Solidity: event ValidatorQueued(address indexed validator, uint256[2] pkHash)
func (_Participants *ParticipantsFilterer) FilterValidatorQueued(opts *bind.FilterOpts, validator []common.Address) (*ParticipantsValidatorQueuedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _Participants.contract.FilterLogs(opts, "ValidatorQueued", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ParticipantsValidatorQueuedIterator{contract: _Participants.contract, event: "ValidatorQueued", logs: logs, sub: sub}, nil
}

// WatchValidatorQueued is a free log subscription operation binding the contract event 0xb4389eb1c66b46169245bc8c147e4b13a2b88adcaa44d001b0fadf25890b773d.
//
// Solidity: event ValidatorQueued(address indexed validator, uint256[2] pkHash)
func (_Participants *ParticipantsFilterer) WatchValidatorQueued(opts *bind.WatchOpts, sink chan<- *ParticipantsValidatorQueued, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _Participants.contract.WatchLogs(opts, "ValidatorQueued", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParticipantsValidatorQueued)
				if err := _Participants.contract.UnpackLog(event, "ValidatorQueued", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorQueued is a log parse operation binding the contract event 0xb4389eb1c66b46169245bc8c147e4b13a2b88adcaa44d001b0fadf25890b773d.
//
// Solidity: event ValidatorQueued(address indexed validator, uint256[2] pkHash)
func (_Participants *ParticipantsFilterer) ParseValidatorQueued(log types.Log) (*ParticipantsValidatorQueued, error) {
	event := new(ParticipantsValidatorQueued)
	if err := _Participants.contract.UnpackLog(event, "ValidatorQueued", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ParticipantsEventsMetaData contains all meta data concerning the ParticipantsEvents contract.
var ParticipantsEventsMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"madID\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"madID\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"pkHash\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorLeft\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"pkHash\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorQueued\",\"type\":\"event\"}]",
}

// ParticipantsEventsABI is the input ABI used to generate the binding from.
// Deprecated: Use ParticipantsEventsMetaData.ABI instead.
var ParticipantsEventsABI = ParticipantsEventsMetaData.ABI

// ParticipantsEvents is an auto generated Go binding around an Ethereum contract.
type ParticipantsEvents struct {
	ParticipantsEventsCaller     // Read-only binding to the contract
	ParticipantsEventsTransactor // Write-only binding to the contract
	ParticipantsEventsFilterer   // Log filterer for contract events
}

// ParticipantsEventsCaller is an auto generated read-only Go binding around an Ethereum contract.
type ParticipantsEventsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ParticipantsEventsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ParticipantsEventsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ParticipantsEventsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ParticipantsEventsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ParticipantsEventsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ParticipantsEventsSession struct {
	Contract     *ParticipantsEvents // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// ParticipantsEventsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ParticipantsEventsCallerSession struct {
	Contract *ParticipantsEventsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// ParticipantsEventsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ParticipantsEventsTransactorSession struct {
	Contract     *ParticipantsEventsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// ParticipantsEventsRaw is an auto generated low-level Go binding around an Ethereum contract.
type ParticipantsEventsRaw struct {
	Contract *ParticipantsEvents // Generic contract binding to access the raw methods on
}

// ParticipantsEventsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ParticipantsEventsCallerRaw struct {
	Contract *ParticipantsEventsCaller // Generic read-only contract binding to access the raw methods on
}

// ParticipantsEventsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ParticipantsEventsTransactorRaw struct {
	Contract *ParticipantsEventsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewParticipantsEvents creates a new instance of ParticipantsEvents, bound to a specific deployed contract.
func NewParticipantsEvents(address common.Address, backend bind.ContractBackend) (*ParticipantsEvents, error) {
	contract, err := bindParticipantsEvents(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ParticipantsEvents{ParticipantsEventsCaller: ParticipantsEventsCaller{contract: contract}, ParticipantsEventsTransactor: ParticipantsEventsTransactor{contract: contract}, ParticipantsEventsFilterer: ParticipantsEventsFilterer{contract: contract}}, nil
}

// NewParticipantsEventsCaller creates a new read-only instance of ParticipantsEvents, bound to a specific deployed contract.
func NewParticipantsEventsCaller(address common.Address, caller bind.ContractCaller) (*ParticipantsEventsCaller, error) {
	contract, err := bindParticipantsEvents(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ParticipantsEventsCaller{contract: contract}, nil
}

// NewParticipantsEventsTransactor creates a new write-only instance of ParticipantsEvents, bound to a specific deployed contract.
func NewParticipantsEventsTransactor(address common.Address, transactor bind.ContractTransactor) (*ParticipantsEventsTransactor, error) {
	contract, err := bindParticipantsEvents(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ParticipantsEventsTransactor{contract: contract}, nil
}

// NewParticipantsEventsFilterer creates a new log filterer instance of ParticipantsEvents, bound to a specific deployed contract.
func NewParticipantsEventsFilterer(address common.Address, filterer bind.ContractFilterer) (*ParticipantsEventsFilterer, error) {
	contract, err := bindParticipantsEvents(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ParticipantsEventsFilterer{contract: contract}, nil
}

// bindParticipantsEvents binds a generic wrapper to an already deployed contract.
func bindParticipantsEvents(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ParticipantsEventsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ParticipantsEvents *ParticipantsEventsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ParticipantsEvents.Contract.ParticipantsEventsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ParticipantsEvents *ParticipantsEventsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ParticipantsEvents.Contract.ParticipantsEventsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ParticipantsEvents *ParticipantsEventsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ParticipantsEvents.Contract.ParticipantsEventsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ParticipantsEvents *ParticipantsEventsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ParticipantsEvents.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ParticipantsEvents *ParticipantsEventsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ParticipantsEvents.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ParticipantsEvents *ParticipantsEventsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ParticipantsEvents.Contract.contract.Transact(opts, method, params...)
}

// ParticipantsEventsValidatorCreatedIterator is returned from FilterValidatorCreated and is used to iterate over the raw logs and unpacked data for ValidatorCreated events raised by the ParticipantsEvents contract.
type ParticipantsEventsValidatorCreatedIterator struct {
	Event *ParticipantsEventsValidatorCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParticipantsEventsValidatorCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParticipantsEventsValidatorCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParticipantsEventsValidatorCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParticipantsEventsValidatorCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParticipantsEventsValidatorCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParticipantsEventsValidatorCreated represents a ValidatorCreated event raised by the ParticipantsEvents contract.
type ParticipantsEventsValidatorCreated struct {
	Validator common.Address
	Signer    common.Address
	MadID     [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorCreated is a free log retrieval operation binding the contract event 0xef5e89a9416c26e0a0a37c1f630958c8c88d9efad59f553f94cff0bed0a268d3.
//
// Solidity: event ValidatorCreated(address indexed validator, address indexed signer, uint256[2] madID)
func (_ParticipantsEvents *ParticipantsEventsFilterer) FilterValidatorCreated(opts *bind.FilterOpts, validator []common.Address, signer []common.Address) (*ParticipantsEventsValidatorCreatedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var signerRule []interface{}
	for _, signerItem := range signer {
		signerRule = append(signerRule, signerItem)
	}

	logs, sub, err := _ParticipantsEvents.contract.FilterLogs(opts, "ValidatorCreated", validatorRule, signerRule)
	if err != nil {
		return nil, err
	}
	return &ParticipantsEventsValidatorCreatedIterator{contract: _ParticipantsEvents.contract, event: "ValidatorCreated", logs: logs, sub: sub}, nil
}

// WatchValidatorCreated is a free log subscription operation binding the contract event 0xef5e89a9416c26e0a0a37c1f630958c8c88d9efad59f553f94cff0bed0a268d3.
//
// Solidity: event ValidatorCreated(address indexed validator, address indexed signer, uint256[2] madID)
func (_ParticipantsEvents *ParticipantsEventsFilterer) WatchValidatorCreated(opts *bind.WatchOpts, sink chan<- *ParticipantsEventsValidatorCreated, validator []common.Address, signer []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var signerRule []interface{}
	for _, signerItem := range signer {
		signerRule = append(signerRule, signerItem)
	}

	logs, sub, err := _ParticipantsEvents.contract.WatchLogs(opts, "ValidatorCreated", validatorRule, signerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParticipantsEventsValidatorCreated)
				if err := _ParticipantsEvents.contract.UnpackLog(event, "ValidatorCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorCreated is a log parse operation binding the contract event 0xef5e89a9416c26e0a0a37c1f630958c8c88d9efad59f553f94cff0bed0a268d3.
//
// Solidity: event ValidatorCreated(address indexed validator, address indexed signer, uint256[2] madID)
func (_ParticipantsEvents *ParticipantsEventsFilterer) ParseValidatorCreated(log types.Log) (*ParticipantsEventsValidatorCreated, error) {
	event := new(ParticipantsEventsValidatorCreated)
	if err := _ParticipantsEvents.contract.UnpackLog(event, "ValidatorCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ParticipantsEventsValidatorJoinedIterator is returned from FilterValidatorJoined and is used to iterate over the raw logs and unpacked data for ValidatorJoined events raised by the ParticipantsEvents contract.
type ParticipantsEventsValidatorJoinedIterator struct {
	Event *ParticipantsEventsValidatorJoined // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParticipantsEventsValidatorJoinedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParticipantsEventsValidatorJoined)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParticipantsEventsValidatorJoined)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParticipantsEventsValidatorJoinedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParticipantsEventsValidatorJoinedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParticipantsEventsValidatorJoined represents a ValidatorJoined event raised by the ParticipantsEvents contract.
type ParticipantsEventsValidatorJoined struct {
	Validator common.Address
	MadID     [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorJoined is a free log retrieval operation binding the contract event 0x8c25e214c5693ebaf8008875bacedeb9e0aafd393864a314ed1801b2a4e13dd9.
//
// Solidity: event ValidatorJoined(address indexed validator, uint256[2] madID)
func (_ParticipantsEvents *ParticipantsEventsFilterer) FilterValidatorJoined(opts *bind.FilterOpts, validator []common.Address) (*ParticipantsEventsValidatorJoinedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ParticipantsEvents.contract.FilterLogs(opts, "ValidatorJoined", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ParticipantsEventsValidatorJoinedIterator{contract: _ParticipantsEvents.contract, event: "ValidatorJoined", logs: logs, sub: sub}, nil
}

// WatchValidatorJoined is a free log subscription operation binding the contract event 0x8c25e214c5693ebaf8008875bacedeb9e0aafd393864a314ed1801b2a4e13dd9.
//
// Solidity: event ValidatorJoined(address indexed validator, uint256[2] madID)
func (_ParticipantsEvents *ParticipantsEventsFilterer) WatchValidatorJoined(opts *bind.WatchOpts, sink chan<- *ParticipantsEventsValidatorJoined, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ParticipantsEvents.contract.WatchLogs(opts, "ValidatorJoined", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParticipantsEventsValidatorJoined)
				if err := _ParticipantsEvents.contract.UnpackLog(event, "ValidatorJoined", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorJoined is a log parse operation binding the contract event 0x8c25e214c5693ebaf8008875bacedeb9e0aafd393864a314ed1801b2a4e13dd9.
//
// Solidity: event ValidatorJoined(address indexed validator, uint256[2] madID)
func (_ParticipantsEvents *ParticipantsEventsFilterer) ParseValidatorJoined(log types.Log) (*ParticipantsEventsValidatorJoined, error) {
	event := new(ParticipantsEventsValidatorJoined)
	if err := _ParticipantsEvents.contract.UnpackLog(event, "ValidatorJoined", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ParticipantsEventsValidatorLeftIterator is returned from FilterValidatorLeft and is used to iterate over the raw logs and unpacked data for ValidatorLeft events raised by the ParticipantsEvents contract.
type ParticipantsEventsValidatorLeftIterator struct {
	Event *ParticipantsEventsValidatorLeft // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParticipantsEventsValidatorLeftIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParticipantsEventsValidatorLeft)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParticipantsEventsValidatorLeft)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParticipantsEventsValidatorLeftIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParticipantsEventsValidatorLeftIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParticipantsEventsValidatorLeft represents a ValidatorLeft event raised by the ParticipantsEvents contract.
type ParticipantsEventsValidatorLeft struct {
	Validator common.Address
	PkHash    [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorLeft is a free log retrieval operation binding the contract event 0x319bbadb03b94aedc69babb34a28675536a9cb30f4bbde343e1d0018c44ebd94.
//
// Solidity: event ValidatorLeft(address indexed validator, uint256[2] pkHash)
func (_ParticipantsEvents *ParticipantsEventsFilterer) FilterValidatorLeft(opts *bind.FilterOpts, validator []common.Address) (*ParticipantsEventsValidatorLeftIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ParticipantsEvents.contract.FilterLogs(opts, "ValidatorLeft", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ParticipantsEventsValidatorLeftIterator{contract: _ParticipantsEvents.contract, event: "ValidatorLeft", logs: logs, sub: sub}, nil
}

// WatchValidatorLeft is a free log subscription operation binding the contract event 0x319bbadb03b94aedc69babb34a28675536a9cb30f4bbde343e1d0018c44ebd94.
//
// Solidity: event ValidatorLeft(address indexed validator, uint256[2] pkHash)
func (_ParticipantsEvents *ParticipantsEventsFilterer) WatchValidatorLeft(opts *bind.WatchOpts, sink chan<- *ParticipantsEventsValidatorLeft, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ParticipantsEvents.contract.WatchLogs(opts, "ValidatorLeft", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParticipantsEventsValidatorLeft)
				if err := _ParticipantsEvents.contract.UnpackLog(event, "ValidatorLeft", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorLeft is a log parse operation binding the contract event 0x319bbadb03b94aedc69babb34a28675536a9cb30f4bbde343e1d0018c44ebd94.
//
// Solidity: event ValidatorLeft(address indexed validator, uint256[2] pkHash)
func (_ParticipantsEvents *ParticipantsEventsFilterer) ParseValidatorLeft(log types.Log) (*ParticipantsEventsValidatorLeft, error) {
	event := new(ParticipantsEventsValidatorLeft)
	if err := _ParticipantsEvents.contract.UnpackLog(event, "ValidatorLeft", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ParticipantsEventsValidatorQueuedIterator is returned from FilterValidatorQueued and is used to iterate over the raw logs and unpacked data for ValidatorQueued events raised by the ParticipantsEvents contract.
type ParticipantsEventsValidatorQueuedIterator struct {
	Event *ParticipantsEventsValidatorQueued // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParticipantsEventsValidatorQueuedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParticipantsEventsValidatorQueued)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParticipantsEventsValidatorQueued)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParticipantsEventsValidatorQueuedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParticipantsEventsValidatorQueuedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParticipantsEventsValidatorQueued represents a ValidatorQueued event raised by the ParticipantsEvents contract.
type ParticipantsEventsValidatorQueued struct {
	Validator common.Address
	PkHash    [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorQueued is a free log retrieval operation binding the contract event 0xb4389eb1c66b46169245bc8c147e4b13a2b88adcaa44d001b0fadf25890b773d.
//
// Solidity: event ValidatorQueued(address indexed validator, uint256[2] pkHash)
func (_ParticipantsEvents *ParticipantsEventsFilterer) FilterValidatorQueued(opts *bind.FilterOpts, validator []common.Address) (*ParticipantsEventsValidatorQueuedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ParticipantsEvents.contract.FilterLogs(opts, "ValidatorQueued", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ParticipantsEventsValidatorQueuedIterator{contract: _ParticipantsEvents.contract, event: "ValidatorQueued", logs: logs, sub: sub}, nil
}

// WatchValidatorQueued is a free log subscription operation binding the contract event 0xb4389eb1c66b46169245bc8c147e4b13a2b88adcaa44d001b0fadf25890b773d.
//
// Solidity: event ValidatorQueued(address indexed validator, uint256[2] pkHash)
func (_ParticipantsEvents *ParticipantsEventsFilterer) WatchValidatorQueued(opts *bind.WatchOpts, sink chan<- *ParticipantsEventsValidatorQueued, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ParticipantsEvents.contract.WatchLogs(opts, "ValidatorQueued", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParticipantsEventsValidatorQueued)
				if err := _ParticipantsEvents.contract.UnpackLog(event, "ValidatorQueued", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorQueued is a log parse operation binding the contract event 0xb4389eb1c66b46169245bc8c147e4b13a2b88adcaa44d001b0fadf25890b773d.
//
// Solidity: event ValidatorQueued(address indexed validator, uint256[2] pkHash)
func (_ParticipantsEvents *ParticipantsEventsFilterer) ParseValidatorQueued(log types.Log) (*ParticipantsEventsValidatorQueued, error) {
	event := new(ParticipantsEventsValidatorQueued)
	if err := _ParticipantsEvents.contract.UnpackLog(event, "ValidatorQueued", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ParticipantsFacetMetaData contains all meta data concerning the ParticipantsFacet contract.
var ParticipantsFacetMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"madID\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"madID\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"pkHash\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorLeft\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"pkHash\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorQueued\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256[2]\",\"name\":\"_madID\",\"type\":\"uint256[2]\"}],\"name\":\"addValidator\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmValidators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"getValidatorPublicKey\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"grantOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractRegistry\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"initializeParticipants\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256[2]\",\"name\":\"_madID\",\"type\":\"uint256[2]\"}],\"name\":\"removeValidator\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_chainId\",\"type\":\"uint32\"}],\"name\":\"setChainId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governance_\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"max\",\"type\":\"uint8\"}],\"name\":\"setValidatorMaxCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorMaxCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "",
}

// ParticipantsFacetABI is the input ABI used to generate the binding from.
// Deprecated: Use ParticipantsFacetMetaData.ABI instead.
var ParticipantsFacetABI = ParticipantsFacetMetaData.ABI

// ParticipantsFacetBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ParticipantsFacetMetaData.Bin instead.
var ParticipantsFacetBin = ParticipantsFacetMetaData.Bin

// DeployParticipantsFacet deploys a new Ethereum contract, binding an instance of ParticipantsFacet to it.
func DeployParticipantsFacet(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ParticipantsFacet, error) {
	parsed, err := ParticipantsFacetMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ParticipantsFacetBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ParticipantsFacet{ParticipantsFacetCaller: ParticipantsFacetCaller{contract: contract}, ParticipantsFacetTransactor: ParticipantsFacetTransactor{contract: contract}, ParticipantsFacetFilterer: ParticipantsFacetFilterer{contract: contract}}, nil
}

// ParticipantsFacet is an auto generated Go binding around an Ethereum contract.
type ParticipantsFacet struct {
	ParticipantsFacetCaller     // Read-only binding to the contract
	ParticipantsFacetTransactor // Write-only binding to the contract
	ParticipantsFacetFilterer   // Log filterer for contract events
}

// ParticipantsFacetCaller is an auto generated read-only Go binding around an Ethereum contract.
type ParticipantsFacetCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ParticipantsFacetTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ParticipantsFacetTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ParticipantsFacetFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ParticipantsFacetFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ParticipantsFacetSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ParticipantsFacetSession struct {
	Contract     *ParticipantsFacet // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// ParticipantsFacetCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ParticipantsFacetCallerSession struct {
	Contract *ParticipantsFacetCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// ParticipantsFacetTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ParticipantsFacetTransactorSession struct {
	Contract     *ParticipantsFacetTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// ParticipantsFacetRaw is an auto generated low-level Go binding around an Ethereum contract.
type ParticipantsFacetRaw struct {
	Contract *ParticipantsFacet // Generic contract binding to access the raw methods on
}

// ParticipantsFacetCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ParticipantsFacetCallerRaw struct {
	Contract *ParticipantsFacetCaller // Generic read-only contract binding to access the raw methods on
}

// ParticipantsFacetTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ParticipantsFacetTransactorRaw struct {
	Contract *ParticipantsFacetTransactor // Generic write-only contract binding to access the raw methods on
}

// NewParticipantsFacet creates a new instance of ParticipantsFacet, bound to a specific deployed contract.
func NewParticipantsFacet(address common.Address, backend bind.ContractBackend) (*ParticipantsFacet, error) {
	contract, err := bindParticipantsFacet(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ParticipantsFacet{ParticipantsFacetCaller: ParticipantsFacetCaller{contract: contract}, ParticipantsFacetTransactor: ParticipantsFacetTransactor{contract: contract}, ParticipantsFacetFilterer: ParticipantsFacetFilterer{contract: contract}}, nil
}

// NewParticipantsFacetCaller creates a new read-only instance of ParticipantsFacet, bound to a specific deployed contract.
func NewParticipantsFacetCaller(address common.Address, caller bind.ContractCaller) (*ParticipantsFacetCaller, error) {
	contract, err := bindParticipantsFacet(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ParticipantsFacetCaller{contract: contract}, nil
}

// NewParticipantsFacetTransactor creates a new write-only instance of ParticipantsFacet, bound to a specific deployed contract.
func NewParticipantsFacetTransactor(address common.Address, transactor bind.ContractTransactor) (*ParticipantsFacetTransactor, error) {
	contract, err := bindParticipantsFacet(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ParticipantsFacetTransactor{contract: contract}, nil
}

// NewParticipantsFacetFilterer creates a new log filterer instance of ParticipantsFacet, bound to a specific deployed contract.
func NewParticipantsFacetFilterer(address common.Address, filterer bind.ContractFilterer) (*ParticipantsFacetFilterer, error) {
	contract, err := bindParticipantsFacet(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ParticipantsFacetFilterer{contract: contract}, nil
}

// bindParticipantsFacet binds a generic wrapper to an already deployed contract.
func bindParticipantsFacet(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ParticipantsFacetABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ParticipantsFacet *ParticipantsFacetRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ParticipantsFacet.Contract.ParticipantsFacetCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ParticipantsFacet *ParticipantsFacetRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.ParticipantsFacetTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ParticipantsFacet *ParticipantsFacetRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.ParticipantsFacetTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ParticipantsFacet *ParticipantsFacetCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ParticipantsFacet.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ParticipantsFacet *ParticipantsFacetTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ParticipantsFacet *ParticipantsFacetTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.contract.Transact(opts, method, params...)
}

// GetChainId is a free data retrieval call binding the contract method 0x3408e470.
//
// Solidity: function getChainId() view returns(uint32)
func (_ParticipantsFacet *ParticipantsFacetCaller) GetChainId(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _ParticipantsFacet.contract.Call(opts, &out, "getChainId")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// GetChainId is a free data retrieval call binding the contract method 0x3408e470.
//
// Solidity: function getChainId() view returns(uint32)
func (_ParticipantsFacet *ParticipantsFacetSession) GetChainId() (uint32, error) {
	return _ParticipantsFacet.Contract.GetChainId(&_ParticipantsFacet.CallOpts)
}

// GetChainId is a free data retrieval call binding the contract method 0x3408e470.
//
// Solidity: function getChainId() view returns(uint32)
func (_ParticipantsFacet *ParticipantsFacetCallerSession) GetChainId() (uint32, error) {
	return _ParticipantsFacet.Contract.GetChainId(&_ParticipantsFacet.CallOpts)
}

// GetValidatorPublicKey is a free data retrieval call binding the contract method 0x4e6f4a22.
//
// Solidity: function getValidatorPublicKey(address _validator) view returns(uint256[2])
func (_ParticipantsFacet *ParticipantsFacetCaller) GetValidatorPublicKey(opts *bind.CallOpts, _validator common.Address) ([2]*big.Int, error) {
	var out []interface{}
	err := _ParticipantsFacet.contract.Call(opts, &out, "getValidatorPublicKey", _validator)

	if err != nil {
		return *new([2]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([2]*big.Int)).(*[2]*big.Int)

	return out0, err

}

// GetValidatorPublicKey is a free data retrieval call binding the contract method 0x4e6f4a22.
//
// Solidity: function getValidatorPublicKey(address _validator) view returns(uint256[2])
func (_ParticipantsFacet *ParticipantsFacetSession) GetValidatorPublicKey(_validator common.Address) ([2]*big.Int, error) {
	return _ParticipantsFacet.Contract.GetValidatorPublicKey(&_ParticipantsFacet.CallOpts, _validator)
}

// GetValidatorPublicKey is a free data retrieval call binding the contract method 0x4e6f4a22.
//
// Solidity: function getValidatorPublicKey(address _validator) view returns(uint256[2])
func (_ParticipantsFacet *ParticipantsFacetCallerSession) GetValidatorPublicKey(_validator common.Address) ([2]*big.Int, error) {
	return _ParticipantsFacet.Contract.GetValidatorPublicKey(&_ParticipantsFacet.CallOpts, _validator)
}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() view returns(address[])
func (_ParticipantsFacet *ParticipantsFacetCaller) GetValidators(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _ParticipantsFacet.contract.Call(opts, &out, "getValidators")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() view returns(address[])
func (_ParticipantsFacet *ParticipantsFacetSession) GetValidators() ([]common.Address, error) {
	return _ParticipantsFacet.Contract.GetValidators(&_ParticipantsFacet.CallOpts)
}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() view returns(address[])
func (_ParticipantsFacet *ParticipantsFacetCallerSession) GetValidators() ([]common.Address, error) {
	return _ParticipantsFacet.Contract.GetValidators(&_ParticipantsFacet.CallOpts)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address validator) view returns(bool)
func (_ParticipantsFacet *ParticipantsFacetCaller) IsValidator(opts *bind.CallOpts, validator common.Address) (bool, error) {
	var out []interface{}
	err := _ParticipantsFacet.contract.Call(opts, &out, "isValidator", validator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address validator) view returns(bool)
func (_ParticipantsFacet *ParticipantsFacetSession) IsValidator(validator common.Address) (bool, error) {
	return _ParticipantsFacet.Contract.IsValidator(&_ParticipantsFacet.CallOpts, validator)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address validator) view returns(bool)
func (_ParticipantsFacet *ParticipantsFacetCallerSession) IsValidator(validator common.Address) (bool, error) {
	return _ParticipantsFacet.Contract.IsValidator(&_ParticipantsFacet.CallOpts, validator)
}

// ValidatorCount is a free data retrieval call binding the contract method 0x0f43a677.
//
// Solidity: function validatorCount() view returns(uint8)
func (_ParticipantsFacet *ParticipantsFacetCaller) ValidatorCount(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _ParticipantsFacet.contract.Call(opts, &out, "validatorCount")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// ValidatorCount is a free data retrieval call binding the contract method 0x0f43a677.
//
// Solidity: function validatorCount() view returns(uint8)
func (_ParticipantsFacet *ParticipantsFacetSession) ValidatorCount() (uint8, error) {
	return _ParticipantsFacet.Contract.ValidatorCount(&_ParticipantsFacet.CallOpts)
}

// ValidatorCount is a free data retrieval call binding the contract method 0x0f43a677.
//
// Solidity: function validatorCount() view returns(uint8)
func (_ParticipantsFacet *ParticipantsFacetCallerSession) ValidatorCount() (uint8, error) {
	return _ParticipantsFacet.Contract.ValidatorCount(&_ParticipantsFacet.CallOpts)
}

// ValidatorMaxCount is a free data retrieval call binding the contract method 0x09f0d45d.
//
// Solidity: function validatorMaxCount() view returns(uint8)
func (_ParticipantsFacet *ParticipantsFacetCaller) ValidatorMaxCount(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _ParticipantsFacet.contract.Call(opts, &out, "validatorMaxCount")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// ValidatorMaxCount is a free data retrieval call binding the contract method 0x09f0d45d.
//
// Solidity: function validatorMaxCount() view returns(uint8)
func (_ParticipantsFacet *ParticipantsFacetSession) ValidatorMaxCount() (uint8, error) {
	return _ParticipantsFacet.Contract.ValidatorMaxCount(&_ParticipantsFacet.CallOpts)
}

// ValidatorMaxCount is a free data retrieval call binding the contract method 0x09f0d45d.
//
// Solidity: function validatorMaxCount() view returns(uint8)
func (_ParticipantsFacet *ParticipantsFacetCallerSession) ValidatorMaxCount() (uint8, error) {
	return _ParticipantsFacet.Contract.ValidatorMaxCount(&_ParticipantsFacet.CallOpts)
}

// AddValidator is a paid mutator transaction binding the contract method 0xeb6320c7.
//
// Solidity: function addValidator(address _validator, uint256[2] _madID) returns(uint8)
func (_ParticipantsFacet *ParticipantsFacetTransactor) AddValidator(opts *bind.TransactOpts, _validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _ParticipantsFacet.contract.Transact(opts, "addValidator", _validator, _madID)
}

// AddValidator is a paid mutator transaction binding the contract method 0xeb6320c7.
//
// Solidity: function addValidator(address _validator, uint256[2] _madID) returns(uint8)
func (_ParticipantsFacet *ParticipantsFacetSession) AddValidator(_validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.AddValidator(&_ParticipantsFacet.TransactOpts, _validator, _madID)
}

// AddValidator is a paid mutator transaction binding the contract method 0xeb6320c7.
//
// Solidity: function addValidator(address _validator, uint256[2] _madID) returns(uint8)
func (_ParticipantsFacet *ParticipantsFacetTransactorSession) AddValidator(_validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.AddValidator(&_ParticipantsFacet.TransactOpts, _validator, _madID)
}

// ConfirmValidators is a paid mutator transaction binding the contract method 0x35c6a163.
//
// Solidity: function confirmValidators() returns(bool)
func (_ParticipantsFacet *ParticipantsFacetTransactor) ConfirmValidators(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ParticipantsFacet.contract.Transact(opts, "confirmValidators")
}

// ConfirmValidators is a paid mutator transaction binding the contract method 0x35c6a163.
//
// Solidity: function confirmValidators() returns(bool)
func (_ParticipantsFacet *ParticipantsFacetSession) ConfirmValidators() (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.ConfirmValidators(&_ParticipantsFacet.TransactOpts)
}

// ConfirmValidators is a paid mutator transaction binding the contract method 0x35c6a163.
//
// Solidity: function confirmValidators() returns(bool)
func (_ParticipantsFacet *ParticipantsFacetTransactorSession) ConfirmValidators() (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.ConfirmValidators(&_ParticipantsFacet.TransactOpts)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_ParticipantsFacet *ParticipantsFacetTransactor) GrantOperator(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _ParticipantsFacet.contract.Transact(opts, "grantOperator", who)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_ParticipantsFacet *ParticipantsFacetSession) GrantOperator(who common.Address) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.GrantOperator(&_ParticipantsFacet.TransactOpts, who)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_ParticipantsFacet *ParticipantsFacetTransactorSession) GrantOperator(who common.Address) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.GrantOperator(&_ParticipantsFacet.TransactOpts, who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_ParticipantsFacet *ParticipantsFacetTransactor) GrantOwner(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _ParticipantsFacet.contract.Transact(opts, "grantOwner", who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_ParticipantsFacet *ParticipantsFacetSession) GrantOwner(who common.Address) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.GrantOwner(&_ParticipantsFacet.TransactOpts, who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_ParticipantsFacet *ParticipantsFacetTransactorSession) GrantOwner(who common.Address) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.GrantOwner(&_ParticipantsFacet.TransactOpts, who)
}

// InitializeParticipants is a paid mutator transaction binding the contract method 0xee8420dd.
//
// Solidity: function initializeParticipants(address registry) returns()
func (_ParticipantsFacet *ParticipantsFacetTransactor) InitializeParticipants(opts *bind.TransactOpts, registry common.Address) (*types.Transaction, error) {
	return _ParticipantsFacet.contract.Transact(opts, "initializeParticipants", registry)
}

// InitializeParticipants is a paid mutator transaction binding the contract method 0xee8420dd.
//
// Solidity: function initializeParticipants(address registry) returns()
func (_ParticipantsFacet *ParticipantsFacetSession) InitializeParticipants(registry common.Address) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.InitializeParticipants(&_ParticipantsFacet.TransactOpts, registry)
}

// InitializeParticipants is a paid mutator transaction binding the contract method 0xee8420dd.
//
// Solidity: function initializeParticipants(address registry) returns()
func (_ParticipantsFacet *ParticipantsFacetTransactorSession) InitializeParticipants(registry common.Address) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.InitializeParticipants(&_ParticipantsFacet.TransactOpts, registry)
}

// RemoveValidator is a paid mutator transaction binding the contract method 0x844469b2.
//
// Solidity: function removeValidator(address _validator, uint256[2] _madID) returns(uint8)
func (_ParticipantsFacet *ParticipantsFacetTransactor) RemoveValidator(opts *bind.TransactOpts, _validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _ParticipantsFacet.contract.Transact(opts, "removeValidator", _validator, _madID)
}

// RemoveValidator is a paid mutator transaction binding the contract method 0x844469b2.
//
// Solidity: function removeValidator(address _validator, uint256[2] _madID) returns(uint8)
func (_ParticipantsFacet *ParticipantsFacetSession) RemoveValidator(_validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.RemoveValidator(&_ParticipantsFacet.TransactOpts, _validator, _madID)
}

// RemoveValidator is a paid mutator transaction binding the contract method 0x844469b2.
//
// Solidity: function removeValidator(address _validator, uint256[2] _madID) returns(uint8)
func (_ParticipantsFacet *ParticipantsFacetTransactorSession) RemoveValidator(_validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.RemoveValidator(&_ParticipantsFacet.TransactOpts, _validator, _madID)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_ParticipantsFacet *ParticipantsFacetTransactor) RevokeOperator(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _ParticipantsFacet.contract.Transact(opts, "revokeOperator", who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_ParticipantsFacet *ParticipantsFacetSession) RevokeOperator(who common.Address) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.RevokeOperator(&_ParticipantsFacet.TransactOpts, who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_ParticipantsFacet *ParticipantsFacetTransactorSession) RevokeOperator(who common.Address) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.RevokeOperator(&_ParticipantsFacet.TransactOpts, who)
}

// SetChainId is a paid mutator transaction binding the contract method 0xa179f124.
//
// Solidity: function setChainId(uint32 _chainId) returns()
func (_ParticipantsFacet *ParticipantsFacetTransactor) SetChainId(opts *bind.TransactOpts, _chainId uint32) (*types.Transaction, error) {
	return _ParticipantsFacet.contract.Transact(opts, "setChainId", _chainId)
}

// SetChainId is a paid mutator transaction binding the contract method 0xa179f124.
//
// Solidity: function setChainId(uint32 _chainId) returns()
func (_ParticipantsFacet *ParticipantsFacetSession) SetChainId(_chainId uint32) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.SetChainId(&_ParticipantsFacet.TransactOpts, _chainId)
}

// SetChainId is a paid mutator transaction binding the contract method 0xa179f124.
//
// Solidity: function setChainId(uint32 _chainId) returns()
func (_ParticipantsFacet *ParticipantsFacetTransactorSession) SetChainId(_chainId uint32) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.SetChainId(&_ParticipantsFacet.TransactOpts, _chainId)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_ParticipantsFacet *ParticipantsFacetTransactor) SetGovernance(opts *bind.TransactOpts, governance_ common.Address) (*types.Transaction, error) {
	return _ParticipantsFacet.contract.Transact(opts, "setGovernance", governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_ParticipantsFacet *ParticipantsFacetSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.SetGovernance(&_ParticipantsFacet.TransactOpts, governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_ParticipantsFacet *ParticipantsFacetTransactorSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.SetGovernance(&_ParticipantsFacet.TransactOpts, governance_)
}

// SetValidatorMaxCount is a paid mutator transaction binding the contract method 0x2cab37f7.
//
// Solidity: function setValidatorMaxCount(uint8 max) returns()
func (_ParticipantsFacet *ParticipantsFacetTransactor) SetValidatorMaxCount(opts *bind.TransactOpts, max uint8) (*types.Transaction, error) {
	return _ParticipantsFacet.contract.Transact(opts, "setValidatorMaxCount", max)
}

// SetValidatorMaxCount is a paid mutator transaction binding the contract method 0x2cab37f7.
//
// Solidity: function setValidatorMaxCount(uint8 max) returns()
func (_ParticipantsFacet *ParticipantsFacetSession) SetValidatorMaxCount(max uint8) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.SetValidatorMaxCount(&_ParticipantsFacet.TransactOpts, max)
}

// SetValidatorMaxCount is a paid mutator transaction binding the contract method 0x2cab37f7.
//
// Solidity: function setValidatorMaxCount(uint8 max) returns()
func (_ParticipantsFacet *ParticipantsFacetTransactorSession) SetValidatorMaxCount(max uint8) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.SetValidatorMaxCount(&_ParticipantsFacet.TransactOpts, max)
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_ParticipantsFacet *ParticipantsFacetTransactor) Start(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ParticipantsFacet.contract.Transact(opts, "start")
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_ParticipantsFacet *ParticipantsFacetSession) Start() (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.Start(&_ParticipantsFacet.TransactOpts)
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_ParticipantsFacet *ParticipantsFacetTransactorSession) Start() (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.Start(&_ParticipantsFacet.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_ParticipantsFacet *ParticipantsFacetTransactor) Stop(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ParticipantsFacet.contract.Transact(opts, "stop")
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_ParticipantsFacet *ParticipantsFacetSession) Stop() (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.Stop(&_ParticipantsFacet.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_ParticipantsFacet *ParticipantsFacetTransactorSession) Stop() (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.Stop(&_ParticipantsFacet.TransactOpts)
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_ParticipantsFacet *ParticipantsFacetTransactor) TakeOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ParticipantsFacet.contract.Transact(opts, "takeOwnership")
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_ParticipantsFacet *ParticipantsFacetSession) TakeOwnership() (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.TakeOwnership(&_ParticipantsFacet.TransactOpts)
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_ParticipantsFacet *ParticipantsFacetTransactorSession) TakeOwnership() (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.TakeOwnership(&_ParticipantsFacet.TransactOpts)
}

// ParticipantsFacetValidatorCreatedIterator is returned from FilterValidatorCreated and is used to iterate over the raw logs and unpacked data for ValidatorCreated events raised by the ParticipantsFacet contract.
type ParticipantsFacetValidatorCreatedIterator struct {
	Event *ParticipantsFacetValidatorCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParticipantsFacetValidatorCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParticipantsFacetValidatorCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParticipantsFacetValidatorCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParticipantsFacetValidatorCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParticipantsFacetValidatorCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParticipantsFacetValidatorCreated represents a ValidatorCreated event raised by the ParticipantsFacet contract.
type ParticipantsFacetValidatorCreated struct {
	Validator common.Address
	Signer    common.Address
	MadID     [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorCreated is a free log retrieval operation binding the contract event 0xef5e89a9416c26e0a0a37c1f630958c8c88d9efad59f553f94cff0bed0a268d3.
//
// Solidity: event ValidatorCreated(address indexed validator, address indexed signer, uint256[2] madID)
func (_ParticipantsFacet *ParticipantsFacetFilterer) FilterValidatorCreated(opts *bind.FilterOpts, validator []common.Address, signer []common.Address) (*ParticipantsFacetValidatorCreatedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var signerRule []interface{}
	for _, signerItem := range signer {
		signerRule = append(signerRule, signerItem)
	}

	logs, sub, err := _ParticipantsFacet.contract.FilterLogs(opts, "ValidatorCreated", validatorRule, signerRule)
	if err != nil {
		return nil, err
	}
	return &ParticipantsFacetValidatorCreatedIterator{contract: _ParticipantsFacet.contract, event: "ValidatorCreated", logs: logs, sub: sub}, nil
}

// WatchValidatorCreated is a free log subscription operation binding the contract event 0xef5e89a9416c26e0a0a37c1f630958c8c88d9efad59f553f94cff0bed0a268d3.
//
// Solidity: event ValidatorCreated(address indexed validator, address indexed signer, uint256[2] madID)
func (_ParticipantsFacet *ParticipantsFacetFilterer) WatchValidatorCreated(opts *bind.WatchOpts, sink chan<- *ParticipantsFacetValidatorCreated, validator []common.Address, signer []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var signerRule []interface{}
	for _, signerItem := range signer {
		signerRule = append(signerRule, signerItem)
	}

	logs, sub, err := _ParticipantsFacet.contract.WatchLogs(opts, "ValidatorCreated", validatorRule, signerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParticipantsFacetValidatorCreated)
				if err := _ParticipantsFacet.contract.UnpackLog(event, "ValidatorCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorCreated is a log parse operation binding the contract event 0xef5e89a9416c26e0a0a37c1f630958c8c88d9efad59f553f94cff0bed0a268d3.
//
// Solidity: event ValidatorCreated(address indexed validator, address indexed signer, uint256[2] madID)
func (_ParticipantsFacet *ParticipantsFacetFilterer) ParseValidatorCreated(log types.Log) (*ParticipantsFacetValidatorCreated, error) {
	event := new(ParticipantsFacetValidatorCreated)
	if err := _ParticipantsFacet.contract.UnpackLog(event, "ValidatorCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ParticipantsFacetValidatorJoinedIterator is returned from FilterValidatorJoined and is used to iterate over the raw logs and unpacked data for ValidatorJoined events raised by the ParticipantsFacet contract.
type ParticipantsFacetValidatorJoinedIterator struct {
	Event *ParticipantsFacetValidatorJoined // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParticipantsFacetValidatorJoinedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParticipantsFacetValidatorJoined)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParticipantsFacetValidatorJoined)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParticipantsFacetValidatorJoinedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParticipantsFacetValidatorJoinedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParticipantsFacetValidatorJoined represents a ValidatorJoined event raised by the ParticipantsFacet contract.
type ParticipantsFacetValidatorJoined struct {
	Validator common.Address
	MadID     [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorJoined is a free log retrieval operation binding the contract event 0x8c25e214c5693ebaf8008875bacedeb9e0aafd393864a314ed1801b2a4e13dd9.
//
// Solidity: event ValidatorJoined(address indexed validator, uint256[2] madID)
func (_ParticipantsFacet *ParticipantsFacetFilterer) FilterValidatorJoined(opts *bind.FilterOpts, validator []common.Address) (*ParticipantsFacetValidatorJoinedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ParticipantsFacet.contract.FilterLogs(opts, "ValidatorJoined", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ParticipantsFacetValidatorJoinedIterator{contract: _ParticipantsFacet.contract, event: "ValidatorJoined", logs: logs, sub: sub}, nil
}

// WatchValidatorJoined is a free log subscription operation binding the contract event 0x8c25e214c5693ebaf8008875bacedeb9e0aafd393864a314ed1801b2a4e13dd9.
//
// Solidity: event ValidatorJoined(address indexed validator, uint256[2] madID)
func (_ParticipantsFacet *ParticipantsFacetFilterer) WatchValidatorJoined(opts *bind.WatchOpts, sink chan<- *ParticipantsFacetValidatorJoined, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ParticipantsFacet.contract.WatchLogs(opts, "ValidatorJoined", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParticipantsFacetValidatorJoined)
				if err := _ParticipantsFacet.contract.UnpackLog(event, "ValidatorJoined", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorJoined is a log parse operation binding the contract event 0x8c25e214c5693ebaf8008875bacedeb9e0aafd393864a314ed1801b2a4e13dd9.
//
// Solidity: event ValidatorJoined(address indexed validator, uint256[2] madID)
func (_ParticipantsFacet *ParticipantsFacetFilterer) ParseValidatorJoined(log types.Log) (*ParticipantsFacetValidatorJoined, error) {
	event := new(ParticipantsFacetValidatorJoined)
	if err := _ParticipantsFacet.contract.UnpackLog(event, "ValidatorJoined", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ParticipantsFacetValidatorLeftIterator is returned from FilterValidatorLeft and is used to iterate over the raw logs and unpacked data for ValidatorLeft events raised by the ParticipantsFacet contract.
type ParticipantsFacetValidatorLeftIterator struct {
	Event *ParticipantsFacetValidatorLeft // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParticipantsFacetValidatorLeftIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParticipantsFacetValidatorLeft)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParticipantsFacetValidatorLeft)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParticipantsFacetValidatorLeftIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParticipantsFacetValidatorLeftIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParticipantsFacetValidatorLeft represents a ValidatorLeft event raised by the ParticipantsFacet contract.
type ParticipantsFacetValidatorLeft struct {
	Validator common.Address
	PkHash    [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorLeft is a free log retrieval operation binding the contract event 0x319bbadb03b94aedc69babb34a28675536a9cb30f4bbde343e1d0018c44ebd94.
//
// Solidity: event ValidatorLeft(address indexed validator, uint256[2] pkHash)
func (_ParticipantsFacet *ParticipantsFacetFilterer) FilterValidatorLeft(opts *bind.FilterOpts, validator []common.Address) (*ParticipantsFacetValidatorLeftIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ParticipantsFacet.contract.FilterLogs(opts, "ValidatorLeft", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ParticipantsFacetValidatorLeftIterator{contract: _ParticipantsFacet.contract, event: "ValidatorLeft", logs: logs, sub: sub}, nil
}

// WatchValidatorLeft is a free log subscription operation binding the contract event 0x319bbadb03b94aedc69babb34a28675536a9cb30f4bbde343e1d0018c44ebd94.
//
// Solidity: event ValidatorLeft(address indexed validator, uint256[2] pkHash)
func (_ParticipantsFacet *ParticipantsFacetFilterer) WatchValidatorLeft(opts *bind.WatchOpts, sink chan<- *ParticipantsFacetValidatorLeft, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ParticipantsFacet.contract.WatchLogs(opts, "ValidatorLeft", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParticipantsFacetValidatorLeft)
				if err := _ParticipantsFacet.contract.UnpackLog(event, "ValidatorLeft", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorLeft is a log parse operation binding the contract event 0x319bbadb03b94aedc69babb34a28675536a9cb30f4bbde343e1d0018c44ebd94.
//
// Solidity: event ValidatorLeft(address indexed validator, uint256[2] pkHash)
func (_ParticipantsFacet *ParticipantsFacetFilterer) ParseValidatorLeft(log types.Log) (*ParticipantsFacetValidatorLeft, error) {
	event := new(ParticipantsFacetValidatorLeft)
	if err := _ParticipantsFacet.contract.UnpackLog(event, "ValidatorLeft", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ParticipantsFacetValidatorQueuedIterator is returned from FilterValidatorQueued and is used to iterate over the raw logs and unpacked data for ValidatorQueued events raised by the ParticipantsFacet contract.
type ParticipantsFacetValidatorQueuedIterator struct {
	Event *ParticipantsFacetValidatorQueued // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParticipantsFacetValidatorQueuedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParticipantsFacetValidatorQueued)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParticipantsFacetValidatorQueued)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParticipantsFacetValidatorQueuedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParticipantsFacetValidatorQueuedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParticipantsFacetValidatorQueued represents a ValidatorQueued event raised by the ParticipantsFacet contract.
type ParticipantsFacetValidatorQueued struct {
	Validator common.Address
	PkHash    [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorQueued is a free log retrieval operation binding the contract event 0xb4389eb1c66b46169245bc8c147e4b13a2b88adcaa44d001b0fadf25890b773d.
//
// Solidity: event ValidatorQueued(address indexed validator, uint256[2] pkHash)
func (_ParticipantsFacet *ParticipantsFacetFilterer) FilterValidatorQueued(opts *bind.FilterOpts, validator []common.Address) (*ParticipantsFacetValidatorQueuedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ParticipantsFacet.contract.FilterLogs(opts, "ValidatorQueued", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ParticipantsFacetValidatorQueuedIterator{contract: _ParticipantsFacet.contract, event: "ValidatorQueued", logs: logs, sub: sub}, nil
}

// WatchValidatorQueued is a free log subscription operation binding the contract event 0xb4389eb1c66b46169245bc8c147e4b13a2b88adcaa44d001b0fadf25890b773d.
//
// Solidity: event ValidatorQueued(address indexed validator, uint256[2] pkHash)
func (_ParticipantsFacet *ParticipantsFacetFilterer) WatchValidatorQueued(opts *bind.WatchOpts, sink chan<- *ParticipantsFacetValidatorQueued, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ParticipantsFacet.contract.WatchLogs(opts, "ValidatorQueued", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParticipantsFacetValidatorQueued)
				if err := _ParticipantsFacet.contract.UnpackLog(event, "ValidatorQueued", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorQueued is a log parse operation binding the contract event 0xb4389eb1c66b46169245bc8c147e4b13a2b88adcaa44d001b0fadf25890b773d.
//
// Solidity: event ValidatorQueued(address indexed validator, uint256[2] pkHash)
func (_ParticipantsFacet *ParticipantsFacetFilterer) ParseValidatorQueued(log types.Log) (*ParticipantsFacetValidatorQueued, error) {
	event := new(ParticipantsFacetValidatorQueued)
	if err := _ParticipantsFacet.contract.UnpackLog(event, "ValidatorQueued", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ParticipantsLibraryMetaData contains all meta data concerning the ParticipantsLibrary contract.
var ParticipantsLibraryMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"madID\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"madID\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"pkHash\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorLeft\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"pkHash\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorQueued\",\"type\":\"event\"}]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202159458229af62d26c0bbe2b82d2f20f933e11a64a29ed401d1e55a47db5277064736f6c634300080b0033",
}

// ParticipantsLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use ParticipantsLibraryMetaData.ABI instead.
var ParticipantsLibraryABI = ParticipantsLibraryMetaData.ABI

// ParticipantsLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ParticipantsLibraryMetaData.Bin instead.
var ParticipantsLibraryBin = ParticipantsLibraryMetaData.Bin

// DeployParticipantsLibrary deploys a new Ethereum contract, binding an instance of ParticipantsLibrary to it.
func DeployParticipantsLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ParticipantsLibrary, error) {
	parsed, err := ParticipantsLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ParticipantsLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ParticipantsLibrary{ParticipantsLibraryCaller: ParticipantsLibraryCaller{contract: contract}, ParticipantsLibraryTransactor: ParticipantsLibraryTransactor{contract: contract}, ParticipantsLibraryFilterer: ParticipantsLibraryFilterer{contract: contract}}, nil
}

// ParticipantsLibrary is an auto generated Go binding around an Ethereum contract.
type ParticipantsLibrary struct {
	ParticipantsLibraryCaller     // Read-only binding to the contract
	ParticipantsLibraryTransactor // Write-only binding to the contract
	ParticipantsLibraryFilterer   // Log filterer for contract events
}

// ParticipantsLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type ParticipantsLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ParticipantsLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ParticipantsLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ParticipantsLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ParticipantsLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ParticipantsLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ParticipantsLibrarySession struct {
	Contract     *ParticipantsLibrary // Generic contract binding to set the session for
	CallOpts     bind.CallOpts        // Call options to use throughout this session
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// ParticipantsLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ParticipantsLibraryCallerSession struct {
	Contract *ParticipantsLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts              // Call options to use throughout this session
}

// ParticipantsLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ParticipantsLibraryTransactorSession struct {
	Contract     *ParticipantsLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts              // Transaction auth options to use throughout this session
}

// ParticipantsLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type ParticipantsLibraryRaw struct {
	Contract *ParticipantsLibrary // Generic contract binding to access the raw methods on
}

// ParticipantsLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ParticipantsLibraryCallerRaw struct {
	Contract *ParticipantsLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// ParticipantsLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ParticipantsLibraryTransactorRaw struct {
	Contract *ParticipantsLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewParticipantsLibrary creates a new instance of ParticipantsLibrary, bound to a specific deployed contract.
func NewParticipantsLibrary(address common.Address, backend bind.ContractBackend) (*ParticipantsLibrary, error) {
	contract, err := bindParticipantsLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ParticipantsLibrary{ParticipantsLibraryCaller: ParticipantsLibraryCaller{contract: contract}, ParticipantsLibraryTransactor: ParticipantsLibraryTransactor{contract: contract}, ParticipantsLibraryFilterer: ParticipantsLibraryFilterer{contract: contract}}, nil
}

// NewParticipantsLibraryCaller creates a new read-only instance of ParticipantsLibrary, bound to a specific deployed contract.
func NewParticipantsLibraryCaller(address common.Address, caller bind.ContractCaller) (*ParticipantsLibraryCaller, error) {
	contract, err := bindParticipantsLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ParticipantsLibraryCaller{contract: contract}, nil
}

// NewParticipantsLibraryTransactor creates a new write-only instance of ParticipantsLibrary, bound to a specific deployed contract.
func NewParticipantsLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*ParticipantsLibraryTransactor, error) {
	contract, err := bindParticipantsLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ParticipantsLibraryTransactor{contract: contract}, nil
}

// NewParticipantsLibraryFilterer creates a new log filterer instance of ParticipantsLibrary, bound to a specific deployed contract.
func NewParticipantsLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*ParticipantsLibraryFilterer, error) {
	contract, err := bindParticipantsLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ParticipantsLibraryFilterer{contract: contract}, nil
}

// bindParticipantsLibrary binds a generic wrapper to an already deployed contract.
func bindParticipantsLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ParticipantsLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ParticipantsLibrary *ParticipantsLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ParticipantsLibrary.Contract.ParticipantsLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ParticipantsLibrary *ParticipantsLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ParticipantsLibrary.Contract.ParticipantsLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ParticipantsLibrary *ParticipantsLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ParticipantsLibrary.Contract.ParticipantsLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ParticipantsLibrary *ParticipantsLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ParticipantsLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ParticipantsLibrary *ParticipantsLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ParticipantsLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ParticipantsLibrary *ParticipantsLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ParticipantsLibrary.Contract.contract.Transact(opts, method, params...)
}

// ParticipantsLibraryValidatorCreatedIterator is returned from FilterValidatorCreated and is used to iterate over the raw logs and unpacked data for ValidatorCreated events raised by the ParticipantsLibrary contract.
type ParticipantsLibraryValidatorCreatedIterator struct {
	Event *ParticipantsLibraryValidatorCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParticipantsLibraryValidatorCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParticipantsLibraryValidatorCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParticipantsLibraryValidatorCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParticipantsLibraryValidatorCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParticipantsLibraryValidatorCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParticipantsLibraryValidatorCreated represents a ValidatorCreated event raised by the ParticipantsLibrary contract.
type ParticipantsLibraryValidatorCreated struct {
	Validator common.Address
	Signer    common.Address
	MadID     [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorCreated is a free log retrieval operation binding the contract event 0xef5e89a9416c26e0a0a37c1f630958c8c88d9efad59f553f94cff0bed0a268d3.
//
// Solidity: event ValidatorCreated(address indexed validator, address indexed signer, uint256[2] madID)
func (_ParticipantsLibrary *ParticipantsLibraryFilterer) FilterValidatorCreated(opts *bind.FilterOpts, validator []common.Address, signer []common.Address) (*ParticipantsLibraryValidatorCreatedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var signerRule []interface{}
	for _, signerItem := range signer {
		signerRule = append(signerRule, signerItem)
	}

	logs, sub, err := _ParticipantsLibrary.contract.FilterLogs(opts, "ValidatorCreated", validatorRule, signerRule)
	if err != nil {
		return nil, err
	}
	return &ParticipantsLibraryValidatorCreatedIterator{contract: _ParticipantsLibrary.contract, event: "ValidatorCreated", logs: logs, sub: sub}, nil
}

// WatchValidatorCreated is a free log subscription operation binding the contract event 0xef5e89a9416c26e0a0a37c1f630958c8c88d9efad59f553f94cff0bed0a268d3.
//
// Solidity: event ValidatorCreated(address indexed validator, address indexed signer, uint256[2] madID)
func (_ParticipantsLibrary *ParticipantsLibraryFilterer) WatchValidatorCreated(opts *bind.WatchOpts, sink chan<- *ParticipantsLibraryValidatorCreated, validator []common.Address, signer []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var signerRule []interface{}
	for _, signerItem := range signer {
		signerRule = append(signerRule, signerItem)
	}

	logs, sub, err := _ParticipantsLibrary.contract.WatchLogs(opts, "ValidatorCreated", validatorRule, signerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParticipantsLibraryValidatorCreated)
				if err := _ParticipantsLibrary.contract.UnpackLog(event, "ValidatorCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorCreated is a log parse operation binding the contract event 0xef5e89a9416c26e0a0a37c1f630958c8c88d9efad59f553f94cff0bed0a268d3.
//
// Solidity: event ValidatorCreated(address indexed validator, address indexed signer, uint256[2] madID)
func (_ParticipantsLibrary *ParticipantsLibraryFilterer) ParseValidatorCreated(log types.Log) (*ParticipantsLibraryValidatorCreated, error) {
	event := new(ParticipantsLibraryValidatorCreated)
	if err := _ParticipantsLibrary.contract.UnpackLog(event, "ValidatorCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ParticipantsLibraryValidatorJoinedIterator is returned from FilterValidatorJoined and is used to iterate over the raw logs and unpacked data for ValidatorJoined events raised by the ParticipantsLibrary contract.
type ParticipantsLibraryValidatorJoinedIterator struct {
	Event *ParticipantsLibraryValidatorJoined // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParticipantsLibraryValidatorJoinedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParticipantsLibraryValidatorJoined)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParticipantsLibraryValidatorJoined)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParticipantsLibraryValidatorJoinedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParticipantsLibraryValidatorJoinedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParticipantsLibraryValidatorJoined represents a ValidatorJoined event raised by the ParticipantsLibrary contract.
type ParticipantsLibraryValidatorJoined struct {
	Validator common.Address
	MadID     [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorJoined is a free log retrieval operation binding the contract event 0x8c25e214c5693ebaf8008875bacedeb9e0aafd393864a314ed1801b2a4e13dd9.
//
// Solidity: event ValidatorJoined(address indexed validator, uint256[2] madID)
func (_ParticipantsLibrary *ParticipantsLibraryFilterer) FilterValidatorJoined(opts *bind.FilterOpts, validator []common.Address) (*ParticipantsLibraryValidatorJoinedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ParticipantsLibrary.contract.FilterLogs(opts, "ValidatorJoined", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ParticipantsLibraryValidatorJoinedIterator{contract: _ParticipantsLibrary.contract, event: "ValidatorJoined", logs: logs, sub: sub}, nil
}

// WatchValidatorJoined is a free log subscription operation binding the contract event 0x8c25e214c5693ebaf8008875bacedeb9e0aafd393864a314ed1801b2a4e13dd9.
//
// Solidity: event ValidatorJoined(address indexed validator, uint256[2] madID)
func (_ParticipantsLibrary *ParticipantsLibraryFilterer) WatchValidatorJoined(opts *bind.WatchOpts, sink chan<- *ParticipantsLibraryValidatorJoined, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ParticipantsLibrary.contract.WatchLogs(opts, "ValidatorJoined", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParticipantsLibraryValidatorJoined)
				if err := _ParticipantsLibrary.contract.UnpackLog(event, "ValidatorJoined", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorJoined is a log parse operation binding the contract event 0x8c25e214c5693ebaf8008875bacedeb9e0aafd393864a314ed1801b2a4e13dd9.
//
// Solidity: event ValidatorJoined(address indexed validator, uint256[2] madID)
func (_ParticipantsLibrary *ParticipantsLibraryFilterer) ParseValidatorJoined(log types.Log) (*ParticipantsLibraryValidatorJoined, error) {
	event := new(ParticipantsLibraryValidatorJoined)
	if err := _ParticipantsLibrary.contract.UnpackLog(event, "ValidatorJoined", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ParticipantsLibraryValidatorLeftIterator is returned from FilterValidatorLeft and is used to iterate over the raw logs and unpacked data for ValidatorLeft events raised by the ParticipantsLibrary contract.
type ParticipantsLibraryValidatorLeftIterator struct {
	Event *ParticipantsLibraryValidatorLeft // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParticipantsLibraryValidatorLeftIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParticipantsLibraryValidatorLeft)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParticipantsLibraryValidatorLeft)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParticipantsLibraryValidatorLeftIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParticipantsLibraryValidatorLeftIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParticipantsLibraryValidatorLeft represents a ValidatorLeft event raised by the ParticipantsLibrary contract.
type ParticipantsLibraryValidatorLeft struct {
	Validator common.Address
	PkHash    [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorLeft is a free log retrieval operation binding the contract event 0x319bbadb03b94aedc69babb34a28675536a9cb30f4bbde343e1d0018c44ebd94.
//
// Solidity: event ValidatorLeft(address indexed validator, uint256[2] pkHash)
func (_ParticipantsLibrary *ParticipantsLibraryFilterer) FilterValidatorLeft(opts *bind.FilterOpts, validator []common.Address) (*ParticipantsLibraryValidatorLeftIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ParticipantsLibrary.contract.FilterLogs(opts, "ValidatorLeft", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ParticipantsLibraryValidatorLeftIterator{contract: _ParticipantsLibrary.contract, event: "ValidatorLeft", logs: logs, sub: sub}, nil
}

// WatchValidatorLeft is a free log subscription operation binding the contract event 0x319bbadb03b94aedc69babb34a28675536a9cb30f4bbde343e1d0018c44ebd94.
//
// Solidity: event ValidatorLeft(address indexed validator, uint256[2] pkHash)
func (_ParticipantsLibrary *ParticipantsLibraryFilterer) WatchValidatorLeft(opts *bind.WatchOpts, sink chan<- *ParticipantsLibraryValidatorLeft, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ParticipantsLibrary.contract.WatchLogs(opts, "ValidatorLeft", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParticipantsLibraryValidatorLeft)
				if err := _ParticipantsLibrary.contract.UnpackLog(event, "ValidatorLeft", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorLeft is a log parse operation binding the contract event 0x319bbadb03b94aedc69babb34a28675536a9cb30f4bbde343e1d0018c44ebd94.
//
// Solidity: event ValidatorLeft(address indexed validator, uint256[2] pkHash)
func (_ParticipantsLibrary *ParticipantsLibraryFilterer) ParseValidatorLeft(log types.Log) (*ParticipantsLibraryValidatorLeft, error) {
	event := new(ParticipantsLibraryValidatorLeft)
	if err := _ParticipantsLibrary.contract.UnpackLog(event, "ValidatorLeft", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ParticipantsLibraryValidatorQueuedIterator is returned from FilterValidatorQueued and is used to iterate over the raw logs and unpacked data for ValidatorQueued events raised by the ParticipantsLibrary contract.
type ParticipantsLibraryValidatorQueuedIterator struct {
	Event *ParticipantsLibraryValidatorQueued // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParticipantsLibraryValidatorQueuedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParticipantsLibraryValidatorQueued)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParticipantsLibraryValidatorQueued)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParticipantsLibraryValidatorQueuedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParticipantsLibraryValidatorQueuedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParticipantsLibraryValidatorQueued represents a ValidatorQueued event raised by the ParticipantsLibrary contract.
type ParticipantsLibraryValidatorQueued struct {
	Validator common.Address
	PkHash    [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorQueued is a free log retrieval operation binding the contract event 0xb4389eb1c66b46169245bc8c147e4b13a2b88adcaa44d001b0fadf25890b773d.
//
// Solidity: event ValidatorQueued(address indexed validator, uint256[2] pkHash)
func (_ParticipantsLibrary *ParticipantsLibraryFilterer) FilterValidatorQueued(opts *bind.FilterOpts, validator []common.Address) (*ParticipantsLibraryValidatorQueuedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ParticipantsLibrary.contract.FilterLogs(opts, "ValidatorQueued", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ParticipantsLibraryValidatorQueuedIterator{contract: _ParticipantsLibrary.contract, event: "ValidatorQueued", logs: logs, sub: sub}, nil
}

// WatchValidatorQueued is a free log subscription operation binding the contract event 0xb4389eb1c66b46169245bc8c147e4b13a2b88adcaa44d001b0fadf25890b773d.
//
// Solidity: event ValidatorQueued(address indexed validator, uint256[2] pkHash)
func (_ParticipantsLibrary *ParticipantsLibraryFilterer) WatchValidatorQueued(opts *bind.WatchOpts, sink chan<- *ParticipantsLibraryValidatorQueued, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ParticipantsLibrary.contract.WatchLogs(opts, "ValidatorQueued", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParticipantsLibraryValidatorQueued)
				if err := _ParticipantsLibrary.contract.UnpackLog(event, "ValidatorQueued", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorQueued is a log parse operation binding the contract event 0xb4389eb1c66b46169245bc8c147e4b13a2b88adcaa44d001b0fadf25890b773d.
//
// Solidity: event ValidatorQueued(address indexed validator, uint256[2] pkHash)
func (_ParticipantsLibrary *ParticipantsLibraryFilterer) ParseValidatorQueued(log types.Log) (*ParticipantsLibraryValidatorQueued, error) {
	event := new(ParticipantsLibraryValidatorQueued)
	if err := _ParticipantsLibrary.contract.UnpackLog(event, "ValidatorQueued", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// QueueLibraryMetaData contains all meta data concerning the QueueLibrary contract.
var QueueLibraryMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122005eb4abdcc1d9305c0ccdf4d086070287df3900d0b29adc2cdd39babeb7db95c64736f6c634300080b0033",
}

// QueueLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use QueueLibraryMetaData.ABI instead.
var QueueLibraryABI = QueueLibraryMetaData.ABI

// QueueLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use QueueLibraryMetaData.Bin instead.
var QueueLibraryBin = QueueLibraryMetaData.Bin

// DeployQueueLibrary deploys a new Ethereum contract, binding an instance of QueueLibrary to it.
func DeployQueueLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *QueueLibrary, error) {
	parsed, err := QueueLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(QueueLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &QueueLibrary{QueueLibraryCaller: QueueLibraryCaller{contract: contract}, QueueLibraryTransactor: QueueLibraryTransactor{contract: contract}, QueueLibraryFilterer: QueueLibraryFilterer{contract: contract}}, nil
}

// QueueLibrary is an auto generated Go binding around an Ethereum contract.
type QueueLibrary struct {
	QueueLibraryCaller     // Read-only binding to the contract
	QueueLibraryTransactor // Write-only binding to the contract
	QueueLibraryFilterer   // Log filterer for contract events
}

// QueueLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type QueueLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// QueueLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type QueueLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// QueueLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type QueueLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// QueueLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type QueueLibrarySession struct {
	Contract     *QueueLibrary     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// QueueLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type QueueLibraryCallerSession struct {
	Contract *QueueLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// QueueLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type QueueLibraryTransactorSession struct {
	Contract     *QueueLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// QueueLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type QueueLibraryRaw struct {
	Contract *QueueLibrary // Generic contract binding to access the raw methods on
}

// QueueLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type QueueLibraryCallerRaw struct {
	Contract *QueueLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// QueueLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type QueueLibraryTransactorRaw struct {
	Contract *QueueLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewQueueLibrary creates a new instance of QueueLibrary, bound to a specific deployed contract.
func NewQueueLibrary(address common.Address, backend bind.ContractBackend) (*QueueLibrary, error) {
	contract, err := bindQueueLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &QueueLibrary{QueueLibraryCaller: QueueLibraryCaller{contract: contract}, QueueLibraryTransactor: QueueLibraryTransactor{contract: contract}, QueueLibraryFilterer: QueueLibraryFilterer{contract: contract}}, nil
}

// NewQueueLibraryCaller creates a new read-only instance of QueueLibrary, bound to a specific deployed contract.
func NewQueueLibraryCaller(address common.Address, caller bind.ContractCaller) (*QueueLibraryCaller, error) {
	contract, err := bindQueueLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &QueueLibraryCaller{contract: contract}, nil
}

// NewQueueLibraryTransactor creates a new write-only instance of QueueLibrary, bound to a specific deployed contract.
func NewQueueLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*QueueLibraryTransactor, error) {
	contract, err := bindQueueLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &QueueLibraryTransactor{contract: contract}, nil
}

// NewQueueLibraryFilterer creates a new log filterer instance of QueueLibrary, bound to a specific deployed contract.
func NewQueueLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*QueueLibraryFilterer, error) {
	contract, err := bindQueueLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &QueueLibraryFilterer{contract: contract}, nil
}

// bindQueueLibrary binds a generic wrapper to an already deployed contract.
func bindQueueLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(QueueLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_QueueLibrary *QueueLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _QueueLibrary.Contract.QueueLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_QueueLibrary *QueueLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _QueueLibrary.Contract.QueueLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_QueueLibrary *QueueLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _QueueLibrary.Contract.QueueLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_QueueLibrary *QueueLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _QueueLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_QueueLibrary *QueueLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _QueueLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_QueueLibrary *QueueLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _QueueLibrary.Contract.contract.Transact(opts, method, params...)
}

// RCertParserLibraryMetaData contains all meta data concerning the RCertParserLibrary contract.
var RCertParserLibraryMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220fba04bd95699b897e8512379d59749522c4076313569b460b9805099bf38b63164736f6c634300080b0033",
}

// RCertParserLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use RCertParserLibraryMetaData.ABI instead.
var RCertParserLibraryABI = RCertParserLibraryMetaData.ABI

// RCertParserLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RCertParserLibraryMetaData.Bin instead.
var RCertParserLibraryBin = RCertParserLibraryMetaData.Bin

// DeployRCertParserLibrary deploys a new Ethereum contract, binding an instance of RCertParserLibrary to it.
func DeployRCertParserLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *RCertParserLibrary, error) {
	parsed, err := RCertParserLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RCertParserLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &RCertParserLibrary{RCertParserLibraryCaller: RCertParserLibraryCaller{contract: contract}, RCertParserLibraryTransactor: RCertParserLibraryTransactor{contract: contract}, RCertParserLibraryFilterer: RCertParserLibraryFilterer{contract: contract}}, nil
}

// RCertParserLibrary is an auto generated Go binding around an Ethereum contract.
type RCertParserLibrary struct {
	RCertParserLibraryCaller     // Read-only binding to the contract
	RCertParserLibraryTransactor // Write-only binding to the contract
	RCertParserLibraryFilterer   // Log filterer for contract events
}

// RCertParserLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type RCertParserLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RCertParserLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RCertParserLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RCertParserLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RCertParserLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RCertParserLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RCertParserLibrarySession struct {
	Contract     *RCertParserLibrary // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// RCertParserLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RCertParserLibraryCallerSession struct {
	Contract *RCertParserLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// RCertParserLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RCertParserLibraryTransactorSession struct {
	Contract     *RCertParserLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// RCertParserLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type RCertParserLibraryRaw struct {
	Contract *RCertParserLibrary // Generic contract binding to access the raw methods on
}

// RCertParserLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RCertParserLibraryCallerRaw struct {
	Contract *RCertParserLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// RCertParserLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RCertParserLibraryTransactorRaw struct {
	Contract *RCertParserLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRCertParserLibrary creates a new instance of RCertParserLibrary, bound to a specific deployed contract.
func NewRCertParserLibrary(address common.Address, backend bind.ContractBackend) (*RCertParserLibrary, error) {
	contract, err := bindRCertParserLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RCertParserLibrary{RCertParserLibraryCaller: RCertParserLibraryCaller{contract: contract}, RCertParserLibraryTransactor: RCertParserLibraryTransactor{contract: contract}, RCertParserLibraryFilterer: RCertParserLibraryFilterer{contract: contract}}, nil
}

// NewRCertParserLibraryCaller creates a new read-only instance of RCertParserLibrary, bound to a specific deployed contract.
func NewRCertParserLibraryCaller(address common.Address, caller bind.ContractCaller) (*RCertParserLibraryCaller, error) {
	contract, err := bindRCertParserLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RCertParserLibraryCaller{contract: contract}, nil
}

// NewRCertParserLibraryTransactor creates a new write-only instance of RCertParserLibrary, bound to a specific deployed contract.
func NewRCertParserLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*RCertParserLibraryTransactor, error) {
	contract, err := bindRCertParserLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RCertParserLibraryTransactor{contract: contract}, nil
}

// NewRCertParserLibraryFilterer creates a new log filterer instance of RCertParserLibrary, bound to a specific deployed contract.
func NewRCertParserLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*RCertParserLibraryFilterer, error) {
	contract, err := bindRCertParserLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RCertParserLibraryFilterer{contract: contract}, nil
}

// bindRCertParserLibrary binds a generic wrapper to an already deployed contract.
func bindRCertParserLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(RCertParserLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RCertParserLibrary *RCertParserLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RCertParserLibrary.Contract.RCertParserLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RCertParserLibrary *RCertParserLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RCertParserLibrary.Contract.RCertParserLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RCertParserLibrary *RCertParserLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RCertParserLibrary.Contract.RCertParserLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RCertParserLibrary *RCertParserLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RCertParserLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RCertParserLibrary *RCertParserLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RCertParserLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RCertParserLibrary *RCertParserLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RCertParserLibrary.Contract.contract.Transact(opts, method, params...)
}

// RClaimsParserLibraryMetaData contains all meta data concerning the RClaimsParserLibrary contract.
var RClaimsParserLibraryMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220edb7e1132c64b16a02a568aa24534435f9c4b23e423c0460a145ebdb491cb10b64736f6c634300080b0033",
}

// RClaimsParserLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use RClaimsParserLibraryMetaData.ABI instead.
var RClaimsParserLibraryABI = RClaimsParserLibraryMetaData.ABI

// RClaimsParserLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RClaimsParserLibraryMetaData.Bin instead.
var RClaimsParserLibraryBin = RClaimsParserLibraryMetaData.Bin

// DeployRClaimsParserLibrary deploys a new Ethereum contract, binding an instance of RClaimsParserLibrary to it.
func DeployRClaimsParserLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *RClaimsParserLibrary, error) {
	parsed, err := RClaimsParserLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RClaimsParserLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &RClaimsParserLibrary{RClaimsParserLibraryCaller: RClaimsParserLibraryCaller{contract: contract}, RClaimsParserLibraryTransactor: RClaimsParserLibraryTransactor{contract: contract}, RClaimsParserLibraryFilterer: RClaimsParserLibraryFilterer{contract: contract}}, nil
}

// RClaimsParserLibrary is an auto generated Go binding around an Ethereum contract.
type RClaimsParserLibrary struct {
	RClaimsParserLibraryCaller     // Read-only binding to the contract
	RClaimsParserLibraryTransactor // Write-only binding to the contract
	RClaimsParserLibraryFilterer   // Log filterer for contract events
}

// RClaimsParserLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type RClaimsParserLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RClaimsParserLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RClaimsParserLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RClaimsParserLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RClaimsParserLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RClaimsParserLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RClaimsParserLibrarySession struct {
	Contract     *RClaimsParserLibrary // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// RClaimsParserLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RClaimsParserLibraryCallerSession struct {
	Contract *RClaimsParserLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// RClaimsParserLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RClaimsParserLibraryTransactorSession struct {
	Contract     *RClaimsParserLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// RClaimsParserLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type RClaimsParserLibraryRaw struct {
	Contract *RClaimsParserLibrary // Generic contract binding to access the raw methods on
}

// RClaimsParserLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RClaimsParserLibraryCallerRaw struct {
	Contract *RClaimsParserLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// RClaimsParserLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RClaimsParserLibraryTransactorRaw struct {
	Contract *RClaimsParserLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRClaimsParserLibrary creates a new instance of RClaimsParserLibrary, bound to a specific deployed contract.
func NewRClaimsParserLibrary(address common.Address, backend bind.ContractBackend) (*RClaimsParserLibrary, error) {
	contract, err := bindRClaimsParserLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RClaimsParserLibrary{RClaimsParserLibraryCaller: RClaimsParserLibraryCaller{contract: contract}, RClaimsParserLibraryTransactor: RClaimsParserLibraryTransactor{contract: contract}, RClaimsParserLibraryFilterer: RClaimsParserLibraryFilterer{contract: contract}}, nil
}

// NewRClaimsParserLibraryCaller creates a new read-only instance of RClaimsParserLibrary, bound to a specific deployed contract.
func NewRClaimsParserLibraryCaller(address common.Address, caller bind.ContractCaller) (*RClaimsParserLibraryCaller, error) {
	contract, err := bindRClaimsParserLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RClaimsParserLibraryCaller{contract: contract}, nil
}

// NewRClaimsParserLibraryTransactor creates a new write-only instance of RClaimsParserLibrary, bound to a specific deployed contract.
func NewRClaimsParserLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*RClaimsParserLibraryTransactor, error) {
	contract, err := bindRClaimsParserLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RClaimsParserLibraryTransactor{contract: contract}, nil
}

// NewRClaimsParserLibraryFilterer creates a new log filterer instance of RClaimsParserLibrary, bound to a specific deployed contract.
func NewRClaimsParserLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*RClaimsParserLibraryFilterer, error) {
	contract, err := bindRClaimsParserLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RClaimsParserLibraryFilterer{contract: contract}, nil
}

// bindRClaimsParserLibrary binds a generic wrapper to an already deployed contract.
func bindRClaimsParserLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(RClaimsParserLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RClaimsParserLibrary *RClaimsParserLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RClaimsParserLibrary.Contract.RClaimsParserLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RClaimsParserLibrary *RClaimsParserLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RClaimsParserLibrary.Contract.RClaimsParserLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RClaimsParserLibrary *RClaimsParserLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RClaimsParserLibrary.Contract.RClaimsParserLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RClaimsParserLibrary *RClaimsParserLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RClaimsParserLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RClaimsParserLibrary *RClaimsParserLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RClaimsParserLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RClaimsParserLibrary *RClaimsParserLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RClaimsParserLibrary.Contract.contract.Transact(opts, method, params...)
}

// RegistryMetaData contains all meta data concerning the Registry contract.
var RegistryMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"lookup\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"remove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50600280546001600160a01b0319163390811790915561002f90610034565b610129565b6002546001600160a01b031633148061005c57503360009081526020819052604090205460ff165b6100c65760405162461bcd60e51b815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527037b934bd32b21037b832b930ba37b9399760791b606482015260840160405180910390fd5b6001600160a01b0381166000908152602081905260408120805460ff191660019081179091558054916100f883610100565b919050555050565b600060001982141561012257634e487b7160e01b600052601160045260246000fd5b5060010190565b6108d5806101386000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063e348da1311610050578063e348da1314610094578063f67187ac146100a7578063fad8b32a146100e357600080fd5b80631e59c5291461006c57806380599e4b14610081575b600080fd5b61007f61007a36600461071a565b6100f6565b005b61007f61008f366004610768565b610225565b61007f6100a23660046107a5565b61032e565b6100ba6100b5366004610768565b610454565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b61007f6100f13660046107a5565b610492565b60025473ffffffffffffffffffffffffffffffffffffffff1633148061012b57503360009081526020819052604090205460ff165b6101bc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527f6f72697a6564206f70657261746f72732e00000000000000000000000000000060648201526084015b60405180910390fd5b806003836040516101cd91906107c7565b908152604051908190036020019020805473ffffffffffffffffffffffffffffffffffffffff929092167fffffffffffffffffffffffff00000000000000000000000000000000000000009092169190911790555050565b60025473ffffffffffffffffffffffffffffffffffffffff1633148061025a57503360009081526020819052604090205460ff165b6102e6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527f6f72697a6564206f70657261746f72732e00000000000000000000000000000060648201526084016101b3565b6003816040516102f691906107c7565b90815260405190819003602001902080547fffffffffffffffffffffffff000000000000000000000000000000000000000016905550565b60025473ffffffffffffffffffffffffffffffffffffffff1633148061036357503360009081526020819052604090205460ff165b6103ef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527f6f72697a6564206f70657261746f72732e00000000000000000000000000000060648201526084016101b3565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260208190526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600190811790915580549161044c83610831565b919050555050565b600060038260405161046691906107c7565b9081526040519081900360200190205473ffffffffffffffffffffffffffffffffffffffff1692915050565b60025473ffffffffffffffffffffffffffffffffffffffff163314806104c757503360009081526020819052604090205460ff165b610553576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527f6f72697a6564206f70657261746f72732e00000000000000000000000000000060648201526084016101b3565b60018054116105be576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f43616e27742072656d6f766520616c6c206f70657261746f727300000000000060448201526064016101b3565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260208190526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055600180549161044c8361086a565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f83011261065757600080fd5b813567ffffffffffffffff8082111561067257610672610617565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019082821181831017156106b8576106b8610617565b816040528381528660208588010111156106d157600080fd5b836020870160208301376000602085830101528094505050505092915050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461071557600080fd5b919050565b6000806040838503121561072d57600080fd5b823567ffffffffffffffff81111561074457600080fd5b61075085828601610646565b92505061075f602084016106f1565b90509250929050565b60006020828403121561077a57600080fd5b813567ffffffffffffffff81111561079157600080fd5b61079d84828501610646565b949350505050565b6000602082840312156107b757600080fd5b6107c0826106f1565b9392505050565b6000825160005b818110156107e857602081860181015185830152016107ce565b818111156107f7576000828501525b509190910192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561086357610863610802565b5060010190565b60008161087957610879610802565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019056fea26469706673582212204993219e4d768c69803a8bae97b098fe3ed58f2533e269fea846e16e8d18e3d064736f6c634300080b0033",
}

// RegistryABI is the input ABI used to generate the binding from.
// Deprecated: Use RegistryMetaData.ABI instead.
var RegistryABI = RegistryMetaData.ABI

// RegistryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RegistryMetaData.Bin instead.
var RegistryBin = RegistryMetaData.Bin

// DeployRegistry deploys a new Ethereum contract, binding an instance of Registry to it.
func DeployRegistry(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Registry, error) {
	parsed, err := RegistryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RegistryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Registry{RegistryCaller: RegistryCaller{contract: contract}, RegistryTransactor: RegistryTransactor{contract: contract}, RegistryFilterer: RegistryFilterer{contract: contract}}, nil
}

// Registry is an auto generated Go binding around an Ethereum contract.
type Registry struct {
	RegistryCaller     // Read-only binding to the contract
	RegistryTransactor // Write-only binding to the contract
	RegistryFilterer   // Log filterer for contract events
}

// RegistryCaller is an auto generated read-only Go binding around an Ethereum contract.
type RegistryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RegistryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RegistryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistrySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RegistrySession struct {
	Contract     *Registry         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RegistryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RegistryCallerSession struct {
	Contract *RegistryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// RegistryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RegistryTransactorSession struct {
	Contract     *RegistryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// RegistryRaw is an auto generated low-level Go binding around an Ethereum contract.
type RegistryRaw struct {
	Contract *Registry // Generic contract binding to access the raw methods on
}

// RegistryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RegistryCallerRaw struct {
	Contract *RegistryCaller // Generic read-only contract binding to access the raw methods on
}

// RegistryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RegistryTransactorRaw struct {
	Contract *RegistryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRegistry creates a new instance of Registry, bound to a specific deployed contract.
func NewRegistry(address common.Address, backend bind.ContractBackend) (*Registry, error) {
	contract, err := bindRegistry(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Registry{RegistryCaller: RegistryCaller{contract: contract}, RegistryTransactor: RegistryTransactor{contract: contract}, RegistryFilterer: RegistryFilterer{contract: contract}}, nil
}

// NewRegistryCaller creates a new read-only instance of Registry, bound to a specific deployed contract.
func NewRegistryCaller(address common.Address, caller bind.ContractCaller) (*RegistryCaller, error) {
	contract, err := bindRegistry(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RegistryCaller{contract: contract}, nil
}

// NewRegistryTransactor creates a new write-only instance of Registry, bound to a specific deployed contract.
func NewRegistryTransactor(address common.Address, transactor bind.ContractTransactor) (*RegistryTransactor, error) {
	contract, err := bindRegistry(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RegistryTransactor{contract: contract}, nil
}

// NewRegistryFilterer creates a new log filterer instance of Registry, bound to a specific deployed contract.
func NewRegistryFilterer(address common.Address, filterer bind.ContractFilterer) (*RegistryFilterer, error) {
	contract, err := bindRegistry(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RegistryFilterer{contract: contract}, nil
}

// bindRegistry binds a generic wrapper to an already deployed contract.
func bindRegistry(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(RegistryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Registry *RegistryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Registry.Contract.RegistryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Registry *RegistryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Registry.Contract.RegistryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Registry *RegistryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Registry.Contract.RegistryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Registry *RegistryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Registry.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Registry *RegistryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Registry.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Registry *RegistryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Registry.Contract.contract.Transact(opts, method, params...)
}

// Lookup is a free data retrieval call binding the contract method 0xf67187ac.
//
// Solidity: function lookup(string name) view returns(address)
func (_Registry *RegistryCaller) Lookup(opts *bind.CallOpts, name string) (common.Address, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "lookup", name)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Lookup is a free data retrieval call binding the contract method 0xf67187ac.
//
// Solidity: function lookup(string name) view returns(address)
func (_Registry *RegistrySession) Lookup(name string) (common.Address, error) {
	return _Registry.Contract.Lookup(&_Registry.CallOpts, name)
}

// Lookup is a free data retrieval call binding the contract method 0xf67187ac.
//
// Solidity: function lookup(string name) view returns(address)
func (_Registry *RegistryCallerSession) Lookup(name string) (common.Address, error) {
	return _Registry.Contract.Lookup(&_Registry.CallOpts, name)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_Registry *RegistryTransactor) GrantOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "grantOperator", _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_Registry *RegistrySession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _Registry.Contract.GrantOperator(&_Registry.TransactOpts, _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_Registry *RegistryTransactorSession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _Registry.Contract.GrantOperator(&_Registry.TransactOpts, _operator)
}

// Register is a paid mutator transaction binding the contract method 0x1e59c529.
//
// Solidity: function register(string name, address dst) returns()
func (_Registry *RegistryTransactor) Register(opts *bind.TransactOpts, name string, dst common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "register", name, dst)
}

// Register is a paid mutator transaction binding the contract method 0x1e59c529.
//
// Solidity: function register(string name, address dst) returns()
func (_Registry *RegistrySession) Register(name string, dst common.Address) (*types.Transaction, error) {
	return _Registry.Contract.Register(&_Registry.TransactOpts, name, dst)
}

// Register is a paid mutator transaction binding the contract method 0x1e59c529.
//
// Solidity: function register(string name, address dst) returns()
func (_Registry *RegistryTransactorSession) Register(name string, dst common.Address) (*types.Transaction, error) {
	return _Registry.Contract.Register(&_Registry.TransactOpts, name, dst)
}

// Remove is a paid mutator transaction binding the contract method 0x80599e4b.
//
// Solidity: function remove(string name) returns()
func (_Registry *RegistryTransactor) Remove(opts *bind.TransactOpts, name string) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "remove", name)
}

// Remove is a paid mutator transaction binding the contract method 0x80599e4b.
//
// Solidity: function remove(string name) returns()
func (_Registry *RegistrySession) Remove(name string) (*types.Transaction, error) {
	return _Registry.Contract.Remove(&_Registry.TransactOpts, name)
}

// Remove is a paid mutator transaction binding the contract method 0x80599e4b.
//
// Solidity: function remove(string name) returns()
func (_Registry *RegistryTransactorSession) Remove(name string) (*types.Transaction, error) {
	return _Registry.Contract.Remove(&_Registry.TransactOpts, name)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_Registry *RegistryTransactor) RevokeOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "revokeOperator", _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_Registry *RegistrySession) RevokeOperator(_operator common.Address) (*types.Transaction, error) {
	return _Registry.Contract.RevokeOperator(&_Registry.TransactOpts, _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_Registry *RegistryTransactorSession) RevokeOperator(_operator common.Address) (*types.Transaction, error) {
	return _Registry.Contract.RevokeOperator(&_Registry.TransactOpts, _operator)
}

// RegistryClientMetaData contains all meta data concerning the RegistryClient contract.
var RegistryClientMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"reloadRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// RegistryClientABI is the input ABI used to generate the binding from.
// Deprecated: Use RegistryClientMetaData.ABI instead.
var RegistryClientABI = RegistryClientMetaData.ABI

// RegistryClient is an auto generated Go binding around an Ethereum contract.
type RegistryClient struct {
	RegistryClientCaller     // Read-only binding to the contract
	RegistryClientTransactor // Write-only binding to the contract
	RegistryClientFilterer   // Log filterer for contract events
}

// RegistryClientCaller is an auto generated read-only Go binding around an Ethereum contract.
type RegistryClientCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryClientTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RegistryClientTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryClientFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RegistryClientFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryClientSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RegistryClientSession struct {
	Contract     *RegistryClient   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RegistryClientCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RegistryClientCallerSession struct {
	Contract *RegistryClientCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// RegistryClientTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RegistryClientTransactorSession struct {
	Contract     *RegistryClientTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// RegistryClientRaw is an auto generated low-level Go binding around an Ethereum contract.
type RegistryClientRaw struct {
	Contract *RegistryClient // Generic contract binding to access the raw methods on
}

// RegistryClientCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RegistryClientCallerRaw struct {
	Contract *RegistryClientCaller // Generic read-only contract binding to access the raw methods on
}

// RegistryClientTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RegistryClientTransactorRaw struct {
	Contract *RegistryClientTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRegistryClient creates a new instance of RegistryClient, bound to a specific deployed contract.
func NewRegistryClient(address common.Address, backend bind.ContractBackend) (*RegistryClient, error) {
	contract, err := bindRegistryClient(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RegistryClient{RegistryClientCaller: RegistryClientCaller{contract: contract}, RegistryClientTransactor: RegistryClientTransactor{contract: contract}, RegistryClientFilterer: RegistryClientFilterer{contract: contract}}, nil
}

// NewRegistryClientCaller creates a new read-only instance of RegistryClient, bound to a specific deployed contract.
func NewRegistryClientCaller(address common.Address, caller bind.ContractCaller) (*RegistryClientCaller, error) {
	contract, err := bindRegistryClient(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RegistryClientCaller{contract: contract}, nil
}

// NewRegistryClientTransactor creates a new write-only instance of RegistryClient, bound to a specific deployed contract.
func NewRegistryClientTransactor(address common.Address, transactor bind.ContractTransactor) (*RegistryClientTransactor, error) {
	contract, err := bindRegistryClient(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RegistryClientTransactor{contract: contract}, nil
}

// NewRegistryClientFilterer creates a new log filterer instance of RegistryClient, bound to a specific deployed contract.
func NewRegistryClientFilterer(address common.Address, filterer bind.ContractFilterer) (*RegistryClientFilterer, error) {
	contract, err := bindRegistryClient(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RegistryClientFilterer{contract: contract}, nil
}

// bindRegistryClient binds a generic wrapper to an already deployed contract.
func bindRegistryClient(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(RegistryClientABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RegistryClient *RegistryClientRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RegistryClient.Contract.RegistryClientCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RegistryClient *RegistryClientRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryClient.Contract.RegistryClientTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RegistryClient *RegistryClientRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RegistryClient.Contract.RegistryClientTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RegistryClient *RegistryClientCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RegistryClient.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RegistryClient *RegistryClientTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryClient.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RegistryClient *RegistryClientTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RegistryClient.Contract.contract.Transact(opts, method, params...)
}

// ReloadRegistry is a paid mutator transaction binding the contract method 0x1476601d.
//
// Solidity: function reloadRegistry() returns()
func (_RegistryClient *RegistryClientTransactor) ReloadRegistry(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryClient.contract.Transact(opts, "reloadRegistry")
}

// ReloadRegistry is a paid mutator transaction binding the contract method 0x1476601d.
//
// Solidity: function reloadRegistry() returns()
func (_RegistryClient *RegistryClientSession) ReloadRegistry() (*types.Transaction, error) {
	return _RegistryClient.Contract.ReloadRegistry(&_RegistryClient.TransactOpts)
}

// ReloadRegistry is a paid mutator transaction binding the contract method 0x1476601d.
//
// Solidity: function reloadRegistry() returns()
func (_RegistryClient *RegistryClientTransactorSession) ReloadRegistry() (*types.Transaction, error) {
	return _RegistryClient.Contract.ReloadRegistry(&_RegistryClient.TransactOpts)
}

// SafeMathMetaData contains all meta data concerning the SafeMath contract.
var SafeMathMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c58820dfd8f5a0f977f93484dfb140dca77e4743595028c67d898e8ce2c5925364736f6c634300080b0033",
}

// SafeMathABI is the input ABI used to generate the binding from.
// Deprecated: Use SafeMathMetaData.ABI instead.
var SafeMathABI = SafeMathMetaData.ABI

// SafeMathBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SafeMathMetaData.Bin instead.
var SafeMathBin = SafeMathMetaData.Bin

// DeploySafeMath deploys a new Ethereum contract, binding an instance of SafeMath to it.
func DeploySafeMath(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *SafeMath, error) {
	parsed, err := SafeMathMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SafeMathBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SafeMath{SafeMathCaller: SafeMathCaller{contract: contract}, SafeMathTransactor: SafeMathTransactor{contract: contract}, SafeMathFilterer: SafeMathFilterer{contract: contract}}, nil
}

// SafeMath is an auto generated Go binding around an Ethereum contract.
type SafeMath struct {
	SafeMathCaller     // Read-only binding to the contract
	SafeMathTransactor // Write-only binding to the contract
	SafeMathFilterer   // Log filterer for contract events
}

// SafeMathCaller is an auto generated read-only Go binding around an Ethereum contract.
type SafeMathCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SafeMathTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SafeMathTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SafeMathFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SafeMathFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SafeMathSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SafeMathSession struct {
	Contract     *SafeMath         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SafeMathCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SafeMathCallerSession struct {
	Contract *SafeMathCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// SafeMathTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SafeMathTransactorSession struct {
	Contract     *SafeMathTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// SafeMathRaw is an auto generated low-level Go binding around an Ethereum contract.
type SafeMathRaw struct {
	Contract *SafeMath // Generic contract binding to access the raw methods on
}

// SafeMathCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SafeMathCallerRaw struct {
	Contract *SafeMathCaller // Generic read-only contract binding to access the raw methods on
}

// SafeMathTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SafeMathTransactorRaw struct {
	Contract *SafeMathTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSafeMath creates a new instance of SafeMath, bound to a specific deployed contract.
func NewSafeMath(address common.Address, backend bind.ContractBackend) (*SafeMath, error) {
	contract, err := bindSafeMath(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SafeMath{SafeMathCaller: SafeMathCaller{contract: contract}, SafeMathTransactor: SafeMathTransactor{contract: contract}, SafeMathFilterer: SafeMathFilterer{contract: contract}}, nil
}

// NewSafeMathCaller creates a new read-only instance of SafeMath, bound to a specific deployed contract.
func NewSafeMathCaller(address common.Address, caller bind.ContractCaller) (*SafeMathCaller, error) {
	contract, err := bindSafeMath(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SafeMathCaller{contract: contract}, nil
}

// NewSafeMathTransactor creates a new write-only instance of SafeMath, bound to a specific deployed contract.
func NewSafeMathTransactor(address common.Address, transactor bind.ContractTransactor) (*SafeMathTransactor, error) {
	contract, err := bindSafeMath(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SafeMathTransactor{contract: contract}, nil
}

// NewSafeMathFilterer creates a new log filterer instance of SafeMath, bound to a specific deployed contract.
func NewSafeMathFilterer(address common.Address, filterer bind.ContractFilterer) (*SafeMathFilterer, error) {
	contract, err := bindSafeMath(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SafeMathFilterer{contract: contract}, nil
}

// bindSafeMath binds a generic wrapper to an already deployed contract.
func bindSafeMath(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SafeMathABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SafeMath *SafeMathRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SafeMath.Contract.SafeMathCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SafeMath *SafeMathRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SafeMath.Contract.SafeMathTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SafeMath *SafeMathRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SafeMath.Contract.SafeMathTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SafeMath *SafeMathCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SafeMath.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SafeMath *SafeMathTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SafeMath.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SafeMath *SafeMathTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SafeMath.Contract.contract.Transact(opts, method, params...)
}

// SimpleAuthMetaData contains all meta data concerning the SimpleAuth contract.
var SimpleAuthMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50600280546001600160a01b0319163390811790915561002f90610034565b610129565b6002546001600160a01b031633148061005c57503360009081526020819052604090205460ff165b6100c65760405162461bcd60e51b815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527037b934bd32b21037b832b930ba37b9399760791b606482015260840160405180910390fd5b6001600160a01b0381166000908152602081905260408120805460ff191660019081179091558054916100f883610100565b919050555050565b600060001982141561012257634e487b7160e01b600052601160045260246000fd5b5060010190565b610423806101386000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063e348da131461003b578063fad8b32a14610050575b600080fd5b61004e610049366004610313565b610063565b005b61004e61005e366004610313565b61018e565b60025473ffffffffffffffffffffffffffffffffffffffff1633148061009857503360009081526020819052604090205460ff165b610129576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527f6f72697a6564206f70657261746f72732e00000000000000000000000000000060648201526084015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8116600090815260208190526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660019081179091558054916101868361037f565b919050555050565b60025473ffffffffffffffffffffffffffffffffffffffff163314806101c357503360009081526020819052604090205460ff165b61024f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527f6f72697a6564206f70657261746f72732e0000000000000000000000000000006064820152608401610120565b60018054116102ba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f43616e27742072656d6f766520616c6c206f70657261746f72730000000000006044820152606401610120565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260208190526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690556001805491610186836103b8565b60006020828403121561032557600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461034957600080fd5b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156103b1576103b1610350565b5060010190565b6000816103c7576103c7610350565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019056fea2646970667358221220b9dbfeb347071d25bda37b58bbf2f037636b8ee53a2236caeeda21051d2cae8664736f6c634300080b0033",
}

// SimpleAuthABI is the input ABI used to generate the binding from.
// Deprecated: Use SimpleAuthMetaData.ABI instead.
var SimpleAuthABI = SimpleAuthMetaData.ABI

// SimpleAuthBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SimpleAuthMetaData.Bin instead.
var SimpleAuthBin = SimpleAuthMetaData.Bin

// DeploySimpleAuth deploys a new Ethereum contract, binding an instance of SimpleAuth to it.
func DeploySimpleAuth(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *SimpleAuth, error) {
	parsed, err := SimpleAuthMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SimpleAuthBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SimpleAuth{SimpleAuthCaller: SimpleAuthCaller{contract: contract}, SimpleAuthTransactor: SimpleAuthTransactor{contract: contract}, SimpleAuthFilterer: SimpleAuthFilterer{contract: contract}}, nil
}

// SimpleAuth is an auto generated Go binding around an Ethereum contract.
type SimpleAuth struct {
	SimpleAuthCaller     // Read-only binding to the contract
	SimpleAuthTransactor // Write-only binding to the contract
	SimpleAuthFilterer   // Log filterer for contract events
}

// SimpleAuthCaller is an auto generated read-only Go binding around an Ethereum contract.
type SimpleAuthCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimpleAuthTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SimpleAuthTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimpleAuthFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SimpleAuthFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimpleAuthSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SimpleAuthSession struct {
	Contract     *SimpleAuth       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SimpleAuthCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SimpleAuthCallerSession struct {
	Contract *SimpleAuthCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// SimpleAuthTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SimpleAuthTransactorSession struct {
	Contract     *SimpleAuthTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// SimpleAuthRaw is an auto generated low-level Go binding around an Ethereum contract.
type SimpleAuthRaw struct {
	Contract *SimpleAuth // Generic contract binding to access the raw methods on
}

// SimpleAuthCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SimpleAuthCallerRaw struct {
	Contract *SimpleAuthCaller // Generic read-only contract binding to access the raw methods on
}

// SimpleAuthTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SimpleAuthTransactorRaw struct {
	Contract *SimpleAuthTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSimpleAuth creates a new instance of SimpleAuth, bound to a specific deployed contract.
func NewSimpleAuth(address common.Address, backend bind.ContractBackend) (*SimpleAuth, error) {
	contract, err := bindSimpleAuth(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SimpleAuth{SimpleAuthCaller: SimpleAuthCaller{contract: contract}, SimpleAuthTransactor: SimpleAuthTransactor{contract: contract}, SimpleAuthFilterer: SimpleAuthFilterer{contract: contract}}, nil
}

// NewSimpleAuthCaller creates a new read-only instance of SimpleAuth, bound to a specific deployed contract.
func NewSimpleAuthCaller(address common.Address, caller bind.ContractCaller) (*SimpleAuthCaller, error) {
	contract, err := bindSimpleAuth(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SimpleAuthCaller{contract: contract}, nil
}

// NewSimpleAuthTransactor creates a new write-only instance of SimpleAuth, bound to a specific deployed contract.
func NewSimpleAuthTransactor(address common.Address, transactor bind.ContractTransactor) (*SimpleAuthTransactor, error) {
	contract, err := bindSimpleAuth(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SimpleAuthTransactor{contract: contract}, nil
}

// NewSimpleAuthFilterer creates a new log filterer instance of SimpleAuth, bound to a specific deployed contract.
func NewSimpleAuthFilterer(address common.Address, filterer bind.ContractFilterer) (*SimpleAuthFilterer, error) {
	contract, err := bindSimpleAuth(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SimpleAuthFilterer{contract: contract}, nil
}

// bindSimpleAuth binds a generic wrapper to an already deployed contract.
func bindSimpleAuth(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SimpleAuthABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SimpleAuth *SimpleAuthRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SimpleAuth.Contract.SimpleAuthCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SimpleAuth *SimpleAuthRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SimpleAuth.Contract.SimpleAuthTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SimpleAuth *SimpleAuthRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SimpleAuth.Contract.SimpleAuthTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SimpleAuth *SimpleAuthCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SimpleAuth.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SimpleAuth *SimpleAuthTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SimpleAuth.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SimpleAuth *SimpleAuthTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SimpleAuth.Contract.contract.Transact(opts, method, params...)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_SimpleAuth *SimpleAuthTransactor) GrantOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _SimpleAuth.contract.Transact(opts, "grantOperator", _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_SimpleAuth *SimpleAuthSession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _SimpleAuth.Contract.GrantOperator(&_SimpleAuth.TransactOpts, _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_SimpleAuth *SimpleAuthTransactorSession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _SimpleAuth.Contract.GrantOperator(&_SimpleAuth.TransactOpts, _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_SimpleAuth *SimpleAuthTransactor) RevokeOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _SimpleAuth.contract.Transact(opts, "revokeOperator", _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_SimpleAuth *SimpleAuthSession) RevokeOperator(_operator common.Address) (*types.Transaction, error) {
	return _SimpleAuth.Contract.RevokeOperator(&_SimpleAuth.TransactOpts, _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_SimpleAuth *SimpleAuthTransactorSession) RevokeOperator(_operator common.Address) (*types.Transaction, error) {
	return _SimpleAuth.Contract.RevokeOperator(&_SimpleAuth.TransactOpts, _operator)
}

// SnapshotsEventsMetaData contains all meta data concerning the SnapshotsEvents contract.
var SnapshotsEventsMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"chainId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"height\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"startingETHDKG\",\"type\":\"bool\"}],\"name\":\"SnapshotTaken\",\"type\":\"event\"}]",
}

// SnapshotsEventsABI is the input ABI used to generate the binding from.
// Deprecated: Use SnapshotsEventsMetaData.ABI instead.
var SnapshotsEventsABI = SnapshotsEventsMetaData.ABI

// SnapshotsEvents is an auto generated Go binding around an Ethereum contract.
type SnapshotsEvents struct {
	SnapshotsEventsCaller     // Read-only binding to the contract
	SnapshotsEventsTransactor // Write-only binding to the contract
	SnapshotsEventsFilterer   // Log filterer for contract events
}

// SnapshotsEventsCaller is an auto generated read-only Go binding around an Ethereum contract.
type SnapshotsEventsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SnapshotsEventsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SnapshotsEventsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SnapshotsEventsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SnapshotsEventsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SnapshotsEventsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SnapshotsEventsSession struct {
	Contract     *SnapshotsEvents  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SnapshotsEventsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SnapshotsEventsCallerSession struct {
	Contract *SnapshotsEventsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// SnapshotsEventsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SnapshotsEventsTransactorSession struct {
	Contract     *SnapshotsEventsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// SnapshotsEventsRaw is an auto generated low-level Go binding around an Ethereum contract.
type SnapshotsEventsRaw struct {
	Contract *SnapshotsEvents // Generic contract binding to access the raw methods on
}

// SnapshotsEventsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SnapshotsEventsCallerRaw struct {
	Contract *SnapshotsEventsCaller // Generic read-only contract binding to access the raw methods on
}

// SnapshotsEventsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SnapshotsEventsTransactorRaw struct {
	Contract *SnapshotsEventsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSnapshotsEvents creates a new instance of SnapshotsEvents, bound to a specific deployed contract.
func NewSnapshotsEvents(address common.Address, backend bind.ContractBackend) (*SnapshotsEvents, error) {
	contract, err := bindSnapshotsEvents(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SnapshotsEvents{SnapshotsEventsCaller: SnapshotsEventsCaller{contract: contract}, SnapshotsEventsTransactor: SnapshotsEventsTransactor{contract: contract}, SnapshotsEventsFilterer: SnapshotsEventsFilterer{contract: contract}}, nil
}

// NewSnapshotsEventsCaller creates a new read-only instance of SnapshotsEvents, bound to a specific deployed contract.
func NewSnapshotsEventsCaller(address common.Address, caller bind.ContractCaller) (*SnapshotsEventsCaller, error) {
	contract, err := bindSnapshotsEvents(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SnapshotsEventsCaller{contract: contract}, nil
}

// NewSnapshotsEventsTransactor creates a new write-only instance of SnapshotsEvents, bound to a specific deployed contract.
func NewSnapshotsEventsTransactor(address common.Address, transactor bind.ContractTransactor) (*SnapshotsEventsTransactor, error) {
	contract, err := bindSnapshotsEvents(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SnapshotsEventsTransactor{contract: contract}, nil
}

// NewSnapshotsEventsFilterer creates a new log filterer instance of SnapshotsEvents, bound to a specific deployed contract.
func NewSnapshotsEventsFilterer(address common.Address, filterer bind.ContractFilterer) (*SnapshotsEventsFilterer, error) {
	contract, err := bindSnapshotsEvents(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SnapshotsEventsFilterer{contract: contract}, nil
}

// bindSnapshotsEvents binds a generic wrapper to an already deployed contract.
func bindSnapshotsEvents(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SnapshotsEventsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SnapshotsEvents *SnapshotsEventsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SnapshotsEvents.Contract.SnapshotsEventsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SnapshotsEvents *SnapshotsEventsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SnapshotsEvents.Contract.SnapshotsEventsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SnapshotsEvents *SnapshotsEventsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SnapshotsEvents.Contract.SnapshotsEventsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SnapshotsEvents *SnapshotsEventsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SnapshotsEvents.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SnapshotsEvents *SnapshotsEventsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SnapshotsEvents.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SnapshotsEvents *SnapshotsEventsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SnapshotsEvents.Contract.contract.Transact(opts, method, params...)
}

// SnapshotsEventsSnapshotTakenIterator is returned from FilterSnapshotTaken and is used to iterate over the raw logs and unpacked data for SnapshotTaken events raised by the SnapshotsEvents contract.
type SnapshotsEventsSnapshotTakenIterator struct {
	Event *SnapshotsEventsSnapshotTaken // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SnapshotsEventsSnapshotTakenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SnapshotsEventsSnapshotTaken)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SnapshotsEventsSnapshotTaken)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SnapshotsEventsSnapshotTakenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SnapshotsEventsSnapshotTakenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SnapshotsEventsSnapshotTaken represents a SnapshotTaken event raised by the SnapshotsEvents contract.
type SnapshotsEventsSnapshotTaken struct {
	ChainId        uint32
	Epoch          *big.Int
	Height         uint32
	Validator      common.Address
	StartingETHDKG bool
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterSnapshotTaken is a free log retrieval operation binding the contract event 0x6d438b6b835d16cdae6efdc0259fdfba17e6aa32dae81863a2467866f85f724a.
//
// Solidity: event SnapshotTaken(uint32 chainId, uint256 indexed epoch, uint32 height, address indexed validator, bool startingETHDKG)
func (_SnapshotsEvents *SnapshotsEventsFilterer) FilterSnapshotTaken(opts *bind.FilterOpts, epoch []*big.Int, validator []common.Address) (*SnapshotsEventsSnapshotTakenIterator, error) {

	var epochRule []interface{}
	for _, epochItem := range epoch {
		epochRule = append(epochRule, epochItem)
	}

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _SnapshotsEvents.contract.FilterLogs(opts, "SnapshotTaken", epochRule, validatorRule)
	if err != nil {
		return nil, err
	}
	return &SnapshotsEventsSnapshotTakenIterator{contract: _SnapshotsEvents.contract, event: "SnapshotTaken", logs: logs, sub: sub}, nil
}

// WatchSnapshotTaken is a free log subscription operation binding the contract event 0x6d438b6b835d16cdae6efdc0259fdfba17e6aa32dae81863a2467866f85f724a.
//
// Solidity: event SnapshotTaken(uint32 chainId, uint256 indexed epoch, uint32 height, address indexed validator, bool startingETHDKG)
func (_SnapshotsEvents *SnapshotsEventsFilterer) WatchSnapshotTaken(opts *bind.WatchOpts, sink chan<- *SnapshotsEventsSnapshotTaken, epoch []*big.Int, validator []common.Address) (event.Subscription, error) {

	var epochRule []interface{}
	for _, epochItem := range epoch {
		epochRule = append(epochRule, epochItem)
	}

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _SnapshotsEvents.contract.WatchLogs(opts, "SnapshotTaken", epochRule, validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SnapshotsEventsSnapshotTaken)
				if err := _SnapshotsEvents.contract.UnpackLog(event, "SnapshotTaken", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSnapshotTaken is a log parse operation binding the contract event 0x6d438b6b835d16cdae6efdc0259fdfba17e6aa32dae81863a2467866f85f724a.
//
// Solidity: event SnapshotTaken(uint32 chainId, uint256 indexed epoch, uint32 height, address indexed validator, bool startingETHDKG)
func (_SnapshotsEvents *SnapshotsEventsFilterer) ParseSnapshotTaken(log types.Log) (*SnapshotsEventsSnapshotTaken, error) {
	event := new(SnapshotsEventsSnapshotTaken)
	if err := _SnapshotsEvents.contract.UnpackLog(event, "SnapshotTaken", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SnapshotsFacetMetaData contains all meta data concerning the SnapshotsFacet contract.
var SnapshotsFacetMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"chainId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"height\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"startingETHDKG\",\"type\":\"bool\"}],\"name\":\"SnapshotTaken\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotNumber\",\"type\":\"uint256\"}],\"name\":\"getChainIdFromSnapshot\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotNumber\",\"type\":\"uint256\"}],\"name\":\"getHeightFromSnapshot\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotNumber\",\"type\":\"uint256\"}],\"name\":\"getMadHeightFromSnapshot\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotNumber\",\"type\":\"uint256\"}],\"name\":\"getRawBlockClaimsSnapshot\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotNumber\",\"type\":\"uint256\"}],\"name\":\"getRawSignatureSnapshot\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"grantOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractRegistry\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"initializeSnapshots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minEthSnapshotSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minMadSnapshotSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ns\",\"type\":\"uint256\"}],\"name\":\"setEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governance_\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minSize\",\"type\":\"uint256\"}],\"name\":\"setMinEthSnapshotSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minSize\",\"type\":\"uint256\"}],\"name\":\"setMinMadSnapshotSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_signatureGroup\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_bclaims\",\"type\":\"bytes\"}],\"name\":\"snapshot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b506000620000296200004360201b620010741760201c565b60010180546001600160a01b031916331790555062000067565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90565b6134a980620000776000396000f3fe608060405234801561001057600080fd5b506004361061016c5760003560e01c8063900cf0cf116100cd578063dc97805911610081578063e380b22811610066578063e380b228146102db578063e4b82105146102ee578063fad8b32a1461031557600080fd5b8063dc978059146102b5578063e348da13146102c857600080fd5b8063ab033ea9116100b2578063ab033ea91461027b578063be9a655514610171578063c17cb9ee1461028e57600080fd5b8063900cf0cf1461025257806399e33e3d1461026857600080fd5b806320d9a246116101245780634f4ea614116101095780634f4ea6141461022457806360536172146102375780636372fe511461023f57600080fd5b806320d9a246146101f157806335b6c6321461020457600080fd5b80630ceb2cef116101555780630ceb2cef146101a35780630d81dce4146101b657806319f74669146101c957600080fd5b806307da68f51461017157806308ca1f251461017b575b600080fd5b610179610328565b005b61018e610189366004612f8f565b6103f1565b60405190151581526020015b60405180910390f35b6101796101b1366004612ffb565b6104d6565b6101796101c4366004612ffb565b6105c3565b6101dc6101d7366004612ffb565b6106a9565b60405163ffffffff909116815260200161019a565b6101796101ff366004613036565b6106e9565b610217610212366004612ffb565b610827565b60405161019a9190613083565b6101dc610232366004612ffb565b610832565b610179610876565b61021761024d366004612ffb565b61099b565b61025a6109a6565b60405190815260200161019a565b610179610276366004612ffb565b6109d5565b610179610289366004613036565b610abb565b7fd02b08f6836233a79224d6de3c3df078574b0f84d75d2a48f85a5a3cacc729185461025a565b6101796102c3366004613036565b610c0a565b6101796102d6366004613036565b610d59565b6101dc6102e9366004612ffb565b610eca565b7fd02b08f6836233a79224d6de3c3df078574b0f84d75d2a48f85a5a3cacc729175461025a565b610179610323366004613036565b610f06565b3360009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a602081905260409091205460ff166103ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160448201527f6c6c6f776564000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b50565b3360009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a6020819052604082205460ff1680610434575061043433611098565b6104c0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603f60248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e6572206f7220667560448201527f6c6c79207374616b6564207061727469636970616e747320616c6c6f7765640060648201526084016103e5565b6104cc8686868661117a565b9695505050505050565b3360009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a602081905260409091205460ff16610597576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160448201527f6c6c6f776564000000000000000000000000000000000000000000000000000060648201526084016103e5565b6105bf827fa53f90683b42ecb37674e5c8c5c9cabf849818fdc2fdfb57bbe3c738f7b50d0f55565b5050565b3360009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a602081905260409091205460ff16610684576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160448201527f6c6c6f776564000000000000000000000000000000000000000000000000000060648201526084016103e5565b507fd02b08f6836233a79224d6de3c3df078574b0f84d75d2a48f85a5a3cacc7291755565b60008181527fd02b08f6836233a79224d6de3c3df078574b0f84d75d2a48f85a5a3cacc729156020526040812054610100900463ffffffff165b92915050565b3360009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a602081905260409091205460ff166107aa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160448201527f6c6c6f776564000000000000000000000000000000000000000000000000000060648201526084016103e5565b73ffffffffffffffffffffffffffffffffffffffff82166105bf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f6e696c207265676973747279206164647265737300000000000000000000000060448201526064016103e5565b60606106e382611946565b60008181527fd02b08f6836233a79224d6de3c3df078574b0f84d75d2a48f85a5a3cacc729156020526040812060030154640100000000900463ffffffff166106e3565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520c547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff16331461095e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f41636365737320436f6e74726f6c3a206f776e657273686970206e6f7420677260448201527f616e74656400000000000000000000000000000000000000000000000000000060648201526084016103e5565b6002810180547fffffffffffffffffffffffff00000000000000000000000000000000000000009081169091556001909101805490911633179055565b60606106e382611a12565b60006109d07fa53f90683b42ecb37674e5c8c5c9cabf849818fdc2fdfb57bbe3c738f7b50d0f5490565b905090565b3360009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a602081905260409091205460ff16610a96576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160448201527f6c6c6f776564000000000000000000000000000000000000000000000000000060648201526084016103e5565b507fd02b08f6836233a79224d6de3c3df078574b0f84d75d2a48f85a5a3cacc7291855565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff163314610ba3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e657220697320616c60448201527f6c6f77656400000000000000000000000000000000000000000000000000000060648201526084016103e5565b507f31434318735a8e6385da596be365952169e52986860b974818986b522d23520d80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff163314610cf2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e657220697320616c60448201527f6c6f77656400000000000000000000000000000000000000000000000000000060648201526084016103e5565b507f31434318735a8e6385da596be365952169e52986860b974818986b522d23520c80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff16331480610dcf57503360009081526020829052604090205460ff165b610e5b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e6572206f72206f7060448201527f657261746f7220616c6c6f77656400000000000000000000000000000000000060648201526084016103e5565b5073ffffffffffffffffffffffffffffffffffffffff1660009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b60008181527fd02b08f6836233a79224d6de3c3df078574b0f84d75d2a48f85a5a3cacc72915602052604081206003015463ffffffff166106e3565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff16331480610f7c57503360009081526020829052604090205460ff165b611008576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e6572206f72206f7060448201527f657261746f7220616c6c6f77656400000000000000000000000000000000000060648201526084016103e5565b5073ffffffffffffffffffffffffffffffffffffffff1660009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90565b73ffffffffffffffffffffffffffffffffffffffff811660009081527f310970b1d84cbb8af371a12019b396e9511a9b44411c1dabeec3e3d59d9a50f860205260408120547f310970b1d84cbb8af371a12019b396e9511a9b44411c1dabeec3e3d59d9a50f69060ff16801561117357507f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237ef5473ffffffffffffffffffffffffffffffffffffffff841660009081527f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237f8602052604090205410155b9392505050565b60007fa53f90683b42ecb37674e5c8c5c9cabf849818fdc2fdfb57bbe3c738f7b50d0e7fd02b08f6836233a79224d6de3c3df078574b0f84d75d2a48f85a5a3cacc729156111c6612e35565b6111ce612e53565b61120d89898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509250611a57915050565b604051919350915060009061122590899089906130d4565b6040805191829003822060208301520160405160208183030381529060405290506000611253828486611c1b565b9050806112bc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f5369676e617475726520766572696669636174696f6e206661696c656400000060448201526064016103e5565b60006113008a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525060089250611dca915050565b905060006113468b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250600c9250611dca915050565b6001808a0154600090815260208a90526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016821781559192506113929082018d8d612e71565b506113a1600282018f8f612e71565b5060038101805463ffffffff848116640100000000027fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000090921643821617919091179091558154908416610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000ff909116178155600189810154111561172d57600088600001600060018c6001015461143b9190613113565b81526020808201929092526040908101600020815160c081018352815460ff811615158252610100900463ffffffff169381019390935260018101805491928401916114869061312a565b80601f01602080910402602001604051908101604052809291908181526020018280546114b29061312a565b80156114ff5780601f106114d4576101008083540402835291602001916114ff565b820191906000526020600020905b8154815290600101906020018083116114e257829003601f168201915b505050505081526020016002820180546115189061312a565b80601f01602080910402602001604051908101604052809291908181526020018280546115449061312a565b80156115915780601f1061156657610100808354040283529160200191611591565b820191906000526020600020905b81548152906001019060200180831161157457829003601f168201915b50505091835250506003919091015463ffffffff808216602084015264010000000090910416604090910152805190915015806115e757508860020154816080015163ffffffff166115e39190613178565b4310155b611673576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f736e617073686f74206865696768747320746f6f20636c6f736520696e20457460448201527f68657265756d000000000000000000000000000000000000000000000000000060648201526084016103e5565b805115806116a0575088600301548160a0015163ffffffff166116969190613178565b8363ffffffff1610155b61172b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f736e617073686f74206865696768747320746f6f20636c6f736520696e204d6160448201527f644e65740000000000000000000000000000000000000000000000000000000060648201526084016103e5565b505b7f310970b1d84cbb8af371a12019b396e9511a9b44411c1dabeec3e3d59d9a50f67f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237ef60005b825481101561188b5782600001818154811061179057611790613190565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff163314156118255761181f8360000182815481106117d1576117d1613190565b6000918252602090912001546004840154600385015473ffffffffffffffffffffffffffffffffffffffff9092169161180a9190613178565b60018f015461181a906002613178565b611e8f565b50611879565b61187783600001828154811061183d5761183d613190565b600091825260209091200154600384015460018f015473ffffffffffffffffffffffffffffffffffffffff9092169161181a906002613178565b505b80611883816131bf565b915050611772565b5060018a015460009060ff16156118a0575060015b60018b810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690558c01546040805163ffffffff89811682528816602082015260008183015290513392917f6d438b6b835d16cdae6efdc0259fdfba17e6aa32dae81863a2467866f85f724a919081900360600190a360018c01805490600061192b836131bf565b90915550909c50505050505050505050505050949350505050565b60008181527fd02b08f6836233a79224d6de3c3df078574b0f84d75d2a48f85a5a3cacc729156020819052604090912060028101805460609392919061198b9061312a565b80601f01602080910402602001604051908101604052809291908181526020018280546119b79061312a565b8015611a045780601f106119d957610100808354040283529160200191611a04565b820191906000526020600020905b8154815290600101906020018083116119e757829003601f168201915b505050505092505050919050565b60008181527fd02b08f6836233a79224d6de3c3df078574b0f84d75d2a48f85a5a3cacc729156020819052604090912060018101805460609392919061198b9061312a565b611a5f612e35565b611a67612e53565b82611a7360c082613178565b11611b00576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f52436c61696d735061727365724c6962726172793a204f766572666c6f77206f60448201527f6e2074686520646174614f666673657420706172616d6574657200000000000060648201526084016103e5565b611b0b60c084613178565b84511015611b9b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f52436572745061727365724c6962726172793a204e6f7420656e6f756768206260448201527f7974657320746f2065787472616374000000000000000000000000000000000060648201526084016103e5565b611baf84611baa856000613178565b611ff2565b8252611bc084611baa856020613178565b6020830152611bd484611baa856040613178565b6040830152611be884611baa856060613178565b6060830152611bfc84611baa856080613178565b8152611c0d84611baa8560a0613178565b602082015290939092509050565b6000611c25612e53565b611c2e85612156565b9050611dc160405180610180016040528086600060028110611c5257611c52613190565b6020020151815260200186600160028110611c6f57611c6f613190565b602002015181526020017f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed81526020017f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec81526020017f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d815260200183600060028110611d2457611d24613190565b6020020151815260200183600160028110611d4157611d41613190565b6020020151815260200185600060048110611d5e57611d5e613190565b6020020151815260200185600160048110611d7b57611d7b613190565b6020020151815260200185600260048110611d9857611d98613190565b6020020151815260200185600360048110611db557611db5613190565b602002015190526123af565b95945050505050565b600082611dd8836003613178565b81518110611de857611de8613190565b016020015160f81c905082611dfe836002613178565b81518110611e0e57611e0e613190565b60209101015160f81c60089190911b64ffffffff00161782611e31836001613178565b81518110611e4157611e41613190565b602001015160f81c60f81b60f81c60ff1660088263ffffffff16901b179050828281518110611e7257611e72613190565b60209101015160f81c60089190911b64ffffffff00161792915050565b6000807f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237ef73ffffffffffffffffffffffffffffffffffffffff86811660009081526009830160209081526040808320815180830183528a81528084018a815260058301805460018082018355918852959096208251600290960201948555519390940192909255600885015490517f40c10f19000000000000000000000000000000000000000000000000000000008152306004820152602481018a90529495509093919216906340c10f1990604401600060405180830381600087803b158015611f7957600080fd5b505af1158015611f8d573d6000803e3d6000fd5b505050508673ffffffffffffffffffffffffffffffffffffffff167f28dc9c0ffa672df041cad84edbee41508284600c9394bda0f8586d012c5e091587604051611fd991815260200190565b60405180910390a2506001015460ff1695945050505050565b60008161200081601f613178565b116120b3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604260248201527f426173655061727365724c6962726172793a20416e206f766572666c6f77206860448201527f617070656e6564207769746820746865206f666673657420706172616d65746560648201527f7221000000000000000000000000000000000000000000000000000000000000608482015260a4016103e5565b6120be82601f613178565b83511161214d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603e60248201527f426173655061727365724c6962726172793a20547279696e6720746f2072656160448201527f6420616e206f6666736574206f7574206f6620626f756e64617269657321000060648201526084016103e5565b50016020015190565b61215e612e53565b600061218b83827f010000000000000000000000000000000000000000000000000000000000000061245a565b905060006121da847f02000000000000000000000000000000000000000000000000000000000000007f030000000000000000000000000000000000000000000000000000000000000061245a565b905060006121e783612563565b905060006121f483612563565b905061227a60405180608001604052808460006002811061221757612217613190565b602002015181526020018460016002811061223457612234613190565b602002015181526020018360006002811061225157612251613190565b602002015181526020018360016002811061226e5761226e613190565b60200201519052612ab7565b945061228585612b5a565b612311576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f496e76616c6964206861736820706f696e743a206e6f74206f6e20656c6c697060448201527f746963206375727665000000000000000000000000000000000000000000000060648201526084016103e5565b61231a85612bbe565b6123a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f44616e6765726f7573206861736820706f696e743a206e6f742073616665206660448201527f6f72207369676e696e670000000000000000000000000000000000000000000060648201526084016103e5565b50505050919050565b60006123b9612f13565b60006020826101808660087ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa90508061244f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f656c6c69707469632063757276652070616972696e67206661696c656400000060448201526064016103e5565b505160011492915050565b60008083856040516020016124709291906131f8565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815290829052805160209182012092506000916124ba9186918991016131f8565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152919052805160209091012090507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47817f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd477f0e0a77c19a07df2f666ea36f7879462c0a78eb28f5c70b3dd35d438dc58f0d9d8509089695505050505050565b61256b612e53565b600080807f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4785860992507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd476004840891507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4782840990506125eb81612bea565b905060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4783840990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4783820990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47848509935060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478577b3c4d79d41a91759a9e4c7e359b6b89eaec68e62effffffd0990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4783820990506126d081612c37565b90507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd477759e26bcea0d48bacd4f263f1acdb5c4f5763473177fffffe8208905060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760018308905061274281612c37565b905060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47847f2042def740cbc01bd03583cf0100e593ba56470b9af68708d2c05d64905353850990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4785820990506127bb81612c37565b90507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760018208905060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4784850990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4784820990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47600382089050600061286482612c70565b90507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4784850991507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4784830991507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760038308915060006128e483612c70565b9050600060046128f5600384613240565b612900600186613240565b61290a91906132b4565b6129149190613370565b61291f9060016133ff565b905060008160011415612933575086612946565b8160021415612943575085612946565b50845b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4781820994507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4781860994507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd476003860894506129c285612cef565b945060006129cf8f612d3c565b90507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478187099550612a14604051806040016040528084815260200188815250612b5a565b612a9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f496e76616c696420706f696e743a206e6f74206f6e20656c6c6970746963206360448201527f757276650000000000000000000000000000000000000000000000000000000060648201526084016103e5565b508c5250505060208901525095979650505050505050565b612abf612e53565b600060408260808560067ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa905080612b54576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f656c6c6970746963206375727665206164646974696f6e206661696c6564000060448201526064016103e5565b50919050565b80516000907f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47906003908290819080098551090860208301517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd479080091492915050565b80516000901580612bd0575081516001145b15612bdd57506000919050565b506001919050565b919050565b60006106e3827f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd457f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47612d8d565b600081612c4657506000919050565b6106e3827f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47613113565b600080612cbe837f183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea37f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47612d8d565b90508015612ce6576001612cd582821660026132b4565b612cdf9190613240565b9150612b54565b50600092915050565b60006106e3827f0c19139cb84c680a6e14116da060561765e05aa45a1c72a34f082305b61f3f527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47612d8d565b60017f183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea3821115612be557507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd46919050565b60008060405160208152602080820152602060408201528560608201528460808201528360a082015260208160c08360055afa90519250905080612e2d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f6d6f64756c6172206578706f6e656e74696174696f6e2066616c69656400000060448201526064016103e5565b509392505050565b60405180608001604052806004906020820280368337509192915050565b60405180604001604052806002906020820280368337509192915050565b828054612e7d9061312a565b90600052602060002090601f016020900481019282612e9f5760008555612f03565b82601f10612ed6578280017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00823516178555612f03565b82800160010185558215612f03579182015b82811115612f03578235825591602001919060010190612ee8565b50612f0f929150612f31565b5090565b60405180602001604052806001906020820280368337509192915050565b5b80821115612f0f5760008155600101612f32565b60008083601f840112612f5857600080fd5b50813567ffffffffffffffff811115612f7057600080fd5b602083019150836020828501011115612f8857600080fd5b9250929050565b60008060008060408587031215612fa557600080fd5b843567ffffffffffffffff80821115612fbd57600080fd5b612fc988838901612f46565b90965094506020870135915080821115612fe257600080fd5b50612fef87828801612f46565b95989497509550505050565b60006020828403121561300d57600080fd5b5035919050565b73ffffffffffffffffffffffffffffffffffffffff811681146103ee57600080fd5b60006020828403121561304857600080fd5b813561117381613014565b60005b8381101561306e578181015183820152602001613056565b8381111561307d576000848401525b50505050565b60208152600082518060208401526130a2816040850160208701613053565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b8183823760009101908152919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015613125576131256130e4565b500390565b600181811c9082168061313e57607f821691505b60208210811415612b54577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000821982111561318b5761318b6130e4565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156131f1576131f16130e4565b5060010190565b7fff000000000000000000000000000000000000000000000000000000000000008316815260008251613232816001850160208701613053565b919091016001019392505050565b6000808312837f80000000000000000000000000000000000000000000000000000000000000000183128115161561327a5761327a6130e4565b837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0183138116156132ae576132ae6130e4565b50500390565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6000841360008413858304851182821616156132f5576132f56130e4565b7f80000000000000000000000000000000000000000000000000000000000000006000871286820588128184161615613330576133306130e4565b6000871292508782058712848416161561334c5761334c6130e4565b87850587128184161615613362576133626130e4565b505050929093029392505050565b6000826133a6577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83147f8000000000000000000000000000000000000000000000000000000000000000831416156133fa576133fa6130e4565b500590565b6000808212827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03841381151615613439576134396130e4565b827f800000000000000000000000000000000000000000000000000000000000000003841281161561346d5761346d6130e4565b5050019056fea2646970667358221220c19e49b8324f9110fcc1e046110d4f73e158f3b216c6f6b570dfed32415f48b664736f6c634300080b0033",
}

// SnapshotsFacetABI is the input ABI used to generate the binding from.
// Deprecated: Use SnapshotsFacetMetaData.ABI instead.
var SnapshotsFacetABI = SnapshotsFacetMetaData.ABI

// SnapshotsFacetBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SnapshotsFacetMetaData.Bin instead.
var SnapshotsFacetBin = SnapshotsFacetMetaData.Bin

// DeploySnapshotsFacet deploys a new Ethereum contract, binding an instance of SnapshotsFacet to it.
func DeploySnapshotsFacet(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *SnapshotsFacet, error) {
	parsed, err := SnapshotsFacetMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SnapshotsFacetBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SnapshotsFacet{SnapshotsFacetCaller: SnapshotsFacetCaller{contract: contract}, SnapshotsFacetTransactor: SnapshotsFacetTransactor{contract: contract}, SnapshotsFacetFilterer: SnapshotsFacetFilterer{contract: contract}}, nil
}

// SnapshotsFacet is an auto generated Go binding around an Ethereum contract.
type SnapshotsFacet struct {
	SnapshotsFacetCaller     // Read-only binding to the contract
	SnapshotsFacetTransactor // Write-only binding to the contract
	SnapshotsFacetFilterer   // Log filterer for contract events
}

// SnapshotsFacetCaller is an auto generated read-only Go binding around an Ethereum contract.
type SnapshotsFacetCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SnapshotsFacetTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SnapshotsFacetTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SnapshotsFacetFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SnapshotsFacetFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SnapshotsFacetSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SnapshotsFacetSession struct {
	Contract     *SnapshotsFacet   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SnapshotsFacetCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SnapshotsFacetCallerSession struct {
	Contract *SnapshotsFacetCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// SnapshotsFacetTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SnapshotsFacetTransactorSession struct {
	Contract     *SnapshotsFacetTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// SnapshotsFacetRaw is an auto generated low-level Go binding around an Ethereum contract.
type SnapshotsFacetRaw struct {
	Contract *SnapshotsFacet // Generic contract binding to access the raw methods on
}

// SnapshotsFacetCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SnapshotsFacetCallerRaw struct {
	Contract *SnapshotsFacetCaller // Generic read-only contract binding to access the raw methods on
}

// SnapshotsFacetTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SnapshotsFacetTransactorRaw struct {
	Contract *SnapshotsFacetTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSnapshotsFacet creates a new instance of SnapshotsFacet, bound to a specific deployed contract.
func NewSnapshotsFacet(address common.Address, backend bind.ContractBackend) (*SnapshotsFacet, error) {
	contract, err := bindSnapshotsFacet(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SnapshotsFacet{SnapshotsFacetCaller: SnapshotsFacetCaller{contract: contract}, SnapshotsFacetTransactor: SnapshotsFacetTransactor{contract: contract}, SnapshotsFacetFilterer: SnapshotsFacetFilterer{contract: contract}}, nil
}

// NewSnapshotsFacetCaller creates a new read-only instance of SnapshotsFacet, bound to a specific deployed contract.
func NewSnapshotsFacetCaller(address common.Address, caller bind.ContractCaller) (*SnapshotsFacetCaller, error) {
	contract, err := bindSnapshotsFacet(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SnapshotsFacetCaller{contract: contract}, nil
}

// NewSnapshotsFacetTransactor creates a new write-only instance of SnapshotsFacet, bound to a specific deployed contract.
func NewSnapshotsFacetTransactor(address common.Address, transactor bind.ContractTransactor) (*SnapshotsFacetTransactor, error) {
	contract, err := bindSnapshotsFacet(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SnapshotsFacetTransactor{contract: contract}, nil
}

// NewSnapshotsFacetFilterer creates a new log filterer instance of SnapshotsFacet, bound to a specific deployed contract.
func NewSnapshotsFacetFilterer(address common.Address, filterer bind.ContractFilterer) (*SnapshotsFacetFilterer, error) {
	contract, err := bindSnapshotsFacet(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SnapshotsFacetFilterer{contract: contract}, nil
}

// bindSnapshotsFacet binds a generic wrapper to an already deployed contract.
func bindSnapshotsFacet(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SnapshotsFacetABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SnapshotsFacet *SnapshotsFacetRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SnapshotsFacet.Contract.SnapshotsFacetCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SnapshotsFacet *SnapshotsFacetRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.SnapshotsFacetTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SnapshotsFacet *SnapshotsFacetRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.SnapshotsFacetTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SnapshotsFacet *SnapshotsFacetCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SnapshotsFacet.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SnapshotsFacet *SnapshotsFacetTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SnapshotsFacet *SnapshotsFacetTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.contract.Transact(opts, method, params...)
}

// Epoch is a free data retrieval call binding the contract method 0x900cf0cf.
//
// Solidity: function epoch() view returns(uint256)
func (_SnapshotsFacet *SnapshotsFacetCaller) Epoch(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SnapshotsFacet.contract.Call(opts, &out, "epoch")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Epoch is a free data retrieval call binding the contract method 0x900cf0cf.
//
// Solidity: function epoch() view returns(uint256)
func (_SnapshotsFacet *SnapshotsFacetSession) Epoch() (*big.Int, error) {
	return _SnapshotsFacet.Contract.Epoch(&_SnapshotsFacet.CallOpts)
}

// Epoch is a free data retrieval call binding the contract method 0x900cf0cf.
//
// Solidity: function epoch() view returns(uint256)
func (_SnapshotsFacet *SnapshotsFacetCallerSession) Epoch() (*big.Int, error) {
	return _SnapshotsFacet.Contract.Epoch(&_SnapshotsFacet.CallOpts)
}

// GetChainIdFromSnapshot is a free data retrieval call binding the contract method 0x19f74669.
//
// Solidity: function getChainIdFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_SnapshotsFacet *SnapshotsFacetCaller) GetChainIdFromSnapshot(opts *bind.CallOpts, snapshotNumber *big.Int) (uint32, error) {
	var out []interface{}
	err := _SnapshotsFacet.contract.Call(opts, &out, "getChainIdFromSnapshot", snapshotNumber)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// GetChainIdFromSnapshot is a free data retrieval call binding the contract method 0x19f74669.
//
// Solidity: function getChainIdFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_SnapshotsFacet *SnapshotsFacetSession) GetChainIdFromSnapshot(snapshotNumber *big.Int) (uint32, error) {
	return _SnapshotsFacet.Contract.GetChainIdFromSnapshot(&_SnapshotsFacet.CallOpts, snapshotNumber)
}

// GetChainIdFromSnapshot is a free data retrieval call binding the contract method 0x19f74669.
//
// Solidity: function getChainIdFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_SnapshotsFacet *SnapshotsFacetCallerSession) GetChainIdFromSnapshot(snapshotNumber *big.Int) (uint32, error) {
	return _SnapshotsFacet.Contract.GetChainIdFromSnapshot(&_SnapshotsFacet.CallOpts, snapshotNumber)
}

// GetHeightFromSnapshot is a free data retrieval call binding the contract method 0xe380b228.
//
// Solidity: function getHeightFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_SnapshotsFacet *SnapshotsFacetCaller) GetHeightFromSnapshot(opts *bind.CallOpts, snapshotNumber *big.Int) (uint32, error) {
	var out []interface{}
	err := _SnapshotsFacet.contract.Call(opts, &out, "getHeightFromSnapshot", snapshotNumber)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// GetHeightFromSnapshot is a free data retrieval call binding the contract method 0xe380b228.
//
// Solidity: function getHeightFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_SnapshotsFacet *SnapshotsFacetSession) GetHeightFromSnapshot(snapshotNumber *big.Int) (uint32, error) {
	return _SnapshotsFacet.Contract.GetHeightFromSnapshot(&_SnapshotsFacet.CallOpts, snapshotNumber)
}

// GetHeightFromSnapshot is a free data retrieval call binding the contract method 0xe380b228.
//
// Solidity: function getHeightFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_SnapshotsFacet *SnapshotsFacetCallerSession) GetHeightFromSnapshot(snapshotNumber *big.Int) (uint32, error) {
	return _SnapshotsFacet.Contract.GetHeightFromSnapshot(&_SnapshotsFacet.CallOpts, snapshotNumber)
}

// GetMadHeightFromSnapshot is a free data retrieval call binding the contract method 0x4f4ea614.
//
// Solidity: function getMadHeightFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_SnapshotsFacet *SnapshotsFacetCaller) GetMadHeightFromSnapshot(opts *bind.CallOpts, snapshotNumber *big.Int) (uint32, error) {
	var out []interface{}
	err := _SnapshotsFacet.contract.Call(opts, &out, "getMadHeightFromSnapshot", snapshotNumber)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// GetMadHeightFromSnapshot is a free data retrieval call binding the contract method 0x4f4ea614.
//
// Solidity: function getMadHeightFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_SnapshotsFacet *SnapshotsFacetSession) GetMadHeightFromSnapshot(snapshotNumber *big.Int) (uint32, error) {
	return _SnapshotsFacet.Contract.GetMadHeightFromSnapshot(&_SnapshotsFacet.CallOpts, snapshotNumber)
}

// GetMadHeightFromSnapshot is a free data retrieval call binding the contract method 0x4f4ea614.
//
// Solidity: function getMadHeightFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_SnapshotsFacet *SnapshotsFacetCallerSession) GetMadHeightFromSnapshot(snapshotNumber *big.Int) (uint32, error) {
	return _SnapshotsFacet.Contract.GetMadHeightFromSnapshot(&_SnapshotsFacet.CallOpts, snapshotNumber)
}

// GetRawBlockClaimsSnapshot is a free data retrieval call binding the contract method 0x6372fe51.
//
// Solidity: function getRawBlockClaimsSnapshot(uint256 snapshotNumber) view returns(bytes)
func (_SnapshotsFacet *SnapshotsFacetCaller) GetRawBlockClaimsSnapshot(opts *bind.CallOpts, snapshotNumber *big.Int) ([]byte, error) {
	var out []interface{}
	err := _SnapshotsFacet.contract.Call(opts, &out, "getRawBlockClaimsSnapshot", snapshotNumber)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// GetRawBlockClaimsSnapshot is a free data retrieval call binding the contract method 0x6372fe51.
//
// Solidity: function getRawBlockClaimsSnapshot(uint256 snapshotNumber) view returns(bytes)
func (_SnapshotsFacet *SnapshotsFacetSession) GetRawBlockClaimsSnapshot(snapshotNumber *big.Int) ([]byte, error) {
	return _SnapshotsFacet.Contract.GetRawBlockClaimsSnapshot(&_SnapshotsFacet.CallOpts, snapshotNumber)
}

// GetRawBlockClaimsSnapshot is a free data retrieval call binding the contract method 0x6372fe51.
//
// Solidity: function getRawBlockClaimsSnapshot(uint256 snapshotNumber) view returns(bytes)
func (_SnapshotsFacet *SnapshotsFacetCallerSession) GetRawBlockClaimsSnapshot(snapshotNumber *big.Int) ([]byte, error) {
	return _SnapshotsFacet.Contract.GetRawBlockClaimsSnapshot(&_SnapshotsFacet.CallOpts, snapshotNumber)
}

// GetRawSignatureSnapshot is a free data retrieval call binding the contract method 0x35b6c632.
//
// Solidity: function getRawSignatureSnapshot(uint256 snapshotNumber) view returns(bytes)
func (_SnapshotsFacet *SnapshotsFacetCaller) GetRawSignatureSnapshot(opts *bind.CallOpts, snapshotNumber *big.Int) ([]byte, error) {
	var out []interface{}
	err := _SnapshotsFacet.contract.Call(opts, &out, "getRawSignatureSnapshot", snapshotNumber)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// GetRawSignatureSnapshot is a free data retrieval call binding the contract method 0x35b6c632.
//
// Solidity: function getRawSignatureSnapshot(uint256 snapshotNumber) view returns(bytes)
func (_SnapshotsFacet *SnapshotsFacetSession) GetRawSignatureSnapshot(snapshotNumber *big.Int) ([]byte, error) {
	return _SnapshotsFacet.Contract.GetRawSignatureSnapshot(&_SnapshotsFacet.CallOpts, snapshotNumber)
}

// GetRawSignatureSnapshot is a free data retrieval call binding the contract method 0x35b6c632.
//
// Solidity: function getRawSignatureSnapshot(uint256 snapshotNumber) view returns(bytes)
func (_SnapshotsFacet *SnapshotsFacetCallerSession) GetRawSignatureSnapshot(snapshotNumber *big.Int) ([]byte, error) {
	return _SnapshotsFacet.Contract.GetRawSignatureSnapshot(&_SnapshotsFacet.CallOpts, snapshotNumber)
}

// MinEthSnapshotSize is a free data retrieval call binding the contract method 0xe4b82105.
//
// Solidity: function minEthSnapshotSize() view returns(uint256)
func (_SnapshotsFacet *SnapshotsFacetCaller) MinEthSnapshotSize(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SnapshotsFacet.contract.Call(opts, &out, "minEthSnapshotSize")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinEthSnapshotSize is a free data retrieval call binding the contract method 0xe4b82105.
//
// Solidity: function minEthSnapshotSize() view returns(uint256)
func (_SnapshotsFacet *SnapshotsFacetSession) MinEthSnapshotSize() (*big.Int, error) {
	return _SnapshotsFacet.Contract.MinEthSnapshotSize(&_SnapshotsFacet.CallOpts)
}

// MinEthSnapshotSize is a free data retrieval call binding the contract method 0xe4b82105.
//
// Solidity: function minEthSnapshotSize() view returns(uint256)
func (_SnapshotsFacet *SnapshotsFacetCallerSession) MinEthSnapshotSize() (*big.Int, error) {
	return _SnapshotsFacet.Contract.MinEthSnapshotSize(&_SnapshotsFacet.CallOpts)
}

// MinMadSnapshotSize is a free data retrieval call binding the contract method 0xc17cb9ee.
//
// Solidity: function minMadSnapshotSize() view returns(uint256)
func (_SnapshotsFacet *SnapshotsFacetCaller) MinMadSnapshotSize(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SnapshotsFacet.contract.Call(opts, &out, "minMadSnapshotSize")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinMadSnapshotSize is a free data retrieval call binding the contract method 0xc17cb9ee.
//
// Solidity: function minMadSnapshotSize() view returns(uint256)
func (_SnapshotsFacet *SnapshotsFacetSession) MinMadSnapshotSize() (*big.Int, error) {
	return _SnapshotsFacet.Contract.MinMadSnapshotSize(&_SnapshotsFacet.CallOpts)
}

// MinMadSnapshotSize is a free data retrieval call binding the contract method 0xc17cb9ee.
//
// Solidity: function minMadSnapshotSize() view returns(uint256)
func (_SnapshotsFacet *SnapshotsFacetCallerSession) MinMadSnapshotSize() (*big.Int, error) {
	return _SnapshotsFacet.Contract.MinMadSnapshotSize(&_SnapshotsFacet.CallOpts)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_SnapshotsFacet *SnapshotsFacetTransactor) GrantOperator(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _SnapshotsFacet.contract.Transact(opts, "grantOperator", who)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_SnapshotsFacet *SnapshotsFacetSession) GrantOperator(who common.Address) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.GrantOperator(&_SnapshotsFacet.TransactOpts, who)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_SnapshotsFacet *SnapshotsFacetTransactorSession) GrantOperator(who common.Address) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.GrantOperator(&_SnapshotsFacet.TransactOpts, who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_SnapshotsFacet *SnapshotsFacetTransactor) GrantOwner(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _SnapshotsFacet.contract.Transact(opts, "grantOwner", who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_SnapshotsFacet *SnapshotsFacetSession) GrantOwner(who common.Address) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.GrantOwner(&_SnapshotsFacet.TransactOpts, who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_SnapshotsFacet *SnapshotsFacetTransactorSession) GrantOwner(who common.Address) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.GrantOwner(&_SnapshotsFacet.TransactOpts, who)
}

// InitializeSnapshots is a paid mutator transaction binding the contract method 0x20d9a246.
//
// Solidity: function initializeSnapshots(address registry) returns()
func (_SnapshotsFacet *SnapshotsFacetTransactor) InitializeSnapshots(opts *bind.TransactOpts, registry common.Address) (*types.Transaction, error) {
	return _SnapshotsFacet.contract.Transact(opts, "initializeSnapshots", registry)
}

// InitializeSnapshots is a paid mutator transaction binding the contract method 0x20d9a246.
//
// Solidity: function initializeSnapshots(address registry) returns()
func (_SnapshotsFacet *SnapshotsFacetSession) InitializeSnapshots(registry common.Address) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.InitializeSnapshots(&_SnapshotsFacet.TransactOpts, registry)
}

// InitializeSnapshots is a paid mutator transaction binding the contract method 0x20d9a246.
//
// Solidity: function initializeSnapshots(address registry) returns()
func (_SnapshotsFacet *SnapshotsFacetTransactorSession) InitializeSnapshots(registry common.Address) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.InitializeSnapshots(&_SnapshotsFacet.TransactOpts, registry)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_SnapshotsFacet *SnapshotsFacetTransactor) RevokeOperator(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _SnapshotsFacet.contract.Transact(opts, "revokeOperator", who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_SnapshotsFacet *SnapshotsFacetSession) RevokeOperator(who common.Address) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.RevokeOperator(&_SnapshotsFacet.TransactOpts, who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_SnapshotsFacet *SnapshotsFacetTransactorSession) RevokeOperator(who common.Address) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.RevokeOperator(&_SnapshotsFacet.TransactOpts, who)
}

// SetEpoch is a paid mutator transaction binding the contract method 0x0ceb2cef.
//
// Solidity: function setEpoch(uint256 ns) returns()
func (_SnapshotsFacet *SnapshotsFacetTransactor) SetEpoch(opts *bind.TransactOpts, ns *big.Int) (*types.Transaction, error) {
	return _SnapshotsFacet.contract.Transact(opts, "setEpoch", ns)
}

// SetEpoch is a paid mutator transaction binding the contract method 0x0ceb2cef.
//
// Solidity: function setEpoch(uint256 ns) returns()
func (_SnapshotsFacet *SnapshotsFacetSession) SetEpoch(ns *big.Int) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.SetEpoch(&_SnapshotsFacet.TransactOpts, ns)
}

// SetEpoch is a paid mutator transaction binding the contract method 0x0ceb2cef.
//
// Solidity: function setEpoch(uint256 ns) returns()
func (_SnapshotsFacet *SnapshotsFacetTransactorSession) SetEpoch(ns *big.Int) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.SetEpoch(&_SnapshotsFacet.TransactOpts, ns)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_SnapshotsFacet *SnapshotsFacetTransactor) SetGovernance(opts *bind.TransactOpts, governance_ common.Address) (*types.Transaction, error) {
	return _SnapshotsFacet.contract.Transact(opts, "setGovernance", governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_SnapshotsFacet *SnapshotsFacetSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.SetGovernance(&_SnapshotsFacet.TransactOpts, governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_SnapshotsFacet *SnapshotsFacetTransactorSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.SetGovernance(&_SnapshotsFacet.TransactOpts, governance_)
}

// SetMinEthSnapshotSize is a paid mutator transaction binding the contract method 0x0d81dce4.
//
// Solidity: function setMinEthSnapshotSize(uint256 _minSize) returns()
func (_SnapshotsFacet *SnapshotsFacetTransactor) SetMinEthSnapshotSize(opts *bind.TransactOpts, _minSize *big.Int) (*types.Transaction, error) {
	return _SnapshotsFacet.contract.Transact(opts, "setMinEthSnapshotSize", _minSize)
}

// SetMinEthSnapshotSize is a paid mutator transaction binding the contract method 0x0d81dce4.
//
// Solidity: function setMinEthSnapshotSize(uint256 _minSize) returns()
func (_SnapshotsFacet *SnapshotsFacetSession) SetMinEthSnapshotSize(_minSize *big.Int) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.SetMinEthSnapshotSize(&_SnapshotsFacet.TransactOpts, _minSize)
}

// SetMinEthSnapshotSize is a paid mutator transaction binding the contract method 0x0d81dce4.
//
// Solidity: function setMinEthSnapshotSize(uint256 _minSize) returns()
func (_SnapshotsFacet *SnapshotsFacetTransactorSession) SetMinEthSnapshotSize(_minSize *big.Int) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.SetMinEthSnapshotSize(&_SnapshotsFacet.TransactOpts, _minSize)
}

// SetMinMadSnapshotSize is a paid mutator transaction binding the contract method 0x99e33e3d.
//
// Solidity: function setMinMadSnapshotSize(uint256 _minSize) returns()
func (_SnapshotsFacet *SnapshotsFacetTransactor) SetMinMadSnapshotSize(opts *bind.TransactOpts, _minSize *big.Int) (*types.Transaction, error) {
	return _SnapshotsFacet.contract.Transact(opts, "setMinMadSnapshotSize", _minSize)
}

// SetMinMadSnapshotSize is a paid mutator transaction binding the contract method 0x99e33e3d.
//
// Solidity: function setMinMadSnapshotSize(uint256 _minSize) returns()
func (_SnapshotsFacet *SnapshotsFacetSession) SetMinMadSnapshotSize(_minSize *big.Int) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.SetMinMadSnapshotSize(&_SnapshotsFacet.TransactOpts, _minSize)
}

// SetMinMadSnapshotSize is a paid mutator transaction binding the contract method 0x99e33e3d.
//
// Solidity: function setMinMadSnapshotSize(uint256 _minSize) returns()
func (_SnapshotsFacet *SnapshotsFacetTransactorSession) SetMinMadSnapshotSize(_minSize *big.Int) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.SetMinMadSnapshotSize(&_SnapshotsFacet.TransactOpts, _minSize)
}

// Snapshot is a paid mutator transaction binding the contract method 0x08ca1f25.
//
// Solidity: function snapshot(bytes _signatureGroup, bytes _bclaims) returns(bool)
func (_SnapshotsFacet *SnapshotsFacetTransactor) Snapshot(opts *bind.TransactOpts, _signatureGroup []byte, _bclaims []byte) (*types.Transaction, error) {
	return _SnapshotsFacet.contract.Transact(opts, "snapshot", _signatureGroup, _bclaims)
}

// Snapshot is a paid mutator transaction binding the contract method 0x08ca1f25.
//
// Solidity: function snapshot(bytes _signatureGroup, bytes _bclaims) returns(bool)
func (_SnapshotsFacet *SnapshotsFacetSession) Snapshot(_signatureGroup []byte, _bclaims []byte) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.Snapshot(&_SnapshotsFacet.TransactOpts, _signatureGroup, _bclaims)
}

// Snapshot is a paid mutator transaction binding the contract method 0x08ca1f25.
//
// Solidity: function snapshot(bytes _signatureGroup, bytes _bclaims) returns(bool)
func (_SnapshotsFacet *SnapshotsFacetTransactorSession) Snapshot(_signatureGroup []byte, _bclaims []byte) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.Snapshot(&_SnapshotsFacet.TransactOpts, _signatureGroup, _bclaims)
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_SnapshotsFacet *SnapshotsFacetTransactor) Start(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SnapshotsFacet.contract.Transact(opts, "start")
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_SnapshotsFacet *SnapshotsFacetSession) Start() (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.Start(&_SnapshotsFacet.TransactOpts)
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_SnapshotsFacet *SnapshotsFacetTransactorSession) Start() (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.Start(&_SnapshotsFacet.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_SnapshotsFacet *SnapshotsFacetTransactor) Stop(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SnapshotsFacet.contract.Transact(opts, "stop")
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_SnapshotsFacet *SnapshotsFacetSession) Stop() (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.Stop(&_SnapshotsFacet.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_SnapshotsFacet *SnapshotsFacetTransactorSession) Stop() (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.Stop(&_SnapshotsFacet.TransactOpts)
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_SnapshotsFacet *SnapshotsFacetTransactor) TakeOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SnapshotsFacet.contract.Transact(opts, "takeOwnership")
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_SnapshotsFacet *SnapshotsFacetSession) TakeOwnership() (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.TakeOwnership(&_SnapshotsFacet.TransactOpts)
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_SnapshotsFacet *SnapshotsFacetTransactorSession) TakeOwnership() (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.TakeOwnership(&_SnapshotsFacet.TransactOpts)
}

// SnapshotsFacetSnapshotTakenIterator is returned from FilterSnapshotTaken and is used to iterate over the raw logs and unpacked data for SnapshotTaken events raised by the SnapshotsFacet contract.
type SnapshotsFacetSnapshotTakenIterator struct {
	Event *SnapshotsFacetSnapshotTaken // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SnapshotsFacetSnapshotTakenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SnapshotsFacetSnapshotTaken)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SnapshotsFacetSnapshotTaken)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SnapshotsFacetSnapshotTakenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SnapshotsFacetSnapshotTakenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SnapshotsFacetSnapshotTaken represents a SnapshotTaken event raised by the SnapshotsFacet contract.
type SnapshotsFacetSnapshotTaken struct {
	ChainId        uint32
	Epoch          *big.Int
	Height         uint32
	Validator      common.Address
	StartingETHDKG bool
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterSnapshotTaken is a free log retrieval operation binding the contract event 0x6d438b6b835d16cdae6efdc0259fdfba17e6aa32dae81863a2467866f85f724a.
//
// Solidity: event SnapshotTaken(uint32 chainId, uint256 indexed epoch, uint32 height, address indexed validator, bool startingETHDKG)
func (_SnapshotsFacet *SnapshotsFacetFilterer) FilterSnapshotTaken(opts *bind.FilterOpts, epoch []*big.Int, validator []common.Address) (*SnapshotsFacetSnapshotTakenIterator, error) {

	var epochRule []interface{}
	for _, epochItem := range epoch {
		epochRule = append(epochRule, epochItem)
	}

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _SnapshotsFacet.contract.FilterLogs(opts, "SnapshotTaken", epochRule, validatorRule)
	if err != nil {
		return nil, err
	}
	return &SnapshotsFacetSnapshotTakenIterator{contract: _SnapshotsFacet.contract, event: "SnapshotTaken", logs: logs, sub: sub}, nil
}

// WatchSnapshotTaken is a free log subscription operation binding the contract event 0x6d438b6b835d16cdae6efdc0259fdfba17e6aa32dae81863a2467866f85f724a.
//
// Solidity: event SnapshotTaken(uint32 chainId, uint256 indexed epoch, uint32 height, address indexed validator, bool startingETHDKG)
func (_SnapshotsFacet *SnapshotsFacetFilterer) WatchSnapshotTaken(opts *bind.WatchOpts, sink chan<- *SnapshotsFacetSnapshotTaken, epoch []*big.Int, validator []common.Address) (event.Subscription, error) {

	var epochRule []interface{}
	for _, epochItem := range epoch {
		epochRule = append(epochRule, epochItem)
	}

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _SnapshotsFacet.contract.WatchLogs(opts, "SnapshotTaken", epochRule, validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SnapshotsFacetSnapshotTaken)
				if err := _SnapshotsFacet.contract.UnpackLog(event, "SnapshotTaken", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSnapshotTaken is a log parse operation binding the contract event 0x6d438b6b835d16cdae6efdc0259fdfba17e6aa32dae81863a2467866f85f724a.
//
// Solidity: event SnapshotTaken(uint32 chainId, uint256 indexed epoch, uint32 height, address indexed validator, bool startingETHDKG)
func (_SnapshotsFacet *SnapshotsFacetFilterer) ParseSnapshotTaken(log types.Log) (*SnapshotsFacetSnapshotTaken, error) {
	event := new(SnapshotsFacetSnapshotTaken)
	if err := _SnapshotsFacet.contract.UnpackLog(event, "SnapshotTaken", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SnapshotsLibraryMetaData contains all meta data concerning the SnapshotsLibrary contract.
var SnapshotsLibraryMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"chainId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"height\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"startingETHDKG\",\"type\":\"bool\"}],\"name\":\"SnapshotTaken\",\"type\":\"event\"}]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200d209b5d443b11e041cde2cdb77811dddecef59ae63bf0e51915fb015b27061864736f6c634300080b0033",
}

// SnapshotsLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use SnapshotsLibraryMetaData.ABI instead.
var SnapshotsLibraryABI = SnapshotsLibraryMetaData.ABI

// SnapshotsLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SnapshotsLibraryMetaData.Bin instead.
var SnapshotsLibraryBin = SnapshotsLibraryMetaData.Bin

// DeploySnapshotsLibrary deploys a new Ethereum contract, binding an instance of SnapshotsLibrary to it.
func DeploySnapshotsLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *SnapshotsLibrary, error) {
	parsed, err := SnapshotsLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SnapshotsLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SnapshotsLibrary{SnapshotsLibraryCaller: SnapshotsLibraryCaller{contract: contract}, SnapshotsLibraryTransactor: SnapshotsLibraryTransactor{contract: contract}, SnapshotsLibraryFilterer: SnapshotsLibraryFilterer{contract: contract}}, nil
}

// SnapshotsLibrary is an auto generated Go binding around an Ethereum contract.
type SnapshotsLibrary struct {
	SnapshotsLibraryCaller     // Read-only binding to the contract
	SnapshotsLibraryTransactor // Write-only binding to the contract
	SnapshotsLibraryFilterer   // Log filterer for contract events
}

// SnapshotsLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type SnapshotsLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SnapshotsLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SnapshotsLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SnapshotsLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SnapshotsLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SnapshotsLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SnapshotsLibrarySession struct {
	Contract     *SnapshotsLibrary // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SnapshotsLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SnapshotsLibraryCallerSession struct {
	Contract *SnapshotsLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// SnapshotsLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SnapshotsLibraryTransactorSession struct {
	Contract     *SnapshotsLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// SnapshotsLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type SnapshotsLibraryRaw struct {
	Contract *SnapshotsLibrary // Generic contract binding to access the raw methods on
}

// SnapshotsLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SnapshotsLibraryCallerRaw struct {
	Contract *SnapshotsLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// SnapshotsLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SnapshotsLibraryTransactorRaw struct {
	Contract *SnapshotsLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSnapshotsLibrary creates a new instance of SnapshotsLibrary, bound to a specific deployed contract.
func NewSnapshotsLibrary(address common.Address, backend bind.ContractBackend) (*SnapshotsLibrary, error) {
	contract, err := bindSnapshotsLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SnapshotsLibrary{SnapshotsLibraryCaller: SnapshotsLibraryCaller{contract: contract}, SnapshotsLibraryTransactor: SnapshotsLibraryTransactor{contract: contract}, SnapshotsLibraryFilterer: SnapshotsLibraryFilterer{contract: contract}}, nil
}

// NewSnapshotsLibraryCaller creates a new read-only instance of SnapshotsLibrary, bound to a specific deployed contract.
func NewSnapshotsLibraryCaller(address common.Address, caller bind.ContractCaller) (*SnapshotsLibraryCaller, error) {
	contract, err := bindSnapshotsLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SnapshotsLibraryCaller{contract: contract}, nil
}

// NewSnapshotsLibraryTransactor creates a new write-only instance of SnapshotsLibrary, bound to a specific deployed contract.
func NewSnapshotsLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*SnapshotsLibraryTransactor, error) {
	contract, err := bindSnapshotsLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SnapshotsLibraryTransactor{contract: contract}, nil
}

// NewSnapshotsLibraryFilterer creates a new log filterer instance of SnapshotsLibrary, bound to a specific deployed contract.
func NewSnapshotsLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*SnapshotsLibraryFilterer, error) {
	contract, err := bindSnapshotsLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SnapshotsLibraryFilterer{contract: contract}, nil
}

// bindSnapshotsLibrary binds a generic wrapper to an already deployed contract.
func bindSnapshotsLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SnapshotsLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SnapshotsLibrary *SnapshotsLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SnapshotsLibrary.Contract.SnapshotsLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SnapshotsLibrary *SnapshotsLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SnapshotsLibrary.Contract.SnapshotsLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SnapshotsLibrary *SnapshotsLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SnapshotsLibrary.Contract.SnapshotsLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SnapshotsLibrary *SnapshotsLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SnapshotsLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SnapshotsLibrary *SnapshotsLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SnapshotsLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SnapshotsLibrary *SnapshotsLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SnapshotsLibrary.Contract.contract.Transact(opts, method, params...)
}

// SnapshotsLibrarySnapshotTakenIterator is returned from FilterSnapshotTaken and is used to iterate over the raw logs and unpacked data for SnapshotTaken events raised by the SnapshotsLibrary contract.
type SnapshotsLibrarySnapshotTakenIterator struct {
	Event *SnapshotsLibrarySnapshotTaken // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SnapshotsLibrarySnapshotTakenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SnapshotsLibrarySnapshotTaken)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SnapshotsLibrarySnapshotTaken)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SnapshotsLibrarySnapshotTakenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SnapshotsLibrarySnapshotTakenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SnapshotsLibrarySnapshotTaken represents a SnapshotTaken event raised by the SnapshotsLibrary contract.
type SnapshotsLibrarySnapshotTaken struct {
	ChainId        uint32
	Epoch          *big.Int
	Height         uint32
	Validator      common.Address
	StartingETHDKG bool
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterSnapshotTaken is a free log retrieval operation binding the contract event 0x6d438b6b835d16cdae6efdc0259fdfba17e6aa32dae81863a2467866f85f724a.
//
// Solidity: event SnapshotTaken(uint32 chainId, uint256 indexed epoch, uint32 height, address indexed validator, bool startingETHDKG)
func (_SnapshotsLibrary *SnapshotsLibraryFilterer) FilterSnapshotTaken(opts *bind.FilterOpts, epoch []*big.Int, validator []common.Address) (*SnapshotsLibrarySnapshotTakenIterator, error) {

	var epochRule []interface{}
	for _, epochItem := range epoch {
		epochRule = append(epochRule, epochItem)
	}

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _SnapshotsLibrary.contract.FilterLogs(opts, "SnapshotTaken", epochRule, validatorRule)
	if err != nil {
		return nil, err
	}
	return &SnapshotsLibrarySnapshotTakenIterator{contract: _SnapshotsLibrary.contract, event: "SnapshotTaken", logs: logs, sub: sub}, nil
}

// WatchSnapshotTaken is a free log subscription operation binding the contract event 0x6d438b6b835d16cdae6efdc0259fdfba17e6aa32dae81863a2467866f85f724a.
//
// Solidity: event SnapshotTaken(uint32 chainId, uint256 indexed epoch, uint32 height, address indexed validator, bool startingETHDKG)
func (_SnapshotsLibrary *SnapshotsLibraryFilterer) WatchSnapshotTaken(opts *bind.WatchOpts, sink chan<- *SnapshotsLibrarySnapshotTaken, epoch []*big.Int, validator []common.Address) (event.Subscription, error) {

	var epochRule []interface{}
	for _, epochItem := range epoch {
		epochRule = append(epochRule, epochItem)
	}

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _SnapshotsLibrary.contract.WatchLogs(opts, "SnapshotTaken", epochRule, validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SnapshotsLibrarySnapshotTaken)
				if err := _SnapshotsLibrary.contract.UnpackLog(event, "SnapshotTaken", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSnapshotTaken is a log parse operation binding the contract event 0x6d438b6b835d16cdae6efdc0259fdfba17e6aa32dae81863a2467866f85f724a.
//
// Solidity: event SnapshotTaken(uint32 chainId, uint256 indexed epoch, uint32 height, address indexed validator, bool startingETHDKG)
func (_SnapshotsLibrary *SnapshotsLibraryFilterer) ParseSnapshotTaken(log types.Log) (*SnapshotsLibrarySnapshotTaken, error) {
	event := new(SnapshotsLibrarySnapshotTaken)
	if err := _SnapshotsLibrary.contract.UnpackLog(event, "SnapshotTaken", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingMetaData contains all meta data concerning the Staking contract.
var StakingMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BurntStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"why\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Fined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LockedReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LockedStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"RequestedUnlockStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnlockedReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnlockedStake\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"balanceReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceRewardFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceStakeFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceUnlocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceUnlockedFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceUnlockedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceUnlockedRewardFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fine\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractRegistry\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"initializeStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockEpoch\",\"type\":\"uint256\"}],\"name\":\"lockRewardFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lockStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lockStakeFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"majorFine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"majorStakeFine\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"minorFine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minorStakeFine\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestUnlockStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"requestUnlockStakeFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epochDelay\",\"type\":\"uint256\"}],\"name\":\"setEpochDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_majorStakeFine\",\"type\":\"uint256\"}],\"name\":\"setMajorStakeFine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumStake\",\"type\":\"uint256\"}],\"name\":\"setMinimumStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minorStakeFine\",\"type\":\"uint256\"}],\"name\":\"setMinorStakeFine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardAmount\",\"type\":\"uint256\"}],\"name\":\"setRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardBonus\",\"type\":\"uint256\"}],\"name\":\"setRewardBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"unlockRewardFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unlockStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unlockStakeFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// StakingABI is the input ABI used to generate the binding from.
// Deprecated: Use StakingMetaData.ABI instead.
var StakingABI = StakingMetaData.ABI

// Staking is an auto generated Go binding around an Ethereum contract.
type Staking struct {
	StakingCaller     // Read-only binding to the contract
	StakingTransactor // Write-only binding to the contract
	StakingFilterer   // Log filterer for contract events
}

// StakingCaller is an auto generated read-only Go binding around an Ethereum contract.
type StakingCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StakingTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StakingFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StakingSession struct {
	Contract     *Staking          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StakingCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StakingCallerSession struct {
	Contract *StakingCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// StakingTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StakingTransactorSession struct {
	Contract     *StakingTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// StakingRaw is an auto generated low-level Go binding around an Ethereum contract.
type StakingRaw struct {
	Contract *Staking // Generic contract binding to access the raw methods on
}

// StakingCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StakingCallerRaw struct {
	Contract *StakingCaller // Generic read-only contract binding to access the raw methods on
}

// StakingTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StakingTransactorRaw struct {
	Contract *StakingTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStaking creates a new instance of Staking, bound to a specific deployed contract.
func NewStaking(address common.Address, backend bind.ContractBackend) (*Staking, error) {
	contract, err := bindStaking(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Staking{StakingCaller: StakingCaller{contract: contract}, StakingTransactor: StakingTransactor{contract: contract}, StakingFilterer: StakingFilterer{contract: contract}}, nil
}

// NewStakingCaller creates a new read-only instance of Staking, bound to a specific deployed contract.
func NewStakingCaller(address common.Address, caller bind.ContractCaller) (*StakingCaller, error) {
	contract, err := bindStaking(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StakingCaller{contract: contract}, nil
}

// NewStakingTransactor creates a new write-only instance of Staking, bound to a specific deployed contract.
func NewStakingTransactor(address common.Address, transactor bind.ContractTransactor) (*StakingTransactor, error) {
	contract, err := bindStaking(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StakingTransactor{contract: contract}, nil
}

// NewStakingFilterer creates a new log filterer instance of Staking, bound to a specific deployed contract.
func NewStakingFilterer(address common.Address, filterer bind.ContractFilterer) (*StakingFilterer, error) {
	contract, err := bindStaking(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StakingFilterer{contract: contract}, nil
}

// bindStaking binds a generic wrapper to an already deployed contract.
func bindStaking(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StakingABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Staking *StakingRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Staking.Contract.StakingCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Staking *StakingRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Staking.Contract.StakingTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Staking *StakingRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Staking.Contract.StakingTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Staking *StakingCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Staking.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Staking *StakingTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Staking.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Staking *StakingTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Staking.Contract.contract.Transact(opts, method, params...)
}

// BalanceReward is a free data retrieval call binding the contract method 0x9fb69b43.
//
// Solidity: function balanceReward() view returns(uint256)
func (_Staking *StakingCaller) BalanceReward(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "balanceReward")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceReward is a free data retrieval call binding the contract method 0x9fb69b43.
//
// Solidity: function balanceReward() view returns(uint256)
func (_Staking *StakingSession) BalanceReward() (*big.Int, error) {
	return _Staking.Contract.BalanceReward(&_Staking.CallOpts)
}

// BalanceReward is a free data retrieval call binding the contract method 0x9fb69b43.
//
// Solidity: function balanceReward() view returns(uint256)
func (_Staking *StakingCallerSession) BalanceReward() (*big.Int, error) {
	return _Staking.Contract.BalanceReward(&_Staking.CallOpts)
}

// BalanceRewardFor is a free data retrieval call binding the contract method 0x9be5d83e.
//
// Solidity: function balanceRewardFor(address who) view returns(uint256)
func (_Staking *StakingCaller) BalanceRewardFor(opts *bind.CallOpts, who common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "balanceRewardFor", who)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceRewardFor is a free data retrieval call binding the contract method 0x9be5d83e.
//
// Solidity: function balanceRewardFor(address who) view returns(uint256)
func (_Staking *StakingSession) BalanceRewardFor(who common.Address) (*big.Int, error) {
	return _Staking.Contract.BalanceRewardFor(&_Staking.CallOpts, who)
}

// BalanceRewardFor is a free data retrieval call binding the contract method 0x9be5d83e.
//
// Solidity: function balanceRewardFor(address who) view returns(uint256)
func (_Staking *StakingCallerSession) BalanceRewardFor(who common.Address) (*big.Int, error) {
	return _Staking.Contract.BalanceRewardFor(&_Staking.CallOpts, who)
}

// BalanceStake is a free data retrieval call binding the contract method 0x8aa2799c.
//
// Solidity: function balanceStake() view returns(uint256)
func (_Staking *StakingCaller) BalanceStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "balanceStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceStake is a free data retrieval call binding the contract method 0x8aa2799c.
//
// Solidity: function balanceStake() view returns(uint256)
func (_Staking *StakingSession) BalanceStake() (*big.Int, error) {
	return _Staking.Contract.BalanceStake(&_Staking.CallOpts)
}

// BalanceStake is a free data retrieval call binding the contract method 0x8aa2799c.
//
// Solidity: function balanceStake() view returns(uint256)
func (_Staking *StakingCallerSession) BalanceStake() (*big.Int, error) {
	return _Staking.Contract.BalanceStake(&_Staking.CallOpts)
}

// BalanceStakeFor is a free data retrieval call binding the contract method 0x35ba4daf.
//
// Solidity: function balanceStakeFor(address who) view returns(uint256)
func (_Staking *StakingCaller) BalanceStakeFor(opts *bind.CallOpts, who common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "balanceStakeFor", who)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceStakeFor is a free data retrieval call binding the contract method 0x35ba4daf.
//
// Solidity: function balanceStakeFor(address who) view returns(uint256)
func (_Staking *StakingSession) BalanceStakeFor(who common.Address) (*big.Int, error) {
	return _Staking.Contract.BalanceStakeFor(&_Staking.CallOpts, who)
}

// BalanceStakeFor is a free data retrieval call binding the contract method 0x35ba4daf.
//
// Solidity: function balanceStakeFor(address who) view returns(uint256)
func (_Staking *StakingCallerSession) BalanceStakeFor(who common.Address) (*big.Int, error) {
	return _Staking.Contract.BalanceStakeFor(&_Staking.CallOpts, who)
}

// BalanceUnlocked is a free data retrieval call binding the contract method 0x5b6a0d1e.
//
// Solidity: function balanceUnlocked() view returns(uint256)
func (_Staking *StakingCaller) BalanceUnlocked(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "balanceUnlocked")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceUnlocked is a free data retrieval call binding the contract method 0x5b6a0d1e.
//
// Solidity: function balanceUnlocked() view returns(uint256)
func (_Staking *StakingSession) BalanceUnlocked() (*big.Int, error) {
	return _Staking.Contract.BalanceUnlocked(&_Staking.CallOpts)
}

// BalanceUnlocked is a free data retrieval call binding the contract method 0x5b6a0d1e.
//
// Solidity: function balanceUnlocked() view returns(uint256)
func (_Staking *StakingCallerSession) BalanceUnlocked() (*big.Int, error) {
	return _Staking.Contract.BalanceUnlocked(&_Staking.CallOpts)
}

// BalanceUnlockedFor is a free data retrieval call binding the contract method 0x2e713306.
//
// Solidity: function balanceUnlockedFor(address who) view returns(uint256)
func (_Staking *StakingCaller) BalanceUnlockedFor(opts *bind.CallOpts, who common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "balanceUnlockedFor", who)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceUnlockedFor is a free data retrieval call binding the contract method 0x2e713306.
//
// Solidity: function balanceUnlockedFor(address who) view returns(uint256)
func (_Staking *StakingSession) BalanceUnlockedFor(who common.Address) (*big.Int, error) {
	return _Staking.Contract.BalanceUnlockedFor(&_Staking.CallOpts, who)
}

// BalanceUnlockedFor is a free data retrieval call binding the contract method 0x2e713306.
//
// Solidity: function balanceUnlockedFor(address who) view returns(uint256)
func (_Staking *StakingCallerSession) BalanceUnlockedFor(who common.Address) (*big.Int, error) {
	return _Staking.Contract.BalanceUnlockedFor(&_Staking.CallOpts, who)
}

// BalanceUnlockedReward is a free data retrieval call binding the contract method 0xc328b464.
//
// Solidity: function balanceUnlockedReward() view returns(uint256)
func (_Staking *StakingCaller) BalanceUnlockedReward(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "balanceUnlockedReward")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceUnlockedReward is a free data retrieval call binding the contract method 0xc328b464.
//
// Solidity: function balanceUnlockedReward() view returns(uint256)
func (_Staking *StakingSession) BalanceUnlockedReward() (*big.Int, error) {
	return _Staking.Contract.BalanceUnlockedReward(&_Staking.CallOpts)
}

// BalanceUnlockedReward is a free data retrieval call binding the contract method 0xc328b464.
//
// Solidity: function balanceUnlockedReward() view returns(uint256)
func (_Staking *StakingCallerSession) BalanceUnlockedReward() (*big.Int, error) {
	return _Staking.Contract.BalanceUnlockedReward(&_Staking.CallOpts)
}

// BalanceUnlockedRewardFor is a free data retrieval call binding the contract method 0x515c31a1.
//
// Solidity: function balanceUnlockedRewardFor(address who) view returns(uint256)
func (_Staking *StakingCaller) BalanceUnlockedRewardFor(opts *bind.CallOpts, who common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "balanceUnlockedRewardFor", who)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceUnlockedRewardFor is a free data retrieval call binding the contract method 0x515c31a1.
//
// Solidity: function balanceUnlockedRewardFor(address who) view returns(uint256)
func (_Staking *StakingSession) BalanceUnlockedRewardFor(who common.Address) (*big.Int, error) {
	return _Staking.Contract.BalanceUnlockedRewardFor(&_Staking.CallOpts, who)
}

// BalanceUnlockedRewardFor is a free data retrieval call binding the contract method 0x515c31a1.
//
// Solidity: function balanceUnlockedRewardFor(address who) view returns(uint256)
func (_Staking *StakingCallerSession) BalanceUnlockedRewardFor(who common.Address) (*big.Int, error) {
	return _Staking.Contract.BalanceUnlockedRewardFor(&_Staking.CallOpts, who)
}

// MajorStakeFine is a free data retrieval call binding the contract method 0xad43d845.
//
// Solidity: function majorStakeFine() view returns(uint256)
func (_Staking *StakingCaller) MajorStakeFine(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "majorStakeFine")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MajorStakeFine is a free data retrieval call binding the contract method 0xad43d845.
//
// Solidity: function majorStakeFine() view returns(uint256)
func (_Staking *StakingSession) MajorStakeFine() (*big.Int, error) {
	return _Staking.Contract.MajorStakeFine(&_Staking.CallOpts)
}

// MajorStakeFine is a free data retrieval call binding the contract method 0xad43d845.
//
// Solidity: function majorStakeFine() view returns(uint256)
func (_Staking *StakingCallerSession) MajorStakeFine() (*big.Int, error) {
	return _Staking.Contract.MajorStakeFine(&_Staking.CallOpts)
}

// MinimumStake is a free data retrieval call binding the contract method 0xec5ffac2.
//
// Solidity: function minimumStake() view returns(uint256)
func (_Staking *StakingCaller) MinimumStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "minimumStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinimumStake is a free data retrieval call binding the contract method 0xec5ffac2.
//
// Solidity: function minimumStake() view returns(uint256)
func (_Staking *StakingSession) MinimumStake() (*big.Int, error) {
	return _Staking.Contract.MinimumStake(&_Staking.CallOpts)
}

// MinimumStake is a free data retrieval call binding the contract method 0xec5ffac2.
//
// Solidity: function minimumStake() view returns(uint256)
func (_Staking *StakingCallerSession) MinimumStake() (*big.Int, error) {
	return _Staking.Contract.MinimumStake(&_Staking.CallOpts)
}

// MinorStakeFine is a free data retrieval call binding the contract method 0x6d059126.
//
// Solidity: function minorStakeFine() view returns(uint256)
func (_Staking *StakingCaller) MinorStakeFine(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "minorStakeFine")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinorStakeFine is a free data retrieval call binding the contract method 0x6d059126.
//
// Solidity: function minorStakeFine() view returns(uint256)
func (_Staking *StakingSession) MinorStakeFine() (*big.Int, error) {
	return _Staking.Contract.MinorStakeFine(&_Staking.CallOpts)
}

// MinorStakeFine is a free data retrieval call binding the contract method 0x6d059126.
//
// Solidity: function minorStakeFine() view returns(uint256)
func (_Staking *StakingCallerSession) MinorStakeFine() (*big.Int, error) {
	return _Staking.Contract.MinorStakeFine(&_Staking.CallOpts)
}

// RewardAmount is a free data retrieval call binding the contract method 0xf7b2a7be.
//
// Solidity: function rewardAmount() view returns(uint256)
func (_Staking *StakingCaller) RewardAmount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "rewardAmount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RewardAmount is a free data retrieval call binding the contract method 0xf7b2a7be.
//
// Solidity: function rewardAmount() view returns(uint256)
func (_Staking *StakingSession) RewardAmount() (*big.Int, error) {
	return _Staking.Contract.RewardAmount(&_Staking.CallOpts)
}

// RewardAmount is a free data retrieval call binding the contract method 0xf7b2a7be.
//
// Solidity: function rewardAmount() view returns(uint256)
func (_Staking *StakingCallerSession) RewardAmount() (*big.Int, error) {
	return _Staking.Contract.RewardAmount(&_Staking.CallOpts)
}

// RewardBonus is a free data retrieval call binding the contract method 0xfdf553cf.
//
// Solidity: function rewardBonus() view returns(uint256)
func (_Staking *StakingCaller) RewardBonus(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "rewardBonus")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RewardBonus is a free data retrieval call binding the contract method 0xfdf553cf.
//
// Solidity: function rewardBonus() view returns(uint256)
func (_Staking *StakingSession) RewardBonus() (*big.Int, error) {
	return _Staking.Contract.RewardBonus(&_Staking.CallOpts)
}

// RewardBonus is a free data retrieval call binding the contract method 0xfdf553cf.
//
// Solidity: function rewardBonus() view returns(uint256)
func (_Staking *StakingCallerSession) RewardBonus() (*big.Int, error) {
	return _Staking.Contract.RewardBonus(&_Staking.CallOpts)
}

// Burn is a paid mutator transaction binding the contract method 0x89afcb44.
//
// Solidity: function burn(address who) returns()
func (_Staking *StakingTransactor) Burn(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "burn", who)
}

// Burn is a paid mutator transaction binding the contract method 0x89afcb44.
//
// Solidity: function burn(address who) returns()
func (_Staking *StakingSession) Burn(who common.Address) (*types.Transaction, error) {
	return _Staking.Contract.Burn(&_Staking.TransactOpts, who)
}

// Burn is a paid mutator transaction binding the contract method 0x89afcb44.
//
// Solidity: function burn(address who) returns()
func (_Staking *StakingTransactorSession) Burn(who common.Address) (*types.Transaction, error) {
	return _Staking.Contract.Burn(&_Staking.TransactOpts, who)
}

// Fine is a paid mutator transaction binding the contract method 0xdb1e4662.
//
// Solidity: function fine(address who, uint256 amount) returns(bool)
func (_Staking *StakingTransactor) Fine(opts *bind.TransactOpts, who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "fine", who, amount)
}

// Fine is a paid mutator transaction binding the contract method 0xdb1e4662.
//
// Solidity: function fine(address who, uint256 amount) returns(bool)
func (_Staking *StakingSession) Fine(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.Fine(&_Staking.TransactOpts, who, amount)
}

// Fine is a paid mutator transaction binding the contract method 0xdb1e4662.
//
// Solidity: function fine(address who, uint256 amount) returns(bool)
func (_Staking *StakingTransactorSession) Fine(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.Fine(&_Staking.TransactOpts, who, amount)
}

// InitializeStaking is a paid mutator transaction binding the contract method 0x04ad7a83.
//
// Solidity: function initializeStaking(address registry) returns()
func (_Staking *StakingTransactor) InitializeStaking(opts *bind.TransactOpts, registry common.Address) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "initializeStaking", registry)
}

// InitializeStaking is a paid mutator transaction binding the contract method 0x04ad7a83.
//
// Solidity: function initializeStaking(address registry) returns()
func (_Staking *StakingSession) InitializeStaking(registry common.Address) (*types.Transaction, error) {
	return _Staking.Contract.InitializeStaking(&_Staking.TransactOpts, registry)
}

// InitializeStaking is a paid mutator transaction binding the contract method 0x04ad7a83.
//
// Solidity: function initializeStaking(address registry) returns()
func (_Staking *StakingTransactorSession) InitializeStaking(registry common.Address) (*types.Transaction, error) {
	return _Staking.Contract.InitializeStaking(&_Staking.TransactOpts, registry)
}

// LockRewardFor is a paid mutator transaction binding the contract method 0x0ddb07ad.
//
// Solidity: function lockRewardFor(address who, uint256 amountReward, uint256 unlockEpoch) returns(bool)
func (_Staking *StakingTransactor) LockRewardFor(opts *bind.TransactOpts, who common.Address, amountReward *big.Int, unlockEpoch *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "lockRewardFor", who, amountReward, unlockEpoch)
}

// LockRewardFor is a paid mutator transaction binding the contract method 0x0ddb07ad.
//
// Solidity: function lockRewardFor(address who, uint256 amountReward, uint256 unlockEpoch) returns(bool)
func (_Staking *StakingSession) LockRewardFor(who common.Address, amountReward *big.Int, unlockEpoch *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.LockRewardFor(&_Staking.TransactOpts, who, amountReward, unlockEpoch)
}

// LockRewardFor is a paid mutator transaction binding the contract method 0x0ddb07ad.
//
// Solidity: function lockRewardFor(address who, uint256 amountReward, uint256 unlockEpoch) returns(bool)
func (_Staking *StakingTransactorSession) LockRewardFor(who common.Address, amountReward *big.Int, unlockEpoch *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.LockRewardFor(&_Staking.TransactOpts, who, amountReward, unlockEpoch)
}

// LockStake is a paid mutator transaction binding the contract method 0xf50ddb67.
//
// Solidity: function lockStake(uint256 amount) returns(bool)
func (_Staking *StakingTransactor) LockStake(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "lockStake", amount)
}

// LockStake is a paid mutator transaction binding the contract method 0xf50ddb67.
//
// Solidity: function lockStake(uint256 amount) returns(bool)
func (_Staking *StakingSession) LockStake(amount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.LockStake(&_Staking.TransactOpts, amount)
}

// LockStake is a paid mutator transaction binding the contract method 0xf50ddb67.
//
// Solidity: function lockStake(uint256 amount) returns(bool)
func (_Staking *StakingTransactorSession) LockStake(amount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.LockStake(&_Staking.TransactOpts, amount)
}

// LockStakeFor is a paid mutator transaction binding the contract method 0x461cbdcf.
//
// Solidity: function lockStakeFor(address who, uint256 amount) returns(bool)
func (_Staking *StakingTransactor) LockStakeFor(opts *bind.TransactOpts, who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "lockStakeFor", who, amount)
}

// LockStakeFor is a paid mutator transaction binding the contract method 0x461cbdcf.
//
// Solidity: function lockStakeFor(address who, uint256 amount) returns(bool)
func (_Staking *StakingSession) LockStakeFor(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.LockStakeFor(&_Staking.TransactOpts, who, amount)
}

// LockStakeFor is a paid mutator transaction binding the contract method 0x461cbdcf.
//
// Solidity: function lockStakeFor(address who, uint256 amount) returns(bool)
func (_Staking *StakingTransactorSession) LockStakeFor(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.LockStakeFor(&_Staking.TransactOpts, who, amount)
}

// MajorFine is a paid mutator transaction binding the contract method 0x57b4f82a.
//
// Solidity: function majorFine(address who) returns()
func (_Staking *StakingTransactor) MajorFine(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "majorFine", who)
}

// MajorFine is a paid mutator transaction binding the contract method 0x57b4f82a.
//
// Solidity: function majorFine(address who) returns()
func (_Staking *StakingSession) MajorFine(who common.Address) (*types.Transaction, error) {
	return _Staking.Contract.MajorFine(&_Staking.TransactOpts, who)
}

// MajorFine is a paid mutator transaction binding the contract method 0x57b4f82a.
//
// Solidity: function majorFine(address who) returns()
func (_Staking *StakingTransactorSession) MajorFine(who common.Address) (*types.Transaction, error) {
	return _Staking.Contract.MajorFine(&_Staking.TransactOpts, who)
}

// MinorFine is a paid mutator transaction binding the contract method 0xd2a2c55c.
//
// Solidity: function minorFine(address who) returns()
func (_Staking *StakingTransactor) MinorFine(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "minorFine", who)
}

// MinorFine is a paid mutator transaction binding the contract method 0xd2a2c55c.
//
// Solidity: function minorFine(address who) returns()
func (_Staking *StakingSession) MinorFine(who common.Address) (*types.Transaction, error) {
	return _Staking.Contract.MinorFine(&_Staking.TransactOpts, who)
}

// MinorFine is a paid mutator transaction binding the contract method 0xd2a2c55c.
//
// Solidity: function minorFine(address who) returns()
func (_Staking *StakingTransactorSession) MinorFine(who common.Address) (*types.Transaction, error) {
	return _Staking.Contract.MinorFine(&_Staking.TransactOpts, who)
}

// RequestUnlockStake is a paid mutator transaction binding the contract method 0xaeaf8812.
//
// Solidity: function requestUnlockStake() returns()
func (_Staking *StakingTransactor) RequestUnlockStake(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "requestUnlockStake")
}

// RequestUnlockStake is a paid mutator transaction binding the contract method 0xaeaf8812.
//
// Solidity: function requestUnlockStake() returns()
func (_Staking *StakingSession) RequestUnlockStake() (*types.Transaction, error) {
	return _Staking.Contract.RequestUnlockStake(&_Staking.TransactOpts)
}

// RequestUnlockStake is a paid mutator transaction binding the contract method 0xaeaf8812.
//
// Solidity: function requestUnlockStake() returns()
func (_Staking *StakingTransactorSession) RequestUnlockStake() (*types.Transaction, error) {
	return _Staking.Contract.RequestUnlockStake(&_Staking.TransactOpts)
}

// RequestUnlockStakeFor is a paid mutator transaction binding the contract method 0x4fcf2b72.
//
// Solidity: function requestUnlockStakeFor(address who) returns()
func (_Staking *StakingTransactor) RequestUnlockStakeFor(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "requestUnlockStakeFor", who)
}

// RequestUnlockStakeFor is a paid mutator transaction binding the contract method 0x4fcf2b72.
//
// Solidity: function requestUnlockStakeFor(address who) returns()
func (_Staking *StakingSession) RequestUnlockStakeFor(who common.Address) (*types.Transaction, error) {
	return _Staking.Contract.RequestUnlockStakeFor(&_Staking.TransactOpts, who)
}

// RequestUnlockStakeFor is a paid mutator transaction binding the contract method 0x4fcf2b72.
//
// Solidity: function requestUnlockStakeFor(address who) returns()
func (_Staking *StakingTransactorSession) RequestUnlockStakeFor(who common.Address) (*types.Transaction, error) {
	return _Staking.Contract.RequestUnlockStakeFor(&_Staking.TransactOpts, who)
}

// SetEpochDelay is a paid mutator transaction binding the contract method 0xbd695a43.
//
// Solidity: function setEpochDelay(uint256 _epochDelay) returns()
func (_Staking *StakingTransactor) SetEpochDelay(opts *bind.TransactOpts, _epochDelay *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "setEpochDelay", _epochDelay)
}

// SetEpochDelay is a paid mutator transaction binding the contract method 0xbd695a43.
//
// Solidity: function setEpochDelay(uint256 _epochDelay) returns()
func (_Staking *StakingSession) SetEpochDelay(_epochDelay *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetEpochDelay(&_Staking.TransactOpts, _epochDelay)
}

// SetEpochDelay is a paid mutator transaction binding the contract method 0xbd695a43.
//
// Solidity: function setEpochDelay(uint256 _epochDelay) returns()
func (_Staking *StakingTransactorSession) SetEpochDelay(_epochDelay *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetEpochDelay(&_Staking.TransactOpts, _epochDelay)
}

// SetMajorStakeFine is a paid mutator transaction binding the contract method 0x78146c2f.
//
// Solidity: function setMajorStakeFine(uint256 _majorStakeFine) returns()
func (_Staking *StakingTransactor) SetMajorStakeFine(opts *bind.TransactOpts, _majorStakeFine *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "setMajorStakeFine", _majorStakeFine)
}

// SetMajorStakeFine is a paid mutator transaction binding the contract method 0x78146c2f.
//
// Solidity: function setMajorStakeFine(uint256 _majorStakeFine) returns()
func (_Staking *StakingSession) SetMajorStakeFine(_majorStakeFine *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetMajorStakeFine(&_Staking.TransactOpts, _majorStakeFine)
}

// SetMajorStakeFine is a paid mutator transaction binding the contract method 0x78146c2f.
//
// Solidity: function setMajorStakeFine(uint256 _majorStakeFine) returns()
func (_Staking *StakingTransactorSession) SetMajorStakeFine(_majorStakeFine *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetMajorStakeFine(&_Staking.TransactOpts, _majorStakeFine)
}

// SetMinimumStake is a paid mutator transaction binding the contract method 0x233e9903.
//
// Solidity: function setMinimumStake(uint256 _minimumStake) returns()
func (_Staking *StakingTransactor) SetMinimumStake(opts *bind.TransactOpts, _minimumStake *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "setMinimumStake", _minimumStake)
}

// SetMinimumStake is a paid mutator transaction binding the contract method 0x233e9903.
//
// Solidity: function setMinimumStake(uint256 _minimumStake) returns()
func (_Staking *StakingSession) SetMinimumStake(_minimumStake *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetMinimumStake(&_Staking.TransactOpts, _minimumStake)
}

// SetMinimumStake is a paid mutator transaction binding the contract method 0x233e9903.
//
// Solidity: function setMinimumStake(uint256 _minimumStake) returns()
func (_Staking *StakingTransactorSession) SetMinimumStake(_minimumStake *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetMinimumStake(&_Staking.TransactOpts, _minimumStake)
}

// SetMinorStakeFine is a paid mutator transaction binding the contract method 0x29693c5c.
//
// Solidity: function setMinorStakeFine(uint256 _minorStakeFine) returns()
func (_Staking *StakingTransactor) SetMinorStakeFine(opts *bind.TransactOpts, _minorStakeFine *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "setMinorStakeFine", _minorStakeFine)
}

// SetMinorStakeFine is a paid mutator transaction binding the contract method 0x29693c5c.
//
// Solidity: function setMinorStakeFine(uint256 _minorStakeFine) returns()
func (_Staking *StakingSession) SetMinorStakeFine(_minorStakeFine *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetMinorStakeFine(&_Staking.TransactOpts, _minorStakeFine)
}

// SetMinorStakeFine is a paid mutator transaction binding the contract method 0x29693c5c.
//
// Solidity: function setMinorStakeFine(uint256 _minorStakeFine) returns()
func (_Staking *StakingTransactorSession) SetMinorStakeFine(_minorStakeFine *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetMinorStakeFine(&_Staking.TransactOpts, _minorStakeFine)
}

// SetRewardAmount is a paid mutator transaction binding the contract method 0xa8a65a78.
//
// Solidity: function setRewardAmount(uint256 _rewardAmount) returns()
func (_Staking *StakingTransactor) SetRewardAmount(opts *bind.TransactOpts, _rewardAmount *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "setRewardAmount", _rewardAmount)
}

// SetRewardAmount is a paid mutator transaction binding the contract method 0xa8a65a78.
//
// Solidity: function setRewardAmount(uint256 _rewardAmount) returns()
func (_Staking *StakingSession) SetRewardAmount(_rewardAmount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetRewardAmount(&_Staking.TransactOpts, _rewardAmount)
}

// SetRewardAmount is a paid mutator transaction binding the contract method 0xa8a65a78.
//
// Solidity: function setRewardAmount(uint256 _rewardAmount) returns()
func (_Staking *StakingTransactorSession) SetRewardAmount(_rewardAmount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetRewardAmount(&_Staking.TransactOpts, _rewardAmount)
}

// SetRewardBonus is a paid mutator transaction binding the contract method 0xf95d80fa.
//
// Solidity: function setRewardBonus(uint256 _rewardBonus) returns()
func (_Staking *StakingTransactor) SetRewardBonus(opts *bind.TransactOpts, _rewardBonus *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "setRewardBonus", _rewardBonus)
}

// SetRewardBonus is a paid mutator transaction binding the contract method 0xf95d80fa.
//
// Solidity: function setRewardBonus(uint256 _rewardBonus) returns()
func (_Staking *StakingSession) SetRewardBonus(_rewardBonus *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetRewardBonus(&_Staking.TransactOpts, _rewardBonus)
}

// SetRewardBonus is a paid mutator transaction binding the contract method 0xf95d80fa.
//
// Solidity: function setRewardBonus(uint256 _rewardBonus) returns()
func (_Staking *StakingTransactorSession) SetRewardBonus(_rewardBonus *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetRewardBonus(&_Staking.TransactOpts, _rewardBonus)
}

// UnlockReward is a paid mutator transaction binding the contract method 0xf1b7f4bf.
//
// Solidity: function unlockReward() returns(bool)
func (_Staking *StakingTransactor) UnlockReward(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "unlockReward")
}

// UnlockReward is a paid mutator transaction binding the contract method 0xf1b7f4bf.
//
// Solidity: function unlockReward() returns(bool)
func (_Staking *StakingSession) UnlockReward() (*types.Transaction, error) {
	return _Staking.Contract.UnlockReward(&_Staking.TransactOpts)
}

// UnlockReward is a paid mutator transaction binding the contract method 0xf1b7f4bf.
//
// Solidity: function unlockReward() returns(bool)
func (_Staking *StakingTransactorSession) UnlockReward() (*types.Transaction, error) {
	return _Staking.Contract.UnlockReward(&_Staking.TransactOpts)
}

// UnlockRewardFor is a paid mutator transaction binding the contract method 0x7f91bd69.
//
// Solidity: function unlockRewardFor(address who) returns(bool)
func (_Staking *StakingTransactor) UnlockRewardFor(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "unlockRewardFor", who)
}

// UnlockRewardFor is a paid mutator transaction binding the contract method 0x7f91bd69.
//
// Solidity: function unlockRewardFor(address who) returns(bool)
func (_Staking *StakingSession) UnlockRewardFor(who common.Address) (*types.Transaction, error) {
	return _Staking.Contract.UnlockRewardFor(&_Staking.TransactOpts, who)
}

// UnlockRewardFor is a paid mutator transaction binding the contract method 0x7f91bd69.
//
// Solidity: function unlockRewardFor(address who) returns(bool)
func (_Staking *StakingTransactorSession) UnlockRewardFor(who common.Address) (*types.Transaction, error) {
	return _Staking.Contract.UnlockRewardFor(&_Staking.TransactOpts, who)
}

// UnlockStake is a paid mutator transaction binding the contract method 0xecd8c06a.
//
// Solidity: function unlockStake(uint256 amount) returns(bool)
func (_Staking *StakingTransactor) UnlockStake(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "unlockStake", amount)
}

// UnlockStake is a paid mutator transaction binding the contract method 0xecd8c06a.
//
// Solidity: function unlockStake(uint256 amount) returns(bool)
func (_Staking *StakingSession) UnlockStake(amount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.UnlockStake(&_Staking.TransactOpts, amount)
}

// UnlockStake is a paid mutator transaction binding the contract method 0xecd8c06a.
//
// Solidity: function unlockStake(uint256 amount) returns(bool)
func (_Staking *StakingTransactorSession) UnlockStake(amount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.UnlockStake(&_Staking.TransactOpts, amount)
}

// UnlockStakeFor is a paid mutator transaction binding the contract method 0xe29dda92.
//
// Solidity: function unlockStakeFor(address who, uint256 amount) returns(bool)
func (_Staking *StakingTransactor) UnlockStakeFor(opts *bind.TransactOpts, who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "unlockStakeFor", who, amount)
}

// UnlockStakeFor is a paid mutator transaction binding the contract method 0xe29dda92.
//
// Solidity: function unlockStakeFor(address who, uint256 amount) returns(bool)
func (_Staking *StakingSession) UnlockStakeFor(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.UnlockStakeFor(&_Staking.TransactOpts, who, amount)
}

// UnlockStakeFor is a paid mutator transaction binding the contract method 0xe29dda92.
//
// Solidity: function unlockStakeFor(address who, uint256 amount) returns(bool)
func (_Staking *StakingTransactorSession) UnlockStakeFor(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.UnlockStakeFor(&_Staking.TransactOpts, who, amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 amount) returns(bool)
func (_Staking *StakingTransactor) Withdraw(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "withdraw", amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 amount) returns(bool)
func (_Staking *StakingSession) Withdraw(amount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.Withdraw(&_Staking.TransactOpts, amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 amount) returns(bool)
func (_Staking *StakingTransactorSession) Withdraw(amount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.Withdraw(&_Staking.TransactOpts, amount)
}

// WithdrawFor is a paid mutator transaction binding the contract method 0xdb518db2.
//
// Solidity: function withdrawFor(address who, uint256 amount) returns(bool)
func (_Staking *StakingTransactor) WithdrawFor(opts *bind.TransactOpts, who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "withdrawFor", who, amount)
}

// WithdrawFor is a paid mutator transaction binding the contract method 0xdb518db2.
//
// Solidity: function withdrawFor(address who, uint256 amount) returns(bool)
func (_Staking *StakingSession) WithdrawFor(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.WithdrawFor(&_Staking.TransactOpts, who, amount)
}

// WithdrawFor is a paid mutator transaction binding the contract method 0xdb518db2.
//
// Solidity: function withdrawFor(address who, uint256 amount) returns(bool)
func (_Staking *StakingTransactorSession) WithdrawFor(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.WithdrawFor(&_Staking.TransactOpts, who, amount)
}

// WithdrawReward is a paid mutator transaction binding the contract method 0x523a3f08.
//
// Solidity: function withdrawReward(uint256 amount) returns(bool)
func (_Staking *StakingTransactor) WithdrawReward(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "withdrawReward", amount)
}

// WithdrawReward is a paid mutator transaction binding the contract method 0x523a3f08.
//
// Solidity: function withdrawReward(uint256 amount) returns(bool)
func (_Staking *StakingSession) WithdrawReward(amount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.WithdrawReward(&_Staking.TransactOpts, amount)
}

// WithdrawReward is a paid mutator transaction binding the contract method 0x523a3f08.
//
// Solidity: function withdrawReward(uint256 amount) returns(bool)
func (_Staking *StakingTransactorSession) WithdrawReward(amount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.WithdrawReward(&_Staking.TransactOpts, amount)
}

// StakingBurntStakeIterator is returned from FilterBurntStake and is used to iterate over the raw logs and unpacked data for BurntStake events raised by the Staking contract.
type StakingBurntStakeIterator struct {
	Event *StakingBurntStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingBurntStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingBurntStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingBurntStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingBurntStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingBurntStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingBurntStake represents a BurntStake event raised by the Staking contract.
type StakingBurntStake struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBurntStake is a free log retrieval operation binding the contract event 0x54420ac6a7570cfba30d2f88982f0749811f67103de3a63ad8b82cb754e8680e.
//
// Solidity: event BurntStake(address indexed who, uint256 amount)
func (_Staking *StakingFilterer) FilterBurntStake(opts *bind.FilterOpts, who []common.Address) (*StakingBurntStakeIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Staking.contract.FilterLogs(opts, "BurntStake", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingBurntStakeIterator{contract: _Staking.contract, event: "BurntStake", logs: logs, sub: sub}, nil
}

// WatchBurntStake is a free log subscription operation binding the contract event 0x54420ac6a7570cfba30d2f88982f0749811f67103de3a63ad8b82cb754e8680e.
//
// Solidity: event BurntStake(address indexed who, uint256 amount)
func (_Staking *StakingFilterer) WatchBurntStake(opts *bind.WatchOpts, sink chan<- *StakingBurntStake, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Staking.contract.WatchLogs(opts, "BurntStake", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingBurntStake)
				if err := _Staking.contract.UnpackLog(event, "BurntStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBurntStake is a log parse operation binding the contract event 0x54420ac6a7570cfba30d2f88982f0749811f67103de3a63ad8b82cb754e8680e.
//
// Solidity: event BurntStake(address indexed who, uint256 amount)
func (_Staking *StakingFilterer) ParseBurntStake(log types.Log) (*StakingBurntStake, error) {
	event := new(StakingBurntStake)
	if err := _Staking.contract.UnpackLog(event, "BurntStake", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingFinedIterator is returned from FilterFined and is used to iterate over the raw logs and unpacked data for Fined events raised by the Staking contract.
type StakingFinedIterator struct {
	Event *StakingFined // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingFinedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingFined)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingFined)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingFinedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingFinedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingFined represents a Fined event raised by the Staking contract.
type StakingFined struct {
	Who    common.Address
	Why    [32]byte
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterFined is a free log retrieval operation binding the contract event 0xf1254bf6cf04a475bd832353c2ccfc5e0d89e7b9c0f05a153ff897b6121b91e9.
//
// Solidity: event Fined(address indexed who, bytes32 why, uint256 amount)
func (_Staking *StakingFilterer) FilterFined(opts *bind.FilterOpts, who []common.Address) (*StakingFinedIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Staking.contract.FilterLogs(opts, "Fined", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingFinedIterator{contract: _Staking.contract, event: "Fined", logs: logs, sub: sub}, nil
}

// WatchFined is a free log subscription operation binding the contract event 0xf1254bf6cf04a475bd832353c2ccfc5e0d89e7b9c0f05a153ff897b6121b91e9.
//
// Solidity: event Fined(address indexed who, bytes32 why, uint256 amount)
func (_Staking *StakingFilterer) WatchFined(opts *bind.WatchOpts, sink chan<- *StakingFined, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Staking.contract.WatchLogs(opts, "Fined", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingFined)
				if err := _Staking.contract.UnpackLog(event, "Fined", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFined is a log parse operation binding the contract event 0xf1254bf6cf04a475bd832353c2ccfc5e0d89e7b9c0f05a153ff897b6121b91e9.
//
// Solidity: event Fined(address indexed who, bytes32 why, uint256 amount)
func (_Staking *StakingFilterer) ParseFined(log types.Log) (*StakingFined, error) {
	event := new(StakingFined)
	if err := _Staking.contract.UnpackLog(event, "Fined", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingLockedRewardIterator is returned from FilterLockedReward and is used to iterate over the raw logs and unpacked data for LockedReward events raised by the Staking contract.
type StakingLockedRewardIterator struct {
	Event *StakingLockedReward // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingLockedRewardIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingLockedReward)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingLockedReward)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingLockedRewardIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingLockedRewardIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingLockedReward represents a LockedReward event raised by the Staking contract.
type StakingLockedReward struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterLockedReward is a free log retrieval operation binding the contract event 0x28dc9c0ffa672df041cad84edbee41508284600c9394bda0f8586d012c5e0915.
//
// Solidity: event LockedReward(address indexed who, uint256 amount)
func (_Staking *StakingFilterer) FilterLockedReward(opts *bind.FilterOpts, who []common.Address) (*StakingLockedRewardIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Staking.contract.FilterLogs(opts, "LockedReward", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingLockedRewardIterator{contract: _Staking.contract, event: "LockedReward", logs: logs, sub: sub}, nil
}

// WatchLockedReward is a free log subscription operation binding the contract event 0x28dc9c0ffa672df041cad84edbee41508284600c9394bda0f8586d012c5e0915.
//
// Solidity: event LockedReward(address indexed who, uint256 amount)
func (_Staking *StakingFilterer) WatchLockedReward(opts *bind.WatchOpts, sink chan<- *StakingLockedReward, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Staking.contract.WatchLogs(opts, "LockedReward", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingLockedReward)
				if err := _Staking.contract.UnpackLog(event, "LockedReward", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLockedReward is a log parse operation binding the contract event 0x28dc9c0ffa672df041cad84edbee41508284600c9394bda0f8586d012c5e0915.
//
// Solidity: event LockedReward(address indexed who, uint256 amount)
func (_Staking *StakingFilterer) ParseLockedReward(log types.Log) (*StakingLockedReward, error) {
	event := new(StakingLockedReward)
	if err := _Staking.contract.UnpackLog(event, "LockedReward", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingLockedStakeIterator is returned from FilterLockedStake and is used to iterate over the raw logs and unpacked data for LockedStake events raised by the Staking contract.
type StakingLockedStakeIterator struct {
	Event *StakingLockedStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingLockedStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingLockedStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingLockedStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingLockedStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingLockedStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingLockedStake represents a LockedStake event raised by the Staking contract.
type StakingLockedStake struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterLockedStake is a free log retrieval operation binding the contract event 0x1de2f07b0a1c69916a8b25b889051644192307ea08444a2e11f8654d1db3ab0c.
//
// Solidity: event LockedStake(address indexed who, uint256 amount)
func (_Staking *StakingFilterer) FilterLockedStake(opts *bind.FilterOpts, who []common.Address) (*StakingLockedStakeIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Staking.contract.FilterLogs(opts, "LockedStake", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingLockedStakeIterator{contract: _Staking.contract, event: "LockedStake", logs: logs, sub: sub}, nil
}

// WatchLockedStake is a free log subscription operation binding the contract event 0x1de2f07b0a1c69916a8b25b889051644192307ea08444a2e11f8654d1db3ab0c.
//
// Solidity: event LockedStake(address indexed who, uint256 amount)
func (_Staking *StakingFilterer) WatchLockedStake(opts *bind.WatchOpts, sink chan<- *StakingLockedStake, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Staking.contract.WatchLogs(opts, "LockedStake", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingLockedStake)
				if err := _Staking.contract.UnpackLog(event, "LockedStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLockedStake is a log parse operation binding the contract event 0x1de2f07b0a1c69916a8b25b889051644192307ea08444a2e11f8654d1db3ab0c.
//
// Solidity: event LockedStake(address indexed who, uint256 amount)
func (_Staking *StakingFilterer) ParseLockedStake(log types.Log) (*StakingLockedStake, error) {
	event := new(StakingLockedStake)
	if err := _Staking.contract.UnpackLog(event, "LockedStake", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingRequestedUnlockStakeIterator is returned from FilterRequestedUnlockStake and is used to iterate over the raw logs and unpacked data for RequestedUnlockStake events raised by the Staking contract.
type StakingRequestedUnlockStakeIterator struct {
	Event *StakingRequestedUnlockStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingRequestedUnlockStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingRequestedUnlockStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingRequestedUnlockStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingRequestedUnlockStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingRequestedUnlockStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingRequestedUnlockStake represents a RequestedUnlockStake event raised by the Staking contract.
type StakingRequestedUnlockStake struct {
	Who common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterRequestedUnlockStake is a free log retrieval operation binding the contract event 0x1fde0d8a6620647f5c7b5632a87b23101ba553c9b474caf1134fb24d92bf6ddc.
//
// Solidity: event RequestedUnlockStake(address indexed who)
func (_Staking *StakingFilterer) FilterRequestedUnlockStake(opts *bind.FilterOpts, who []common.Address) (*StakingRequestedUnlockStakeIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Staking.contract.FilterLogs(opts, "RequestedUnlockStake", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingRequestedUnlockStakeIterator{contract: _Staking.contract, event: "RequestedUnlockStake", logs: logs, sub: sub}, nil
}

// WatchRequestedUnlockStake is a free log subscription operation binding the contract event 0x1fde0d8a6620647f5c7b5632a87b23101ba553c9b474caf1134fb24d92bf6ddc.
//
// Solidity: event RequestedUnlockStake(address indexed who)
func (_Staking *StakingFilterer) WatchRequestedUnlockStake(opts *bind.WatchOpts, sink chan<- *StakingRequestedUnlockStake, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Staking.contract.WatchLogs(opts, "RequestedUnlockStake", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingRequestedUnlockStake)
				if err := _Staking.contract.UnpackLog(event, "RequestedUnlockStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRequestedUnlockStake is a log parse operation binding the contract event 0x1fde0d8a6620647f5c7b5632a87b23101ba553c9b474caf1134fb24d92bf6ddc.
//
// Solidity: event RequestedUnlockStake(address indexed who)
func (_Staking *StakingFilterer) ParseRequestedUnlockStake(log types.Log) (*StakingRequestedUnlockStake, error) {
	event := new(StakingRequestedUnlockStake)
	if err := _Staking.contract.UnpackLog(event, "RequestedUnlockStake", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingUnlockedRewardIterator is returned from FilterUnlockedReward and is used to iterate over the raw logs and unpacked data for UnlockedReward events raised by the Staking contract.
type StakingUnlockedRewardIterator struct {
	Event *StakingUnlockedReward // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingUnlockedRewardIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingUnlockedReward)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingUnlockedReward)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingUnlockedRewardIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingUnlockedRewardIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingUnlockedReward represents a UnlockedReward event raised by the Staking contract.
type StakingUnlockedReward struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterUnlockedReward is a free log retrieval operation binding the contract event 0x496a1c9a1a9ac29d87ecb4e563683ebd0ee80798869f36c86175059eb5dc7304.
//
// Solidity: event UnlockedReward(address indexed who, uint256 amount)
func (_Staking *StakingFilterer) FilterUnlockedReward(opts *bind.FilterOpts, who []common.Address) (*StakingUnlockedRewardIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Staking.contract.FilterLogs(opts, "UnlockedReward", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingUnlockedRewardIterator{contract: _Staking.contract, event: "UnlockedReward", logs: logs, sub: sub}, nil
}

// WatchUnlockedReward is a free log subscription operation binding the contract event 0x496a1c9a1a9ac29d87ecb4e563683ebd0ee80798869f36c86175059eb5dc7304.
//
// Solidity: event UnlockedReward(address indexed who, uint256 amount)
func (_Staking *StakingFilterer) WatchUnlockedReward(opts *bind.WatchOpts, sink chan<- *StakingUnlockedReward, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Staking.contract.WatchLogs(opts, "UnlockedReward", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingUnlockedReward)
				if err := _Staking.contract.UnpackLog(event, "UnlockedReward", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnlockedReward is a log parse operation binding the contract event 0x496a1c9a1a9ac29d87ecb4e563683ebd0ee80798869f36c86175059eb5dc7304.
//
// Solidity: event UnlockedReward(address indexed who, uint256 amount)
func (_Staking *StakingFilterer) ParseUnlockedReward(log types.Log) (*StakingUnlockedReward, error) {
	event := new(StakingUnlockedReward)
	if err := _Staking.contract.UnpackLog(event, "UnlockedReward", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingUnlockedStakeIterator is returned from FilterUnlockedStake and is used to iterate over the raw logs and unpacked data for UnlockedStake events raised by the Staking contract.
type StakingUnlockedStakeIterator struct {
	Event *StakingUnlockedStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingUnlockedStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingUnlockedStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingUnlockedStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingUnlockedStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingUnlockedStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingUnlockedStake represents a UnlockedStake event raised by the Staking contract.
type StakingUnlockedStake struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterUnlockedStake is a free log retrieval operation binding the contract event 0x252a696583e35c4d61332829d3bb2a8236f2500140258f089951799c9b999a9c.
//
// Solidity: event UnlockedStake(address indexed who, uint256 amount)
func (_Staking *StakingFilterer) FilterUnlockedStake(opts *bind.FilterOpts, who []common.Address) (*StakingUnlockedStakeIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Staking.contract.FilterLogs(opts, "UnlockedStake", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingUnlockedStakeIterator{contract: _Staking.contract, event: "UnlockedStake", logs: logs, sub: sub}, nil
}

// WatchUnlockedStake is a free log subscription operation binding the contract event 0x252a696583e35c4d61332829d3bb2a8236f2500140258f089951799c9b999a9c.
//
// Solidity: event UnlockedStake(address indexed who, uint256 amount)
func (_Staking *StakingFilterer) WatchUnlockedStake(opts *bind.WatchOpts, sink chan<- *StakingUnlockedStake, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Staking.contract.WatchLogs(opts, "UnlockedStake", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingUnlockedStake)
				if err := _Staking.contract.UnpackLog(event, "UnlockedStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnlockedStake is a log parse operation binding the contract event 0x252a696583e35c4d61332829d3bb2a8236f2500140258f089951799c9b999a9c.
//
// Solidity: event UnlockedStake(address indexed who, uint256 amount)
func (_Staking *StakingFilterer) ParseUnlockedStake(log types.Log) (*StakingUnlockedStake, error) {
	event := new(StakingUnlockedStake)
	if err := _Staking.contract.UnpackLog(event, "UnlockedStake", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingEventsMetaData contains all meta data concerning the StakingEvents contract.
var StakingEventsMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BurntStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"why\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Fined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LockedReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LockedStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"RequestedUnlockStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnlockedReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnlockedStake\",\"type\":\"event\"}]",
}

// StakingEventsABI is the input ABI used to generate the binding from.
// Deprecated: Use StakingEventsMetaData.ABI instead.
var StakingEventsABI = StakingEventsMetaData.ABI

// StakingEvents is an auto generated Go binding around an Ethereum contract.
type StakingEvents struct {
	StakingEventsCaller     // Read-only binding to the contract
	StakingEventsTransactor // Write-only binding to the contract
	StakingEventsFilterer   // Log filterer for contract events
}

// StakingEventsCaller is an auto generated read-only Go binding around an Ethereum contract.
type StakingEventsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingEventsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StakingEventsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingEventsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StakingEventsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingEventsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StakingEventsSession struct {
	Contract     *StakingEvents    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StakingEventsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StakingEventsCallerSession struct {
	Contract *StakingEventsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// StakingEventsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StakingEventsTransactorSession struct {
	Contract     *StakingEventsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// StakingEventsRaw is an auto generated low-level Go binding around an Ethereum contract.
type StakingEventsRaw struct {
	Contract *StakingEvents // Generic contract binding to access the raw methods on
}

// StakingEventsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StakingEventsCallerRaw struct {
	Contract *StakingEventsCaller // Generic read-only contract binding to access the raw methods on
}

// StakingEventsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StakingEventsTransactorRaw struct {
	Contract *StakingEventsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStakingEvents creates a new instance of StakingEvents, bound to a specific deployed contract.
func NewStakingEvents(address common.Address, backend bind.ContractBackend) (*StakingEvents, error) {
	contract, err := bindStakingEvents(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &StakingEvents{StakingEventsCaller: StakingEventsCaller{contract: contract}, StakingEventsTransactor: StakingEventsTransactor{contract: contract}, StakingEventsFilterer: StakingEventsFilterer{contract: contract}}, nil
}

// NewStakingEventsCaller creates a new read-only instance of StakingEvents, bound to a specific deployed contract.
func NewStakingEventsCaller(address common.Address, caller bind.ContractCaller) (*StakingEventsCaller, error) {
	contract, err := bindStakingEvents(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StakingEventsCaller{contract: contract}, nil
}

// NewStakingEventsTransactor creates a new write-only instance of StakingEvents, bound to a specific deployed contract.
func NewStakingEventsTransactor(address common.Address, transactor bind.ContractTransactor) (*StakingEventsTransactor, error) {
	contract, err := bindStakingEvents(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StakingEventsTransactor{contract: contract}, nil
}

// NewStakingEventsFilterer creates a new log filterer instance of StakingEvents, bound to a specific deployed contract.
func NewStakingEventsFilterer(address common.Address, filterer bind.ContractFilterer) (*StakingEventsFilterer, error) {
	contract, err := bindStakingEvents(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StakingEventsFilterer{contract: contract}, nil
}

// bindStakingEvents binds a generic wrapper to an already deployed contract.
func bindStakingEvents(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StakingEventsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StakingEvents *StakingEventsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StakingEvents.Contract.StakingEventsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StakingEvents *StakingEventsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakingEvents.Contract.StakingEventsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StakingEvents *StakingEventsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StakingEvents.Contract.StakingEventsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StakingEvents *StakingEventsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StakingEvents.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StakingEvents *StakingEventsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakingEvents.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StakingEvents *StakingEventsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StakingEvents.Contract.contract.Transact(opts, method, params...)
}

// StakingEventsBurntStakeIterator is returned from FilterBurntStake and is used to iterate over the raw logs and unpacked data for BurntStake events raised by the StakingEvents contract.
type StakingEventsBurntStakeIterator struct {
	Event *StakingEventsBurntStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingEventsBurntStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingEventsBurntStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingEventsBurntStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingEventsBurntStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingEventsBurntStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingEventsBurntStake represents a BurntStake event raised by the StakingEvents contract.
type StakingEventsBurntStake struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBurntStake is a free log retrieval operation binding the contract event 0x54420ac6a7570cfba30d2f88982f0749811f67103de3a63ad8b82cb754e8680e.
//
// Solidity: event BurntStake(address indexed who, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) FilterBurntStake(opts *bind.FilterOpts, who []common.Address) (*StakingEventsBurntStakeIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingEvents.contract.FilterLogs(opts, "BurntStake", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingEventsBurntStakeIterator{contract: _StakingEvents.contract, event: "BurntStake", logs: logs, sub: sub}, nil
}

// WatchBurntStake is a free log subscription operation binding the contract event 0x54420ac6a7570cfba30d2f88982f0749811f67103de3a63ad8b82cb754e8680e.
//
// Solidity: event BurntStake(address indexed who, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) WatchBurntStake(opts *bind.WatchOpts, sink chan<- *StakingEventsBurntStake, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingEvents.contract.WatchLogs(opts, "BurntStake", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingEventsBurntStake)
				if err := _StakingEvents.contract.UnpackLog(event, "BurntStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBurntStake is a log parse operation binding the contract event 0x54420ac6a7570cfba30d2f88982f0749811f67103de3a63ad8b82cb754e8680e.
//
// Solidity: event BurntStake(address indexed who, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) ParseBurntStake(log types.Log) (*StakingEventsBurntStake, error) {
	event := new(StakingEventsBurntStake)
	if err := _StakingEvents.contract.UnpackLog(event, "BurntStake", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingEventsFinedIterator is returned from FilterFined and is used to iterate over the raw logs and unpacked data for Fined events raised by the StakingEvents contract.
type StakingEventsFinedIterator struct {
	Event *StakingEventsFined // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingEventsFinedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingEventsFined)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingEventsFined)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingEventsFinedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingEventsFinedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingEventsFined represents a Fined event raised by the StakingEvents contract.
type StakingEventsFined struct {
	Who    common.Address
	Why    [32]byte
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterFined is a free log retrieval operation binding the contract event 0xf1254bf6cf04a475bd832353c2ccfc5e0d89e7b9c0f05a153ff897b6121b91e9.
//
// Solidity: event Fined(address indexed who, bytes32 why, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) FilterFined(opts *bind.FilterOpts, who []common.Address) (*StakingEventsFinedIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingEvents.contract.FilterLogs(opts, "Fined", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingEventsFinedIterator{contract: _StakingEvents.contract, event: "Fined", logs: logs, sub: sub}, nil
}

// WatchFined is a free log subscription operation binding the contract event 0xf1254bf6cf04a475bd832353c2ccfc5e0d89e7b9c0f05a153ff897b6121b91e9.
//
// Solidity: event Fined(address indexed who, bytes32 why, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) WatchFined(opts *bind.WatchOpts, sink chan<- *StakingEventsFined, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingEvents.contract.WatchLogs(opts, "Fined", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingEventsFined)
				if err := _StakingEvents.contract.UnpackLog(event, "Fined", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFined is a log parse operation binding the contract event 0xf1254bf6cf04a475bd832353c2ccfc5e0d89e7b9c0f05a153ff897b6121b91e9.
//
// Solidity: event Fined(address indexed who, bytes32 why, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) ParseFined(log types.Log) (*StakingEventsFined, error) {
	event := new(StakingEventsFined)
	if err := _StakingEvents.contract.UnpackLog(event, "Fined", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingEventsLockedRewardIterator is returned from FilterLockedReward and is used to iterate over the raw logs and unpacked data for LockedReward events raised by the StakingEvents contract.
type StakingEventsLockedRewardIterator struct {
	Event *StakingEventsLockedReward // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingEventsLockedRewardIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingEventsLockedReward)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingEventsLockedReward)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingEventsLockedRewardIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingEventsLockedRewardIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingEventsLockedReward represents a LockedReward event raised by the StakingEvents contract.
type StakingEventsLockedReward struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterLockedReward is a free log retrieval operation binding the contract event 0x28dc9c0ffa672df041cad84edbee41508284600c9394bda0f8586d012c5e0915.
//
// Solidity: event LockedReward(address indexed who, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) FilterLockedReward(opts *bind.FilterOpts, who []common.Address) (*StakingEventsLockedRewardIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingEvents.contract.FilterLogs(opts, "LockedReward", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingEventsLockedRewardIterator{contract: _StakingEvents.contract, event: "LockedReward", logs: logs, sub: sub}, nil
}

// WatchLockedReward is a free log subscription operation binding the contract event 0x28dc9c0ffa672df041cad84edbee41508284600c9394bda0f8586d012c5e0915.
//
// Solidity: event LockedReward(address indexed who, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) WatchLockedReward(opts *bind.WatchOpts, sink chan<- *StakingEventsLockedReward, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingEvents.contract.WatchLogs(opts, "LockedReward", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingEventsLockedReward)
				if err := _StakingEvents.contract.UnpackLog(event, "LockedReward", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLockedReward is a log parse operation binding the contract event 0x28dc9c0ffa672df041cad84edbee41508284600c9394bda0f8586d012c5e0915.
//
// Solidity: event LockedReward(address indexed who, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) ParseLockedReward(log types.Log) (*StakingEventsLockedReward, error) {
	event := new(StakingEventsLockedReward)
	if err := _StakingEvents.contract.UnpackLog(event, "LockedReward", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingEventsLockedStakeIterator is returned from FilterLockedStake and is used to iterate over the raw logs and unpacked data for LockedStake events raised by the StakingEvents contract.
type StakingEventsLockedStakeIterator struct {
	Event *StakingEventsLockedStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingEventsLockedStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingEventsLockedStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingEventsLockedStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingEventsLockedStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingEventsLockedStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingEventsLockedStake represents a LockedStake event raised by the StakingEvents contract.
type StakingEventsLockedStake struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterLockedStake is a free log retrieval operation binding the contract event 0x1de2f07b0a1c69916a8b25b889051644192307ea08444a2e11f8654d1db3ab0c.
//
// Solidity: event LockedStake(address indexed who, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) FilterLockedStake(opts *bind.FilterOpts, who []common.Address) (*StakingEventsLockedStakeIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingEvents.contract.FilterLogs(opts, "LockedStake", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingEventsLockedStakeIterator{contract: _StakingEvents.contract, event: "LockedStake", logs: logs, sub: sub}, nil
}

// WatchLockedStake is a free log subscription operation binding the contract event 0x1de2f07b0a1c69916a8b25b889051644192307ea08444a2e11f8654d1db3ab0c.
//
// Solidity: event LockedStake(address indexed who, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) WatchLockedStake(opts *bind.WatchOpts, sink chan<- *StakingEventsLockedStake, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingEvents.contract.WatchLogs(opts, "LockedStake", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingEventsLockedStake)
				if err := _StakingEvents.contract.UnpackLog(event, "LockedStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLockedStake is a log parse operation binding the contract event 0x1de2f07b0a1c69916a8b25b889051644192307ea08444a2e11f8654d1db3ab0c.
//
// Solidity: event LockedStake(address indexed who, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) ParseLockedStake(log types.Log) (*StakingEventsLockedStake, error) {
	event := new(StakingEventsLockedStake)
	if err := _StakingEvents.contract.UnpackLog(event, "LockedStake", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingEventsRequestedUnlockStakeIterator is returned from FilterRequestedUnlockStake and is used to iterate over the raw logs and unpacked data for RequestedUnlockStake events raised by the StakingEvents contract.
type StakingEventsRequestedUnlockStakeIterator struct {
	Event *StakingEventsRequestedUnlockStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingEventsRequestedUnlockStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingEventsRequestedUnlockStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingEventsRequestedUnlockStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingEventsRequestedUnlockStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingEventsRequestedUnlockStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingEventsRequestedUnlockStake represents a RequestedUnlockStake event raised by the StakingEvents contract.
type StakingEventsRequestedUnlockStake struct {
	Who common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterRequestedUnlockStake is a free log retrieval operation binding the contract event 0x1fde0d8a6620647f5c7b5632a87b23101ba553c9b474caf1134fb24d92bf6ddc.
//
// Solidity: event RequestedUnlockStake(address indexed who)
func (_StakingEvents *StakingEventsFilterer) FilterRequestedUnlockStake(opts *bind.FilterOpts, who []common.Address) (*StakingEventsRequestedUnlockStakeIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingEvents.contract.FilterLogs(opts, "RequestedUnlockStake", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingEventsRequestedUnlockStakeIterator{contract: _StakingEvents.contract, event: "RequestedUnlockStake", logs: logs, sub: sub}, nil
}

// WatchRequestedUnlockStake is a free log subscription operation binding the contract event 0x1fde0d8a6620647f5c7b5632a87b23101ba553c9b474caf1134fb24d92bf6ddc.
//
// Solidity: event RequestedUnlockStake(address indexed who)
func (_StakingEvents *StakingEventsFilterer) WatchRequestedUnlockStake(opts *bind.WatchOpts, sink chan<- *StakingEventsRequestedUnlockStake, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingEvents.contract.WatchLogs(opts, "RequestedUnlockStake", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingEventsRequestedUnlockStake)
				if err := _StakingEvents.contract.UnpackLog(event, "RequestedUnlockStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRequestedUnlockStake is a log parse operation binding the contract event 0x1fde0d8a6620647f5c7b5632a87b23101ba553c9b474caf1134fb24d92bf6ddc.
//
// Solidity: event RequestedUnlockStake(address indexed who)
func (_StakingEvents *StakingEventsFilterer) ParseRequestedUnlockStake(log types.Log) (*StakingEventsRequestedUnlockStake, error) {
	event := new(StakingEventsRequestedUnlockStake)
	if err := _StakingEvents.contract.UnpackLog(event, "RequestedUnlockStake", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingEventsUnlockedRewardIterator is returned from FilterUnlockedReward and is used to iterate over the raw logs and unpacked data for UnlockedReward events raised by the StakingEvents contract.
type StakingEventsUnlockedRewardIterator struct {
	Event *StakingEventsUnlockedReward // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingEventsUnlockedRewardIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingEventsUnlockedReward)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingEventsUnlockedReward)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingEventsUnlockedRewardIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingEventsUnlockedRewardIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingEventsUnlockedReward represents a UnlockedReward event raised by the StakingEvents contract.
type StakingEventsUnlockedReward struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterUnlockedReward is a free log retrieval operation binding the contract event 0x496a1c9a1a9ac29d87ecb4e563683ebd0ee80798869f36c86175059eb5dc7304.
//
// Solidity: event UnlockedReward(address indexed who, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) FilterUnlockedReward(opts *bind.FilterOpts, who []common.Address) (*StakingEventsUnlockedRewardIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingEvents.contract.FilterLogs(opts, "UnlockedReward", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingEventsUnlockedRewardIterator{contract: _StakingEvents.contract, event: "UnlockedReward", logs: logs, sub: sub}, nil
}

// WatchUnlockedReward is a free log subscription operation binding the contract event 0x496a1c9a1a9ac29d87ecb4e563683ebd0ee80798869f36c86175059eb5dc7304.
//
// Solidity: event UnlockedReward(address indexed who, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) WatchUnlockedReward(opts *bind.WatchOpts, sink chan<- *StakingEventsUnlockedReward, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingEvents.contract.WatchLogs(opts, "UnlockedReward", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingEventsUnlockedReward)
				if err := _StakingEvents.contract.UnpackLog(event, "UnlockedReward", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnlockedReward is a log parse operation binding the contract event 0x496a1c9a1a9ac29d87ecb4e563683ebd0ee80798869f36c86175059eb5dc7304.
//
// Solidity: event UnlockedReward(address indexed who, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) ParseUnlockedReward(log types.Log) (*StakingEventsUnlockedReward, error) {
	event := new(StakingEventsUnlockedReward)
	if err := _StakingEvents.contract.UnpackLog(event, "UnlockedReward", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingEventsUnlockedStakeIterator is returned from FilterUnlockedStake and is used to iterate over the raw logs and unpacked data for UnlockedStake events raised by the StakingEvents contract.
type StakingEventsUnlockedStakeIterator struct {
	Event *StakingEventsUnlockedStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingEventsUnlockedStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingEventsUnlockedStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingEventsUnlockedStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingEventsUnlockedStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingEventsUnlockedStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingEventsUnlockedStake represents a UnlockedStake event raised by the StakingEvents contract.
type StakingEventsUnlockedStake struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterUnlockedStake is a free log retrieval operation binding the contract event 0x252a696583e35c4d61332829d3bb2a8236f2500140258f089951799c9b999a9c.
//
// Solidity: event UnlockedStake(address indexed who, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) FilterUnlockedStake(opts *bind.FilterOpts, who []common.Address) (*StakingEventsUnlockedStakeIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingEvents.contract.FilterLogs(opts, "UnlockedStake", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingEventsUnlockedStakeIterator{contract: _StakingEvents.contract, event: "UnlockedStake", logs: logs, sub: sub}, nil
}

// WatchUnlockedStake is a free log subscription operation binding the contract event 0x252a696583e35c4d61332829d3bb2a8236f2500140258f089951799c9b999a9c.
//
// Solidity: event UnlockedStake(address indexed who, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) WatchUnlockedStake(opts *bind.WatchOpts, sink chan<- *StakingEventsUnlockedStake, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingEvents.contract.WatchLogs(opts, "UnlockedStake", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingEventsUnlockedStake)
				if err := _StakingEvents.contract.UnpackLog(event, "UnlockedStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnlockedStake is a log parse operation binding the contract event 0x252a696583e35c4d61332829d3bb2a8236f2500140258f089951799c9b999a9c.
//
// Solidity: event UnlockedStake(address indexed who, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) ParseUnlockedStake(log types.Log) (*StakingEventsUnlockedStake, error) {
	event := new(StakingEventsUnlockedStake)
	if err := _StakingEvents.contract.UnpackLog(event, "UnlockedStake", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingFacetMetaData contains all meta data concerning the StakingFacet contract.
var StakingFacetMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"balanceReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceRewardFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceStakeFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceUnlocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceUnlockedFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceUnlockedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceUnlockedRewardFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"why\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fine\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"grantOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractRegistry\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"initializeStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockEpoch\",\"type\":\"uint256\"}],\"name\":\"lockRewardFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lockStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lockStakeFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"majorFine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"majorStakeFine\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"minorFine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minorStakeFine\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestUnlockStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"requestUnlockStakeFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epochDelay\",\"type\":\"uint256\"}],\"name\":\"setEpochDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governance_\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_majorStakeFine\",\"type\":\"uint256\"}],\"name\":\"setMajorStakeFine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumStake\",\"type\":\"uint256\"}],\"name\":\"setMinimumStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minorStakeFine\",\"type\":\"uint256\"}],\"name\":\"setMinorStakeFine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardAmount\",\"type\":\"uint256\"}],\"name\":\"setRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardBonus\",\"type\":\"uint256\"}],\"name\":\"setRewardBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"unlockRewardFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unlockStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unlockStakeFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b506000620000296200004360201b62002a221760201c565b60010180546001600160a01b031916331790555062000067565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90565b613bda80620000776000396000f3fe608060405234801561001057600080fd5b50600436106102e95760003560e01c80639fb69b4311610191578063e29dda92116100e3578063f1b7f4bf11610097578063f95d80fa11610071578063f95d80fa1461065b578063fad8b32a1461066e578063fdf553cf1461068157600080fd5b8063f1b7f4bf14610619578063f50ddb6714610621578063f7b2a7be1461063457600080fd5b8063ec5ffac2116100c8578063ec5ffac2146105cc578063ecd8c06a146105f3578063ee220d8d1461060657600080fd5b8063e29dda92146105a6578063e348da13146105b957600080fd5b8063bd695a4311610145578063d2a2c55c1161011f578063d2a2c55c1461056d578063db518db214610580578063dc9780591461059357600080fd5b8063bd695a4314610523578063be9a655514610303578063c328b4641461053657600080fd5b8063ab033ea911610176578063ab033ea914610500578063ad43d84514610513578063aeaf88121461051b57600080fd5b80639fb69b43146104e5578063a8a65a78146104ed57600080fd5b8063515c31a11161024a5780636d059126116101fe57806389afcb44116101d857806389afcb441461048b5780638aa2799c1461049e5780639be5d83e146104d257600080fd5b80636d0591261461043e57806378146c2f146104655780637f91bd691461047857600080fd5b806357b4f82a1161022f57806357b4f82a146103ec5780635b6a0d1e146103ff578063605361721461043657600080fd5b8063515c31a1146103c6578063523a3f08146103d957600080fd5b80632e1a7d4d116102a157806335ba4daf1161028657806335ba4daf1461038d578063461cbdcf146103a05780634fcf2b72146103b357600080fd5b80632e1a7d4d146103595780632e7133061461036c57600080fd5b80630ddb07ad116102d25780630ddb07ad1461030b578063233e99031461033357806329693c5c1461034657600080fd5b806304ad7a83146102ee57806307da68f514610303575b600080fd5b6103016102fc366004613966565b6106a8565b005b610301610c7d565b61031e610319366004613983565b610d41565b60405190151581526020015b60405180910390f35b6103016103413660046139b8565b610ea3565b6103016103543660046139b8565b610f89565b61031e6103673660046139b8565b61106f565b61037f61037a366004613966565b611111565b60405190815260200161032a565b61037f61039b366004613966565b611160565b61031e6103ae3660046139d1565b6111aa565b6103016103c1366004613966565b61130a565b61037f6103d4366004613966565b611466565b61031e6103e73660046139b8565b6114b3565b6103016103fa366004613966565b61154d565b3360009081527f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237f8602052604090206004015461037f565b610301611643565b7f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237f15461037f565b6103016104733660046139b8565b611768565b61031e610486366004613966565b61184e565b61031e610499366004613966565b6119ac565b3360009081527f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237f8602052604090205461037f565b61037f6104e0366004613966565b611b02565b61037f611b0d565b6103016104fb3660046139b8565b611b18565b61030161050e366004613966565b611bfe565b61037f611d4d565b610301611d7a565b6103016105313660046139b8565b611e10565b3360009081527f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237f8602052604090206003015461037f565b61030161057b366004613966565b611efd565b61031e61058e3660046139d1565b611fee565b6103016105a1366004613966565b612089565b61031e6105b43660046139d1565b6121d8565b6103016105c7366004613966565b61232f565b7f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237ef5461037f565b61031e6106013660046139b8565b6124a0565b61031e610614366004613983565b61253b565b61031e612693565b61031e61062f3660046139b8565b612733565b7f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237f25461037f565b6103016106693660046139b8565b6127ce565b61030161067c366004613966565b6128b4565b7f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237f35461037f565b3360009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a602081905260409091205460ff1661076e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160448201527f6c6c6f776564000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff82166107eb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f6e696c20726567697374727920616464726573730000000000000000000000006044820152606401610765565b604080518082018252600981527f657468646b672f76310000000000000000000000000000000000000000000000602082015290517ff67187ac00000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff85169163f67187ac91610870916004016139fd565b602060405180830381865afa15801561088d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b19190613a70565b905073ffffffffffffffffffffffffffffffffffffffff8116610930576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f6e696c20657468646b67206164647265737300000000000000000000000000006044820152606401610765565b604080518082018252600f81527f7374616b696e67546f6b656e2f76310000000000000000000000000000000000602082015290517ff67187ac00000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff86169163f67187ac916109b5916004016139fd565b602060405180830381865afa1580156109d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f69190613a70565b905073ffffffffffffffffffffffffffffffffffffffff8116610a75576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6e696c207374616b696e6720546f6b656e0000000000000000000000000000006044820152606401610765565b604080518082018252600f81527f7574696c697479546f6b656e2f76310000000000000000000000000000000000602082015290517ff67187ac00000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff87169163f67187ac91610afa916004016139fd565b602060405180830381865afa158015610b17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3b9190613a70565b905073ffffffffffffffffffffffffffffffffffffffff8116610bba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6e696c207574696c69747920546f6b656e0000000000000000000000000000006044820152606401610765565b7f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237f9805473ffffffffffffffffffffffffffffffffffffffff9485167fffffffffffffffffffffffff0000000000000000000000000000000000000000918216179091557f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237f68054938516938216939093179092557f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237f780549190931691161790555050565b3360009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a602081905260409091205460ff16610d3e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160448201527f6c6c6f77656400000000000000000000000000000000000000000000000000006064820152608401610765565b50565b3360009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a6020819052604082205460ff16610e01576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160448201527f6c6c6f77656400000000000000000000000000000000000000000000000000006064820152608401610765565b7fcab1f840c5079216f50ee5ceadd06b2639a4db685e2943cdfe10511c4e47eee4805460ff1615610e8e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f69732073746f70706564000000000000000000000000000000000000000000006044820152606401610765565b610e99868686612a46565b9695505050505050565b3360009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a602081905260409091205460ff16610f64576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160448201527f6c6c6f77656400000000000000000000000000000000000000000000000000006064820152608401610765565b507f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237ef55565b3360009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a602081905260409091205460ff1661104a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160448201527f6c6c6f77656400000000000000000000000000000000000000000000000000006064820152608401610765565b507f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237f155565b7fcab1f840c5079216f50ee5ceadd06b2639a4db685e2943cdfe10511c4e47eee480546000919060ff1615611100576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f69732073746f70706564000000000000000000000000000000000000000000006044820152606401610765565b61110a3384612ba9565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff811660009081527f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237f860205260408120600401545b92915050565b73ffffffffffffffffffffffffffffffffffffffff811660009081527f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237f8602052604081205461115a565b3360009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a6020819052604082205460ff1661126a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160448201527f6c6c6f77656400000000000000000000000000000000000000000000000000006064820152608401610765565b7fcab1f840c5079216f50ee5ceadd06b2639a4db685e2943cdfe10511c4e47eee4805460ff16156112f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f69732073746f70706564000000000000000000000000000000000000000000006044820152606401610765565b6113018585612d42565b95945050505050565b3360009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a602081905260409091205460ff166113cb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160448201527f6c6c6f77656400000000000000000000000000000000000000000000000000006064820152608401610765565b7fcab1f840c5079216f50ee5ceadd06b2639a4db685e2943cdfe10511c4e47eee4805460ff1615611458576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f69732073746f70706564000000000000000000000000000000000000000000006044820152606401610765565b61146183612f18565b505050565b73ffffffffffffffffffffffffffffffffffffffff811660009081527f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237f8602052604081206003015461115a565b7fcab1f840c5079216f50ee5ceadd06b2639a4db685e2943cdfe10511c4e47eee480546000919060ff1615611544576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f69732073746f70706564000000000000000000000000000000000000000000006044820152606401610765565b61110a83613077565b7f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237f9547f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237ef9073ffffffffffffffffffffffffffffffffffffffff16331461160f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f6f6e6c7920616c6c6f7765642066726f6d20657468646b6700000000000000006044820152606401610765565b611461827f6d616a6f7200000000000000000000000000000000000000000000000000000083600101546131e7565b905090565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520c547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff16331461172b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f41636365737320436f6e74726f6c3a206f776e657273686970206e6f7420677260448201527f616e7465640000000000000000000000000000000000000000000000000000006064820152608401610765565b6002810180547fffffffffffffffffffffffff00000000000000000000000000000000000000009081169091556001909101805490911633179055565b3360009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a602081905260409091205460ff16611829576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160448201527f6c6c6f77656400000000000000000000000000000000000000000000000000006064820152608401610765565b507f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237f055565b3360009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a6020819052604082205460ff1661190e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160448201527f6c6c6f77656400000000000000000000000000000000000000000000000000006064820152608401610765565b7fcab1f840c5079216f50ee5ceadd06b2639a4db685e2943cdfe10511c4e47eee4805460ff161561199b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f69732073746f70706564000000000000000000000000000000000000000000006044820152606401610765565b6119a4846132b9565b949350505050565b3360009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a6020819052604082205460ff16611a6c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160448201527f6c6c6f77656400000000000000000000000000000000000000000000000000006064820152608401610765565b7fcab1f840c5079216f50ee5ceadd06b2639a4db685e2943cdfe10511c4e47eee4805460ff1615611af9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f69732073746f70706564000000000000000000000000000000000000000000006044820152606401610765565b6119a48461345d565b600061115a826134f2565b600061163e336134f2565b3360009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a602081905260409091205460ff16611bd9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160448201527f6c6c6f77656400000000000000000000000000000000000000000000000000006064820152608401610765565b507f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237f255565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff163314611ce6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e657220697320616c60448201527f6c6f7765640000000000000000000000000000000000000000000000000000006064820152608401610765565b507f31434318735a8e6385da596be365952169e52986860b974818986b522d23520d80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60007f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237ef5b60010154905090565b7fcab1f840c5079216f50ee5ceadd06b2639a4db685e2943cdfe10511c4e47eee4805460ff1615611e07576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f69732073746f70706564000000000000000000000000000000000000000000006044820152606401610765565b610d3e33612f18565b3360009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a602081905260409091205460ff16611ed1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160448201527f6c6c6f77656400000000000000000000000000000000000000000000000000006064820152608401610765565b611ef9827f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237f455565b5050565b7f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237f9547f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237ef9073ffffffffffffffffffffffffffffffffffffffff163314611fbf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f6f6e6c7920616c6c6f7765642066726f6d20657468646b6700000000000000006044820152606401610765565b611461827f6d696e6f7200000000000000000000000000000000000000000000000000000083600201546131e7565b7fcab1f840c5079216f50ee5ceadd06b2639a4db685e2943cdfe10511c4e47eee480546000919060ff161561207f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f69732073746f70706564000000000000000000000000000000000000000000006044820152606401610765565b6119a48484612ba9565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff163314612171576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e657220697320616c60448201527f6c6f7765640000000000000000000000000000000000000000000000000000006064820152608401610765565b507f31434318735a8e6385da596be365952169e52986860b974818986b522d23520c80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b3360009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a6020819052604082205460ff16612298576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160448201527f6c6c6f77656400000000000000000000000000000000000000000000000000006064820152608401610765565b7fcab1f840c5079216f50ee5ceadd06b2639a4db685e2943cdfe10511c4e47eee4805460ff1615612325576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f69732073746f70706564000000000000000000000000000000000000000000006044820152606401610765565b61130185856135af565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff163314806123a557503360009081526020829052604090205460ff165b612431576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e6572206f72206f7060448201527f657261746f7220616c6c6f7765640000000000000000000000000000000000006064820152608401610765565b5073ffffffffffffffffffffffffffffffffffffffff1660009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b7fcab1f840c5079216f50ee5ceadd06b2639a4db685e2943cdfe10511c4e47eee480546000919060ff1615612531576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f69732073746f70706564000000000000000000000000000000000000000000006044820152606401610765565b61110a33846135af565b3360009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a6020819052604082205460ff166125fb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160448201527f6c6c6f77656400000000000000000000000000000000000000000000000000006064820152608401610765565b7fcab1f840c5079216f50ee5ceadd06b2639a4db685e2943cdfe10511c4e47eee4805460ff1615612688576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f69732073746f70706564000000000000000000000000000000000000000000006044820152606401610765565b610e998686866131e7565b7fcab1f840c5079216f50ee5ceadd06b2639a4db685e2943cdfe10511c4e47eee480546000919060ff1615612724576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f69732073746f70706564000000000000000000000000000000000000000000006044820152606401610765565b61272d336132b9565b91505090565b7fcab1f840c5079216f50ee5ceadd06b2639a4db685e2943cdfe10511c4e47eee480546000919060ff16156127c4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f69732073746f70706564000000000000000000000000000000000000000000006044820152606401610765565b61110a3384612d42565b3360009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a602081905260409091205460ff1661288f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160448201527f6c6c6f77656400000000000000000000000000000000000000000000000000006064820152608401610765565b507f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237f355565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff1633148061292a57503360009081526020829052604090205460ff165b6129b6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e6572206f72206f7060448201527f657261746f7220616c6c6f7765640000000000000000000000000000000000006064820152608401610765565b5073ffffffffffffffffffffffffffffffffffffffff1660009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90565b6000807f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237ef73ffffffffffffffffffffffffffffffffffffffff86811660009081526009830160209081526040808320815180830183528a81528084018a815260058301805460018082018355918852959096208251600290960201948555519390940192909255600885015490517f40c10f19000000000000000000000000000000000000000000000000000000008152306004820152602481018a90529495509093919216906340c10f1990604401600060405180830381600087803b158015612b3057600080fd5b505af1158015612b44573d6000803e3d6000fd5b505050508673ffffffffffffffffffffffffffffffffffffffff167f28dc9c0ffa672df041cad84edbee41508284600c9394bda0f8586d012c5e091587604051612b9091815260200190565b60405180910390a2506001015460ff1695945050505050565b73ffffffffffffffffffffffffffffffffffffffff821660009081527f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237f86020526040812060048101547f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237ef9190841115612c7e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f496e73756666696369656e7420756e6c6f636b65642062616c616e63652e00006044820152606401610765565b6004810154612c8d908561382c565b60048281019190915560078301546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff888116938201939093526024810187905291169063a9059cbb906044016020604051808303816000875af1158015612d12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d369190613a8d565b50600195945050505050565b73ffffffffffffffffffffffffffffffffffffffff821660009081527f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237f86020526040812080547f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237ef9190612db590856138a4565b815560405184815273ffffffffffffffffffffffffffffffffffffffff8616907f1de2f07b0a1c69916a8b25b889051644192307ea08444a2e11f8654d1db3ab0c9060200160405180910390a260078201546040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff878116600483015230602483015260448201879052909116906323b872dd906064016020604051808303816000875af1158015612e83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ea79190613a8d565b612f0d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5472616e73666572206661696c656400000000000000000000000000000000006044820152606401610765565b506001949350505050565b73ffffffffffffffffffffffffffffffffffffffff811660009081527f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237f86020526040902080547f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237ef9190612fe7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4e6f207374616b650000000000000000000000000000000000000000000000006044820152606401610765565b600181810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169091179055600582015461302261391c565b61302c9190613ade565b600282015560405173ffffffffffffffffffffffffffffffffffffffff8416907f1fde0d8a6620647f5c7b5632a87b23101ba553c9b474caf1134fb24d92bf6ddc90600090a2505050565b3360009081527f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237f86020526040812060038101547f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237ef9190841115613136576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f496e73756666696369656e7420756e6c6f636b65642062616c616e63652e00006044820152606401610765565b6003810154613145908561382c565b600382015560088201546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526024810186905273ffffffffffffffffffffffffffffffffffffffff9091169063a9059cbb906044016020604051808303816000875af11580156131c3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f0d9190613a8d565b73ffffffffffffffffffffffffffffffffffffffff831660009081527f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237f86020526040812080547f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237ef919061325a908561382c565b8155604080518681526020810186905273ffffffffffffffffffffffffffffffffffffffff8816917ff1254bf6cf04a475bd832353c2ccfc5e0d89e7b9c0f05a153ff897b6121b91e9910160405180910390a250600195945050505050565b73ffffffffffffffffffffffffffffffffffffffff811660009081527f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237f8602052604081207f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237ef906005810183805b825481101561343857600083828154811061334357613343613af6565b9060005260206000209060020201905061335b61391c565b8160010154116134255780546133719084613ade565b8454909350849061338490600190613b25565b8154811061339457613394613af6565b90600052602060002090600202018483815481106133b4576133b4613af6565b60009182526020909120825460029092020190815560019182015491015583548490806133e3576133e3613b3c565b60008281526020812060027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9093019283020181815560010155905550613326565b8161342f81613b6b565b92505050613326565b8184600301546134489190613ade565b60039094019390935550600195945050505050565b6000807f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237ef73ffffffffffffffffffffffffffffffffffffffff84166000818152600983016020908152604080832080549381559051838152949550939192917f919f7e2092ffcc9d09f599be18d8152860b0c054df788a33bc549cdd9d0f15b1910160405180910390a2506001949350505050565b73ffffffffffffffffffffffffffffffffffffffff811660009081527f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237f8602052604081207f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237ef90600501825b81548110156135a75761359382828154811061357b5761357b613af6565b600091825260209091206002909102015485906138a4565b93508061359f81613b6b565b91505061355d565b505050919050565b73ffffffffffffffffffffffffffffffffffffffff821660009081527f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237f86020526040812060018101547f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237ef919060ff16613684576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f5374616b6520756e6c6f636b206e6f74207265717565737465640000000000006044820152606401610765565b8054841115613715576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f5374616b6520756e6c6f636b207265717565737465642067726561746572207460448201527f68616e207374616b6500000000000000000000000000000000000000000000006064820152608401610765565b61371d61391c565b8160020154111561378a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e6f7420726561647900000000000000000000000000000000000000000000006044820152606401610765565b600481015461379990856138a4565b600482015580546137aa908561382c565b81556001810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905560405184815273ffffffffffffffffffffffffffffffffffffffff8616907f252a696583e35c4d61332829d3bb2a8236f2500140258f089951799c9b999a9c9060200160405180910390a2506001949350505050565b6000826138398382613b25565b915081111561115a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f64732d6d6174682d7375622d756e646572666c6f7700000000000000000000006044820152606401610765565b6000826138b18382613ade565b915081101561115a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d6d6174682d6164642d6f766572666c6f770000000000000000000000006044820152606401610765565b60007fa53f90683b42ecb37674e5c8c5c9cabf849818fdc2fdfb57bbe3c738f7b50d0e611d71565b73ffffffffffffffffffffffffffffffffffffffff81168114610d3e57600080fd5b60006020828403121561397857600080fd5b813561110a81613944565b60008060006060848603121561399857600080fd5b83356139a381613944565b95602085013595506040909401359392505050565b6000602082840312156139ca57600080fd5b5035919050565b600080604083850312156139e457600080fd5b82356139ef81613944565b946020939093013593505050565b600060208083528351808285015260005b81811015613a2a57858101830151858201604001528201613a0e565b81811115613a3c576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b600060208284031215613a8257600080fd5b815161110a81613944565b600060208284031215613a9f57600080fd5b8151801515811461110a57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115613af157613af1613aaf565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082821015613b3757613b37613aaf565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613b9d57613b9d613aaf565b506001019056fea2646970667358221220e8ccf6fa441ea2370780e4af18677c568a5de51361938867e8c92e33f1b2940564736f6c634300080b0033",
}

// StakingFacetABI is the input ABI used to generate the binding from.
// Deprecated: Use StakingFacetMetaData.ABI instead.
var StakingFacetABI = StakingFacetMetaData.ABI

// StakingFacetBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StakingFacetMetaData.Bin instead.
var StakingFacetBin = StakingFacetMetaData.Bin

// DeployStakingFacet deploys a new Ethereum contract, binding an instance of StakingFacet to it.
func DeployStakingFacet(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *StakingFacet, error) {
	parsed, err := StakingFacetMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StakingFacetBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &StakingFacet{StakingFacetCaller: StakingFacetCaller{contract: contract}, StakingFacetTransactor: StakingFacetTransactor{contract: contract}, StakingFacetFilterer: StakingFacetFilterer{contract: contract}}, nil
}

// StakingFacet is an auto generated Go binding around an Ethereum contract.
type StakingFacet struct {
	StakingFacetCaller     // Read-only binding to the contract
	StakingFacetTransactor // Write-only binding to the contract
	StakingFacetFilterer   // Log filterer for contract events
}

// StakingFacetCaller is an auto generated read-only Go binding around an Ethereum contract.
type StakingFacetCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingFacetTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StakingFacetTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingFacetFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StakingFacetFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingFacetSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StakingFacetSession struct {
	Contract     *StakingFacet     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StakingFacetCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StakingFacetCallerSession struct {
	Contract *StakingFacetCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// StakingFacetTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StakingFacetTransactorSession struct {
	Contract     *StakingFacetTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// StakingFacetRaw is an auto generated low-level Go binding around an Ethereum contract.
type StakingFacetRaw struct {
	Contract *StakingFacet // Generic contract binding to access the raw methods on
}

// StakingFacetCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StakingFacetCallerRaw struct {
	Contract *StakingFacetCaller // Generic read-only contract binding to access the raw methods on
}

// StakingFacetTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StakingFacetTransactorRaw struct {
	Contract *StakingFacetTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStakingFacet creates a new instance of StakingFacet, bound to a specific deployed contract.
func NewStakingFacet(address common.Address, backend bind.ContractBackend) (*StakingFacet, error) {
	contract, err := bindStakingFacet(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &StakingFacet{StakingFacetCaller: StakingFacetCaller{contract: contract}, StakingFacetTransactor: StakingFacetTransactor{contract: contract}, StakingFacetFilterer: StakingFacetFilterer{contract: contract}}, nil
}

// NewStakingFacetCaller creates a new read-only instance of StakingFacet, bound to a specific deployed contract.
func NewStakingFacetCaller(address common.Address, caller bind.ContractCaller) (*StakingFacetCaller, error) {
	contract, err := bindStakingFacet(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StakingFacetCaller{contract: contract}, nil
}

// NewStakingFacetTransactor creates a new write-only instance of StakingFacet, bound to a specific deployed contract.
func NewStakingFacetTransactor(address common.Address, transactor bind.ContractTransactor) (*StakingFacetTransactor, error) {
	contract, err := bindStakingFacet(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StakingFacetTransactor{contract: contract}, nil
}

// NewStakingFacetFilterer creates a new log filterer instance of StakingFacet, bound to a specific deployed contract.
func NewStakingFacetFilterer(address common.Address, filterer bind.ContractFilterer) (*StakingFacetFilterer, error) {
	contract, err := bindStakingFacet(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StakingFacetFilterer{contract: contract}, nil
}

// bindStakingFacet binds a generic wrapper to an already deployed contract.
func bindStakingFacet(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StakingFacetABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StakingFacet *StakingFacetRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StakingFacet.Contract.StakingFacetCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StakingFacet *StakingFacetRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakingFacet.Contract.StakingFacetTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StakingFacet *StakingFacetRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StakingFacet.Contract.StakingFacetTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StakingFacet *StakingFacetCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StakingFacet.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StakingFacet *StakingFacetTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakingFacet.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StakingFacet *StakingFacetTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StakingFacet.Contract.contract.Transact(opts, method, params...)
}

// BalanceReward is a free data retrieval call binding the contract method 0x9fb69b43.
//
// Solidity: function balanceReward() view returns(uint256)
func (_StakingFacet *StakingFacetCaller) BalanceReward(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakingFacet.contract.Call(opts, &out, "balanceReward")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceReward is a free data retrieval call binding the contract method 0x9fb69b43.
//
// Solidity: function balanceReward() view returns(uint256)
func (_StakingFacet *StakingFacetSession) BalanceReward() (*big.Int, error) {
	return _StakingFacet.Contract.BalanceReward(&_StakingFacet.CallOpts)
}

// BalanceReward is a free data retrieval call binding the contract method 0x9fb69b43.
//
// Solidity: function balanceReward() view returns(uint256)
func (_StakingFacet *StakingFacetCallerSession) BalanceReward() (*big.Int, error) {
	return _StakingFacet.Contract.BalanceReward(&_StakingFacet.CallOpts)
}

// BalanceRewardFor is a free data retrieval call binding the contract method 0x9be5d83e.
//
// Solidity: function balanceRewardFor(address who) view returns(uint256)
func (_StakingFacet *StakingFacetCaller) BalanceRewardFor(opts *bind.CallOpts, who common.Address) (*big.Int, error) {
	var out []interface{}
	err := _StakingFacet.contract.Call(opts, &out, "balanceRewardFor", who)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceRewardFor is a free data retrieval call binding the contract method 0x9be5d83e.
//
// Solidity: function balanceRewardFor(address who) view returns(uint256)
func (_StakingFacet *StakingFacetSession) BalanceRewardFor(who common.Address) (*big.Int, error) {
	return _StakingFacet.Contract.BalanceRewardFor(&_StakingFacet.CallOpts, who)
}

// BalanceRewardFor is a free data retrieval call binding the contract method 0x9be5d83e.
//
// Solidity: function balanceRewardFor(address who) view returns(uint256)
func (_StakingFacet *StakingFacetCallerSession) BalanceRewardFor(who common.Address) (*big.Int, error) {
	return _StakingFacet.Contract.BalanceRewardFor(&_StakingFacet.CallOpts, who)
}

// BalanceStake is a free data retrieval call binding the contract method 0x8aa2799c.
//
// Solidity: function balanceStake() view returns(uint256)
func (_StakingFacet *StakingFacetCaller) BalanceStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakingFacet.contract.Call(opts, &out, "balanceStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceStake is a free data retrieval call binding the contract method 0x8aa2799c.
//
// Solidity: function balanceStake() view returns(uint256)
func (_StakingFacet *StakingFacetSession) BalanceStake() (*big.Int, error) {
	return _StakingFacet.Contract.BalanceStake(&_StakingFacet.CallOpts)
}

// BalanceStake is a free data retrieval call binding the contract method 0x8aa2799c.
//
// Solidity: function balanceStake() view returns(uint256)
func (_StakingFacet *StakingFacetCallerSession) BalanceStake() (*big.Int, error) {
	return _StakingFacet.Contract.BalanceStake(&_StakingFacet.CallOpts)
}

// BalanceStakeFor is a free data retrieval call binding the contract method 0x35ba4daf.
//
// Solidity: function balanceStakeFor(address who) view returns(uint256)
func (_StakingFacet *StakingFacetCaller) BalanceStakeFor(opts *bind.CallOpts, who common.Address) (*big.Int, error) {
	var out []interface{}
	err := _StakingFacet.contract.Call(opts, &out, "balanceStakeFor", who)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceStakeFor is a free data retrieval call binding the contract method 0x35ba4daf.
//
// Solidity: function balanceStakeFor(address who) view returns(uint256)
func (_StakingFacet *StakingFacetSession) BalanceStakeFor(who common.Address) (*big.Int, error) {
	return _StakingFacet.Contract.BalanceStakeFor(&_StakingFacet.CallOpts, who)
}

// BalanceStakeFor is a free data retrieval call binding the contract method 0x35ba4daf.
//
// Solidity: function balanceStakeFor(address who) view returns(uint256)
func (_StakingFacet *StakingFacetCallerSession) BalanceStakeFor(who common.Address) (*big.Int, error) {
	return _StakingFacet.Contract.BalanceStakeFor(&_StakingFacet.CallOpts, who)
}

// BalanceUnlocked is a free data retrieval call binding the contract method 0x5b6a0d1e.
//
// Solidity: function balanceUnlocked() view returns(uint256)
func (_StakingFacet *StakingFacetCaller) BalanceUnlocked(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakingFacet.contract.Call(opts, &out, "balanceUnlocked")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceUnlocked is a free data retrieval call binding the contract method 0x5b6a0d1e.
//
// Solidity: function balanceUnlocked() view returns(uint256)
func (_StakingFacet *StakingFacetSession) BalanceUnlocked() (*big.Int, error) {
	return _StakingFacet.Contract.BalanceUnlocked(&_StakingFacet.CallOpts)
}

// BalanceUnlocked is a free data retrieval call binding the contract method 0x5b6a0d1e.
//
// Solidity: function balanceUnlocked() view returns(uint256)
func (_StakingFacet *StakingFacetCallerSession) BalanceUnlocked() (*big.Int, error) {
	return _StakingFacet.Contract.BalanceUnlocked(&_StakingFacet.CallOpts)
}

// BalanceUnlockedFor is a free data retrieval call binding the contract method 0x2e713306.
//
// Solidity: function balanceUnlockedFor(address who) view returns(uint256)
func (_StakingFacet *StakingFacetCaller) BalanceUnlockedFor(opts *bind.CallOpts, who common.Address) (*big.Int, error) {
	var out []interface{}
	err := _StakingFacet.contract.Call(opts, &out, "balanceUnlockedFor", who)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceUnlockedFor is a free data retrieval call binding the contract method 0x2e713306.
//
// Solidity: function balanceUnlockedFor(address who) view returns(uint256)
func (_StakingFacet *StakingFacetSession) BalanceUnlockedFor(who common.Address) (*big.Int, error) {
	return _StakingFacet.Contract.BalanceUnlockedFor(&_StakingFacet.CallOpts, who)
}

// BalanceUnlockedFor is a free data retrieval call binding the contract method 0x2e713306.
//
// Solidity: function balanceUnlockedFor(address who) view returns(uint256)
func (_StakingFacet *StakingFacetCallerSession) BalanceUnlockedFor(who common.Address) (*big.Int, error) {
	return _StakingFacet.Contract.BalanceUnlockedFor(&_StakingFacet.CallOpts, who)
}

// BalanceUnlockedReward is a free data retrieval call binding the contract method 0xc328b464.
//
// Solidity: function balanceUnlockedReward() view returns(uint256)
func (_StakingFacet *StakingFacetCaller) BalanceUnlockedReward(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakingFacet.contract.Call(opts, &out, "balanceUnlockedReward")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceUnlockedReward is a free data retrieval call binding the contract method 0xc328b464.
//
// Solidity: function balanceUnlockedReward() view returns(uint256)
func (_StakingFacet *StakingFacetSession) BalanceUnlockedReward() (*big.Int, error) {
	return _StakingFacet.Contract.BalanceUnlockedReward(&_StakingFacet.CallOpts)
}

// BalanceUnlockedReward is a free data retrieval call binding the contract method 0xc328b464.
//
// Solidity: function balanceUnlockedReward() view returns(uint256)
func (_StakingFacet *StakingFacetCallerSession) BalanceUnlockedReward() (*big.Int, error) {
	return _StakingFacet.Contract.BalanceUnlockedReward(&_StakingFacet.CallOpts)
}

// BalanceUnlockedRewardFor is a free data retrieval call binding the contract method 0x515c31a1.
//
// Solidity: function balanceUnlockedRewardFor(address who) view returns(uint256)
func (_StakingFacet *StakingFacetCaller) BalanceUnlockedRewardFor(opts *bind.CallOpts, who common.Address) (*big.Int, error) {
	var out []interface{}
	err := _StakingFacet.contract.Call(opts, &out, "balanceUnlockedRewardFor", who)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceUnlockedRewardFor is a free data retrieval call binding the contract method 0x515c31a1.
//
// Solidity: function balanceUnlockedRewardFor(address who) view returns(uint256)
func (_StakingFacet *StakingFacetSession) BalanceUnlockedRewardFor(who common.Address) (*big.Int, error) {
	return _StakingFacet.Contract.BalanceUnlockedRewardFor(&_StakingFacet.CallOpts, who)
}

// BalanceUnlockedRewardFor is a free data retrieval call binding the contract method 0x515c31a1.
//
// Solidity: function balanceUnlockedRewardFor(address who) view returns(uint256)
func (_StakingFacet *StakingFacetCallerSession) BalanceUnlockedRewardFor(who common.Address) (*big.Int, error) {
	return _StakingFacet.Contract.BalanceUnlockedRewardFor(&_StakingFacet.CallOpts, who)
}

// MajorStakeFine is a free data retrieval call binding the contract method 0xad43d845.
//
// Solidity: function majorStakeFine() view returns(uint256)
func (_StakingFacet *StakingFacetCaller) MajorStakeFine(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakingFacet.contract.Call(opts, &out, "majorStakeFine")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MajorStakeFine is a free data retrieval call binding the contract method 0xad43d845.
//
// Solidity: function majorStakeFine() view returns(uint256)
func (_StakingFacet *StakingFacetSession) MajorStakeFine() (*big.Int, error) {
	return _StakingFacet.Contract.MajorStakeFine(&_StakingFacet.CallOpts)
}

// MajorStakeFine is a free data retrieval call binding the contract method 0xad43d845.
//
// Solidity: function majorStakeFine() view returns(uint256)
func (_StakingFacet *StakingFacetCallerSession) MajorStakeFine() (*big.Int, error) {
	return _StakingFacet.Contract.MajorStakeFine(&_StakingFacet.CallOpts)
}

// MinimumStake is a free data retrieval call binding the contract method 0xec5ffac2.
//
// Solidity: function minimumStake() view returns(uint256)
func (_StakingFacet *StakingFacetCaller) MinimumStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakingFacet.contract.Call(opts, &out, "minimumStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinimumStake is a free data retrieval call binding the contract method 0xec5ffac2.
//
// Solidity: function minimumStake() view returns(uint256)
func (_StakingFacet *StakingFacetSession) MinimumStake() (*big.Int, error) {
	return _StakingFacet.Contract.MinimumStake(&_StakingFacet.CallOpts)
}

// MinimumStake is a free data retrieval call binding the contract method 0xec5ffac2.
//
// Solidity: function minimumStake() view returns(uint256)
func (_StakingFacet *StakingFacetCallerSession) MinimumStake() (*big.Int, error) {
	return _StakingFacet.Contract.MinimumStake(&_StakingFacet.CallOpts)
}

// MinorStakeFine is a free data retrieval call binding the contract method 0x6d059126.
//
// Solidity: function minorStakeFine() view returns(uint256)
func (_StakingFacet *StakingFacetCaller) MinorStakeFine(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakingFacet.contract.Call(opts, &out, "minorStakeFine")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinorStakeFine is a free data retrieval call binding the contract method 0x6d059126.
//
// Solidity: function minorStakeFine() view returns(uint256)
func (_StakingFacet *StakingFacetSession) MinorStakeFine() (*big.Int, error) {
	return _StakingFacet.Contract.MinorStakeFine(&_StakingFacet.CallOpts)
}

// MinorStakeFine is a free data retrieval call binding the contract method 0x6d059126.
//
// Solidity: function minorStakeFine() view returns(uint256)
func (_StakingFacet *StakingFacetCallerSession) MinorStakeFine() (*big.Int, error) {
	return _StakingFacet.Contract.MinorStakeFine(&_StakingFacet.CallOpts)
}

// RewardAmount is a free data retrieval call binding the contract method 0xf7b2a7be.
//
// Solidity: function rewardAmount() view returns(uint256)
func (_StakingFacet *StakingFacetCaller) RewardAmount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakingFacet.contract.Call(opts, &out, "rewardAmount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RewardAmount is a free data retrieval call binding the contract method 0xf7b2a7be.
//
// Solidity: function rewardAmount() view returns(uint256)
func (_StakingFacet *StakingFacetSession) RewardAmount() (*big.Int, error) {
	return _StakingFacet.Contract.RewardAmount(&_StakingFacet.CallOpts)
}

// RewardAmount is a free data retrieval call binding the contract method 0xf7b2a7be.
//
// Solidity: function rewardAmount() view returns(uint256)
func (_StakingFacet *StakingFacetCallerSession) RewardAmount() (*big.Int, error) {
	return _StakingFacet.Contract.RewardAmount(&_StakingFacet.CallOpts)
}

// RewardBonus is a free data retrieval call binding the contract method 0xfdf553cf.
//
// Solidity: function rewardBonus() view returns(uint256)
func (_StakingFacet *StakingFacetCaller) RewardBonus(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakingFacet.contract.Call(opts, &out, "rewardBonus")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RewardBonus is a free data retrieval call binding the contract method 0xfdf553cf.
//
// Solidity: function rewardBonus() view returns(uint256)
func (_StakingFacet *StakingFacetSession) RewardBonus() (*big.Int, error) {
	return _StakingFacet.Contract.RewardBonus(&_StakingFacet.CallOpts)
}

// RewardBonus is a free data retrieval call binding the contract method 0xfdf553cf.
//
// Solidity: function rewardBonus() view returns(uint256)
func (_StakingFacet *StakingFacetCallerSession) RewardBonus() (*big.Int, error) {
	return _StakingFacet.Contract.RewardBonus(&_StakingFacet.CallOpts)
}

// Burn is a paid mutator transaction binding the contract method 0x89afcb44.
//
// Solidity: function burn(address who) returns(bool)
func (_StakingFacet *StakingFacetTransactor) Burn(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "burn", who)
}

// Burn is a paid mutator transaction binding the contract method 0x89afcb44.
//
// Solidity: function burn(address who) returns(bool)
func (_StakingFacet *StakingFacetSession) Burn(who common.Address) (*types.Transaction, error) {
	return _StakingFacet.Contract.Burn(&_StakingFacet.TransactOpts, who)
}

// Burn is a paid mutator transaction binding the contract method 0x89afcb44.
//
// Solidity: function burn(address who) returns(bool)
func (_StakingFacet *StakingFacetTransactorSession) Burn(who common.Address) (*types.Transaction, error) {
	return _StakingFacet.Contract.Burn(&_StakingFacet.TransactOpts, who)
}

// Fine is a paid mutator transaction binding the contract method 0xee220d8d.
//
// Solidity: function fine(address who, bytes32 why, uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetTransactor) Fine(opts *bind.TransactOpts, who common.Address, why [32]byte, amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "fine", who, why, amount)
}

// Fine is a paid mutator transaction binding the contract method 0xee220d8d.
//
// Solidity: function fine(address who, bytes32 why, uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetSession) Fine(who common.Address, why [32]byte, amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.Fine(&_StakingFacet.TransactOpts, who, why, amount)
}

// Fine is a paid mutator transaction binding the contract method 0xee220d8d.
//
// Solidity: function fine(address who, bytes32 why, uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetTransactorSession) Fine(who common.Address, why [32]byte, amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.Fine(&_StakingFacet.TransactOpts, who, why, amount)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_StakingFacet *StakingFacetTransactor) GrantOperator(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "grantOperator", who)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_StakingFacet *StakingFacetSession) GrantOperator(who common.Address) (*types.Transaction, error) {
	return _StakingFacet.Contract.GrantOperator(&_StakingFacet.TransactOpts, who)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_StakingFacet *StakingFacetTransactorSession) GrantOperator(who common.Address) (*types.Transaction, error) {
	return _StakingFacet.Contract.GrantOperator(&_StakingFacet.TransactOpts, who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_StakingFacet *StakingFacetTransactor) GrantOwner(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "grantOwner", who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_StakingFacet *StakingFacetSession) GrantOwner(who common.Address) (*types.Transaction, error) {
	return _StakingFacet.Contract.GrantOwner(&_StakingFacet.TransactOpts, who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_StakingFacet *StakingFacetTransactorSession) GrantOwner(who common.Address) (*types.Transaction, error) {
	return _StakingFacet.Contract.GrantOwner(&_StakingFacet.TransactOpts, who)
}

// InitializeStaking is a paid mutator transaction binding the contract method 0x04ad7a83.
//
// Solidity: function initializeStaking(address registry) returns()
func (_StakingFacet *StakingFacetTransactor) InitializeStaking(opts *bind.TransactOpts, registry common.Address) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "initializeStaking", registry)
}

// InitializeStaking is a paid mutator transaction binding the contract method 0x04ad7a83.
//
// Solidity: function initializeStaking(address registry) returns()
func (_StakingFacet *StakingFacetSession) InitializeStaking(registry common.Address) (*types.Transaction, error) {
	return _StakingFacet.Contract.InitializeStaking(&_StakingFacet.TransactOpts, registry)
}

// InitializeStaking is a paid mutator transaction binding the contract method 0x04ad7a83.
//
// Solidity: function initializeStaking(address registry) returns()
func (_StakingFacet *StakingFacetTransactorSession) InitializeStaking(registry common.Address) (*types.Transaction, error) {
	return _StakingFacet.Contract.InitializeStaking(&_StakingFacet.TransactOpts, registry)
}

// LockRewardFor is a paid mutator transaction binding the contract method 0x0ddb07ad.
//
// Solidity: function lockRewardFor(address who, uint256 amountReward, uint256 unlockEpoch) returns(bool)
func (_StakingFacet *StakingFacetTransactor) LockRewardFor(opts *bind.TransactOpts, who common.Address, amountReward *big.Int, unlockEpoch *big.Int) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "lockRewardFor", who, amountReward, unlockEpoch)
}

// LockRewardFor is a paid mutator transaction binding the contract method 0x0ddb07ad.
//
// Solidity: function lockRewardFor(address who, uint256 amountReward, uint256 unlockEpoch) returns(bool)
func (_StakingFacet *StakingFacetSession) LockRewardFor(who common.Address, amountReward *big.Int, unlockEpoch *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.LockRewardFor(&_StakingFacet.TransactOpts, who, amountReward, unlockEpoch)
}

// LockRewardFor is a paid mutator transaction binding the contract method 0x0ddb07ad.
//
// Solidity: function lockRewardFor(address who, uint256 amountReward, uint256 unlockEpoch) returns(bool)
func (_StakingFacet *StakingFacetTransactorSession) LockRewardFor(who common.Address, amountReward *big.Int, unlockEpoch *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.LockRewardFor(&_StakingFacet.TransactOpts, who, amountReward, unlockEpoch)
}

// LockStake is a paid mutator transaction binding the contract method 0xf50ddb67.
//
// Solidity: function lockStake(uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetTransactor) LockStake(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "lockStake", amount)
}

// LockStake is a paid mutator transaction binding the contract method 0xf50ddb67.
//
// Solidity: function lockStake(uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetSession) LockStake(amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.LockStake(&_StakingFacet.TransactOpts, amount)
}

// LockStake is a paid mutator transaction binding the contract method 0xf50ddb67.
//
// Solidity: function lockStake(uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetTransactorSession) LockStake(amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.LockStake(&_StakingFacet.TransactOpts, amount)
}

// LockStakeFor is a paid mutator transaction binding the contract method 0x461cbdcf.
//
// Solidity: function lockStakeFor(address who, uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetTransactor) LockStakeFor(opts *bind.TransactOpts, who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "lockStakeFor", who, amount)
}

// LockStakeFor is a paid mutator transaction binding the contract method 0x461cbdcf.
//
// Solidity: function lockStakeFor(address who, uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetSession) LockStakeFor(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.LockStakeFor(&_StakingFacet.TransactOpts, who, amount)
}

// LockStakeFor is a paid mutator transaction binding the contract method 0x461cbdcf.
//
// Solidity: function lockStakeFor(address who, uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetTransactorSession) LockStakeFor(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.LockStakeFor(&_StakingFacet.TransactOpts, who, amount)
}

// MajorFine is a paid mutator transaction binding the contract method 0x57b4f82a.
//
// Solidity: function majorFine(address who) returns()
func (_StakingFacet *StakingFacetTransactor) MajorFine(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "majorFine", who)
}

// MajorFine is a paid mutator transaction binding the contract method 0x57b4f82a.
//
// Solidity: function majorFine(address who) returns()
func (_StakingFacet *StakingFacetSession) MajorFine(who common.Address) (*types.Transaction, error) {
	return _StakingFacet.Contract.MajorFine(&_StakingFacet.TransactOpts, who)
}

// MajorFine is a paid mutator transaction binding the contract method 0x57b4f82a.
//
// Solidity: function majorFine(address who) returns()
func (_StakingFacet *StakingFacetTransactorSession) MajorFine(who common.Address) (*types.Transaction, error) {
	return _StakingFacet.Contract.MajorFine(&_StakingFacet.TransactOpts, who)
}

// MinorFine is a paid mutator transaction binding the contract method 0xd2a2c55c.
//
// Solidity: function minorFine(address who) returns()
func (_StakingFacet *StakingFacetTransactor) MinorFine(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "minorFine", who)
}

// MinorFine is a paid mutator transaction binding the contract method 0xd2a2c55c.
//
// Solidity: function minorFine(address who) returns()
func (_StakingFacet *StakingFacetSession) MinorFine(who common.Address) (*types.Transaction, error) {
	return _StakingFacet.Contract.MinorFine(&_StakingFacet.TransactOpts, who)
}

// MinorFine is a paid mutator transaction binding the contract method 0xd2a2c55c.
//
// Solidity: function minorFine(address who) returns()
func (_StakingFacet *StakingFacetTransactorSession) MinorFine(who common.Address) (*types.Transaction, error) {
	return _StakingFacet.Contract.MinorFine(&_StakingFacet.TransactOpts, who)
}

// RequestUnlockStake is a paid mutator transaction binding the contract method 0xaeaf8812.
//
// Solidity: function requestUnlockStake() returns()
func (_StakingFacet *StakingFacetTransactor) RequestUnlockStake(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "requestUnlockStake")
}

// RequestUnlockStake is a paid mutator transaction binding the contract method 0xaeaf8812.
//
// Solidity: function requestUnlockStake() returns()
func (_StakingFacet *StakingFacetSession) RequestUnlockStake() (*types.Transaction, error) {
	return _StakingFacet.Contract.RequestUnlockStake(&_StakingFacet.TransactOpts)
}

// RequestUnlockStake is a paid mutator transaction binding the contract method 0xaeaf8812.
//
// Solidity: function requestUnlockStake() returns()
func (_StakingFacet *StakingFacetTransactorSession) RequestUnlockStake() (*types.Transaction, error) {
	return _StakingFacet.Contract.RequestUnlockStake(&_StakingFacet.TransactOpts)
}

// RequestUnlockStakeFor is a paid mutator transaction binding the contract method 0x4fcf2b72.
//
// Solidity: function requestUnlockStakeFor(address who) returns()
func (_StakingFacet *StakingFacetTransactor) RequestUnlockStakeFor(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "requestUnlockStakeFor", who)
}

// RequestUnlockStakeFor is a paid mutator transaction binding the contract method 0x4fcf2b72.
//
// Solidity: function requestUnlockStakeFor(address who) returns()
func (_StakingFacet *StakingFacetSession) RequestUnlockStakeFor(who common.Address) (*types.Transaction, error) {
	return _StakingFacet.Contract.RequestUnlockStakeFor(&_StakingFacet.TransactOpts, who)
}

// RequestUnlockStakeFor is a paid mutator transaction binding the contract method 0x4fcf2b72.
//
// Solidity: function requestUnlockStakeFor(address who) returns()
func (_StakingFacet *StakingFacetTransactorSession) RequestUnlockStakeFor(who common.Address) (*types.Transaction, error) {
	return _StakingFacet.Contract.RequestUnlockStakeFor(&_StakingFacet.TransactOpts, who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_StakingFacet *StakingFacetTransactor) RevokeOperator(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "revokeOperator", who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_StakingFacet *StakingFacetSession) RevokeOperator(who common.Address) (*types.Transaction, error) {
	return _StakingFacet.Contract.RevokeOperator(&_StakingFacet.TransactOpts, who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_StakingFacet *StakingFacetTransactorSession) RevokeOperator(who common.Address) (*types.Transaction, error) {
	return _StakingFacet.Contract.RevokeOperator(&_StakingFacet.TransactOpts, who)
}

// SetEpochDelay is a paid mutator transaction binding the contract method 0xbd695a43.
//
// Solidity: function setEpochDelay(uint256 _epochDelay) returns()
func (_StakingFacet *StakingFacetTransactor) SetEpochDelay(opts *bind.TransactOpts, _epochDelay *big.Int) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "setEpochDelay", _epochDelay)
}

// SetEpochDelay is a paid mutator transaction binding the contract method 0xbd695a43.
//
// Solidity: function setEpochDelay(uint256 _epochDelay) returns()
func (_StakingFacet *StakingFacetSession) SetEpochDelay(_epochDelay *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.SetEpochDelay(&_StakingFacet.TransactOpts, _epochDelay)
}

// SetEpochDelay is a paid mutator transaction binding the contract method 0xbd695a43.
//
// Solidity: function setEpochDelay(uint256 _epochDelay) returns()
func (_StakingFacet *StakingFacetTransactorSession) SetEpochDelay(_epochDelay *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.SetEpochDelay(&_StakingFacet.TransactOpts, _epochDelay)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_StakingFacet *StakingFacetTransactor) SetGovernance(opts *bind.TransactOpts, governance_ common.Address) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "setGovernance", governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_StakingFacet *StakingFacetSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _StakingFacet.Contract.SetGovernance(&_StakingFacet.TransactOpts, governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_StakingFacet *StakingFacetTransactorSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _StakingFacet.Contract.SetGovernance(&_StakingFacet.TransactOpts, governance_)
}

// SetMajorStakeFine is a paid mutator transaction binding the contract method 0x78146c2f.
//
// Solidity: function setMajorStakeFine(uint256 _majorStakeFine) returns()
func (_StakingFacet *StakingFacetTransactor) SetMajorStakeFine(opts *bind.TransactOpts, _majorStakeFine *big.Int) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "setMajorStakeFine", _majorStakeFine)
}

// SetMajorStakeFine is a paid mutator transaction binding the contract method 0x78146c2f.
//
// Solidity: function setMajorStakeFine(uint256 _majorStakeFine) returns()
func (_StakingFacet *StakingFacetSession) SetMajorStakeFine(_majorStakeFine *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.SetMajorStakeFine(&_StakingFacet.TransactOpts, _majorStakeFine)
}

// SetMajorStakeFine is a paid mutator transaction binding the contract method 0x78146c2f.
//
// Solidity: function setMajorStakeFine(uint256 _majorStakeFine) returns()
func (_StakingFacet *StakingFacetTransactorSession) SetMajorStakeFine(_majorStakeFine *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.SetMajorStakeFine(&_StakingFacet.TransactOpts, _majorStakeFine)
}

// SetMinimumStake is a paid mutator transaction binding the contract method 0x233e9903.
//
// Solidity: function setMinimumStake(uint256 _minimumStake) returns()
func (_StakingFacet *StakingFacetTransactor) SetMinimumStake(opts *bind.TransactOpts, _minimumStake *big.Int) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "setMinimumStake", _minimumStake)
}

// SetMinimumStake is a paid mutator transaction binding the contract method 0x233e9903.
//
// Solidity: function setMinimumStake(uint256 _minimumStake) returns()
func (_StakingFacet *StakingFacetSession) SetMinimumStake(_minimumStake *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.SetMinimumStake(&_StakingFacet.TransactOpts, _minimumStake)
}

// SetMinimumStake is a paid mutator transaction binding the contract method 0x233e9903.
//
// Solidity: function setMinimumStake(uint256 _minimumStake) returns()
func (_StakingFacet *StakingFacetTransactorSession) SetMinimumStake(_minimumStake *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.SetMinimumStake(&_StakingFacet.TransactOpts, _minimumStake)
}

// SetMinorStakeFine is a paid mutator transaction binding the contract method 0x29693c5c.
//
// Solidity: function setMinorStakeFine(uint256 _minorStakeFine) returns()
func (_StakingFacet *StakingFacetTransactor) SetMinorStakeFine(opts *bind.TransactOpts, _minorStakeFine *big.Int) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "setMinorStakeFine", _minorStakeFine)
}

// SetMinorStakeFine is a paid mutator transaction binding the contract method 0x29693c5c.
//
// Solidity: function setMinorStakeFine(uint256 _minorStakeFine) returns()
func (_StakingFacet *StakingFacetSession) SetMinorStakeFine(_minorStakeFine *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.SetMinorStakeFine(&_StakingFacet.TransactOpts, _minorStakeFine)
}

// SetMinorStakeFine is a paid mutator transaction binding the contract method 0x29693c5c.
//
// Solidity: function setMinorStakeFine(uint256 _minorStakeFine) returns()
func (_StakingFacet *StakingFacetTransactorSession) SetMinorStakeFine(_minorStakeFine *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.SetMinorStakeFine(&_StakingFacet.TransactOpts, _minorStakeFine)
}

// SetRewardAmount is a paid mutator transaction binding the contract method 0xa8a65a78.
//
// Solidity: function setRewardAmount(uint256 _rewardAmount) returns()
func (_StakingFacet *StakingFacetTransactor) SetRewardAmount(opts *bind.TransactOpts, _rewardAmount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "setRewardAmount", _rewardAmount)
}

// SetRewardAmount is a paid mutator transaction binding the contract method 0xa8a65a78.
//
// Solidity: function setRewardAmount(uint256 _rewardAmount) returns()
func (_StakingFacet *StakingFacetSession) SetRewardAmount(_rewardAmount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.SetRewardAmount(&_StakingFacet.TransactOpts, _rewardAmount)
}

// SetRewardAmount is a paid mutator transaction binding the contract method 0xa8a65a78.
//
// Solidity: function setRewardAmount(uint256 _rewardAmount) returns()
func (_StakingFacet *StakingFacetTransactorSession) SetRewardAmount(_rewardAmount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.SetRewardAmount(&_StakingFacet.TransactOpts, _rewardAmount)
}

// SetRewardBonus is a paid mutator transaction binding the contract method 0xf95d80fa.
//
// Solidity: function setRewardBonus(uint256 _rewardBonus) returns()
func (_StakingFacet *StakingFacetTransactor) SetRewardBonus(opts *bind.TransactOpts, _rewardBonus *big.Int) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "setRewardBonus", _rewardBonus)
}

// SetRewardBonus is a paid mutator transaction binding the contract method 0xf95d80fa.
//
// Solidity: function setRewardBonus(uint256 _rewardBonus) returns()
func (_StakingFacet *StakingFacetSession) SetRewardBonus(_rewardBonus *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.SetRewardBonus(&_StakingFacet.TransactOpts, _rewardBonus)
}

// SetRewardBonus is a paid mutator transaction binding the contract method 0xf95d80fa.
//
// Solidity: function setRewardBonus(uint256 _rewardBonus) returns()
func (_StakingFacet *StakingFacetTransactorSession) SetRewardBonus(_rewardBonus *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.SetRewardBonus(&_StakingFacet.TransactOpts, _rewardBonus)
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_StakingFacet *StakingFacetTransactor) Start(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "start")
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_StakingFacet *StakingFacetSession) Start() (*types.Transaction, error) {
	return _StakingFacet.Contract.Start(&_StakingFacet.TransactOpts)
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_StakingFacet *StakingFacetTransactorSession) Start() (*types.Transaction, error) {
	return _StakingFacet.Contract.Start(&_StakingFacet.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_StakingFacet *StakingFacetTransactor) Stop(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "stop")
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_StakingFacet *StakingFacetSession) Stop() (*types.Transaction, error) {
	return _StakingFacet.Contract.Stop(&_StakingFacet.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_StakingFacet *StakingFacetTransactorSession) Stop() (*types.Transaction, error) {
	return _StakingFacet.Contract.Stop(&_StakingFacet.TransactOpts)
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_StakingFacet *StakingFacetTransactor) TakeOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "takeOwnership")
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_StakingFacet *StakingFacetSession) TakeOwnership() (*types.Transaction, error) {
	return _StakingFacet.Contract.TakeOwnership(&_StakingFacet.TransactOpts)
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_StakingFacet *StakingFacetTransactorSession) TakeOwnership() (*types.Transaction, error) {
	return _StakingFacet.Contract.TakeOwnership(&_StakingFacet.TransactOpts)
}

// UnlockReward is a paid mutator transaction binding the contract method 0xf1b7f4bf.
//
// Solidity: function unlockReward() returns(bool)
func (_StakingFacet *StakingFacetTransactor) UnlockReward(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "unlockReward")
}

// UnlockReward is a paid mutator transaction binding the contract method 0xf1b7f4bf.
//
// Solidity: function unlockReward() returns(bool)
func (_StakingFacet *StakingFacetSession) UnlockReward() (*types.Transaction, error) {
	return _StakingFacet.Contract.UnlockReward(&_StakingFacet.TransactOpts)
}

// UnlockReward is a paid mutator transaction binding the contract method 0xf1b7f4bf.
//
// Solidity: function unlockReward() returns(bool)
func (_StakingFacet *StakingFacetTransactorSession) UnlockReward() (*types.Transaction, error) {
	return _StakingFacet.Contract.UnlockReward(&_StakingFacet.TransactOpts)
}

// UnlockRewardFor is a paid mutator transaction binding the contract method 0x7f91bd69.
//
// Solidity: function unlockRewardFor(address who) returns(bool)
func (_StakingFacet *StakingFacetTransactor) UnlockRewardFor(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "unlockRewardFor", who)
}

// UnlockRewardFor is a paid mutator transaction binding the contract method 0x7f91bd69.
//
// Solidity: function unlockRewardFor(address who) returns(bool)
func (_StakingFacet *StakingFacetSession) UnlockRewardFor(who common.Address) (*types.Transaction, error) {
	return _StakingFacet.Contract.UnlockRewardFor(&_StakingFacet.TransactOpts, who)
}

// UnlockRewardFor is a paid mutator transaction binding the contract method 0x7f91bd69.
//
// Solidity: function unlockRewardFor(address who) returns(bool)
func (_StakingFacet *StakingFacetTransactorSession) UnlockRewardFor(who common.Address) (*types.Transaction, error) {
	return _StakingFacet.Contract.UnlockRewardFor(&_StakingFacet.TransactOpts, who)
}

// UnlockStake is a paid mutator transaction binding the contract method 0xecd8c06a.
//
// Solidity: function unlockStake(uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetTransactor) UnlockStake(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "unlockStake", amount)
}

// UnlockStake is a paid mutator transaction binding the contract method 0xecd8c06a.
//
// Solidity: function unlockStake(uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetSession) UnlockStake(amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.UnlockStake(&_StakingFacet.TransactOpts, amount)
}

// UnlockStake is a paid mutator transaction binding the contract method 0xecd8c06a.
//
// Solidity: function unlockStake(uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetTransactorSession) UnlockStake(amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.UnlockStake(&_StakingFacet.TransactOpts, amount)
}

// UnlockStakeFor is a paid mutator transaction binding the contract method 0xe29dda92.
//
// Solidity: function unlockStakeFor(address who, uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetTransactor) UnlockStakeFor(opts *bind.TransactOpts, who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "unlockStakeFor", who, amount)
}

// UnlockStakeFor is a paid mutator transaction binding the contract method 0xe29dda92.
//
// Solidity: function unlockStakeFor(address who, uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetSession) UnlockStakeFor(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.UnlockStakeFor(&_StakingFacet.TransactOpts, who, amount)
}

// UnlockStakeFor is a paid mutator transaction binding the contract method 0xe29dda92.
//
// Solidity: function unlockStakeFor(address who, uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetTransactorSession) UnlockStakeFor(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.UnlockStakeFor(&_StakingFacet.TransactOpts, who, amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetTransactor) Withdraw(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "withdraw", amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetSession) Withdraw(amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.Withdraw(&_StakingFacet.TransactOpts, amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetTransactorSession) Withdraw(amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.Withdraw(&_StakingFacet.TransactOpts, amount)
}

// WithdrawFor is a paid mutator transaction binding the contract method 0xdb518db2.
//
// Solidity: function withdrawFor(address who, uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetTransactor) WithdrawFor(opts *bind.TransactOpts, who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "withdrawFor", who, amount)
}

// WithdrawFor is a paid mutator transaction binding the contract method 0xdb518db2.
//
// Solidity: function withdrawFor(address who, uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetSession) WithdrawFor(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.WithdrawFor(&_StakingFacet.TransactOpts, who, amount)
}

// WithdrawFor is a paid mutator transaction binding the contract method 0xdb518db2.
//
// Solidity: function withdrawFor(address who, uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetTransactorSession) WithdrawFor(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.WithdrawFor(&_StakingFacet.TransactOpts, who, amount)
}

// WithdrawReward is a paid mutator transaction binding the contract method 0x523a3f08.
//
// Solidity: function withdrawReward(uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetTransactor) WithdrawReward(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "withdrawReward", amount)
}

// WithdrawReward is a paid mutator transaction binding the contract method 0x523a3f08.
//
// Solidity: function withdrawReward(uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetSession) WithdrawReward(amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.WithdrawReward(&_StakingFacet.TransactOpts, amount)
}

// WithdrawReward is a paid mutator transaction binding the contract method 0x523a3f08.
//
// Solidity: function withdrawReward(uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetTransactorSession) WithdrawReward(amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.WithdrawReward(&_StakingFacet.TransactOpts, amount)
}

// StakingLibraryMetaData contains all meta data concerning the StakingLibrary contract.
var StakingLibraryMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burnt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"why\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Fined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LockedReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LockedStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"RequestedUnlockStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnlockedReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnlockedStake\",\"type\":\"event\"}]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220000a0ed9293750d4812187c4ed4a99dbf93e0c6d17cd39a72f6443a2f98fa11d64736f6c634300080b0033",
}

// StakingLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use StakingLibraryMetaData.ABI instead.
var StakingLibraryABI = StakingLibraryMetaData.ABI

// StakingLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StakingLibraryMetaData.Bin instead.
var StakingLibraryBin = StakingLibraryMetaData.Bin

// DeployStakingLibrary deploys a new Ethereum contract, binding an instance of StakingLibrary to it.
func DeployStakingLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *StakingLibrary, error) {
	parsed, err := StakingLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StakingLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &StakingLibrary{StakingLibraryCaller: StakingLibraryCaller{contract: contract}, StakingLibraryTransactor: StakingLibraryTransactor{contract: contract}, StakingLibraryFilterer: StakingLibraryFilterer{contract: contract}}, nil
}

// StakingLibrary is an auto generated Go binding around an Ethereum contract.
type StakingLibrary struct {
	StakingLibraryCaller     // Read-only binding to the contract
	StakingLibraryTransactor // Write-only binding to the contract
	StakingLibraryFilterer   // Log filterer for contract events
}

// StakingLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type StakingLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StakingLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StakingLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StakingLibrarySession struct {
	Contract     *StakingLibrary   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StakingLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StakingLibraryCallerSession struct {
	Contract *StakingLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// StakingLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StakingLibraryTransactorSession struct {
	Contract     *StakingLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// StakingLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type StakingLibraryRaw struct {
	Contract *StakingLibrary // Generic contract binding to access the raw methods on
}

// StakingLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StakingLibraryCallerRaw struct {
	Contract *StakingLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// StakingLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StakingLibraryTransactorRaw struct {
	Contract *StakingLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStakingLibrary creates a new instance of StakingLibrary, bound to a specific deployed contract.
func NewStakingLibrary(address common.Address, backend bind.ContractBackend) (*StakingLibrary, error) {
	contract, err := bindStakingLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &StakingLibrary{StakingLibraryCaller: StakingLibraryCaller{contract: contract}, StakingLibraryTransactor: StakingLibraryTransactor{contract: contract}, StakingLibraryFilterer: StakingLibraryFilterer{contract: contract}}, nil
}

// NewStakingLibraryCaller creates a new read-only instance of StakingLibrary, bound to a specific deployed contract.
func NewStakingLibraryCaller(address common.Address, caller bind.ContractCaller) (*StakingLibraryCaller, error) {
	contract, err := bindStakingLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StakingLibraryCaller{contract: contract}, nil
}

// NewStakingLibraryTransactor creates a new write-only instance of StakingLibrary, bound to a specific deployed contract.
func NewStakingLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*StakingLibraryTransactor, error) {
	contract, err := bindStakingLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StakingLibraryTransactor{contract: contract}, nil
}

// NewStakingLibraryFilterer creates a new log filterer instance of StakingLibrary, bound to a specific deployed contract.
func NewStakingLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*StakingLibraryFilterer, error) {
	contract, err := bindStakingLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StakingLibraryFilterer{contract: contract}, nil
}

// bindStakingLibrary binds a generic wrapper to an already deployed contract.
func bindStakingLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StakingLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StakingLibrary *StakingLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StakingLibrary.Contract.StakingLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StakingLibrary *StakingLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakingLibrary.Contract.StakingLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StakingLibrary *StakingLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StakingLibrary.Contract.StakingLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StakingLibrary *StakingLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StakingLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StakingLibrary *StakingLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakingLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StakingLibrary *StakingLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StakingLibrary.Contract.contract.Transact(opts, method, params...)
}

// StakingLibraryBurntIterator is returned from FilterBurnt and is used to iterate over the raw logs and unpacked data for Burnt events raised by the StakingLibrary contract.
type StakingLibraryBurntIterator struct {
	Event *StakingLibraryBurnt // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingLibraryBurntIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingLibraryBurnt)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingLibraryBurnt)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingLibraryBurntIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingLibraryBurntIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingLibraryBurnt represents a Burnt event raised by the StakingLibrary contract.
type StakingLibraryBurnt struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBurnt is a free log retrieval operation binding the contract event 0x919f7e2092ffcc9d09f599be18d8152860b0c054df788a33bc549cdd9d0f15b1.
//
// Solidity: event Burnt(address indexed who, uint256 amount)
func (_StakingLibrary *StakingLibraryFilterer) FilterBurnt(opts *bind.FilterOpts, who []common.Address) (*StakingLibraryBurntIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingLibrary.contract.FilterLogs(opts, "Burnt", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingLibraryBurntIterator{contract: _StakingLibrary.contract, event: "Burnt", logs: logs, sub: sub}, nil
}

// WatchBurnt is a free log subscription operation binding the contract event 0x919f7e2092ffcc9d09f599be18d8152860b0c054df788a33bc549cdd9d0f15b1.
//
// Solidity: event Burnt(address indexed who, uint256 amount)
func (_StakingLibrary *StakingLibraryFilterer) WatchBurnt(opts *bind.WatchOpts, sink chan<- *StakingLibraryBurnt, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingLibrary.contract.WatchLogs(opts, "Burnt", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingLibraryBurnt)
				if err := _StakingLibrary.contract.UnpackLog(event, "Burnt", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBurnt is a log parse operation binding the contract event 0x919f7e2092ffcc9d09f599be18d8152860b0c054df788a33bc549cdd9d0f15b1.
//
// Solidity: event Burnt(address indexed who, uint256 amount)
func (_StakingLibrary *StakingLibraryFilterer) ParseBurnt(log types.Log) (*StakingLibraryBurnt, error) {
	event := new(StakingLibraryBurnt)
	if err := _StakingLibrary.contract.UnpackLog(event, "Burnt", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingLibraryFinedIterator is returned from FilterFined and is used to iterate over the raw logs and unpacked data for Fined events raised by the StakingLibrary contract.
type StakingLibraryFinedIterator struct {
	Event *StakingLibraryFined // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingLibraryFinedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingLibraryFined)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingLibraryFined)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingLibraryFinedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingLibraryFinedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingLibraryFined represents a Fined event raised by the StakingLibrary contract.
type StakingLibraryFined struct {
	Who    common.Address
	Why    [32]byte
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterFined is a free log retrieval operation binding the contract event 0xf1254bf6cf04a475bd832353c2ccfc5e0d89e7b9c0f05a153ff897b6121b91e9.
//
// Solidity: event Fined(address indexed who, bytes32 why, uint256 amount)
func (_StakingLibrary *StakingLibraryFilterer) FilterFined(opts *bind.FilterOpts, who []common.Address) (*StakingLibraryFinedIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingLibrary.contract.FilterLogs(opts, "Fined", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingLibraryFinedIterator{contract: _StakingLibrary.contract, event: "Fined", logs: logs, sub: sub}, nil
}

// WatchFined is a free log subscription operation binding the contract event 0xf1254bf6cf04a475bd832353c2ccfc5e0d89e7b9c0f05a153ff897b6121b91e9.
//
// Solidity: event Fined(address indexed who, bytes32 why, uint256 amount)
func (_StakingLibrary *StakingLibraryFilterer) WatchFined(opts *bind.WatchOpts, sink chan<- *StakingLibraryFined, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingLibrary.contract.WatchLogs(opts, "Fined", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingLibraryFined)
				if err := _StakingLibrary.contract.UnpackLog(event, "Fined", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFined is a log parse operation binding the contract event 0xf1254bf6cf04a475bd832353c2ccfc5e0d89e7b9c0f05a153ff897b6121b91e9.
//
// Solidity: event Fined(address indexed who, bytes32 why, uint256 amount)
func (_StakingLibrary *StakingLibraryFilterer) ParseFined(log types.Log) (*StakingLibraryFined, error) {
	event := new(StakingLibraryFined)
	if err := _StakingLibrary.contract.UnpackLog(event, "Fined", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingLibraryLockedRewardIterator is returned from FilterLockedReward and is used to iterate over the raw logs and unpacked data for LockedReward events raised by the StakingLibrary contract.
type StakingLibraryLockedRewardIterator struct {
	Event *StakingLibraryLockedReward // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingLibraryLockedRewardIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingLibraryLockedReward)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingLibraryLockedReward)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingLibraryLockedRewardIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingLibraryLockedRewardIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingLibraryLockedReward represents a LockedReward event raised by the StakingLibrary contract.
type StakingLibraryLockedReward struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterLockedReward is a free log retrieval operation binding the contract event 0x28dc9c0ffa672df041cad84edbee41508284600c9394bda0f8586d012c5e0915.
//
// Solidity: event LockedReward(address indexed who, uint256 amount)
func (_StakingLibrary *StakingLibraryFilterer) FilterLockedReward(opts *bind.FilterOpts, who []common.Address) (*StakingLibraryLockedRewardIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingLibrary.contract.FilterLogs(opts, "LockedReward", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingLibraryLockedRewardIterator{contract: _StakingLibrary.contract, event: "LockedReward", logs: logs, sub: sub}, nil
}

// WatchLockedReward is a free log subscription operation binding the contract event 0x28dc9c0ffa672df041cad84edbee41508284600c9394bda0f8586d012c5e0915.
//
// Solidity: event LockedReward(address indexed who, uint256 amount)
func (_StakingLibrary *StakingLibraryFilterer) WatchLockedReward(opts *bind.WatchOpts, sink chan<- *StakingLibraryLockedReward, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingLibrary.contract.WatchLogs(opts, "LockedReward", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingLibraryLockedReward)
				if err := _StakingLibrary.contract.UnpackLog(event, "LockedReward", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLockedReward is a log parse operation binding the contract event 0x28dc9c0ffa672df041cad84edbee41508284600c9394bda0f8586d012c5e0915.
//
// Solidity: event LockedReward(address indexed who, uint256 amount)
func (_StakingLibrary *StakingLibraryFilterer) ParseLockedReward(log types.Log) (*StakingLibraryLockedReward, error) {
	event := new(StakingLibraryLockedReward)
	if err := _StakingLibrary.contract.UnpackLog(event, "LockedReward", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingLibraryLockedStakeIterator is returned from FilterLockedStake and is used to iterate over the raw logs and unpacked data for LockedStake events raised by the StakingLibrary contract.
type StakingLibraryLockedStakeIterator struct {
	Event *StakingLibraryLockedStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingLibraryLockedStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingLibraryLockedStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingLibraryLockedStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingLibraryLockedStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingLibraryLockedStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingLibraryLockedStake represents a LockedStake event raised by the StakingLibrary contract.
type StakingLibraryLockedStake struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterLockedStake is a free log retrieval operation binding the contract event 0x1de2f07b0a1c69916a8b25b889051644192307ea08444a2e11f8654d1db3ab0c.
//
// Solidity: event LockedStake(address indexed who, uint256 amount)
func (_StakingLibrary *StakingLibraryFilterer) FilterLockedStake(opts *bind.FilterOpts, who []common.Address) (*StakingLibraryLockedStakeIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingLibrary.contract.FilterLogs(opts, "LockedStake", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingLibraryLockedStakeIterator{contract: _StakingLibrary.contract, event: "LockedStake", logs: logs, sub: sub}, nil
}

// WatchLockedStake is a free log subscription operation binding the contract event 0x1de2f07b0a1c69916a8b25b889051644192307ea08444a2e11f8654d1db3ab0c.
//
// Solidity: event LockedStake(address indexed who, uint256 amount)
func (_StakingLibrary *StakingLibraryFilterer) WatchLockedStake(opts *bind.WatchOpts, sink chan<- *StakingLibraryLockedStake, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingLibrary.contract.WatchLogs(opts, "LockedStake", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingLibraryLockedStake)
				if err := _StakingLibrary.contract.UnpackLog(event, "LockedStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLockedStake is a log parse operation binding the contract event 0x1de2f07b0a1c69916a8b25b889051644192307ea08444a2e11f8654d1db3ab0c.
//
// Solidity: event LockedStake(address indexed who, uint256 amount)
func (_StakingLibrary *StakingLibraryFilterer) ParseLockedStake(log types.Log) (*StakingLibraryLockedStake, error) {
	event := new(StakingLibraryLockedStake)
	if err := _StakingLibrary.contract.UnpackLog(event, "LockedStake", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingLibraryRequestedUnlockStakeIterator is returned from FilterRequestedUnlockStake and is used to iterate over the raw logs and unpacked data for RequestedUnlockStake events raised by the StakingLibrary contract.
type StakingLibraryRequestedUnlockStakeIterator struct {
	Event *StakingLibraryRequestedUnlockStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingLibraryRequestedUnlockStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingLibraryRequestedUnlockStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingLibraryRequestedUnlockStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingLibraryRequestedUnlockStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingLibraryRequestedUnlockStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingLibraryRequestedUnlockStake represents a RequestedUnlockStake event raised by the StakingLibrary contract.
type StakingLibraryRequestedUnlockStake struct {
	Who common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterRequestedUnlockStake is a free log retrieval operation binding the contract event 0x1fde0d8a6620647f5c7b5632a87b23101ba553c9b474caf1134fb24d92bf6ddc.
//
// Solidity: event RequestedUnlockStake(address indexed who)
func (_StakingLibrary *StakingLibraryFilterer) FilterRequestedUnlockStake(opts *bind.FilterOpts, who []common.Address) (*StakingLibraryRequestedUnlockStakeIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingLibrary.contract.FilterLogs(opts, "RequestedUnlockStake", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingLibraryRequestedUnlockStakeIterator{contract: _StakingLibrary.contract, event: "RequestedUnlockStake", logs: logs, sub: sub}, nil
}

// WatchRequestedUnlockStake is a free log subscription operation binding the contract event 0x1fde0d8a6620647f5c7b5632a87b23101ba553c9b474caf1134fb24d92bf6ddc.
//
// Solidity: event RequestedUnlockStake(address indexed who)
func (_StakingLibrary *StakingLibraryFilterer) WatchRequestedUnlockStake(opts *bind.WatchOpts, sink chan<- *StakingLibraryRequestedUnlockStake, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingLibrary.contract.WatchLogs(opts, "RequestedUnlockStake", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingLibraryRequestedUnlockStake)
				if err := _StakingLibrary.contract.UnpackLog(event, "RequestedUnlockStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRequestedUnlockStake is a log parse operation binding the contract event 0x1fde0d8a6620647f5c7b5632a87b23101ba553c9b474caf1134fb24d92bf6ddc.
//
// Solidity: event RequestedUnlockStake(address indexed who)
func (_StakingLibrary *StakingLibraryFilterer) ParseRequestedUnlockStake(log types.Log) (*StakingLibraryRequestedUnlockStake, error) {
	event := new(StakingLibraryRequestedUnlockStake)
	if err := _StakingLibrary.contract.UnpackLog(event, "RequestedUnlockStake", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingLibraryUnlockedRewardIterator is returned from FilterUnlockedReward and is used to iterate over the raw logs and unpacked data for UnlockedReward events raised by the StakingLibrary contract.
type StakingLibraryUnlockedRewardIterator struct {
	Event *StakingLibraryUnlockedReward // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingLibraryUnlockedRewardIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingLibraryUnlockedReward)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingLibraryUnlockedReward)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingLibraryUnlockedRewardIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingLibraryUnlockedRewardIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingLibraryUnlockedReward represents a UnlockedReward event raised by the StakingLibrary contract.
type StakingLibraryUnlockedReward struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterUnlockedReward is a free log retrieval operation binding the contract event 0x496a1c9a1a9ac29d87ecb4e563683ebd0ee80798869f36c86175059eb5dc7304.
//
// Solidity: event UnlockedReward(address indexed who, uint256 amount)
func (_StakingLibrary *StakingLibraryFilterer) FilterUnlockedReward(opts *bind.FilterOpts, who []common.Address) (*StakingLibraryUnlockedRewardIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingLibrary.contract.FilterLogs(opts, "UnlockedReward", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingLibraryUnlockedRewardIterator{contract: _StakingLibrary.contract, event: "UnlockedReward", logs: logs, sub: sub}, nil
}

// WatchUnlockedReward is a free log subscription operation binding the contract event 0x496a1c9a1a9ac29d87ecb4e563683ebd0ee80798869f36c86175059eb5dc7304.
//
// Solidity: event UnlockedReward(address indexed who, uint256 amount)
func (_StakingLibrary *StakingLibraryFilterer) WatchUnlockedReward(opts *bind.WatchOpts, sink chan<- *StakingLibraryUnlockedReward, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingLibrary.contract.WatchLogs(opts, "UnlockedReward", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingLibraryUnlockedReward)
				if err := _StakingLibrary.contract.UnpackLog(event, "UnlockedReward", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnlockedReward is a log parse operation binding the contract event 0x496a1c9a1a9ac29d87ecb4e563683ebd0ee80798869f36c86175059eb5dc7304.
//
// Solidity: event UnlockedReward(address indexed who, uint256 amount)
func (_StakingLibrary *StakingLibraryFilterer) ParseUnlockedReward(log types.Log) (*StakingLibraryUnlockedReward, error) {
	event := new(StakingLibraryUnlockedReward)
	if err := _StakingLibrary.contract.UnpackLog(event, "UnlockedReward", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingLibraryUnlockedStakeIterator is returned from FilterUnlockedStake and is used to iterate over the raw logs and unpacked data for UnlockedStake events raised by the StakingLibrary contract.
type StakingLibraryUnlockedStakeIterator struct {
	Event *StakingLibraryUnlockedStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingLibraryUnlockedStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingLibraryUnlockedStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingLibraryUnlockedStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingLibraryUnlockedStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingLibraryUnlockedStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingLibraryUnlockedStake represents a UnlockedStake event raised by the StakingLibrary contract.
type StakingLibraryUnlockedStake struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterUnlockedStake is a free log retrieval operation binding the contract event 0x252a696583e35c4d61332829d3bb2a8236f2500140258f089951799c9b999a9c.
//
// Solidity: event UnlockedStake(address indexed who, uint256 amount)
func (_StakingLibrary *StakingLibraryFilterer) FilterUnlockedStake(opts *bind.FilterOpts, who []common.Address) (*StakingLibraryUnlockedStakeIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingLibrary.contract.FilterLogs(opts, "UnlockedStake", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingLibraryUnlockedStakeIterator{contract: _StakingLibrary.contract, event: "UnlockedStake", logs: logs, sub: sub}, nil
}

// WatchUnlockedStake is a free log subscription operation binding the contract event 0x252a696583e35c4d61332829d3bb2a8236f2500140258f089951799c9b999a9c.
//
// Solidity: event UnlockedStake(address indexed who, uint256 amount)
func (_StakingLibrary *StakingLibraryFilterer) WatchUnlockedStake(opts *bind.WatchOpts, sink chan<- *StakingLibraryUnlockedStake, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingLibrary.contract.WatchLogs(opts, "UnlockedStake", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingLibraryUnlockedStake)
				if err := _StakingLibrary.contract.UnpackLog(event, "UnlockedStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnlockedStake is a log parse operation binding the contract event 0x252a696583e35c4d61332829d3bb2a8236f2500140258f089951799c9b999a9c.
//
// Solidity: event UnlockedStake(address indexed who, uint256 amount)
func (_StakingLibrary *StakingLibraryFilterer) ParseUnlockedStake(log types.Log) (*StakingLibraryUnlockedStake, error) {
	event := new(StakingLibraryUnlockedStake)
	if err := _StakingLibrary.contract.UnpackLog(event, "UnlockedStake", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StopLibraryMetaData contains all meta data concerning the StopLibrary contract.
var StopLibraryMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c5b874248d7ef0e6567b03623d529520408874d272f34efa7451fc5cfc25541964736f6c634300080b0033",
}

// StopLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use StopLibraryMetaData.ABI instead.
var StopLibraryABI = StopLibraryMetaData.ABI

// StopLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StopLibraryMetaData.Bin instead.
var StopLibraryBin = StopLibraryMetaData.Bin

// DeployStopLibrary deploys a new Ethereum contract, binding an instance of StopLibrary to it.
func DeployStopLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *StopLibrary, error) {
	parsed, err := StopLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StopLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &StopLibrary{StopLibraryCaller: StopLibraryCaller{contract: contract}, StopLibraryTransactor: StopLibraryTransactor{contract: contract}, StopLibraryFilterer: StopLibraryFilterer{contract: contract}}, nil
}

// StopLibrary is an auto generated Go binding around an Ethereum contract.
type StopLibrary struct {
	StopLibraryCaller     // Read-only binding to the contract
	StopLibraryTransactor // Write-only binding to the contract
	StopLibraryFilterer   // Log filterer for contract events
}

// StopLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type StopLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StopLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StopLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StopLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StopLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StopLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StopLibrarySession struct {
	Contract     *StopLibrary      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StopLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StopLibraryCallerSession struct {
	Contract *StopLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// StopLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StopLibraryTransactorSession struct {
	Contract     *StopLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// StopLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type StopLibraryRaw struct {
	Contract *StopLibrary // Generic contract binding to access the raw methods on
}

// StopLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StopLibraryCallerRaw struct {
	Contract *StopLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// StopLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StopLibraryTransactorRaw struct {
	Contract *StopLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStopLibrary creates a new instance of StopLibrary, bound to a specific deployed contract.
func NewStopLibrary(address common.Address, backend bind.ContractBackend) (*StopLibrary, error) {
	contract, err := bindStopLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &StopLibrary{StopLibraryCaller: StopLibraryCaller{contract: contract}, StopLibraryTransactor: StopLibraryTransactor{contract: contract}, StopLibraryFilterer: StopLibraryFilterer{contract: contract}}, nil
}

// NewStopLibraryCaller creates a new read-only instance of StopLibrary, bound to a specific deployed contract.
func NewStopLibraryCaller(address common.Address, caller bind.ContractCaller) (*StopLibraryCaller, error) {
	contract, err := bindStopLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StopLibraryCaller{contract: contract}, nil
}

// NewStopLibraryTransactor creates a new write-only instance of StopLibrary, bound to a specific deployed contract.
func NewStopLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*StopLibraryTransactor, error) {
	contract, err := bindStopLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StopLibraryTransactor{contract: contract}, nil
}

// NewStopLibraryFilterer creates a new log filterer instance of StopLibrary, bound to a specific deployed contract.
func NewStopLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*StopLibraryFilterer, error) {
	contract, err := bindStopLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StopLibraryFilterer{contract: contract}, nil
}

// bindStopLibrary binds a generic wrapper to an already deployed contract.
func bindStopLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StopLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StopLibrary *StopLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StopLibrary.Contract.StopLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StopLibrary *StopLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StopLibrary.Contract.StopLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StopLibrary *StopLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StopLibrary.Contract.StopLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StopLibrary *StopLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StopLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StopLibrary *StopLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StopLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StopLibrary *StopLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StopLibrary.Contract.contract.Transact(opts, method, params...)
}

// StoppableMetaData contains all meta data concerning the Stoppable contract.
var StoppableMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"grantOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governance_\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50600061002561003e60201b61084b1760201c565b60010180546001600160a01b0319163317905550610062565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90565b6108e2806100716000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063be9a65551161005b578063be9a655514610082578063dc978059146100a7578063e348da13146100ba578063fad8b32a146100cd57600080fd5b806307da68f514610082578063605361721461008c578063ab033ea914610094575b600080fd5b61008a6100e0565b005b61008a6101a9565b61008a6100a236600461086f565b6102ce565b61008a6100b536600461086f565b61041d565b61008a6100c836600461086f565b61056c565b61008a6100db36600461086f565b6106dd565b3360009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a602081905260409091205460ff166101a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160448201527f6c6c6f776564000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b50565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520c547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff163314610291576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f41636365737320436f6e74726f6c3a206f776e657273686970206e6f7420677260448201527f616e746564000000000000000000000000000000000000000000000000000000606482015260840161019d565b6002810180547fffffffffffffffffffffffff00000000000000000000000000000000000000009081169091556001909101805490911633179055565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff1633146103b6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e657220697320616c60448201527f6c6f776564000000000000000000000000000000000000000000000000000000606482015260840161019d565b507f31434318735a8e6385da596be365952169e52986860b974818986b522d23520d80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff163314610505576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e657220697320616c60448201527f6c6f776564000000000000000000000000000000000000000000000000000000606482015260840161019d565b507f31434318735a8e6385da596be365952169e52986860b974818986b522d23520c80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff163314806105e257503360009081526020829052604090205460ff165b61066e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e6572206f72206f7060448201527f657261746f7220616c6c6f776564000000000000000000000000000000000000606482015260840161019d565b5073ffffffffffffffffffffffffffffffffffffffff1660009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff1633148061075357503360009081526020829052604090205460ff165b6107df576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e6572206f72206f7060448201527f657261746f7220616c6c6f776564000000000000000000000000000000000000606482015260840161019d565b5073ffffffffffffffffffffffffffffffffffffffff1660009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90565b60006020828403121561088157600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146108a557600080fd5b939250505056fea264697066735822122004d6bd67a2e841f1b79b873bd4fc5e5fd006c720f4a1634dea13829df52af6fb64736f6c634300080b0033",
}

// StoppableABI is the input ABI used to generate the binding from.
// Deprecated: Use StoppableMetaData.ABI instead.
var StoppableABI = StoppableMetaData.ABI

// StoppableBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StoppableMetaData.Bin instead.
var StoppableBin = StoppableMetaData.Bin

// DeployStoppable deploys a new Ethereum contract, binding an instance of Stoppable to it.
func DeployStoppable(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Stoppable, error) {
	parsed, err := StoppableMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StoppableBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Stoppable{StoppableCaller: StoppableCaller{contract: contract}, StoppableTransactor: StoppableTransactor{contract: contract}, StoppableFilterer: StoppableFilterer{contract: contract}}, nil
}

// Stoppable is an auto generated Go binding around an Ethereum contract.
type Stoppable struct {
	StoppableCaller     // Read-only binding to the contract
	StoppableTransactor // Write-only binding to the contract
	StoppableFilterer   // Log filterer for contract events
}

// StoppableCaller is an auto generated read-only Go binding around an Ethereum contract.
type StoppableCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StoppableTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StoppableTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StoppableFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StoppableFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StoppableSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StoppableSession struct {
	Contract     *Stoppable        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StoppableCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StoppableCallerSession struct {
	Contract *StoppableCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// StoppableTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StoppableTransactorSession struct {
	Contract     *StoppableTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// StoppableRaw is an auto generated low-level Go binding around an Ethereum contract.
type StoppableRaw struct {
	Contract *Stoppable // Generic contract binding to access the raw methods on
}

// StoppableCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StoppableCallerRaw struct {
	Contract *StoppableCaller // Generic read-only contract binding to access the raw methods on
}

// StoppableTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StoppableTransactorRaw struct {
	Contract *StoppableTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStoppable creates a new instance of Stoppable, bound to a specific deployed contract.
func NewStoppable(address common.Address, backend bind.ContractBackend) (*Stoppable, error) {
	contract, err := bindStoppable(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Stoppable{StoppableCaller: StoppableCaller{contract: contract}, StoppableTransactor: StoppableTransactor{contract: contract}, StoppableFilterer: StoppableFilterer{contract: contract}}, nil
}

// NewStoppableCaller creates a new read-only instance of Stoppable, bound to a specific deployed contract.
func NewStoppableCaller(address common.Address, caller bind.ContractCaller) (*StoppableCaller, error) {
	contract, err := bindStoppable(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StoppableCaller{contract: contract}, nil
}

// NewStoppableTransactor creates a new write-only instance of Stoppable, bound to a specific deployed contract.
func NewStoppableTransactor(address common.Address, transactor bind.ContractTransactor) (*StoppableTransactor, error) {
	contract, err := bindStoppable(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StoppableTransactor{contract: contract}, nil
}

// NewStoppableFilterer creates a new log filterer instance of Stoppable, bound to a specific deployed contract.
func NewStoppableFilterer(address common.Address, filterer bind.ContractFilterer) (*StoppableFilterer, error) {
	contract, err := bindStoppable(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StoppableFilterer{contract: contract}, nil
}

// bindStoppable binds a generic wrapper to an already deployed contract.
func bindStoppable(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StoppableABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Stoppable *StoppableRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Stoppable.Contract.StoppableCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Stoppable *StoppableRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Stoppable.Contract.StoppableTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Stoppable *StoppableRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Stoppable.Contract.StoppableTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Stoppable *StoppableCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Stoppable.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Stoppable *StoppableTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Stoppable.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Stoppable *StoppableTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Stoppable.Contract.contract.Transact(opts, method, params...)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_Stoppable *StoppableTransactor) GrantOperator(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _Stoppable.contract.Transact(opts, "grantOperator", who)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_Stoppable *StoppableSession) GrantOperator(who common.Address) (*types.Transaction, error) {
	return _Stoppable.Contract.GrantOperator(&_Stoppable.TransactOpts, who)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_Stoppable *StoppableTransactorSession) GrantOperator(who common.Address) (*types.Transaction, error) {
	return _Stoppable.Contract.GrantOperator(&_Stoppable.TransactOpts, who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_Stoppable *StoppableTransactor) GrantOwner(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _Stoppable.contract.Transact(opts, "grantOwner", who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_Stoppable *StoppableSession) GrantOwner(who common.Address) (*types.Transaction, error) {
	return _Stoppable.Contract.GrantOwner(&_Stoppable.TransactOpts, who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_Stoppable *StoppableTransactorSession) GrantOwner(who common.Address) (*types.Transaction, error) {
	return _Stoppable.Contract.GrantOwner(&_Stoppable.TransactOpts, who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_Stoppable *StoppableTransactor) RevokeOperator(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _Stoppable.contract.Transact(opts, "revokeOperator", who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_Stoppable *StoppableSession) RevokeOperator(who common.Address) (*types.Transaction, error) {
	return _Stoppable.Contract.RevokeOperator(&_Stoppable.TransactOpts, who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_Stoppable *StoppableTransactorSession) RevokeOperator(who common.Address) (*types.Transaction, error) {
	return _Stoppable.Contract.RevokeOperator(&_Stoppable.TransactOpts, who)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_Stoppable *StoppableTransactor) SetGovernance(opts *bind.TransactOpts, governance_ common.Address) (*types.Transaction, error) {
	return _Stoppable.contract.Transact(opts, "setGovernance", governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_Stoppable *StoppableSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _Stoppable.Contract.SetGovernance(&_Stoppable.TransactOpts, governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_Stoppable *StoppableTransactorSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _Stoppable.Contract.SetGovernance(&_Stoppable.TransactOpts, governance_)
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_Stoppable *StoppableTransactor) Start(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Stoppable.contract.Transact(opts, "start")
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_Stoppable *StoppableSession) Start() (*types.Transaction, error) {
	return _Stoppable.Contract.Start(&_Stoppable.TransactOpts)
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_Stoppable *StoppableTransactorSession) Start() (*types.Transaction, error) {
	return _Stoppable.Contract.Start(&_Stoppable.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_Stoppable *StoppableTransactor) Stop(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Stoppable.contract.Transact(opts, "stop")
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_Stoppable *StoppableSession) Stop() (*types.Transaction, error) {
	return _Stoppable.Contract.Stop(&_Stoppable.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_Stoppable *StoppableTransactorSession) Stop() (*types.Transaction, error) {
	return _Stoppable.Contract.Stop(&_Stoppable.TransactOpts)
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_Stoppable *StoppableTransactor) TakeOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Stoppable.contract.Transact(opts, "takeOwnership")
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_Stoppable *StoppableSession) TakeOwnership() (*types.Transaction, error) {
	return _Stoppable.Contract.TakeOwnership(&_Stoppable.TransactOpts)
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_Stoppable *StoppableTransactorSession) TakeOwnership() (*types.Transaction, error) {
	return _Stoppable.Contract.TakeOwnership(&_Stoppable.TransactOpts)
}

// TXInPreImageParserLibraryMetaData contains all meta data concerning the TXInPreImageParserLibrary contract.
var TXInPreImageParserLibraryMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220be5615d9044860a4420115a9ff882623a82cb9ba5d084fdc3df589db5942460664736f6c634300080b0033",
}

// TXInPreImageParserLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use TXInPreImageParserLibraryMetaData.ABI instead.
var TXInPreImageParserLibraryABI = TXInPreImageParserLibraryMetaData.ABI

// TXInPreImageParserLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TXInPreImageParserLibraryMetaData.Bin instead.
var TXInPreImageParserLibraryBin = TXInPreImageParserLibraryMetaData.Bin

// DeployTXInPreImageParserLibrary deploys a new Ethereum contract, binding an instance of TXInPreImageParserLibrary to it.
func DeployTXInPreImageParserLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *TXInPreImageParserLibrary, error) {
	parsed, err := TXInPreImageParserLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TXInPreImageParserLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TXInPreImageParserLibrary{TXInPreImageParserLibraryCaller: TXInPreImageParserLibraryCaller{contract: contract}, TXInPreImageParserLibraryTransactor: TXInPreImageParserLibraryTransactor{contract: contract}, TXInPreImageParserLibraryFilterer: TXInPreImageParserLibraryFilterer{contract: contract}}, nil
}

// TXInPreImageParserLibrary is an auto generated Go binding around an Ethereum contract.
type TXInPreImageParserLibrary struct {
	TXInPreImageParserLibraryCaller     // Read-only binding to the contract
	TXInPreImageParserLibraryTransactor // Write-only binding to the contract
	TXInPreImageParserLibraryFilterer   // Log filterer for contract events
}

// TXInPreImageParserLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type TXInPreImageParserLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TXInPreImageParserLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TXInPreImageParserLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TXInPreImageParserLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TXInPreImageParserLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TXInPreImageParserLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TXInPreImageParserLibrarySession struct {
	Contract     *TXInPreImageParserLibrary // Generic contract binding to set the session for
	CallOpts     bind.CallOpts              // Call options to use throughout this session
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// TXInPreImageParserLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TXInPreImageParserLibraryCallerSession struct {
	Contract *TXInPreImageParserLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                    // Call options to use throughout this session
}

// TXInPreImageParserLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TXInPreImageParserLibraryTransactorSession struct {
	Contract     *TXInPreImageParserLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                    // Transaction auth options to use throughout this session
}

// TXInPreImageParserLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type TXInPreImageParserLibraryRaw struct {
	Contract *TXInPreImageParserLibrary // Generic contract binding to access the raw methods on
}

// TXInPreImageParserLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TXInPreImageParserLibraryCallerRaw struct {
	Contract *TXInPreImageParserLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// TXInPreImageParserLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TXInPreImageParserLibraryTransactorRaw struct {
	Contract *TXInPreImageParserLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTXInPreImageParserLibrary creates a new instance of TXInPreImageParserLibrary, bound to a specific deployed contract.
func NewTXInPreImageParserLibrary(address common.Address, backend bind.ContractBackend) (*TXInPreImageParserLibrary, error) {
	contract, err := bindTXInPreImageParserLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TXInPreImageParserLibrary{TXInPreImageParserLibraryCaller: TXInPreImageParserLibraryCaller{contract: contract}, TXInPreImageParserLibraryTransactor: TXInPreImageParserLibraryTransactor{contract: contract}, TXInPreImageParserLibraryFilterer: TXInPreImageParserLibraryFilterer{contract: contract}}, nil
}

// NewTXInPreImageParserLibraryCaller creates a new read-only instance of TXInPreImageParserLibrary, bound to a specific deployed contract.
func NewTXInPreImageParserLibraryCaller(address common.Address, caller bind.ContractCaller) (*TXInPreImageParserLibraryCaller, error) {
	contract, err := bindTXInPreImageParserLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TXInPreImageParserLibraryCaller{contract: contract}, nil
}

// NewTXInPreImageParserLibraryTransactor creates a new write-only instance of TXInPreImageParserLibrary, bound to a specific deployed contract.
func NewTXInPreImageParserLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*TXInPreImageParserLibraryTransactor, error) {
	contract, err := bindTXInPreImageParserLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TXInPreImageParserLibraryTransactor{contract: contract}, nil
}

// NewTXInPreImageParserLibraryFilterer creates a new log filterer instance of TXInPreImageParserLibrary, bound to a specific deployed contract.
func NewTXInPreImageParserLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*TXInPreImageParserLibraryFilterer, error) {
	contract, err := bindTXInPreImageParserLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TXInPreImageParserLibraryFilterer{contract: contract}, nil
}

// bindTXInPreImageParserLibrary binds a generic wrapper to an already deployed contract.
func bindTXInPreImageParserLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TXInPreImageParserLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TXInPreImageParserLibrary *TXInPreImageParserLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TXInPreImageParserLibrary.Contract.TXInPreImageParserLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TXInPreImageParserLibrary *TXInPreImageParserLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TXInPreImageParserLibrary.Contract.TXInPreImageParserLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TXInPreImageParserLibrary *TXInPreImageParserLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TXInPreImageParserLibrary.Contract.TXInPreImageParserLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TXInPreImageParserLibrary *TXInPreImageParserLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TXInPreImageParserLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TXInPreImageParserLibrary *TXInPreImageParserLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TXInPreImageParserLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TXInPreImageParserLibrary *TXInPreImageParserLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TXInPreImageParserLibrary.Contract.contract.Transact(opts, method, params...)
}

// TokenMetaData contains all meta data concerning the Token contract.
var TokenMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"symbol_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name_\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Start\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Stop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contractDSAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"move\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"pull\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"push\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractDSAuthority\",\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"name_\",\"type\":\"bytes32\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x6080604052601260065560006007556040516200001c9062000689565b604051809103906000f08015801562000039573d6000803e3d6000fd5b50600b80546001600160a01b0319166001600160a01b03929092169190911790553480156200006757600080fd5b5060405162002b1638038062002b168339810160408190526200008a9162000697565b600180546001600160a01b031916339081179091556040518391907fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9490600090a2600555600a80546001600160a01b03191633908117909155620000ee9062000190565b600b5462000105906001600160a01b03166200028e565b6007819055600b5460405163e348da1360e01b81523360048201526001600160a01b039091169063e348da1390602401600060405180830381600087803b1580156200015057600080fd5b505af115801562000165573d6000803e3d6000fd5b5050601260065550620001889050336c0c9f2c9cd04674edea400000006200033c565b505062000736565b600a546001600160a01b0316331480620001b957503360009081526008602052604090205460ff165b620002145760405162461bcd60e51b8152602060048201526031602482015260008051602062002af683398151915260448201527037b934bd32b21037b832b930ba37b9399760791b60648201526084015b60405180910390fd5b600b5460405163e348da1360e01b81526001600160a01b0383811660048301529091169063e348da1390602401600060405180830381600087803b1580156200025c57600080fd5b505af115801562000271573d6000803e3d6000fd5b505050506200028b816200048560201b620015dd1760201c565b50565b620002a6336001600160e01b03196000351662000540565b620002f45760405162461bcd60e51b815260206004820152601460248201527f64732d617574682d756e617574686f72697a656400000000000000000000000060448201526064016200020b565b600080546001600160a01b0319166001600160a01b038316908117825560405190917f1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada491a250565b62000354336001600160e01b03196000351662000540565b620003a25760405162461bcd60e51b815260206004820152601460248201527f64732d617574682d756e617574686f72697a656400000000000000000000000060448201526064016200020b565b600154600160a01b900460ff1615620003f35760405162461bcd60e51b8152602060048201526012602482015271191ccb5cdd1bdc0b5a5ccb5cdd1bdc1c195960721b60448201526064016200020b565b6001600160a01b03821660009081526003602052604090205462000418908262000627565b6001600160a01b03831660009081526003602052604090205560025462000440908262000627565b6002556040518181526001600160a01b038316907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859060200160405180910390a25050565b600a546001600160a01b0316331480620004ae57503360009081526008602052604090205460ff165b620005055760405162461bcd60e51b8152602060048201526031602482015260008051602062002af683398151915260448201527037b934bd32b21037b832b930ba37b9399760791b60648201526084016200020b565b6001600160a01b0381166000908152600860205260408120805460ff1916600117905560098054916200053883620006d2565b919050555050565b60006001600160a01b0383163014156200055d5750600162000621565b6001546001600160a01b03848116911614156200057d5750600162000621565b6000546001600160a01b0316620005975750600062000621565b60005460405163b700961360e01b81526001600160a01b0385811660048301523060248301526001600160e01b0319851660448301529091169063b700961390606401602060405180830381865afa158015620005f8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200061e9190620006f0565b90505b92915050565b6000826200063683826200071b565b9150811015620006215760405162461bcd60e51b815260206004820152601460248201527f64732d6d6174682d6164642d6f766572666c6f7700000000000000000000000060448201526064016200020b565b6106d5806200242183390190565b60008060408385031215620006ab57600080fd5b505080516020909101519092909150565b634e487b7160e01b600052601160045260246000fd5b6000600019821415620006e957620006e9620006bc565b5060010190565b6000602082840312156200070357600080fd5b815180151581146200071457600080fd5b9392505050565b60008219821115620007315762000731620006bc565b500190565b611cdb80620007466000396000f3fe608060405234801561001057600080fd5b50600436106101b95760003560e01c80638da5cb5b116100f9578063be9a655511610097578063dd62ed3e11610071578063dd62ed3e146103b8578063e348da13146103e3578063f2d5d56b146103f6578063fad8b32a1461040957600080fd5b8063be9a65551461037d578063bf7e214f14610385578063daea85c5146103a557600080fd5b8063a0712d68116100d3578063a0712d6814610331578063a9059cbb14610344578063b753a98c14610357578063bb35783b1461036a57600080fd5b80638da5cb5b146102d057806395d89b41146103155780639dc29fac1461031e57600080fd5b8063313ce567116101665780635ac801fe116101405780635ac801fe1461026557806370a082311461027857806375f12b21146102985780637a9e5e4b146102bd57600080fd5b8063313ce5671461023657806340c10f191461023f57806342966c681461025257600080fd5b806313af40351161019757806313af40351461020757806318160ddd1461021a57806323b872dd1461022357600080fd5b806306fdde03146101be57806307da68f5146101da578063095ea7b3146101e4575b600080fd5b6101c760075481565b6040519081526020015b60405180910390f35b6101e261041c565b005b6101f76101f2366004611adb565b61051f565b60405190151581526020016101d1565b6101e2610215366004611b07565b610619565b6101c760025481565b6101f7610231366004611b24565b61071c565b6101c760065481565b6101e261024d366004611adb565b610a94565b6101e2610260366004611b65565b610c63565b6101e2610273366004611b65565b610c70565b6101c7610286366004611b07565b60036020526000908152604090205481565b6001546101f79074010000000000000000000000000000000000000000900460ff1681565b6101e26102cb366004611b07565b610d09565b6001546102f09073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101d1565b6101c760055481565b6101e261032c366004611adb565b610e0a565b6101e261033f366004611b65565b6111e2565b6101f7610352366004611adb565b6111ec565b6101e2610365366004611adb565b611200565b6101e2610378366004611b24565b611210565b6101e2611221565b6000546102f09073ffffffffffffffffffffffffffffffffffffffff1681565b6101f76103b3366004611b07565b611308565b6101c76103c6366004611b7e565b600460209081526000928352604080842090915290825290205481565b6101e26103f1366004611b07565b611334565b6101e2610404366004611adb565b611483565b6101e2610417366004611b07565b61148e565b61044a336000357fffffffff0000000000000000000000000000000000000000000000000000000016611702565b6104b5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d617574682d756e617574686f72697a656400000000000000000000000060448201526064015b60405180910390fd5b600180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001790556040517fbedf0f4abfe86d4ffad593d9607fe70e83ea706033d44d24b3b6283cf3fc4f6b90600090a1565b60015460009074010000000000000000000000000000000000000000900460ff16156105a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f64732d73746f702d69732d73746f70706564000000000000000000000000000060448201526064016104ac565b33600081815260046020908152604080832073ffffffffffffffffffffffffffffffffffffffff881680855290835292819020869055518581529192917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a35060015b92915050565b610647336000357fffffffff0000000000000000000000000000000000000000000000000000000016611702565b6106ad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d617574682d756e617574686f72697a656400000000000000000000000060448201526064016104ac565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040517fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9490600090a250565b60015460009074010000000000000000000000000000000000000000900460ff16156107a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f64732d73746f702d69732d73746f70706564000000000000000000000000000060448201526064016104ac565b73ffffffffffffffffffffffffffffffffffffffff8416331480159061081a575073ffffffffffffffffffffffffffffffffffffffff841660009081526004602090815260408083203384529091529020547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff14155b156109265773ffffffffffffffffffffffffffffffffffffffff841660009081526004602090815260408083203384529091529020548211156108b9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f64732d746f6b656e2d696e73756666696369656e742d617070726f76616c000060448201526064016104ac565b73ffffffffffffffffffffffffffffffffffffffff841660009081526004602090815260408083203384529091529020546108f49083611843565b73ffffffffffffffffffffffffffffffffffffffff851660009081526004602090815260408083203384529091529020555b73ffffffffffffffffffffffffffffffffffffffff84166000908152600360205260409020548211156109b5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f64732d746f6b656e2d696e73756666696369656e742d62616c616e636500000060448201526064016104ac565b73ffffffffffffffffffffffffffffffffffffffff84166000908152600360205260409020546109e59083611843565b73ffffffffffffffffffffffffffffffffffffffff8086166000908152600360205260408082209390935590851681522054610a2190836118bb565b73ffffffffffffffffffffffffffffffffffffffff80851660008181526003602052604090819020939093559151908616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610a829086815260200190565b60405180910390a35060019392505050565b610ac2336000357fffffffff0000000000000000000000000000000000000000000000000000000016611702565b610b28576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d617574682d756e617574686f72697a656400000000000000000000000060448201526064016104ac565b60015474010000000000000000000000000000000000000000900460ff1615610bad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f64732d73746f702d69732d73746f70706564000000000000000000000000000060448201526064016104ac565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260036020526040902054610bdd90826118bb565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260036020526040902055600254610c1090826118bb565b60025560405181815273ffffffffffffffffffffffffffffffffffffffff8316907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885906020015b60405180910390a25050565b610c6d3382610e0a565b50565b610c9e336000357fffffffff0000000000000000000000000000000000000000000000000000000016611702565b610d04576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d617574682d756e617574686f72697a656400000000000000000000000060448201526064016104ac565b600755565b610d37336000357fffffffff0000000000000000000000000000000000000000000000000000000016611702565b610d9d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d617574682d756e617574686f72697a656400000000000000000000000060448201526064016104ac565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316908117825560405190917f1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada491a250565b610e38336000357fffffffff0000000000000000000000000000000000000000000000000000000016611702565b610e9e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d617574682d756e617574686f72697a656400000000000000000000000060448201526064016104ac565b60015474010000000000000000000000000000000000000000900460ff1615610f23576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f64732d73746f702d69732d73746f70706564000000000000000000000000000060448201526064016104ac565b73ffffffffffffffffffffffffffffffffffffffff82163314801590610f99575073ffffffffffffffffffffffffffffffffffffffff821660009081526004602090815260408083203384529091529020547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff14155b156110a55773ffffffffffffffffffffffffffffffffffffffff82166000908152600460209081526040808320338452909152902054811115611038576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f64732d746f6b656e2d696e73756666696369656e742d617070726f76616c000060448201526064016104ac565b73ffffffffffffffffffffffffffffffffffffffff821660009081526004602090815260408083203384529091529020546110739082611843565b73ffffffffffffffffffffffffffffffffffffffff831660009081526004602090815260408083203384529091529020555b73ffffffffffffffffffffffffffffffffffffffff8216600090815260036020526040902054811115611134576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f64732d746f6b656e2d696e73756666696369656e742d62616c616e636500000060448201526064016104ac565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600360205260409020546111649082611843565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600360205260409020556002546111979082611843565b60025560405181815273ffffffffffffffffffffffffffffffffffffffff8316907fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca590602001610c57565b610c6d3382610a94565b60006111f933848461071c565b9392505050565b61120b33838361071c565b505050565b61121b83838361071c565b50505050565b61124f336000357fffffffff0000000000000000000000000000000000000000000000000000000016611702565b6112b5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d617574682d756e617574686f72697a656400000000000000000000000060448201526064016104ac565b600180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1690556040517f1b55ba3aa851a46be3b365aee5b5c140edd620d578922f3e8466d2cbd96f954b90600090a1565b6000610613827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61051f565b600a5473ffffffffffffffffffffffffffffffffffffffff1633148061136957503360009081526008602052604090205460ff165b6113f5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527f6f72697a6564206f70657261746f72732e00000000000000000000000000000060648201526084016104ac565b600b546040517fe348da1300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301529091169063e348da1390602401600060405180830381600087803b15801561146257600080fd5b505af1158015611476573d6000803e3d6000fd5b50505050610c6d816115dd565b61120b82338361071c565b600a5473ffffffffffffffffffffffffffffffffffffffff163314806114c357503360009081526008602052604090205460ff165b61154f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527f6f72697a6564206f70657261746f72732e00000000000000000000000000000060648201526084016104ac565b600b546040517ffad8b32a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301529091169063fad8b32a90602401600060405180830381600087803b1580156115bc57600080fd5b505af11580156115d0573d6000803e3d6000fd5b50505050610c6d81611933565b600a5473ffffffffffffffffffffffffffffffffffffffff1633148061161257503360009081526008602052604090205460ff165b61169e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527f6f72697a6564206f70657261746f72732e00000000000000000000000000000060648201526084016104ac565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260086020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905560098054916116fa83611be6565b919050555050565b600073ffffffffffffffffffffffffffffffffffffffff831630141561172a57506001610613565b60015473ffffffffffffffffffffffffffffffffffffffff8481169116141561175557506001610613565b60005473ffffffffffffffffffffffffffffffffffffffff1661177a57506000610613565b6000546040517fb700961300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301523060248301527fffffffff00000000000000000000000000000000000000000000000000000000851660448301529091169063b700961390606401602060405180830381865afa158015611818573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183c9190611c1f565b9050610613565b6000826118508382611c41565b9150811115610613576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f64732d6d6174682d7375622d756e646572666c6f77000000000000000000000060448201526064016104ac565b6000826118c88382611c58565b9150811015610613576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d6d6174682d6164642d6f766572666c6f7700000000000000000000000060448201526064016104ac565b600a5473ffffffffffffffffffffffffffffffffffffffff1633148061196857503360009081526008602052604090205460ff165b6119f4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527f6f72697a6564206f70657261746f72732e00000000000000000000000000000060648201526084016104ac565b600160095411611a60576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f43616e27742072656d6f766520616c6c206f70657261746f727300000000000060448201526064016104ac565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260086020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905560098054916116fa83611c70565b73ffffffffffffffffffffffffffffffffffffffff81168114610c6d57600080fd5b60008060408385031215611aee57600080fd5b8235611af981611ab9565b946020939093013593505050565b600060208284031215611b1957600080fd5b81356111f981611ab9565b600080600060608486031215611b3957600080fd5b8335611b4481611ab9565b92506020840135611b5481611ab9565b929592945050506040919091013590565b600060208284031215611b7757600080fd5b5035919050565b60008060408385031215611b9157600080fd5b8235611b9c81611ab9565b91506020830135611bac81611ab9565b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611c1857611c18611bb7565b5060010190565b600060208284031215611c3157600080fd5b815180151581146111f957600080fd5b600082821015611c5357611c53611bb7565b500390565b60008219821115611c6b57611c6b611bb7565b500190565b600081611c7f57611c7f611bb7565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019056fea2646970667358221220201334a86712251d2e0201ee9bdc04dbe8f04bc0b97b7ae5b8509a817df4409b64736f6c634300080b0033608060405234801561001057600080fd5b50600280546001600160a01b0319163390811790915561002f90610034565b610129565b6002546001600160a01b031633148061005c57503360009081526020819052604090205460ff165b6100c65760405162461bcd60e51b815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527037b934bd32b21037b832b930ba37b9399760791b606482015260840160405180910390fd5b6001600160a01b0381166000908152602081905260408120805460ff191660019081179091558054916100f883610100565b919050555050565b600060001982141561012257634e487b7160e01b600052601160045260246000fd5b5060010190565b61059d806101386000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063b700961314610046578063e348da131461006d578063fad8b32a14610082575b600080fd5b61005961005436600461043c565b610095565b604051901515815260200160405180910390f35b61008061007b3660046104a8565b610168565b005b6100806100903660046104a8565b61028e565b60025460009073ffffffffffffffffffffffffffffffffffffffff163314806100cd57503360009081526020819052604090205460ff165b61015e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527f6f72697a6564206f70657261746f72732e00000000000000000000000000000060648201526084015b60405180910390fd5b5060019392505050565b60025473ffffffffffffffffffffffffffffffffffffffff1633148061019d57503360009081526020819052604090205460ff165b610229576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527f6f72697a6564206f70657261746f72732e0000000000000000000000000000006064820152608401610155565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260208190526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001908117909155805491610286836104f9565b919050555050565b60025473ffffffffffffffffffffffffffffffffffffffff163314806102c357503360009081526020819052604090205460ff165b61034f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527f6f72697a6564206f70657261746f72732e0000000000000000000000000000006064820152608401610155565b60018054116103ba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f43616e27742072656d6f766520616c6c206f70657261746f72730000000000006044820152606401610155565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260208190526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055600180549161028683610532565b803573ffffffffffffffffffffffffffffffffffffffff8116811461043757600080fd5b919050565b60008060006060848603121561045157600080fd5b61045a84610413565b925061046860208501610413565b915060408401357fffffffff000000000000000000000000000000000000000000000000000000008116811461049d57600080fd5b809150509250925092565b6000602082840312156104ba57600080fd5b6104c382610413565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561052b5761052b6104ca565b5060010190565b600081610541576105416104ca565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019056fea2646970667358221220849b79a235187040c0384716f9228587c0638b17222f3587723991bfe1f44f3064736f6c634300080b003346756e6374696f6e616c697479207265737472696374656420746f2061757468",
}

// TokenABI is the input ABI used to generate the binding from.
// Deprecated: Use TokenMetaData.ABI instead.
var TokenABI = TokenMetaData.ABI

// TokenBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TokenMetaData.Bin instead.
var TokenBin = TokenMetaData.Bin

// DeployToken deploys a new Ethereum contract, binding an instance of Token to it.
func DeployToken(auth *bind.TransactOpts, backend bind.ContractBackend, symbol_ [32]byte, name_ [32]byte) (common.Address, *types.Transaction, *Token, error) {
	parsed, err := TokenMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TokenBin), backend, symbol_, name_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Token{TokenCaller: TokenCaller{contract: contract}, TokenTransactor: TokenTransactor{contract: contract}, TokenFilterer: TokenFilterer{contract: contract}}, nil
}

// Token is an auto generated Go binding around an Ethereum contract.
type Token struct {
	TokenCaller     // Read-only binding to the contract
	TokenTransactor // Write-only binding to the contract
	TokenFilterer   // Log filterer for contract events
}

// TokenCaller is an auto generated read-only Go binding around an Ethereum contract.
type TokenCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TokenTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TokenFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TokenSession struct {
	Contract     *Token            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TokenCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TokenCallerSession struct {
	Contract *TokenCaller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// TokenTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TokenTransactorSession struct {
	Contract     *TokenTransactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TokenRaw is an auto generated low-level Go binding around an Ethereum contract.
type TokenRaw struct {
	Contract *Token // Generic contract binding to access the raw methods on
}

// TokenCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TokenCallerRaw struct {
	Contract *TokenCaller // Generic read-only contract binding to access the raw methods on
}

// TokenTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TokenTransactorRaw struct {
	Contract *TokenTransactor // Generic write-only contract binding to access the raw methods on
}

// NewToken creates a new instance of Token, bound to a specific deployed contract.
func NewToken(address common.Address, backend bind.ContractBackend) (*Token, error) {
	contract, err := bindToken(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Token{TokenCaller: TokenCaller{contract: contract}, TokenTransactor: TokenTransactor{contract: contract}, TokenFilterer: TokenFilterer{contract: contract}}, nil
}

// NewTokenCaller creates a new read-only instance of Token, bound to a specific deployed contract.
func NewTokenCaller(address common.Address, caller bind.ContractCaller) (*TokenCaller, error) {
	contract, err := bindToken(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TokenCaller{contract: contract}, nil
}

// NewTokenTransactor creates a new write-only instance of Token, bound to a specific deployed contract.
func NewTokenTransactor(address common.Address, transactor bind.ContractTransactor) (*TokenTransactor, error) {
	contract, err := bindToken(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TokenTransactor{contract: contract}, nil
}

// NewTokenFilterer creates a new log filterer instance of Token, bound to a specific deployed contract.
func NewTokenFilterer(address common.Address, filterer bind.ContractFilterer) (*TokenFilterer, error) {
	contract, err := bindToken(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TokenFilterer{contract: contract}, nil
}

// bindToken binds a generic wrapper to an already deployed contract.
func bindToken(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TokenABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Token *TokenRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Token.Contract.TokenCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Token *TokenRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Token.Contract.TokenTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Token *TokenRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Token.Contract.TokenTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Token *TokenCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Token.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Token *TokenTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Token.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Token *TokenTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Token.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address , address ) view returns(uint256)
func (_Token *TokenCaller) Allowance(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Token.contract.Call(opts, &out, "allowance", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address , address ) view returns(uint256)
func (_Token *TokenSession) Allowance(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _Token.Contract.Allowance(&_Token.CallOpts, arg0, arg1)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address , address ) view returns(uint256)
func (_Token *TokenCallerSession) Allowance(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _Token.Contract.Allowance(&_Token.CallOpts, arg0, arg1)
}

// Authority is a free data retrieval call binding the contract method 0xbf7e214f.
//
// Solidity: function authority() view returns(address)
func (_Token *TokenCaller) Authority(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Token.contract.Call(opts, &out, "authority")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Authority is a free data retrieval call binding the contract method 0xbf7e214f.
//
// Solidity: function authority() view returns(address)
func (_Token *TokenSession) Authority() (common.Address, error) {
	return _Token.Contract.Authority(&_Token.CallOpts)
}

// Authority is a free data retrieval call binding the contract method 0xbf7e214f.
//
// Solidity: function authority() view returns(address)
func (_Token *TokenCallerSession) Authority() (common.Address, error) {
	return _Token.Contract.Authority(&_Token.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address ) view returns(uint256)
func (_Token *TokenCaller) BalanceOf(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Token.contract.Call(opts, &out, "balanceOf", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address ) view returns(uint256)
func (_Token *TokenSession) BalanceOf(arg0 common.Address) (*big.Int, error) {
	return _Token.Contract.BalanceOf(&_Token.CallOpts, arg0)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address ) view returns(uint256)
func (_Token *TokenCallerSession) BalanceOf(arg0 common.Address) (*big.Int, error) {
	return _Token.Contract.BalanceOf(&_Token.CallOpts, arg0)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint256)
func (_Token *TokenCaller) Decimals(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Token.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint256)
func (_Token *TokenSession) Decimals() (*big.Int, error) {
	return _Token.Contract.Decimals(&_Token.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint256)
func (_Token *TokenCallerSession) Decimals() (*big.Int, error) {
	return _Token.Contract.Decimals(&_Token.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(bytes32)
func (_Token *TokenCaller) Name(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Token.contract.Call(opts, &out, "name")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(bytes32)
func (_Token *TokenSession) Name() ([32]byte, error) {
	return _Token.Contract.Name(&_Token.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(bytes32)
func (_Token *TokenCallerSession) Name() ([32]byte, error) {
	return _Token.Contract.Name(&_Token.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Token *TokenCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Token.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Token *TokenSession) Owner() (common.Address, error) {
	return _Token.Contract.Owner(&_Token.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Token *TokenCallerSession) Owner() (common.Address, error) {
	return _Token.Contract.Owner(&_Token.CallOpts)
}

// Stopped is a free data retrieval call binding the contract method 0x75f12b21.
//
// Solidity: function stopped() view returns(bool)
func (_Token *TokenCaller) Stopped(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Token.contract.Call(opts, &out, "stopped")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Stopped is a free data retrieval call binding the contract method 0x75f12b21.
//
// Solidity: function stopped() view returns(bool)
func (_Token *TokenSession) Stopped() (bool, error) {
	return _Token.Contract.Stopped(&_Token.CallOpts)
}

// Stopped is a free data retrieval call binding the contract method 0x75f12b21.
//
// Solidity: function stopped() view returns(bool)
func (_Token *TokenCallerSession) Stopped() (bool, error) {
	return _Token.Contract.Stopped(&_Token.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(bytes32)
func (_Token *TokenCaller) Symbol(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Token.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(bytes32)
func (_Token *TokenSession) Symbol() ([32]byte, error) {
	return _Token.Contract.Symbol(&_Token.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(bytes32)
func (_Token *TokenCallerSession) Symbol() ([32]byte, error) {
	return _Token.Contract.Symbol(&_Token.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Token *TokenCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Token.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Token *TokenSession) TotalSupply() (*big.Int, error) {
	return _Token.Contract.TotalSupply(&_Token.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Token *TokenCallerSession) TotalSupply() (*big.Int, error) {
	return _Token.Contract.TotalSupply(&_Token.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address guy, uint256 wad) returns(bool)
func (_Token *TokenTransactor) Approve(opts *bind.TransactOpts, guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "approve", guy, wad)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address guy, uint256 wad) returns(bool)
func (_Token *TokenSession) Approve(guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Approve(&_Token.TransactOpts, guy, wad)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address guy, uint256 wad) returns(bool)
func (_Token *TokenTransactorSession) Approve(guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Approve(&_Token.TransactOpts, guy, wad)
}

// Approve0 is a paid mutator transaction binding the contract method 0xdaea85c5.
//
// Solidity: function approve(address guy) returns(bool)
func (_Token *TokenTransactor) Approve0(opts *bind.TransactOpts, guy common.Address) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "approve0", guy)
}

// Approve0 is a paid mutator transaction binding the contract method 0xdaea85c5.
//
// Solidity: function approve(address guy) returns(bool)
func (_Token *TokenSession) Approve0(guy common.Address) (*types.Transaction, error) {
	return _Token.Contract.Approve0(&_Token.TransactOpts, guy)
}

// Approve0 is a paid mutator transaction binding the contract method 0xdaea85c5.
//
// Solidity: function approve(address guy) returns(bool)
func (_Token *TokenTransactorSession) Approve0(guy common.Address) (*types.Transaction, error) {
	return _Token.Contract.Approve0(&_Token.TransactOpts, guy)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 wad) returns()
func (_Token *TokenTransactor) Burn(opts *bind.TransactOpts, wad *big.Int) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "burn", wad)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 wad) returns()
func (_Token *TokenSession) Burn(wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Burn(&_Token.TransactOpts, wad)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 wad) returns()
func (_Token *TokenTransactorSession) Burn(wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Burn(&_Token.TransactOpts, wad)
}

// Burn0 is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address guy, uint256 wad) returns()
func (_Token *TokenTransactor) Burn0(opts *bind.TransactOpts, guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "burn0", guy, wad)
}

// Burn0 is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address guy, uint256 wad) returns()
func (_Token *TokenSession) Burn0(guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Burn0(&_Token.TransactOpts, guy, wad)
}

// Burn0 is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address guy, uint256 wad) returns()
func (_Token *TokenTransactorSession) Burn0(guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Burn0(&_Token.TransactOpts, guy, wad)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_Token *TokenTransactor) GrantOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "grantOperator", _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_Token *TokenSession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _Token.Contract.GrantOperator(&_Token.TransactOpts, _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_Token *TokenTransactorSession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _Token.Contract.GrantOperator(&_Token.TransactOpts, _operator)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address guy, uint256 wad) returns()
func (_Token *TokenTransactor) Mint(opts *bind.TransactOpts, guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "mint", guy, wad)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address guy, uint256 wad) returns()
func (_Token *TokenSession) Mint(guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Mint(&_Token.TransactOpts, guy, wad)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address guy, uint256 wad) returns()
func (_Token *TokenTransactorSession) Mint(guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Mint(&_Token.TransactOpts, guy, wad)
}

// Mint0 is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 wad) returns()
func (_Token *TokenTransactor) Mint0(opts *bind.TransactOpts, wad *big.Int) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "mint0", wad)
}

// Mint0 is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 wad) returns()
func (_Token *TokenSession) Mint0(wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Mint0(&_Token.TransactOpts, wad)
}

// Mint0 is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 wad) returns()
func (_Token *TokenTransactorSession) Mint0(wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Mint0(&_Token.TransactOpts, wad)
}

// Move is a paid mutator transaction binding the contract method 0xbb35783b.
//
// Solidity: function move(address src, address dst, uint256 wad) returns()
func (_Token *TokenTransactor) Move(opts *bind.TransactOpts, src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "move", src, dst, wad)
}

// Move is a paid mutator transaction binding the contract method 0xbb35783b.
//
// Solidity: function move(address src, address dst, uint256 wad) returns()
func (_Token *TokenSession) Move(src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Move(&_Token.TransactOpts, src, dst, wad)
}

// Move is a paid mutator transaction binding the contract method 0xbb35783b.
//
// Solidity: function move(address src, address dst, uint256 wad) returns()
func (_Token *TokenTransactorSession) Move(src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Move(&_Token.TransactOpts, src, dst, wad)
}

// Pull is a paid mutator transaction binding the contract method 0xf2d5d56b.
//
// Solidity: function pull(address src, uint256 wad) returns()
func (_Token *TokenTransactor) Pull(opts *bind.TransactOpts, src common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "pull", src, wad)
}

// Pull is a paid mutator transaction binding the contract method 0xf2d5d56b.
//
// Solidity: function pull(address src, uint256 wad) returns()
func (_Token *TokenSession) Pull(src common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Pull(&_Token.TransactOpts, src, wad)
}

// Pull is a paid mutator transaction binding the contract method 0xf2d5d56b.
//
// Solidity: function pull(address src, uint256 wad) returns()
func (_Token *TokenTransactorSession) Pull(src common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Pull(&_Token.TransactOpts, src, wad)
}

// Push is a paid mutator transaction binding the contract method 0xb753a98c.
//
// Solidity: function push(address dst, uint256 wad) returns()
func (_Token *TokenTransactor) Push(opts *bind.TransactOpts, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "push", dst, wad)
}

// Push is a paid mutator transaction binding the contract method 0xb753a98c.
//
// Solidity: function push(address dst, uint256 wad) returns()
func (_Token *TokenSession) Push(dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Push(&_Token.TransactOpts, dst, wad)
}

// Push is a paid mutator transaction binding the contract method 0xb753a98c.
//
// Solidity: function push(address dst, uint256 wad) returns()
func (_Token *TokenTransactorSession) Push(dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Push(&_Token.TransactOpts, dst, wad)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_Token *TokenTransactor) RevokeOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "revokeOperator", _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_Token *TokenSession) RevokeOperator(_operator common.Address) (*types.Transaction, error) {
	return _Token.Contract.RevokeOperator(&_Token.TransactOpts, _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_Token *TokenTransactorSession) RevokeOperator(_operator common.Address) (*types.Transaction, error) {
	return _Token.Contract.RevokeOperator(&_Token.TransactOpts, _operator)
}

// SetAuthority is a paid mutator transaction binding the contract method 0x7a9e5e4b.
//
// Solidity: function setAuthority(address authority_) returns()
func (_Token *TokenTransactor) SetAuthority(opts *bind.TransactOpts, authority_ common.Address) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "setAuthority", authority_)
}

// SetAuthority is a paid mutator transaction binding the contract method 0x7a9e5e4b.
//
// Solidity: function setAuthority(address authority_) returns()
func (_Token *TokenSession) SetAuthority(authority_ common.Address) (*types.Transaction, error) {
	return _Token.Contract.SetAuthority(&_Token.TransactOpts, authority_)
}

// SetAuthority is a paid mutator transaction binding the contract method 0x7a9e5e4b.
//
// Solidity: function setAuthority(address authority_) returns()
func (_Token *TokenTransactorSession) SetAuthority(authority_ common.Address) (*types.Transaction, error) {
	return _Token.Contract.SetAuthority(&_Token.TransactOpts, authority_)
}

// SetName is a paid mutator transaction binding the contract method 0x5ac801fe.
//
// Solidity: function setName(bytes32 name_) returns()
func (_Token *TokenTransactor) SetName(opts *bind.TransactOpts, name_ [32]byte) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "setName", name_)
}

// SetName is a paid mutator transaction binding the contract method 0x5ac801fe.
//
// Solidity: function setName(bytes32 name_) returns()
func (_Token *TokenSession) SetName(name_ [32]byte) (*types.Transaction, error) {
	return _Token.Contract.SetName(&_Token.TransactOpts, name_)
}

// SetName is a paid mutator transaction binding the contract method 0x5ac801fe.
//
// Solidity: function setName(bytes32 name_) returns()
func (_Token *TokenTransactorSession) SetName(name_ [32]byte) (*types.Transaction, error) {
	return _Token.Contract.SetName(&_Token.TransactOpts, name_)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address owner_) returns()
func (_Token *TokenTransactor) SetOwner(opts *bind.TransactOpts, owner_ common.Address) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "setOwner", owner_)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address owner_) returns()
func (_Token *TokenSession) SetOwner(owner_ common.Address) (*types.Transaction, error) {
	return _Token.Contract.SetOwner(&_Token.TransactOpts, owner_)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address owner_) returns()
func (_Token *TokenTransactorSession) SetOwner(owner_ common.Address) (*types.Transaction, error) {
	return _Token.Contract.SetOwner(&_Token.TransactOpts, owner_)
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_Token *TokenTransactor) Start(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "start")
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_Token *TokenSession) Start() (*types.Transaction, error) {
	return _Token.Contract.Start(&_Token.TransactOpts)
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_Token *TokenTransactorSession) Start() (*types.Transaction, error) {
	return _Token.Contract.Start(&_Token.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_Token *TokenTransactor) Stop(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "stop")
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_Token *TokenSession) Stop() (*types.Transaction, error) {
	return _Token.Contract.Stop(&_Token.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_Token *TokenTransactorSession) Stop() (*types.Transaction, error) {
	return _Token.Contract.Stop(&_Token.TransactOpts)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address dst, uint256 wad) returns(bool)
func (_Token *TokenTransactor) Transfer(opts *bind.TransactOpts, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "transfer", dst, wad)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address dst, uint256 wad) returns(bool)
func (_Token *TokenSession) Transfer(dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Transfer(&_Token.TransactOpts, dst, wad)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address dst, uint256 wad) returns(bool)
func (_Token *TokenTransactorSession) Transfer(dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Transfer(&_Token.TransactOpts, dst, wad)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address src, address dst, uint256 wad) returns(bool)
func (_Token *TokenTransactor) TransferFrom(opts *bind.TransactOpts, src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "transferFrom", src, dst, wad)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address src, address dst, uint256 wad) returns(bool)
func (_Token *TokenSession) TransferFrom(src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.TransferFrom(&_Token.TransactOpts, src, dst, wad)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address src, address dst, uint256 wad) returns(bool)
func (_Token *TokenTransactorSession) TransferFrom(src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.TransferFrom(&_Token.TransactOpts, src, dst, wad)
}

// TokenApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the Token contract.
type TokenApprovalIterator struct {
	Event *TokenApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenApproval represents a Approval event raised by the Token contract.
type TokenApproval struct {
	Src common.Address
	Guy common.Address
	Wad *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed src, address indexed guy, uint256 wad)
func (_Token *TokenFilterer) FilterApproval(opts *bind.FilterOpts, src []common.Address, guy []common.Address) (*TokenApprovalIterator, error) {

	var srcRule []interface{}
	for _, srcItem := range src {
		srcRule = append(srcRule, srcItem)
	}
	var guyRule []interface{}
	for _, guyItem := range guy {
		guyRule = append(guyRule, guyItem)
	}

	logs, sub, err := _Token.contract.FilterLogs(opts, "Approval", srcRule, guyRule)
	if err != nil {
		return nil, err
	}
	return &TokenApprovalIterator{contract: _Token.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed src, address indexed guy, uint256 wad)
func (_Token *TokenFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *TokenApproval, src []common.Address, guy []common.Address) (event.Subscription, error) {

	var srcRule []interface{}
	for _, srcItem := range src {
		srcRule = append(srcRule, srcItem)
	}
	var guyRule []interface{}
	for _, guyItem := range guy {
		guyRule = append(guyRule, guyItem)
	}

	logs, sub, err := _Token.contract.WatchLogs(opts, "Approval", srcRule, guyRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenApproval)
				if err := _Token.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed src, address indexed guy, uint256 wad)
func (_Token *TokenFilterer) ParseApproval(log types.Log) (*TokenApproval, error) {
	event := new(TokenApproval)
	if err := _Token.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenBurnIterator is returned from FilterBurn and is used to iterate over the raw logs and unpacked data for Burn events raised by the Token contract.
type TokenBurnIterator struct {
	Event *TokenBurn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenBurnIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenBurn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenBurn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenBurnIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenBurnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenBurn represents a Burn event raised by the Token contract.
type TokenBurn struct {
	Guy common.Address
	Wad *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterBurn is a free log retrieval operation binding the contract event 0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5.
//
// Solidity: event Burn(address indexed guy, uint256 wad)
func (_Token *TokenFilterer) FilterBurn(opts *bind.FilterOpts, guy []common.Address) (*TokenBurnIterator, error) {

	var guyRule []interface{}
	for _, guyItem := range guy {
		guyRule = append(guyRule, guyItem)
	}

	logs, sub, err := _Token.contract.FilterLogs(opts, "Burn", guyRule)
	if err != nil {
		return nil, err
	}
	return &TokenBurnIterator{contract: _Token.contract, event: "Burn", logs: logs, sub: sub}, nil
}

// WatchBurn is a free log subscription operation binding the contract event 0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5.
//
// Solidity: event Burn(address indexed guy, uint256 wad)
func (_Token *TokenFilterer) WatchBurn(opts *bind.WatchOpts, sink chan<- *TokenBurn, guy []common.Address) (event.Subscription, error) {

	var guyRule []interface{}
	for _, guyItem := range guy {
		guyRule = append(guyRule, guyItem)
	}

	logs, sub, err := _Token.contract.WatchLogs(opts, "Burn", guyRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenBurn)
				if err := _Token.contract.UnpackLog(event, "Burn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBurn is a log parse operation binding the contract event 0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5.
//
// Solidity: event Burn(address indexed guy, uint256 wad)
func (_Token *TokenFilterer) ParseBurn(log types.Log) (*TokenBurn, error) {
	event := new(TokenBurn)
	if err := _Token.contract.UnpackLog(event, "Burn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenLogSetAuthorityIterator is returned from FilterLogSetAuthority and is used to iterate over the raw logs and unpacked data for LogSetAuthority events raised by the Token contract.
type TokenLogSetAuthorityIterator struct {
	Event *TokenLogSetAuthority // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenLogSetAuthorityIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenLogSetAuthority)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenLogSetAuthority)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenLogSetAuthorityIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenLogSetAuthorityIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenLogSetAuthority represents a LogSetAuthority event raised by the Token contract.
type TokenLogSetAuthority struct {
	Authority common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterLogSetAuthority is a free log retrieval operation binding the contract event 0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4.
//
// Solidity: event LogSetAuthority(address indexed authority)
func (_Token *TokenFilterer) FilterLogSetAuthority(opts *bind.FilterOpts, authority []common.Address) (*TokenLogSetAuthorityIterator, error) {

	var authorityRule []interface{}
	for _, authorityItem := range authority {
		authorityRule = append(authorityRule, authorityItem)
	}

	logs, sub, err := _Token.contract.FilterLogs(opts, "LogSetAuthority", authorityRule)
	if err != nil {
		return nil, err
	}
	return &TokenLogSetAuthorityIterator{contract: _Token.contract, event: "LogSetAuthority", logs: logs, sub: sub}, nil
}

// WatchLogSetAuthority is a free log subscription operation binding the contract event 0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4.
//
// Solidity: event LogSetAuthority(address indexed authority)
func (_Token *TokenFilterer) WatchLogSetAuthority(opts *bind.WatchOpts, sink chan<- *TokenLogSetAuthority, authority []common.Address) (event.Subscription, error) {

	var authorityRule []interface{}
	for _, authorityItem := range authority {
		authorityRule = append(authorityRule, authorityItem)
	}

	logs, sub, err := _Token.contract.WatchLogs(opts, "LogSetAuthority", authorityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenLogSetAuthority)
				if err := _Token.contract.UnpackLog(event, "LogSetAuthority", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogSetAuthority is a log parse operation binding the contract event 0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4.
//
// Solidity: event LogSetAuthority(address indexed authority)
func (_Token *TokenFilterer) ParseLogSetAuthority(log types.Log) (*TokenLogSetAuthority, error) {
	event := new(TokenLogSetAuthority)
	if err := _Token.contract.UnpackLog(event, "LogSetAuthority", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenLogSetOwnerIterator is returned from FilterLogSetOwner and is used to iterate over the raw logs and unpacked data for LogSetOwner events raised by the Token contract.
type TokenLogSetOwnerIterator struct {
	Event *TokenLogSetOwner // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenLogSetOwnerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenLogSetOwner)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenLogSetOwner)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenLogSetOwnerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenLogSetOwnerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenLogSetOwner represents a LogSetOwner event raised by the Token contract.
type TokenLogSetOwner struct {
	Owner common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogSetOwner is a free log retrieval operation binding the contract event 0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94.
//
// Solidity: event LogSetOwner(address indexed owner)
func (_Token *TokenFilterer) FilterLogSetOwner(opts *bind.FilterOpts, owner []common.Address) (*TokenLogSetOwnerIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _Token.contract.FilterLogs(opts, "LogSetOwner", ownerRule)
	if err != nil {
		return nil, err
	}
	return &TokenLogSetOwnerIterator{contract: _Token.contract, event: "LogSetOwner", logs: logs, sub: sub}, nil
}

// WatchLogSetOwner is a free log subscription operation binding the contract event 0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94.
//
// Solidity: event LogSetOwner(address indexed owner)
func (_Token *TokenFilterer) WatchLogSetOwner(opts *bind.WatchOpts, sink chan<- *TokenLogSetOwner, owner []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _Token.contract.WatchLogs(opts, "LogSetOwner", ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenLogSetOwner)
				if err := _Token.contract.UnpackLog(event, "LogSetOwner", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogSetOwner is a log parse operation binding the contract event 0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94.
//
// Solidity: event LogSetOwner(address indexed owner)
func (_Token *TokenFilterer) ParseLogSetOwner(log types.Log) (*TokenLogSetOwner, error) {
	event := new(TokenLogSetOwner)
	if err := _Token.contract.UnpackLog(event, "LogSetOwner", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenMintIterator is returned from FilterMint and is used to iterate over the raw logs and unpacked data for Mint events raised by the Token contract.
type TokenMintIterator struct {
	Event *TokenMint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenMintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenMint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenMint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenMintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenMintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenMint represents a Mint event raised by the Token contract.
type TokenMint struct {
	Guy common.Address
	Wad *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterMint is a free log retrieval operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
//
// Solidity: event Mint(address indexed guy, uint256 wad)
func (_Token *TokenFilterer) FilterMint(opts *bind.FilterOpts, guy []common.Address) (*TokenMintIterator, error) {

	var guyRule []interface{}
	for _, guyItem := range guy {
		guyRule = append(guyRule, guyItem)
	}

	logs, sub, err := _Token.contract.FilterLogs(opts, "Mint", guyRule)
	if err != nil {
		return nil, err
	}
	return &TokenMintIterator{contract: _Token.contract, event: "Mint", logs: logs, sub: sub}, nil
}

// WatchMint is a free log subscription operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
//
// Solidity: event Mint(address indexed guy, uint256 wad)
func (_Token *TokenFilterer) WatchMint(opts *bind.WatchOpts, sink chan<- *TokenMint, guy []common.Address) (event.Subscription, error) {

	var guyRule []interface{}
	for _, guyItem := range guy {
		guyRule = append(guyRule, guyItem)
	}

	logs, sub, err := _Token.contract.WatchLogs(opts, "Mint", guyRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenMint)
				if err := _Token.contract.UnpackLog(event, "Mint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMint is a log parse operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
//
// Solidity: event Mint(address indexed guy, uint256 wad)
func (_Token *TokenFilterer) ParseMint(log types.Log) (*TokenMint, error) {
	event := new(TokenMint)
	if err := _Token.contract.UnpackLog(event, "Mint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenStartIterator is returned from FilterStart and is used to iterate over the raw logs and unpacked data for Start events raised by the Token contract.
type TokenStartIterator struct {
	Event *TokenStart // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenStartIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenStart)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenStart)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenStartIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenStartIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenStart represents a Start event raised by the Token contract.
type TokenStart struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterStart is a free log retrieval operation binding the contract event 0x1b55ba3aa851a46be3b365aee5b5c140edd620d578922f3e8466d2cbd96f954b.
//
// Solidity: event Start()
func (_Token *TokenFilterer) FilterStart(opts *bind.FilterOpts) (*TokenStartIterator, error) {

	logs, sub, err := _Token.contract.FilterLogs(opts, "Start")
	if err != nil {
		return nil, err
	}
	return &TokenStartIterator{contract: _Token.contract, event: "Start", logs: logs, sub: sub}, nil
}

// WatchStart is a free log subscription operation binding the contract event 0x1b55ba3aa851a46be3b365aee5b5c140edd620d578922f3e8466d2cbd96f954b.
//
// Solidity: event Start()
func (_Token *TokenFilterer) WatchStart(opts *bind.WatchOpts, sink chan<- *TokenStart) (event.Subscription, error) {

	logs, sub, err := _Token.contract.WatchLogs(opts, "Start")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenStart)
				if err := _Token.contract.UnpackLog(event, "Start", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStart is a log parse operation binding the contract event 0x1b55ba3aa851a46be3b365aee5b5c140edd620d578922f3e8466d2cbd96f954b.
//
// Solidity: event Start()
func (_Token *TokenFilterer) ParseStart(log types.Log) (*TokenStart, error) {
	event := new(TokenStart)
	if err := _Token.contract.UnpackLog(event, "Start", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenStopIterator is returned from FilterStop and is used to iterate over the raw logs and unpacked data for Stop events raised by the Token contract.
type TokenStopIterator struct {
	Event *TokenStop // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenStopIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenStop)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenStop)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenStopIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenStopIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenStop represents a Stop event raised by the Token contract.
type TokenStop struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterStop is a free log retrieval operation binding the contract event 0xbedf0f4abfe86d4ffad593d9607fe70e83ea706033d44d24b3b6283cf3fc4f6b.
//
// Solidity: event Stop()
func (_Token *TokenFilterer) FilterStop(opts *bind.FilterOpts) (*TokenStopIterator, error) {

	logs, sub, err := _Token.contract.FilterLogs(opts, "Stop")
	if err != nil {
		return nil, err
	}
	return &TokenStopIterator{contract: _Token.contract, event: "Stop", logs: logs, sub: sub}, nil
}

// WatchStop is a free log subscription operation binding the contract event 0xbedf0f4abfe86d4ffad593d9607fe70e83ea706033d44d24b3b6283cf3fc4f6b.
//
// Solidity: event Stop()
func (_Token *TokenFilterer) WatchStop(opts *bind.WatchOpts, sink chan<- *TokenStop) (event.Subscription, error) {

	logs, sub, err := _Token.contract.WatchLogs(opts, "Stop")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenStop)
				if err := _Token.contract.UnpackLog(event, "Stop", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStop is a log parse operation binding the contract event 0xbedf0f4abfe86d4ffad593d9607fe70e83ea706033d44d24b3b6283cf3fc4f6b.
//
// Solidity: event Stop()
func (_Token *TokenFilterer) ParseStop(log types.Log) (*TokenStop, error) {
	event := new(TokenStop)
	if err := _Token.contract.UnpackLog(event, "Stop", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Token contract.
type TokenTransferIterator struct {
	Event *TokenTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenTransfer represents a Transfer event raised by the Token contract.
type TokenTransfer struct {
	Src common.Address
	Dst common.Address
	Wad *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed src, address indexed dst, uint256 wad)
func (_Token *TokenFilterer) FilterTransfer(opts *bind.FilterOpts, src []common.Address, dst []common.Address) (*TokenTransferIterator, error) {

	var srcRule []interface{}
	for _, srcItem := range src {
		srcRule = append(srcRule, srcItem)
	}
	var dstRule []interface{}
	for _, dstItem := range dst {
		dstRule = append(dstRule, dstItem)
	}

	logs, sub, err := _Token.contract.FilterLogs(opts, "Transfer", srcRule, dstRule)
	if err != nil {
		return nil, err
	}
	return &TokenTransferIterator{contract: _Token.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed src, address indexed dst, uint256 wad)
func (_Token *TokenFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *TokenTransfer, src []common.Address, dst []common.Address) (event.Subscription, error) {

	var srcRule []interface{}
	for _, srcItem := range src {
		srcRule = append(srcRule, srcItem)
	}
	var dstRule []interface{}
	for _, dstItem := range dst {
		dstRule = append(dstRule, dstItem)
	}

	logs, sub, err := _Token.contract.WatchLogs(opts, "Transfer", srcRule, dstRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenTransfer)
				if err := _Token.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed src, address indexed dst, uint256 wad)
func (_Token *TokenFilterer) ParseTransfer(log types.Log) (*TokenTransfer, error) {
	event := new(TokenTransfer)
	if err := _Token.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenAuthorityMetaData contains all meta data concerning the TokenAuthority contract.
var TokenAuthorityMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"canCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50600280546001600160a01b0319163390811790915561002f90610034565b610129565b6002546001600160a01b031633148061005c57503360009081526020819052604090205460ff165b6100c65760405162461bcd60e51b815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527037b934bd32b21037b832b930ba37b9399760791b606482015260840160405180910390fd5b6001600160a01b0381166000908152602081905260408120805460ff191660019081179091558054916100f883610100565b919050555050565b600060001982141561012257634e487b7160e01b600052601160045260246000fd5b5060010190565b61059d806101386000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063b700961314610046578063e348da131461006d578063fad8b32a14610082575b600080fd5b61005961005436600461043c565b610095565b604051901515815260200160405180910390f35b61008061007b3660046104a8565b610168565b005b6100806100903660046104a8565b61028e565b60025460009073ffffffffffffffffffffffffffffffffffffffff163314806100cd57503360009081526020819052604090205460ff165b61015e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527f6f72697a6564206f70657261746f72732e00000000000000000000000000000060648201526084015b60405180910390fd5b5060019392505050565b60025473ffffffffffffffffffffffffffffffffffffffff1633148061019d57503360009081526020819052604090205460ff165b610229576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527f6f72697a6564206f70657261746f72732e0000000000000000000000000000006064820152608401610155565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260208190526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001908117909155805491610286836104f9565b919050555050565b60025473ffffffffffffffffffffffffffffffffffffffff163314806102c357503360009081526020819052604090205460ff165b61034f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527f6f72697a6564206f70657261746f72732e0000000000000000000000000000006064820152608401610155565b60018054116103ba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f43616e27742072656d6f766520616c6c206f70657261746f72730000000000006044820152606401610155565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260208190526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055600180549161028683610532565b803573ffffffffffffffffffffffffffffffffffffffff8116811461043757600080fd5b919050565b60008060006060848603121561045157600080fd5b61045a84610413565b925061046860208501610413565b915060408401357fffffffff000000000000000000000000000000000000000000000000000000008116811461049d57600080fd5b809150509250925092565b6000602082840312156104ba57600080fd5b6104c382610413565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561052b5761052b6104ca565b5060010190565b600081610541576105416104ca565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019056fea2646970667358221220849b79a235187040c0384716f9228587c0638b17222f3587723991bfe1f44f3064736f6c634300080b0033",
}

// TokenAuthorityABI is the input ABI used to generate the binding from.
// Deprecated: Use TokenAuthorityMetaData.ABI instead.
var TokenAuthorityABI = TokenAuthorityMetaData.ABI

// TokenAuthorityBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TokenAuthorityMetaData.Bin instead.
var TokenAuthorityBin = TokenAuthorityMetaData.Bin

// DeployTokenAuthority deploys a new Ethereum contract, binding an instance of TokenAuthority to it.
func DeployTokenAuthority(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *TokenAuthority, error) {
	parsed, err := TokenAuthorityMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TokenAuthorityBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TokenAuthority{TokenAuthorityCaller: TokenAuthorityCaller{contract: contract}, TokenAuthorityTransactor: TokenAuthorityTransactor{contract: contract}, TokenAuthorityFilterer: TokenAuthorityFilterer{contract: contract}}, nil
}

// TokenAuthority is an auto generated Go binding around an Ethereum contract.
type TokenAuthority struct {
	TokenAuthorityCaller     // Read-only binding to the contract
	TokenAuthorityTransactor // Write-only binding to the contract
	TokenAuthorityFilterer   // Log filterer for contract events
}

// TokenAuthorityCaller is an auto generated read-only Go binding around an Ethereum contract.
type TokenAuthorityCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenAuthorityTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TokenAuthorityTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenAuthorityFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TokenAuthorityFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenAuthoritySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TokenAuthoritySession struct {
	Contract     *TokenAuthority   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TokenAuthorityCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TokenAuthorityCallerSession struct {
	Contract *TokenAuthorityCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// TokenAuthorityTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TokenAuthorityTransactorSession struct {
	Contract     *TokenAuthorityTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// TokenAuthorityRaw is an auto generated low-level Go binding around an Ethereum contract.
type TokenAuthorityRaw struct {
	Contract *TokenAuthority // Generic contract binding to access the raw methods on
}

// TokenAuthorityCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TokenAuthorityCallerRaw struct {
	Contract *TokenAuthorityCaller // Generic read-only contract binding to access the raw methods on
}

// TokenAuthorityTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TokenAuthorityTransactorRaw struct {
	Contract *TokenAuthorityTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTokenAuthority creates a new instance of TokenAuthority, bound to a specific deployed contract.
func NewTokenAuthority(address common.Address, backend bind.ContractBackend) (*TokenAuthority, error) {
	contract, err := bindTokenAuthority(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TokenAuthority{TokenAuthorityCaller: TokenAuthorityCaller{contract: contract}, TokenAuthorityTransactor: TokenAuthorityTransactor{contract: contract}, TokenAuthorityFilterer: TokenAuthorityFilterer{contract: contract}}, nil
}

// NewTokenAuthorityCaller creates a new read-only instance of TokenAuthority, bound to a specific deployed contract.
func NewTokenAuthorityCaller(address common.Address, caller bind.ContractCaller) (*TokenAuthorityCaller, error) {
	contract, err := bindTokenAuthority(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TokenAuthorityCaller{contract: contract}, nil
}

// NewTokenAuthorityTransactor creates a new write-only instance of TokenAuthority, bound to a specific deployed contract.
func NewTokenAuthorityTransactor(address common.Address, transactor bind.ContractTransactor) (*TokenAuthorityTransactor, error) {
	contract, err := bindTokenAuthority(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TokenAuthorityTransactor{contract: contract}, nil
}

// NewTokenAuthorityFilterer creates a new log filterer instance of TokenAuthority, bound to a specific deployed contract.
func NewTokenAuthorityFilterer(address common.Address, filterer bind.ContractFilterer) (*TokenAuthorityFilterer, error) {
	contract, err := bindTokenAuthority(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TokenAuthorityFilterer{contract: contract}, nil
}

// bindTokenAuthority binds a generic wrapper to an already deployed contract.
func bindTokenAuthority(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TokenAuthorityABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TokenAuthority *TokenAuthorityRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TokenAuthority.Contract.TokenAuthorityCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TokenAuthority *TokenAuthorityRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenAuthority.Contract.TokenAuthorityTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TokenAuthority *TokenAuthorityRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TokenAuthority.Contract.TokenAuthorityTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TokenAuthority *TokenAuthorityCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TokenAuthority.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TokenAuthority *TokenAuthorityTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenAuthority.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TokenAuthority *TokenAuthorityTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TokenAuthority.Contract.contract.Transact(opts, method, params...)
}

// CanCall is a free data retrieval call binding the contract method 0xb7009613.
//
// Solidity: function canCall(address , address , bytes4 ) view returns(bool)
func (_TokenAuthority *TokenAuthorityCaller) CanCall(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address, arg2 [4]byte) (bool, error) {
	var out []interface{}
	err := _TokenAuthority.contract.Call(opts, &out, "canCall", arg0, arg1, arg2)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanCall is a free data retrieval call binding the contract method 0xb7009613.
//
// Solidity: function canCall(address , address , bytes4 ) view returns(bool)
func (_TokenAuthority *TokenAuthoritySession) CanCall(arg0 common.Address, arg1 common.Address, arg2 [4]byte) (bool, error) {
	return _TokenAuthority.Contract.CanCall(&_TokenAuthority.CallOpts, arg0, arg1, arg2)
}

// CanCall is a free data retrieval call binding the contract method 0xb7009613.
//
// Solidity: function canCall(address , address , bytes4 ) view returns(bool)
func (_TokenAuthority *TokenAuthorityCallerSession) CanCall(arg0 common.Address, arg1 common.Address, arg2 [4]byte) (bool, error) {
	return _TokenAuthority.Contract.CanCall(&_TokenAuthority.CallOpts, arg0, arg1, arg2)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_TokenAuthority *TokenAuthorityTransactor) GrantOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _TokenAuthority.contract.Transact(opts, "grantOperator", _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_TokenAuthority *TokenAuthoritySession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _TokenAuthority.Contract.GrantOperator(&_TokenAuthority.TransactOpts, _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_TokenAuthority *TokenAuthorityTransactorSession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _TokenAuthority.Contract.GrantOperator(&_TokenAuthority.TransactOpts, _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_TokenAuthority *TokenAuthorityTransactor) RevokeOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _TokenAuthority.contract.Transact(opts, "revokeOperator", _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_TokenAuthority *TokenAuthoritySession) RevokeOperator(_operator common.Address) (*types.Transaction, error) {
	return _TokenAuthority.Contract.RevokeOperator(&_TokenAuthority.TransactOpts, _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_TokenAuthority *TokenAuthorityTransactorSession) RevokeOperator(_operator common.Address) (*types.Transaction, error) {
	return _TokenAuthority.Contract.RevokeOperator(&_TokenAuthority.TransactOpts, _operator)
}

// TokenMigratorMetaData contains all meta data concerning the TokenMigrator contract.
var TokenMigratorMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"Started\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"Stopped\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSource\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrateAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"}],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50600280546001600160a01b0319163390811790915561002f90610034565b610129565b6002546001600160a01b031633148061005c57503360009081526020819052604090205460ff165b6100c65760405162461bcd60e51b815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527037b934bd32b21037b832b930ba37b9399760791b606482015260840160405180910390fd5b6001600160a01b0381166000908152602081905260408120805460ff191660019081179091558054916100f883610100565b919050555050565b600060001982141561012257634e487b7160e01b600052601160045260246000fd5b5060010190565b61107b806101386000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80634a77f8701161005b5780634a77f87014610100578063afa293d414610108578063e348da1314610126578063fad8b32a1461013957600080fd5b806307da68f51461008d57806316ad9542146100975780633ccfe887146100da578063454b0608146100ed575b600080fd5b61009561014c565b005b60075473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6100956100e8366004610eb3565b610327565b6100956100fb366004610ee6565b6106bd565b6100956106ca565b60065473ffffffffffffffffffffffffffffffffffffffff166100b1565b610095610134366004610eff565b61088c565b610095610147366004610eff565b6109b2565b60025473ffffffffffffffffffffffffffffffffffffffff1633148061018157503360009081526020819052604090205460ff165b610212576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527f6f72697a6564206f70657261746f72732e00000000000000000000000000000060648201526084015b60405180910390fd5b60025474010000000000000000000000000000000000000000900460ff16610296576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f6d6967726174696f6e206e6f74207374617274656400000000000000000000006044820152606401610209565b600280547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff169055600680547fffffffffffffffffffffffff00000000000000000000000000000000000000009081169091556007805490911690556040513381527f55c4adf1f68f084b809304657594a92ba835ada8d3b5340955bf05746723c05b9060200160405180910390a1565b60025473ffffffffffffffffffffffffffffffffffffffff1633148061035c57503360009081526020819052604090205460ff165b6103e8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527f6f72697a6564206f70657261746f72732e0000000000000000000000000000006064820152608401610209565b6103f182610b37565b6104a4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526044602482018190527f736f7572636520646f6573206e6f742061707065617220746f20626520616e20908201527f455243323020286661696c65642063616c6c20746f20746f74616c537570706c60648201527f7928292900000000000000000000000000000000000000000000000000000000608482015260a401610209565b6104ad81610b37565b61055f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604960248201527f64657374696e6174696f6e20646f6573206e6f742061707065617220746f206260448201527f6520616e20455243323020286661696c65642063616c6c20746f20746f74616c60648201527f537570706c792829290000000000000000000000000000000000000000000000608482015260a401610209565b60025474010000000000000000000000000000000000000000900460ff16156105e4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f6d6967726174696f6e2068617320616c726561647920737461727465640000006044820152606401610209565b600280547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001790556006805473ffffffffffffffffffffffffffffffffffffffff8481167fffffffffffffffffffffffff000000000000000000000000000000000000000092831681179093556007805491851691909216811790915560408051928352602083019190915233908201527fe7ccbdddf2d84fab545fb1aad35fd684ef7cce1df6df25facfb32fe3de037f1d9060600160405180910390a15050565b6106c73382610c31565b50565b6006546040517f70a0823100000000000000000000000000000000000000000000000000000000815233600482018190529160009173ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa15801561073e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107629190610f1a565b6006546040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301523060248301529293506000929091169063dd62ed3e90604401602060405180830381865afa1580156107de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108029190610f1a565b905060006108108284610e71565b90506000811161087c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f6e6f20746f6b656e7320617661696c61626c6520746f206d69677261746500006044820152606401610209565b6108868482610c31565b50505050565b60025473ffffffffffffffffffffffffffffffffffffffff163314806108c157503360009081526020819052604090205460ff165b61094d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527f6f72697a6564206f70657261746f72732e0000000000000000000000000000006064820152608401610209565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260208190526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660019081179091558054916109aa83610f62565b919050555050565b60025473ffffffffffffffffffffffffffffffffffffffff163314806109e757503360009081526020819052604090205460ff165b610a73576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527f6f72697a6564206f70657261746f72732e0000000000000000000000000000006064820152608401610209565b6001805411610ade576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f43616e27742072656d6f766520616c6c206f70657261746f72730000000000006044820152606401610209565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260208190526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905560018054916109aa83610f9b565b60408051600481526024810182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f18160ddd000000000000000000000000000000000000000000000000000000001790529051600091829160609173ffffffffffffffffffffffffffffffffffffffff861691610bb99190610fd0565b6000604051808303816000865af19150503d8060008114610bf6576040519150601f19603f3d011682016040523d82523d6000602084013e610bfb565b606091505b5080519193509150600090610c199083016020908101908401610f1a565b9050828015610c285750600081115b95945050505050565b73ffffffffffffffffffffffffffffffffffffffff821660009081526004602052604090205460ff16610d03576003805460018181019092557fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180547fffffffffffffffffffffffff0000000000000000000000000000000000000000163317905573ffffffffffffffffffffffffffffffffffffffff8316600090815260046020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690911790555b73ffffffffffffffffffffffffffffffffffffffff821660009081526005602052604081208054839290610d3890849061100b565b90915550506006546040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015230602483015260448201849052909116906323b872dd906064016020604051808303816000875af1158015610dbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de09190611023565b506007546040517f40c10f1900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015260248201849052909116906340c10f1990604401600060405180830381600087803b158015610e5557600080fd5b505af1158015610e69573d6000803e3d6000fd5b505050505050565b600081831115610e815781610e83565b825b9392505050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610eae57600080fd5b919050565b60008060408385031215610ec657600080fd5b610ecf83610e8a565b9150610edd60208401610e8a565b90509250929050565b600060208284031215610ef857600080fd5b5035919050565b600060208284031215610f1157600080fd5b610e8382610e8a565b600060208284031215610f2c57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610f9457610f94610f33565b5060010190565b600081610faa57610faa610f33565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b6000825160005b81811015610ff15760208186018101518583015201610fd7565b81811115611000576000828501525b509190910192915050565b6000821982111561101e5761101e610f33565b500190565b60006020828403121561103557600080fd5b81518015158114610e8357600080fdfea264697066735822122096eedbcca11be17beb0b84f4bb6a5f0ca6d144495d061e6a9ce793f59cbf951064736f6c634300080b0033",
}

// TokenMigratorABI is the input ABI used to generate the binding from.
// Deprecated: Use TokenMigratorMetaData.ABI instead.
var TokenMigratorABI = TokenMigratorMetaData.ABI

// TokenMigratorBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TokenMigratorMetaData.Bin instead.
var TokenMigratorBin = TokenMigratorMetaData.Bin

// DeployTokenMigrator deploys a new Ethereum contract, binding an instance of TokenMigrator to it.
func DeployTokenMigrator(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *TokenMigrator, error) {
	parsed, err := TokenMigratorMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TokenMigratorBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TokenMigrator{TokenMigratorCaller: TokenMigratorCaller{contract: contract}, TokenMigratorTransactor: TokenMigratorTransactor{contract: contract}, TokenMigratorFilterer: TokenMigratorFilterer{contract: contract}}, nil
}

// TokenMigrator is an auto generated Go binding around an Ethereum contract.
type TokenMigrator struct {
	TokenMigratorCaller     // Read-only binding to the contract
	TokenMigratorTransactor // Write-only binding to the contract
	TokenMigratorFilterer   // Log filterer for contract events
}

// TokenMigratorCaller is an auto generated read-only Go binding around an Ethereum contract.
type TokenMigratorCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenMigratorTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TokenMigratorTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenMigratorFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TokenMigratorFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenMigratorSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TokenMigratorSession struct {
	Contract     *TokenMigrator    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TokenMigratorCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TokenMigratorCallerSession struct {
	Contract *TokenMigratorCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// TokenMigratorTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TokenMigratorTransactorSession struct {
	Contract     *TokenMigratorTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// TokenMigratorRaw is an auto generated low-level Go binding around an Ethereum contract.
type TokenMigratorRaw struct {
	Contract *TokenMigrator // Generic contract binding to access the raw methods on
}

// TokenMigratorCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TokenMigratorCallerRaw struct {
	Contract *TokenMigratorCaller // Generic read-only contract binding to access the raw methods on
}

// TokenMigratorTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TokenMigratorTransactorRaw struct {
	Contract *TokenMigratorTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTokenMigrator creates a new instance of TokenMigrator, bound to a specific deployed contract.
func NewTokenMigrator(address common.Address, backend bind.ContractBackend) (*TokenMigrator, error) {
	contract, err := bindTokenMigrator(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TokenMigrator{TokenMigratorCaller: TokenMigratorCaller{contract: contract}, TokenMigratorTransactor: TokenMigratorTransactor{contract: contract}, TokenMigratorFilterer: TokenMigratorFilterer{contract: contract}}, nil
}

// NewTokenMigratorCaller creates a new read-only instance of TokenMigrator, bound to a specific deployed contract.
func NewTokenMigratorCaller(address common.Address, caller bind.ContractCaller) (*TokenMigratorCaller, error) {
	contract, err := bindTokenMigrator(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TokenMigratorCaller{contract: contract}, nil
}

// NewTokenMigratorTransactor creates a new write-only instance of TokenMigrator, bound to a specific deployed contract.
func NewTokenMigratorTransactor(address common.Address, transactor bind.ContractTransactor) (*TokenMigratorTransactor, error) {
	contract, err := bindTokenMigrator(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TokenMigratorTransactor{contract: contract}, nil
}

// NewTokenMigratorFilterer creates a new log filterer instance of TokenMigrator, bound to a specific deployed contract.
func NewTokenMigratorFilterer(address common.Address, filterer bind.ContractFilterer) (*TokenMigratorFilterer, error) {
	contract, err := bindTokenMigrator(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TokenMigratorFilterer{contract: contract}, nil
}

// bindTokenMigrator binds a generic wrapper to an already deployed contract.
func bindTokenMigrator(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TokenMigratorABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TokenMigrator *TokenMigratorRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TokenMigrator.Contract.TokenMigratorCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TokenMigrator *TokenMigratorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenMigrator.Contract.TokenMigratorTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TokenMigrator *TokenMigratorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TokenMigrator.Contract.TokenMigratorTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TokenMigrator *TokenMigratorCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TokenMigrator.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TokenMigrator *TokenMigratorTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenMigrator.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TokenMigrator *TokenMigratorTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TokenMigrator.Contract.contract.Transact(opts, method, params...)
}

// GetDestination is a free data retrieval call binding the contract method 0x16ad9542.
//
// Solidity: function getDestination() view returns(address)
func (_TokenMigrator *TokenMigratorCaller) GetDestination(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TokenMigrator.contract.Call(opts, &out, "getDestination")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetDestination is a free data retrieval call binding the contract method 0x16ad9542.
//
// Solidity: function getDestination() view returns(address)
func (_TokenMigrator *TokenMigratorSession) GetDestination() (common.Address, error) {
	return _TokenMigrator.Contract.GetDestination(&_TokenMigrator.CallOpts)
}

// GetDestination is a free data retrieval call binding the contract method 0x16ad9542.
//
// Solidity: function getDestination() view returns(address)
func (_TokenMigrator *TokenMigratorCallerSession) GetDestination() (common.Address, error) {
	return _TokenMigrator.Contract.GetDestination(&_TokenMigrator.CallOpts)
}

// GetSource is a free data retrieval call binding the contract method 0xafa293d4.
//
// Solidity: function getSource() view returns(address)
func (_TokenMigrator *TokenMigratorCaller) GetSource(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TokenMigrator.contract.Call(opts, &out, "getSource")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetSource is a free data retrieval call binding the contract method 0xafa293d4.
//
// Solidity: function getSource() view returns(address)
func (_TokenMigrator *TokenMigratorSession) GetSource() (common.Address, error) {
	return _TokenMigrator.Contract.GetSource(&_TokenMigrator.CallOpts)
}

// GetSource is a free data retrieval call binding the contract method 0xafa293d4.
//
// Solidity: function getSource() view returns(address)
func (_TokenMigrator *TokenMigratorCallerSession) GetSource() (common.Address, error) {
	return _TokenMigrator.Contract.GetSource(&_TokenMigrator.CallOpts)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_TokenMigrator *TokenMigratorTransactor) GrantOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _TokenMigrator.contract.Transact(opts, "grantOperator", _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_TokenMigrator *TokenMigratorSession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _TokenMigrator.Contract.GrantOperator(&_TokenMigrator.TransactOpts, _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_TokenMigrator *TokenMigratorTransactorSession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _TokenMigrator.Contract.GrantOperator(&_TokenMigrator.TransactOpts, _operator)
}

// Migrate is a paid mutator transaction binding the contract method 0x454b0608.
//
// Solidity: function migrate(uint256 amount) returns()
func (_TokenMigrator *TokenMigratorTransactor) Migrate(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _TokenMigrator.contract.Transact(opts, "migrate", amount)
}

// Migrate is a paid mutator transaction binding the contract method 0x454b0608.
//
// Solidity: function migrate(uint256 amount) returns()
func (_TokenMigrator *TokenMigratorSession) Migrate(amount *big.Int) (*types.Transaction, error) {
	return _TokenMigrator.Contract.Migrate(&_TokenMigrator.TransactOpts, amount)
}

// Migrate is a paid mutator transaction binding the contract method 0x454b0608.
//
// Solidity: function migrate(uint256 amount) returns()
func (_TokenMigrator *TokenMigratorTransactorSession) Migrate(amount *big.Int) (*types.Transaction, error) {
	return _TokenMigrator.Contract.Migrate(&_TokenMigrator.TransactOpts, amount)
}

// MigrateAll is a paid mutator transaction binding the contract method 0x4a77f870.
//
// Solidity: function migrateAll() returns()
func (_TokenMigrator *TokenMigratorTransactor) MigrateAll(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenMigrator.contract.Transact(opts, "migrateAll")
}

// MigrateAll is a paid mutator transaction binding the contract method 0x4a77f870.
//
// Solidity: function migrateAll() returns()
func (_TokenMigrator *TokenMigratorSession) MigrateAll() (*types.Transaction, error) {
	return _TokenMigrator.Contract.MigrateAll(&_TokenMigrator.TransactOpts)
}

// MigrateAll is a paid mutator transaction binding the contract method 0x4a77f870.
//
// Solidity: function migrateAll() returns()
func (_TokenMigrator *TokenMigratorTransactorSession) MigrateAll() (*types.Transaction, error) {
	return _TokenMigrator.Contract.MigrateAll(&_TokenMigrator.TransactOpts)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_TokenMigrator *TokenMigratorTransactor) RevokeOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _TokenMigrator.contract.Transact(opts, "revokeOperator", _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_TokenMigrator *TokenMigratorSession) RevokeOperator(_operator common.Address) (*types.Transaction, error) {
	return _TokenMigrator.Contract.RevokeOperator(&_TokenMigrator.TransactOpts, _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_TokenMigrator *TokenMigratorTransactorSession) RevokeOperator(_operator common.Address) (*types.Transaction, error) {
	return _TokenMigrator.Contract.RevokeOperator(&_TokenMigrator.TransactOpts, _operator)
}

// Start is a paid mutator transaction binding the contract method 0x3ccfe887.
//
// Solidity: function start(address src, address dst) returns()
func (_TokenMigrator *TokenMigratorTransactor) Start(opts *bind.TransactOpts, src common.Address, dst common.Address) (*types.Transaction, error) {
	return _TokenMigrator.contract.Transact(opts, "start", src, dst)
}

// Start is a paid mutator transaction binding the contract method 0x3ccfe887.
//
// Solidity: function start(address src, address dst) returns()
func (_TokenMigrator *TokenMigratorSession) Start(src common.Address, dst common.Address) (*types.Transaction, error) {
	return _TokenMigrator.Contract.Start(&_TokenMigrator.TransactOpts, src, dst)
}

// Start is a paid mutator transaction binding the contract method 0x3ccfe887.
//
// Solidity: function start(address src, address dst) returns()
func (_TokenMigrator *TokenMigratorTransactorSession) Start(src common.Address, dst common.Address) (*types.Transaction, error) {
	return _TokenMigrator.Contract.Start(&_TokenMigrator.TransactOpts, src, dst)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_TokenMigrator *TokenMigratorTransactor) Stop(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenMigrator.contract.Transact(opts, "stop")
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_TokenMigrator *TokenMigratorSession) Stop() (*types.Transaction, error) {
	return _TokenMigrator.Contract.Stop(&_TokenMigrator.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_TokenMigrator *TokenMigratorTransactorSession) Stop() (*types.Transaction, error) {
	return _TokenMigrator.Contract.Stop(&_TokenMigrator.TransactOpts)
}

// TokenMigratorStartedIterator is returned from FilterStarted and is used to iterate over the raw logs and unpacked data for Started events raised by the TokenMigrator contract.
type TokenMigratorStartedIterator struct {
	Event *TokenMigratorStarted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenMigratorStartedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenMigratorStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenMigratorStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenMigratorStartedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenMigratorStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenMigratorStarted represents a Started event raised by the TokenMigrator contract.
type TokenMigratorStarted struct {
	Source      common.Address
	Destination common.Address
	Who         common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterStarted is a free log retrieval operation binding the contract event 0xe7ccbdddf2d84fab545fb1aad35fd684ef7cce1df6df25facfb32fe3de037f1d.
//
// Solidity: event Started(address source, address destination, address who)
func (_TokenMigrator *TokenMigratorFilterer) FilterStarted(opts *bind.FilterOpts) (*TokenMigratorStartedIterator, error) {

	logs, sub, err := _TokenMigrator.contract.FilterLogs(opts, "Started")
	if err != nil {
		return nil, err
	}
	return &TokenMigratorStartedIterator{contract: _TokenMigrator.contract, event: "Started", logs: logs, sub: sub}, nil
}

// WatchStarted is a free log subscription operation binding the contract event 0xe7ccbdddf2d84fab545fb1aad35fd684ef7cce1df6df25facfb32fe3de037f1d.
//
// Solidity: event Started(address source, address destination, address who)
func (_TokenMigrator *TokenMigratorFilterer) WatchStarted(opts *bind.WatchOpts, sink chan<- *TokenMigratorStarted) (event.Subscription, error) {

	logs, sub, err := _TokenMigrator.contract.WatchLogs(opts, "Started")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenMigratorStarted)
				if err := _TokenMigrator.contract.UnpackLog(event, "Started", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStarted is a log parse operation binding the contract event 0xe7ccbdddf2d84fab545fb1aad35fd684ef7cce1df6df25facfb32fe3de037f1d.
//
// Solidity: event Started(address source, address destination, address who)
func (_TokenMigrator *TokenMigratorFilterer) ParseStarted(log types.Log) (*TokenMigratorStarted, error) {
	event := new(TokenMigratorStarted)
	if err := _TokenMigrator.contract.UnpackLog(event, "Started", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenMigratorStoppedIterator is returned from FilterStopped and is used to iterate over the raw logs and unpacked data for Stopped events raised by the TokenMigrator contract.
type TokenMigratorStoppedIterator struct {
	Event *TokenMigratorStopped // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenMigratorStoppedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenMigratorStopped)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenMigratorStopped)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenMigratorStoppedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenMigratorStoppedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenMigratorStopped represents a Stopped event raised by the TokenMigrator contract.
type TokenMigratorStopped struct {
	Who common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterStopped is a free log retrieval operation binding the contract event 0x55c4adf1f68f084b809304657594a92ba835ada8d3b5340955bf05746723c05b.
//
// Solidity: event Stopped(address who)
func (_TokenMigrator *TokenMigratorFilterer) FilterStopped(opts *bind.FilterOpts) (*TokenMigratorStoppedIterator, error) {

	logs, sub, err := _TokenMigrator.contract.FilterLogs(opts, "Stopped")
	if err != nil {
		return nil, err
	}
	return &TokenMigratorStoppedIterator{contract: _TokenMigrator.contract, event: "Stopped", logs: logs, sub: sub}, nil
}

// WatchStopped is a free log subscription operation binding the contract event 0x55c4adf1f68f084b809304657594a92ba835ada8d3b5340955bf05746723c05b.
//
// Solidity: event Stopped(address who)
func (_TokenMigrator *TokenMigratorFilterer) WatchStopped(opts *bind.WatchOpts, sink chan<- *TokenMigratorStopped) (event.Subscription, error) {

	logs, sub, err := _TokenMigrator.contract.WatchLogs(opts, "Stopped")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenMigratorStopped)
				if err := _TokenMigrator.contract.UnpackLog(event, "Stopped", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStopped is a log parse operation binding the contract event 0x55c4adf1f68f084b809304657594a92ba835ada8d3b5340955bf05746723c05b.
//
// Solidity: event Stopped(address who)
func (_TokenMigrator *TokenMigratorFilterer) ParseStopped(log types.Log) (*TokenMigratorStopped, error) {
	event := new(TokenMigratorStopped)
	if err := _TokenMigrator.contract.UnpackLog(event, "Stopped", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenMigratorEventsMetaData contains all meta data concerning the TokenMigratorEvents contract.
var TokenMigratorEventsMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"Started\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"Stopped\",\"type\":\"event\"}]",
	Bin: "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea264697066735822122093f29d2b5c3130fe6071d003c521e86a23657437a6d5e656e7f1bb628726e38164736f6c634300080b0033",
}

// TokenMigratorEventsABI is the input ABI used to generate the binding from.
// Deprecated: Use TokenMigratorEventsMetaData.ABI instead.
var TokenMigratorEventsABI = TokenMigratorEventsMetaData.ABI

// TokenMigratorEventsBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TokenMigratorEventsMetaData.Bin instead.
var TokenMigratorEventsBin = TokenMigratorEventsMetaData.Bin

// DeployTokenMigratorEvents deploys a new Ethereum contract, binding an instance of TokenMigratorEvents to it.
func DeployTokenMigratorEvents(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *TokenMigratorEvents, error) {
	parsed, err := TokenMigratorEventsMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TokenMigratorEventsBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TokenMigratorEvents{TokenMigratorEventsCaller: TokenMigratorEventsCaller{contract: contract}, TokenMigratorEventsTransactor: TokenMigratorEventsTransactor{contract: contract}, TokenMigratorEventsFilterer: TokenMigratorEventsFilterer{contract: contract}}, nil
}

// TokenMigratorEvents is an auto generated Go binding around an Ethereum contract.
type TokenMigratorEvents struct {
	TokenMigratorEventsCaller     // Read-only binding to the contract
	TokenMigratorEventsTransactor // Write-only binding to the contract
	TokenMigratorEventsFilterer   // Log filterer for contract events
}

// TokenMigratorEventsCaller is an auto generated read-only Go binding around an Ethereum contract.
type TokenMigratorEventsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenMigratorEventsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TokenMigratorEventsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenMigratorEventsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TokenMigratorEventsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenMigratorEventsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TokenMigratorEventsSession struct {
	Contract     *TokenMigratorEvents // Generic contract binding to set the session for
	CallOpts     bind.CallOpts        // Call options to use throughout this session
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// TokenMigratorEventsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TokenMigratorEventsCallerSession struct {
	Contract *TokenMigratorEventsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts              // Call options to use throughout this session
}

// TokenMigratorEventsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TokenMigratorEventsTransactorSession struct {
	Contract     *TokenMigratorEventsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts              // Transaction auth options to use throughout this session
}

// TokenMigratorEventsRaw is an auto generated low-level Go binding around an Ethereum contract.
type TokenMigratorEventsRaw struct {
	Contract *TokenMigratorEvents // Generic contract binding to access the raw methods on
}

// TokenMigratorEventsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TokenMigratorEventsCallerRaw struct {
	Contract *TokenMigratorEventsCaller // Generic read-only contract binding to access the raw methods on
}

// TokenMigratorEventsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TokenMigratorEventsTransactorRaw struct {
	Contract *TokenMigratorEventsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTokenMigratorEvents creates a new instance of TokenMigratorEvents, bound to a specific deployed contract.
func NewTokenMigratorEvents(address common.Address, backend bind.ContractBackend) (*TokenMigratorEvents, error) {
	contract, err := bindTokenMigratorEvents(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TokenMigratorEvents{TokenMigratorEventsCaller: TokenMigratorEventsCaller{contract: contract}, TokenMigratorEventsTransactor: TokenMigratorEventsTransactor{contract: contract}, TokenMigratorEventsFilterer: TokenMigratorEventsFilterer{contract: contract}}, nil
}

// NewTokenMigratorEventsCaller creates a new read-only instance of TokenMigratorEvents, bound to a specific deployed contract.
func NewTokenMigratorEventsCaller(address common.Address, caller bind.ContractCaller) (*TokenMigratorEventsCaller, error) {
	contract, err := bindTokenMigratorEvents(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TokenMigratorEventsCaller{contract: contract}, nil
}

// NewTokenMigratorEventsTransactor creates a new write-only instance of TokenMigratorEvents, bound to a specific deployed contract.
func NewTokenMigratorEventsTransactor(address common.Address, transactor bind.ContractTransactor) (*TokenMigratorEventsTransactor, error) {
	contract, err := bindTokenMigratorEvents(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TokenMigratorEventsTransactor{contract: contract}, nil
}

// NewTokenMigratorEventsFilterer creates a new log filterer instance of TokenMigratorEvents, bound to a specific deployed contract.
func NewTokenMigratorEventsFilterer(address common.Address, filterer bind.ContractFilterer) (*TokenMigratorEventsFilterer, error) {
	contract, err := bindTokenMigratorEvents(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TokenMigratorEventsFilterer{contract: contract}, nil
}

// bindTokenMigratorEvents binds a generic wrapper to an already deployed contract.
func bindTokenMigratorEvents(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TokenMigratorEventsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TokenMigratorEvents *TokenMigratorEventsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TokenMigratorEvents.Contract.TokenMigratorEventsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TokenMigratorEvents *TokenMigratorEventsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenMigratorEvents.Contract.TokenMigratorEventsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TokenMigratorEvents *TokenMigratorEventsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TokenMigratorEvents.Contract.TokenMigratorEventsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TokenMigratorEvents *TokenMigratorEventsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TokenMigratorEvents.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TokenMigratorEvents *TokenMigratorEventsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenMigratorEvents.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TokenMigratorEvents *TokenMigratorEventsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TokenMigratorEvents.Contract.contract.Transact(opts, method, params...)
}

// TokenMigratorEventsStartedIterator is returned from FilterStarted and is used to iterate over the raw logs and unpacked data for Started events raised by the TokenMigratorEvents contract.
type TokenMigratorEventsStartedIterator struct {
	Event *TokenMigratorEventsStarted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenMigratorEventsStartedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenMigratorEventsStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenMigratorEventsStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenMigratorEventsStartedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenMigratorEventsStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenMigratorEventsStarted represents a Started event raised by the TokenMigratorEvents contract.
type TokenMigratorEventsStarted struct {
	Source      common.Address
	Destination common.Address
	Who         common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterStarted is a free log retrieval operation binding the contract event 0xe7ccbdddf2d84fab545fb1aad35fd684ef7cce1df6df25facfb32fe3de037f1d.
//
// Solidity: event Started(address source, address destination, address who)
func (_TokenMigratorEvents *TokenMigratorEventsFilterer) FilterStarted(opts *bind.FilterOpts) (*TokenMigratorEventsStartedIterator, error) {

	logs, sub, err := _TokenMigratorEvents.contract.FilterLogs(opts, "Started")
	if err != nil {
		return nil, err
	}
	return &TokenMigratorEventsStartedIterator{contract: _TokenMigratorEvents.contract, event: "Started", logs: logs, sub: sub}, nil
}

// WatchStarted is a free log subscription operation binding the contract event 0xe7ccbdddf2d84fab545fb1aad35fd684ef7cce1df6df25facfb32fe3de037f1d.
//
// Solidity: event Started(address source, address destination, address who)
func (_TokenMigratorEvents *TokenMigratorEventsFilterer) WatchStarted(opts *bind.WatchOpts, sink chan<- *TokenMigratorEventsStarted) (event.Subscription, error) {

	logs, sub, err := _TokenMigratorEvents.contract.WatchLogs(opts, "Started")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenMigratorEventsStarted)
				if err := _TokenMigratorEvents.contract.UnpackLog(event, "Started", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStarted is a log parse operation binding the contract event 0xe7ccbdddf2d84fab545fb1aad35fd684ef7cce1df6df25facfb32fe3de037f1d.
//
// Solidity: event Started(address source, address destination, address who)
func (_TokenMigratorEvents *TokenMigratorEventsFilterer) ParseStarted(log types.Log) (*TokenMigratorEventsStarted, error) {
	event := new(TokenMigratorEventsStarted)
	if err := _TokenMigratorEvents.contract.UnpackLog(event, "Started", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenMigratorEventsStoppedIterator is returned from FilterStopped and is used to iterate over the raw logs and unpacked data for Stopped events raised by the TokenMigratorEvents contract.
type TokenMigratorEventsStoppedIterator struct {
	Event *TokenMigratorEventsStopped // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenMigratorEventsStoppedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenMigratorEventsStopped)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenMigratorEventsStopped)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenMigratorEventsStoppedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenMigratorEventsStoppedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenMigratorEventsStopped represents a Stopped event raised by the TokenMigratorEvents contract.
type TokenMigratorEventsStopped struct {
	Who common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterStopped is a free log retrieval operation binding the contract event 0x55c4adf1f68f084b809304657594a92ba835ada8d3b5340955bf05746723c05b.
//
// Solidity: event Stopped(address who)
func (_TokenMigratorEvents *TokenMigratorEventsFilterer) FilterStopped(opts *bind.FilterOpts) (*TokenMigratorEventsStoppedIterator, error) {

	logs, sub, err := _TokenMigratorEvents.contract.FilterLogs(opts, "Stopped")
	if err != nil {
		return nil, err
	}
	return &TokenMigratorEventsStoppedIterator{contract: _TokenMigratorEvents.contract, event: "Stopped", logs: logs, sub: sub}, nil
}

// WatchStopped is a free log subscription operation binding the contract event 0x55c4adf1f68f084b809304657594a92ba835ada8d3b5340955bf05746723c05b.
//
// Solidity: event Stopped(address who)
func (_TokenMigratorEvents *TokenMigratorEventsFilterer) WatchStopped(opts *bind.WatchOpts, sink chan<- *TokenMigratorEventsStopped) (event.Subscription, error) {

	logs, sub, err := _TokenMigratorEvents.contract.WatchLogs(opts, "Stopped")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenMigratorEventsStopped)
				if err := _TokenMigratorEvents.contract.UnpackLog(event, "Stopped", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStopped is a log parse operation binding the contract event 0x55c4adf1f68f084b809304657594a92ba835ada8d3b5340955bf05746723c05b.
//
// Solidity: event Stopped(address who)
func (_TokenMigratorEvents *TokenMigratorEventsFilterer) ParseStopped(log types.Log) (*TokenMigratorEventsStopped, error) {
	event := new(TokenMigratorEventsStopped)
	if err := _TokenMigratorEvents.contract.UnpackLog(event, "Stopped", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorLocationsMetaData contains all meta data concerning the ValidatorLocations contract.
var ValidatorLocationsMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"ip\",\"type\":\"string\"}],\"name\":\"MyLocation\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"getLocation\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"a\",\"type\":\"address[]\"}],\"name\":\"getLocations\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyLocation\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"ip\",\"type\":\"string\"}],\"name\":\"setMyLocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// ValidatorLocationsABI is the input ABI used to generate the binding from.
// Deprecated: Use ValidatorLocationsMetaData.ABI instead.
var ValidatorLocationsABI = ValidatorLocationsMetaData.ABI

// ValidatorLocations is an auto generated Go binding around an Ethereum contract.
type ValidatorLocations struct {
	ValidatorLocationsCaller     // Read-only binding to the contract
	ValidatorLocationsTransactor // Write-only binding to the contract
	ValidatorLocationsFilterer   // Log filterer for contract events
}

// ValidatorLocationsCaller is an auto generated read-only Go binding around an Ethereum contract.
type ValidatorLocationsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorLocationsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ValidatorLocationsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorLocationsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ValidatorLocationsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorLocationsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ValidatorLocationsSession struct {
	Contract     *ValidatorLocations // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// ValidatorLocationsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ValidatorLocationsCallerSession struct {
	Contract *ValidatorLocationsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// ValidatorLocationsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ValidatorLocationsTransactorSession struct {
	Contract     *ValidatorLocationsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// ValidatorLocationsRaw is an auto generated low-level Go binding around an Ethereum contract.
type ValidatorLocationsRaw struct {
	Contract *ValidatorLocations // Generic contract binding to access the raw methods on
}

// ValidatorLocationsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ValidatorLocationsCallerRaw struct {
	Contract *ValidatorLocationsCaller // Generic read-only contract binding to access the raw methods on
}

// ValidatorLocationsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ValidatorLocationsTransactorRaw struct {
	Contract *ValidatorLocationsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewValidatorLocations creates a new instance of ValidatorLocations, bound to a specific deployed contract.
func NewValidatorLocations(address common.Address, backend bind.ContractBackend) (*ValidatorLocations, error) {
	contract, err := bindValidatorLocations(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ValidatorLocations{ValidatorLocationsCaller: ValidatorLocationsCaller{contract: contract}, ValidatorLocationsTransactor: ValidatorLocationsTransactor{contract: contract}, ValidatorLocationsFilterer: ValidatorLocationsFilterer{contract: contract}}, nil
}

// NewValidatorLocationsCaller creates a new read-only instance of ValidatorLocations, bound to a specific deployed contract.
func NewValidatorLocationsCaller(address common.Address, caller bind.ContractCaller) (*ValidatorLocationsCaller, error) {
	contract, err := bindValidatorLocations(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorLocationsCaller{contract: contract}, nil
}

// NewValidatorLocationsTransactor creates a new write-only instance of ValidatorLocations, bound to a specific deployed contract.
func NewValidatorLocationsTransactor(address common.Address, transactor bind.ContractTransactor) (*ValidatorLocationsTransactor, error) {
	contract, err := bindValidatorLocations(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorLocationsTransactor{contract: contract}, nil
}

// NewValidatorLocationsFilterer creates a new log filterer instance of ValidatorLocations, bound to a specific deployed contract.
func NewValidatorLocationsFilterer(address common.Address, filterer bind.ContractFilterer) (*ValidatorLocationsFilterer, error) {
	contract, err := bindValidatorLocations(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ValidatorLocationsFilterer{contract: contract}, nil
}

// bindValidatorLocations binds a generic wrapper to an already deployed contract.
func bindValidatorLocations(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ValidatorLocationsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorLocations *ValidatorLocationsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorLocations.Contract.ValidatorLocationsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorLocations *ValidatorLocationsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorLocations.Contract.ValidatorLocationsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorLocations *ValidatorLocationsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorLocations.Contract.ValidatorLocationsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorLocations *ValidatorLocationsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorLocations.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorLocations *ValidatorLocationsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorLocations.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorLocations *ValidatorLocationsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorLocations.Contract.contract.Transact(opts, method, params...)
}

// GetLocation is a free data retrieval call binding the contract method 0xd9e0dc59.
//
// Solidity: function getLocation(address a) view returns(string)
func (_ValidatorLocations *ValidatorLocationsCaller) GetLocation(opts *bind.CallOpts, a common.Address) (string, error) {
	var out []interface{}
	err := _ValidatorLocations.contract.Call(opts, &out, "getLocation", a)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetLocation is a free data retrieval call binding the contract method 0xd9e0dc59.
//
// Solidity: function getLocation(address a) view returns(string)
func (_ValidatorLocations *ValidatorLocationsSession) GetLocation(a common.Address) (string, error) {
	return _ValidatorLocations.Contract.GetLocation(&_ValidatorLocations.CallOpts, a)
}

// GetLocation is a free data retrieval call binding the contract method 0xd9e0dc59.
//
// Solidity: function getLocation(address a) view returns(string)
func (_ValidatorLocations *ValidatorLocationsCallerSession) GetLocation(a common.Address) (string, error) {
	return _ValidatorLocations.Contract.GetLocation(&_ValidatorLocations.CallOpts, a)
}

// GetLocations is a free data retrieval call binding the contract method 0x76207f9c.
//
// Solidity: function getLocations(address[] a) view returns(string[])
func (_ValidatorLocations *ValidatorLocationsCaller) GetLocations(opts *bind.CallOpts, a []common.Address) ([]string, error) {
	var out []interface{}
	err := _ValidatorLocations.contract.Call(opts, &out, "getLocations", a)

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// GetLocations is a free data retrieval call binding the contract method 0x76207f9c.
//
// Solidity: function getLocations(address[] a) view returns(string[])
func (_ValidatorLocations *ValidatorLocationsSession) GetLocations(a []common.Address) ([]string, error) {
	return _ValidatorLocations.Contract.GetLocations(&_ValidatorLocations.CallOpts, a)
}

// GetLocations is a free data retrieval call binding the contract method 0x76207f9c.
//
// Solidity: function getLocations(address[] a) view returns(string[])
func (_ValidatorLocations *ValidatorLocationsCallerSession) GetLocations(a []common.Address) ([]string, error) {
	return _ValidatorLocations.Contract.GetLocations(&_ValidatorLocations.CallOpts, a)
}

// GetMyLocation is a free data retrieval call binding the contract method 0x59a8b416.
//
// Solidity: function getMyLocation() view returns(string)
func (_ValidatorLocations *ValidatorLocationsCaller) GetMyLocation(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ValidatorLocations.contract.Call(opts, &out, "getMyLocation")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetMyLocation is a free data retrieval call binding the contract method 0x59a8b416.
//
// Solidity: function getMyLocation() view returns(string)
func (_ValidatorLocations *ValidatorLocationsSession) GetMyLocation() (string, error) {
	return _ValidatorLocations.Contract.GetMyLocation(&_ValidatorLocations.CallOpts)
}

// GetMyLocation is a free data retrieval call binding the contract method 0x59a8b416.
//
// Solidity: function getMyLocation() view returns(string)
func (_ValidatorLocations *ValidatorLocationsCallerSession) GetMyLocation() (string, error) {
	return _ValidatorLocations.Contract.GetMyLocation(&_ValidatorLocations.CallOpts)
}

// SetMyLocation is a paid mutator transaction binding the contract method 0xed7a558c.
//
// Solidity: function setMyLocation(string ip) returns()
func (_ValidatorLocations *ValidatorLocationsTransactor) SetMyLocation(opts *bind.TransactOpts, ip string) (*types.Transaction, error) {
	return _ValidatorLocations.contract.Transact(opts, "setMyLocation", ip)
}

// SetMyLocation is a paid mutator transaction binding the contract method 0xed7a558c.
//
// Solidity: function setMyLocation(string ip) returns()
func (_ValidatorLocations *ValidatorLocationsSession) SetMyLocation(ip string) (*types.Transaction, error) {
	return _ValidatorLocations.Contract.SetMyLocation(&_ValidatorLocations.TransactOpts, ip)
}

// SetMyLocation is a paid mutator transaction binding the contract method 0xed7a558c.
//
// Solidity: function setMyLocation(string ip) returns()
func (_ValidatorLocations *ValidatorLocationsTransactorSession) SetMyLocation(ip string) (*types.Transaction, error) {
	return _ValidatorLocations.Contract.SetMyLocation(&_ValidatorLocations.TransactOpts, ip)
}

// ValidatorLocationsMyLocationIterator is returned from FilterMyLocation and is used to iterate over the raw logs and unpacked data for MyLocation events raised by the ValidatorLocations contract.
type ValidatorLocationsMyLocationIterator struct {
	Event *ValidatorLocationsMyLocation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorLocationsMyLocationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorLocationsMyLocation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorLocationsMyLocation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorLocationsMyLocationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorLocationsMyLocationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorLocationsMyLocation represents a MyLocation event raised by the ValidatorLocations contract.
type ValidatorLocationsMyLocation struct {
	Ip  common.Hash
	Raw types.Log // Blockchain specific contextual infos
}

// FilterMyLocation is a free log retrieval operation binding the contract event 0x94f42dfacdc77a25a5e03baf01c6438d29ae4923eed7742bb1269da152e2470d.
//
// Solidity: event MyLocation(string indexed ip)
func (_ValidatorLocations *ValidatorLocationsFilterer) FilterMyLocation(opts *bind.FilterOpts, ip []string) (*ValidatorLocationsMyLocationIterator, error) {

	var ipRule []interface{}
	for _, ipItem := range ip {
		ipRule = append(ipRule, ipItem)
	}

	logs, sub, err := _ValidatorLocations.contract.FilterLogs(opts, "MyLocation", ipRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorLocationsMyLocationIterator{contract: _ValidatorLocations.contract, event: "MyLocation", logs: logs, sub: sub}, nil
}

// WatchMyLocation is a free log subscription operation binding the contract event 0x94f42dfacdc77a25a5e03baf01c6438d29ae4923eed7742bb1269da152e2470d.
//
// Solidity: event MyLocation(string indexed ip)
func (_ValidatorLocations *ValidatorLocationsFilterer) WatchMyLocation(opts *bind.WatchOpts, sink chan<- *ValidatorLocationsMyLocation, ip []string) (event.Subscription, error) {

	var ipRule []interface{}
	for _, ipItem := range ip {
		ipRule = append(ipRule, ipItem)
	}

	logs, sub, err := _ValidatorLocations.contract.WatchLogs(opts, "MyLocation", ipRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorLocationsMyLocation)
				if err := _ValidatorLocations.contract.UnpackLog(event, "MyLocation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMyLocation is a log parse operation binding the contract event 0x94f42dfacdc77a25a5e03baf01c6438d29ae4923eed7742bb1269da152e2470d.
//
// Solidity: event MyLocation(string indexed ip)
func (_ValidatorLocations *ValidatorLocationsFilterer) ParseMyLocation(log types.Log) (*ValidatorLocationsMyLocation, error) {
	event := new(ValidatorLocationsMyLocation)
	if err := _ValidatorLocations.contract.UnpackLog(event, "MyLocation", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorLocationsEventsMetaData contains all meta data concerning the ValidatorLocationsEvents contract.
var ValidatorLocationsEventsMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"ip\",\"type\":\"string\"}],\"name\":\"MyLocation\",\"type\":\"event\"}]",
}

// ValidatorLocationsEventsABI is the input ABI used to generate the binding from.
// Deprecated: Use ValidatorLocationsEventsMetaData.ABI instead.
var ValidatorLocationsEventsABI = ValidatorLocationsEventsMetaData.ABI

// ValidatorLocationsEvents is an auto generated Go binding around an Ethereum contract.
type ValidatorLocationsEvents struct {
	ValidatorLocationsEventsCaller     // Read-only binding to the contract
	ValidatorLocationsEventsTransactor // Write-only binding to the contract
	ValidatorLocationsEventsFilterer   // Log filterer for contract events
}

// ValidatorLocationsEventsCaller is an auto generated read-only Go binding around an Ethereum contract.
type ValidatorLocationsEventsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorLocationsEventsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ValidatorLocationsEventsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorLocationsEventsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ValidatorLocationsEventsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorLocationsEventsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ValidatorLocationsEventsSession struct {
	Contract     *ValidatorLocationsEvents // Generic contract binding to set the session for
	CallOpts     bind.CallOpts             // Call options to use throughout this session
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// ValidatorLocationsEventsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ValidatorLocationsEventsCallerSession struct {
	Contract *ValidatorLocationsEventsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                   // Call options to use throughout this session
}

// ValidatorLocationsEventsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ValidatorLocationsEventsTransactorSession struct {
	Contract     *ValidatorLocationsEventsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                   // Transaction auth options to use throughout this session
}

// ValidatorLocationsEventsRaw is an auto generated low-level Go binding around an Ethereum contract.
type ValidatorLocationsEventsRaw struct {
	Contract *ValidatorLocationsEvents // Generic contract binding to access the raw methods on
}

// ValidatorLocationsEventsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ValidatorLocationsEventsCallerRaw struct {
	Contract *ValidatorLocationsEventsCaller // Generic read-only contract binding to access the raw methods on
}

// ValidatorLocationsEventsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ValidatorLocationsEventsTransactorRaw struct {
	Contract *ValidatorLocationsEventsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewValidatorLocationsEvents creates a new instance of ValidatorLocationsEvents, bound to a specific deployed contract.
func NewValidatorLocationsEvents(address common.Address, backend bind.ContractBackend) (*ValidatorLocationsEvents, error) {
	contract, err := bindValidatorLocationsEvents(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ValidatorLocationsEvents{ValidatorLocationsEventsCaller: ValidatorLocationsEventsCaller{contract: contract}, ValidatorLocationsEventsTransactor: ValidatorLocationsEventsTransactor{contract: contract}, ValidatorLocationsEventsFilterer: ValidatorLocationsEventsFilterer{contract: contract}}, nil
}

// NewValidatorLocationsEventsCaller creates a new read-only instance of ValidatorLocationsEvents, bound to a specific deployed contract.
func NewValidatorLocationsEventsCaller(address common.Address, caller bind.ContractCaller) (*ValidatorLocationsEventsCaller, error) {
	contract, err := bindValidatorLocationsEvents(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorLocationsEventsCaller{contract: contract}, nil
}

// NewValidatorLocationsEventsTransactor creates a new write-only instance of ValidatorLocationsEvents, bound to a specific deployed contract.
func NewValidatorLocationsEventsTransactor(address common.Address, transactor bind.ContractTransactor) (*ValidatorLocationsEventsTransactor, error) {
	contract, err := bindValidatorLocationsEvents(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorLocationsEventsTransactor{contract: contract}, nil
}

// NewValidatorLocationsEventsFilterer creates a new log filterer instance of ValidatorLocationsEvents, bound to a specific deployed contract.
func NewValidatorLocationsEventsFilterer(address common.Address, filterer bind.ContractFilterer) (*ValidatorLocationsEventsFilterer, error) {
	contract, err := bindValidatorLocationsEvents(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ValidatorLocationsEventsFilterer{contract: contract}, nil
}

// bindValidatorLocationsEvents binds a generic wrapper to an already deployed contract.
func bindValidatorLocationsEvents(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ValidatorLocationsEventsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorLocationsEvents *ValidatorLocationsEventsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorLocationsEvents.Contract.ValidatorLocationsEventsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorLocationsEvents *ValidatorLocationsEventsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorLocationsEvents.Contract.ValidatorLocationsEventsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorLocationsEvents *ValidatorLocationsEventsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorLocationsEvents.Contract.ValidatorLocationsEventsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorLocationsEvents *ValidatorLocationsEventsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorLocationsEvents.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorLocationsEvents *ValidatorLocationsEventsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorLocationsEvents.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorLocationsEvents *ValidatorLocationsEventsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorLocationsEvents.Contract.contract.Transact(opts, method, params...)
}

// ValidatorLocationsEventsMyLocationIterator is returned from FilterMyLocation and is used to iterate over the raw logs and unpacked data for MyLocation events raised by the ValidatorLocationsEvents contract.
type ValidatorLocationsEventsMyLocationIterator struct {
	Event *ValidatorLocationsEventsMyLocation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorLocationsEventsMyLocationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorLocationsEventsMyLocation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorLocationsEventsMyLocation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorLocationsEventsMyLocationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorLocationsEventsMyLocationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorLocationsEventsMyLocation represents a MyLocation event raised by the ValidatorLocationsEvents contract.
type ValidatorLocationsEventsMyLocation struct {
	Ip  common.Hash
	Raw types.Log // Blockchain specific contextual infos
}

// FilterMyLocation is a free log retrieval operation binding the contract event 0x94f42dfacdc77a25a5e03baf01c6438d29ae4923eed7742bb1269da152e2470d.
//
// Solidity: event MyLocation(string indexed ip)
func (_ValidatorLocationsEvents *ValidatorLocationsEventsFilterer) FilterMyLocation(opts *bind.FilterOpts, ip []string) (*ValidatorLocationsEventsMyLocationIterator, error) {

	var ipRule []interface{}
	for _, ipItem := range ip {
		ipRule = append(ipRule, ipItem)
	}

	logs, sub, err := _ValidatorLocationsEvents.contract.FilterLogs(opts, "MyLocation", ipRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorLocationsEventsMyLocationIterator{contract: _ValidatorLocationsEvents.contract, event: "MyLocation", logs: logs, sub: sub}, nil
}

// WatchMyLocation is a free log subscription operation binding the contract event 0x94f42dfacdc77a25a5e03baf01c6438d29ae4923eed7742bb1269da152e2470d.
//
// Solidity: event MyLocation(string indexed ip)
func (_ValidatorLocationsEvents *ValidatorLocationsEventsFilterer) WatchMyLocation(opts *bind.WatchOpts, sink chan<- *ValidatorLocationsEventsMyLocation, ip []string) (event.Subscription, error) {

	var ipRule []interface{}
	for _, ipItem := range ip {
		ipRule = append(ipRule, ipItem)
	}

	logs, sub, err := _ValidatorLocationsEvents.contract.WatchLogs(opts, "MyLocation", ipRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorLocationsEventsMyLocation)
				if err := _ValidatorLocationsEvents.contract.UnpackLog(event, "MyLocation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMyLocation is a log parse operation binding the contract event 0x94f42dfacdc77a25a5e03baf01c6438d29ae4923eed7742bb1269da152e2470d.
//
// Solidity: event MyLocation(string indexed ip)
func (_ValidatorLocationsEvents *ValidatorLocationsEventsFilterer) ParseMyLocation(log types.Log) (*ValidatorLocationsEventsMyLocation, error) {
	event := new(ValidatorLocationsEventsMyLocation)
	if err := _ValidatorLocationsEvents.contract.UnpackLog(event, "MyLocation", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorLocationsFacetMetaData contains all meta data concerning the ValidatorLocationsFacet contract.
var ValidatorLocationsFacetMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"ip\",\"type\":\"string\"}],\"name\":\"MyLocation\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"getLocation\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"a\",\"type\":\"address[]\"}],\"name\":\"getLocations\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyLocation\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"ip\",\"type\":\"string\"}],\"name\":\"setMyLocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50610a53806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806359a8b4161461005157806376207f9c1461006f578063d9e0dc591461008f578063ed7a558c146100a2575b600080fd5b6100596100b7565b604051610066919061075d565b60405180910390f35b61008261007d366004610770565b6100c6565b60405161006691906107e5565b61005961009d366004610865565b6100d9565b6100b56100b036600461089b565b6100ea565b005b60606100c1610138565b905090565b60606100d283836101fd565b9392505050565b60606100e4826103a2565b92915050565b6100f4828261047f565b81816040516101049291906108fb565b604051908190038120907f94f42dfacdc77a25a5e03baf01c6438d29ae4923eed7742bb1269da152e2470d90600090a25050565b3360009081527fd6a809ef2e033c9356226f38ff793e00cfb3b2fc9a21fbb6d92b5183cecec87b60208190526040909120805460609291906101799061090b565b80601f01602080910402602001604051908101604052809291908181526020018280546101a59061090b565b80156101f25780601f106101c7576101008083540402835291602001916101f2565b820191906000526020600020905b8154815290600101906020018083116101d557829003601f168201915b505050505091505090565b60607fd6a809ef2e033c9356226f38ff793e00cfb3b2fc9a21fbb6d92b5183cecec87b60008367ffffffffffffffff81111561023b5761023b61095f565b60405190808252806020026020018201604052801561026e57816020015b60608152602001906001900390816102595790505b50905060005b84811015610399578260008787848181106102915761029161098e565b90506020020160208101906102a69190610865565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080546102eb9061090b565b80601f01602080910402602001604051908101604052809291908181526020018280546103179061090b565b80156103645780601f1061033957610100808354040283529160200191610364565b820191906000526020600020905b81548152906001019060200180831161034757829003601f168201915b505050505082828151811061037b5761037b61098e565b60200260200101819052508080610391906109bd565b915050610274565b50949350505050565b73ffffffffffffffffffffffffffffffffffffffff811660009081527fd6a809ef2e033c9356226f38ff793e00cfb3b2fc9a21fbb6d92b5183cecec87b60208190526040909120805460609291906103f99061090b565b80601f01602080910402602001604051908101604052809291908181526020018280546104259061090b565b80156104725780601f1061044757610100808354040283529160200191610472565b820191906000526020600020905b81548152906001019060200180831161045557829003601f168201915b5050505050915050919050565b6104883361055a565b610518576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f6f6e6c792066756c6c79207374616b6564207061727469636970616e7473206160448201527f6c6c6f7765640000000000000000000000000000000000000000000000000000606482015260840160405180910390fd5b3360009081527fd6a809ef2e033c9356226f38ff793e00cfb3b2fc9a21fbb6d92b5183cecec87b6020819052604090912061055490848461063b565b50505050565b73ffffffffffffffffffffffffffffffffffffffff811660009081527f310970b1d84cbb8af371a12019b396e9511a9b44411c1dabeec3e3d59d9a50f860205260408120547f310970b1d84cbb8af371a12019b396e9511a9b44411c1dabeec3e3d59d9a50f69060ff1680156100d257507f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237ef5473ffffffffffffffffffffffffffffffffffffffff841660009081527f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237f8602052604090205410159392505050565b8280546106479061090b565b90600052602060002090601f01602090048101928261066957600085556106cd565b82601f106106a0578280017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008235161785556106cd565b828001600101855582156106cd579182015b828111156106cd5782358255916020019190600101906106b2565b506106d99291506106dd565b5090565b5b808211156106d957600081556001016106de565b6000815180845260005b81811015610718576020818501810151868301820152016106fc565b8181111561072a576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006100d260208301846106f2565b6000806020838503121561078357600080fd5b823567ffffffffffffffff8082111561079b57600080fd5b818501915085601f8301126107af57600080fd5b8135818111156107be57600080fd5b8660208260051b85010111156107d357600080fd5b60209290920196919550909350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610858577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08886030184526108468583516106f2565b9450928501929085019060010161080c565b5092979650505050505050565b60006020828403121561087757600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146100d257600080fd5b600080602083850312156108ae57600080fd5b823567ffffffffffffffff808211156108c657600080fd5b818501915085601f8301126108da57600080fd5b8135818111156108e957600080fd5b8660208285010111156107d357600080fd5b8183823760009101908152919050565b600181811c9082168061091f57607f821691505b60208210811415610959577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610a16577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b506001019056fea2646970667358221220cfbf375b0004fd443655b6b3d8362e1275d1349772dee5d699c0b26156c394fc64736f6c634300080b0033",
}

// ValidatorLocationsFacetABI is the input ABI used to generate the binding from.
// Deprecated: Use ValidatorLocationsFacetMetaData.ABI instead.
var ValidatorLocationsFacetABI = ValidatorLocationsFacetMetaData.ABI

// ValidatorLocationsFacetBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ValidatorLocationsFacetMetaData.Bin instead.
var ValidatorLocationsFacetBin = ValidatorLocationsFacetMetaData.Bin

// DeployValidatorLocationsFacet deploys a new Ethereum contract, binding an instance of ValidatorLocationsFacet to it.
func DeployValidatorLocationsFacet(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ValidatorLocationsFacet, error) {
	parsed, err := ValidatorLocationsFacetMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ValidatorLocationsFacetBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ValidatorLocationsFacet{ValidatorLocationsFacetCaller: ValidatorLocationsFacetCaller{contract: contract}, ValidatorLocationsFacetTransactor: ValidatorLocationsFacetTransactor{contract: contract}, ValidatorLocationsFacetFilterer: ValidatorLocationsFacetFilterer{contract: contract}}, nil
}

// ValidatorLocationsFacet is an auto generated Go binding around an Ethereum contract.
type ValidatorLocationsFacet struct {
	ValidatorLocationsFacetCaller     // Read-only binding to the contract
	ValidatorLocationsFacetTransactor // Write-only binding to the contract
	ValidatorLocationsFacetFilterer   // Log filterer for contract events
}

// ValidatorLocationsFacetCaller is an auto generated read-only Go binding around an Ethereum contract.
type ValidatorLocationsFacetCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorLocationsFacetTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ValidatorLocationsFacetTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorLocationsFacetFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ValidatorLocationsFacetFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorLocationsFacetSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ValidatorLocationsFacetSession struct {
	Contract     *ValidatorLocationsFacet // Generic contract binding to set the session for
	CallOpts     bind.CallOpts            // Call options to use throughout this session
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// ValidatorLocationsFacetCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ValidatorLocationsFacetCallerSession struct {
	Contract *ValidatorLocationsFacetCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                  // Call options to use throughout this session
}

// ValidatorLocationsFacetTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ValidatorLocationsFacetTransactorSession struct {
	Contract     *ValidatorLocationsFacetTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                  // Transaction auth options to use throughout this session
}

// ValidatorLocationsFacetRaw is an auto generated low-level Go binding around an Ethereum contract.
type ValidatorLocationsFacetRaw struct {
	Contract *ValidatorLocationsFacet // Generic contract binding to access the raw methods on
}

// ValidatorLocationsFacetCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ValidatorLocationsFacetCallerRaw struct {
	Contract *ValidatorLocationsFacetCaller // Generic read-only contract binding to access the raw methods on
}

// ValidatorLocationsFacetTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ValidatorLocationsFacetTransactorRaw struct {
	Contract *ValidatorLocationsFacetTransactor // Generic write-only contract binding to access the raw methods on
}

// NewValidatorLocationsFacet creates a new instance of ValidatorLocationsFacet, bound to a specific deployed contract.
func NewValidatorLocationsFacet(address common.Address, backend bind.ContractBackend) (*ValidatorLocationsFacet, error) {
	contract, err := bindValidatorLocationsFacet(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ValidatorLocationsFacet{ValidatorLocationsFacetCaller: ValidatorLocationsFacetCaller{contract: contract}, ValidatorLocationsFacetTransactor: ValidatorLocationsFacetTransactor{contract: contract}, ValidatorLocationsFacetFilterer: ValidatorLocationsFacetFilterer{contract: contract}}, nil
}

// NewValidatorLocationsFacetCaller creates a new read-only instance of ValidatorLocationsFacet, bound to a specific deployed contract.
func NewValidatorLocationsFacetCaller(address common.Address, caller bind.ContractCaller) (*ValidatorLocationsFacetCaller, error) {
	contract, err := bindValidatorLocationsFacet(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorLocationsFacetCaller{contract: contract}, nil
}

// NewValidatorLocationsFacetTransactor creates a new write-only instance of ValidatorLocationsFacet, bound to a specific deployed contract.
func NewValidatorLocationsFacetTransactor(address common.Address, transactor bind.ContractTransactor) (*ValidatorLocationsFacetTransactor, error) {
	contract, err := bindValidatorLocationsFacet(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorLocationsFacetTransactor{contract: contract}, nil
}

// NewValidatorLocationsFacetFilterer creates a new log filterer instance of ValidatorLocationsFacet, bound to a specific deployed contract.
func NewValidatorLocationsFacetFilterer(address common.Address, filterer bind.ContractFilterer) (*ValidatorLocationsFacetFilterer, error) {
	contract, err := bindValidatorLocationsFacet(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ValidatorLocationsFacetFilterer{contract: contract}, nil
}

// bindValidatorLocationsFacet binds a generic wrapper to an already deployed contract.
func bindValidatorLocationsFacet(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ValidatorLocationsFacetABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorLocationsFacet *ValidatorLocationsFacetRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorLocationsFacet.Contract.ValidatorLocationsFacetCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorLocationsFacet *ValidatorLocationsFacetRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorLocationsFacet.Contract.ValidatorLocationsFacetTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorLocationsFacet *ValidatorLocationsFacetRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorLocationsFacet.Contract.ValidatorLocationsFacetTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorLocationsFacet *ValidatorLocationsFacetCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorLocationsFacet.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorLocationsFacet *ValidatorLocationsFacetTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorLocationsFacet.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorLocationsFacet *ValidatorLocationsFacetTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorLocationsFacet.Contract.contract.Transact(opts, method, params...)
}

// GetLocation is a free data retrieval call binding the contract method 0xd9e0dc59.
//
// Solidity: function getLocation(address a) view returns(string)
func (_ValidatorLocationsFacet *ValidatorLocationsFacetCaller) GetLocation(opts *bind.CallOpts, a common.Address) (string, error) {
	var out []interface{}
	err := _ValidatorLocationsFacet.contract.Call(opts, &out, "getLocation", a)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetLocation is a free data retrieval call binding the contract method 0xd9e0dc59.
//
// Solidity: function getLocation(address a) view returns(string)
func (_ValidatorLocationsFacet *ValidatorLocationsFacetSession) GetLocation(a common.Address) (string, error) {
	return _ValidatorLocationsFacet.Contract.GetLocation(&_ValidatorLocationsFacet.CallOpts, a)
}

// GetLocation is a free data retrieval call binding the contract method 0xd9e0dc59.
//
// Solidity: function getLocation(address a) view returns(string)
func (_ValidatorLocationsFacet *ValidatorLocationsFacetCallerSession) GetLocation(a common.Address) (string, error) {
	return _ValidatorLocationsFacet.Contract.GetLocation(&_ValidatorLocationsFacet.CallOpts, a)
}

// GetLocations is a free data retrieval call binding the contract method 0x76207f9c.
//
// Solidity: function getLocations(address[] a) view returns(string[])
func (_ValidatorLocationsFacet *ValidatorLocationsFacetCaller) GetLocations(opts *bind.CallOpts, a []common.Address) ([]string, error) {
	var out []interface{}
	err := _ValidatorLocationsFacet.contract.Call(opts, &out, "getLocations", a)

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// GetLocations is a free data retrieval call binding the contract method 0x76207f9c.
//
// Solidity: function getLocations(address[] a) view returns(string[])
func (_ValidatorLocationsFacet *ValidatorLocationsFacetSession) GetLocations(a []common.Address) ([]string, error) {
	return _ValidatorLocationsFacet.Contract.GetLocations(&_ValidatorLocationsFacet.CallOpts, a)
}

// GetLocations is a free data retrieval call binding the contract method 0x76207f9c.
//
// Solidity: function getLocations(address[] a) view returns(string[])
func (_ValidatorLocationsFacet *ValidatorLocationsFacetCallerSession) GetLocations(a []common.Address) ([]string, error) {
	return _ValidatorLocationsFacet.Contract.GetLocations(&_ValidatorLocationsFacet.CallOpts, a)
}

// GetMyLocation is a free data retrieval call binding the contract method 0x59a8b416.
//
// Solidity: function getMyLocation() view returns(string)
func (_ValidatorLocationsFacet *ValidatorLocationsFacetCaller) GetMyLocation(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ValidatorLocationsFacet.contract.Call(opts, &out, "getMyLocation")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetMyLocation is a free data retrieval call binding the contract method 0x59a8b416.
//
// Solidity: function getMyLocation() view returns(string)
func (_ValidatorLocationsFacet *ValidatorLocationsFacetSession) GetMyLocation() (string, error) {
	return _ValidatorLocationsFacet.Contract.GetMyLocation(&_ValidatorLocationsFacet.CallOpts)
}

// GetMyLocation is a free data retrieval call binding the contract method 0x59a8b416.
//
// Solidity: function getMyLocation() view returns(string)
func (_ValidatorLocationsFacet *ValidatorLocationsFacetCallerSession) GetMyLocation() (string, error) {
	return _ValidatorLocationsFacet.Contract.GetMyLocation(&_ValidatorLocationsFacet.CallOpts)
}

// SetMyLocation is a paid mutator transaction binding the contract method 0xed7a558c.
//
// Solidity: function setMyLocation(string ip) returns()
func (_ValidatorLocationsFacet *ValidatorLocationsFacetTransactor) SetMyLocation(opts *bind.TransactOpts, ip string) (*types.Transaction, error) {
	return _ValidatorLocationsFacet.contract.Transact(opts, "setMyLocation", ip)
}

// SetMyLocation is a paid mutator transaction binding the contract method 0xed7a558c.
//
// Solidity: function setMyLocation(string ip) returns()
func (_ValidatorLocationsFacet *ValidatorLocationsFacetSession) SetMyLocation(ip string) (*types.Transaction, error) {
	return _ValidatorLocationsFacet.Contract.SetMyLocation(&_ValidatorLocationsFacet.TransactOpts, ip)
}

// SetMyLocation is a paid mutator transaction binding the contract method 0xed7a558c.
//
// Solidity: function setMyLocation(string ip) returns()
func (_ValidatorLocationsFacet *ValidatorLocationsFacetTransactorSession) SetMyLocation(ip string) (*types.Transaction, error) {
	return _ValidatorLocationsFacet.Contract.SetMyLocation(&_ValidatorLocationsFacet.TransactOpts, ip)
}

// ValidatorLocationsFacetMyLocationIterator is returned from FilterMyLocation and is used to iterate over the raw logs and unpacked data for MyLocation events raised by the ValidatorLocationsFacet contract.
type ValidatorLocationsFacetMyLocationIterator struct {
	Event *ValidatorLocationsFacetMyLocation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorLocationsFacetMyLocationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorLocationsFacetMyLocation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorLocationsFacetMyLocation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorLocationsFacetMyLocationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorLocationsFacetMyLocationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorLocationsFacetMyLocation represents a MyLocation event raised by the ValidatorLocationsFacet contract.
type ValidatorLocationsFacetMyLocation struct {
	Ip  common.Hash
	Raw types.Log // Blockchain specific contextual infos
}

// FilterMyLocation is a free log retrieval operation binding the contract event 0x94f42dfacdc77a25a5e03baf01c6438d29ae4923eed7742bb1269da152e2470d.
//
// Solidity: event MyLocation(string indexed ip)
func (_ValidatorLocationsFacet *ValidatorLocationsFacetFilterer) FilterMyLocation(opts *bind.FilterOpts, ip []string) (*ValidatorLocationsFacetMyLocationIterator, error) {

	var ipRule []interface{}
	for _, ipItem := range ip {
		ipRule = append(ipRule, ipItem)
	}

	logs, sub, err := _ValidatorLocationsFacet.contract.FilterLogs(opts, "MyLocation", ipRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorLocationsFacetMyLocationIterator{contract: _ValidatorLocationsFacet.contract, event: "MyLocation", logs: logs, sub: sub}, nil
}

// WatchMyLocation is a free log subscription operation binding the contract event 0x94f42dfacdc77a25a5e03baf01c6438d29ae4923eed7742bb1269da152e2470d.
//
// Solidity: event MyLocation(string indexed ip)
func (_ValidatorLocationsFacet *ValidatorLocationsFacetFilterer) WatchMyLocation(opts *bind.WatchOpts, sink chan<- *ValidatorLocationsFacetMyLocation, ip []string) (event.Subscription, error) {

	var ipRule []interface{}
	for _, ipItem := range ip {
		ipRule = append(ipRule, ipItem)
	}

	logs, sub, err := _ValidatorLocationsFacet.contract.WatchLogs(opts, "MyLocation", ipRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorLocationsFacetMyLocation)
				if err := _ValidatorLocationsFacet.contract.UnpackLog(event, "MyLocation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMyLocation is a log parse operation binding the contract event 0x94f42dfacdc77a25a5e03baf01c6438d29ae4923eed7742bb1269da152e2470d.
//
// Solidity: event MyLocation(string indexed ip)
func (_ValidatorLocationsFacet *ValidatorLocationsFacetFilterer) ParseMyLocation(log types.Log) (*ValidatorLocationsFacetMyLocation, error) {
	event := new(ValidatorLocationsFacetMyLocation)
	if err := _ValidatorLocationsFacet.contract.UnpackLog(event, "MyLocation", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorLocationsLibraryMetaData contains all meta data concerning the ValidatorLocationsLibrary contract.
var ValidatorLocationsLibraryMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122060ded91b706dae38bf3f61e441500f4c5cb2b13f3b229e64d2fb1781512c82df64736f6c634300080b0033",
}

// ValidatorLocationsLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use ValidatorLocationsLibraryMetaData.ABI instead.
var ValidatorLocationsLibraryABI = ValidatorLocationsLibraryMetaData.ABI

// ValidatorLocationsLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ValidatorLocationsLibraryMetaData.Bin instead.
var ValidatorLocationsLibraryBin = ValidatorLocationsLibraryMetaData.Bin

// DeployValidatorLocationsLibrary deploys a new Ethereum contract, binding an instance of ValidatorLocationsLibrary to it.
func DeployValidatorLocationsLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ValidatorLocationsLibrary, error) {
	parsed, err := ValidatorLocationsLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ValidatorLocationsLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ValidatorLocationsLibrary{ValidatorLocationsLibraryCaller: ValidatorLocationsLibraryCaller{contract: contract}, ValidatorLocationsLibraryTransactor: ValidatorLocationsLibraryTransactor{contract: contract}, ValidatorLocationsLibraryFilterer: ValidatorLocationsLibraryFilterer{contract: contract}}, nil
}

// ValidatorLocationsLibrary is an auto generated Go binding around an Ethereum contract.
type ValidatorLocationsLibrary struct {
	ValidatorLocationsLibraryCaller     // Read-only binding to the contract
	ValidatorLocationsLibraryTransactor // Write-only binding to the contract
	ValidatorLocationsLibraryFilterer   // Log filterer for contract events
}

// ValidatorLocationsLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type ValidatorLocationsLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorLocationsLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ValidatorLocationsLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorLocationsLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ValidatorLocationsLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorLocationsLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ValidatorLocationsLibrarySession struct {
	Contract     *ValidatorLocationsLibrary // Generic contract binding to set the session for
	CallOpts     bind.CallOpts              // Call options to use throughout this session
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// ValidatorLocationsLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ValidatorLocationsLibraryCallerSession struct {
	Contract *ValidatorLocationsLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                    // Call options to use throughout this session
}

// ValidatorLocationsLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ValidatorLocationsLibraryTransactorSession struct {
	Contract     *ValidatorLocationsLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                    // Transaction auth options to use throughout this session
}

// ValidatorLocationsLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type ValidatorLocationsLibraryRaw struct {
	Contract *ValidatorLocationsLibrary // Generic contract binding to access the raw methods on
}

// ValidatorLocationsLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ValidatorLocationsLibraryCallerRaw struct {
	Contract *ValidatorLocationsLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// ValidatorLocationsLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ValidatorLocationsLibraryTransactorRaw struct {
	Contract *ValidatorLocationsLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewValidatorLocationsLibrary creates a new instance of ValidatorLocationsLibrary, bound to a specific deployed contract.
func NewValidatorLocationsLibrary(address common.Address, backend bind.ContractBackend) (*ValidatorLocationsLibrary, error) {
	contract, err := bindValidatorLocationsLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ValidatorLocationsLibrary{ValidatorLocationsLibraryCaller: ValidatorLocationsLibraryCaller{contract: contract}, ValidatorLocationsLibraryTransactor: ValidatorLocationsLibraryTransactor{contract: contract}, ValidatorLocationsLibraryFilterer: ValidatorLocationsLibraryFilterer{contract: contract}}, nil
}

// NewValidatorLocationsLibraryCaller creates a new read-only instance of ValidatorLocationsLibrary, bound to a specific deployed contract.
func NewValidatorLocationsLibraryCaller(address common.Address, caller bind.ContractCaller) (*ValidatorLocationsLibraryCaller, error) {
	contract, err := bindValidatorLocationsLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorLocationsLibraryCaller{contract: contract}, nil
}

// NewValidatorLocationsLibraryTransactor creates a new write-only instance of ValidatorLocationsLibrary, bound to a specific deployed contract.
func NewValidatorLocationsLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*ValidatorLocationsLibraryTransactor, error) {
	contract, err := bindValidatorLocationsLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorLocationsLibraryTransactor{contract: contract}, nil
}

// NewValidatorLocationsLibraryFilterer creates a new log filterer instance of ValidatorLocationsLibrary, bound to a specific deployed contract.
func NewValidatorLocationsLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*ValidatorLocationsLibraryFilterer, error) {
	contract, err := bindValidatorLocationsLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ValidatorLocationsLibraryFilterer{contract: contract}, nil
}

// bindValidatorLocationsLibrary binds a generic wrapper to an already deployed contract.
func bindValidatorLocationsLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ValidatorLocationsLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorLocationsLibrary *ValidatorLocationsLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorLocationsLibrary.Contract.ValidatorLocationsLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorLocationsLibrary *ValidatorLocationsLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorLocationsLibrary.Contract.ValidatorLocationsLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorLocationsLibrary *ValidatorLocationsLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorLocationsLibrary.Contract.ValidatorLocationsLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorLocationsLibrary *ValidatorLocationsLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorLocationsLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorLocationsLibrary *ValidatorLocationsLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorLocationsLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorLocationsLibrary *ValidatorLocationsLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorLocationsLibrary.Contract.contract.Transact(opts, method, params...)
}

// ValidatorPoolMockMetaData contains all meta data concerning the ValidatorPoolMock contract.
var ValidatorPoolMockMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"hook\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"v\",\"type\":\"address\"}],\"name\":\"addValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getValidator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidatorAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidatorsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeETHDKG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"majorSlash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"minorSlash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeAllValidators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"removeValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ethdkg\",\"type\":\"address\"}],\"name\":\"setETHDKG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040526000805534801561001457600080fd5b50604051610bad380380610bad83398101604081905261003391610053565b5060008055610122565b634e487b7160e01b600052604160045260246000fd5b6000602080838503121561006657600080fd5b82516001600160401b038082111561007d57600080fd5b818501915085601f83011261009157600080fd5b8151818111156100a3576100a361003d565b604051601f8201601f19908116603f011681019083821181831017156100cb576100cb61003d565b8160405282815288868487010111156100e357600080fd5b600093505b8284101561010557848401860151818501870152928501926100e8565b828411156101165760008684830101525b98975050505050505050565b610a7c806101316000396000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c80638785a46011610081578063b5d896271161005b578063b5d8962714610171578063f74e921f146101a9578063facd743b146101be57600080fd5b80638785a46014610114578063a19ebb21146100ce578063a74a97b11461016957600080fd5b806340a141ff116100b257806340a141ff146100ce5780634d238c8e146100f957806357b51c9c1461010c57600080fd5b8063150ef01b146100ce57806327498240146100e3575b600080fd5b6100e16100dc3660046108e1565b6101e1565b005b6002546040519081526020015b60405180910390f35b6100e16101073660046108e1565b6101ed565b6100e16102f8565b6100e16101223660046108e1565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6100e161037c565b61018461017f366004610917565b61044c565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100f0565b6101b16104fa565b6040516100f09190610930565b6101d16101cc3660046108e1565b610569565b60405190151581526020016100f0565b6101ea8161057a565b50565b600080546101fc9060016109b9565b600280546001808201835560008390527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace90910180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff87161790556040805180820190915291549293509091829161028a916109d1565b6fffffffffffffffffffffffffffffffff908116825283811660209283015273ffffffffffffffffffffffffffffffffffffffff9094166000908152600382526040812083519390920151851670010000000000000000000000000000000002929094169190911790559055565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166357b51c9c6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561036257600080fd5b505af1158015610376573d6000803e3d6000fd5b50505050565b6002541561044a576002805460039160009161039a906001906109d1565b815481106103aa576103aa6109e8565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff16835282019290925260400181205560028054806103ed576103ed610a17565b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff000000000000000000000000000000000000000016905501905561037c565b565b60025460009082106104bf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f496e646578206f757420626f756e64617269657321000000000000000000000060448201526064015b60405180910390fd5b600282815481106104d2576104d26109e8565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1692915050565b6060600280548060200260200160405190810160405280929190818152602001828054801561055f57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610534575b5050505050905090565b6000610574826107e9565b92915050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600360209081526040918290208251808401909352546fffffffffffffffffffffffffffffffff808216845270010000000000000000000000000000000090910416908201819052610644576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f56616c696461746f72506f6f6c3a20696e76616c69642076616c696461746f7260448201526064016104b6565b6002805460009190610658906001906109d1565b81548110610668576106686109e8565b60009182526020909120015482516002805473ffffffffffffffffffffffffffffffffffffffff9093169350839290916fffffffffffffffffffffffffffffffff169081106106b9576106b96109e8565b600091825260208083209190910180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff94851617905584519284168252600390526040902080547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff909216919091179055600280548061076457610764610a17565b6000828152602080822083017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff000000000000000000000000000000000000000016905590920190925573ffffffffffffffffffffffffffffffffffffffff949094168152600390935250506040812055565b73ffffffffffffffffffffffffffffffffffffffff811660009081526003602090815260408083208151808301909252546fffffffffffffffffffffffffffffffff808216835270010000000000000000000000000000000090910416918101829052901580159061086f575060025481516fffffffffffffffffffffffffffffffff16105b80156108da57508273ffffffffffffffffffffffffffffffffffffffff16600282600001516fffffffffffffffffffffffffffffffff16815481106108b6576108b66109e8565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16145b9392505050565b6000602082840312156108f357600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146108da57600080fd5b60006020828403121561092957600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b8181101561097e57835173ffffffffffffffffffffffffffffffffffffffff168352928401929184019160010161094c565b50909695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082198211156109cc576109cc61098a565b500190565b6000828210156109e3576109e361098a565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea264697066735822122065374ae40f2d420641ace57c9e5b8363be503ea5c1f6bb6174e4126404d5412b64736f6c634300080b0033",
}

// ValidatorPoolMockABI is the input ABI used to generate the binding from.
// Deprecated: Use ValidatorPoolMockMetaData.ABI instead.
var ValidatorPoolMockABI = ValidatorPoolMockMetaData.ABI

// ValidatorPoolMockBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ValidatorPoolMockMetaData.Bin instead.
var ValidatorPoolMockBin = ValidatorPoolMockMetaData.Bin

// DeployValidatorPoolMock deploys a new Ethereum contract, binding an instance of ValidatorPoolMock to it.
func DeployValidatorPoolMock(auth *bind.TransactOpts, backend bind.ContractBackend, hook []byte) (common.Address, *types.Transaction, *ValidatorPoolMock, error) {
	parsed, err := ValidatorPoolMockMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ValidatorPoolMockBin), backend, hook)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ValidatorPoolMock{ValidatorPoolMockCaller: ValidatorPoolMockCaller{contract: contract}, ValidatorPoolMockTransactor: ValidatorPoolMockTransactor{contract: contract}, ValidatorPoolMockFilterer: ValidatorPoolMockFilterer{contract: contract}}, nil
}

// ValidatorPoolMock is an auto generated Go binding around an Ethereum contract.
type ValidatorPoolMock struct {
	ValidatorPoolMockCaller     // Read-only binding to the contract
	ValidatorPoolMockTransactor // Write-only binding to the contract
	ValidatorPoolMockFilterer   // Log filterer for contract events
}

// ValidatorPoolMockCaller is an auto generated read-only Go binding around an Ethereum contract.
type ValidatorPoolMockCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorPoolMockTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ValidatorPoolMockTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorPoolMockFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ValidatorPoolMockFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorPoolMockSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ValidatorPoolMockSession struct {
	Contract     *ValidatorPoolMock // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// ValidatorPoolMockCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ValidatorPoolMockCallerSession struct {
	Contract *ValidatorPoolMockCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// ValidatorPoolMockTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ValidatorPoolMockTransactorSession struct {
	Contract     *ValidatorPoolMockTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// ValidatorPoolMockRaw is an auto generated low-level Go binding around an Ethereum contract.
type ValidatorPoolMockRaw struct {
	Contract *ValidatorPoolMock // Generic contract binding to access the raw methods on
}

// ValidatorPoolMockCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ValidatorPoolMockCallerRaw struct {
	Contract *ValidatorPoolMockCaller // Generic read-only contract binding to access the raw methods on
}

// ValidatorPoolMockTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ValidatorPoolMockTransactorRaw struct {
	Contract *ValidatorPoolMockTransactor // Generic write-only contract binding to access the raw methods on
}

// NewValidatorPoolMock creates a new instance of ValidatorPoolMock, bound to a specific deployed contract.
func NewValidatorPoolMock(address common.Address, backend bind.ContractBackend) (*ValidatorPoolMock, error) {
	contract, err := bindValidatorPoolMock(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ValidatorPoolMock{ValidatorPoolMockCaller: ValidatorPoolMockCaller{contract: contract}, ValidatorPoolMockTransactor: ValidatorPoolMockTransactor{contract: contract}, ValidatorPoolMockFilterer: ValidatorPoolMockFilterer{contract: contract}}, nil
}

// NewValidatorPoolMockCaller creates a new read-only instance of ValidatorPoolMock, bound to a specific deployed contract.
func NewValidatorPoolMockCaller(address common.Address, caller bind.ContractCaller) (*ValidatorPoolMockCaller, error) {
	contract, err := bindValidatorPoolMock(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorPoolMockCaller{contract: contract}, nil
}

// NewValidatorPoolMockTransactor creates a new write-only instance of ValidatorPoolMock, bound to a specific deployed contract.
func NewValidatorPoolMockTransactor(address common.Address, transactor bind.ContractTransactor) (*ValidatorPoolMockTransactor, error) {
	contract, err := bindValidatorPoolMock(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorPoolMockTransactor{contract: contract}, nil
}

// NewValidatorPoolMockFilterer creates a new log filterer instance of ValidatorPoolMock, bound to a specific deployed contract.
func NewValidatorPoolMockFilterer(address common.Address, filterer bind.ContractFilterer) (*ValidatorPoolMockFilterer, error) {
	contract, err := bindValidatorPoolMock(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ValidatorPoolMockFilterer{contract: contract}, nil
}

// bindValidatorPoolMock binds a generic wrapper to an already deployed contract.
func bindValidatorPoolMock(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ValidatorPoolMockABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorPoolMock *ValidatorPoolMockRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorPoolMock.Contract.ValidatorPoolMockCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorPoolMock *ValidatorPoolMockRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorPoolMock.Contract.ValidatorPoolMockTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorPoolMock *ValidatorPoolMockRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorPoolMock.Contract.ValidatorPoolMockTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorPoolMock *ValidatorPoolMockCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorPoolMock.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorPoolMock *ValidatorPoolMockTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorPoolMock.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorPoolMock *ValidatorPoolMockTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorPoolMock.Contract.contract.Transact(opts, method, params...)
}

// GetValidator is a free data retrieval call binding the contract method 0xb5d89627.
//
// Solidity: function getValidator(uint256 index) view returns(address)
func (_ValidatorPoolMock *ValidatorPoolMockCaller) GetValidator(opts *bind.CallOpts, index *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ValidatorPoolMock.contract.Call(opts, &out, "getValidator", index)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetValidator is a free data retrieval call binding the contract method 0xb5d89627.
//
// Solidity: function getValidator(uint256 index) view returns(address)
func (_ValidatorPoolMock *ValidatorPoolMockSession) GetValidator(index *big.Int) (common.Address, error) {
	return _ValidatorPoolMock.Contract.GetValidator(&_ValidatorPoolMock.CallOpts, index)
}

// GetValidator is a free data retrieval call binding the contract method 0xb5d89627.
//
// Solidity: function getValidator(uint256 index) view returns(address)
func (_ValidatorPoolMock *ValidatorPoolMockCallerSession) GetValidator(index *big.Int) (common.Address, error) {
	return _ValidatorPoolMock.Contract.GetValidator(&_ValidatorPoolMock.CallOpts, index)
}

// GetValidatorAddresses is a free data retrieval call binding the contract method 0xf74e921f.
//
// Solidity: function getValidatorAddresses() view returns(address[] addresses)
func (_ValidatorPoolMock *ValidatorPoolMockCaller) GetValidatorAddresses(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _ValidatorPoolMock.contract.Call(opts, &out, "getValidatorAddresses")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetValidatorAddresses is a free data retrieval call binding the contract method 0xf74e921f.
//
// Solidity: function getValidatorAddresses() view returns(address[] addresses)
func (_ValidatorPoolMock *ValidatorPoolMockSession) GetValidatorAddresses() ([]common.Address, error) {
	return _ValidatorPoolMock.Contract.GetValidatorAddresses(&_ValidatorPoolMock.CallOpts)
}

// GetValidatorAddresses is a free data retrieval call binding the contract method 0xf74e921f.
//
// Solidity: function getValidatorAddresses() view returns(address[] addresses)
func (_ValidatorPoolMock *ValidatorPoolMockCallerSession) GetValidatorAddresses() ([]common.Address, error) {
	return _ValidatorPoolMock.Contract.GetValidatorAddresses(&_ValidatorPoolMock.CallOpts)
}

// GetValidatorsCount is a free data retrieval call binding the contract method 0x27498240.
//
// Solidity: function getValidatorsCount() view returns(uint256)
func (_ValidatorPoolMock *ValidatorPoolMockCaller) GetValidatorsCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorPoolMock.contract.Call(opts, &out, "getValidatorsCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetValidatorsCount is a free data retrieval call binding the contract method 0x27498240.
//
// Solidity: function getValidatorsCount() view returns(uint256)
func (_ValidatorPoolMock *ValidatorPoolMockSession) GetValidatorsCount() (*big.Int, error) {
	return _ValidatorPoolMock.Contract.GetValidatorsCount(&_ValidatorPoolMock.CallOpts)
}

// GetValidatorsCount is a free data retrieval call binding the contract method 0x27498240.
//
// Solidity: function getValidatorsCount() view returns(uint256)
func (_ValidatorPoolMock *ValidatorPoolMockCallerSession) GetValidatorsCount() (*big.Int, error) {
	return _ValidatorPoolMock.Contract.GetValidatorsCount(&_ValidatorPoolMock.CallOpts)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address participant) view returns(bool)
func (_ValidatorPoolMock *ValidatorPoolMockCaller) IsValidator(opts *bind.CallOpts, participant common.Address) (bool, error) {
	var out []interface{}
	err := _ValidatorPoolMock.contract.Call(opts, &out, "isValidator", participant)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address participant) view returns(bool)
func (_ValidatorPoolMock *ValidatorPoolMockSession) IsValidator(participant common.Address) (bool, error) {
	return _ValidatorPoolMock.Contract.IsValidator(&_ValidatorPoolMock.CallOpts, participant)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address participant) view returns(bool)
func (_ValidatorPoolMock *ValidatorPoolMockCallerSession) IsValidator(participant common.Address) (bool, error) {
	return _ValidatorPoolMock.Contract.IsValidator(&_ValidatorPoolMock.CallOpts, participant)
}

// AddValidator is a paid mutator transaction binding the contract method 0x4d238c8e.
//
// Solidity: function addValidator(address v) returns()
func (_ValidatorPoolMock *ValidatorPoolMockTransactor) AddValidator(opts *bind.TransactOpts, v common.Address) (*types.Transaction, error) {
	return _ValidatorPoolMock.contract.Transact(opts, "addValidator", v)
}

// AddValidator is a paid mutator transaction binding the contract method 0x4d238c8e.
//
// Solidity: function addValidator(address v) returns()
func (_ValidatorPoolMock *ValidatorPoolMockSession) AddValidator(v common.Address) (*types.Transaction, error) {
	return _ValidatorPoolMock.Contract.AddValidator(&_ValidatorPoolMock.TransactOpts, v)
}

// AddValidator is a paid mutator transaction binding the contract method 0x4d238c8e.
//
// Solidity: function addValidator(address v) returns()
func (_ValidatorPoolMock *ValidatorPoolMockTransactorSession) AddValidator(v common.Address) (*types.Transaction, error) {
	return _ValidatorPoolMock.Contract.AddValidator(&_ValidatorPoolMock.TransactOpts, v)
}

// InitializeETHDKG is a paid mutator transaction binding the contract method 0x57b51c9c.
//
// Solidity: function initializeETHDKG() returns()
func (_ValidatorPoolMock *ValidatorPoolMockTransactor) InitializeETHDKG(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorPoolMock.contract.Transact(opts, "initializeETHDKG")
}

// InitializeETHDKG is a paid mutator transaction binding the contract method 0x57b51c9c.
//
// Solidity: function initializeETHDKG() returns()
func (_ValidatorPoolMock *ValidatorPoolMockSession) InitializeETHDKG() (*types.Transaction, error) {
	return _ValidatorPoolMock.Contract.InitializeETHDKG(&_ValidatorPoolMock.TransactOpts)
}

// InitializeETHDKG is a paid mutator transaction binding the contract method 0x57b51c9c.
//
// Solidity: function initializeETHDKG() returns()
func (_ValidatorPoolMock *ValidatorPoolMockTransactorSession) InitializeETHDKG() (*types.Transaction, error) {
	return _ValidatorPoolMock.Contract.InitializeETHDKG(&_ValidatorPoolMock.TransactOpts)
}

// MajorSlash is a paid mutator transaction binding the contract method 0x150ef01b.
//
// Solidity: function majorSlash(address validator) returns()
func (_ValidatorPoolMock *ValidatorPoolMockTransactor) MajorSlash(opts *bind.TransactOpts, validator common.Address) (*types.Transaction, error) {
	return _ValidatorPoolMock.contract.Transact(opts, "majorSlash", validator)
}

// MajorSlash is a paid mutator transaction binding the contract method 0x150ef01b.
//
// Solidity: function majorSlash(address validator) returns()
func (_ValidatorPoolMock *ValidatorPoolMockSession) MajorSlash(validator common.Address) (*types.Transaction, error) {
	return _ValidatorPoolMock.Contract.MajorSlash(&_ValidatorPoolMock.TransactOpts, validator)
}

// MajorSlash is a paid mutator transaction binding the contract method 0x150ef01b.
//
// Solidity: function majorSlash(address validator) returns()
func (_ValidatorPoolMock *ValidatorPoolMockTransactorSession) MajorSlash(validator common.Address) (*types.Transaction, error) {
	return _ValidatorPoolMock.Contract.MajorSlash(&_ValidatorPoolMock.TransactOpts, validator)
}

// MinorSlash is a paid mutator transaction binding the contract method 0xa19ebb21.
//
// Solidity: function minorSlash(address validator) returns()
func (_ValidatorPoolMock *ValidatorPoolMockTransactor) MinorSlash(opts *bind.TransactOpts, validator common.Address) (*types.Transaction, error) {
	return _ValidatorPoolMock.contract.Transact(opts, "minorSlash", validator)
}

// MinorSlash is a paid mutator transaction binding the contract method 0xa19ebb21.
//
// Solidity: function minorSlash(address validator) returns()
func (_ValidatorPoolMock *ValidatorPoolMockSession) MinorSlash(validator common.Address) (*types.Transaction, error) {
	return _ValidatorPoolMock.Contract.MinorSlash(&_ValidatorPoolMock.TransactOpts, validator)
}

// MinorSlash is a paid mutator transaction binding the contract method 0xa19ebb21.
//
// Solidity: function minorSlash(address validator) returns()
func (_ValidatorPoolMock *ValidatorPoolMockTransactorSession) MinorSlash(validator common.Address) (*types.Transaction, error) {
	return _ValidatorPoolMock.Contract.MinorSlash(&_ValidatorPoolMock.TransactOpts, validator)
}

// RemoveAllValidators is a paid mutator transaction binding the contract method 0xa74a97b1.
//
// Solidity: function removeAllValidators() returns()
func (_ValidatorPoolMock *ValidatorPoolMockTransactor) RemoveAllValidators(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorPoolMock.contract.Transact(opts, "removeAllValidators")
}

// RemoveAllValidators is a paid mutator transaction binding the contract method 0xa74a97b1.
//
// Solidity: function removeAllValidators() returns()
func (_ValidatorPoolMock *ValidatorPoolMockSession) RemoveAllValidators() (*types.Transaction, error) {
	return _ValidatorPoolMock.Contract.RemoveAllValidators(&_ValidatorPoolMock.TransactOpts)
}

// RemoveAllValidators is a paid mutator transaction binding the contract method 0xa74a97b1.
//
// Solidity: function removeAllValidators() returns()
func (_ValidatorPoolMock *ValidatorPoolMockTransactorSession) RemoveAllValidators() (*types.Transaction, error) {
	return _ValidatorPoolMock.Contract.RemoveAllValidators(&_ValidatorPoolMock.TransactOpts)
}

// RemoveValidator is a paid mutator transaction binding the contract method 0x40a141ff.
//
// Solidity: function removeValidator(address validator) returns()
func (_ValidatorPoolMock *ValidatorPoolMockTransactor) RemoveValidator(opts *bind.TransactOpts, validator common.Address) (*types.Transaction, error) {
	return _ValidatorPoolMock.contract.Transact(opts, "removeValidator", validator)
}

// RemoveValidator is a paid mutator transaction binding the contract method 0x40a141ff.
//
// Solidity: function removeValidator(address validator) returns()
func (_ValidatorPoolMock *ValidatorPoolMockSession) RemoveValidator(validator common.Address) (*types.Transaction, error) {
	return _ValidatorPoolMock.Contract.RemoveValidator(&_ValidatorPoolMock.TransactOpts, validator)
}

// RemoveValidator is a paid mutator transaction binding the contract method 0x40a141ff.
//
// Solidity: function removeValidator(address validator) returns()
func (_ValidatorPoolMock *ValidatorPoolMockTransactorSession) RemoveValidator(validator common.Address) (*types.Transaction, error) {
	return _ValidatorPoolMock.Contract.RemoveValidator(&_ValidatorPoolMock.TransactOpts, validator)
}

// SetETHDKG is a paid mutator transaction binding the contract method 0x8785a460.
//
// Solidity: function setETHDKG(address ethdkg) returns()
func (_ValidatorPoolMock *ValidatorPoolMockTransactor) SetETHDKG(opts *bind.TransactOpts, ethdkg common.Address) (*types.Transaction, error) {
	return _ValidatorPoolMock.contract.Transact(opts, "setETHDKG", ethdkg)
}

// SetETHDKG is a paid mutator transaction binding the contract method 0x8785a460.
//
// Solidity: function setETHDKG(address ethdkg) returns()
func (_ValidatorPoolMock *ValidatorPoolMockSession) SetETHDKG(ethdkg common.Address) (*types.Transaction, error) {
	return _ValidatorPoolMock.Contract.SetETHDKG(&_ValidatorPoolMock.TransactOpts, ethdkg)
}

// SetETHDKG is a paid mutator transaction binding the contract method 0x8785a460.
//
// Solidity: function setETHDKG(address ethdkg) returns()
func (_ValidatorPoolMock *ValidatorPoolMockTransactorSession) SetETHDKG(ethdkg common.Address) (*types.Transaction, error) {
	return _ValidatorPoolMock.Contract.SetETHDKG(&_ValidatorPoolMock.TransactOpts, ethdkg)
}

// ValidatorsMetaData contains all meta data concerning the Validators contract.
var ValidatorsMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BurntStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"why\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Fined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"key_share_G1\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"key_share_G1_correctness_proof\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[4]\",\"name\":\"key_share_G2\",\"type\":\"uint256[4]\"}],\"name\":\"KeyShareSubmission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LockedReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LockedStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dkgStarts\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"registrationEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shareDistributionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"disputeEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"keyShareSubmissionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mpkSubmissionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gpkjSubmissionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gpkjDisputeEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dkgComplete\",\"type\":\"uint256\"}],\"name\":\"RegistrationOpen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"RequestedUnlockStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"encrypted_shares\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[2][]\",\"name\":\"commitments\",\"type\":\"uint256[2][]\"}],\"name\":\"ShareDistribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"chainId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"height\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"startingETHDKG\",\"type\":\"bool\"}],\"name\":\"SnapshotTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnlockedReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnlockedStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"madID\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"madID\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"pkHash\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorLeft\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share3\",\"type\":\"uint256\"}],\"name\":\"ValidatorMember\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"pkHash\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorQueued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"validatorCount\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"ethHeight\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"madHeight\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey3\",\"type\":\"uint256\"}],\"name\":\"ValidatorSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256[2]\",\"name\":\"_madID\",\"type\":\"uint256[2]\"}],\"name\":\"addValidator\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceRewardFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceStakeFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceUnlocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceUnlockedFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceUnlockedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceUnlockedRewardFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmValidators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"src\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"extractUint256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"src\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"extractUint32\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"val\",\"type\":\"uint32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fine\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotNumber\",\"type\":\"uint256\"}],\"name\":\"getChainIdFromSnapshot\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotNumber\",\"type\":\"uint256\"}],\"name\":\"getHeightFromSnapshot\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotNumber\",\"type\":\"uint256\"}],\"name\":\"getMadHeightFromSnapshot\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotNumber\",\"type\":\"uint256\"}],\"name\":\"getRawBlockClaimsSnapshot\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotNumber\",\"type\":\"uint256\"}],\"name\":\"getRawSignatureSnapshot\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"getValidatorPublicKey\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractRegistry\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"initializeParticipants\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractRegistry\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"initializeSnapshots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractRegistry\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"initializeStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockEpoch\",\"type\":\"uint256\"}],\"name\":\"lockRewardFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lockStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lockStakeFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"majorFine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"majorStakeFine\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minEthSnapshotSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minMadSnapshotSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"minorFine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minorStakeFine\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_signatureGroup\",\"type\":\"bytes\"}],\"name\":\"parseSignatureGroup\",\"outputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"publicKey\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256[2]\",\"name\":\"signature\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256[2]\",\"name\":\"_madID\",\"type\":\"uint256[2]\"}],\"name\":\"removeValidator\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestUnlockStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"requestUnlockStakeFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"orig\",\"type\":\"bytes\"}],\"name\":\"reverse\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"reversed\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_chainId\",\"type\":\"uint32\"}],\"name\":\"setChainId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ns\",\"type\":\"uint256\"}],\"name\":\"setEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epochDelay\",\"type\":\"uint256\"}],\"name\":\"setEpochDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_majorStakeFine\",\"type\":\"uint256\"}],\"name\":\"setMajorStakeFine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minSize\",\"type\":\"uint256\"}],\"name\":\"setMinEthSnapshotSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minSize\",\"type\":\"uint256\"}],\"name\":\"setMinMadSnapshotSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumStake\",\"type\":\"uint256\"}],\"name\":\"setMinimumStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minorStakeFine\",\"type\":\"uint256\"}],\"name\":\"setMinorStakeFine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardAmount\",\"type\":\"uint256\"}],\"name\":\"setRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardBonus\",\"type\":\"uint256\"}],\"name\":\"setRewardBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"max\",\"type\":\"uint8\"}],\"name\":\"setValidatorMaxCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_signatureGroup\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_bclaims\",\"type\":\"bytes\"}],\"name\":\"snapshot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"unlockRewardFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unlockStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unlockStakeFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorMaxCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// ValidatorsABI is the input ABI used to generate the binding from.
// Deprecated: Use ValidatorsMetaData.ABI instead.
var ValidatorsABI = ValidatorsMetaData.ABI

// Validators is an auto generated Go binding around an Ethereum contract.
type Validators struct {
	ValidatorsCaller     // Read-only binding to the contract
	ValidatorsTransactor // Write-only binding to the contract
	ValidatorsFilterer   // Log filterer for contract events
}

// ValidatorsCaller is an auto generated read-only Go binding around an Ethereum contract.
type ValidatorsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ValidatorsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ValidatorsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ValidatorsSession struct {
	Contract     *Validators       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ValidatorsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ValidatorsCallerSession struct {
	Contract *ValidatorsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// ValidatorsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ValidatorsTransactorSession struct {
	Contract     *ValidatorsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// ValidatorsRaw is an auto generated low-level Go binding around an Ethereum contract.
type ValidatorsRaw struct {
	Contract *Validators // Generic contract binding to access the raw methods on
}

// ValidatorsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ValidatorsCallerRaw struct {
	Contract *ValidatorsCaller // Generic read-only contract binding to access the raw methods on
}

// ValidatorsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ValidatorsTransactorRaw struct {
	Contract *ValidatorsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewValidators creates a new instance of Validators, bound to a specific deployed contract.
func NewValidators(address common.Address, backend bind.ContractBackend) (*Validators, error) {
	contract, err := bindValidators(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Validators{ValidatorsCaller: ValidatorsCaller{contract: contract}, ValidatorsTransactor: ValidatorsTransactor{contract: contract}, ValidatorsFilterer: ValidatorsFilterer{contract: contract}}, nil
}

// NewValidatorsCaller creates a new read-only instance of Validators, bound to a specific deployed contract.
func NewValidatorsCaller(address common.Address, caller bind.ContractCaller) (*ValidatorsCaller, error) {
	contract, err := bindValidators(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorsCaller{contract: contract}, nil
}

// NewValidatorsTransactor creates a new write-only instance of Validators, bound to a specific deployed contract.
func NewValidatorsTransactor(address common.Address, transactor bind.ContractTransactor) (*ValidatorsTransactor, error) {
	contract, err := bindValidators(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorsTransactor{contract: contract}, nil
}

// NewValidatorsFilterer creates a new log filterer instance of Validators, bound to a specific deployed contract.
func NewValidatorsFilterer(address common.Address, filterer bind.ContractFilterer) (*ValidatorsFilterer, error) {
	contract, err := bindValidators(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ValidatorsFilterer{contract: contract}, nil
}

// bindValidators binds a generic wrapper to an already deployed contract.
func bindValidators(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ValidatorsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Validators *ValidatorsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Validators.Contract.ValidatorsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Validators *ValidatorsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Validators.Contract.ValidatorsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Validators *ValidatorsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Validators.Contract.ValidatorsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Validators *ValidatorsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Validators.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Validators *ValidatorsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Validators.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Validators *ValidatorsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Validators.Contract.contract.Transact(opts, method, params...)
}

// BalanceReward is a free data retrieval call binding the contract method 0x9fb69b43.
//
// Solidity: function balanceReward() view returns(uint256)
func (_Validators *ValidatorsCaller) BalanceReward(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "balanceReward")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceReward is a free data retrieval call binding the contract method 0x9fb69b43.
//
// Solidity: function balanceReward() view returns(uint256)
func (_Validators *ValidatorsSession) BalanceReward() (*big.Int, error) {
	return _Validators.Contract.BalanceReward(&_Validators.CallOpts)
}

// BalanceReward is a free data retrieval call binding the contract method 0x9fb69b43.
//
// Solidity: function balanceReward() view returns(uint256)
func (_Validators *ValidatorsCallerSession) BalanceReward() (*big.Int, error) {
	return _Validators.Contract.BalanceReward(&_Validators.CallOpts)
}

// BalanceRewardFor is a free data retrieval call binding the contract method 0x9be5d83e.
//
// Solidity: function balanceRewardFor(address who) view returns(uint256)
func (_Validators *ValidatorsCaller) BalanceRewardFor(opts *bind.CallOpts, who common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "balanceRewardFor", who)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceRewardFor is a free data retrieval call binding the contract method 0x9be5d83e.
//
// Solidity: function balanceRewardFor(address who) view returns(uint256)
func (_Validators *ValidatorsSession) BalanceRewardFor(who common.Address) (*big.Int, error) {
	return _Validators.Contract.BalanceRewardFor(&_Validators.CallOpts, who)
}

// BalanceRewardFor is a free data retrieval call binding the contract method 0x9be5d83e.
//
// Solidity: function balanceRewardFor(address who) view returns(uint256)
func (_Validators *ValidatorsCallerSession) BalanceRewardFor(who common.Address) (*big.Int, error) {
	return _Validators.Contract.BalanceRewardFor(&_Validators.CallOpts, who)
}

// BalanceStake is a free data retrieval call binding the contract method 0x8aa2799c.
//
// Solidity: function balanceStake() view returns(uint256)
func (_Validators *ValidatorsCaller) BalanceStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "balanceStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceStake is a free data retrieval call binding the contract method 0x8aa2799c.
//
// Solidity: function balanceStake() view returns(uint256)
func (_Validators *ValidatorsSession) BalanceStake() (*big.Int, error) {
	return _Validators.Contract.BalanceStake(&_Validators.CallOpts)
}

// BalanceStake is a free data retrieval call binding the contract method 0x8aa2799c.
//
// Solidity: function balanceStake() view returns(uint256)
func (_Validators *ValidatorsCallerSession) BalanceStake() (*big.Int, error) {
	return _Validators.Contract.BalanceStake(&_Validators.CallOpts)
}

// BalanceStakeFor is a free data retrieval call binding the contract method 0x35ba4daf.
//
// Solidity: function balanceStakeFor(address who) view returns(uint256)
func (_Validators *ValidatorsCaller) BalanceStakeFor(opts *bind.CallOpts, who common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "balanceStakeFor", who)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceStakeFor is a free data retrieval call binding the contract method 0x35ba4daf.
//
// Solidity: function balanceStakeFor(address who) view returns(uint256)
func (_Validators *ValidatorsSession) BalanceStakeFor(who common.Address) (*big.Int, error) {
	return _Validators.Contract.BalanceStakeFor(&_Validators.CallOpts, who)
}

// BalanceStakeFor is a free data retrieval call binding the contract method 0x35ba4daf.
//
// Solidity: function balanceStakeFor(address who) view returns(uint256)
func (_Validators *ValidatorsCallerSession) BalanceStakeFor(who common.Address) (*big.Int, error) {
	return _Validators.Contract.BalanceStakeFor(&_Validators.CallOpts, who)
}

// BalanceUnlocked is a free data retrieval call binding the contract method 0x5b6a0d1e.
//
// Solidity: function balanceUnlocked() view returns(uint256)
func (_Validators *ValidatorsCaller) BalanceUnlocked(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "balanceUnlocked")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceUnlocked is a free data retrieval call binding the contract method 0x5b6a0d1e.
//
// Solidity: function balanceUnlocked() view returns(uint256)
func (_Validators *ValidatorsSession) BalanceUnlocked() (*big.Int, error) {
	return _Validators.Contract.BalanceUnlocked(&_Validators.CallOpts)
}

// BalanceUnlocked is a free data retrieval call binding the contract method 0x5b6a0d1e.
//
// Solidity: function balanceUnlocked() view returns(uint256)
func (_Validators *ValidatorsCallerSession) BalanceUnlocked() (*big.Int, error) {
	return _Validators.Contract.BalanceUnlocked(&_Validators.CallOpts)
}

// BalanceUnlockedFor is a free data retrieval call binding the contract method 0x2e713306.
//
// Solidity: function balanceUnlockedFor(address who) view returns(uint256)
func (_Validators *ValidatorsCaller) BalanceUnlockedFor(opts *bind.CallOpts, who common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "balanceUnlockedFor", who)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceUnlockedFor is a free data retrieval call binding the contract method 0x2e713306.
//
// Solidity: function balanceUnlockedFor(address who) view returns(uint256)
func (_Validators *ValidatorsSession) BalanceUnlockedFor(who common.Address) (*big.Int, error) {
	return _Validators.Contract.BalanceUnlockedFor(&_Validators.CallOpts, who)
}

// BalanceUnlockedFor is a free data retrieval call binding the contract method 0x2e713306.
//
// Solidity: function balanceUnlockedFor(address who) view returns(uint256)
func (_Validators *ValidatorsCallerSession) BalanceUnlockedFor(who common.Address) (*big.Int, error) {
	return _Validators.Contract.BalanceUnlockedFor(&_Validators.CallOpts, who)
}

// BalanceUnlockedReward is a free data retrieval call binding the contract method 0xc328b464.
//
// Solidity: function balanceUnlockedReward() view returns(uint256)
func (_Validators *ValidatorsCaller) BalanceUnlockedReward(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "balanceUnlockedReward")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceUnlockedReward is a free data retrieval call binding the contract method 0xc328b464.
//
// Solidity: function balanceUnlockedReward() view returns(uint256)
func (_Validators *ValidatorsSession) BalanceUnlockedReward() (*big.Int, error) {
	return _Validators.Contract.BalanceUnlockedReward(&_Validators.CallOpts)
}

// BalanceUnlockedReward is a free data retrieval call binding the contract method 0xc328b464.
//
// Solidity: function balanceUnlockedReward() view returns(uint256)
func (_Validators *ValidatorsCallerSession) BalanceUnlockedReward() (*big.Int, error) {
	return _Validators.Contract.BalanceUnlockedReward(&_Validators.CallOpts)
}

// BalanceUnlockedRewardFor is a free data retrieval call binding the contract method 0x515c31a1.
//
// Solidity: function balanceUnlockedRewardFor(address who) view returns(uint256)
func (_Validators *ValidatorsCaller) BalanceUnlockedRewardFor(opts *bind.CallOpts, who common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "balanceUnlockedRewardFor", who)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceUnlockedRewardFor is a free data retrieval call binding the contract method 0x515c31a1.
//
// Solidity: function balanceUnlockedRewardFor(address who) view returns(uint256)
func (_Validators *ValidatorsSession) BalanceUnlockedRewardFor(who common.Address) (*big.Int, error) {
	return _Validators.Contract.BalanceUnlockedRewardFor(&_Validators.CallOpts, who)
}

// BalanceUnlockedRewardFor is a free data retrieval call binding the contract method 0x515c31a1.
//
// Solidity: function balanceUnlockedRewardFor(address who) view returns(uint256)
func (_Validators *ValidatorsCallerSession) BalanceUnlockedRewardFor(who common.Address) (*big.Int, error) {
	return _Validators.Contract.BalanceUnlockedRewardFor(&_Validators.CallOpts, who)
}

// Epoch is a free data retrieval call binding the contract method 0x900cf0cf.
//
// Solidity: function epoch() view returns(uint256)
func (_Validators *ValidatorsCaller) Epoch(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "epoch")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Epoch is a free data retrieval call binding the contract method 0x900cf0cf.
//
// Solidity: function epoch() view returns(uint256)
func (_Validators *ValidatorsSession) Epoch() (*big.Int, error) {
	return _Validators.Contract.Epoch(&_Validators.CallOpts)
}

// Epoch is a free data retrieval call binding the contract method 0x900cf0cf.
//
// Solidity: function epoch() view returns(uint256)
func (_Validators *ValidatorsCallerSession) Epoch() (*big.Int, error) {
	return _Validators.Contract.Epoch(&_Validators.CallOpts)
}

// ExtractUint256 is a free data retrieval call binding the contract method 0x1c8c8ba4.
//
// Solidity: function extractUint256(bytes src, uint256 offset) pure returns(uint256 val)
func (_Validators *ValidatorsCaller) ExtractUint256(opts *bind.CallOpts, src []byte, offset *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "extractUint256", src, offset)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ExtractUint256 is a free data retrieval call binding the contract method 0x1c8c8ba4.
//
// Solidity: function extractUint256(bytes src, uint256 offset) pure returns(uint256 val)
func (_Validators *ValidatorsSession) ExtractUint256(src []byte, offset *big.Int) (*big.Int, error) {
	return _Validators.Contract.ExtractUint256(&_Validators.CallOpts, src, offset)
}

// ExtractUint256 is a free data retrieval call binding the contract method 0x1c8c8ba4.
//
// Solidity: function extractUint256(bytes src, uint256 offset) pure returns(uint256 val)
func (_Validators *ValidatorsCallerSession) ExtractUint256(src []byte, offset *big.Int) (*big.Int, error) {
	return _Validators.Contract.ExtractUint256(&_Validators.CallOpts, src, offset)
}

// ExtractUint32 is a free data retrieval call binding the contract method 0xc1312f4d.
//
// Solidity: function extractUint32(bytes src, uint256 idx) pure returns(uint32 val)
func (_Validators *ValidatorsCaller) ExtractUint32(opts *bind.CallOpts, src []byte, idx *big.Int) (uint32, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "extractUint32", src, idx)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// ExtractUint32 is a free data retrieval call binding the contract method 0xc1312f4d.
//
// Solidity: function extractUint32(bytes src, uint256 idx) pure returns(uint32 val)
func (_Validators *ValidatorsSession) ExtractUint32(src []byte, idx *big.Int) (uint32, error) {
	return _Validators.Contract.ExtractUint32(&_Validators.CallOpts, src, idx)
}

// ExtractUint32 is a free data retrieval call binding the contract method 0xc1312f4d.
//
// Solidity: function extractUint32(bytes src, uint256 idx) pure returns(uint32 val)
func (_Validators *ValidatorsCallerSession) ExtractUint32(src []byte, idx *big.Int) (uint32, error) {
	return _Validators.Contract.ExtractUint32(&_Validators.CallOpts, src, idx)
}

// GetChainId is a free data retrieval call binding the contract method 0x3408e470.
//
// Solidity: function getChainId() view returns(uint32)
func (_Validators *ValidatorsCaller) GetChainId(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "getChainId")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// GetChainId is a free data retrieval call binding the contract method 0x3408e470.
//
// Solidity: function getChainId() view returns(uint32)
func (_Validators *ValidatorsSession) GetChainId() (uint32, error) {
	return _Validators.Contract.GetChainId(&_Validators.CallOpts)
}

// GetChainId is a free data retrieval call binding the contract method 0x3408e470.
//
// Solidity: function getChainId() view returns(uint32)
func (_Validators *ValidatorsCallerSession) GetChainId() (uint32, error) {
	return _Validators.Contract.GetChainId(&_Validators.CallOpts)
}

// GetChainIdFromSnapshot is a free data retrieval call binding the contract method 0x19f74669.
//
// Solidity: function getChainIdFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_Validators *ValidatorsCaller) GetChainIdFromSnapshot(opts *bind.CallOpts, snapshotNumber *big.Int) (uint32, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "getChainIdFromSnapshot", snapshotNumber)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// GetChainIdFromSnapshot is a free data retrieval call binding the contract method 0x19f74669.
//
// Solidity: function getChainIdFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_Validators *ValidatorsSession) GetChainIdFromSnapshot(snapshotNumber *big.Int) (uint32, error) {
	return _Validators.Contract.GetChainIdFromSnapshot(&_Validators.CallOpts, snapshotNumber)
}

// GetChainIdFromSnapshot is a free data retrieval call binding the contract method 0x19f74669.
//
// Solidity: function getChainIdFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_Validators *ValidatorsCallerSession) GetChainIdFromSnapshot(snapshotNumber *big.Int) (uint32, error) {
	return _Validators.Contract.GetChainIdFromSnapshot(&_Validators.CallOpts, snapshotNumber)
}

// GetHeightFromSnapshot is a free data retrieval call binding the contract method 0xe380b228.
//
// Solidity: function getHeightFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_Validators *ValidatorsCaller) GetHeightFromSnapshot(opts *bind.CallOpts, snapshotNumber *big.Int) (uint32, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "getHeightFromSnapshot", snapshotNumber)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// GetHeightFromSnapshot is a free data retrieval call binding the contract method 0xe380b228.
//
// Solidity: function getHeightFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_Validators *ValidatorsSession) GetHeightFromSnapshot(snapshotNumber *big.Int) (uint32, error) {
	return _Validators.Contract.GetHeightFromSnapshot(&_Validators.CallOpts, snapshotNumber)
}

// GetHeightFromSnapshot is a free data retrieval call binding the contract method 0xe380b228.
//
// Solidity: function getHeightFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_Validators *ValidatorsCallerSession) GetHeightFromSnapshot(snapshotNumber *big.Int) (uint32, error) {
	return _Validators.Contract.GetHeightFromSnapshot(&_Validators.CallOpts, snapshotNumber)
}

// GetMadHeightFromSnapshot is a free data retrieval call binding the contract method 0x4f4ea614.
//
// Solidity: function getMadHeightFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_Validators *ValidatorsCaller) GetMadHeightFromSnapshot(opts *bind.CallOpts, snapshotNumber *big.Int) (uint32, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "getMadHeightFromSnapshot", snapshotNumber)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// GetMadHeightFromSnapshot is a free data retrieval call binding the contract method 0x4f4ea614.
//
// Solidity: function getMadHeightFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_Validators *ValidatorsSession) GetMadHeightFromSnapshot(snapshotNumber *big.Int) (uint32, error) {
	return _Validators.Contract.GetMadHeightFromSnapshot(&_Validators.CallOpts, snapshotNumber)
}

// GetMadHeightFromSnapshot is a free data retrieval call binding the contract method 0x4f4ea614.
//
// Solidity: function getMadHeightFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_Validators *ValidatorsCallerSession) GetMadHeightFromSnapshot(snapshotNumber *big.Int) (uint32, error) {
	return _Validators.Contract.GetMadHeightFromSnapshot(&_Validators.CallOpts, snapshotNumber)
}

// GetRawBlockClaimsSnapshot is a free data retrieval call binding the contract method 0x6372fe51.
//
// Solidity: function getRawBlockClaimsSnapshot(uint256 snapshotNumber) view returns(bytes)
func (_Validators *ValidatorsCaller) GetRawBlockClaimsSnapshot(opts *bind.CallOpts, snapshotNumber *big.Int) ([]byte, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "getRawBlockClaimsSnapshot", snapshotNumber)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// GetRawBlockClaimsSnapshot is a free data retrieval call binding the contract method 0x6372fe51.
//
// Solidity: function getRawBlockClaimsSnapshot(uint256 snapshotNumber) view returns(bytes)
func (_Validators *ValidatorsSession) GetRawBlockClaimsSnapshot(snapshotNumber *big.Int) ([]byte, error) {
	return _Validators.Contract.GetRawBlockClaimsSnapshot(&_Validators.CallOpts, snapshotNumber)
}

// GetRawBlockClaimsSnapshot is a free data retrieval call binding the contract method 0x6372fe51.
//
// Solidity: function getRawBlockClaimsSnapshot(uint256 snapshotNumber) view returns(bytes)
func (_Validators *ValidatorsCallerSession) GetRawBlockClaimsSnapshot(snapshotNumber *big.Int) ([]byte, error) {
	return _Validators.Contract.GetRawBlockClaimsSnapshot(&_Validators.CallOpts, snapshotNumber)
}

// GetRawSignatureSnapshot is a free data retrieval call binding the contract method 0x35b6c632.
//
// Solidity: function getRawSignatureSnapshot(uint256 snapshotNumber) view returns(bytes)
func (_Validators *ValidatorsCaller) GetRawSignatureSnapshot(opts *bind.CallOpts, snapshotNumber *big.Int) ([]byte, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "getRawSignatureSnapshot", snapshotNumber)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// GetRawSignatureSnapshot is a free data retrieval call binding the contract method 0x35b6c632.
//
// Solidity: function getRawSignatureSnapshot(uint256 snapshotNumber) view returns(bytes)
func (_Validators *ValidatorsSession) GetRawSignatureSnapshot(snapshotNumber *big.Int) ([]byte, error) {
	return _Validators.Contract.GetRawSignatureSnapshot(&_Validators.CallOpts, snapshotNumber)
}

// GetRawSignatureSnapshot is a free data retrieval call binding the contract method 0x35b6c632.
//
// Solidity: function getRawSignatureSnapshot(uint256 snapshotNumber) view returns(bytes)
func (_Validators *ValidatorsCallerSession) GetRawSignatureSnapshot(snapshotNumber *big.Int) ([]byte, error) {
	return _Validators.Contract.GetRawSignatureSnapshot(&_Validators.CallOpts, snapshotNumber)
}

// GetValidatorPublicKey is a free data retrieval call binding the contract method 0x4e6f4a22.
//
// Solidity: function getValidatorPublicKey(address _validator) view returns(uint256[2])
func (_Validators *ValidatorsCaller) GetValidatorPublicKey(opts *bind.CallOpts, _validator common.Address) ([2]*big.Int, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "getValidatorPublicKey", _validator)

	if err != nil {
		return *new([2]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([2]*big.Int)).(*[2]*big.Int)

	return out0, err

}

// GetValidatorPublicKey is a free data retrieval call binding the contract method 0x4e6f4a22.
//
// Solidity: function getValidatorPublicKey(address _validator) view returns(uint256[2])
func (_Validators *ValidatorsSession) GetValidatorPublicKey(_validator common.Address) ([2]*big.Int, error) {
	return _Validators.Contract.GetValidatorPublicKey(&_Validators.CallOpts, _validator)
}

// GetValidatorPublicKey is a free data retrieval call binding the contract method 0x4e6f4a22.
//
// Solidity: function getValidatorPublicKey(address _validator) view returns(uint256[2])
func (_Validators *ValidatorsCallerSession) GetValidatorPublicKey(_validator common.Address) ([2]*big.Int, error) {
	return _Validators.Contract.GetValidatorPublicKey(&_Validators.CallOpts, _validator)
}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() view returns(address[])
func (_Validators *ValidatorsCaller) GetValidators(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "getValidators")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() view returns(address[])
func (_Validators *ValidatorsSession) GetValidators() ([]common.Address, error) {
	return _Validators.Contract.GetValidators(&_Validators.CallOpts)
}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() view returns(address[])
func (_Validators *ValidatorsCallerSession) GetValidators() ([]common.Address, error) {
	return _Validators.Contract.GetValidators(&_Validators.CallOpts)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address validator) view returns(bool)
func (_Validators *ValidatorsCaller) IsValidator(opts *bind.CallOpts, validator common.Address) (bool, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "isValidator", validator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address validator) view returns(bool)
func (_Validators *ValidatorsSession) IsValidator(validator common.Address) (bool, error) {
	return _Validators.Contract.IsValidator(&_Validators.CallOpts, validator)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address validator) view returns(bool)
func (_Validators *ValidatorsCallerSession) IsValidator(validator common.Address) (bool, error) {
	return _Validators.Contract.IsValidator(&_Validators.CallOpts, validator)
}

// MajorStakeFine is a free data retrieval call binding the contract method 0xad43d845.
//
// Solidity: function majorStakeFine() view returns(uint256)
func (_Validators *ValidatorsCaller) MajorStakeFine(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "majorStakeFine")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MajorStakeFine is a free data retrieval call binding the contract method 0xad43d845.
//
// Solidity: function majorStakeFine() view returns(uint256)
func (_Validators *ValidatorsSession) MajorStakeFine() (*big.Int, error) {
	return _Validators.Contract.MajorStakeFine(&_Validators.CallOpts)
}

// MajorStakeFine is a free data retrieval call binding the contract method 0xad43d845.
//
// Solidity: function majorStakeFine() view returns(uint256)
func (_Validators *ValidatorsCallerSession) MajorStakeFine() (*big.Int, error) {
	return _Validators.Contract.MajorStakeFine(&_Validators.CallOpts)
}

// MinEthSnapshotSize is a free data retrieval call binding the contract method 0xe4b82105.
//
// Solidity: function minEthSnapshotSize() view returns(uint256)
func (_Validators *ValidatorsCaller) MinEthSnapshotSize(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "minEthSnapshotSize")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinEthSnapshotSize is a free data retrieval call binding the contract method 0xe4b82105.
//
// Solidity: function minEthSnapshotSize() view returns(uint256)
func (_Validators *ValidatorsSession) MinEthSnapshotSize() (*big.Int, error) {
	return _Validators.Contract.MinEthSnapshotSize(&_Validators.CallOpts)
}

// MinEthSnapshotSize is a free data retrieval call binding the contract method 0xe4b82105.
//
// Solidity: function minEthSnapshotSize() view returns(uint256)
func (_Validators *ValidatorsCallerSession) MinEthSnapshotSize() (*big.Int, error) {
	return _Validators.Contract.MinEthSnapshotSize(&_Validators.CallOpts)
}

// MinMadSnapshotSize is a free data retrieval call binding the contract method 0xc17cb9ee.
//
// Solidity: function minMadSnapshotSize() view returns(uint256)
func (_Validators *ValidatorsCaller) MinMadSnapshotSize(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "minMadSnapshotSize")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinMadSnapshotSize is a free data retrieval call binding the contract method 0xc17cb9ee.
//
// Solidity: function minMadSnapshotSize() view returns(uint256)
func (_Validators *ValidatorsSession) MinMadSnapshotSize() (*big.Int, error) {
	return _Validators.Contract.MinMadSnapshotSize(&_Validators.CallOpts)
}

// MinMadSnapshotSize is a free data retrieval call binding the contract method 0xc17cb9ee.
//
// Solidity: function minMadSnapshotSize() view returns(uint256)
func (_Validators *ValidatorsCallerSession) MinMadSnapshotSize() (*big.Int, error) {
	return _Validators.Contract.MinMadSnapshotSize(&_Validators.CallOpts)
}

// MinimumStake is a free data retrieval call binding the contract method 0xec5ffac2.
//
// Solidity: function minimumStake() view returns(uint256)
func (_Validators *ValidatorsCaller) MinimumStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "minimumStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinimumStake is a free data retrieval call binding the contract method 0xec5ffac2.
//
// Solidity: function minimumStake() view returns(uint256)
func (_Validators *ValidatorsSession) MinimumStake() (*big.Int, error) {
	return _Validators.Contract.MinimumStake(&_Validators.CallOpts)
}

// MinimumStake is a free data retrieval call binding the contract method 0xec5ffac2.
//
// Solidity: function minimumStake() view returns(uint256)
func (_Validators *ValidatorsCallerSession) MinimumStake() (*big.Int, error) {
	return _Validators.Contract.MinimumStake(&_Validators.CallOpts)
}

// MinorStakeFine is a free data retrieval call binding the contract method 0x6d059126.
//
// Solidity: function minorStakeFine() view returns(uint256)
func (_Validators *ValidatorsCaller) MinorStakeFine(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "minorStakeFine")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinorStakeFine is a free data retrieval call binding the contract method 0x6d059126.
//
// Solidity: function minorStakeFine() view returns(uint256)
func (_Validators *ValidatorsSession) MinorStakeFine() (*big.Int, error) {
	return _Validators.Contract.MinorStakeFine(&_Validators.CallOpts)
}

// MinorStakeFine is a free data retrieval call binding the contract method 0x6d059126.
//
// Solidity: function minorStakeFine() view returns(uint256)
func (_Validators *ValidatorsCallerSession) MinorStakeFine() (*big.Int, error) {
	return _Validators.Contract.MinorStakeFine(&_Validators.CallOpts)
}

// ParseSignatureGroup is a free data retrieval call binding the contract method 0x9be2f2df.
//
// Solidity: function parseSignatureGroup(bytes _signatureGroup) pure returns(uint256[4] publicKey, uint256[2] signature)
func (_Validators *ValidatorsCaller) ParseSignatureGroup(opts *bind.CallOpts, _signatureGroup []byte) (struct {
	PublicKey [4]*big.Int
	Signature [2]*big.Int
}, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "parseSignatureGroup", _signatureGroup)

	outstruct := new(struct {
		PublicKey [4]*big.Int
		Signature [2]*big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.PublicKey = *abi.ConvertType(out[0], new([4]*big.Int)).(*[4]*big.Int)
	outstruct.Signature = *abi.ConvertType(out[1], new([2]*big.Int)).(*[2]*big.Int)

	return *outstruct, err

}

// ParseSignatureGroup is a free data retrieval call binding the contract method 0x9be2f2df.
//
// Solidity: function parseSignatureGroup(bytes _signatureGroup) pure returns(uint256[4] publicKey, uint256[2] signature)
func (_Validators *ValidatorsSession) ParseSignatureGroup(_signatureGroup []byte) (struct {
	PublicKey [4]*big.Int
	Signature [2]*big.Int
}, error) {
	return _Validators.Contract.ParseSignatureGroup(&_Validators.CallOpts, _signatureGroup)
}

// ParseSignatureGroup is a free data retrieval call binding the contract method 0x9be2f2df.
//
// Solidity: function parseSignatureGroup(bytes _signatureGroup) pure returns(uint256[4] publicKey, uint256[2] signature)
func (_Validators *ValidatorsCallerSession) ParseSignatureGroup(_signatureGroup []byte) (struct {
	PublicKey [4]*big.Int
	Signature [2]*big.Int
}, error) {
	return _Validators.Contract.ParseSignatureGroup(&_Validators.CallOpts, _signatureGroup)
}

// Reverse is a free data retrieval call binding the contract method 0xec11c823.
//
// Solidity: function reverse(bytes orig) pure returns(bytes reversed)
func (_Validators *ValidatorsCaller) Reverse(opts *bind.CallOpts, orig []byte) ([]byte, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "reverse", orig)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// Reverse is a free data retrieval call binding the contract method 0xec11c823.
//
// Solidity: function reverse(bytes orig) pure returns(bytes reversed)
func (_Validators *ValidatorsSession) Reverse(orig []byte) ([]byte, error) {
	return _Validators.Contract.Reverse(&_Validators.CallOpts, orig)
}

// Reverse is a free data retrieval call binding the contract method 0xec11c823.
//
// Solidity: function reverse(bytes orig) pure returns(bytes reversed)
func (_Validators *ValidatorsCallerSession) Reverse(orig []byte) ([]byte, error) {
	return _Validators.Contract.Reverse(&_Validators.CallOpts, orig)
}

// RewardAmount is a free data retrieval call binding the contract method 0xf7b2a7be.
//
// Solidity: function rewardAmount() view returns(uint256)
func (_Validators *ValidatorsCaller) RewardAmount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "rewardAmount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RewardAmount is a free data retrieval call binding the contract method 0xf7b2a7be.
//
// Solidity: function rewardAmount() view returns(uint256)
func (_Validators *ValidatorsSession) RewardAmount() (*big.Int, error) {
	return _Validators.Contract.RewardAmount(&_Validators.CallOpts)
}

// RewardAmount is a free data retrieval call binding the contract method 0xf7b2a7be.
//
// Solidity: function rewardAmount() view returns(uint256)
func (_Validators *ValidatorsCallerSession) RewardAmount() (*big.Int, error) {
	return _Validators.Contract.RewardAmount(&_Validators.CallOpts)
}

// RewardBonus is a free data retrieval call binding the contract method 0xfdf553cf.
//
// Solidity: function rewardBonus() view returns(uint256)
func (_Validators *ValidatorsCaller) RewardBonus(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "rewardBonus")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RewardBonus is a free data retrieval call binding the contract method 0xfdf553cf.
//
// Solidity: function rewardBonus() view returns(uint256)
func (_Validators *ValidatorsSession) RewardBonus() (*big.Int, error) {
	return _Validators.Contract.RewardBonus(&_Validators.CallOpts)
}

// RewardBonus is a free data retrieval call binding the contract method 0xfdf553cf.
//
// Solidity: function rewardBonus() view returns(uint256)
func (_Validators *ValidatorsCallerSession) RewardBonus() (*big.Int, error) {
	return _Validators.Contract.RewardBonus(&_Validators.CallOpts)
}

// AddValidator is a paid mutator transaction binding the contract method 0xeb6320c7.
//
// Solidity: function addValidator(address _validator, uint256[2] _madID) returns(uint8)
func (_Validators *ValidatorsTransactor) AddValidator(opts *bind.TransactOpts, _validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "addValidator", _validator, _madID)
}

// AddValidator is a paid mutator transaction binding the contract method 0xeb6320c7.
//
// Solidity: function addValidator(address _validator, uint256[2] _madID) returns(uint8)
func (_Validators *ValidatorsSession) AddValidator(_validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _Validators.Contract.AddValidator(&_Validators.TransactOpts, _validator, _madID)
}

// AddValidator is a paid mutator transaction binding the contract method 0xeb6320c7.
//
// Solidity: function addValidator(address _validator, uint256[2] _madID) returns(uint8)
func (_Validators *ValidatorsTransactorSession) AddValidator(_validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _Validators.Contract.AddValidator(&_Validators.TransactOpts, _validator, _madID)
}

// Burn is a paid mutator transaction binding the contract method 0x89afcb44.
//
// Solidity: function burn(address who) returns()
func (_Validators *ValidatorsTransactor) Burn(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "burn", who)
}

// Burn is a paid mutator transaction binding the contract method 0x89afcb44.
//
// Solidity: function burn(address who) returns()
func (_Validators *ValidatorsSession) Burn(who common.Address) (*types.Transaction, error) {
	return _Validators.Contract.Burn(&_Validators.TransactOpts, who)
}

// Burn is a paid mutator transaction binding the contract method 0x89afcb44.
//
// Solidity: function burn(address who) returns()
func (_Validators *ValidatorsTransactorSession) Burn(who common.Address) (*types.Transaction, error) {
	return _Validators.Contract.Burn(&_Validators.TransactOpts, who)
}

// ConfirmValidators is a paid mutator transaction binding the contract method 0x35c6a163.
//
// Solidity: function confirmValidators() returns(bool)
func (_Validators *ValidatorsTransactor) ConfirmValidators(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "confirmValidators")
}

// ConfirmValidators is a paid mutator transaction binding the contract method 0x35c6a163.
//
// Solidity: function confirmValidators() returns(bool)
func (_Validators *ValidatorsSession) ConfirmValidators() (*types.Transaction, error) {
	return _Validators.Contract.ConfirmValidators(&_Validators.TransactOpts)
}

// ConfirmValidators is a paid mutator transaction binding the contract method 0x35c6a163.
//
// Solidity: function confirmValidators() returns(bool)
func (_Validators *ValidatorsTransactorSession) ConfirmValidators() (*types.Transaction, error) {
	return _Validators.Contract.ConfirmValidators(&_Validators.TransactOpts)
}

// Fine is a paid mutator transaction binding the contract method 0xdb1e4662.
//
// Solidity: function fine(address who, uint256 amount) returns(bool)
func (_Validators *ValidatorsTransactor) Fine(opts *bind.TransactOpts, who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "fine", who, amount)
}

// Fine is a paid mutator transaction binding the contract method 0xdb1e4662.
//
// Solidity: function fine(address who, uint256 amount) returns(bool)
func (_Validators *ValidatorsSession) Fine(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.Fine(&_Validators.TransactOpts, who, amount)
}

// Fine is a paid mutator transaction binding the contract method 0xdb1e4662.
//
// Solidity: function fine(address who, uint256 amount) returns(bool)
func (_Validators *ValidatorsTransactorSession) Fine(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.Fine(&_Validators.TransactOpts, who, amount)
}

// InitializeParticipants is a paid mutator transaction binding the contract method 0xee8420dd.
//
// Solidity: function initializeParticipants(address registry) returns()
func (_Validators *ValidatorsTransactor) InitializeParticipants(opts *bind.TransactOpts, registry common.Address) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "initializeParticipants", registry)
}

// InitializeParticipants is a paid mutator transaction binding the contract method 0xee8420dd.
//
// Solidity: function initializeParticipants(address registry) returns()
func (_Validators *ValidatorsSession) InitializeParticipants(registry common.Address) (*types.Transaction, error) {
	return _Validators.Contract.InitializeParticipants(&_Validators.TransactOpts, registry)
}

// InitializeParticipants is a paid mutator transaction binding the contract method 0xee8420dd.
//
// Solidity: function initializeParticipants(address registry) returns()
func (_Validators *ValidatorsTransactorSession) InitializeParticipants(registry common.Address) (*types.Transaction, error) {
	return _Validators.Contract.InitializeParticipants(&_Validators.TransactOpts, registry)
}

// InitializeSnapshots is a paid mutator transaction binding the contract method 0x20d9a246.
//
// Solidity: function initializeSnapshots(address registry) returns()
func (_Validators *ValidatorsTransactor) InitializeSnapshots(opts *bind.TransactOpts, registry common.Address) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "initializeSnapshots", registry)
}

// InitializeSnapshots is a paid mutator transaction binding the contract method 0x20d9a246.
//
// Solidity: function initializeSnapshots(address registry) returns()
func (_Validators *ValidatorsSession) InitializeSnapshots(registry common.Address) (*types.Transaction, error) {
	return _Validators.Contract.InitializeSnapshots(&_Validators.TransactOpts, registry)
}

// InitializeSnapshots is a paid mutator transaction binding the contract method 0x20d9a246.
//
// Solidity: function initializeSnapshots(address registry) returns()
func (_Validators *ValidatorsTransactorSession) InitializeSnapshots(registry common.Address) (*types.Transaction, error) {
	return _Validators.Contract.InitializeSnapshots(&_Validators.TransactOpts, registry)
}

// InitializeStaking is a paid mutator transaction binding the contract method 0x04ad7a83.
//
// Solidity: function initializeStaking(address registry) returns()
func (_Validators *ValidatorsTransactor) InitializeStaking(opts *bind.TransactOpts, registry common.Address) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "initializeStaking", registry)
}

// InitializeStaking is a paid mutator transaction binding the contract method 0x04ad7a83.
//
// Solidity: function initializeStaking(address registry) returns()
func (_Validators *ValidatorsSession) InitializeStaking(registry common.Address) (*types.Transaction, error) {
	return _Validators.Contract.InitializeStaking(&_Validators.TransactOpts, registry)
}

// InitializeStaking is a paid mutator transaction binding the contract method 0x04ad7a83.
//
// Solidity: function initializeStaking(address registry) returns()
func (_Validators *ValidatorsTransactorSession) InitializeStaking(registry common.Address) (*types.Transaction, error) {
	return _Validators.Contract.InitializeStaking(&_Validators.TransactOpts, registry)
}

// LockRewardFor is a paid mutator transaction binding the contract method 0x0ddb07ad.
//
// Solidity: function lockRewardFor(address who, uint256 amountReward, uint256 unlockEpoch) returns(bool)
func (_Validators *ValidatorsTransactor) LockRewardFor(opts *bind.TransactOpts, who common.Address, amountReward *big.Int, unlockEpoch *big.Int) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "lockRewardFor", who, amountReward, unlockEpoch)
}

// LockRewardFor is a paid mutator transaction binding the contract method 0x0ddb07ad.
//
// Solidity: function lockRewardFor(address who, uint256 amountReward, uint256 unlockEpoch) returns(bool)
func (_Validators *ValidatorsSession) LockRewardFor(who common.Address, amountReward *big.Int, unlockEpoch *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.LockRewardFor(&_Validators.TransactOpts, who, amountReward, unlockEpoch)
}

// LockRewardFor is a paid mutator transaction binding the contract method 0x0ddb07ad.
//
// Solidity: function lockRewardFor(address who, uint256 amountReward, uint256 unlockEpoch) returns(bool)
func (_Validators *ValidatorsTransactorSession) LockRewardFor(who common.Address, amountReward *big.Int, unlockEpoch *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.LockRewardFor(&_Validators.TransactOpts, who, amountReward, unlockEpoch)
}

// LockStake is a paid mutator transaction binding the contract method 0xf50ddb67.
//
// Solidity: function lockStake(uint256 amount) returns(bool)
func (_Validators *ValidatorsTransactor) LockStake(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "lockStake", amount)
}

// LockStake is a paid mutator transaction binding the contract method 0xf50ddb67.
//
// Solidity: function lockStake(uint256 amount) returns(bool)
func (_Validators *ValidatorsSession) LockStake(amount *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.LockStake(&_Validators.TransactOpts, amount)
}

// LockStake is a paid mutator transaction binding the contract method 0xf50ddb67.
//
// Solidity: function lockStake(uint256 amount) returns(bool)
func (_Validators *ValidatorsTransactorSession) LockStake(amount *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.LockStake(&_Validators.TransactOpts, amount)
}

// LockStakeFor is a paid mutator transaction binding the contract method 0x461cbdcf.
//
// Solidity: function lockStakeFor(address who, uint256 amount) returns(bool)
func (_Validators *ValidatorsTransactor) LockStakeFor(opts *bind.TransactOpts, who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "lockStakeFor", who, amount)
}

// LockStakeFor is a paid mutator transaction binding the contract method 0x461cbdcf.
//
// Solidity: function lockStakeFor(address who, uint256 amount) returns(bool)
func (_Validators *ValidatorsSession) LockStakeFor(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.LockStakeFor(&_Validators.TransactOpts, who, amount)
}

// LockStakeFor is a paid mutator transaction binding the contract method 0x461cbdcf.
//
// Solidity: function lockStakeFor(address who, uint256 amount) returns(bool)
func (_Validators *ValidatorsTransactorSession) LockStakeFor(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.LockStakeFor(&_Validators.TransactOpts, who, amount)
}

// MajorFine is a paid mutator transaction binding the contract method 0x57b4f82a.
//
// Solidity: function majorFine(address who) returns()
func (_Validators *ValidatorsTransactor) MajorFine(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "majorFine", who)
}

// MajorFine is a paid mutator transaction binding the contract method 0x57b4f82a.
//
// Solidity: function majorFine(address who) returns()
func (_Validators *ValidatorsSession) MajorFine(who common.Address) (*types.Transaction, error) {
	return _Validators.Contract.MajorFine(&_Validators.TransactOpts, who)
}

// MajorFine is a paid mutator transaction binding the contract method 0x57b4f82a.
//
// Solidity: function majorFine(address who) returns()
func (_Validators *ValidatorsTransactorSession) MajorFine(who common.Address) (*types.Transaction, error) {
	return _Validators.Contract.MajorFine(&_Validators.TransactOpts, who)
}

// MinorFine is a paid mutator transaction binding the contract method 0xd2a2c55c.
//
// Solidity: function minorFine(address who) returns()
func (_Validators *ValidatorsTransactor) MinorFine(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "minorFine", who)
}

// MinorFine is a paid mutator transaction binding the contract method 0xd2a2c55c.
//
// Solidity: function minorFine(address who) returns()
func (_Validators *ValidatorsSession) MinorFine(who common.Address) (*types.Transaction, error) {
	return _Validators.Contract.MinorFine(&_Validators.TransactOpts, who)
}

// MinorFine is a paid mutator transaction binding the contract method 0xd2a2c55c.
//
// Solidity: function minorFine(address who) returns()
func (_Validators *ValidatorsTransactorSession) MinorFine(who common.Address) (*types.Transaction, error) {
	return _Validators.Contract.MinorFine(&_Validators.TransactOpts, who)
}

// RemoveValidator is a paid mutator transaction binding the contract method 0x844469b2.
//
// Solidity: function removeValidator(address _validator, uint256[2] _madID) returns(uint8)
func (_Validators *ValidatorsTransactor) RemoveValidator(opts *bind.TransactOpts, _validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "removeValidator", _validator, _madID)
}

// RemoveValidator is a paid mutator transaction binding the contract method 0x844469b2.
//
// Solidity: function removeValidator(address _validator, uint256[2] _madID) returns(uint8)
func (_Validators *ValidatorsSession) RemoveValidator(_validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _Validators.Contract.RemoveValidator(&_Validators.TransactOpts, _validator, _madID)
}

// RemoveValidator is a paid mutator transaction binding the contract method 0x844469b2.
//
// Solidity: function removeValidator(address _validator, uint256[2] _madID) returns(uint8)
func (_Validators *ValidatorsTransactorSession) RemoveValidator(_validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _Validators.Contract.RemoveValidator(&_Validators.TransactOpts, _validator, _madID)
}

// RequestUnlockStake is a paid mutator transaction binding the contract method 0xaeaf8812.
//
// Solidity: function requestUnlockStake() returns()
func (_Validators *ValidatorsTransactor) RequestUnlockStake(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "requestUnlockStake")
}

// RequestUnlockStake is a paid mutator transaction binding the contract method 0xaeaf8812.
//
// Solidity: function requestUnlockStake() returns()
func (_Validators *ValidatorsSession) RequestUnlockStake() (*types.Transaction, error) {
	return _Validators.Contract.RequestUnlockStake(&_Validators.TransactOpts)
}

// RequestUnlockStake is a paid mutator transaction binding the contract method 0xaeaf8812.
//
// Solidity: function requestUnlockStake() returns()
func (_Validators *ValidatorsTransactorSession) RequestUnlockStake() (*types.Transaction, error) {
	return _Validators.Contract.RequestUnlockStake(&_Validators.TransactOpts)
}

// RequestUnlockStakeFor is a paid mutator transaction binding the contract method 0x4fcf2b72.
//
// Solidity: function requestUnlockStakeFor(address who) returns()
func (_Validators *ValidatorsTransactor) RequestUnlockStakeFor(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "requestUnlockStakeFor", who)
}

// RequestUnlockStakeFor is a paid mutator transaction binding the contract method 0x4fcf2b72.
//
// Solidity: function requestUnlockStakeFor(address who) returns()
func (_Validators *ValidatorsSession) RequestUnlockStakeFor(who common.Address) (*types.Transaction, error) {
	return _Validators.Contract.RequestUnlockStakeFor(&_Validators.TransactOpts, who)
}

// RequestUnlockStakeFor is a paid mutator transaction binding the contract method 0x4fcf2b72.
//
// Solidity: function requestUnlockStakeFor(address who) returns()
func (_Validators *ValidatorsTransactorSession) RequestUnlockStakeFor(who common.Address) (*types.Transaction, error) {
	return _Validators.Contract.RequestUnlockStakeFor(&_Validators.TransactOpts, who)
}

// SetChainId is a paid mutator transaction binding the contract method 0xa179f124.
//
// Solidity: function setChainId(uint32 _chainId) returns()
func (_Validators *ValidatorsTransactor) SetChainId(opts *bind.TransactOpts, _chainId uint32) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "setChainId", _chainId)
}

// SetChainId is a paid mutator transaction binding the contract method 0xa179f124.
//
// Solidity: function setChainId(uint32 _chainId) returns()
func (_Validators *ValidatorsSession) SetChainId(_chainId uint32) (*types.Transaction, error) {
	return _Validators.Contract.SetChainId(&_Validators.TransactOpts, _chainId)
}

// SetChainId is a paid mutator transaction binding the contract method 0xa179f124.
//
// Solidity: function setChainId(uint32 _chainId) returns()
func (_Validators *ValidatorsTransactorSession) SetChainId(_chainId uint32) (*types.Transaction, error) {
	return _Validators.Contract.SetChainId(&_Validators.TransactOpts, _chainId)
}

// SetEpoch is a paid mutator transaction binding the contract method 0x0ceb2cef.
//
// Solidity: function setEpoch(uint256 ns) returns()
func (_Validators *ValidatorsTransactor) SetEpoch(opts *bind.TransactOpts, ns *big.Int) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "setEpoch", ns)
}

// SetEpoch is a paid mutator transaction binding the contract method 0x0ceb2cef.
//
// Solidity: function setEpoch(uint256 ns) returns()
func (_Validators *ValidatorsSession) SetEpoch(ns *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.SetEpoch(&_Validators.TransactOpts, ns)
}

// SetEpoch is a paid mutator transaction binding the contract method 0x0ceb2cef.
//
// Solidity: function setEpoch(uint256 ns) returns()
func (_Validators *ValidatorsTransactorSession) SetEpoch(ns *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.SetEpoch(&_Validators.TransactOpts, ns)
}

// SetEpochDelay is a paid mutator transaction binding the contract method 0xbd695a43.
//
// Solidity: function setEpochDelay(uint256 _epochDelay) returns()
func (_Validators *ValidatorsTransactor) SetEpochDelay(opts *bind.TransactOpts, _epochDelay *big.Int) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "setEpochDelay", _epochDelay)
}

// SetEpochDelay is a paid mutator transaction binding the contract method 0xbd695a43.
//
// Solidity: function setEpochDelay(uint256 _epochDelay) returns()
func (_Validators *ValidatorsSession) SetEpochDelay(_epochDelay *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.SetEpochDelay(&_Validators.TransactOpts, _epochDelay)
}

// SetEpochDelay is a paid mutator transaction binding the contract method 0xbd695a43.
//
// Solidity: function setEpochDelay(uint256 _epochDelay) returns()
func (_Validators *ValidatorsTransactorSession) SetEpochDelay(_epochDelay *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.SetEpochDelay(&_Validators.TransactOpts, _epochDelay)
}

// SetMajorStakeFine is a paid mutator transaction binding the contract method 0x78146c2f.
//
// Solidity: function setMajorStakeFine(uint256 _majorStakeFine) returns()
func (_Validators *ValidatorsTransactor) SetMajorStakeFine(opts *bind.TransactOpts, _majorStakeFine *big.Int) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "setMajorStakeFine", _majorStakeFine)
}

// SetMajorStakeFine is a paid mutator transaction binding the contract method 0x78146c2f.
//
// Solidity: function setMajorStakeFine(uint256 _majorStakeFine) returns()
func (_Validators *ValidatorsSession) SetMajorStakeFine(_majorStakeFine *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.SetMajorStakeFine(&_Validators.TransactOpts, _majorStakeFine)
}

// SetMajorStakeFine is a paid mutator transaction binding the contract method 0x78146c2f.
//
// Solidity: function setMajorStakeFine(uint256 _majorStakeFine) returns()
func (_Validators *ValidatorsTransactorSession) SetMajorStakeFine(_majorStakeFine *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.SetMajorStakeFine(&_Validators.TransactOpts, _majorStakeFine)
}

// SetMinEthSnapshotSize is a paid mutator transaction binding the contract method 0x0d81dce4.
//
// Solidity: function setMinEthSnapshotSize(uint256 _minSize) returns()
func (_Validators *ValidatorsTransactor) SetMinEthSnapshotSize(opts *bind.TransactOpts, _minSize *big.Int) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "setMinEthSnapshotSize", _minSize)
}

// SetMinEthSnapshotSize is a paid mutator transaction binding the contract method 0x0d81dce4.
//
// Solidity: function setMinEthSnapshotSize(uint256 _minSize) returns()
func (_Validators *ValidatorsSession) SetMinEthSnapshotSize(_minSize *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.SetMinEthSnapshotSize(&_Validators.TransactOpts, _minSize)
}

// SetMinEthSnapshotSize is a paid mutator transaction binding the contract method 0x0d81dce4.
//
// Solidity: function setMinEthSnapshotSize(uint256 _minSize) returns()
func (_Validators *ValidatorsTransactorSession) SetMinEthSnapshotSize(_minSize *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.SetMinEthSnapshotSize(&_Validators.TransactOpts, _minSize)
}

// SetMinMadSnapshotSize is a paid mutator transaction binding the contract method 0x99e33e3d.
//
// Solidity: function setMinMadSnapshotSize(uint256 _minSize) returns()
func (_Validators *ValidatorsTransactor) SetMinMadSnapshotSize(opts *bind.TransactOpts, _minSize *big.Int) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "setMinMadSnapshotSize", _minSize)
}

// SetMinMadSnapshotSize is a paid mutator transaction binding the contract method 0x99e33e3d.
//
// Solidity: function setMinMadSnapshotSize(uint256 _minSize) returns()
func (_Validators *ValidatorsSession) SetMinMadSnapshotSize(_minSize *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.SetMinMadSnapshotSize(&_Validators.TransactOpts, _minSize)
}

// SetMinMadSnapshotSize is a paid mutator transaction binding the contract method 0x99e33e3d.
//
// Solidity: function setMinMadSnapshotSize(uint256 _minSize) returns()
func (_Validators *ValidatorsTransactorSession) SetMinMadSnapshotSize(_minSize *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.SetMinMadSnapshotSize(&_Validators.TransactOpts, _minSize)
}

// SetMinimumStake is a paid mutator transaction binding the contract method 0x233e9903.
//
// Solidity: function setMinimumStake(uint256 _minimumStake) returns()
func (_Validators *ValidatorsTransactor) SetMinimumStake(opts *bind.TransactOpts, _minimumStake *big.Int) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "setMinimumStake", _minimumStake)
}

// SetMinimumStake is a paid mutator transaction binding the contract method 0x233e9903.
//
// Solidity: function setMinimumStake(uint256 _minimumStake) returns()
func (_Validators *ValidatorsSession) SetMinimumStake(_minimumStake *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.SetMinimumStake(&_Validators.TransactOpts, _minimumStake)
}

// SetMinimumStake is a paid mutator transaction binding the contract method 0x233e9903.
//
// Solidity: function setMinimumStake(uint256 _minimumStake) returns()
func (_Validators *ValidatorsTransactorSession) SetMinimumStake(_minimumStake *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.SetMinimumStake(&_Validators.TransactOpts, _minimumStake)
}

// SetMinorStakeFine is a paid mutator transaction binding the contract method 0x29693c5c.
//
// Solidity: function setMinorStakeFine(uint256 _minorStakeFine) returns()
func (_Validators *ValidatorsTransactor) SetMinorStakeFine(opts *bind.TransactOpts, _minorStakeFine *big.Int) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "setMinorStakeFine", _minorStakeFine)
}

// SetMinorStakeFine is a paid mutator transaction binding the contract method 0x29693c5c.
//
// Solidity: function setMinorStakeFine(uint256 _minorStakeFine) returns()
func (_Validators *ValidatorsSession) SetMinorStakeFine(_minorStakeFine *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.SetMinorStakeFine(&_Validators.TransactOpts, _minorStakeFine)
}

// SetMinorStakeFine is a paid mutator transaction binding the contract method 0x29693c5c.
//
// Solidity: function setMinorStakeFine(uint256 _minorStakeFine) returns()
func (_Validators *ValidatorsTransactorSession) SetMinorStakeFine(_minorStakeFine *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.SetMinorStakeFine(&_Validators.TransactOpts, _minorStakeFine)
}

// SetRewardAmount is a paid mutator transaction binding the contract method 0xa8a65a78.
//
// Solidity: function setRewardAmount(uint256 _rewardAmount) returns()
func (_Validators *ValidatorsTransactor) SetRewardAmount(opts *bind.TransactOpts, _rewardAmount *big.Int) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "setRewardAmount", _rewardAmount)
}

// SetRewardAmount is a paid mutator transaction binding the contract method 0xa8a65a78.
//
// Solidity: function setRewardAmount(uint256 _rewardAmount) returns()
func (_Validators *ValidatorsSession) SetRewardAmount(_rewardAmount *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.SetRewardAmount(&_Validators.TransactOpts, _rewardAmount)
}

// SetRewardAmount is a paid mutator transaction binding the contract method 0xa8a65a78.
//
// Solidity: function setRewardAmount(uint256 _rewardAmount) returns()
func (_Validators *ValidatorsTransactorSession) SetRewardAmount(_rewardAmount *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.SetRewardAmount(&_Validators.TransactOpts, _rewardAmount)
}

// SetRewardBonus is a paid mutator transaction binding the contract method 0xf95d80fa.
//
// Solidity: function setRewardBonus(uint256 _rewardBonus) returns()
func (_Validators *ValidatorsTransactor) SetRewardBonus(opts *bind.TransactOpts, _rewardBonus *big.Int) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "setRewardBonus", _rewardBonus)
}

// SetRewardBonus is a paid mutator transaction binding the contract method 0xf95d80fa.
//
// Solidity: function setRewardBonus(uint256 _rewardBonus) returns()
func (_Validators *ValidatorsSession) SetRewardBonus(_rewardBonus *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.SetRewardBonus(&_Validators.TransactOpts, _rewardBonus)
}

// SetRewardBonus is a paid mutator transaction binding the contract method 0xf95d80fa.
//
// Solidity: function setRewardBonus(uint256 _rewardBonus) returns()
func (_Validators *ValidatorsTransactorSession) SetRewardBonus(_rewardBonus *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.SetRewardBonus(&_Validators.TransactOpts, _rewardBonus)
}

// SetValidatorMaxCount is a paid mutator transaction binding the contract method 0x2cab37f7.
//
// Solidity: function setValidatorMaxCount(uint8 max) returns()
func (_Validators *ValidatorsTransactor) SetValidatorMaxCount(opts *bind.TransactOpts, max uint8) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "setValidatorMaxCount", max)
}

// SetValidatorMaxCount is a paid mutator transaction binding the contract method 0x2cab37f7.
//
// Solidity: function setValidatorMaxCount(uint8 max) returns()
func (_Validators *ValidatorsSession) SetValidatorMaxCount(max uint8) (*types.Transaction, error) {
	return _Validators.Contract.SetValidatorMaxCount(&_Validators.TransactOpts, max)
}

// SetValidatorMaxCount is a paid mutator transaction binding the contract method 0x2cab37f7.
//
// Solidity: function setValidatorMaxCount(uint8 max) returns()
func (_Validators *ValidatorsTransactorSession) SetValidatorMaxCount(max uint8) (*types.Transaction, error) {
	return _Validators.Contract.SetValidatorMaxCount(&_Validators.TransactOpts, max)
}

// Snapshot is a paid mutator transaction binding the contract method 0x08ca1f25.
//
// Solidity: function snapshot(bytes _signatureGroup, bytes _bclaims) returns(bool)
func (_Validators *ValidatorsTransactor) Snapshot(opts *bind.TransactOpts, _signatureGroup []byte, _bclaims []byte) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "snapshot", _signatureGroup, _bclaims)
}

// Snapshot is a paid mutator transaction binding the contract method 0x08ca1f25.
//
// Solidity: function snapshot(bytes _signatureGroup, bytes _bclaims) returns(bool)
func (_Validators *ValidatorsSession) Snapshot(_signatureGroup []byte, _bclaims []byte) (*types.Transaction, error) {
	return _Validators.Contract.Snapshot(&_Validators.TransactOpts, _signatureGroup, _bclaims)
}

// Snapshot is a paid mutator transaction binding the contract method 0x08ca1f25.
//
// Solidity: function snapshot(bytes _signatureGroup, bytes _bclaims) returns(bool)
func (_Validators *ValidatorsTransactorSession) Snapshot(_signatureGroup []byte, _bclaims []byte) (*types.Transaction, error) {
	return _Validators.Contract.Snapshot(&_Validators.TransactOpts, _signatureGroup, _bclaims)
}

// UnlockReward is a paid mutator transaction binding the contract method 0xf1b7f4bf.
//
// Solidity: function unlockReward() returns(bool)
func (_Validators *ValidatorsTransactor) UnlockReward(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "unlockReward")
}

// UnlockReward is a paid mutator transaction binding the contract method 0xf1b7f4bf.
//
// Solidity: function unlockReward() returns(bool)
func (_Validators *ValidatorsSession) UnlockReward() (*types.Transaction, error) {
	return _Validators.Contract.UnlockReward(&_Validators.TransactOpts)
}

// UnlockReward is a paid mutator transaction binding the contract method 0xf1b7f4bf.
//
// Solidity: function unlockReward() returns(bool)
func (_Validators *ValidatorsTransactorSession) UnlockReward() (*types.Transaction, error) {
	return _Validators.Contract.UnlockReward(&_Validators.TransactOpts)
}

// UnlockRewardFor is a paid mutator transaction binding the contract method 0x7f91bd69.
//
// Solidity: function unlockRewardFor(address who) returns(bool)
func (_Validators *ValidatorsTransactor) UnlockRewardFor(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "unlockRewardFor", who)
}

// UnlockRewardFor is a paid mutator transaction binding the contract method 0x7f91bd69.
//
// Solidity: function unlockRewardFor(address who) returns(bool)
func (_Validators *ValidatorsSession) UnlockRewardFor(who common.Address) (*types.Transaction, error) {
	return _Validators.Contract.UnlockRewardFor(&_Validators.TransactOpts, who)
}

// UnlockRewardFor is a paid mutator transaction binding the contract method 0x7f91bd69.
//
// Solidity: function unlockRewardFor(address who) returns(bool)
func (_Validators *ValidatorsTransactorSession) UnlockRewardFor(who common.Address) (*types.Transaction, error) {
	return _Validators.Contract.UnlockRewardFor(&_Validators.TransactOpts, who)
}

// UnlockStake is a paid mutator transaction binding the contract method 0xecd8c06a.
//
// Solidity: function unlockStake(uint256 amount) returns(bool)
func (_Validators *ValidatorsTransactor) UnlockStake(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "unlockStake", amount)
}

// UnlockStake is a paid mutator transaction binding the contract method 0xecd8c06a.
//
// Solidity: function unlockStake(uint256 amount) returns(bool)
func (_Validators *ValidatorsSession) UnlockStake(amount *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.UnlockStake(&_Validators.TransactOpts, amount)
}

// UnlockStake is a paid mutator transaction binding the contract method 0xecd8c06a.
//
// Solidity: function unlockStake(uint256 amount) returns(bool)
func (_Validators *ValidatorsTransactorSession) UnlockStake(amount *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.UnlockStake(&_Validators.TransactOpts, amount)
}

// UnlockStakeFor is a paid mutator transaction binding the contract method 0xe29dda92.
//
// Solidity: function unlockStakeFor(address who, uint256 amount) returns(bool)
func (_Validators *ValidatorsTransactor) UnlockStakeFor(opts *bind.TransactOpts, who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "unlockStakeFor", who, amount)
}

// UnlockStakeFor is a paid mutator transaction binding the contract method 0xe29dda92.
//
// Solidity: function unlockStakeFor(address who, uint256 amount) returns(bool)
func (_Validators *ValidatorsSession) UnlockStakeFor(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.UnlockStakeFor(&_Validators.TransactOpts, who, amount)
}

// UnlockStakeFor is a paid mutator transaction binding the contract method 0xe29dda92.
//
// Solidity: function unlockStakeFor(address who, uint256 amount) returns(bool)
func (_Validators *ValidatorsTransactorSession) UnlockStakeFor(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.UnlockStakeFor(&_Validators.TransactOpts, who, amount)
}

// ValidatorCount is a paid mutator transaction binding the contract method 0x0f43a677.
//
// Solidity: function validatorCount() returns(uint8)
func (_Validators *ValidatorsTransactor) ValidatorCount(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "validatorCount")
}

// ValidatorCount is a paid mutator transaction binding the contract method 0x0f43a677.
//
// Solidity: function validatorCount() returns(uint8)
func (_Validators *ValidatorsSession) ValidatorCount() (*types.Transaction, error) {
	return _Validators.Contract.ValidatorCount(&_Validators.TransactOpts)
}

// ValidatorCount is a paid mutator transaction binding the contract method 0x0f43a677.
//
// Solidity: function validatorCount() returns(uint8)
func (_Validators *ValidatorsTransactorSession) ValidatorCount() (*types.Transaction, error) {
	return _Validators.Contract.ValidatorCount(&_Validators.TransactOpts)
}

// ValidatorMaxCount is a paid mutator transaction binding the contract method 0x09f0d45d.
//
// Solidity: function validatorMaxCount() returns(uint8)
func (_Validators *ValidatorsTransactor) ValidatorMaxCount(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "validatorMaxCount")
}

// ValidatorMaxCount is a paid mutator transaction binding the contract method 0x09f0d45d.
//
// Solidity: function validatorMaxCount() returns(uint8)
func (_Validators *ValidatorsSession) ValidatorMaxCount() (*types.Transaction, error) {
	return _Validators.Contract.ValidatorMaxCount(&_Validators.TransactOpts)
}

// ValidatorMaxCount is a paid mutator transaction binding the contract method 0x09f0d45d.
//
// Solidity: function validatorMaxCount() returns(uint8)
func (_Validators *ValidatorsTransactorSession) ValidatorMaxCount() (*types.Transaction, error) {
	return _Validators.Contract.ValidatorMaxCount(&_Validators.TransactOpts)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 amount) returns(bool)
func (_Validators *ValidatorsTransactor) Withdraw(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "withdraw", amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 amount) returns(bool)
func (_Validators *ValidatorsSession) Withdraw(amount *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.Withdraw(&_Validators.TransactOpts, amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 amount) returns(bool)
func (_Validators *ValidatorsTransactorSession) Withdraw(amount *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.Withdraw(&_Validators.TransactOpts, amount)
}

// WithdrawFor is a paid mutator transaction binding the contract method 0xdb518db2.
//
// Solidity: function withdrawFor(address who, uint256 amount) returns(bool)
func (_Validators *ValidatorsTransactor) WithdrawFor(opts *bind.TransactOpts, who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "withdrawFor", who, amount)
}

// WithdrawFor is a paid mutator transaction binding the contract method 0xdb518db2.
//
// Solidity: function withdrawFor(address who, uint256 amount) returns(bool)
func (_Validators *ValidatorsSession) WithdrawFor(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.WithdrawFor(&_Validators.TransactOpts, who, amount)
}

// WithdrawFor is a paid mutator transaction binding the contract method 0xdb518db2.
//
// Solidity: function withdrawFor(address who, uint256 amount) returns(bool)
func (_Validators *ValidatorsTransactorSession) WithdrawFor(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.WithdrawFor(&_Validators.TransactOpts, who, amount)
}

// WithdrawReward is a paid mutator transaction binding the contract method 0x523a3f08.
//
// Solidity: function withdrawReward(uint256 amount) returns(bool)
func (_Validators *ValidatorsTransactor) WithdrawReward(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "withdrawReward", amount)
}

// WithdrawReward is a paid mutator transaction binding the contract method 0x523a3f08.
//
// Solidity: function withdrawReward(uint256 amount) returns(bool)
func (_Validators *ValidatorsSession) WithdrawReward(amount *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.WithdrawReward(&_Validators.TransactOpts, amount)
}

// WithdrawReward is a paid mutator transaction binding the contract method 0x523a3f08.
//
// Solidity: function withdrawReward(uint256 amount) returns(bool)
func (_Validators *ValidatorsTransactorSession) WithdrawReward(amount *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.WithdrawReward(&_Validators.TransactOpts, amount)
}

// ValidatorsBurntStakeIterator is returned from FilterBurntStake and is used to iterate over the raw logs and unpacked data for BurntStake events raised by the Validators contract.
type ValidatorsBurntStakeIterator struct {
	Event *ValidatorsBurntStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsBurntStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsBurntStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsBurntStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsBurntStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsBurntStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsBurntStake represents a BurntStake event raised by the Validators contract.
type ValidatorsBurntStake struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBurntStake is a free log retrieval operation binding the contract event 0x54420ac6a7570cfba30d2f88982f0749811f67103de3a63ad8b82cb754e8680e.
//
// Solidity: event BurntStake(address indexed who, uint256 amount)
func (_Validators *ValidatorsFilterer) FilterBurntStake(opts *bind.FilterOpts, who []common.Address) (*ValidatorsBurntStakeIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Validators.contract.FilterLogs(opts, "BurntStake", whoRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorsBurntStakeIterator{contract: _Validators.contract, event: "BurntStake", logs: logs, sub: sub}, nil
}

// WatchBurntStake is a free log subscription operation binding the contract event 0x54420ac6a7570cfba30d2f88982f0749811f67103de3a63ad8b82cb754e8680e.
//
// Solidity: event BurntStake(address indexed who, uint256 amount)
func (_Validators *ValidatorsFilterer) WatchBurntStake(opts *bind.WatchOpts, sink chan<- *ValidatorsBurntStake, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Validators.contract.WatchLogs(opts, "BurntStake", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsBurntStake)
				if err := _Validators.contract.UnpackLog(event, "BurntStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBurntStake is a log parse operation binding the contract event 0x54420ac6a7570cfba30d2f88982f0749811f67103de3a63ad8b82cb754e8680e.
//
// Solidity: event BurntStake(address indexed who, uint256 amount)
func (_Validators *ValidatorsFilterer) ParseBurntStake(log types.Log) (*ValidatorsBurntStake, error) {
	event := new(ValidatorsBurntStake)
	if err := _Validators.contract.UnpackLog(event, "BurntStake", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorsFinedIterator is returned from FilterFined and is used to iterate over the raw logs and unpacked data for Fined events raised by the Validators contract.
type ValidatorsFinedIterator struct {
	Event *ValidatorsFined // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsFinedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsFined)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsFined)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsFinedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsFinedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsFined represents a Fined event raised by the Validators contract.
type ValidatorsFined struct {
	Who    common.Address
	Why    [32]byte
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterFined is a free log retrieval operation binding the contract event 0xf1254bf6cf04a475bd832353c2ccfc5e0d89e7b9c0f05a153ff897b6121b91e9.
//
// Solidity: event Fined(address indexed who, bytes32 why, uint256 amount)
func (_Validators *ValidatorsFilterer) FilterFined(opts *bind.FilterOpts, who []common.Address) (*ValidatorsFinedIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Validators.contract.FilterLogs(opts, "Fined", whoRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorsFinedIterator{contract: _Validators.contract, event: "Fined", logs: logs, sub: sub}, nil
}

// WatchFined is a free log subscription operation binding the contract event 0xf1254bf6cf04a475bd832353c2ccfc5e0d89e7b9c0f05a153ff897b6121b91e9.
//
// Solidity: event Fined(address indexed who, bytes32 why, uint256 amount)
func (_Validators *ValidatorsFilterer) WatchFined(opts *bind.WatchOpts, sink chan<- *ValidatorsFined, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Validators.contract.WatchLogs(opts, "Fined", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsFined)
				if err := _Validators.contract.UnpackLog(event, "Fined", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFined is a log parse operation binding the contract event 0xf1254bf6cf04a475bd832353c2ccfc5e0d89e7b9c0f05a153ff897b6121b91e9.
//
// Solidity: event Fined(address indexed who, bytes32 why, uint256 amount)
func (_Validators *ValidatorsFilterer) ParseFined(log types.Log) (*ValidatorsFined, error) {
	event := new(ValidatorsFined)
	if err := _Validators.contract.UnpackLog(event, "Fined", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorsKeyShareSubmissionIterator is returned from FilterKeyShareSubmission and is used to iterate over the raw logs and unpacked data for KeyShareSubmission events raised by the Validators contract.
type ValidatorsKeyShareSubmissionIterator struct {
	Event *ValidatorsKeyShareSubmission // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsKeyShareSubmissionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsKeyShareSubmission)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsKeyShareSubmission)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsKeyShareSubmissionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsKeyShareSubmissionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsKeyShareSubmission represents a KeyShareSubmission event raised by the Validators contract.
type ValidatorsKeyShareSubmission struct {
	Issuer                     common.Address
	KeyShareG1                 [2]*big.Int
	KeyShareG1CorrectnessProof [2]*big.Int
	KeyShareG2                 [4]*big.Int
	Raw                        types.Log // Blockchain specific contextual infos
}

// FilterKeyShareSubmission is a free log retrieval operation binding the contract event 0xb0ee36c3780de716eb6c83687f433ae2558a6923e090fd238b657fb6c896badc.
//
// Solidity: event KeyShareSubmission(address issuer, uint256[2] key_share_G1, uint256[2] key_share_G1_correctness_proof, uint256[4] key_share_G2)
func (_Validators *ValidatorsFilterer) FilterKeyShareSubmission(opts *bind.FilterOpts) (*ValidatorsKeyShareSubmissionIterator, error) {

	logs, sub, err := _Validators.contract.FilterLogs(opts, "KeyShareSubmission")
	if err != nil {
		return nil, err
	}
	return &ValidatorsKeyShareSubmissionIterator{contract: _Validators.contract, event: "KeyShareSubmission", logs: logs, sub: sub}, nil
}

// WatchKeyShareSubmission is a free log subscription operation binding the contract event 0xb0ee36c3780de716eb6c83687f433ae2558a6923e090fd238b657fb6c896badc.
//
// Solidity: event KeyShareSubmission(address issuer, uint256[2] key_share_G1, uint256[2] key_share_G1_correctness_proof, uint256[4] key_share_G2)
func (_Validators *ValidatorsFilterer) WatchKeyShareSubmission(opts *bind.WatchOpts, sink chan<- *ValidatorsKeyShareSubmission) (event.Subscription, error) {

	logs, sub, err := _Validators.contract.WatchLogs(opts, "KeyShareSubmission")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsKeyShareSubmission)
				if err := _Validators.contract.UnpackLog(event, "KeyShareSubmission", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKeyShareSubmission is a log parse operation binding the contract event 0xb0ee36c3780de716eb6c83687f433ae2558a6923e090fd238b657fb6c896badc.
//
// Solidity: event KeyShareSubmission(address issuer, uint256[2] key_share_G1, uint256[2] key_share_G1_correctness_proof, uint256[4] key_share_G2)
func (_Validators *ValidatorsFilterer) ParseKeyShareSubmission(log types.Log) (*ValidatorsKeyShareSubmission, error) {
	event := new(ValidatorsKeyShareSubmission)
	if err := _Validators.contract.UnpackLog(event, "KeyShareSubmission", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorsLockedRewardIterator is returned from FilterLockedReward and is used to iterate over the raw logs and unpacked data for LockedReward events raised by the Validators contract.
type ValidatorsLockedRewardIterator struct {
	Event *ValidatorsLockedReward // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsLockedRewardIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsLockedReward)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsLockedReward)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsLockedRewardIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsLockedRewardIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsLockedReward represents a LockedReward event raised by the Validators contract.
type ValidatorsLockedReward struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterLockedReward is a free log retrieval operation binding the contract event 0x28dc9c0ffa672df041cad84edbee41508284600c9394bda0f8586d012c5e0915.
//
// Solidity: event LockedReward(address indexed who, uint256 amount)
func (_Validators *ValidatorsFilterer) FilterLockedReward(opts *bind.FilterOpts, who []common.Address) (*ValidatorsLockedRewardIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Validators.contract.FilterLogs(opts, "LockedReward", whoRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorsLockedRewardIterator{contract: _Validators.contract, event: "LockedReward", logs: logs, sub: sub}, nil
}

// WatchLockedReward is a free log subscription operation binding the contract event 0x28dc9c0ffa672df041cad84edbee41508284600c9394bda0f8586d012c5e0915.
//
// Solidity: event LockedReward(address indexed who, uint256 amount)
func (_Validators *ValidatorsFilterer) WatchLockedReward(opts *bind.WatchOpts, sink chan<- *ValidatorsLockedReward, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Validators.contract.WatchLogs(opts, "LockedReward", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsLockedReward)
				if err := _Validators.contract.UnpackLog(event, "LockedReward", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLockedReward is a log parse operation binding the contract event 0x28dc9c0ffa672df041cad84edbee41508284600c9394bda0f8586d012c5e0915.
//
// Solidity: event LockedReward(address indexed who, uint256 amount)
func (_Validators *ValidatorsFilterer) ParseLockedReward(log types.Log) (*ValidatorsLockedReward, error) {
	event := new(ValidatorsLockedReward)
	if err := _Validators.contract.UnpackLog(event, "LockedReward", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorsLockedStakeIterator is returned from FilterLockedStake and is used to iterate over the raw logs and unpacked data for LockedStake events raised by the Validators contract.
type ValidatorsLockedStakeIterator struct {
	Event *ValidatorsLockedStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsLockedStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsLockedStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsLockedStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsLockedStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsLockedStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsLockedStake represents a LockedStake event raised by the Validators contract.
type ValidatorsLockedStake struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterLockedStake is a free log retrieval operation binding the contract event 0x1de2f07b0a1c69916a8b25b889051644192307ea08444a2e11f8654d1db3ab0c.
//
// Solidity: event LockedStake(address indexed who, uint256 amount)
func (_Validators *ValidatorsFilterer) FilterLockedStake(opts *bind.FilterOpts, who []common.Address) (*ValidatorsLockedStakeIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Validators.contract.FilterLogs(opts, "LockedStake", whoRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorsLockedStakeIterator{contract: _Validators.contract, event: "LockedStake", logs: logs, sub: sub}, nil
}

// WatchLockedStake is a free log subscription operation binding the contract event 0x1de2f07b0a1c69916a8b25b889051644192307ea08444a2e11f8654d1db3ab0c.
//
// Solidity: event LockedStake(address indexed who, uint256 amount)
func (_Validators *ValidatorsFilterer) WatchLockedStake(opts *bind.WatchOpts, sink chan<- *ValidatorsLockedStake, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Validators.contract.WatchLogs(opts, "LockedStake", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsLockedStake)
				if err := _Validators.contract.UnpackLog(event, "LockedStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLockedStake is a log parse operation binding the contract event 0x1de2f07b0a1c69916a8b25b889051644192307ea08444a2e11f8654d1db3ab0c.
//
// Solidity: event LockedStake(address indexed who, uint256 amount)
func (_Validators *ValidatorsFilterer) ParseLockedStake(log types.Log) (*ValidatorsLockedStake, error) {
	event := new(ValidatorsLockedStake)
	if err := _Validators.contract.UnpackLog(event, "LockedStake", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorsRegistrationOpenIterator is returned from FilterRegistrationOpen and is used to iterate over the raw logs and unpacked data for RegistrationOpen events raised by the Validators contract.
type ValidatorsRegistrationOpenIterator struct {
	Event *ValidatorsRegistrationOpen // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsRegistrationOpenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsRegistrationOpen)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsRegistrationOpen)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsRegistrationOpenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsRegistrationOpenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsRegistrationOpen represents a RegistrationOpen event raised by the Validators contract.
type ValidatorsRegistrationOpen struct {
	DkgStarts              *big.Int
	RegistrationEnds       *big.Int
	ShareDistributionEnds  *big.Int
	DisputeEnds            *big.Int
	KeyShareSubmissionEnds *big.Int
	MpkSubmissionEnds      *big.Int
	GpkjSubmissionEnds     *big.Int
	GpkjDisputeEnds        *big.Int
	DkgComplete            *big.Int
	Raw                    types.Log // Blockchain specific contextual infos
}

// FilterRegistrationOpen is a free log retrieval operation binding the contract event 0x9c6f8368fe7e77e8cb9438744581403bcb3f53298e517f04c1b8475487402e97.
//
// Solidity: event RegistrationOpen(uint256 dkgStarts, uint256 registrationEnds, uint256 shareDistributionEnds, uint256 disputeEnds, uint256 keyShareSubmissionEnds, uint256 mpkSubmissionEnds, uint256 gpkjSubmissionEnds, uint256 gpkjDisputeEnds, uint256 dkgComplete)
func (_Validators *ValidatorsFilterer) FilterRegistrationOpen(opts *bind.FilterOpts) (*ValidatorsRegistrationOpenIterator, error) {

	logs, sub, err := _Validators.contract.FilterLogs(opts, "RegistrationOpen")
	if err != nil {
		return nil, err
	}
	return &ValidatorsRegistrationOpenIterator{contract: _Validators.contract, event: "RegistrationOpen", logs: logs, sub: sub}, nil
}

// WatchRegistrationOpen is a free log subscription operation binding the contract event 0x9c6f8368fe7e77e8cb9438744581403bcb3f53298e517f04c1b8475487402e97.
//
// Solidity: event RegistrationOpen(uint256 dkgStarts, uint256 registrationEnds, uint256 shareDistributionEnds, uint256 disputeEnds, uint256 keyShareSubmissionEnds, uint256 mpkSubmissionEnds, uint256 gpkjSubmissionEnds, uint256 gpkjDisputeEnds, uint256 dkgComplete)
func (_Validators *ValidatorsFilterer) WatchRegistrationOpen(opts *bind.WatchOpts, sink chan<- *ValidatorsRegistrationOpen) (event.Subscription, error) {

	logs, sub, err := _Validators.contract.WatchLogs(opts, "RegistrationOpen")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsRegistrationOpen)
				if err := _Validators.contract.UnpackLog(event, "RegistrationOpen", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegistrationOpen is a log parse operation binding the contract event 0x9c6f8368fe7e77e8cb9438744581403bcb3f53298e517f04c1b8475487402e97.
//
// Solidity: event RegistrationOpen(uint256 dkgStarts, uint256 registrationEnds, uint256 shareDistributionEnds, uint256 disputeEnds, uint256 keyShareSubmissionEnds, uint256 mpkSubmissionEnds, uint256 gpkjSubmissionEnds, uint256 gpkjDisputeEnds, uint256 dkgComplete)
func (_Validators *ValidatorsFilterer) ParseRegistrationOpen(log types.Log) (*ValidatorsRegistrationOpen, error) {
	event := new(ValidatorsRegistrationOpen)
	if err := _Validators.contract.UnpackLog(event, "RegistrationOpen", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorsRequestedUnlockStakeIterator is returned from FilterRequestedUnlockStake and is used to iterate over the raw logs and unpacked data for RequestedUnlockStake events raised by the Validators contract.
type ValidatorsRequestedUnlockStakeIterator struct {
	Event *ValidatorsRequestedUnlockStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsRequestedUnlockStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsRequestedUnlockStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsRequestedUnlockStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsRequestedUnlockStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsRequestedUnlockStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsRequestedUnlockStake represents a RequestedUnlockStake event raised by the Validators contract.
type ValidatorsRequestedUnlockStake struct {
	Who common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterRequestedUnlockStake is a free log retrieval operation binding the contract event 0x1fde0d8a6620647f5c7b5632a87b23101ba553c9b474caf1134fb24d92bf6ddc.
//
// Solidity: event RequestedUnlockStake(address indexed who)
func (_Validators *ValidatorsFilterer) FilterRequestedUnlockStake(opts *bind.FilterOpts, who []common.Address) (*ValidatorsRequestedUnlockStakeIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Validators.contract.FilterLogs(opts, "RequestedUnlockStake", whoRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorsRequestedUnlockStakeIterator{contract: _Validators.contract, event: "RequestedUnlockStake", logs: logs, sub: sub}, nil
}

// WatchRequestedUnlockStake is a free log subscription operation binding the contract event 0x1fde0d8a6620647f5c7b5632a87b23101ba553c9b474caf1134fb24d92bf6ddc.
//
// Solidity: event RequestedUnlockStake(address indexed who)
func (_Validators *ValidatorsFilterer) WatchRequestedUnlockStake(opts *bind.WatchOpts, sink chan<- *ValidatorsRequestedUnlockStake, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Validators.contract.WatchLogs(opts, "RequestedUnlockStake", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsRequestedUnlockStake)
				if err := _Validators.contract.UnpackLog(event, "RequestedUnlockStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRequestedUnlockStake is a log parse operation binding the contract event 0x1fde0d8a6620647f5c7b5632a87b23101ba553c9b474caf1134fb24d92bf6ddc.
//
// Solidity: event RequestedUnlockStake(address indexed who)
func (_Validators *ValidatorsFilterer) ParseRequestedUnlockStake(log types.Log) (*ValidatorsRequestedUnlockStake, error) {
	event := new(ValidatorsRequestedUnlockStake)
	if err := _Validators.contract.UnpackLog(event, "RequestedUnlockStake", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorsShareDistributionIterator is returned from FilterShareDistribution and is used to iterate over the raw logs and unpacked data for ShareDistribution events raised by the Validators contract.
type ValidatorsShareDistributionIterator struct {
	Event *ValidatorsShareDistribution // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsShareDistributionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsShareDistribution)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsShareDistribution)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsShareDistributionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsShareDistributionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsShareDistribution represents a ShareDistribution event raised by the Validators contract.
type ValidatorsShareDistribution struct {
	Issuer          common.Address
	Index           *big.Int
	EncryptedShares []*big.Int
	Commitments     [][2]*big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterShareDistribution is a free log retrieval operation binding the contract event 0xa84d294194d6169652a99150fd2ef10e18b0d2caa10beeea237bbddcc6e22b10.
//
// Solidity: event ShareDistribution(address issuer, uint256 index, uint256[] encrypted_shares, uint256[2][] commitments)
func (_Validators *ValidatorsFilterer) FilterShareDistribution(opts *bind.FilterOpts) (*ValidatorsShareDistributionIterator, error) {

	logs, sub, err := _Validators.contract.FilterLogs(opts, "ShareDistribution")
	if err != nil {
		return nil, err
	}
	return &ValidatorsShareDistributionIterator{contract: _Validators.contract, event: "ShareDistribution", logs: logs, sub: sub}, nil
}

// WatchShareDistribution is a free log subscription operation binding the contract event 0xa84d294194d6169652a99150fd2ef10e18b0d2caa10beeea237bbddcc6e22b10.
//
// Solidity: event ShareDistribution(address issuer, uint256 index, uint256[] encrypted_shares, uint256[2][] commitments)
func (_Validators *ValidatorsFilterer) WatchShareDistribution(opts *bind.WatchOpts, sink chan<- *ValidatorsShareDistribution) (event.Subscription, error) {

	logs, sub, err := _Validators.contract.WatchLogs(opts, "ShareDistribution")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsShareDistribution)
				if err := _Validators.contract.UnpackLog(event, "ShareDistribution", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseShareDistribution is a log parse operation binding the contract event 0xa84d294194d6169652a99150fd2ef10e18b0d2caa10beeea237bbddcc6e22b10.
//
// Solidity: event ShareDistribution(address issuer, uint256 index, uint256[] encrypted_shares, uint256[2][] commitments)
func (_Validators *ValidatorsFilterer) ParseShareDistribution(log types.Log) (*ValidatorsShareDistribution, error) {
	event := new(ValidatorsShareDistribution)
	if err := _Validators.contract.UnpackLog(event, "ShareDistribution", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorsSnapshotTakenIterator is returned from FilterSnapshotTaken and is used to iterate over the raw logs and unpacked data for SnapshotTaken events raised by the Validators contract.
type ValidatorsSnapshotTakenIterator struct {
	Event *ValidatorsSnapshotTaken // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsSnapshotTakenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsSnapshotTaken)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsSnapshotTaken)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsSnapshotTakenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsSnapshotTakenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsSnapshotTaken represents a SnapshotTaken event raised by the Validators contract.
type ValidatorsSnapshotTaken struct {
	ChainId        uint32
	Epoch          *big.Int
	Height         uint32
	Validator      common.Address
	StartingETHDKG bool
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterSnapshotTaken is a free log retrieval operation binding the contract event 0x6d438b6b835d16cdae6efdc0259fdfba17e6aa32dae81863a2467866f85f724a.
//
// Solidity: event SnapshotTaken(uint32 chainId, uint256 indexed epoch, uint32 height, address indexed validator, bool startingETHDKG)
func (_Validators *ValidatorsFilterer) FilterSnapshotTaken(opts *bind.FilterOpts, epoch []*big.Int, validator []common.Address) (*ValidatorsSnapshotTakenIterator, error) {

	var epochRule []interface{}
	for _, epochItem := range epoch {
		epochRule = append(epochRule, epochItem)
	}

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _Validators.contract.FilterLogs(opts, "SnapshotTaken", epochRule, validatorRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorsSnapshotTakenIterator{contract: _Validators.contract, event: "SnapshotTaken", logs: logs, sub: sub}, nil
}

// WatchSnapshotTaken is a free log subscription operation binding the contract event 0x6d438b6b835d16cdae6efdc0259fdfba17e6aa32dae81863a2467866f85f724a.
//
// Solidity: event SnapshotTaken(uint32 chainId, uint256 indexed epoch, uint32 height, address indexed validator, bool startingETHDKG)
func (_Validators *ValidatorsFilterer) WatchSnapshotTaken(opts *bind.WatchOpts, sink chan<- *ValidatorsSnapshotTaken, epoch []*big.Int, validator []common.Address) (event.Subscription, error) {

	var epochRule []interface{}
	for _, epochItem := range epoch {
		epochRule = append(epochRule, epochItem)
	}

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _Validators.contract.WatchLogs(opts, "SnapshotTaken", epochRule, validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsSnapshotTaken)
				if err := _Validators.contract.UnpackLog(event, "SnapshotTaken", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSnapshotTaken is a log parse operation binding the contract event 0x6d438b6b835d16cdae6efdc0259fdfba17e6aa32dae81863a2467866f85f724a.
//
// Solidity: event SnapshotTaken(uint32 chainId, uint256 indexed epoch, uint32 height, address indexed validator, bool startingETHDKG)
func (_Validators *ValidatorsFilterer) ParseSnapshotTaken(log types.Log) (*ValidatorsSnapshotTaken, error) {
	event := new(ValidatorsSnapshotTaken)
	if err := _Validators.contract.UnpackLog(event, "SnapshotTaken", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorsUnlockedRewardIterator is returned from FilterUnlockedReward and is used to iterate over the raw logs and unpacked data for UnlockedReward events raised by the Validators contract.
type ValidatorsUnlockedRewardIterator struct {
	Event *ValidatorsUnlockedReward // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsUnlockedRewardIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsUnlockedReward)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsUnlockedReward)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsUnlockedRewardIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsUnlockedRewardIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsUnlockedReward represents a UnlockedReward event raised by the Validators contract.
type ValidatorsUnlockedReward struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterUnlockedReward is a free log retrieval operation binding the contract event 0x496a1c9a1a9ac29d87ecb4e563683ebd0ee80798869f36c86175059eb5dc7304.
//
// Solidity: event UnlockedReward(address indexed who, uint256 amount)
func (_Validators *ValidatorsFilterer) FilterUnlockedReward(opts *bind.FilterOpts, who []common.Address) (*ValidatorsUnlockedRewardIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Validators.contract.FilterLogs(opts, "UnlockedReward", whoRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorsUnlockedRewardIterator{contract: _Validators.contract, event: "UnlockedReward", logs: logs, sub: sub}, nil
}

// WatchUnlockedReward is a free log subscription operation binding the contract event 0x496a1c9a1a9ac29d87ecb4e563683ebd0ee80798869f36c86175059eb5dc7304.
//
// Solidity: event UnlockedReward(address indexed who, uint256 amount)
func (_Validators *ValidatorsFilterer) WatchUnlockedReward(opts *bind.WatchOpts, sink chan<- *ValidatorsUnlockedReward, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Validators.contract.WatchLogs(opts, "UnlockedReward", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsUnlockedReward)
				if err := _Validators.contract.UnpackLog(event, "UnlockedReward", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnlockedReward is a log parse operation binding the contract event 0x496a1c9a1a9ac29d87ecb4e563683ebd0ee80798869f36c86175059eb5dc7304.
//
// Solidity: event UnlockedReward(address indexed who, uint256 amount)
func (_Validators *ValidatorsFilterer) ParseUnlockedReward(log types.Log) (*ValidatorsUnlockedReward, error) {
	event := new(ValidatorsUnlockedReward)
	if err := _Validators.contract.UnpackLog(event, "UnlockedReward", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorsUnlockedStakeIterator is returned from FilterUnlockedStake and is used to iterate over the raw logs and unpacked data for UnlockedStake events raised by the Validators contract.
type ValidatorsUnlockedStakeIterator struct {
	Event *ValidatorsUnlockedStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsUnlockedStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsUnlockedStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsUnlockedStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsUnlockedStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsUnlockedStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsUnlockedStake represents a UnlockedStake event raised by the Validators contract.
type ValidatorsUnlockedStake struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterUnlockedStake is a free log retrieval operation binding the contract event 0x252a696583e35c4d61332829d3bb2a8236f2500140258f089951799c9b999a9c.
//
// Solidity: event UnlockedStake(address indexed who, uint256 amount)
func (_Validators *ValidatorsFilterer) FilterUnlockedStake(opts *bind.FilterOpts, who []common.Address) (*ValidatorsUnlockedStakeIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Validators.contract.FilterLogs(opts, "UnlockedStake", whoRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorsUnlockedStakeIterator{contract: _Validators.contract, event: "UnlockedStake", logs: logs, sub: sub}, nil
}

// WatchUnlockedStake is a free log subscription operation binding the contract event 0x252a696583e35c4d61332829d3bb2a8236f2500140258f089951799c9b999a9c.
//
// Solidity: event UnlockedStake(address indexed who, uint256 amount)
func (_Validators *ValidatorsFilterer) WatchUnlockedStake(opts *bind.WatchOpts, sink chan<- *ValidatorsUnlockedStake, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Validators.contract.WatchLogs(opts, "UnlockedStake", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsUnlockedStake)
				if err := _Validators.contract.UnpackLog(event, "UnlockedStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnlockedStake is a log parse operation binding the contract event 0x252a696583e35c4d61332829d3bb2a8236f2500140258f089951799c9b999a9c.
//
// Solidity: event UnlockedStake(address indexed who, uint256 amount)
func (_Validators *ValidatorsFilterer) ParseUnlockedStake(log types.Log) (*ValidatorsUnlockedStake, error) {
	event := new(ValidatorsUnlockedStake)
	if err := _Validators.contract.UnpackLog(event, "UnlockedStake", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorsValidatorCreatedIterator is returned from FilterValidatorCreated and is used to iterate over the raw logs and unpacked data for ValidatorCreated events raised by the Validators contract.
type ValidatorsValidatorCreatedIterator struct {
	Event *ValidatorsValidatorCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsValidatorCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsValidatorCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsValidatorCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsValidatorCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsValidatorCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsValidatorCreated represents a ValidatorCreated event raised by the Validators contract.
type ValidatorsValidatorCreated struct {
	Validator common.Address
	Signer    common.Address
	MadID     [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorCreated is a free log retrieval operation binding the contract event 0xef5e89a9416c26e0a0a37c1f630958c8c88d9efad59f553f94cff0bed0a268d3.
//
// Solidity: event ValidatorCreated(address indexed validator, address indexed signer, uint256[2] madID)
func (_Validators *ValidatorsFilterer) FilterValidatorCreated(opts *bind.FilterOpts, validator []common.Address, signer []common.Address) (*ValidatorsValidatorCreatedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var signerRule []interface{}
	for _, signerItem := range signer {
		signerRule = append(signerRule, signerItem)
	}

	logs, sub, err := _Validators.contract.FilterLogs(opts, "ValidatorCreated", validatorRule, signerRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorsValidatorCreatedIterator{contract: _Validators.contract, event: "ValidatorCreated", logs: logs, sub: sub}, nil
}

// WatchValidatorCreated is a free log subscription operation binding the contract event 0xef5e89a9416c26e0a0a37c1f630958c8c88d9efad59f553f94cff0bed0a268d3.
//
// Solidity: event ValidatorCreated(address indexed validator, address indexed signer, uint256[2] madID)
func (_Validators *ValidatorsFilterer) WatchValidatorCreated(opts *bind.WatchOpts, sink chan<- *ValidatorsValidatorCreated, validator []common.Address, signer []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var signerRule []interface{}
	for _, signerItem := range signer {
		signerRule = append(signerRule, signerItem)
	}

	logs, sub, err := _Validators.contract.WatchLogs(opts, "ValidatorCreated", validatorRule, signerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsValidatorCreated)
				if err := _Validators.contract.UnpackLog(event, "ValidatorCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorCreated is a log parse operation binding the contract event 0xef5e89a9416c26e0a0a37c1f630958c8c88d9efad59f553f94cff0bed0a268d3.
//
// Solidity: event ValidatorCreated(address indexed validator, address indexed signer, uint256[2] madID)
func (_Validators *ValidatorsFilterer) ParseValidatorCreated(log types.Log) (*ValidatorsValidatorCreated, error) {
	event := new(ValidatorsValidatorCreated)
	if err := _Validators.contract.UnpackLog(event, "ValidatorCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorsValidatorJoinedIterator is returned from FilterValidatorJoined and is used to iterate over the raw logs and unpacked data for ValidatorJoined events raised by the Validators contract.
type ValidatorsValidatorJoinedIterator struct {
	Event *ValidatorsValidatorJoined // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsValidatorJoinedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsValidatorJoined)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsValidatorJoined)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsValidatorJoinedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsValidatorJoinedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsValidatorJoined represents a ValidatorJoined event raised by the Validators contract.
type ValidatorsValidatorJoined struct {
	Validator common.Address
	MadID     [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorJoined is a free log retrieval operation binding the contract event 0x8c25e214c5693ebaf8008875bacedeb9e0aafd393864a314ed1801b2a4e13dd9.
//
// Solidity: event ValidatorJoined(address indexed validator, uint256[2] madID)
func (_Validators *ValidatorsFilterer) FilterValidatorJoined(opts *bind.FilterOpts, validator []common.Address) (*ValidatorsValidatorJoinedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _Validators.contract.FilterLogs(opts, "ValidatorJoined", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorsValidatorJoinedIterator{contract: _Validators.contract, event: "ValidatorJoined", logs: logs, sub: sub}, nil
}

// WatchValidatorJoined is a free log subscription operation binding the contract event 0x8c25e214c5693ebaf8008875bacedeb9e0aafd393864a314ed1801b2a4e13dd9.
//
// Solidity: event ValidatorJoined(address indexed validator, uint256[2] madID)
func (_Validators *ValidatorsFilterer) WatchValidatorJoined(opts *bind.WatchOpts, sink chan<- *ValidatorsValidatorJoined, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _Validators.contract.WatchLogs(opts, "ValidatorJoined", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsValidatorJoined)
				if err := _Validators.contract.UnpackLog(event, "ValidatorJoined", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorJoined is a log parse operation binding the contract event 0x8c25e214c5693ebaf8008875bacedeb9e0aafd393864a314ed1801b2a4e13dd9.
//
// Solidity: event ValidatorJoined(address indexed validator, uint256[2] madID)
func (_Validators *ValidatorsFilterer) ParseValidatorJoined(log types.Log) (*ValidatorsValidatorJoined, error) {
	event := new(ValidatorsValidatorJoined)
	if err := _Validators.contract.UnpackLog(event, "ValidatorJoined", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorsValidatorLeftIterator is returned from FilterValidatorLeft and is used to iterate over the raw logs and unpacked data for ValidatorLeft events raised by the Validators contract.
type ValidatorsValidatorLeftIterator struct {
	Event *ValidatorsValidatorLeft // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsValidatorLeftIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsValidatorLeft)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsValidatorLeft)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsValidatorLeftIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsValidatorLeftIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsValidatorLeft represents a ValidatorLeft event raised by the Validators contract.
type ValidatorsValidatorLeft struct {
	Validator common.Address
	PkHash    [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorLeft is a free log retrieval operation binding the contract event 0x319bbadb03b94aedc69babb34a28675536a9cb30f4bbde343e1d0018c44ebd94.
//
// Solidity: event ValidatorLeft(address indexed validator, uint256[2] pkHash)
func (_Validators *ValidatorsFilterer) FilterValidatorLeft(opts *bind.FilterOpts, validator []common.Address) (*ValidatorsValidatorLeftIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _Validators.contract.FilterLogs(opts, "ValidatorLeft", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorsValidatorLeftIterator{contract: _Validators.contract, event: "ValidatorLeft", logs: logs, sub: sub}, nil
}

// WatchValidatorLeft is a free log subscription operation binding the contract event 0x319bbadb03b94aedc69babb34a28675536a9cb30f4bbde343e1d0018c44ebd94.
//
// Solidity: event ValidatorLeft(address indexed validator, uint256[2] pkHash)
func (_Validators *ValidatorsFilterer) WatchValidatorLeft(opts *bind.WatchOpts, sink chan<- *ValidatorsValidatorLeft, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _Validators.contract.WatchLogs(opts, "ValidatorLeft", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsValidatorLeft)
				if err := _Validators.contract.UnpackLog(event, "ValidatorLeft", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorLeft is a log parse operation binding the contract event 0x319bbadb03b94aedc69babb34a28675536a9cb30f4bbde343e1d0018c44ebd94.
//
// Solidity: event ValidatorLeft(address indexed validator, uint256[2] pkHash)
func (_Validators *ValidatorsFilterer) ParseValidatorLeft(log types.Log) (*ValidatorsValidatorLeft, error) {
	event := new(ValidatorsValidatorLeft)
	if err := _Validators.contract.UnpackLog(event, "ValidatorLeft", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorsValidatorMemberIterator is returned from FilterValidatorMember and is used to iterate over the raw logs and unpacked data for ValidatorMember events raised by the Validators contract.
type ValidatorsValidatorMemberIterator struct {
	Event *ValidatorsValidatorMember // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsValidatorMemberIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsValidatorMember)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsValidatorMember)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsValidatorMemberIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsValidatorMemberIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsValidatorMember represents a ValidatorMember event raised by the Validators contract.
type ValidatorsValidatorMember struct {
	Account common.Address
	Epoch   *big.Int
	Index   *big.Int
	Share0  *big.Int
	Share1  *big.Int
	Share2  *big.Int
	Share3  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterValidatorMember is a free log retrieval operation binding the contract event 0x113b129fac2dde341b9fbbec2bb79a95b9945b0e80fda711fc8ae5c7b0ea83b0.
//
// Solidity: event ValidatorMember(address account, uint256 epoch, uint256 index, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_Validators *ValidatorsFilterer) FilterValidatorMember(opts *bind.FilterOpts) (*ValidatorsValidatorMemberIterator, error) {

	logs, sub, err := _Validators.contract.FilterLogs(opts, "ValidatorMember")
	if err != nil {
		return nil, err
	}
	return &ValidatorsValidatorMemberIterator{contract: _Validators.contract, event: "ValidatorMember", logs: logs, sub: sub}, nil
}

// WatchValidatorMember is a free log subscription operation binding the contract event 0x113b129fac2dde341b9fbbec2bb79a95b9945b0e80fda711fc8ae5c7b0ea83b0.
//
// Solidity: event ValidatorMember(address account, uint256 epoch, uint256 index, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_Validators *ValidatorsFilterer) WatchValidatorMember(opts *bind.WatchOpts, sink chan<- *ValidatorsValidatorMember) (event.Subscription, error) {

	logs, sub, err := _Validators.contract.WatchLogs(opts, "ValidatorMember")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsValidatorMember)
				if err := _Validators.contract.UnpackLog(event, "ValidatorMember", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorMember is a log parse operation binding the contract event 0x113b129fac2dde341b9fbbec2bb79a95b9945b0e80fda711fc8ae5c7b0ea83b0.
//
// Solidity: event ValidatorMember(address account, uint256 epoch, uint256 index, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_Validators *ValidatorsFilterer) ParseValidatorMember(log types.Log) (*ValidatorsValidatorMember, error) {
	event := new(ValidatorsValidatorMember)
	if err := _Validators.contract.UnpackLog(event, "ValidatorMember", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorsValidatorQueuedIterator is returned from FilterValidatorQueued and is used to iterate over the raw logs and unpacked data for ValidatorQueued events raised by the Validators contract.
type ValidatorsValidatorQueuedIterator struct {
	Event *ValidatorsValidatorQueued // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsValidatorQueuedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsValidatorQueued)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsValidatorQueued)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsValidatorQueuedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsValidatorQueuedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsValidatorQueued represents a ValidatorQueued event raised by the Validators contract.
type ValidatorsValidatorQueued struct {
	Validator common.Address
	PkHash    [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorQueued is a free log retrieval operation binding the contract event 0xb4389eb1c66b46169245bc8c147e4b13a2b88adcaa44d001b0fadf25890b773d.
//
// Solidity: event ValidatorQueued(address indexed validator, uint256[2] pkHash)
func (_Validators *ValidatorsFilterer) FilterValidatorQueued(opts *bind.FilterOpts, validator []common.Address) (*ValidatorsValidatorQueuedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _Validators.contract.FilterLogs(opts, "ValidatorQueued", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorsValidatorQueuedIterator{contract: _Validators.contract, event: "ValidatorQueued", logs: logs, sub: sub}, nil
}

// WatchValidatorQueued is a free log subscription operation binding the contract event 0xb4389eb1c66b46169245bc8c147e4b13a2b88adcaa44d001b0fadf25890b773d.
//
// Solidity: event ValidatorQueued(address indexed validator, uint256[2] pkHash)
func (_Validators *ValidatorsFilterer) WatchValidatorQueued(opts *bind.WatchOpts, sink chan<- *ValidatorsValidatorQueued, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _Validators.contract.WatchLogs(opts, "ValidatorQueued", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsValidatorQueued)
				if err := _Validators.contract.UnpackLog(event, "ValidatorQueued", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorQueued is a log parse operation binding the contract event 0xb4389eb1c66b46169245bc8c147e4b13a2b88adcaa44d001b0fadf25890b773d.
//
// Solidity: event ValidatorQueued(address indexed validator, uint256[2] pkHash)
func (_Validators *ValidatorsFilterer) ParseValidatorQueued(log types.Log) (*ValidatorsValidatorQueued, error) {
	event := new(ValidatorsValidatorQueued)
	if err := _Validators.contract.UnpackLog(event, "ValidatorQueued", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorsValidatorSetIterator is returned from FilterValidatorSet and is used to iterate over the raw logs and unpacked data for ValidatorSet events raised by the Validators contract.
type ValidatorsValidatorSetIterator struct {
	Event *ValidatorsValidatorSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsValidatorSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsValidatorSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsValidatorSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsValidatorSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsValidatorSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsValidatorSet represents a ValidatorSet event raised by the Validators contract.
type ValidatorsValidatorSet struct {
	ValidatorCount uint8
	Epoch          *big.Int
	EthHeight      uint32
	MadHeight      uint32
	GroupKey0      *big.Int
	GroupKey1      *big.Int
	GroupKey2      *big.Int
	GroupKey3      *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterValidatorSet is a free log retrieval operation binding the contract event 0x1c85ff1efe0a905f8feca811e617102cb7ec896aded693eb96366c8ef22bb09f.
//
// Solidity: event ValidatorSet(uint8 validatorCount, uint256 epoch, uint32 ethHeight, uint32 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_Validators *ValidatorsFilterer) FilterValidatorSet(opts *bind.FilterOpts) (*ValidatorsValidatorSetIterator, error) {

	logs, sub, err := _Validators.contract.FilterLogs(opts, "ValidatorSet")
	if err != nil {
		return nil, err
	}
	return &ValidatorsValidatorSetIterator{contract: _Validators.contract, event: "ValidatorSet", logs: logs, sub: sub}, nil
}

// WatchValidatorSet is a free log subscription operation binding the contract event 0x1c85ff1efe0a905f8feca811e617102cb7ec896aded693eb96366c8ef22bb09f.
//
// Solidity: event ValidatorSet(uint8 validatorCount, uint256 epoch, uint32 ethHeight, uint32 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_Validators *ValidatorsFilterer) WatchValidatorSet(opts *bind.WatchOpts, sink chan<- *ValidatorsValidatorSet) (event.Subscription, error) {

	logs, sub, err := _Validators.contract.WatchLogs(opts, "ValidatorSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsValidatorSet)
				if err := _Validators.contract.UnpackLog(event, "ValidatorSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorSet is a log parse operation binding the contract event 0x1c85ff1efe0a905f8feca811e617102cb7ec896aded693eb96366c8ef22bb09f.
//
// Solidity: event ValidatorSet(uint8 validatorCount, uint256 epoch, uint32 ethHeight, uint32 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_Validators *ValidatorsFilterer) ParseValidatorSet(log types.Log) (*ValidatorsValidatorSet, error) {
	event := new(ValidatorsValidatorSet)
	if err := _Validators.contract.UnpackLog(event, "ValidatorSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorsDiamondMetaData contains all meta data concerning the ValidatorsDiamond contract.
var ValidatorsDiamondMetaData = &bind.MetaData{
	ABI: "[{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "",
}

// ValidatorsDiamondABI is the input ABI used to generate the binding from.
// Deprecated: Use ValidatorsDiamondMetaData.ABI instead.
var ValidatorsDiamondABI = ValidatorsDiamondMetaData.ABI

// ValidatorsDiamondBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ValidatorsDiamondMetaData.Bin instead.
var ValidatorsDiamondBin = ValidatorsDiamondMetaData.Bin

// DeployValidatorsDiamond deploys a new Ethereum contract, binding an instance of ValidatorsDiamond to it.
func DeployValidatorsDiamond(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ValidatorsDiamond, error) {
	parsed, err := ValidatorsDiamondMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ValidatorsDiamondBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ValidatorsDiamond{ValidatorsDiamondCaller: ValidatorsDiamondCaller{contract: contract}, ValidatorsDiamondTransactor: ValidatorsDiamondTransactor{contract: contract}, ValidatorsDiamondFilterer: ValidatorsDiamondFilterer{contract: contract}}, nil
}

// ValidatorsDiamond is an auto generated Go binding around an Ethereum contract.
type ValidatorsDiamond struct {
	ValidatorsDiamondCaller     // Read-only binding to the contract
	ValidatorsDiamondTransactor // Write-only binding to the contract
	ValidatorsDiamondFilterer   // Log filterer for contract events
}

// ValidatorsDiamondCaller is an auto generated read-only Go binding around an Ethereum contract.
type ValidatorsDiamondCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorsDiamondTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ValidatorsDiamondTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorsDiamondFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ValidatorsDiamondFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorsDiamondSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ValidatorsDiamondSession struct {
	Contract     *ValidatorsDiamond // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// ValidatorsDiamondCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ValidatorsDiamondCallerSession struct {
	Contract *ValidatorsDiamondCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// ValidatorsDiamondTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ValidatorsDiamondTransactorSession struct {
	Contract     *ValidatorsDiamondTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// ValidatorsDiamondRaw is an auto generated low-level Go binding around an Ethereum contract.
type ValidatorsDiamondRaw struct {
	Contract *ValidatorsDiamond // Generic contract binding to access the raw methods on
}

// ValidatorsDiamondCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ValidatorsDiamondCallerRaw struct {
	Contract *ValidatorsDiamondCaller // Generic read-only contract binding to access the raw methods on
}

// ValidatorsDiamondTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ValidatorsDiamondTransactorRaw struct {
	Contract *ValidatorsDiamondTransactor // Generic write-only contract binding to access the raw methods on
}

// NewValidatorsDiamond creates a new instance of ValidatorsDiamond, bound to a specific deployed contract.
func NewValidatorsDiamond(address common.Address, backend bind.ContractBackend) (*ValidatorsDiamond, error) {
	contract, err := bindValidatorsDiamond(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ValidatorsDiamond{ValidatorsDiamondCaller: ValidatorsDiamondCaller{contract: contract}, ValidatorsDiamondTransactor: ValidatorsDiamondTransactor{contract: contract}, ValidatorsDiamondFilterer: ValidatorsDiamondFilterer{contract: contract}}, nil
}

// NewValidatorsDiamondCaller creates a new read-only instance of ValidatorsDiamond, bound to a specific deployed contract.
func NewValidatorsDiamondCaller(address common.Address, caller bind.ContractCaller) (*ValidatorsDiamondCaller, error) {
	contract, err := bindValidatorsDiamond(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorsDiamondCaller{contract: contract}, nil
}

// NewValidatorsDiamondTransactor creates a new write-only instance of ValidatorsDiamond, bound to a specific deployed contract.
func NewValidatorsDiamondTransactor(address common.Address, transactor bind.ContractTransactor) (*ValidatorsDiamondTransactor, error) {
	contract, err := bindValidatorsDiamond(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorsDiamondTransactor{contract: contract}, nil
}

// NewValidatorsDiamondFilterer creates a new log filterer instance of ValidatorsDiamond, bound to a specific deployed contract.
func NewValidatorsDiamondFilterer(address common.Address, filterer bind.ContractFilterer) (*ValidatorsDiamondFilterer, error) {
	contract, err := bindValidatorsDiamond(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ValidatorsDiamondFilterer{contract: contract}, nil
}

// bindValidatorsDiamond binds a generic wrapper to an already deployed contract.
func bindValidatorsDiamond(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ValidatorsDiamondABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorsDiamond *ValidatorsDiamondRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorsDiamond.Contract.ValidatorsDiamondCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorsDiamond *ValidatorsDiamondRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorsDiamond.Contract.ValidatorsDiamondTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorsDiamond *ValidatorsDiamondRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorsDiamond.Contract.ValidatorsDiamondTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorsDiamond *ValidatorsDiamondCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorsDiamond.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorsDiamond *ValidatorsDiamondTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorsDiamond.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorsDiamond *ValidatorsDiamondTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorsDiamond.Contract.contract.Transact(opts, method, params...)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_ValidatorsDiamond *ValidatorsDiamondTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _ValidatorsDiamond.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_ValidatorsDiamond *ValidatorsDiamondSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _ValidatorsDiamond.Contract.Fallback(&_ValidatorsDiamond.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_ValidatorsDiamond *ValidatorsDiamondTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _ValidatorsDiamond.Contract.Fallback(&_ValidatorsDiamond.TransactOpts, calldata)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_ValidatorsDiamond *ValidatorsDiamondTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorsDiamond.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_ValidatorsDiamond *ValidatorsDiamondSession) Receive() (*types.Transaction, error) {
	return _ValidatorsDiamond.Contract.Receive(&_ValidatorsDiamond.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_ValidatorsDiamond *ValidatorsDiamondTransactorSession) Receive() (*types.Transaction, error) {
	return _ValidatorsDiamond.Contract.Receive(&_ValidatorsDiamond.TransactOpts)
}

// ValidatorsEventsMetaData contains all meta data concerning the ValidatorsEvents contract.
var ValidatorsEventsMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"key_share_G1\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"key_share_G1_correctness_proof\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[4]\",\"name\":\"key_share_G2\",\"type\":\"uint256[4]\"}],\"name\":\"KeyShareSubmission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dkgStarts\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"registrationEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shareDistributionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"disputeEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"keyShareSubmissionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mpkSubmissionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gpkjSubmissionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gpkjDisputeEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dkgComplete\",\"type\":\"uint256\"}],\"name\":\"RegistrationOpen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"encrypted_shares\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[2][]\",\"name\":\"commitments\",\"type\":\"uint256[2][]\"}],\"name\":\"ShareDistribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share3\",\"type\":\"uint256\"}],\"name\":\"ValidatorMember\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"validatorCount\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"ethHeight\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"madHeight\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey3\",\"type\":\"uint256\"}],\"name\":\"ValidatorSet\",\"type\":\"event\"}]",
}

// ValidatorsEventsABI is the input ABI used to generate the binding from.
// Deprecated: Use ValidatorsEventsMetaData.ABI instead.
var ValidatorsEventsABI = ValidatorsEventsMetaData.ABI

// ValidatorsEvents is an auto generated Go binding around an Ethereum contract.
type ValidatorsEvents struct {
	ValidatorsEventsCaller     // Read-only binding to the contract
	ValidatorsEventsTransactor // Write-only binding to the contract
	ValidatorsEventsFilterer   // Log filterer for contract events
}

// ValidatorsEventsCaller is an auto generated read-only Go binding around an Ethereum contract.
type ValidatorsEventsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorsEventsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ValidatorsEventsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorsEventsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ValidatorsEventsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorsEventsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ValidatorsEventsSession struct {
	Contract     *ValidatorsEvents // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ValidatorsEventsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ValidatorsEventsCallerSession struct {
	Contract *ValidatorsEventsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// ValidatorsEventsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ValidatorsEventsTransactorSession struct {
	Contract     *ValidatorsEventsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// ValidatorsEventsRaw is an auto generated low-level Go binding around an Ethereum contract.
type ValidatorsEventsRaw struct {
	Contract *ValidatorsEvents // Generic contract binding to access the raw methods on
}

// ValidatorsEventsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ValidatorsEventsCallerRaw struct {
	Contract *ValidatorsEventsCaller // Generic read-only contract binding to access the raw methods on
}

// ValidatorsEventsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ValidatorsEventsTransactorRaw struct {
	Contract *ValidatorsEventsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewValidatorsEvents creates a new instance of ValidatorsEvents, bound to a specific deployed contract.
func NewValidatorsEvents(address common.Address, backend bind.ContractBackend) (*ValidatorsEvents, error) {
	contract, err := bindValidatorsEvents(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ValidatorsEvents{ValidatorsEventsCaller: ValidatorsEventsCaller{contract: contract}, ValidatorsEventsTransactor: ValidatorsEventsTransactor{contract: contract}, ValidatorsEventsFilterer: ValidatorsEventsFilterer{contract: contract}}, nil
}

// NewValidatorsEventsCaller creates a new read-only instance of ValidatorsEvents, bound to a specific deployed contract.
func NewValidatorsEventsCaller(address common.Address, caller bind.ContractCaller) (*ValidatorsEventsCaller, error) {
	contract, err := bindValidatorsEvents(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorsEventsCaller{contract: contract}, nil
}

// NewValidatorsEventsTransactor creates a new write-only instance of ValidatorsEvents, bound to a specific deployed contract.
func NewValidatorsEventsTransactor(address common.Address, transactor bind.ContractTransactor) (*ValidatorsEventsTransactor, error) {
	contract, err := bindValidatorsEvents(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorsEventsTransactor{contract: contract}, nil
}

// NewValidatorsEventsFilterer creates a new log filterer instance of ValidatorsEvents, bound to a specific deployed contract.
func NewValidatorsEventsFilterer(address common.Address, filterer bind.ContractFilterer) (*ValidatorsEventsFilterer, error) {
	contract, err := bindValidatorsEvents(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ValidatorsEventsFilterer{contract: contract}, nil
}

// bindValidatorsEvents binds a generic wrapper to an already deployed contract.
func bindValidatorsEvents(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ValidatorsEventsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorsEvents *ValidatorsEventsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorsEvents.Contract.ValidatorsEventsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorsEvents *ValidatorsEventsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorsEvents.Contract.ValidatorsEventsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorsEvents *ValidatorsEventsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorsEvents.Contract.ValidatorsEventsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorsEvents *ValidatorsEventsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorsEvents.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorsEvents *ValidatorsEventsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorsEvents.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorsEvents *ValidatorsEventsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorsEvents.Contract.contract.Transact(opts, method, params...)
}

// ValidatorsEventsKeyShareSubmissionIterator is returned from FilterKeyShareSubmission and is used to iterate over the raw logs and unpacked data for KeyShareSubmission events raised by the ValidatorsEvents contract.
type ValidatorsEventsKeyShareSubmissionIterator struct {
	Event *ValidatorsEventsKeyShareSubmission // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsEventsKeyShareSubmissionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsEventsKeyShareSubmission)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsEventsKeyShareSubmission)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsEventsKeyShareSubmissionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsEventsKeyShareSubmissionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsEventsKeyShareSubmission represents a KeyShareSubmission event raised by the ValidatorsEvents contract.
type ValidatorsEventsKeyShareSubmission struct {
	Issuer                     common.Address
	KeyShareG1                 [2]*big.Int
	KeyShareG1CorrectnessProof [2]*big.Int
	KeyShareG2                 [4]*big.Int
	Raw                        types.Log // Blockchain specific contextual infos
}

// FilterKeyShareSubmission is a free log retrieval operation binding the contract event 0xb0ee36c3780de716eb6c83687f433ae2558a6923e090fd238b657fb6c896badc.
//
// Solidity: event KeyShareSubmission(address issuer, uint256[2] key_share_G1, uint256[2] key_share_G1_correctness_proof, uint256[4] key_share_G2)
func (_ValidatorsEvents *ValidatorsEventsFilterer) FilterKeyShareSubmission(opts *bind.FilterOpts) (*ValidatorsEventsKeyShareSubmissionIterator, error) {

	logs, sub, err := _ValidatorsEvents.contract.FilterLogs(opts, "KeyShareSubmission")
	if err != nil {
		return nil, err
	}
	return &ValidatorsEventsKeyShareSubmissionIterator{contract: _ValidatorsEvents.contract, event: "KeyShareSubmission", logs: logs, sub: sub}, nil
}

// WatchKeyShareSubmission is a free log subscription operation binding the contract event 0xb0ee36c3780de716eb6c83687f433ae2558a6923e090fd238b657fb6c896badc.
//
// Solidity: event KeyShareSubmission(address issuer, uint256[2] key_share_G1, uint256[2] key_share_G1_correctness_proof, uint256[4] key_share_G2)
func (_ValidatorsEvents *ValidatorsEventsFilterer) WatchKeyShareSubmission(opts *bind.WatchOpts, sink chan<- *ValidatorsEventsKeyShareSubmission) (event.Subscription, error) {

	logs, sub, err := _ValidatorsEvents.contract.WatchLogs(opts, "KeyShareSubmission")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsEventsKeyShareSubmission)
				if err := _ValidatorsEvents.contract.UnpackLog(event, "KeyShareSubmission", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKeyShareSubmission is a log parse operation binding the contract event 0xb0ee36c3780de716eb6c83687f433ae2558a6923e090fd238b657fb6c896badc.
//
// Solidity: event KeyShareSubmission(address issuer, uint256[2] key_share_G1, uint256[2] key_share_G1_correctness_proof, uint256[4] key_share_G2)
func (_ValidatorsEvents *ValidatorsEventsFilterer) ParseKeyShareSubmission(log types.Log) (*ValidatorsEventsKeyShareSubmission, error) {
	event := new(ValidatorsEventsKeyShareSubmission)
	if err := _ValidatorsEvents.contract.UnpackLog(event, "KeyShareSubmission", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorsEventsRegistrationOpenIterator is returned from FilterRegistrationOpen and is used to iterate over the raw logs and unpacked data for RegistrationOpen events raised by the ValidatorsEvents contract.
type ValidatorsEventsRegistrationOpenIterator struct {
	Event *ValidatorsEventsRegistrationOpen // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsEventsRegistrationOpenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsEventsRegistrationOpen)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsEventsRegistrationOpen)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsEventsRegistrationOpenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsEventsRegistrationOpenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsEventsRegistrationOpen represents a RegistrationOpen event raised by the ValidatorsEvents contract.
type ValidatorsEventsRegistrationOpen struct {
	DkgStarts              *big.Int
	RegistrationEnds       *big.Int
	ShareDistributionEnds  *big.Int
	DisputeEnds            *big.Int
	KeyShareSubmissionEnds *big.Int
	MpkSubmissionEnds      *big.Int
	GpkjSubmissionEnds     *big.Int
	GpkjDisputeEnds        *big.Int
	DkgComplete            *big.Int
	Raw                    types.Log // Blockchain specific contextual infos
}

// FilterRegistrationOpen is a free log retrieval operation binding the contract event 0x9c6f8368fe7e77e8cb9438744581403bcb3f53298e517f04c1b8475487402e97.
//
// Solidity: event RegistrationOpen(uint256 dkgStarts, uint256 registrationEnds, uint256 shareDistributionEnds, uint256 disputeEnds, uint256 keyShareSubmissionEnds, uint256 mpkSubmissionEnds, uint256 gpkjSubmissionEnds, uint256 gpkjDisputeEnds, uint256 dkgComplete)
func (_ValidatorsEvents *ValidatorsEventsFilterer) FilterRegistrationOpen(opts *bind.FilterOpts) (*ValidatorsEventsRegistrationOpenIterator, error) {

	logs, sub, err := _ValidatorsEvents.contract.FilterLogs(opts, "RegistrationOpen")
	if err != nil {
		return nil, err
	}
	return &ValidatorsEventsRegistrationOpenIterator{contract: _ValidatorsEvents.contract, event: "RegistrationOpen", logs: logs, sub: sub}, nil
}

// WatchRegistrationOpen is a free log subscription operation binding the contract event 0x9c6f8368fe7e77e8cb9438744581403bcb3f53298e517f04c1b8475487402e97.
//
// Solidity: event RegistrationOpen(uint256 dkgStarts, uint256 registrationEnds, uint256 shareDistributionEnds, uint256 disputeEnds, uint256 keyShareSubmissionEnds, uint256 mpkSubmissionEnds, uint256 gpkjSubmissionEnds, uint256 gpkjDisputeEnds, uint256 dkgComplete)
func (_ValidatorsEvents *ValidatorsEventsFilterer) WatchRegistrationOpen(opts *bind.WatchOpts, sink chan<- *ValidatorsEventsRegistrationOpen) (event.Subscription, error) {

	logs, sub, err := _ValidatorsEvents.contract.WatchLogs(opts, "RegistrationOpen")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsEventsRegistrationOpen)
				if err := _ValidatorsEvents.contract.UnpackLog(event, "RegistrationOpen", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegistrationOpen is a log parse operation binding the contract event 0x9c6f8368fe7e77e8cb9438744581403bcb3f53298e517f04c1b8475487402e97.
//
// Solidity: event RegistrationOpen(uint256 dkgStarts, uint256 registrationEnds, uint256 shareDistributionEnds, uint256 disputeEnds, uint256 keyShareSubmissionEnds, uint256 mpkSubmissionEnds, uint256 gpkjSubmissionEnds, uint256 gpkjDisputeEnds, uint256 dkgComplete)
func (_ValidatorsEvents *ValidatorsEventsFilterer) ParseRegistrationOpen(log types.Log) (*ValidatorsEventsRegistrationOpen, error) {
	event := new(ValidatorsEventsRegistrationOpen)
	if err := _ValidatorsEvents.contract.UnpackLog(event, "RegistrationOpen", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorsEventsShareDistributionIterator is returned from FilterShareDistribution and is used to iterate over the raw logs and unpacked data for ShareDistribution events raised by the ValidatorsEvents contract.
type ValidatorsEventsShareDistributionIterator struct {
	Event *ValidatorsEventsShareDistribution // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsEventsShareDistributionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsEventsShareDistribution)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsEventsShareDistribution)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsEventsShareDistributionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsEventsShareDistributionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsEventsShareDistribution represents a ShareDistribution event raised by the ValidatorsEvents contract.
type ValidatorsEventsShareDistribution struct {
	Issuer          common.Address
	Index           *big.Int
	EncryptedShares []*big.Int
	Commitments     [][2]*big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterShareDistribution is a free log retrieval operation binding the contract event 0xa84d294194d6169652a99150fd2ef10e18b0d2caa10beeea237bbddcc6e22b10.
//
// Solidity: event ShareDistribution(address issuer, uint256 index, uint256[] encrypted_shares, uint256[2][] commitments)
func (_ValidatorsEvents *ValidatorsEventsFilterer) FilterShareDistribution(opts *bind.FilterOpts) (*ValidatorsEventsShareDistributionIterator, error) {

	logs, sub, err := _ValidatorsEvents.contract.FilterLogs(opts, "ShareDistribution")
	if err != nil {
		return nil, err
	}
	return &ValidatorsEventsShareDistributionIterator{contract: _ValidatorsEvents.contract, event: "ShareDistribution", logs: logs, sub: sub}, nil
}

// WatchShareDistribution is a free log subscription operation binding the contract event 0xa84d294194d6169652a99150fd2ef10e18b0d2caa10beeea237bbddcc6e22b10.
//
// Solidity: event ShareDistribution(address issuer, uint256 index, uint256[] encrypted_shares, uint256[2][] commitments)
func (_ValidatorsEvents *ValidatorsEventsFilterer) WatchShareDistribution(opts *bind.WatchOpts, sink chan<- *ValidatorsEventsShareDistribution) (event.Subscription, error) {

	logs, sub, err := _ValidatorsEvents.contract.WatchLogs(opts, "ShareDistribution")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsEventsShareDistribution)
				if err := _ValidatorsEvents.contract.UnpackLog(event, "ShareDistribution", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseShareDistribution is a log parse operation binding the contract event 0xa84d294194d6169652a99150fd2ef10e18b0d2caa10beeea237bbddcc6e22b10.
//
// Solidity: event ShareDistribution(address issuer, uint256 index, uint256[] encrypted_shares, uint256[2][] commitments)
func (_ValidatorsEvents *ValidatorsEventsFilterer) ParseShareDistribution(log types.Log) (*ValidatorsEventsShareDistribution, error) {
	event := new(ValidatorsEventsShareDistribution)
	if err := _ValidatorsEvents.contract.UnpackLog(event, "ShareDistribution", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorsEventsValidatorMemberIterator is returned from FilterValidatorMember and is used to iterate over the raw logs and unpacked data for ValidatorMember events raised by the ValidatorsEvents contract.
type ValidatorsEventsValidatorMemberIterator struct {
	Event *ValidatorsEventsValidatorMember // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsEventsValidatorMemberIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsEventsValidatorMember)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsEventsValidatorMember)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsEventsValidatorMemberIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsEventsValidatorMemberIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsEventsValidatorMember represents a ValidatorMember event raised by the ValidatorsEvents contract.
type ValidatorsEventsValidatorMember struct {
	Account common.Address
	Epoch   *big.Int
	Index   *big.Int
	Share0  *big.Int
	Share1  *big.Int
	Share2  *big.Int
	Share3  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterValidatorMember is a free log retrieval operation binding the contract event 0x113b129fac2dde341b9fbbec2bb79a95b9945b0e80fda711fc8ae5c7b0ea83b0.
//
// Solidity: event ValidatorMember(address account, uint256 epoch, uint256 index, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_ValidatorsEvents *ValidatorsEventsFilterer) FilterValidatorMember(opts *bind.FilterOpts) (*ValidatorsEventsValidatorMemberIterator, error) {

	logs, sub, err := _ValidatorsEvents.contract.FilterLogs(opts, "ValidatorMember")
	if err != nil {
		return nil, err
	}
	return &ValidatorsEventsValidatorMemberIterator{contract: _ValidatorsEvents.contract, event: "ValidatorMember", logs: logs, sub: sub}, nil
}

// WatchValidatorMember is a free log subscription operation binding the contract event 0x113b129fac2dde341b9fbbec2bb79a95b9945b0e80fda711fc8ae5c7b0ea83b0.
//
// Solidity: event ValidatorMember(address account, uint256 epoch, uint256 index, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_ValidatorsEvents *ValidatorsEventsFilterer) WatchValidatorMember(opts *bind.WatchOpts, sink chan<- *ValidatorsEventsValidatorMember) (event.Subscription, error) {

	logs, sub, err := _ValidatorsEvents.contract.WatchLogs(opts, "ValidatorMember")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsEventsValidatorMember)
				if err := _ValidatorsEvents.contract.UnpackLog(event, "ValidatorMember", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorMember is a log parse operation binding the contract event 0x113b129fac2dde341b9fbbec2bb79a95b9945b0e80fda711fc8ae5c7b0ea83b0.
//
// Solidity: event ValidatorMember(address account, uint256 epoch, uint256 index, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_ValidatorsEvents *ValidatorsEventsFilterer) ParseValidatorMember(log types.Log) (*ValidatorsEventsValidatorMember, error) {
	event := new(ValidatorsEventsValidatorMember)
	if err := _ValidatorsEvents.contract.UnpackLog(event, "ValidatorMember", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorsEventsValidatorSetIterator is returned from FilterValidatorSet and is used to iterate over the raw logs and unpacked data for ValidatorSet events raised by the ValidatorsEvents contract.
type ValidatorsEventsValidatorSetIterator struct {
	Event *ValidatorsEventsValidatorSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsEventsValidatorSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsEventsValidatorSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsEventsValidatorSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsEventsValidatorSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsEventsValidatorSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsEventsValidatorSet represents a ValidatorSet event raised by the ValidatorsEvents contract.
type ValidatorsEventsValidatorSet struct {
	ValidatorCount uint8
	Epoch          *big.Int
	EthHeight      uint32
	MadHeight      uint32
	GroupKey0      *big.Int
	GroupKey1      *big.Int
	GroupKey2      *big.Int
	GroupKey3      *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterValidatorSet is a free log retrieval operation binding the contract event 0x1c85ff1efe0a905f8feca811e617102cb7ec896aded693eb96366c8ef22bb09f.
//
// Solidity: event ValidatorSet(uint8 validatorCount, uint256 epoch, uint32 ethHeight, uint32 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_ValidatorsEvents *ValidatorsEventsFilterer) FilterValidatorSet(opts *bind.FilterOpts) (*ValidatorsEventsValidatorSetIterator, error) {

	logs, sub, err := _ValidatorsEvents.contract.FilterLogs(opts, "ValidatorSet")
	if err != nil {
		return nil, err
	}
	return &ValidatorsEventsValidatorSetIterator{contract: _ValidatorsEvents.contract, event: "ValidatorSet", logs: logs, sub: sub}, nil
}

// WatchValidatorSet is a free log subscription operation binding the contract event 0x1c85ff1efe0a905f8feca811e617102cb7ec896aded693eb96366c8ef22bb09f.
//
// Solidity: event ValidatorSet(uint8 validatorCount, uint256 epoch, uint32 ethHeight, uint32 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_ValidatorsEvents *ValidatorsEventsFilterer) WatchValidatorSet(opts *bind.WatchOpts, sink chan<- *ValidatorsEventsValidatorSet) (event.Subscription, error) {

	logs, sub, err := _ValidatorsEvents.contract.WatchLogs(opts, "ValidatorSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsEventsValidatorSet)
				if err := _ValidatorsEvents.contract.UnpackLog(event, "ValidatorSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorSet is a log parse operation binding the contract event 0x1c85ff1efe0a905f8feca811e617102cb7ec896aded693eb96366c8ef22bb09f.
//
// Solidity: event ValidatorSet(uint8 validatorCount, uint256 epoch, uint32 ethHeight, uint32 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_ValidatorsEvents *ValidatorsEventsFilterer) ParseValidatorSet(log types.Log) (*ValidatorsEventsValidatorSet, error) {
	event := new(ValidatorsEventsValidatorSet)
	if err := _ValidatorsEvents.contract.UnpackLog(event, "ValidatorSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
