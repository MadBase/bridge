// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// BClaimsParserLibraryBClaims is an auto generated low-level Go binding around an user-defined struct.
type BClaimsParserLibraryBClaims struct {
	ChainId    uint32
	Height     uint32
	TxCount    uint32
	PrevBlock  [32]byte
	TxRoot     [32]byte
	StateRoot  [32]byte
	HeaderRoot [32]byte
}

// GovernanceStorageProposal is an auto generated low-level Go binding around an user-defined struct.
type GovernanceStorageProposal struct {
	Executed     bool
	Logic        common.Address
	VoteCount    *big.Int
	BlockEndVote *big.Int
}

// MadByteBNAddress is an auto generated low-level Go binding around an user-defined struct.
type MadByteBNAddress struct {
	To0 *big.Int
	To1 *big.Int
	To2 *big.Int
	To3 *big.Int
}

// Participant is an auto generated low-level Go binding around an user-defined struct.
type Participant struct {
	PublicKey                   [2]*big.Int
	Nonce                       uint64
	Index                       uint64
	Phase                       uint8
	DistributedSharesHash       [32]byte
	CommitmentsFirstCoefficient [2]*big.Int
	KeyShares                   [2]*big.Int
	Gpkj                        [4]*big.Int
}

// Snapshot is an auto generated low-level Go binding around an user-defined struct.
type Snapshot struct {
	CommittedAt *big.Int
	BlockClaims BClaimsParserLibraryBClaims
	Signature   [2]*big.Int
}

// ValidatorData is an auto generated low-level Go binding around an user-defined struct.
type ValidatorData struct {
	Address common.Address
	TokenID *big.Int
}

// AddressMetaData contains all meta data concerning the Address contract.
var AddressMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206ee2788b3fcbfb71c02acacea2d90245142b3f4c1093b26d4a96f7957388091f64736f6c634300080b0033",
}

// AddressABI is the input ABI used to generate the binding from.
// Deprecated: Use AddressMetaData.ABI instead.
var AddressABI = AddressMetaData.ABI

// AddressBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AddressMetaData.Bin instead.
var AddressBin = AddressMetaData.Bin

// DeployAddress deploys a new Ethereum contract, binding an instance of Address to it.
func DeployAddress(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Address, error) {
	parsed, err := AddressMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(AddressBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Address{AddressCaller: AddressCaller{contract: contract}, AddressTransactor: AddressTransactor{contract: contract}, AddressFilterer: AddressFilterer{contract: contract}}, nil
}

// Address is an auto generated Go binding around an Ethereum contract.
type Address struct {
	AddressCaller     // Read-only binding to the contract
	AddressTransactor // Write-only binding to the contract
	AddressFilterer   // Log filterer for contract events
}

// AddressCaller is an auto generated read-only Go binding around an Ethereum contract.
type AddressCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AddressTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AddressTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AddressFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AddressFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AddressSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AddressSession struct {
	Contract     *Address          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AddressCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AddressCallerSession struct {
	Contract *AddressCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// AddressTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AddressTransactorSession struct {
	Contract     *AddressTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// AddressRaw is an auto generated low-level Go binding around an Ethereum contract.
type AddressRaw struct {
	Contract *Address // Generic contract binding to access the raw methods on
}

// AddressCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AddressCallerRaw struct {
	Contract *AddressCaller // Generic read-only contract binding to access the raw methods on
}

// AddressTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AddressTransactorRaw struct {
	Contract *AddressTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAddress creates a new instance of Address, bound to a specific deployed contract.
func NewAddress(address common.Address, backend bind.ContractBackend) (*Address, error) {
	contract, err := bindAddress(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Address{AddressCaller: AddressCaller{contract: contract}, AddressTransactor: AddressTransactor{contract: contract}, AddressFilterer: AddressFilterer{contract: contract}}, nil
}

// NewAddressCaller creates a new read-only instance of Address, bound to a specific deployed contract.
func NewAddressCaller(address common.Address, caller bind.ContractCaller) (*AddressCaller, error) {
	contract, err := bindAddress(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AddressCaller{contract: contract}, nil
}

// NewAddressTransactor creates a new write-only instance of Address, bound to a specific deployed contract.
func NewAddressTransactor(address common.Address, transactor bind.ContractTransactor) (*AddressTransactor, error) {
	contract, err := bindAddress(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AddressTransactor{contract: contract}, nil
}

// NewAddressFilterer creates a new log filterer instance of Address, bound to a specific deployed contract.
func NewAddressFilterer(address common.Address, filterer bind.ContractFilterer) (*AddressFilterer, error) {
	contract, err := bindAddress(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AddressFilterer{contract: contract}, nil
}

// bindAddress binds a generic wrapper to an already deployed contract.
func bindAddress(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AddressABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Address *AddressRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Address.Contract.AddressCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Address *AddressRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Address.Contract.AddressTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Address *AddressRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Address.Contract.AddressTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Address *AddressCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Address.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Address *AddressTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Address.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Address *AddressTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Address.Contract.contract.Transact(opts, method, params...)
}

// AdminMetaData contains all meta data concerning the Admin contract.
var AdminMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// AdminABI is the input ABI used to generate the binding from.
// Deprecated: Use AdminMetaData.ABI instead.
var AdminABI = AdminMetaData.ABI

// Admin is an auto generated Go binding around an Ethereum contract.
type Admin struct {
	AdminCaller     // Read-only binding to the contract
	AdminTransactor // Write-only binding to the contract
	AdminFilterer   // Log filterer for contract events
}

// AdminCaller is an auto generated read-only Go binding around an Ethereum contract.
type AdminCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AdminTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AdminTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AdminFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AdminFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AdminSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AdminSession struct {
	Contract     *Admin            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AdminCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AdminCallerSession struct {
	Contract *AdminCaller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// AdminTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AdminTransactorSession struct {
	Contract     *AdminTransactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AdminRaw is an auto generated low-level Go binding around an Ethereum contract.
type AdminRaw struct {
	Contract *Admin // Generic contract binding to access the raw methods on
}

// AdminCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AdminCallerRaw struct {
	Contract *AdminCaller // Generic read-only contract binding to access the raw methods on
}

// AdminTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AdminTransactorRaw struct {
	Contract *AdminTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAdmin creates a new instance of Admin, bound to a specific deployed contract.
func NewAdmin(address common.Address, backend bind.ContractBackend) (*Admin, error) {
	contract, err := bindAdmin(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Admin{AdminCaller: AdminCaller{contract: contract}, AdminTransactor: AdminTransactor{contract: contract}, AdminFilterer: AdminFilterer{contract: contract}}, nil
}

// NewAdminCaller creates a new read-only instance of Admin, bound to a specific deployed contract.
func NewAdminCaller(address common.Address, caller bind.ContractCaller) (*AdminCaller, error) {
	contract, err := bindAdmin(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AdminCaller{contract: contract}, nil
}

// NewAdminTransactor creates a new write-only instance of Admin, bound to a specific deployed contract.
func NewAdminTransactor(address common.Address, transactor bind.ContractTransactor) (*AdminTransactor, error) {
	contract, err := bindAdmin(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AdminTransactor{contract: contract}, nil
}

// NewAdminFilterer creates a new log filterer instance of Admin, bound to a specific deployed contract.
func NewAdminFilterer(address common.Address, filterer bind.ContractFilterer) (*AdminFilterer, error) {
	contract, err := bindAdmin(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AdminFilterer{contract: contract}, nil
}

// bindAdmin binds a generic wrapper to an already deployed contract.
func bindAdmin(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AdminABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Admin *AdminRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Admin.Contract.AdminCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Admin *AdminRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Admin.Contract.AdminTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Admin *AdminRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Admin.Contract.AdminTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Admin *AdminCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Admin.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Admin *AdminTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Admin.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Admin *AdminTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Admin.Contract.contract.Transact(opts, method, params...)
}

// GetAdmin is a free data retrieval call binding the contract method 0x6e9960c3.
//
// Solidity: function getAdmin() view returns(address)
func (_Admin *AdminCaller) GetAdmin(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Admin.contract.Call(opts, &out, "getAdmin")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetAdmin is a free data retrieval call binding the contract method 0x6e9960c3.
//
// Solidity: function getAdmin() view returns(address)
func (_Admin *AdminSession) GetAdmin() (common.Address, error) {
	return _Admin.Contract.GetAdmin(&_Admin.CallOpts)
}

// GetAdmin is a free data retrieval call binding the contract method 0x6e9960c3.
//
// Solidity: function getAdmin() view returns(address)
func (_Admin *AdminCallerSession) GetAdmin() (common.Address, error) {
	return _Admin.Contract.GetAdmin(&_Admin.CallOpts)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address admin_) returns()
func (_Admin *AdminTransactor) SetAdmin(opts *bind.TransactOpts, admin_ common.Address) (*types.Transaction, error) {
	return _Admin.contract.Transact(opts, "setAdmin", admin_)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address admin_) returns()
func (_Admin *AdminSession) SetAdmin(admin_ common.Address) (*types.Transaction, error) {
	return _Admin.Contract.SetAdmin(&_Admin.TransactOpts, admin_)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address admin_) returns()
func (_Admin *AdminTransactorSession) SetAdmin(admin_ common.Address) (*types.Transaction, error) {
	return _Admin.Contract.SetAdmin(&_Admin.TransactOpts, admin_)
}

// AtomicCounterMetaData contains all meta data concerning the AtomicCounter contract.
var AtomicCounterMetaData = &bind.MetaData{
	ABI: "[]",
}

// AtomicCounterABI is the input ABI used to generate the binding from.
// Deprecated: Use AtomicCounterMetaData.ABI instead.
var AtomicCounterABI = AtomicCounterMetaData.ABI

// AtomicCounter is an auto generated Go binding around an Ethereum contract.
type AtomicCounter struct {
	AtomicCounterCaller     // Read-only binding to the contract
	AtomicCounterTransactor // Write-only binding to the contract
	AtomicCounterFilterer   // Log filterer for contract events
}

// AtomicCounterCaller is an auto generated read-only Go binding around an Ethereum contract.
type AtomicCounterCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AtomicCounterTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AtomicCounterTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AtomicCounterFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AtomicCounterFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AtomicCounterSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AtomicCounterSession struct {
	Contract     *AtomicCounter    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AtomicCounterCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AtomicCounterCallerSession struct {
	Contract *AtomicCounterCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// AtomicCounterTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AtomicCounterTransactorSession struct {
	Contract     *AtomicCounterTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// AtomicCounterRaw is an auto generated low-level Go binding around an Ethereum contract.
type AtomicCounterRaw struct {
	Contract *AtomicCounter // Generic contract binding to access the raw methods on
}

// AtomicCounterCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AtomicCounterCallerRaw struct {
	Contract *AtomicCounterCaller // Generic read-only contract binding to access the raw methods on
}

// AtomicCounterTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AtomicCounterTransactorRaw struct {
	Contract *AtomicCounterTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAtomicCounter creates a new instance of AtomicCounter, bound to a specific deployed contract.
func NewAtomicCounter(address common.Address, backend bind.ContractBackend) (*AtomicCounter, error) {
	contract, err := bindAtomicCounter(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &AtomicCounter{AtomicCounterCaller: AtomicCounterCaller{contract: contract}, AtomicCounterTransactor: AtomicCounterTransactor{contract: contract}, AtomicCounterFilterer: AtomicCounterFilterer{contract: contract}}, nil
}

// NewAtomicCounterCaller creates a new read-only instance of AtomicCounter, bound to a specific deployed contract.
func NewAtomicCounterCaller(address common.Address, caller bind.ContractCaller) (*AtomicCounterCaller, error) {
	contract, err := bindAtomicCounter(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AtomicCounterCaller{contract: contract}, nil
}

// NewAtomicCounterTransactor creates a new write-only instance of AtomicCounter, bound to a specific deployed contract.
func NewAtomicCounterTransactor(address common.Address, transactor bind.ContractTransactor) (*AtomicCounterTransactor, error) {
	contract, err := bindAtomicCounter(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AtomicCounterTransactor{contract: contract}, nil
}

// NewAtomicCounterFilterer creates a new log filterer instance of AtomicCounter, bound to a specific deployed contract.
func NewAtomicCounterFilterer(address common.Address, filterer bind.ContractFilterer) (*AtomicCounterFilterer, error) {
	contract, err := bindAtomicCounter(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AtomicCounterFilterer{contract: contract}, nil
}

// bindAtomicCounter binds a generic wrapper to an already deployed contract.
func bindAtomicCounter(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AtomicCounterABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AtomicCounter *AtomicCounterRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AtomicCounter.Contract.AtomicCounterCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AtomicCounter *AtomicCounterRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AtomicCounter.Contract.AtomicCounterTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AtomicCounter *AtomicCounterRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AtomicCounter.Contract.AtomicCounterTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AtomicCounter *AtomicCounterCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AtomicCounter.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AtomicCounter *AtomicCounterTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AtomicCounter.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AtomicCounter *AtomicCounterTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AtomicCounter.Contract.contract.Transact(opts, method, params...)
}

// BClaimsParserLibraryMetaData contains all meta data concerning the BClaimsParserLibrary contract.
var BClaimsParserLibraryMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a19cc71d3bd6b6add4dbc1750d090947c5c2fba596c31fb97c51b4ed1687858364736f6c634300080b0033",
}

// BClaimsParserLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use BClaimsParserLibraryMetaData.ABI instead.
var BClaimsParserLibraryABI = BClaimsParserLibraryMetaData.ABI

// BClaimsParserLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BClaimsParserLibraryMetaData.Bin instead.
var BClaimsParserLibraryBin = BClaimsParserLibraryMetaData.Bin

// DeployBClaimsParserLibrary deploys a new Ethereum contract, binding an instance of BClaimsParserLibrary to it.
func DeployBClaimsParserLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *BClaimsParserLibrary, error) {
	parsed, err := BClaimsParserLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BClaimsParserLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BClaimsParserLibrary{BClaimsParserLibraryCaller: BClaimsParserLibraryCaller{contract: contract}, BClaimsParserLibraryTransactor: BClaimsParserLibraryTransactor{contract: contract}, BClaimsParserLibraryFilterer: BClaimsParserLibraryFilterer{contract: contract}}, nil
}

// BClaimsParserLibrary is an auto generated Go binding around an Ethereum contract.
type BClaimsParserLibrary struct {
	BClaimsParserLibraryCaller     // Read-only binding to the contract
	BClaimsParserLibraryTransactor // Write-only binding to the contract
	BClaimsParserLibraryFilterer   // Log filterer for contract events
}

// BClaimsParserLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type BClaimsParserLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BClaimsParserLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BClaimsParserLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BClaimsParserLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BClaimsParserLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BClaimsParserLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BClaimsParserLibrarySession struct {
	Contract     *BClaimsParserLibrary // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// BClaimsParserLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BClaimsParserLibraryCallerSession struct {
	Contract *BClaimsParserLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// BClaimsParserLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BClaimsParserLibraryTransactorSession struct {
	Contract     *BClaimsParserLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// BClaimsParserLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type BClaimsParserLibraryRaw struct {
	Contract *BClaimsParserLibrary // Generic contract binding to access the raw methods on
}

// BClaimsParserLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BClaimsParserLibraryCallerRaw struct {
	Contract *BClaimsParserLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// BClaimsParserLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BClaimsParserLibraryTransactorRaw struct {
	Contract *BClaimsParserLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBClaimsParserLibrary creates a new instance of BClaimsParserLibrary, bound to a specific deployed contract.
func NewBClaimsParserLibrary(address common.Address, backend bind.ContractBackend) (*BClaimsParserLibrary, error) {
	contract, err := bindBClaimsParserLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BClaimsParserLibrary{BClaimsParserLibraryCaller: BClaimsParserLibraryCaller{contract: contract}, BClaimsParserLibraryTransactor: BClaimsParserLibraryTransactor{contract: contract}, BClaimsParserLibraryFilterer: BClaimsParserLibraryFilterer{contract: contract}}, nil
}

// NewBClaimsParserLibraryCaller creates a new read-only instance of BClaimsParserLibrary, bound to a specific deployed contract.
func NewBClaimsParserLibraryCaller(address common.Address, caller bind.ContractCaller) (*BClaimsParserLibraryCaller, error) {
	contract, err := bindBClaimsParserLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BClaimsParserLibraryCaller{contract: contract}, nil
}

// NewBClaimsParserLibraryTransactor creates a new write-only instance of BClaimsParserLibrary, bound to a specific deployed contract.
func NewBClaimsParserLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*BClaimsParserLibraryTransactor, error) {
	contract, err := bindBClaimsParserLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BClaimsParserLibraryTransactor{contract: contract}, nil
}

// NewBClaimsParserLibraryFilterer creates a new log filterer instance of BClaimsParserLibrary, bound to a specific deployed contract.
func NewBClaimsParserLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*BClaimsParserLibraryFilterer, error) {
	contract, err := bindBClaimsParserLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BClaimsParserLibraryFilterer{contract: contract}, nil
}

// bindBClaimsParserLibrary binds a generic wrapper to an already deployed contract.
func bindBClaimsParserLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BClaimsParserLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BClaimsParserLibrary *BClaimsParserLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BClaimsParserLibrary.Contract.BClaimsParserLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BClaimsParserLibrary *BClaimsParserLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BClaimsParserLibrary.Contract.BClaimsParserLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BClaimsParserLibrary *BClaimsParserLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BClaimsParserLibrary.Contract.BClaimsParserLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BClaimsParserLibrary *BClaimsParserLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BClaimsParserLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BClaimsParserLibrary *BClaimsParserLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BClaimsParserLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BClaimsParserLibrary *BClaimsParserLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BClaimsParserLibrary.Contract.contract.Transact(opts, method, params...)
}

// BaseParserLibraryMetaData contains all meta data concerning the BaseParserLibrary contract.
var BaseParserLibraryMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e6c79007bd30fe40338fadb85c9f2a7840a67900b179aebb386e3ae55fa1d8ec64736f6c634300080b0033",
}

// BaseParserLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use BaseParserLibraryMetaData.ABI instead.
var BaseParserLibraryABI = BaseParserLibraryMetaData.ABI

// BaseParserLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BaseParserLibraryMetaData.Bin instead.
var BaseParserLibraryBin = BaseParserLibraryMetaData.Bin

// DeployBaseParserLibrary deploys a new Ethereum contract, binding an instance of BaseParserLibrary to it.
func DeployBaseParserLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *BaseParserLibrary, error) {
	parsed, err := BaseParserLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BaseParserLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseParserLibrary{BaseParserLibraryCaller: BaseParserLibraryCaller{contract: contract}, BaseParserLibraryTransactor: BaseParserLibraryTransactor{contract: contract}, BaseParserLibraryFilterer: BaseParserLibraryFilterer{contract: contract}}, nil
}

// BaseParserLibrary is an auto generated Go binding around an Ethereum contract.
type BaseParserLibrary struct {
	BaseParserLibraryCaller     // Read-only binding to the contract
	BaseParserLibraryTransactor // Write-only binding to the contract
	BaseParserLibraryFilterer   // Log filterer for contract events
}

// BaseParserLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseParserLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseParserLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseParserLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseParserLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseParserLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseParserLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BaseParserLibrarySession struct {
	Contract     *BaseParserLibrary // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// BaseParserLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BaseParserLibraryCallerSession struct {
	Contract *BaseParserLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// BaseParserLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BaseParserLibraryTransactorSession struct {
	Contract     *BaseParserLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// BaseParserLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type BaseParserLibraryRaw struct {
	Contract *BaseParserLibrary // Generic contract binding to access the raw methods on
}

// BaseParserLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BaseParserLibraryCallerRaw struct {
	Contract *BaseParserLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// BaseParserLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BaseParserLibraryTransactorRaw struct {
	Contract *BaseParserLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBaseParserLibrary creates a new instance of BaseParserLibrary, bound to a specific deployed contract.
func NewBaseParserLibrary(address common.Address, backend bind.ContractBackend) (*BaseParserLibrary, error) {
	contract, err := bindBaseParserLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseParserLibrary{BaseParserLibraryCaller: BaseParserLibraryCaller{contract: contract}, BaseParserLibraryTransactor: BaseParserLibraryTransactor{contract: contract}, BaseParserLibraryFilterer: BaseParserLibraryFilterer{contract: contract}}, nil
}

// NewBaseParserLibraryCaller creates a new read-only instance of BaseParserLibrary, bound to a specific deployed contract.
func NewBaseParserLibraryCaller(address common.Address, caller bind.ContractCaller) (*BaseParserLibraryCaller, error) {
	contract, err := bindBaseParserLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseParserLibraryCaller{contract: contract}, nil
}

// NewBaseParserLibraryTransactor creates a new write-only instance of BaseParserLibrary, bound to a specific deployed contract.
func NewBaseParserLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseParserLibraryTransactor, error) {
	contract, err := bindBaseParserLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseParserLibraryTransactor{contract: contract}, nil
}

// NewBaseParserLibraryFilterer creates a new log filterer instance of BaseParserLibrary, bound to a specific deployed contract.
func NewBaseParserLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseParserLibraryFilterer, error) {
	contract, err := bindBaseParserLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseParserLibraryFilterer{contract: contract}, nil
}

// bindBaseParserLibrary binds a generic wrapper to an already deployed contract.
func bindBaseParserLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseParserLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseParserLibrary *BaseParserLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BaseParserLibrary.Contract.BaseParserLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseParserLibrary *BaseParserLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseParserLibrary.Contract.BaseParserLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseParserLibrary *BaseParserLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseParserLibrary.Contract.BaseParserLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseParserLibrary *BaseParserLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BaseParserLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseParserLibrary *BaseParserLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseParserLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseParserLibrary *BaseParserLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseParserLibrary.Contract.contract.Transact(opts, method, params...)
}

// CircuitBreakerMetaData contains all meta data concerning the CircuitBreaker contract.
var CircuitBreakerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"cbState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// CircuitBreakerABI is the input ABI used to generate the binding from.
// Deprecated: Use CircuitBreakerMetaData.ABI instead.
var CircuitBreakerABI = CircuitBreakerMetaData.ABI

// CircuitBreaker is an auto generated Go binding around an Ethereum contract.
type CircuitBreaker struct {
	CircuitBreakerCaller     // Read-only binding to the contract
	CircuitBreakerTransactor // Write-only binding to the contract
	CircuitBreakerFilterer   // Log filterer for contract events
}

// CircuitBreakerCaller is an auto generated read-only Go binding around an Ethereum contract.
type CircuitBreakerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CircuitBreakerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type CircuitBreakerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CircuitBreakerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CircuitBreakerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CircuitBreakerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type CircuitBreakerSession struct {
	Contract     *CircuitBreaker   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CircuitBreakerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type CircuitBreakerCallerSession struct {
	Contract *CircuitBreakerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// CircuitBreakerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type CircuitBreakerTransactorSession struct {
	Contract     *CircuitBreakerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// CircuitBreakerRaw is an auto generated low-level Go binding around an Ethereum contract.
type CircuitBreakerRaw struct {
	Contract *CircuitBreaker // Generic contract binding to access the raw methods on
}

// CircuitBreakerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type CircuitBreakerCallerRaw struct {
	Contract *CircuitBreakerCaller // Generic read-only contract binding to access the raw methods on
}

// CircuitBreakerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type CircuitBreakerTransactorRaw struct {
	Contract *CircuitBreakerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCircuitBreaker creates a new instance of CircuitBreaker, bound to a specific deployed contract.
func NewCircuitBreaker(address common.Address, backend bind.ContractBackend) (*CircuitBreaker, error) {
	contract, err := bindCircuitBreaker(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CircuitBreaker{CircuitBreakerCaller: CircuitBreakerCaller{contract: contract}, CircuitBreakerTransactor: CircuitBreakerTransactor{contract: contract}, CircuitBreakerFilterer: CircuitBreakerFilterer{contract: contract}}, nil
}

// NewCircuitBreakerCaller creates a new read-only instance of CircuitBreaker, bound to a specific deployed contract.
func NewCircuitBreakerCaller(address common.Address, caller bind.ContractCaller) (*CircuitBreakerCaller, error) {
	contract, err := bindCircuitBreaker(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CircuitBreakerCaller{contract: contract}, nil
}

// NewCircuitBreakerTransactor creates a new write-only instance of CircuitBreaker, bound to a specific deployed contract.
func NewCircuitBreakerTransactor(address common.Address, transactor bind.ContractTransactor) (*CircuitBreakerTransactor, error) {
	contract, err := bindCircuitBreaker(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CircuitBreakerTransactor{contract: contract}, nil
}

// NewCircuitBreakerFilterer creates a new log filterer instance of CircuitBreaker, bound to a specific deployed contract.
func NewCircuitBreakerFilterer(address common.Address, filterer bind.ContractFilterer) (*CircuitBreakerFilterer, error) {
	contract, err := bindCircuitBreaker(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CircuitBreakerFilterer{contract: contract}, nil
}

// bindCircuitBreaker binds a generic wrapper to an already deployed contract.
func bindCircuitBreaker(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(CircuitBreakerABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CircuitBreaker *CircuitBreakerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CircuitBreaker.Contract.CircuitBreakerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CircuitBreaker *CircuitBreakerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CircuitBreaker.Contract.CircuitBreakerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CircuitBreaker *CircuitBreakerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CircuitBreaker.Contract.CircuitBreakerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CircuitBreaker *CircuitBreakerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CircuitBreaker.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CircuitBreaker *CircuitBreakerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CircuitBreaker.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CircuitBreaker *CircuitBreakerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CircuitBreaker.Contract.contract.Transact(opts, method, params...)
}

// CbState is a free data retrieval call binding the contract method 0x608115df.
//
// Solidity: function cbState() view returns(bool)
func (_CircuitBreaker *CircuitBreakerCaller) CbState(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _CircuitBreaker.contract.Call(opts, &out, "cbState")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CbState is a free data retrieval call binding the contract method 0x608115df.
//
// Solidity: function cbState() view returns(bool)
func (_CircuitBreaker *CircuitBreakerSession) CbState() (bool, error) {
	return _CircuitBreaker.Contract.CbState(&_CircuitBreaker.CallOpts)
}

// CbState is a free data retrieval call binding the contract method 0x608115df.
//
// Solidity: function cbState() view returns(bool)
func (_CircuitBreaker *CircuitBreakerCallerSession) CbState() (bool, error) {
	return _CircuitBreaker.Contract.CbState(&_CircuitBreaker.CallOpts)
}

// ContextMetaData contains all meta data concerning the Context contract.
var ContextMetaData = &bind.MetaData{
	ABI: "[]",
}

// ContextABI is the input ABI used to generate the binding from.
// Deprecated: Use ContextMetaData.ABI instead.
var ContextABI = ContextMetaData.ABI

// Context is an auto generated Go binding around an Ethereum contract.
type Context struct {
	ContextCaller     // Read-only binding to the contract
	ContextTransactor // Write-only binding to the contract
	ContextFilterer   // Log filterer for contract events
}

// ContextCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContextCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContextTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContextTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContextFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContextFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContextSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContextSession struct {
	Contract     *Context          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ContextCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContextCallerSession struct {
	Contract *ContextCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// ContextTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContextTransactorSession struct {
	Contract     *ContextTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// ContextRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContextRaw struct {
	Contract *Context // Generic contract binding to access the raw methods on
}

// ContextCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContextCallerRaw struct {
	Contract *ContextCaller // Generic read-only contract binding to access the raw methods on
}

// ContextTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContextTransactorRaw struct {
	Contract *ContextTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContext creates a new instance of Context, bound to a specific deployed contract.
func NewContext(address common.Address, backend bind.ContractBackend) (*Context, error) {
	contract, err := bindContext(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Context{ContextCaller: ContextCaller{contract: contract}, ContextTransactor: ContextTransactor{contract: contract}, ContextFilterer: ContextFilterer{contract: contract}}, nil
}

// NewContextCaller creates a new read-only instance of Context, bound to a specific deployed contract.
func NewContextCaller(address common.Address, caller bind.ContractCaller) (*ContextCaller, error) {
	contract, err := bindContext(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContextCaller{contract: contract}, nil
}

// NewContextTransactor creates a new write-only instance of Context, bound to a specific deployed contract.
func NewContextTransactor(address common.Address, transactor bind.ContractTransactor) (*ContextTransactor, error) {
	contract, err := bindContext(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContextTransactor{contract: contract}, nil
}

// NewContextFilterer creates a new log filterer instance of Context, bound to a specific deployed contract.
func NewContextFilterer(address common.Address, filterer bind.ContractFilterer) (*ContextFilterer, error) {
	contract, err := bindContext(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContextFilterer{contract: contract}, nil
}

// bindContext binds a generic wrapper to an already deployed contract.
func bindContext(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ContextABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Context *ContextRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Context.Contract.ContextCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Context *ContextRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Context.Contract.ContextTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Context *ContextRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Context.Contract.ContextTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Context *ContextCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Context.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Context *ContextTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Context.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Context *ContextTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Context.Contract.contract.Transact(opts, method, params...)
}

// CryptoLibraryMetaData contains all meta data concerning the CryptoLibrary contract.
var CryptoLibraryMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206fd4b12d3847d34d0661b48bdd57c01f53e9475e7a61623bf4de0cb6594ae8b264736f6c634300080b0033",
}

// CryptoLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use CryptoLibraryMetaData.ABI instead.
var CryptoLibraryABI = CryptoLibraryMetaData.ABI

// CryptoLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use CryptoLibraryMetaData.Bin instead.
var CryptoLibraryBin = CryptoLibraryMetaData.Bin

// DeployCryptoLibrary deploys a new Ethereum contract, binding an instance of CryptoLibrary to it.
func DeployCryptoLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *CryptoLibrary, error) {
	parsed, err := CryptoLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CryptoLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &CryptoLibrary{CryptoLibraryCaller: CryptoLibraryCaller{contract: contract}, CryptoLibraryTransactor: CryptoLibraryTransactor{contract: contract}, CryptoLibraryFilterer: CryptoLibraryFilterer{contract: contract}}, nil
}

// CryptoLibrary is an auto generated Go binding around an Ethereum contract.
type CryptoLibrary struct {
	CryptoLibraryCaller     // Read-only binding to the contract
	CryptoLibraryTransactor // Write-only binding to the contract
	CryptoLibraryFilterer   // Log filterer for contract events
}

// CryptoLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type CryptoLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CryptoLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type CryptoLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CryptoLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CryptoLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CryptoLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type CryptoLibrarySession struct {
	Contract     *CryptoLibrary    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CryptoLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type CryptoLibraryCallerSession struct {
	Contract *CryptoLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// CryptoLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type CryptoLibraryTransactorSession struct {
	Contract     *CryptoLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// CryptoLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type CryptoLibraryRaw struct {
	Contract *CryptoLibrary // Generic contract binding to access the raw methods on
}

// CryptoLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type CryptoLibraryCallerRaw struct {
	Contract *CryptoLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// CryptoLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type CryptoLibraryTransactorRaw struct {
	Contract *CryptoLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCryptoLibrary creates a new instance of CryptoLibrary, bound to a specific deployed contract.
func NewCryptoLibrary(address common.Address, backend bind.ContractBackend) (*CryptoLibrary, error) {
	contract, err := bindCryptoLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CryptoLibrary{CryptoLibraryCaller: CryptoLibraryCaller{contract: contract}, CryptoLibraryTransactor: CryptoLibraryTransactor{contract: contract}, CryptoLibraryFilterer: CryptoLibraryFilterer{contract: contract}}, nil
}

// NewCryptoLibraryCaller creates a new read-only instance of CryptoLibrary, bound to a specific deployed contract.
func NewCryptoLibraryCaller(address common.Address, caller bind.ContractCaller) (*CryptoLibraryCaller, error) {
	contract, err := bindCryptoLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CryptoLibraryCaller{contract: contract}, nil
}

// NewCryptoLibraryTransactor creates a new write-only instance of CryptoLibrary, bound to a specific deployed contract.
func NewCryptoLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*CryptoLibraryTransactor, error) {
	contract, err := bindCryptoLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CryptoLibraryTransactor{contract: contract}, nil
}

// NewCryptoLibraryFilterer creates a new log filterer instance of CryptoLibrary, bound to a specific deployed contract.
func NewCryptoLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*CryptoLibraryFilterer, error) {
	contract, err := bindCryptoLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CryptoLibraryFilterer{contract: contract}, nil
}

// bindCryptoLibrary binds a generic wrapper to an already deployed contract.
func bindCryptoLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(CryptoLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CryptoLibrary *CryptoLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CryptoLibrary.Contract.CryptoLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CryptoLibrary *CryptoLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CryptoLibrary.Contract.CryptoLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CryptoLibrary *CryptoLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CryptoLibrary.Contract.CryptoLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CryptoLibrary *CryptoLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CryptoLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CryptoLibrary *CryptoLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CryptoLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CryptoLibrary *CryptoLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CryptoLibrary.Contract.contract.Transact(opts, method, params...)
}

// CustomEnumerableMapsMetaData contains all meta data concerning the CustomEnumerableMaps contract.
var CustomEnumerableMapsMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a3dc214bf9526015bf14ff57d131f9ef4c96120fbc9f7f1da632d8ffd044dd2064736f6c634300080b0033",
}

// CustomEnumerableMapsABI is the input ABI used to generate the binding from.
// Deprecated: Use CustomEnumerableMapsMetaData.ABI instead.
var CustomEnumerableMapsABI = CustomEnumerableMapsMetaData.ABI

// CustomEnumerableMapsBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use CustomEnumerableMapsMetaData.Bin instead.
var CustomEnumerableMapsBin = CustomEnumerableMapsMetaData.Bin

// DeployCustomEnumerableMaps deploys a new Ethereum contract, binding an instance of CustomEnumerableMaps to it.
func DeployCustomEnumerableMaps(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *CustomEnumerableMaps, error) {
	parsed, err := CustomEnumerableMapsMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CustomEnumerableMapsBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &CustomEnumerableMaps{CustomEnumerableMapsCaller: CustomEnumerableMapsCaller{contract: contract}, CustomEnumerableMapsTransactor: CustomEnumerableMapsTransactor{contract: contract}, CustomEnumerableMapsFilterer: CustomEnumerableMapsFilterer{contract: contract}}, nil
}

// CustomEnumerableMaps is an auto generated Go binding around an Ethereum contract.
type CustomEnumerableMaps struct {
	CustomEnumerableMapsCaller     // Read-only binding to the contract
	CustomEnumerableMapsTransactor // Write-only binding to the contract
	CustomEnumerableMapsFilterer   // Log filterer for contract events
}

// CustomEnumerableMapsCaller is an auto generated read-only Go binding around an Ethereum contract.
type CustomEnumerableMapsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CustomEnumerableMapsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type CustomEnumerableMapsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CustomEnumerableMapsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CustomEnumerableMapsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CustomEnumerableMapsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type CustomEnumerableMapsSession struct {
	Contract     *CustomEnumerableMaps // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// CustomEnumerableMapsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type CustomEnumerableMapsCallerSession struct {
	Contract *CustomEnumerableMapsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// CustomEnumerableMapsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type CustomEnumerableMapsTransactorSession struct {
	Contract     *CustomEnumerableMapsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// CustomEnumerableMapsRaw is an auto generated low-level Go binding around an Ethereum contract.
type CustomEnumerableMapsRaw struct {
	Contract *CustomEnumerableMaps // Generic contract binding to access the raw methods on
}

// CustomEnumerableMapsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type CustomEnumerableMapsCallerRaw struct {
	Contract *CustomEnumerableMapsCaller // Generic read-only contract binding to access the raw methods on
}

// CustomEnumerableMapsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type CustomEnumerableMapsTransactorRaw struct {
	Contract *CustomEnumerableMapsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCustomEnumerableMaps creates a new instance of CustomEnumerableMaps, bound to a specific deployed contract.
func NewCustomEnumerableMaps(address common.Address, backend bind.ContractBackend) (*CustomEnumerableMaps, error) {
	contract, err := bindCustomEnumerableMaps(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CustomEnumerableMaps{CustomEnumerableMapsCaller: CustomEnumerableMapsCaller{contract: contract}, CustomEnumerableMapsTransactor: CustomEnumerableMapsTransactor{contract: contract}, CustomEnumerableMapsFilterer: CustomEnumerableMapsFilterer{contract: contract}}, nil
}

// NewCustomEnumerableMapsCaller creates a new read-only instance of CustomEnumerableMaps, bound to a specific deployed contract.
func NewCustomEnumerableMapsCaller(address common.Address, caller bind.ContractCaller) (*CustomEnumerableMapsCaller, error) {
	contract, err := bindCustomEnumerableMaps(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CustomEnumerableMapsCaller{contract: contract}, nil
}

// NewCustomEnumerableMapsTransactor creates a new write-only instance of CustomEnumerableMaps, bound to a specific deployed contract.
func NewCustomEnumerableMapsTransactor(address common.Address, transactor bind.ContractTransactor) (*CustomEnumerableMapsTransactor, error) {
	contract, err := bindCustomEnumerableMaps(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CustomEnumerableMapsTransactor{contract: contract}, nil
}

// NewCustomEnumerableMapsFilterer creates a new log filterer instance of CustomEnumerableMaps, bound to a specific deployed contract.
func NewCustomEnumerableMapsFilterer(address common.Address, filterer bind.ContractFilterer) (*CustomEnumerableMapsFilterer, error) {
	contract, err := bindCustomEnumerableMaps(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CustomEnumerableMapsFilterer{contract: contract}, nil
}

// bindCustomEnumerableMaps binds a generic wrapper to an already deployed contract.
func bindCustomEnumerableMaps(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(CustomEnumerableMapsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CustomEnumerableMaps *CustomEnumerableMapsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CustomEnumerableMaps.Contract.CustomEnumerableMapsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CustomEnumerableMaps *CustomEnumerableMapsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CustomEnumerableMaps.Contract.CustomEnumerableMapsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CustomEnumerableMaps *CustomEnumerableMapsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CustomEnumerableMaps.Contract.CustomEnumerableMapsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CustomEnumerableMaps *CustomEnumerableMapsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CustomEnumerableMaps.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CustomEnumerableMaps *CustomEnumerableMapsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CustomEnumerableMaps.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CustomEnumerableMaps *CustomEnumerableMapsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CustomEnumerableMaps.Contract.contract.Transact(opts, method, params...)
}

// ERC165MetaData contains all meta data concerning the ERC165 contract.
var ERC165MetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// ERC165ABI is the input ABI used to generate the binding from.
// Deprecated: Use ERC165MetaData.ABI instead.
var ERC165ABI = ERC165MetaData.ABI

// ERC165 is an auto generated Go binding around an Ethereum contract.
type ERC165 struct {
	ERC165Caller     // Read-only binding to the contract
	ERC165Transactor // Write-only binding to the contract
	ERC165Filterer   // Log filterer for contract events
}

// ERC165Caller is an auto generated read-only Go binding around an Ethereum contract.
type ERC165Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC165Transactor is an auto generated write-only Go binding around an Ethereum contract.
type ERC165Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC165Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ERC165Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC165Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ERC165Session struct {
	Contract     *ERC165           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ERC165CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ERC165CallerSession struct {
	Contract *ERC165Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// ERC165TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ERC165TransactorSession struct {
	Contract     *ERC165Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ERC165Raw is an auto generated low-level Go binding around an Ethereum contract.
type ERC165Raw struct {
	Contract *ERC165 // Generic contract binding to access the raw methods on
}

// ERC165CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ERC165CallerRaw struct {
	Contract *ERC165Caller // Generic read-only contract binding to access the raw methods on
}

// ERC165TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ERC165TransactorRaw struct {
	Contract *ERC165Transactor // Generic write-only contract binding to access the raw methods on
}

// NewERC165 creates a new instance of ERC165, bound to a specific deployed contract.
func NewERC165(address common.Address, backend bind.ContractBackend) (*ERC165, error) {
	contract, err := bindERC165(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ERC165{ERC165Caller: ERC165Caller{contract: contract}, ERC165Transactor: ERC165Transactor{contract: contract}, ERC165Filterer: ERC165Filterer{contract: contract}}, nil
}

// NewERC165Caller creates a new read-only instance of ERC165, bound to a specific deployed contract.
func NewERC165Caller(address common.Address, caller bind.ContractCaller) (*ERC165Caller, error) {
	contract, err := bindERC165(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ERC165Caller{contract: contract}, nil
}

// NewERC165Transactor creates a new write-only instance of ERC165, bound to a specific deployed contract.
func NewERC165Transactor(address common.Address, transactor bind.ContractTransactor) (*ERC165Transactor, error) {
	contract, err := bindERC165(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ERC165Transactor{contract: contract}, nil
}

// NewERC165Filterer creates a new log filterer instance of ERC165, bound to a specific deployed contract.
func NewERC165Filterer(address common.Address, filterer bind.ContractFilterer) (*ERC165Filterer, error) {
	contract, err := bindERC165(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ERC165Filterer{contract: contract}, nil
}

// bindERC165 binds a generic wrapper to an already deployed contract.
func bindERC165(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ERC165ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC165 *ERC165Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC165.Contract.ERC165Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC165 *ERC165Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC165.Contract.ERC165Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC165 *ERC165Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC165.Contract.ERC165Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC165 *ERC165CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC165.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC165 *ERC165TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC165.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC165 *ERC165TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC165.Contract.contract.Transact(opts, method, params...)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ERC165 *ERC165Caller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _ERC165.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ERC165 *ERC165Session) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _ERC165.Contract.SupportsInterface(&_ERC165.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ERC165 *ERC165CallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _ERC165.Contract.SupportsInterface(&_ERC165.CallOpts, interfaceId)
}

// ERC20MetaData contains all meta data concerning the ERC20 contract.
var ERC20MetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b5060405162000dfc38038062000dfc8339810160408190526200003491620001db565b81516200004990600390602085019062000068565b5080516200005f90600490602084019062000068565b50505062000282565b828054620000769062000245565b90600052602060002090601f0160209004810192826200009a5760008555620000e5565b82601f10620000b557805160ff1916838001178555620000e5565b82800160010185558215620000e5579182015b82811115620000e5578251825591602001919060010190620000c8565b50620000f3929150620000f7565b5090565b5b80821115620000f35760008155600101620000f8565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200013657600080fd5b81516001600160401b03808211156200015357620001536200010e565b604051601f8301601f19908116603f011681019082821181831017156200017e576200017e6200010e565b816040528381526020925086838588010111156200019b57600080fd5b600091505b83821015620001bf5785820183015181830184015290820190620001a0565b83821115620001d15760008385830101525b9695505050505050565b60008060408385031215620001ef57600080fd5b82516001600160401b03808211156200020757600080fd5b620002158683870162000124565b935060208501519150808211156200022c57600080fd5b506200023b8582860162000124565b9150509250929050565b600181811c908216806200025a57607f821691505b602082108114156200027c57634e487b7160e01b600052602260045260246000fd5b50919050565b610b6a80620002926000396000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c80633950935111610081578063a457c2d71161005b578063a457c2d714610194578063a9059cbb146101a7578063dd62ed3e146101ba57600080fd5b8063395093511461014357806370a082311461015657806395d89b411461018c57600080fd5b806318160ddd116100b257806318160ddd1461010f57806323b872dd14610121578063313ce5671461013457600080fd5b806306fdde03146100ce578063095ea7b3146100ec575b600080fd5b6100d6610200565b6040516100e3919061094a565b60405180910390f35b6100ff6100fa3660046109e6565b610292565b60405190151581526020016100e3565b6002545b6040519081526020016100e3565b6100ff61012f366004610a10565b6102aa565b604051601281526020016100e3565b6100ff6101513660046109e6565b6102ce565b610113610164366004610a4c565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b6100d661031a565b6100ff6101a23660046109e6565b610329565b6100ff6101b53660046109e6565b6103ff565b6101136101c8366004610a6e565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b60606003805461020f90610aa1565b80601f016020809104026020016040519081016040528092919081815260200182805461023b90610aa1565b80156102885780601f1061025d57610100808354040283529160200191610288565b820191906000526020600020905b81548152906001019060200180831161026b57829003601f168201915b5050505050905090565b6000336102a081858561040d565b5060019392505050565b6000336102b88582856105c0565b6102c3858585610697565b506001949350505050565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff871684529091528120549091906102a09082908690610315908790610af5565b61040d565b60606004805461020f90610aa1565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168452909152812054909190838110156103f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6102c3828686840361040d565b6000336102a0818585610697565b73ffffffffffffffffffffffffffffffffffffffff83166104af576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016103e9565b73ffffffffffffffffffffffffffffffffffffffff8216610552576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f737300000000000000000000000000000000000000000000000000000000000060648201526084016103e9565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff8381166000908152600160209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146106915781811015610684576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016103e9565b610691848484840361040d565b50505050565b73ffffffffffffffffffffffffffffffffffffffff831661073a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016103e9565b73ffffffffffffffffffffffffffffffffffffffff82166107dd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016103e9565b73ffffffffffffffffffffffffffffffffffffffff831660009081526020819052604090205481811015610893576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e6365000000000000000000000000000000000000000000000000000060648201526084016103e9565b73ffffffffffffffffffffffffffffffffffffffff8085166000908152602081905260408082208585039055918516815290812080548492906108d7908490610af5565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161093d91815260200190565b60405180910390a3610691565b600060208083528351808285015260005b818110156109775785810183015185820160400152820161095b565b81811115610989576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146109e157600080fd5b919050565b600080604083850312156109f957600080fd5b610a02836109bd565b946020939093013593505050565b600080600060608486031215610a2557600080fd5b610a2e846109bd565b9250610a3c602085016109bd565b9150604084013590509250925092565b600060208284031215610a5e57600080fd5b610a67826109bd565b9392505050565b60008060408385031215610a8157600080fd5b610a8a836109bd565b9150610a98602084016109bd565b90509250929050565b600181811c90821680610ab557607f821691505b60208210811415610aef577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60008219821115610b2f577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b50019056fea26469706673582212202a842b98a5beb4ae3b04e9d3b46c94d7cc9c330ce5a4f77b18033477a86d0cfd64736f6c634300080b0033",
}

// ERC20ABI is the input ABI used to generate the binding from.
// Deprecated: Use ERC20MetaData.ABI instead.
var ERC20ABI = ERC20MetaData.ABI

// ERC20Bin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ERC20MetaData.Bin instead.
var ERC20Bin = ERC20MetaData.Bin

// DeployERC20 deploys a new Ethereum contract, binding an instance of ERC20 to it.
func DeployERC20(auth *bind.TransactOpts, backend bind.ContractBackend, name_ string, symbol_ string) (common.Address, *types.Transaction, *ERC20, error) {
	parsed, err := ERC20MetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ERC20Bin), backend, name_, symbol_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ERC20{ERC20Caller: ERC20Caller{contract: contract}, ERC20Transactor: ERC20Transactor{contract: contract}, ERC20Filterer: ERC20Filterer{contract: contract}}, nil
}

// ERC20 is an auto generated Go binding around an Ethereum contract.
type ERC20 struct {
	ERC20Caller     // Read-only binding to the contract
	ERC20Transactor // Write-only binding to the contract
	ERC20Filterer   // Log filterer for contract events
}

// ERC20Caller is an auto generated read-only Go binding around an Ethereum contract.
type ERC20Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20Transactor is an auto generated write-only Go binding around an Ethereum contract.
type ERC20Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ERC20Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ERC20Session struct {
	Contract     *ERC20            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ERC20CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ERC20CallerSession struct {
	Contract *ERC20Caller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// ERC20TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ERC20TransactorSession struct {
	Contract     *ERC20Transactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ERC20Raw is an auto generated low-level Go binding around an Ethereum contract.
type ERC20Raw struct {
	Contract *ERC20 // Generic contract binding to access the raw methods on
}

// ERC20CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ERC20CallerRaw struct {
	Contract *ERC20Caller // Generic read-only contract binding to access the raw methods on
}

// ERC20TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ERC20TransactorRaw struct {
	Contract *ERC20Transactor // Generic write-only contract binding to access the raw methods on
}

// NewERC20 creates a new instance of ERC20, bound to a specific deployed contract.
func NewERC20(address common.Address, backend bind.ContractBackend) (*ERC20, error) {
	contract, err := bindERC20(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ERC20{ERC20Caller: ERC20Caller{contract: contract}, ERC20Transactor: ERC20Transactor{contract: contract}, ERC20Filterer: ERC20Filterer{contract: contract}}, nil
}

// NewERC20Caller creates a new read-only instance of ERC20, bound to a specific deployed contract.
func NewERC20Caller(address common.Address, caller bind.ContractCaller) (*ERC20Caller, error) {
	contract, err := bindERC20(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20Caller{contract: contract}, nil
}

// NewERC20Transactor creates a new write-only instance of ERC20, bound to a specific deployed contract.
func NewERC20Transactor(address common.Address, transactor bind.ContractTransactor) (*ERC20Transactor, error) {
	contract, err := bindERC20(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20Transactor{contract: contract}, nil
}

// NewERC20Filterer creates a new log filterer instance of ERC20, bound to a specific deployed contract.
func NewERC20Filterer(address common.Address, filterer bind.ContractFilterer) (*ERC20Filterer, error) {
	contract, err := bindERC20(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ERC20Filterer{contract: contract}, nil
}

// bindERC20 binds a generic wrapper to an already deployed contract.
func bindERC20(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ERC20ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20 *ERC20Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC20.Contract.ERC20Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20 *ERC20Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20.Contract.ERC20Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20 *ERC20Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20.Contract.ERC20Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20 *ERC20CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC20.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20 *ERC20TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20 *ERC20TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_ERC20 *ERC20Caller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ERC20.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_ERC20 *ERC20Session) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _ERC20.Contract.Allowance(&_ERC20.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_ERC20 *ERC20CallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _ERC20.Contract.Allowance(&_ERC20.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_ERC20 *ERC20Caller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ERC20.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_ERC20 *ERC20Session) BalanceOf(account common.Address) (*big.Int, error) {
	return _ERC20.Contract.BalanceOf(&_ERC20.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_ERC20 *ERC20CallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _ERC20.Contract.BalanceOf(&_ERC20.CallOpts, account)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_ERC20 *ERC20Caller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _ERC20.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_ERC20 *ERC20Session) Decimals() (uint8, error) {
	return _ERC20.Contract.Decimals(&_ERC20.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_ERC20 *ERC20CallerSession) Decimals() (uint8, error) {
	return _ERC20.Contract.Decimals(&_ERC20.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ERC20 *ERC20Caller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ERC20.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ERC20 *ERC20Session) Name() (string, error) {
	return _ERC20.Contract.Name(&_ERC20.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ERC20 *ERC20CallerSession) Name() (string, error) {
	return _ERC20.Contract.Name(&_ERC20.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ERC20 *ERC20Caller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ERC20.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ERC20 *ERC20Session) Symbol() (string, error) {
	return _ERC20.Contract.Symbol(&_ERC20.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ERC20 *ERC20CallerSession) Symbol() (string, error) {
	return _ERC20.Contract.Symbol(&_ERC20.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ERC20 *ERC20Caller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ERC20.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ERC20 *ERC20Session) TotalSupply() (*big.Int, error) {
	return _ERC20.Contract.TotalSupply(&_ERC20.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ERC20 *ERC20CallerSession) TotalSupply() (*big.Int, error) {
	return _ERC20.Contract.TotalSupply(&_ERC20.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_ERC20 *ERC20Transactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_ERC20 *ERC20Session) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.Approve(&_ERC20.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_ERC20 *ERC20TransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.Approve(&_ERC20.TransactOpts, spender, amount)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_ERC20 *ERC20Transactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _ERC20.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_ERC20 *ERC20Session) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.DecreaseAllowance(&_ERC20.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_ERC20 *ERC20TransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.DecreaseAllowance(&_ERC20.TransactOpts, spender, subtractedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_ERC20 *ERC20Transactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _ERC20.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_ERC20 *ERC20Session) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.IncreaseAllowance(&_ERC20.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_ERC20 *ERC20TransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.IncreaseAllowance(&_ERC20.TransactOpts, spender, addedValue)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_ERC20 *ERC20Transactor) Transfer(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20.contract.Transact(opts, "transfer", to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_ERC20 *ERC20Session) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.Transfer(&_ERC20.TransactOpts, to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_ERC20 *ERC20TransactorSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.Transfer(&_ERC20.TransactOpts, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_ERC20 *ERC20Transactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20.contract.Transact(opts, "transferFrom", from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_ERC20 *ERC20Session) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.TransferFrom(&_ERC20.TransactOpts, from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_ERC20 *ERC20TransactorSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.TransferFrom(&_ERC20.TransactOpts, from, to, amount)
}

// ERC20ApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the ERC20 contract.
type ERC20ApprovalIterator struct {
	Event *ERC20Approval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20ApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20Approval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20Approval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20ApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20ApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20Approval represents a Approval event raised by the ERC20 contract.
type ERC20Approval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_ERC20 *ERC20Filterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*ERC20ApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _ERC20.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &ERC20ApprovalIterator{contract: _ERC20.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_ERC20 *ERC20Filterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *ERC20Approval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _ERC20.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20Approval)
				if err := _ERC20.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_ERC20 *ERC20Filterer) ParseApproval(log types.Log) (*ERC20Approval, error) {
	event := new(ERC20Approval)
	if err := _ERC20.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20TransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the ERC20 contract.
type ERC20TransferIterator struct {
	Event *ERC20Transfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20TransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20Transfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20Transfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20TransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20TransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20Transfer represents a Transfer event raised by the ERC20 contract.
type ERC20Transfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ERC20 *ERC20Filterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*ERC20TransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ERC20.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ERC20TransferIterator{contract: _ERC20.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ERC20 *ERC20Filterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *ERC20Transfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ERC20.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20Transfer)
				if err := _ERC20.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ERC20 *ERC20Filterer) ParseTransfer(log types.Log) (*ERC20Transfer, error) {
	event := new(ERC20Transfer)
	if err := _ERC20.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20SafeTransferMetaData contains all meta data concerning the ERC20SafeTransfer contract.
var ERC20SafeTransferMetaData = &bind.MetaData{
	ABI: "[]",
}

// ERC20SafeTransferABI is the input ABI used to generate the binding from.
// Deprecated: Use ERC20SafeTransferMetaData.ABI instead.
var ERC20SafeTransferABI = ERC20SafeTransferMetaData.ABI

// ERC20SafeTransfer is an auto generated Go binding around an Ethereum contract.
type ERC20SafeTransfer struct {
	ERC20SafeTransferCaller     // Read-only binding to the contract
	ERC20SafeTransferTransactor // Write-only binding to the contract
	ERC20SafeTransferFilterer   // Log filterer for contract events
}

// ERC20SafeTransferCaller is an auto generated read-only Go binding around an Ethereum contract.
type ERC20SafeTransferCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20SafeTransferTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ERC20SafeTransferTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20SafeTransferFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ERC20SafeTransferFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20SafeTransferSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ERC20SafeTransferSession struct {
	Contract     *ERC20SafeTransfer // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// ERC20SafeTransferCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ERC20SafeTransferCallerSession struct {
	Contract *ERC20SafeTransferCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// ERC20SafeTransferTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ERC20SafeTransferTransactorSession struct {
	Contract     *ERC20SafeTransferTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// ERC20SafeTransferRaw is an auto generated low-level Go binding around an Ethereum contract.
type ERC20SafeTransferRaw struct {
	Contract *ERC20SafeTransfer // Generic contract binding to access the raw methods on
}

// ERC20SafeTransferCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ERC20SafeTransferCallerRaw struct {
	Contract *ERC20SafeTransferCaller // Generic read-only contract binding to access the raw methods on
}

// ERC20SafeTransferTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ERC20SafeTransferTransactorRaw struct {
	Contract *ERC20SafeTransferTransactor // Generic write-only contract binding to access the raw methods on
}

// NewERC20SafeTransfer creates a new instance of ERC20SafeTransfer, bound to a specific deployed contract.
func NewERC20SafeTransfer(address common.Address, backend bind.ContractBackend) (*ERC20SafeTransfer, error) {
	contract, err := bindERC20SafeTransfer(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ERC20SafeTransfer{ERC20SafeTransferCaller: ERC20SafeTransferCaller{contract: contract}, ERC20SafeTransferTransactor: ERC20SafeTransferTransactor{contract: contract}, ERC20SafeTransferFilterer: ERC20SafeTransferFilterer{contract: contract}}, nil
}

// NewERC20SafeTransferCaller creates a new read-only instance of ERC20SafeTransfer, bound to a specific deployed contract.
func NewERC20SafeTransferCaller(address common.Address, caller bind.ContractCaller) (*ERC20SafeTransferCaller, error) {
	contract, err := bindERC20SafeTransfer(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20SafeTransferCaller{contract: contract}, nil
}

// NewERC20SafeTransferTransactor creates a new write-only instance of ERC20SafeTransfer, bound to a specific deployed contract.
func NewERC20SafeTransferTransactor(address common.Address, transactor bind.ContractTransactor) (*ERC20SafeTransferTransactor, error) {
	contract, err := bindERC20SafeTransfer(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20SafeTransferTransactor{contract: contract}, nil
}

// NewERC20SafeTransferFilterer creates a new log filterer instance of ERC20SafeTransfer, bound to a specific deployed contract.
func NewERC20SafeTransferFilterer(address common.Address, filterer bind.ContractFilterer) (*ERC20SafeTransferFilterer, error) {
	contract, err := bindERC20SafeTransfer(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ERC20SafeTransferFilterer{contract: contract}, nil
}

// bindERC20SafeTransfer binds a generic wrapper to an already deployed contract.
func bindERC20SafeTransfer(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ERC20SafeTransferABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20SafeTransfer *ERC20SafeTransferRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC20SafeTransfer.Contract.ERC20SafeTransferCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20SafeTransfer *ERC20SafeTransferRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20SafeTransfer.Contract.ERC20SafeTransferTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20SafeTransfer *ERC20SafeTransferRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20SafeTransfer.Contract.ERC20SafeTransferTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20SafeTransfer *ERC20SafeTransferCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC20SafeTransfer.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20SafeTransfer *ERC20SafeTransferTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20SafeTransfer.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20SafeTransfer *ERC20SafeTransferTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20SafeTransfer.Contract.contract.Transact(opts, method, params...)
}

// ERC721MetaData contains all meta data concerning the ERC721 contract.
var ERC721MetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b5060405162001bbe38038062001bbe8339810160408190526200003491620001db565b81516200004990600090602085019062000068565b5080516200005f90600190602084019062000068565b50505062000282565b828054620000769062000245565b90600052602060002090601f0160209004810192826200009a5760008555620000e5565b82601f10620000b557805160ff1916838001178555620000e5565b82800160010185558215620000e5579182015b82811115620000e5578251825591602001919060010190620000c8565b50620000f3929150620000f7565b5090565b5b80821115620000f35760008155600101620000f8565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200013657600080fd5b81516001600160401b03808211156200015357620001536200010e565b604051601f8301601f19908116603f011681019082821181831017156200017e576200017e6200010e565b816040528381526020925086838588010111156200019b57600080fd5b600091505b83821015620001bf5785820183015181830184015290820190620001a0565b83821115620001d15760008385830101525b9695505050505050565b60008060408385031215620001ef57600080fd5b82516001600160401b03808211156200020757600080fd5b620002158683870162000124565b935060208501519150808211156200022c57600080fd5b506200023b8582860162000124565b9150509250929050565b600181811c908216806200025a57607f821691505b602082108114156200027c57634e487b7160e01b600052602260045260246000fd5b50919050565b61192c80620002926000396000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c80636352211e1161008c578063a22cb46511610066578063a22cb465146101d0578063b88d4fde146101e3578063c87b56dd146101f6578063e985e9c51461020957600080fd5b80636352211e1461019457806370a08231146101a757806395d89b41146101c857600080fd5b8063095ea7b3116100bd578063095ea7b31461015957806323b872dd1461016e57806342842e0e1461018157600080fd5b806301ffc9a7146100e457806306fdde031461010c578063081812fc14610121575b600080fd5b6100f76100f23660046113ef565b610252565b60405190151581526020015b60405180910390f35b610114610337565b6040516101039190611482565b61013461012f366004611495565b6103c9565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610103565b61016c6101673660046114d7565b6104a8565b005b61016c61017c366004611501565b610635565b61016c61018f366004611501565b6106d6565b6101346101a2366004611495565b6106f1565b6101ba6101b536600461153d565b6107a3565b604051908152602001610103565b610114610871565b61016c6101de366004611558565b610880565b61016c6101f13660046115c3565b61088f565b610114610204366004611495565b610937565b6100f76102173660046116bd565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260056020908152604080832093909416825291909152205460ff1690565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd0000000000000000000000000000000000000000000000000000000014806102e557507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061033157507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b606060008054610346906116f0565b80601f0160208091040260200160405190810160405280929190818152602001828054610372906116f0565b80156103bf5780601f10610394576101008083540402835291602001916103bf565b820191906000526020600020905b8154815290600101906020018083116103a257829003601f168201915b5050505050905090565b60008181526002602052604081205473ffffffffffffffffffffffffffffffffffffffff1661047f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e000000000000000000000000000000000000000060648201526084015b60405180910390fd5b5060009081526004602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b60006104b3826106f1565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610571576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610476565b3373ffffffffffffffffffffffffffffffffffffffff8216148061059a575061059a8133610217565b610626576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610476565b6106308383610a54565b505050565b61063f3382610af4565b6106cb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610476565b610630838383610c64565b6106308383836040518060200160405280600081525061088f565b60008181526002602052604081205473ffffffffffffffffffffffffffffffffffffffff1680610331576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e00000000000000000000000000000000000000000000006064820152608401610476565b600073ffffffffffffffffffffffffffffffffffffffff8216610848576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f2061646472657373000000000000000000000000000000000000000000006064820152608401610476565b5073ffffffffffffffffffffffffffffffffffffffff1660009081526003602052604090205490565b606060018054610346906116f0565b61088b338383610ecb565b5050565b6108993383610af4565b610925576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610476565b61093184848484610ff9565b50505050565b60008181526002602052604090205460609073ffffffffffffffffffffffffffffffffffffffff166109eb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e00000000000000000000000000000000006064820152608401610476565b6000610a0260408051602081019091526000815290565b90506000815111610a225760405180602001604052806000815250610a4d565b80610a2c8461109c565b604051602001610a3d929190611744565b6040516020818303038152906040525b9392505050565b600081815260046020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84169081179091558190610aae826106f1565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008181526002602052604081205473ffffffffffffffffffffffffffffffffffffffff16610ba5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e00000000000000000000000000000000000000006064820152608401610476565b6000610bb0836106f1565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610c1f57508373ffffffffffffffffffffffffffffffffffffffff16610c07846103c9565b73ffffffffffffffffffffffffffffffffffffffff16145b80610c5c575073ffffffffffffffffffffffffffffffffffffffff80821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b8273ffffffffffffffffffffffffffffffffffffffff16610c84826106f1565b73ffffffffffffffffffffffffffffffffffffffff1614610d27576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e65720000000000000000000000000000000000000000000000000000006064820152608401610476565b73ffffffffffffffffffffffffffffffffffffffff8216610dc9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610476565b610dd4600082610a54565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600360205260408120805460019290610e0a9084906117a2565b909155505073ffffffffffffffffffffffffffffffffffffffff82166000908152600360205260408120805460019290610e459084906117b9565b909155505060008181526002602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610f61576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610476565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526005602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611004848484610c64565b611010848484846111ce565b610931576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610476565b6060816110dc57505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b811561110657806110f0816117d1565b91506110ff9050600a83611839565b91506110e0565b60008167ffffffffffffffff81111561112157611121611594565b6040519080825280601f01601f19166020018201604052801561114b576020820181803683370190505b5090505b8415610c5c576111606001836117a2565b915061116d600a8661184d565b6111789060306117b9565b60f81b81838151811061118d5761118d611861565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506111c7600a86611839565b945061114f565b600073ffffffffffffffffffffffffffffffffffffffff84163b156113b3576040517f150b7a0200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85169063150b7a0290611245903390899088908890600401611890565b6020604051808303816000875af192505050801561129e575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261129b918101906118d9565b60015b611368573d8080156112cc576040519150601f19603f3d011682016040523d82523d6000602084013e6112d1565b606091505b508051611360576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610476565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a0200000000000000000000000000000000000000000000000000000000149050610c5c565b506001949350505050565b7fffffffff00000000000000000000000000000000000000000000000000000000811681146113ec57600080fd5b50565b60006020828403121561140157600080fd5b8135610a4d816113be565b60005b8381101561142757818101518382015260200161140f565b838111156109315750506000910152565b6000815180845261145081602086016020860161140c565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000610a4d6020830184611438565b6000602082840312156114a757600080fd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff811681146114d257600080fd5b919050565b600080604083850312156114ea57600080fd5b6114f3836114ae565b946020939093013593505050565b60008060006060848603121561151657600080fd5b61151f846114ae565b925061152d602085016114ae565b9150604084013590509250925092565b60006020828403121561154f57600080fd5b610a4d826114ae565b6000806040838503121561156b57600080fd5b611574836114ae565b91506020830135801515811461158957600080fd5b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080600080608085870312156115d957600080fd5b6115e2856114ae565b93506115f0602086016114ae565b925060408501359150606085013567ffffffffffffffff8082111561161457600080fd5b818701915087601f83011261162857600080fd5b81358181111561163a5761163a611594565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561168057611680611594565b816040528281528a602084870101111561169957600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b600080604083850312156116d057600080fd5b6116d9836114ae565b91506116e7602084016114ae565b90509250929050565b600181811c9082168061170457607f821691505b6020821081141561173e577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b6000835161175681846020880161140c565b83519083019061176a81836020880161140c565b01949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000828210156117b4576117b4611773565b500390565b600082198211156117cc576117cc611773565b500190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561180357611803611773565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000826118485761184861180a565b500490565b60008261185c5761185c61180a565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600073ffffffffffffffffffffffffffffffffffffffff8087168352808616602084015250836040830152608060608301526118cf6080830184611438565b9695505050505050565b6000602082840312156118eb57600080fd5b8151610a4d816113be56fea2646970667358221220f210e5b4e6118c6aa37bf4ab0dc15e269f57df12d810f22d3bbeb8e1b3c20b4c64736f6c634300080b0033",
}

// ERC721ABI is the input ABI used to generate the binding from.
// Deprecated: Use ERC721MetaData.ABI instead.
var ERC721ABI = ERC721MetaData.ABI

// ERC721Bin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ERC721MetaData.Bin instead.
var ERC721Bin = ERC721MetaData.Bin

// DeployERC721 deploys a new Ethereum contract, binding an instance of ERC721 to it.
func DeployERC721(auth *bind.TransactOpts, backend bind.ContractBackend, name_ string, symbol_ string) (common.Address, *types.Transaction, *ERC721, error) {
	parsed, err := ERC721MetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ERC721Bin), backend, name_, symbol_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ERC721{ERC721Caller: ERC721Caller{contract: contract}, ERC721Transactor: ERC721Transactor{contract: contract}, ERC721Filterer: ERC721Filterer{contract: contract}}, nil
}

// ERC721 is an auto generated Go binding around an Ethereum contract.
type ERC721 struct {
	ERC721Caller     // Read-only binding to the contract
	ERC721Transactor // Write-only binding to the contract
	ERC721Filterer   // Log filterer for contract events
}

// ERC721Caller is an auto generated read-only Go binding around an Ethereum contract.
type ERC721Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC721Transactor is an auto generated write-only Go binding around an Ethereum contract.
type ERC721Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC721Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ERC721Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC721Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ERC721Session struct {
	Contract     *ERC721           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ERC721CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ERC721CallerSession struct {
	Contract *ERC721Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// ERC721TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ERC721TransactorSession struct {
	Contract     *ERC721Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ERC721Raw is an auto generated low-level Go binding around an Ethereum contract.
type ERC721Raw struct {
	Contract *ERC721 // Generic contract binding to access the raw methods on
}

// ERC721CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ERC721CallerRaw struct {
	Contract *ERC721Caller // Generic read-only contract binding to access the raw methods on
}

// ERC721TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ERC721TransactorRaw struct {
	Contract *ERC721Transactor // Generic write-only contract binding to access the raw methods on
}

// NewERC721 creates a new instance of ERC721, bound to a specific deployed contract.
func NewERC721(address common.Address, backend bind.ContractBackend) (*ERC721, error) {
	contract, err := bindERC721(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ERC721{ERC721Caller: ERC721Caller{contract: contract}, ERC721Transactor: ERC721Transactor{contract: contract}, ERC721Filterer: ERC721Filterer{contract: contract}}, nil
}

// NewERC721Caller creates a new read-only instance of ERC721, bound to a specific deployed contract.
func NewERC721Caller(address common.Address, caller bind.ContractCaller) (*ERC721Caller, error) {
	contract, err := bindERC721(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ERC721Caller{contract: contract}, nil
}

// NewERC721Transactor creates a new write-only instance of ERC721, bound to a specific deployed contract.
func NewERC721Transactor(address common.Address, transactor bind.ContractTransactor) (*ERC721Transactor, error) {
	contract, err := bindERC721(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ERC721Transactor{contract: contract}, nil
}

// NewERC721Filterer creates a new log filterer instance of ERC721, bound to a specific deployed contract.
func NewERC721Filterer(address common.Address, filterer bind.ContractFilterer) (*ERC721Filterer, error) {
	contract, err := bindERC721(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ERC721Filterer{contract: contract}, nil
}

// bindERC721 binds a generic wrapper to an already deployed contract.
func bindERC721(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ERC721ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC721 *ERC721Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC721.Contract.ERC721Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC721 *ERC721Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC721.Contract.ERC721Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC721 *ERC721Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC721.Contract.ERC721Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC721 *ERC721CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC721.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC721 *ERC721TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC721.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC721 *ERC721TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC721.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_ERC721 *ERC721Caller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ERC721.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_ERC721 *ERC721Session) BalanceOf(owner common.Address) (*big.Int, error) {
	return _ERC721.Contract.BalanceOf(&_ERC721.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_ERC721 *ERC721CallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _ERC721.Contract.BalanceOf(&_ERC721.CallOpts, owner)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_ERC721 *ERC721Caller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ERC721.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_ERC721 *ERC721Session) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _ERC721.Contract.GetApproved(&_ERC721.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_ERC721 *ERC721CallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _ERC721.Contract.GetApproved(&_ERC721.CallOpts, tokenId)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_ERC721 *ERC721Caller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _ERC721.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_ERC721 *ERC721Session) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _ERC721.Contract.IsApprovedForAll(&_ERC721.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_ERC721 *ERC721CallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _ERC721.Contract.IsApprovedForAll(&_ERC721.CallOpts, owner, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ERC721 *ERC721Caller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ERC721.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ERC721 *ERC721Session) Name() (string, error) {
	return _ERC721.Contract.Name(&_ERC721.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ERC721 *ERC721CallerSession) Name() (string, error) {
	return _ERC721.Contract.Name(&_ERC721.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_ERC721 *ERC721Caller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ERC721.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_ERC721 *ERC721Session) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _ERC721.Contract.OwnerOf(&_ERC721.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_ERC721 *ERC721CallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _ERC721.Contract.OwnerOf(&_ERC721.CallOpts, tokenId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ERC721 *ERC721Caller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _ERC721.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ERC721 *ERC721Session) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _ERC721.Contract.SupportsInterface(&_ERC721.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ERC721 *ERC721CallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _ERC721.Contract.SupportsInterface(&_ERC721.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ERC721 *ERC721Caller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ERC721.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ERC721 *ERC721Session) Symbol() (string, error) {
	return _ERC721.Contract.Symbol(&_ERC721.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ERC721 *ERC721CallerSession) Symbol() (string, error) {
	return _ERC721.Contract.Symbol(&_ERC721.CallOpts)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_ERC721 *ERC721Caller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _ERC721.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_ERC721 *ERC721Session) TokenURI(tokenId *big.Int) (string, error) {
	return _ERC721.Contract.TokenURI(&_ERC721.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_ERC721 *ERC721CallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _ERC721.Contract.TokenURI(&_ERC721.CallOpts, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_ERC721 *ERC721Transactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ERC721.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_ERC721 *ERC721Session) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ERC721.Contract.Approve(&_ERC721.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_ERC721 *ERC721TransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ERC721.Contract.Approve(&_ERC721.TransactOpts, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_ERC721 *ERC721Transactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ERC721.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_ERC721 *ERC721Session) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ERC721.Contract.SafeTransferFrom(&_ERC721.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_ERC721 *ERC721TransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ERC721.Contract.SafeTransferFrom(&_ERC721.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_ERC721 *ERC721Transactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _ERC721.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_ERC721 *ERC721Session) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _ERC721.Contract.SafeTransferFrom0(&_ERC721.TransactOpts, from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_ERC721 *ERC721TransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _ERC721.Contract.SafeTransferFrom0(&_ERC721.TransactOpts, from, to, tokenId, _data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_ERC721 *ERC721Transactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _ERC721.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_ERC721 *ERC721Session) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _ERC721.Contract.SetApprovalForAll(&_ERC721.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_ERC721 *ERC721TransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _ERC721.Contract.SetApprovalForAll(&_ERC721.TransactOpts, operator, approved)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_ERC721 *ERC721Transactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ERC721.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_ERC721 *ERC721Session) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ERC721.Contract.TransferFrom(&_ERC721.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_ERC721 *ERC721TransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ERC721.Contract.TransferFrom(&_ERC721.TransactOpts, from, to, tokenId)
}

// ERC721ApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the ERC721 contract.
type ERC721ApprovalIterator struct {
	Event *ERC721Approval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC721ApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC721Approval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC721Approval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC721ApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC721ApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC721Approval represents a Approval event raised by the ERC721 contract.
type ERC721Approval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_ERC721 *ERC721Filterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*ERC721ApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ERC721.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &ERC721ApprovalIterator{contract: _ERC721.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_ERC721 *ERC721Filterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *ERC721Approval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ERC721.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC721Approval)
				if err := _ERC721.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_ERC721 *ERC721Filterer) ParseApproval(log types.Log) (*ERC721Approval, error) {
	event := new(ERC721Approval)
	if err := _ERC721.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC721ApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the ERC721 contract.
type ERC721ApprovalForAllIterator struct {
	Event *ERC721ApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC721ApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC721ApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC721ApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC721ApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC721ApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC721ApprovalForAll represents a ApprovalForAll event raised by the ERC721 contract.
type ERC721ApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_ERC721 *ERC721Filterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*ERC721ApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _ERC721.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &ERC721ApprovalForAllIterator{contract: _ERC721.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_ERC721 *ERC721Filterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *ERC721ApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _ERC721.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC721ApprovalForAll)
				if err := _ERC721.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_ERC721 *ERC721Filterer) ParseApprovalForAll(log types.Log) (*ERC721ApprovalForAll, error) {
	event := new(ERC721ApprovalForAll)
	if err := _ERC721.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC721TransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the ERC721 contract.
type ERC721TransferIterator struct {
	Event *ERC721Transfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC721TransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC721Transfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC721Transfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC721TransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC721TransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC721Transfer represents a Transfer event raised by the ERC721 contract.
type ERC721Transfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_ERC721 *ERC721Filterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*ERC721TransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ERC721.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &ERC721TransferIterator{contract: _ERC721.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_ERC721 *ERC721Filterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *ERC721Transfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ERC721.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC721Transfer)
				if err := _ERC721.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_ERC721 *ERC721Filterer) ParseTransfer(log types.Log) (*ERC721Transfer, error) {
	event := new(ERC721Transfer)
	if err := _ERC721.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC721HolderMetaData contains all meta data concerning the ERC721Holder contract.
var ERC721HolderMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50610224806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063150b7a0214610030575b600080fd5b61006761003e3660046100f4565b7f150b7a0200000000000000000000000000000000000000000000000000000000949350505050565b6040517fffffffff00000000000000000000000000000000000000000000000000000000909116815260200160405180910390f35b803573ffffffffffffffffffffffffffffffffffffffff811681146100c057600080fd5b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806000806080858703121561010a57600080fd5b6101138561009c565b93506101216020860161009c565b925060408501359150606085013567ffffffffffffffff8082111561014557600080fd5b818701915087601f83011261015957600080fd5b81358181111561016b5761016b6100c5565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156101b1576101b16100c5565b816040528281528a60208487010111156101ca57600080fd5b8260208601602083013760006020848301015280955050505050509295919450925056fea2646970667358221220febf9175357fa8fed0d2bf7d8387038278340c362b4263a185cc889332e8688064736f6c634300080b0033",
}

// ERC721HolderABI is the input ABI used to generate the binding from.
// Deprecated: Use ERC721HolderMetaData.ABI instead.
var ERC721HolderABI = ERC721HolderMetaData.ABI

// ERC721HolderBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ERC721HolderMetaData.Bin instead.
var ERC721HolderBin = ERC721HolderMetaData.Bin

// DeployERC721Holder deploys a new Ethereum contract, binding an instance of ERC721Holder to it.
func DeployERC721Holder(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ERC721Holder, error) {
	parsed, err := ERC721HolderMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ERC721HolderBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ERC721Holder{ERC721HolderCaller: ERC721HolderCaller{contract: contract}, ERC721HolderTransactor: ERC721HolderTransactor{contract: contract}, ERC721HolderFilterer: ERC721HolderFilterer{contract: contract}}, nil
}

// ERC721Holder is an auto generated Go binding around an Ethereum contract.
type ERC721Holder struct {
	ERC721HolderCaller     // Read-only binding to the contract
	ERC721HolderTransactor // Write-only binding to the contract
	ERC721HolderFilterer   // Log filterer for contract events
}

// ERC721HolderCaller is an auto generated read-only Go binding around an Ethereum contract.
type ERC721HolderCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC721HolderTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ERC721HolderTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC721HolderFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ERC721HolderFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC721HolderSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ERC721HolderSession struct {
	Contract     *ERC721Holder     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ERC721HolderCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ERC721HolderCallerSession struct {
	Contract *ERC721HolderCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// ERC721HolderTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ERC721HolderTransactorSession struct {
	Contract     *ERC721HolderTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// ERC721HolderRaw is an auto generated low-level Go binding around an Ethereum contract.
type ERC721HolderRaw struct {
	Contract *ERC721Holder // Generic contract binding to access the raw methods on
}

// ERC721HolderCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ERC721HolderCallerRaw struct {
	Contract *ERC721HolderCaller // Generic read-only contract binding to access the raw methods on
}

// ERC721HolderTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ERC721HolderTransactorRaw struct {
	Contract *ERC721HolderTransactor // Generic write-only contract binding to access the raw methods on
}

// NewERC721Holder creates a new instance of ERC721Holder, bound to a specific deployed contract.
func NewERC721Holder(address common.Address, backend bind.ContractBackend) (*ERC721Holder, error) {
	contract, err := bindERC721Holder(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ERC721Holder{ERC721HolderCaller: ERC721HolderCaller{contract: contract}, ERC721HolderTransactor: ERC721HolderTransactor{contract: contract}, ERC721HolderFilterer: ERC721HolderFilterer{contract: contract}}, nil
}

// NewERC721HolderCaller creates a new read-only instance of ERC721Holder, bound to a specific deployed contract.
func NewERC721HolderCaller(address common.Address, caller bind.ContractCaller) (*ERC721HolderCaller, error) {
	contract, err := bindERC721Holder(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ERC721HolderCaller{contract: contract}, nil
}

// NewERC721HolderTransactor creates a new write-only instance of ERC721Holder, bound to a specific deployed contract.
func NewERC721HolderTransactor(address common.Address, transactor bind.ContractTransactor) (*ERC721HolderTransactor, error) {
	contract, err := bindERC721Holder(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ERC721HolderTransactor{contract: contract}, nil
}

// NewERC721HolderFilterer creates a new log filterer instance of ERC721Holder, bound to a specific deployed contract.
func NewERC721HolderFilterer(address common.Address, filterer bind.ContractFilterer) (*ERC721HolderFilterer, error) {
	contract, err := bindERC721Holder(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ERC721HolderFilterer{contract: contract}, nil
}

// bindERC721Holder binds a generic wrapper to an already deployed contract.
func bindERC721Holder(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ERC721HolderABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC721Holder *ERC721HolderRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC721Holder.Contract.ERC721HolderCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC721Holder *ERC721HolderRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC721Holder.Contract.ERC721HolderTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC721Holder *ERC721HolderRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC721Holder.Contract.ERC721HolderTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC721Holder *ERC721HolderCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC721Holder.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC721Holder *ERC721HolderTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC721Holder.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC721Holder *ERC721HolderTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC721Holder.Contract.contract.Transact(opts, method, params...)
}

// OnERC721Received is a paid mutator transaction binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address , address , uint256 , bytes ) returns(bytes4)
func (_ERC721Holder *ERC721HolderTransactor) OnERC721Received(opts *bind.TransactOpts, arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 []byte) (*types.Transaction, error) {
	return _ERC721Holder.contract.Transact(opts, "onERC721Received", arg0, arg1, arg2, arg3)
}

// OnERC721Received is a paid mutator transaction binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address , address , uint256 , bytes ) returns(bytes4)
func (_ERC721Holder *ERC721HolderSession) OnERC721Received(arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 []byte) (*types.Transaction, error) {
	return _ERC721Holder.Contract.OnERC721Received(&_ERC721Holder.TransactOpts, arg0, arg1, arg2, arg3)
}

// OnERC721Received is a paid mutator transaction binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address , address , uint256 , bytes ) returns(bytes4)
func (_ERC721Holder *ERC721HolderTransactorSession) OnERC721Received(arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 []byte) (*types.Transaction, error) {
	return _ERC721Holder.Contract.OnERC721Received(&_ERC721Holder.TransactOpts, arg0, arg1, arg2, arg3)
}

// ETHDKGMetaData contains all meta data concerning the ETHDKG contract.
var ETHDKGMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"publicKey\",\"type\":\"uint256[2]\"}],\"name\":\"AddressRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"GPKJSubmissionComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"KeyShareSubmissionComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"keyShareG1\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"keyShareG1CorrectnessProof\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[4]\",\"name\":\"keyShareG2\",\"type\":\"uint256[4]\"}],\"name\":\"KeyShareSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[4]\",\"name\":\"mpk\",\"type\":\"uint256[4]\"}],\"name\":\"MPKSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"RegistrationComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numberValidators\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"phaseLength\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"confirmationLength\",\"type\":\"uint256\"}],\"name\":\"RegistrationOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"ShareDistributionComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"encryptedShares\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[2][]\",\"name\":\"commitments\",\"type\":\"uint256[2][]\"}],\"name\":\"SharesDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share3\",\"type\":\"uint256\"}],\"name\":\"ValidatorMemberAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validatorCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethHeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"madHeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey3\",\"type\":\"uint256\"}],\"name\":\"ValidatorSetCompleted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"dishonestAddresses\",\"type\":\"address[]\"}],\"name\":\"accuseParticipantDidNotDistributeShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"dishonestAddresses\",\"type\":\"address[]\"}],\"name\":\"accuseParticipantDidNotSubmitGPKJ\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"dishonestAddresses\",\"type\":\"address[]\"}],\"name\":\"accuseParticipantDidNotSubmitKeyShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dishonestAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"encryptedShares\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[2][]\",\"name\":\"commitments\",\"type\":\"uint256[2][]\"},{\"internalType\":\"uint256[2]\",\"name\":\"sharedKey\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"sharedKeyCorrectnessProof\",\"type\":\"uint256[2]\"}],\"name\":\"accuseParticipantDistributedBadShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"dishonestAddresses\",\"type\":\"address[]\"}],\"name\":\"accuseParticipantNotRegistered\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"encryptedSharesHash\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[2][][]\",\"name\":\"commitments\",\"type\":\"uint256[2][][]\"},{\"internalType\":\"address\",\"name\":\"dishonestAddress\",\"type\":\"address\"}],\"name\":\"accuseParticipantSubmittedBadGPKJ\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"complete\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"encryptedShares\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[2][]\",\"name\":\"commitments\",\"type\":\"uint256[2][]\"}],\"name\":\"distributeShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBadParticipants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConfirmationLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getETHDKGPhase\",\"outputs\":[{\"internalType\":\"enumPhase\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMasterPublicKey\",\"outputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"\",\"type\":\"uint256[4]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinValidators\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumParticipants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"getParticipantInternalState\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"publicKey\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"enumPhase\",\"name\":\"phase\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"distributedSharesHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[2]\",\"name\":\"commitmentsFirstCoefficient\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"keyShares\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[4]\",\"name\":\"gpkj\",\"type\":\"uint256[4]\"}],\"internalType\":\"structParticipant\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"participantAddresses\",\"type\":\"address[]\"}],\"name\":\"getParticipantsInternalState\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"publicKey\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"enumPhase\",\"name\":\"phase\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"distributedSharesHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[2]\",\"name\":\"commitmentsFirstCoefficient\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"keyShares\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[4]\",\"name\":\"gpkj\",\"type\":\"uint256[4]\"}],\"internalType\":\"structParticipant[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPhaseLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPhaseStartBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validatorPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"snapshots\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ethdkgAccusations\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ethdkgPhases\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeETHDKG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isETHDKGCompleted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isETHDKGHalted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isETHDKGRunning\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMasterPublicKeySet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"publicKey\",\"type\":\"uint256[2]\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"confirmationLength_\",\"type\":\"uint16\"}],\"name\":\"setConfirmationLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"madnetHeight\",\"type\":\"uint256\"}],\"name\":\"setCustomMadnetHeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"minValidators_\",\"type\":\"uint16\"}],\"name\":\"setMinNumberOfValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"phaseLength_\",\"type\":\"uint16\"}],\"name\":\"setPhaseLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"snapshots\",\"type\":\"address\"}],\"name\":\"setSnapshotsAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validatorPool\",\"type\":\"address\"}],\"name\":\"setValidatorPoolAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"gpkj\",\"type\":\"uint256[4]\"}],\"name\":\"submitGPKJ\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"keyShareG1\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"keyShareG1CorrectnessProof\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[4]\",\"name\":\"keyShareG2\",\"type\":\"uint256[4]\"}],\"name\":\"submitKeyShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"masterPublicKey_\",\"type\":\"uint256[4]\"}],\"name\":\"submitMasterPublicKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"tryGetParticipantIndex\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b50604051620038cb380380620038cb83398101604081905262000034916200005a565b600680546001600160a01b0319166001600160a01b03929092169190911790556200008c565b6000602082840312156200006d57600080fd5b81516001600160a01b03811681146200008557600080fd5b9392505050565b61382f806200009c6000396000f3fe608060405234801561001057600080fd5b50600436106102925760003560e01c80638328cdf711610160578063e146372a116100d8578063f8c8765e1161008c578063fd478ca911610071578063fd478ca91461068b578063fe0fe422146106ae578063ff3e5e45146106c157600080fd5b8063f8c8765e146105a3578063fb89c8991461067857600080fd5b8063ecbadb36116100bd578063ecbadb3614610556578063edbe7bf71461057d578063f72c45b61461059057600080fd5b8063e146372a1461052e578063e83232241461054357600080fd5b8063bf7786b61161012f578063d087d28811610114578063d087d288146104f6578063d855280614610508578063dae681bc1461051b57600080fd5b8063bf7786b6146104b6578063c016baee146104d657600080fd5b80638328cdf7146104475780638a3c24cc1461045a5780638c848d321461046d578063a2bc9c781461049857600080fd5b8063522e11771161020e578063704b6c02116101c25780637df24ee9116101a75780637df24ee91461040e578063800012641461042157806380b97e011461043457600080fd5b8063704b6c02146103f3578063747b217c1461040657600080fd5b806362a6523e116101f357806362a6523e1461038e57806365e62b9b146103a15780636e9960c3146103cb57600080fd5b8063522e11771461037e57806357b51c9c1461038657600080fd5b80632958e81c1161026557806332d4d5701161024a57806332d4d5701461033e5780633442af5c1461036357806343ced5341461037657600080fd5b80632958e81c1461030f5780632b7c67241461033657600080fd5b8063043a6f121461029757806308efcf16146102ac578063101f49c1146102c9578063106da57d146102dc575b600080fd5b6102aa6102a5366004612c8d565b6106d4565b005b6102b4610767565b60405190151581526020015b60405180910390f35b6102aa6102d7366004612d38565b610798565b600054790100000000000000000000000000000000000000000000000000900461ffff165b6040519081526020016102c0565b600054700100000000000000000000000000000000900460ff166040516102c09190612dbe565b6102b4610924565b6000547501000000000000000000000000000000000000000000900461ffff16610301565b6102aa610371366004612e17565b61092e565b6102b4610ab5565b6102aa610abf565b6102aa610c1a565b6102aa61039c366004612e33565b610ccb565b6103b46103af366004612e7a565b610e5c565b6040805192151583526020830191909152016102c0565b60075460405173ffffffffffffffffffffffffffffffffffffffff90911681526020016102c0565b6102aa610401366004612e7a565b611064565b6102b4611152565b6102aa61041c366004612c8d565b61115c565b6102aa61042f366004612f79565b6111eb565b6102aa6104423660046130c1565b61137f565b6102aa610455366004613125565b61150d565b6102aa61046836600461313e565b611762565b6000547b01000000000000000000000000000000000000000000000000000000900461ffff16610301565b60005468010000000000000000900467ffffffffffffffff16610301565b6104c96104c4366004612e7a565b611916565b6040516102c0919061322e565b6104e96104e436600461323d565b611aa0565b6040516102c091906132b2565b60005467ffffffffffffffff16610301565b6102aa610516366004612e7a565b611ce5565b6102aa610529366004612c8d565b611dd3565b610536611e62565b6040516102c09190613301565b6102aa610551366004612d38565b611e9d565b60005477010000000000000000000000000000000000000000000000900461ffff16610301565b6102aa61058b36600461330f565b611f2c565b6102aa61059e366004612c8d565b6120c3565b6102aa6105b13660046133a7565b600080547fffffff000000000000000000000000ff00000000000000000000000000000000167b06002800040000000000000000000000000000000000000000000000179055600380547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff968716179091556002805482169486169490941790935560048054841692851692909217909155600580548316919093161790915560078054339216919091179055565b6102aa61068636600461313e565b612152565b60005471010000000000000000000000000000000000900463ffffffff16610301565b6102aa6106bc366004612e7a565b612249565b6102aa6106cf36600461313e565b612337565b610763816040516024016106e89190613441565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f043a6f12000000000000000000000000000000000000000000000000000000001790526124ed565b5050565b60085460009015158061077b575060095415155b806107875750600a5415155b806107935750600b5415155b905090565b6003546040517ffacd743b00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063facd743b90602401602060405180830381865afa158015610806573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082a9190613483565b610895576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f455448444b473a204f6e6c792076616c696461746f727320616c6c6f7765642160448201526064015b60405180910390fd5b610763816040516024016108a99190613301565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f101f49c10000000000000000000000000000000000000000000000000000000017905261257b565b60006107936125ab565b6003546040517ffacd743b00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063facd743b90602401602060405180830381865afa15801561099c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c09190613483565b610a26576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f455448444b473a204f6e6c792076616c696461746f727320616c6c6f77656421604482015260640161088c565b61076381604051602401610a3a91906134a5565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f3442af5c0000000000000000000000000000000000000000000000000000000017905261257b565b60006107936125e0565b6003546040517ffacd743b00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063facd743b90602401602060405180830381865afa158015610b2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b519190613483565b610bb7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f455448444b473a204f6e6c792076616c696461746f727320616c6c6f77656421604482015260640161088c565b6040805160048152602481019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f522e117700000000000000000000000000000000000000000000000000000000179052610c179061257b565b50565b60035473ffffffffffffffffffffffffffffffffffffffff163314610cc1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f455448444b473a204f6e6c792076616c696461746f72506f6f6c20636f6e747260448201527f61637420616c6c6f776564210000000000000000000000000000000000000000606482015260840161088c565b610cc9612743565b565b6003546040517ffacd743b00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063facd743b90602401602060405180830381865afa158015610d39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5d9190613483565b610dc3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f455448444b473a204f6e6c792076616c696461746f727320616c6c6f77656421604482015260640161088c565b610e56838383604051602401610ddb939291906134b3565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f62a6523e0000000000000000000000000000000000000000000000000000000017905261257b565b50505050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600e602052604080822081516101408101909252829182918161010081018260028282826020028201915b815481526020019060010190808311610ea3575050509183525050600282015467ffffffffffffffff8082166020840152680100000000000000008204166040830152606090910190700100000000000000000000000000000000900460ff166007811115610f1457610f14612d54565b6007811115610f2557610f25612d54565b8152600382015460208201526040805180820182529101906004830160028282826020028201915b815481526020019060010190808311610f4d575050509183525050604080518082019182905260209092019190600684019060029082845b815481526020019060010190808311610f8557505050918352505060408051608081019182905260209092019190600884019060049082845b815481526020019060010190808311610fbe57505050505081525050905060008054906101000a900467ffffffffffffffff1667ffffffffffffffff16816020015167ffffffffffffffff1614156110585750505073ffffffffffffffffffffffffffffffffffffffff166000908152600e60205260409020600201546001916801000000000000000090910467ffffffffffffffff1690565b50600093849350915050565b60075473ffffffffffffffffffffffffffffffffffffffff16331461110b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f455448444b473a2072657175697265732061646d696e2070726976696c65676560448201527f7300000000000000000000000000000000000000000000000000000000000000606482015260840161088c565b600780547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6000610793612a23565b610763816040516024016111709190613441565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f7df24ee9000000000000000000000000000000000000000000000000000000001790526124ed565b6003546040517ffacd743b00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063facd743b90602401602060405180830381865afa158015611259573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061127d9190613483565b6112e3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f455448444b473a204f6e6c792076616c696461746f727320616c6c6f77656421604482015260640161088c565b611378848484846040516024016112fd9493929190613516565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f80001264000000000000000000000000000000000000000000000000000000001790526124ed565b5050505050565b6003546040517ffacd743b00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063facd743b90602401602060405180830381865afa1580156113ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114119190613483565b611477576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f455448444b473a204f6e6c792076616c696461746f727320616c6c6f77656421604482015260640161088c565b611508828260405160240161148d929190613632565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f80b97e010000000000000000000000000000000000000000000000000000000017905261257b565b505050565b60035473ffffffffffffffffffffffffffffffffffffffff1633146115b4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f455448444b473a204f6e6c792076616c696461746f72506f6f6c20636f6e747260448201527f61637420616c6c6f776564210000000000000000000000000000000000000000606482015260840161088c565b600181905560008054600254604080517f757991a800000000000000000000000000000000000000000000000000000000815290517fd7237b781669fa700ecf77be6cd8fa0f4b98b1a24ac584a9b6b44c509216718a949367ffffffffffffffff169273ffffffffffffffffffffffffffffffffffffffff169163757991a89160048083019260209291908290030181865afa158015611658573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061167c9190613657565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663026c2b7e6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061170d9190613657565b6040805194855267ffffffffffffffff909316602085015291830152606082015260808101839052600060a0820181905260c0820181905260e08201819052610100820152610120015b60405180910390a150565b60075473ffffffffffffffffffffffffffffffffffffffff163314611809576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f455448444b473a2072657175697265732061646d696e2070726976696c65676560448201527f7300000000000000000000000000000000000000000000000000000000000000606482015260840161088c565b611811612a23565b156118c4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604260248201527f455448444b473a2054686973207661726961626c652063616e6e6f742062652060448201527f73657420696620616e20455448444b4720726f756e642069732072756e6e696e60648201527f6721000000000000000000000000000000000000000000000000000000000000608482015260a40161088c565b6000805461ffff909216790100000000000000000000000000000000000000000000000000027fffffffffff0000ffffffffffffffffffffffffffffffffffffffffffffffffff909216919091179055565b61191e612a65565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600e602052604090819020815161014081019092528161010081018260028282826020028201915b815481526020019060010190808311611962575050509183525050600282015467ffffffffffffffff8082166020840152680100000000000000008204166040830152606090910190700100000000000000000000000000000000900460ff1660078111156119d3576119d3612d54565b60078111156119e4576119e4612d54565b8152600382015460208201526040805180820182529101906004830160028282826020028201915b815481526020019060010190808311611a0c575050509183525050604080518082019182905260209092019190600684019060029082845b815481526020019060010190808311611a4457505050918352505060408051608081019182905260209092019190600884019060049082845b815481526020019060010190808311611a7d575050505050815250509050919050565b606060008267ffffffffffffffff811115611abd57611abd612b50565b604051908082528060200260200182016040528015611af657816020015b611ae3612a65565b815260200190600190039081611adb5790505b50905060005b83811015611cdb57600e6000868684818110611b1a57611b1a613454565b9050602002016020810190611b2f9190612e7a565b73ffffffffffffffffffffffffffffffffffffffff16815260208101919091526040908101600020815161014081019092528161010081018260028282826020028201915b815481526020019060010190808311611b74575050509183525050600282015467ffffffffffffffff8082166020840152680100000000000000008204166040830152606090910190700100000000000000000000000000000000900460ff166007811115611be557611be5612d54565b6007811115611bf657611bf6612d54565b8152600382015460208201526040805180820182529101906004830160028282826020028201915b815481526020019060010190808311611c1e575050509183525050604080518082019182905260209092019190600684019060029082845b815481526020019060010190808311611c5657505050918352505060408051608081019182905260209092019190600884019060049082845b815481526020019060010190808311611c8f57505050505081525050828281518110611cbd57611cbd613454565b60200260200101819052508080611cd39061369f565b915050611afc565b5090505b92915050565b60075473ffffffffffffffffffffffffffffffffffffffff163314611d8c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f455448444b473a2072657175697265732061646d696e2070726976696c65676560448201527f7300000000000000000000000000000000000000000000000000000000000000606482015260840161088c565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b61076381604051602401611de79190613441565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fdae681bc000000000000000000000000000000000000000000000000000000001790526124ed565b611e6a612ac1565b6040805160808101918290529060089060049082845b815481526020019060010190808311611e80575050505050905090565b61076381604051602401611eb19190613301565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fe83232240000000000000000000000000000000000000000000000000000000017905261257b565b6003546040517ffacd743b00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063facd743b90602401602060405180830381865afa158015611f9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fbe9190613483565b612024576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f455448444b473a204f6e6c792076616c696461746f727320616c6c6f77656421604482015260640161088c565b6120bb85858585856040516024016120409594939291906136d8565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fedbe7bf7000000000000000000000000000000000000000000000000000000001790526124ed565b505050505050565b610763816040516024016120d79190613441565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167ff72c45b6000000000000000000000000000000000000000000000000000000001790526124ed565b60075473ffffffffffffffffffffffffffffffffffffffff1633146121f9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f455448444b473a2072657175697265732061646d696e2070726976696c65676560448201527f7300000000000000000000000000000000000000000000000000000000000000606482015260840161088c565b6000805461ffff90921677010000000000000000000000000000000000000000000000027fffffffffffffff0000ffffffffffffffffffffffffffffffffffffffffffffff909216919091179055565b60075473ffffffffffffffffffffffffffffffffffffffff1633146122f0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f455448444b473a2072657175697265732061646d696e2070726976696c65676560448201527f7300000000000000000000000000000000000000000000000000000000000000606482015260840161088c565b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60075473ffffffffffffffffffffffffffffffffffffffff1633146123de576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f455448444b473a2072657175697265732061646d696e2070726976696c65676560448201527f7300000000000000000000000000000000000000000000000000000000000000606482015260840161088c565b6123e6612a23565b15612499576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604260248201527f455448444b473a2054686973207661726961626c652063616e6e6f742062652060448201527f73657420696620616e20455448444b4720726f756e642069732072756e6e696e60648201527f6721000000000000000000000000000000000000000000000000000000000000608482015260a40161088c565b6000805461ffff9092167b01000000000000000000000000000000000000000000000000000000027fffffff0000ffffffffffffffffffffffffffffffffffffffffffffffffffffff909216919091179055565b600454604051606091600091829173ffffffffffffffffffffffffffffffffffffffff169061251d908690613740565b600060405180830381855af49150503d8060008114612558576040519150601f19603f3d011682016040523d82523d6000602084013e61255d565b606091505b509150915081612574576040513d806000833e8082fd5b9392505050565b600554604051606091600091829173ffffffffffffffffffffffffffffffffffffffff169061251d908690613740565b60006007600054700100000000000000000000000000000000900460ff1660078111156125da576125da612d54565b14905090565b6000806002600054700100000000000000000000000000000000900460ff16600781111561261057612610612d54565b148061264657506006600054700100000000000000000000000000000000900460ff16600781111561264457612644612d54565b145b801561269f575060005461269190790100000000000000000000000000000000000000000000000000810461ffff169068010000000000000000900467ffffffffffffffff1661377b565b67ffffffffffffffff164310155b80156126c957506000547501000000000000000000000000000000000000000000900461ffff1615155b60008054919250906126fd90790100000000000000000000000000000000000000000000000000900461ffff1660026137a7565b6000546127249161ffff169068010000000000000000900467ffffffffffffffff1661377b565b67ffffffffffffffff164310159050808061273c5750815b9250505090565b600354604080517f27498240000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163274982409160048083019260209291908290030181865afa1580156127b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127d79190613657565b60005490915077010000000000000000000000000000000000000000000000900461ffff1681101561288b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603460248201527f455448444b473a204d696e696d756d206e756d626572206f662076616c69646160448201527f746f7273207374616b6564206e6f74206d657421000000000000000000000000606482015260840161088c565b6000805467ffffffffffffffff43811668010000000000000000027fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff831681178455811691161790806128dd836137d1565b825467ffffffffffffffff9182166101009390930a928302919092021990911617905550600080547fffffffffffffffffff000000000000ffffffffffffffffffffffffffffffffff16815560408051808201909152818152602081019190915261294c90600c906002612adf565b50600080547fffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffff811680835560088390556009839055600a839055600b92909255604080514381526020810185905267ffffffffffffffff9092169082015261ffff7901000000000000000000000000000000000000000000000000008304811660608301527b0100000000000000000000000000000000000000000000000000000090920490911660808201527fbda431b9b63510f1398bf33d700e013315bcba905507078a1780f13ea5b354b99060a001611757565b6000805468010000000000000000900467ffffffffffffffff16612a475750600090565b612a4f6125ab565b1580156107935750612a5f6125e0565b15905090565b604051806101000160405280612a79612b1d565b81526000602082018190526040820181905260608201819052608082015260a001612aa2612b1d565b8152602001612aaf612b1d565b8152602001612abc612ac1565b905290565b60405180608001604052806004906020820280368337509192915050565b8260028101928215612b0d579160200282015b82811115612b0d578251825591602001919060010190612af2565b50612b19929150612b3b565b5090565b60405180604001604052806002906020820280368337509192915050565b5b80821115612b195760008155600101612b3c565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715612bc657612bc6612b50565b604052919050565b600067ffffffffffffffff821115612be857612be8612b50565b5060051b60200190565b803573ffffffffffffffffffffffffffffffffffffffff81168114612c1657600080fd5b919050565b600082601f830112612c2c57600080fd5b81356020612c41612c3c83612bce565b612b7f565b82815260059290921b84018101918181019086841115612c6057600080fd5b8286015b84811015612c8257612c7581612bf2565b8352918301918301612c64565b509695505050505050565b600060208284031215612c9f57600080fd5b813567ffffffffffffffff811115612cb657600080fd5b612cc284828501612c1b565b949350505050565b600082601f830112612cdb57600080fd5b6040516080810181811067ffffffffffffffff82111715612cfe57612cfe612b50565b604052806080840185811115612d1357600080fd5b845b81811015612d2d578035835260209283019201612d15565b509195945050505050565b600060808284031215612d4a57600080fd5b6125748383612cca565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60088110612dba577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9052565b60208101611cdf8284612d83565b600082601f830112612ddd57600080fd5b6040516040810181811067ffffffffffffffff82111715612e0057612e00612b50565b8060405250806040840185811115612d1357600080fd5b600060408284031215612e2957600080fd5b6125748383612dcc565b60008060006101008486031215612e4957600080fd5b612e538585612dcc565b9250612e628560408601612dcc565b9150612e718560808601612cca565b90509250925092565b600060208284031215612e8c57600080fd5b61257482612bf2565b600082601f830112612ea657600080fd5b81356020612eb6612c3c83612bce565b82815260069290921b84018101918181019086841115612ed557600080fd5b8286015b84811015612c8257612eeb8882612dcc565b835291830191604001612ed9565b600082601f830112612f0a57600080fd5b81356020612f1a612c3c83612bce565b82815260059290921b84018101918181019086841115612f3957600080fd5b8286015b84811015612c8257803567ffffffffffffffff811115612f5d5760008081fd5b612f6b8986838b0101612e95565b845250918301918301612f3d565b60008060008060808587031215612f8f57600080fd5b843567ffffffffffffffff80821115612fa757600080fd5b612fb388838901612c1b565b9550602091508187013581811115612fca57600080fd5b8701601f81018913612fdb57600080fd5b8035612fe9612c3c82612bce565b81815260059190911b8201840190848101908b83111561300857600080fd5b928501925b828410156130265783358252928501929085019061300d565b9750505050604087013591508082111561303f57600080fd5b5061304c87828801612ef9565b92505061305b60608601612bf2565b905092959194509250565b600082601f83011261307757600080fd5b81356020613087612c3c83612bce565b82815260059290921b840181019181810190868411156130a657600080fd5b8286015b84811015612c8257803583529183019183016130aa565b600080604083850312156130d457600080fd5b823567ffffffffffffffff808211156130ec57600080fd5b6130f886838701613066565b9350602085013591508082111561310e57600080fd5b5061311b85828601612e95565b9150509250929050565b60006020828403121561313757600080fd5b5035919050565b60006020828403121561315057600080fd5b813561ffff8116811461257457600080fd5b8060005b6002811015610e56578151845260209384019390910190600101613166565b8060005b6004811015610e56578151845260209384019390910190600101613189565b6131b3828251613162565b602081015167ffffffffffffffff8082166040850152806040840151166060850152505060608101516131e96080840182612d83565b50608081015160a083015260a081015161320660c0840182613162565b5060c081015161321a610100840182613162565b5060e0810151611508610140840182613185565b6101c08101611cdf82846131a8565b6000806020838503121561325057600080fd5b823567ffffffffffffffff8082111561326857600080fd5b818501915085601f83011261327c57600080fd5b81358181111561328b57600080fd5b8660208260051b85010111156132a057600080fd5b60209290920196919550909350505050565b6020808252825182820181905260009190848201906040850190845b818110156132f5576132e18385516131a8565b928401926101c092909201916001016132ce565b50909695505050505050565b60808101611cdf8284613185565b600080600080600060e0868803121561332757600080fd5b61333086612bf2565b9450602086013567ffffffffffffffff8082111561334d57600080fd5b61335989838a01613066565b9550604088013591508082111561336f57600080fd5b5061337c88828901612e95565b93505061338c8760608801612dcc565b915061339b8760a08801612dcc565b90509295509295909350565b600080600080608085870312156133bd57600080fd5b6133c685612bf2565b93506133d460208601612bf2565b92506133e260408601612bf2565b915061305b60608601612bf2565b600081518084526020808501945080840160005b8381101561343657815173ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101613404565b509495945050505050565b60208152600061257460208301846133f0565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020828403121561349557600080fd5b8151801515811461257457600080fd5b60408101611cdf8284613162565b61010081016134c28286613162565b6134cf6040830185613162565b612cc26080830184613185565b600081518084526020808501945080840160005b8381101561343657613503878351613162565b60409690960195908201906001016134f0565b60808152600061352960808301876133f0565b82810360208481019190915286518083528782019282019060005b8181101561356057845183529383019391830191600101613544565b5050848103604086015286518082528282019350600581901b8201830183890160005b838110156135cf577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08584030187526135bd8383516134dc565b96860196925090850190600101613583565b505073ffffffffffffffffffffffffffffffffffffffff8816606088015294506135f99350505050565b95945050505050565b600081518084526020808501945080840160005b8381101561343657815187529582019590820190600101613616565b6040815260006136456040830185613602565b82810360208401526135f981856134dc565b60006020828403121561366957600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156136d1576136d1613670565b5060010190565b73ffffffffffffffffffffffffffffffffffffffff8616815260e06020820152600061370760e0830187613602565b828103604084015261371981876134dc565b9150506137296060830185613162565b61373660a0830184613162565b9695505050505050565b6000825160005b818110156137615760208186018101518583015201613747565b81811115613770576000828501525b509190910192915050565b600067ffffffffffffffff80831681851680830382111561379e5761379e613670565b01949350505050565b600061ffff808316818516818304811182151516156137c8576137c8613670565b02949350505050565b600067ffffffffffffffff808316818114156137ef576137ef613670565b600101939250505056fea2646970667358221220947c3146d88e442baf34e24751db54bf51ebfbe73f09def61b72d515d6d3de1b64736f6c634300080b0033",
}

// ETHDKGABI is the input ABI used to generate the binding from.
// Deprecated: Use ETHDKGMetaData.ABI instead.
var ETHDKGABI = ETHDKGMetaData.ABI

// ETHDKGBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ETHDKGMetaData.Bin instead.
var ETHDKGBin = ETHDKGMetaData.Bin

// DeployETHDKG deploys a new Ethereum contract, binding an instance of ETHDKG to it.
func DeployETHDKG(auth *bind.TransactOpts, backend bind.ContractBackend, factory_ common.Address) (common.Address, *types.Transaction, *ETHDKG, error) {
	parsed, err := ETHDKGMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ETHDKGBin), backend, factory_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ETHDKG{ETHDKGCaller: ETHDKGCaller{contract: contract}, ETHDKGTransactor: ETHDKGTransactor{contract: contract}, ETHDKGFilterer: ETHDKGFilterer{contract: contract}}, nil
}

// ETHDKG is an auto generated Go binding around an Ethereum contract.
type ETHDKG struct {
	ETHDKGCaller     // Read-only binding to the contract
	ETHDKGTransactor // Write-only binding to the contract
	ETHDKGFilterer   // Log filterer for contract events
}

// ETHDKGCaller is an auto generated read-only Go binding around an Ethereum contract.
type ETHDKGCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETHDKGTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ETHDKGTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETHDKGFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ETHDKGFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETHDKGSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ETHDKGSession struct {
	Contract     *ETHDKG           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ETHDKGCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ETHDKGCallerSession struct {
	Contract *ETHDKGCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// ETHDKGTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ETHDKGTransactorSession struct {
	Contract     *ETHDKGTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ETHDKGRaw is an auto generated low-level Go binding around an Ethereum contract.
type ETHDKGRaw struct {
	Contract *ETHDKG // Generic contract binding to access the raw methods on
}

// ETHDKGCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ETHDKGCallerRaw struct {
	Contract *ETHDKGCaller // Generic read-only contract binding to access the raw methods on
}

// ETHDKGTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ETHDKGTransactorRaw struct {
	Contract *ETHDKGTransactor // Generic write-only contract binding to access the raw methods on
}

// NewETHDKG creates a new instance of ETHDKG, bound to a specific deployed contract.
func NewETHDKG(address common.Address, backend bind.ContractBackend) (*ETHDKG, error) {
	contract, err := bindETHDKG(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ETHDKG{ETHDKGCaller: ETHDKGCaller{contract: contract}, ETHDKGTransactor: ETHDKGTransactor{contract: contract}, ETHDKGFilterer: ETHDKGFilterer{contract: contract}}, nil
}

// NewETHDKGCaller creates a new read-only instance of ETHDKG, bound to a specific deployed contract.
func NewETHDKGCaller(address common.Address, caller bind.ContractCaller) (*ETHDKGCaller, error) {
	contract, err := bindETHDKG(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ETHDKGCaller{contract: contract}, nil
}

// NewETHDKGTransactor creates a new write-only instance of ETHDKG, bound to a specific deployed contract.
func NewETHDKGTransactor(address common.Address, transactor bind.ContractTransactor) (*ETHDKGTransactor, error) {
	contract, err := bindETHDKG(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ETHDKGTransactor{contract: contract}, nil
}

// NewETHDKGFilterer creates a new log filterer instance of ETHDKG, bound to a specific deployed contract.
func NewETHDKGFilterer(address common.Address, filterer bind.ContractFilterer) (*ETHDKGFilterer, error) {
	contract, err := bindETHDKG(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ETHDKGFilterer{contract: contract}, nil
}

// bindETHDKG binds a generic wrapper to an already deployed contract.
func bindETHDKG(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ETHDKGABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ETHDKG *ETHDKGRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ETHDKG.Contract.ETHDKGCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ETHDKG *ETHDKGRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETHDKG.Contract.ETHDKGTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ETHDKG *ETHDKGRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ETHDKG.Contract.ETHDKGTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ETHDKG *ETHDKGCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ETHDKG.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ETHDKG *ETHDKGTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETHDKG.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ETHDKG *ETHDKGTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ETHDKG.Contract.contract.Transact(opts, method, params...)
}

// GetAdmin is a free data retrieval call binding the contract method 0x6e9960c3.
//
// Solidity: function getAdmin() view returns(address)
func (_ETHDKG *ETHDKGCaller) GetAdmin(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "getAdmin")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetAdmin is a free data retrieval call binding the contract method 0x6e9960c3.
//
// Solidity: function getAdmin() view returns(address)
func (_ETHDKG *ETHDKGSession) GetAdmin() (common.Address, error) {
	return _ETHDKG.Contract.GetAdmin(&_ETHDKG.CallOpts)
}

// GetAdmin is a free data retrieval call binding the contract method 0x6e9960c3.
//
// Solidity: function getAdmin() view returns(address)
func (_ETHDKG *ETHDKGCallerSession) GetAdmin() (common.Address, error) {
	return _ETHDKG.Contract.GetAdmin(&_ETHDKG.CallOpts)
}

// GetBadParticipants is a free data retrieval call binding the contract method 0x32d4d570.
//
// Solidity: function getBadParticipants() view returns(uint256)
func (_ETHDKG *ETHDKGCaller) GetBadParticipants(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "getBadParticipants")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetBadParticipants is a free data retrieval call binding the contract method 0x32d4d570.
//
// Solidity: function getBadParticipants() view returns(uint256)
func (_ETHDKG *ETHDKGSession) GetBadParticipants() (*big.Int, error) {
	return _ETHDKG.Contract.GetBadParticipants(&_ETHDKG.CallOpts)
}

// GetBadParticipants is a free data retrieval call binding the contract method 0x32d4d570.
//
// Solidity: function getBadParticipants() view returns(uint256)
func (_ETHDKG *ETHDKGCallerSession) GetBadParticipants() (*big.Int, error) {
	return _ETHDKG.Contract.GetBadParticipants(&_ETHDKG.CallOpts)
}

// GetConfirmationLength is a free data retrieval call binding the contract method 0x8c848d32.
//
// Solidity: function getConfirmationLength() view returns(uint256)
func (_ETHDKG *ETHDKGCaller) GetConfirmationLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "getConfirmationLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetConfirmationLength is a free data retrieval call binding the contract method 0x8c848d32.
//
// Solidity: function getConfirmationLength() view returns(uint256)
func (_ETHDKG *ETHDKGSession) GetConfirmationLength() (*big.Int, error) {
	return _ETHDKG.Contract.GetConfirmationLength(&_ETHDKG.CallOpts)
}

// GetConfirmationLength is a free data retrieval call binding the contract method 0x8c848d32.
//
// Solidity: function getConfirmationLength() view returns(uint256)
func (_ETHDKG *ETHDKGCallerSession) GetConfirmationLength() (*big.Int, error) {
	return _ETHDKG.Contract.GetConfirmationLength(&_ETHDKG.CallOpts)
}

// GetETHDKGPhase is a free data retrieval call binding the contract method 0x2958e81c.
//
// Solidity: function getETHDKGPhase() view returns(uint8)
func (_ETHDKG *ETHDKGCaller) GetETHDKGPhase(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "getETHDKGPhase")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetETHDKGPhase is a free data retrieval call binding the contract method 0x2958e81c.
//
// Solidity: function getETHDKGPhase() view returns(uint8)
func (_ETHDKG *ETHDKGSession) GetETHDKGPhase() (uint8, error) {
	return _ETHDKG.Contract.GetETHDKGPhase(&_ETHDKG.CallOpts)
}

// GetETHDKGPhase is a free data retrieval call binding the contract method 0x2958e81c.
//
// Solidity: function getETHDKGPhase() view returns(uint8)
func (_ETHDKG *ETHDKGCallerSession) GetETHDKGPhase() (uint8, error) {
	return _ETHDKG.Contract.GetETHDKGPhase(&_ETHDKG.CallOpts)
}

// GetMasterPublicKey is a free data retrieval call binding the contract method 0xe146372a.
//
// Solidity: function getMasterPublicKey() view returns(uint256[4])
func (_ETHDKG *ETHDKGCaller) GetMasterPublicKey(opts *bind.CallOpts) ([4]*big.Int, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "getMasterPublicKey")

	if err != nil {
		return *new([4]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([4]*big.Int)).(*[4]*big.Int)

	return out0, err

}

// GetMasterPublicKey is a free data retrieval call binding the contract method 0xe146372a.
//
// Solidity: function getMasterPublicKey() view returns(uint256[4])
func (_ETHDKG *ETHDKGSession) GetMasterPublicKey() ([4]*big.Int, error) {
	return _ETHDKG.Contract.GetMasterPublicKey(&_ETHDKG.CallOpts)
}

// GetMasterPublicKey is a free data retrieval call binding the contract method 0xe146372a.
//
// Solidity: function getMasterPublicKey() view returns(uint256[4])
func (_ETHDKG *ETHDKGCallerSession) GetMasterPublicKey() ([4]*big.Int, error) {
	return _ETHDKG.Contract.GetMasterPublicKey(&_ETHDKG.CallOpts)
}

// GetMinValidators is a free data retrieval call binding the contract method 0xecbadb36.
//
// Solidity: function getMinValidators() view returns(uint256)
func (_ETHDKG *ETHDKGCaller) GetMinValidators(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "getMinValidators")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMinValidators is a free data retrieval call binding the contract method 0xecbadb36.
//
// Solidity: function getMinValidators() view returns(uint256)
func (_ETHDKG *ETHDKGSession) GetMinValidators() (*big.Int, error) {
	return _ETHDKG.Contract.GetMinValidators(&_ETHDKG.CallOpts)
}

// GetMinValidators is a free data retrieval call binding the contract method 0xecbadb36.
//
// Solidity: function getMinValidators() view returns(uint256)
func (_ETHDKG *ETHDKGCallerSession) GetMinValidators() (*big.Int, error) {
	return _ETHDKG.Contract.GetMinValidators(&_ETHDKG.CallOpts)
}

// GetNonce is a free data retrieval call binding the contract method 0xd087d288.
//
// Solidity: function getNonce() view returns(uint256)
func (_ETHDKG *ETHDKGCaller) GetNonce(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "getNonce")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetNonce is a free data retrieval call binding the contract method 0xd087d288.
//
// Solidity: function getNonce() view returns(uint256)
func (_ETHDKG *ETHDKGSession) GetNonce() (*big.Int, error) {
	return _ETHDKG.Contract.GetNonce(&_ETHDKG.CallOpts)
}

// GetNonce is a free data retrieval call binding the contract method 0xd087d288.
//
// Solidity: function getNonce() view returns(uint256)
func (_ETHDKG *ETHDKGCallerSession) GetNonce() (*big.Int, error) {
	return _ETHDKG.Contract.GetNonce(&_ETHDKG.CallOpts)
}

// GetNumParticipants is a free data retrieval call binding the contract method 0xfd478ca9.
//
// Solidity: function getNumParticipants() view returns(uint256)
func (_ETHDKG *ETHDKGCaller) GetNumParticipants(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "getNumParticipants")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetNumParticipants is a free data retrieval call binding the contract method 0xfd478ca9.
//
// Solidity: function getNumParticipants() view returns(uint256)
func (_ETHDKG *ETHDKGSession) GetNumParticipants() (*big.Int, error) {
	return _ETHDKG.Contract.GetNumParticipants(&_ETHDKG.CallOpts)
}

// GetNumParticipants is a free data retrieval call binding the contract method 0xfd478ca9.
//
// Solidity: function getNumParticipants() view returns(uint256)
func (_ETHDKG *ETHDKGCallerSession) GetNumParticipants() (*big.Int, error) {
	return _ETHDKG.Contract.GetNumParticipants(&_ETHDKG.CallOpts)
}

// GetParticipantInternalState is a free data retrieval call binding the contract method 0xbf7786b6.
//
// Solidity: function getParticipantInternalState(address participant) view returns((uint256[2],uint64,uint64,uint8,bytes32,uint256[2],uint256[2],uint256[4]))
func (_ETHDKG *ETHDKGCaller) GetParticipantInternalState(opts *bind.CallOpts, participant common.Address) (Participant, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "getParticipantInternalState", participant)

	if err != nil {
		return *new(Participant), err
	}

	out0 := *abi.ConvertType(out[0], new(Participant)).(*Participant)

	return out0, err

}

// GetParticipantInternalState is a free data retrieval call binding the contract method 0xbf7786b6.
//
// Solidity: function getParticipantInternalState(address participant) view returns((uint256[2],uint64,uint64,uint8,bytes32,uint256[2],uint256[2],uint256[4]))
func (_ETHDKG *ETHDKGSession) GetParticipantInternalState(participant common.Address) (Participant, error) {
	return _ETHDKG.Contract.GetParticipantInternalState(&_ETHDKG.CallOpts, participant)
}

// GetParticipantInternalState is a free data retrieval call binding the contract method 0xbf7786b6.
//
// Solidity: function getParticipantInternalState(address participant) view returns((uint256[2],uint64,uint64,uint8,bytes32,uint256[2],uint256[2],uint256[4]))
func (_ETHDKG *ETHDKGCallerSession) GetParticipantInternalState(participant common.Address) (Participant, error) {
	return _ETHDKG.Contract.GetParticipantInternalState(&_ETHDKG.CallOpts, participant)
}

// GetParticipantsInternalState is a free data retrieval call binding the contract method 0xc016baee.
//
// Solidity: function getParticipantsInternalState(address[] participantAddresses) view returns((uint256[2],uint64,uint64,uint8,bytes32,uint256[2],uint256[2],uint256[4])[])
func (_ETHDKG *ETHDKGCaller) GetParticipantsInternalState(opts *bind.CallOpts, participantAddresses []common.Address) ([]Participant, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "getParticipantsInternalState", participantAddresses)

	if err != nil {
		return *new([]Participant), err
	}

	out0 := *abi.ConvertType(out[0], new([]Participant)).(*[]Participant)

	return out0, err

}

// GetParticipantsInternalState is a free data retrieval call binding the contract method 0xc016baee.
//
// Solidity: function getParticipantsInternalState(address[] participantAddresses) view returns((uint256[2],uint64,uint64,uint8,bytes32,uint256[2],uint256[2],uint256[4])[])
func (_ETHDKG *ETHDKGSession) GetParticipantsInternalState(participantAddresses []common.Address) ([]Participant, error) {
	return _ETHDKG.Contract.GetParticipantsInternalState(&_ETHDKG.CallOpts, participantAddresses)
}

// GetParticipantsInternalState is a free data retrieval call binding the contract method 0xc016baee.
//
// Solidity: function getParticipantsInternalState(address[] participantAddresses) view returns((uint256[2],uint64,uint64,uint8,bytes32,uint256[2],uint256[2],uint256[4])[])
func (_ETHDKG *ETHDKGCallerSession) GetParticipantsInternalState(participantAddresses []common.Address) ([]Participant, error) {
	return _ETHDKG.Contract.GetParticipantsInternalState(&_ETHDKG.CallOpts, participantAddresses)
}

// GetPhaseLength is a free data retrieval call binding the contract method 0x106da57d.
//
// Solidity: function getPhaseLength() view returns(uint256)
func (_ETHDKG *ETHDKGCaller) GetPhaseLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "getPhaseLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPhaseLength is a free data retrieval call binding the contract method 0x106da57d.
//
// Solidity: function getPhaseLength() view returns(uint256)
func (_ETHDKG *ETHDKGSession) GetPhaseLength() (*big.Int, error) {
	return _ETHDKG.Contract.GetPhaseLength(&_ETHDKG.CallOpts)
}

// GetPhaseLength is a free data retrieval call binding the contract method 0x106da57d.
//
// Solidity: function getPhaseLength() view returns(uint256)
func (_ETHDKG *ETHDKGCallerSession) GetPhaseLength() (*big.Int, error) {
	return _ETHDKG.Contract.GetPhaseLength(&_ETHDKG.CallOpts)
}

// GetPhaseStartBlock is a free data retrieval call binding the contract method 0xa2bc9c78.
//
// Solidity: function getPhaseStartBlock() view returns(uint256)
func (_ETHDKG *ETHDKGCaller) GetPhaseStartBlock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "getPhaseStartBlock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPhaseStartBlock is a free data retrieval call binding the contract method 0xa2bc9c78.
//
// Solidity: function getPhaseStartBlock() view returns(uint256)
func (_ETHDKG *ETHDKGSession) GetPhaseStartBlock() (*big.Int, error) {
	return _ETHDKG.Contract.GetPhaseStartBlock(&_ETHDKG.CallOpts)
}

// GetPhaseStartBlock is a free data retrieval call binding the contract method 0xa2bc9c78.
//
// Solidity: function getPhaseStartBlock() view returns(uint256)
func (_ETHDKG *ETHDKGCallerSession) GetPhaseStartBlock() (*big.Int, error) {
	return _ETHDKG.Contract.GetPhaseStartBlock(&_ETHDKG.CallOpts)
}

// IsETHDKGCompleted is a free data retrieval call binding the contract method 0x2b7c6724.
//
// Solidity: function isETHDKGCompleted() view returns(bool)
func (_ETHDKG *ETHDKGCaller) IsETHDKGCompleted(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "isETHDKGCompleted")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsETHDKGCompleted is a free data retrieval call binding the contract method 0x2b7c6724.
//
// Solidity: function isETHDKGCompleted() view returns(bool)
func (_ETHDKG *ETHDKGSession) IsETHDKGCompleted() (bool, error) {
	return _ETHDKG.Contract.IsETHDKGCompleted(&_ETHDKG.CallOpts)
}

// IsETHDKGCompleted is a free data retrieval call binding the contract method 0x2b7c6724.
//
// Solidity: function isETHDKGCompleted() view returns(bool)
func (_ETHDKG *ETHDKGCallerSession) IsETHDKGCompleted() (bool, error) {
	return _ETHDKG.Contract.IsETHDKGCompleted(&_ETHDKG.CallOpts)
}

// IsETHDKGHalted is a free data retrieval call binding the contract method 0x43ced534.
//
// Solidity: function isETHDKGHalted() view returns(bool)
func (_ETHDKG *ETHDKGCaller) IsETHDKGHalted(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "isETHDKGHalted")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsETHDKGHalted is a free data retrieval call binding the contract method 0x43ced534.
//
// Solidity: function isETHDKGHalted() view returns(bool)
func (_ETHDKG *ETHDKGSession) IsETHDKGHalted() (bool, error) {
	return _ETHDKG.Contract.IsETHDKGHalted(&_ETHDKG.CallOpts)
}

// IsETHDKGHalted is a free data retrieval call binding the contract method 0x43ced534.
//
// Solidity: function isETHDKGHalted() view returns(bool)
func (_ETHDKG *ETHDKGCallerSession) IsETHDKGHalted() (bool, error) {
	return _ETHDKG.Contract.IsETHDKGHalted(&_ETHDKG.CallOpts)
}

// IsETHDKGRunning is a free data retrieval call binding the contract method 0x747b217c.
//
// Solidity: function isETHDKGRunning() view returns(bool)
func (_ETHDKG *ETHDKGCaller) IsETHDKGRunning(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "isETHDKGRunning")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsETHDKGRunning is a free data retrieval call binding the contract method 0x747b217c.
//
// Solidity: function isETHDKGRunning() view returns(bool)
func (_ETHDKG *ETHDKGSession) IsETHDKGRunning() (bool, error) {
	return _ETHDKG.Contract.IsETHDKGRunning(&_ETHDKG.CallOpts)
}

// IsETHDKGRunning is a free data retrieval call binding the contract method 0x747b217c.
//
// Solidity: function isETHDKGRunning() view returns(bool)
func (_ETHDKG *ETHDKGCallerSession) IsETHDKGRunning() (bool, error) {
	return _ETHDKG.Contract.IsETHDKGRunning(&_ETHDKG.CallOpts)
}

// IsMasterPublicKeySet is a free data retrieval call binding the contract method 0x08efcf16.
//
// Solidity: function isMasterPublicKeySet() view returns(bool)
func (_ETHDKG *ETHDKGCaller) IsMasterPublicKeySet(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "isMasterPublicKeySet")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsMasterPublicKeySet is a free data retrieval call binding the contract method 0x08efcf16.
//
// Solidity: function isMasterPublicKeySet() view returns(bool)
func (_ETHDKG *ETHDKGSession) IsMasterPublicKeySet() (bool, error) {
	return _ETHDKG.Contract.IsMasterPublicKeySet(&_ETHDKG.CallOpts)
}

// IsMasterPublicKeySet is a free data retrieval call binding the contract method 0x08efcf16.
//
// Solidity: function isMasterPublicKeySet() view returns(bool)
func (_ETHDKG *ETHDKGCallerSession) IsMasterPublicKeySet() (bool, error) {
	return _ETHDKG.Contract.IsMasterPublicKeySet(&_ETHDKG.CallOpts)
}

// TryGetParticipantIndex is a free data retrieval call binding the contract method 0x65e62b9b.
//
// Solidity: function tryGetParticipantIndex(address participant) view returns(bool, uint256)
func (_ETHDKG *ETHDKGCaller) TryGetParticipantIndex(opts *bind.CallOpts, participant common.Address) (bool, *big.Int, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "tryGetParticipantIndex", participant)

	if err != nil {
		return *new(bool), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return out0, out1, err

}

// TryGetParticipantIndex is a free data retrieval call binding the contract method 0x65e62b9b.
//
// Solidity: function tryGetParticipantIndex(address participant) view returns(bool, uint256)
func (_ETHDKG *ETHDKGSession) TryGetParticipantIndex(participant common.Address) (bool, *big.Int, error) {
	return _ETHDKG.Contract.TryGetParticipantIndex(&_ETHDKG.CallOpts, participant)
}

// TryGetParticipantIndex is a free data retrieval call binding the contract method 0x65e62b9b.
//
// Solidity: function tryGetParticipantIndex(address participant) view returns(bool, uint256)
func (_ETHDKG *ETHDKGCallerSession) TryGetParticipantIndex(participant common.Address) (bool, *big.Int, error) {
	return _ETHDKG.Contract.TryGetParticipantIndex(&_ETHDKG.CallOpts, participant)
}

// AccuseParticipantDidNotDistributeShares is a paid mutator transaction binding the contract method 0xdae681bc.
//
// Solidity: function accuseParticipantDidNotDistributeShares(address[] dishonestAddresses) returns()
func (_ETHDKG *ETHDKGTransactor) AccuseParticipantDidNotDistributeShares(opts *bind.TransactOpts, dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "accuseParticipantDidNotDistributeShares", dishonestAddresses)
}

// AccuseParticipantDidNotDistributeShares is a paid mutator transaction binding the contract method 0xdae681bc.
//
// Solidity: function accuseParticipantDidNotDistributeShares(address[] dishonestAddresses) returns()
func (_ETHDKG *ETHDKGSession) AccuseParticipantDidNotDistributeShares(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKG.Contract.AccuseParticipantDidNotDistributeShares(&_ETHDKG.TransactOpts, dishonestAddresses)
}

// AccuseParticipantDidNotDistributeShares is a paid mutator transaction binding the contract method 0xdae681bc.
//
// Solidity: function accuseParticipantDidNotDistributeShares(address[] dishonestAddresses) returns()
func (_ETHDKG *ETHDKGTransactorSession) AccuseParticipantDidNotDistributeShares(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKG.Contract.AccuseParticipantDidNotDistributeShares(&_ETHDKG.TransactOpts, dishonestAddresses)
}

// AccuseParticipantDidNotSubmitGPKJ is a paid mutator transaction binding the contract method 0x7df24ee9.
//
// Solidity: function accuseParticipantDidNotSubmitGPKJ(address[] dishonestAddresses) returns()
func (_ETHDKG *ETHDKGTransactor) AccuseParticipantDidNotSubmitGPKJ(opts *bind.TransactOpts, dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "accuseParticipantDidNotSubmitGPKJ", dishonestAddresses)
}

// AccuseParticipantDidNotSubmitGPKJ is a paid mutator transaction binding the contract method 0x7df24ee9.
//
// Solidity: function accuseParticipantDidNotSubmitGPKJ(address[] dishonestAddresses) returns()
func (_ETHDKG *ETHDKGSession) AccuseParticipantDidNotSubmitGPKJ(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKG.Contract.AccuseParticipantDidNotSubmitGPKJ(&_ETHDKG.TransactOpts, dishonestAddresses)
}

// AccuseParticipantDidNotSubmitGPKJ is a paid mutator transaction binding the contract method 0x7df24ee9.
//
// Solidity: function accuseParticipantDidNotSubmitGPKJ(address[] dishonestAddresses) returns()
func (_ETHDKG *ETHDKGTransactorSession) AccuseParticipantDidNotSubmitGPKJ(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKG.Contract.AccuseParticipantDidNotSubmitGPKJ(&_ETHDKG.TransactOpts, dishonestAddresses)
}

// AccuseParticipantDidNotSubmitKeyShares is a paid mutator transaction binding the contract method 0x043a6f12.
//
// Solidity: function accuseParticipantDidNotSubmitKeyShares(address[] dishonestAddresses) returns()
func (_ETHDKG *ETHDKGTransactor) AccuseParticipantDidNotSubmitKeyShares(opts *bind.TransactOpts, dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "accuseParticipantDidNotSubmitKeyShares", dishonestAddresses)
}

// AccuseParticipantDidNotSubmitKeyShares is a paid mutator transaction binding the contract method 0x043a6f12.
//
// Solidity: function accuseParticipantDidNotSubmitKeyShares(address[] dishonestAddresses) returns()
func (_ETHDKG *ETHDKGSession) AccuseParticipantDidNotSubmitKeyShares(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKG.Contract.AccuseParticipantDidNotSubmitKeyShares(&_ETHDKG.TransactOpts, dishonestAddresses)
}

// AccuseParticipantDidNotSubmitKeyShares is a paid mutator transaction binding the contract method 0x043a6f12.
//
// Solidity: function accuseParticipantDidNotSubmitKeyShares(address[] dishonestAddresses) returns()
func (_ETHDKG *ETHDKGTransactorSession) AccuseParticipantDidNotSubmitKeyShares(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKG.Contract.AccuseParticipantDidNotSubmitKeyShares(&_ETHDKG.TransactOpts, dishonestAddresses)
}

// AccuseParticipantDistributedBadShares is a paid mutator transaction binding the contract method 0xedbe7bf7.
//
// Solidity: function accuseParticipantDistributedBadShares(address dishonestAddress, uint256[] encryptedShares, uint256[2][] commitments, uint256[2] sharedKey, uint256[2] sharedKeyCorrectnessProof) returns()
func (_ETHDKG *ETHDKGTransactor) AccuseParticipantDistributedBadShares(opts *bind.TransactOpts, dishonestAddress common.Address, encryptedShares []*big.Int, commitments [][2]*big.Int, sharedKey [2]*big.Int, sharedKeyCorrectnessProof [2]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "accuseParticipantDistributedBadShares", dishonestAddress, encryptedShares, commitments, sharedKey, sharedKeyCorrectnessProof)
}

// AccuseParticipantDistributedBadShares is a paid mutator transaction binding the contract method 0xedbe7bf7.
//
// Solidity: function accuseParticipantDistributedBadShares(address dishonestAddress, uint256[] encryptedShares, uint256[2][] commitments, uint256[2] sharedKey, uint256[2] sharedKeyCorrectnessProof) returns()
func (_ETHDKG *ETHDKGSession) AccuseParticipantDistributedBadShares(dishonestAddress common.Address, encryptedShares []*big.Int, commitments [][2]*big.Int, sharedKey [2]*big.Int, sharedKeyCorrectnessProof [2]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.AccuseParticipantDistributedBadShares(&_ETHDKG.TransactOpts, dishonestAddress, encryptedShares, commitments, sharedKey, sharedKeyCorrectnessProof)
}

// AccuseParticipantDistributedBadShares is a paid mutator transaction binding the contract method 0xedbe7bf7.
//
// Solidity: function accuseParticipantDistributedBadShares(address dishonestAddress, uint256[] encryptedShares, uint256[2][] commitments, uint256[2] sharedKey, uint256[2] sharedKeyCorrectnessProof) returns()
func (_ETHDKG *ETHDKGTransactorSession) AccuseParticipantDistributedBadShares(dishonestAddress common.Address, encryptedShares []*big.Int, commitments [][2]*big.Int, sharedKey [2]*big.Int, sharedKeyCorrectnessProof [2]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.AccuseParticipantDistributedBadShares(&_ETHDKG.TransactOpts, dishonestAddress, encryptedShares, commitments, sharedKey, sharedKeyCorrectnessProof)
}

// AccuseParticipantNotRegistered is a paid mutator transaction binding the contract method 0xf72c45b6.
//
// Solidity: function accuseParticipantNotRegistered(address[] dishonestAddresses) returns()
func (_ETHDKG *ETHDKGTransactor) AccuseParticipantNotRegistered(opts *bind.TransactOpts, dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "accuseParticipantNotRegistered", dishonestAddresses)
}

// AccuseParticipantNotRegistered is a paid mutator transaction binding the contract method 0xf72c45b6.
//
// Solidity: function accuseParticipantNotRegistered(address[] dishonestAddresses) returns()
func (_ETHDKG *ETHDKGSession) AccuseParticipantNotRegistered(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKG.Contract.AccuseParticipantNotRegistered(&_ETHDKG.TransactOpts, dishonestAddresses)
}

// AccuseParticipantNotRegistered is a paid mutator transaction binding the contract method 0xf72c45b6.
//
// Solidity: function accuseParticipantNotRegistered(address[] dishonestAddresses) returns()
func (_ETHDKG *ETHDKGTransactorSession) AccuseParticipantNotRegistered(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKG.Contract.AccuseParticipantNotRegistered(&_ETHDKG.TransactOpts, dishonestAddresses)
}

// AccuseParticipantSubmittedBadGPKJ is a paid mutator transaction binding the contract method 0x80001264.
//
// Solidity: function accuseParticipantSubmittedBadGPKJ(address[] validators, bytes32[] encryptedSharesHash, uint256[2][][] commitments, address dishonestAddress) returns()
func (_ETHDKG *ETHDKGTransactor) AccuseParticipantSubmittedBadGPKJ(opts *bind.TransactOpts, validators []common.Address, encryptedSharesHash [][32]byte, commitments [][][2]*big.Int, dishonestAddress common.Address) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "accuseParticipantSubmittedBadGPKJ", validators, encryptedSharesHash, commitments, dishonestAddress)
}

// AccuseParticipantSubmittedBadGPKJ is a paid mutator transaction binding the contract method 0x80001264.
//
// Solidity: function accuseParticipantSubmittedBadGPKJ(address[] validators, bytes32[] encryptedSharesHash, uint256[2][][] commitments, address dishonestAddress) returns()
func (_ETHDKG *ETHDKGSession) AccuseParticipantSubmittedBadGPKJ(validators []common.Address, encryptedSharesHash [][32]byte, commitments [][][2]*big.Int, dishonestAddress common.Address) (*types.Transaction, error) {
	return _ETHDKG.Contract.AccuseParticipantSubmittedBadGPKJ(&_ETHDKG.TransactOpts, validators, encryptedSharesHash, commitments, dishonestAddress)
}

// AccuseParticipantSubmittedBadGPKJ is a paid mutator transaction binding the contract method 0x80001264.
//
// Solidity: function accuseParticipantSubmittedBadGPKJ(address[] validators, bytes32[] encryptedSharesHash, uint256[2][][] commitments, address dishonestAddress) returns()
func (_ETHDKG *ETHDKGTransactorSession) AccuseParticipantSubmittedBadGPKJ(validators []common.Address, encryptedSharesHash [][32]byte, commitments [][][2]*big.Int, dishonestAddress common.Address) (*types.Transaction, error) {
	return _ETHDKG.Contract.AccuseParticipantSubmittedBadGPKJ(&_ETHDKG.TransactOpts, validators, encryptedSharesHash, commitments, dishonestAddress)
}

// Complete is a paid mutator transaction binding the contract method 0x522e1177.
//
// Solidity: function complete() returns()
func (_ETHDKG *ETHDKGTransactor) Complete(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "complete")
}

// Complete is a paid mutator transaction binding the contract method 0x522e1177.
//
// Solidity: function complete() returns()
func (_ETHDKG *ETHDKGSession) Complete() (*types.Transaction, error) {
	return _ETHDKG.Contract.Complete(&_ETHDKG.TransactOpts)
}

// Complete is a paid mutator transaction binding the contract method 0x522e1177.
//
// Solidity: function complete() returns()
func (_ETHDKG *ETHDKGTransactorSession) Complete() (*types.Transaction, error) {
	return _ETHDKG.Contract.Complete(&_ETHDKG.TransactOpts)
}

// DistributeShares is a paid mutator transaction binding the contract method 0x80b97e01.
//
// Solidity: function distributeShares(uint256[] encryptedShares, uint256[2][] commitments) returns()
func (_ETHDKG *ETHDKGTransactor) DistributeShares(opts *bind.TransactOpts, encryptedShares []*big.Int, commitments [][2]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "distributeShares", encryptedShares, commitments)
}

// DistributeShares is a paid mutator transaction binding the contract method 0x80b97e01.
//
// Solidity: function distributeShares(uint256[] encryptedShares, uint256[2][] commitments) returns()
func (_ETHDKG *ETHDKGSession) DistributeShares(encryptedShares []*big.Int, commitments [][2]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.DistributeShares(&_ETHDKG.TransactOpts, encryptedShares, commitments)
}

// DistributeShares is a paid mutator transaction binding the contract method 0x80b97e01.
//
// Solidity: function distributeShares(uint256[] encryptedShares, uint256[2][] commitments) returns()
func (_ETHDKG *ETHDKGTransactorSession) DistributeShares(encryptedShares []*big.Int, commitments [][2]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.DistributeShares(&_ETHDKG.TransactOpts, encryptedShares, commitments)
}

// Initialize is a paid mutator transaction binding the contract method 0xf8c8765e.
//
// Solidity: function initialize(address validatorPool, address snapshots, address ethdkgAccusations, address ethdkgPhases) returns()
func (_ETHDKG *ETHDKGTransactor) Initialize(opts *bind.TransactOpts, validatorPool common.Address, snapshots common.Address, ethdkgAccusations common.Address, ethdkgPhases common.Address) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "initialize", validatorPool, snapshots, ethdkgAccusations, ethdkgPhases)
}

// Initialize is a paid mutator transaction binding the contract method 0xf8c8765e.
//
// Solidity: function initialize(address validatorPool, address snapshots, address ethdkgAccusations, address ethdkgPhases) returns()
func (_ETHDKG *ETHDKGSession) Initialize(validatorPool common.Address, snapshots common.Address, ethdkgAccusations common.Address, ethdkgPhases common.Address) (*types.Transaction, error) {
	return _ETHDKG.Contract.Initialize(&_ETHDKG.TransactOpts, validatorPool, snapshots, ethdkgAccusations, ethdkgPhases)
}

// Initialize is a paid mutator transaction binding the contract method 0xf8c8765e.
//
// Solidity: function initialize(address validatorPool, address snapshots, address ethdkgAccusations, address ethdkgPhases) returns()
func (_ETHDKG *ETHDKGTransactorSession) Initialize(validatorPool common.Address, snapshots common.Address, ethdkgAccusations common.Address, ethdkgPhases common.Address) (*types.Transaction, error) {
	return _ETHDKG.Contract.Initialize(&_ETHDKG.TransactOpts, validatorPool, snapshots, ethdkgAccusations, ethdkgPhases)
}

// InitializeETHDKG is a paid mutator transaction binding the contract method 0x57b51c9c.
//
// Solidity: function initializeETHDKG() returns()
func (_ETHDKG *ETHDKGTransactor) InitializeETHDKG(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "initializeETHDKG")
}

// InitializeETHDKG is a paid mutator transaction binding the contract method 0x57b51c9c.
//
// Solidity: function initializeETHDKG() returns()
func (_ETHDKG *ETHDKGSession) InitializeETHDKG() (*types.Transaction, error) {
	return _ETHDKG.Contract.InitializeETHDKG(&_ETHDKG.TransactOpts)
}

// InitializeETHDKG is a paid mutator transaction binding the contract method 0x57b51c9c.
//
// Solidity: function initializeETHDKG() returns()
func (_ETHDKG *ETHDKGTransactorSession) InitializeETHDKG() (*types.Transaction, error) {
	return _ETHDKG.Contract.InitializeETHDKG(&_ETHDKG.TransactOpts)
}

// Register is a paid mutator transaction binding the contract method 0x3442af5c.
//
// Solidity: function register(uint256[2] publicKey) returns()
func (_ETHDKG *ETHDKGTransactor) Register(opts *bind.TransactOpts, publicKey [2]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "register", publicKey)
}

// Register is a paid mutator transaction binding the contract method 0x3442af5c.
//
// Solidity: function register(uint256[2] publicKey) returns()
func (_ETHDKG *ETHDKGSession) Register(publicKey [2]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.Register(&_ETHDKG.TransactOpts, publicKey)
}

// Register is a paid mutator transaction binding the contract method 0x3442af5c.
//
// Solidity: function register(uint256[2] publicKey) returns()
func (_ETHDKG *ETHDKGTransactorSession) Register(publicKey [2]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.Register(&_ETHDKG.TransactOpts, publicKey)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address admin_) returns()
func (_ETHDKG *ETHDKGTransactor) SetAdmin(opts *bind.TransactOpts, admin_ common.Address) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "setAdmin", admin_)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address admin_) returns()
func (_ETHDKG *ETHDKGSession) SetAdmin(admin_ common.Address) (*types.Transaction, error) {
	return _ETHDKG.Contract.SetAdmin(&_ETHDKG.TransactOpts, admin_)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address admin_) returns()
func (_ETHDKG *ETHDKGTransactorSession) SetAdmin(admin_ common.Address) (*types.Transaction, error) {
	return _ETHDKG.Contract.SetAdmin(&_ETHDKG.TransactOpts, admin_)
}

// SetConfirmationLength is a paid mutator transaction binding the contract method 0xff3e5e45.
//
// Solidity: function setConfirmationLength(uint16 confirmationLength_) returns()
func (_ETHDKG *ETHDKGTransactor) SetConfirmationLength(opts *bind.TransactOpts, confirmationLength_ uint16) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "setConfirmationLength", confirmationLength_)
}

// SetConfirmationLength is a paid mutator transaction binding the contract method 0xff3e5e45.
//
// Solidity: function setConfirmationLength(uint16 confirmationLength_) returns()
func (_ETHDKG *ETHDKGSession) SetConfirmationLength(confirmationLength_ uint16) (*types.Transaction, error) {
	return _ETHDKG.Contract.SetConfirmationLength(&_ETHDKG.TransactOpts, confirmationLength_)
}

// SetConfirmationLength is a paid mutator transaction binding the contract method 0xff3e5e45.
//
// Solidity: function setConfirmationLength(uint16 confirmationLength_) returns()
func (_ETHDKG *ETHDKGTransactorSession) SetConfirmationLength(confirmationLength_ uint16) (*types.Transaction, error) {
	return _ETHDKG.Contract.SetConfirmationLength(&_ETHDKG.TransactOpts, confirmationLength_)
}

// SetCustomMadnetHeight is a paid mutator transaction binding the contract method 0x8328cdf7.
//
// Solidity: function setCustomMadnetHeight(uint256 madnetHeight) returns()
func (_ETHDKG *ETHDKGTransactor) SetCustomMadnetHeight(opts *bind.TransactOpts, madnetHeight *big.Int) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "setCustomMadnetHeight", madnetHeight)
}

// SetCustomMadnetHeight is a paid mutator transaction binding the contract method 0x8328cdf7.
//
// Solidity: function setCustomMadnetHeight(uint256 madnetHeight) returns()
func (_ETHDKG *ETHDKGSession) SetCustomMadnetHeight(madnetHeight *big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.SetCustomMadnetHeight(&_ETHDKG.TransactOpts, madnetHeight)
}

// SetCustomMadnetHeight is a paid mutator transaction binding the contract method 0x8328cdf7.
//
// Solidity: function setCustomMadnetHeight(uint256 madnetHeight) returns()
func (_ETHDKG *ETHDKGTransactorSession) SetCustomMadnetHeight(madnetHeight *big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.SetCustomMadnetHeight(&_ETHDKG.TransactOpts, madnetHeight)
}

// SetMinNumberOfValidator is a paid mutator transaction binding the contract method 0xfb89c899.
//
// Solidity: function setMinNumberOfValidator(uint16 minValidators_) returns()
func (_ETHDKG *ETHDKGTransactor) SetMinNumberOfValidator(opts *bind.TransactOpts, minValidators_ uint16) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "setMinNumberOfValidator", minValidators_)
}

// SetMinNumberOfValidator is a paid mutator transaction binding the contract method 0xfb89c899.
//
// Solidity: function setMinNumberOfValidator(uint16 minValidators_) returns()
func (_ETHDKG *ETHDKGSession) SetMinNumberOfValidator(minValidators_ uint16) (*types.Transaction, error) {
	return _ETHDKG.Contract.SetMinNumberOfValidator(&_ETHDKG.TransactOpts, minValidators_)
}

// SetMinNumberOfValidator is a paid mutator transaction binding the contract method 0xfb89c899.
//
// Solidity: function setMinNumberOfValidator(uint16 minValidators_) returns()
func (_ETHDKG *ETHDKGTransactorSession) SetMinNumberOfValidator(minValidators_ uint16) (*types.Transaction, error) {
	return _ETHDKG.Contract.SetMinNumberOfValidator(&_ETHDKG.TransactOpts, minValidators_)
}

// SetPhaseLength is a paid mutator transaction binding the contract method 0x8a3c24cc.
//
// Solidity: function setPhaseLength(uint16 phaseLength_) returns()
func (_ETHDKG *ETHDKGTransactor) SetPhaseLength(opts *bind.TransactOpts, phaseLength_ uint16) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "setPhaseLength", phaseLength_)
}

// SetPhaseLength is a paid mutator transaction binding the contract method 0x8a3c24cc.
//
// Solidity: function setPhaseLength(uint16 phaseLength_) returns()
func (_ETHDKG *ETHDKGSession) SetPhaseLength(phaseLength_ uint16) (*types.Transaction, error) {
	return _ETHDKG.Contract.SetPhaseLength(&_ETHDKG.TransactOpts, phaseLength_)
}

// SetPhaseLength is a paid mutator transaction binding the contract method 0x8a3c24cc.
//
// Solidity: function setPhaseLength(uint16 phaseLength_) returns()
func (_ETHDKG *ETHDKGTransactorSession) SetPhaseLength(phaseLength_ uint16) (*types.Transaction, error) {
	return _ETHDKG.Contract.SetPhaseLength(&_ETHDKG.TransactOpts, phaseLength_)
}

// SetSnapshotsAddress is a paid mutator transaction binding the contract method 0xd8552806.
//
// Solidity: function setSnapshotsAddress(address snapshots) returns()
func (_ETHDKG *ETHDKGTransactor) SetSnapshotsAddress(opts *bind.TransactOpts, snapshots common.Address) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "setSnapshotsAddress", snapshots)
}

// SetSnapshotsAddress is a paid mutator transaction binding the contract method 0xd8552806.
//
// Solidity: function setSnapshotsAddress(address snapshots) returns()
func (_ETHDKG *ETHDKGSession) SetSnapshotsAddress(snapshots common.Address) (*types.Transaction, error) {
	return _ETHDKG.Contract.SetSnapshotsAddress(&_ETHDKG.TransactOpts, snapshots)
}

// SetSnapshotsAddress is a paid mutator transaction binding the contract method 0xd8552806.
//
// Solidity: function setSnapshotsAddress(address snapshots) returns()
func (_ETHDKG *ETHDKGTransactorSession) SetSnapshotsAddress(snapshots common.Address) (*types.Transaction, error) {
	return _ETHDKG.Contract.SetSnapshotsAddress(&_ETHDKG.TransactOpts, snapshots)
}

// SetValidatorPoolAddress is a paid mutator transaction binding the contract method 0xfe0fe422.
//
// Solidity: function setValidatorPoolAddress(address validatorPool) returns()
func (_ETHDKG *ETHDKGTransactor) SetValidatorPoolAddress(opts *bind.TransactOpts, validatorPool common.Address) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "setValidatorPoolAddress", validatorPool)
}

// SetValidatorPoolAddress is a paid mutator transaction binding the contract method 0xfe0fe422.
//
// Solidity: function setValidatorPoolAddress(address validatorPool) returns()
func (_ETHDKG *ETHDKGSession) SetValidatorPoolAddress(validatorPool common.Address) (*types.Transaction, error) {
	return _ETHDKG.Contract.SetValidatorPoolAddress(&_ETHDKG.TransactOpts, validatorPool)
}

// SetValidatorPoolAddress is a paid mutator transaction binding the contract method 0xfe0fe422.
//
// Solidity: function setValidatorPoolAddress(address validatorPool) returns()
func (_ETHDKG *ETHDKGTransactorSession) SetValidatorPoolAddress(validatorPool common.Address) (*types.Transaction, error) {
	return _ETHDKG.Contract.SetValidatorPoolAddress(&_ETHDKG.TransactOpts, validatorPool)
}

// SubmitGPKJ is a paid mutator transaction binding the contract method 0x101f49c1.
//
// Solidity: function submitGPKJ(uint256[4] gpkj) returns()
func (_ETHDKG *ETHDKGTransactor) SubmitGPKJ(opts *bind.TransactOpts, gpkj [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "submitGPKJ", gpkj)
}

// SubmitGPKJ is a paid mutator transaction binding the contract method 0x101f49c1.
//
// Solidity: function submitGPKJ(uint256[4] gpkj) returns()
func (_ETHDKG *ETHDKGSession) SubmitGPKJ(gpkj [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.SubmitGPKJ(&_ETHDKG.TransactOpts, gpkj)
}

// SubmitGPKJ is a paid mutator transaction binding the contract method 0x101f49c1.
//
// Solidity: function submitGPKJ(uint256[4] gpkj) returns()
func (_ETHDKG *ETHDKGTransactorSession) SubmitGPKJ(gpkj [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.SubmitGPKJ(&_ETHDKG.TransactOpts, gpkj)
}

// SubmitKeyShare is a paid mutator transaction binding the contract method 0x62a6523e.
//
// Solidity: function submitKeyShare(uint256[2] keyShareG1, uint256[2] keyShareG1CorrectnessProof, uint256[4] keyShareG2) returns()
func (_ETHDKG *ETHDKGTransactor) SubmitKeyShare(opts *bind.TransactOpts, keyShareG1 [2]*big.Int, keyShareG1CorrectnessProof [2]*big.Int, keyShareG2 [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "submitKeyShare", keyShareG1, keyShareG1CorrectnessProof, keyShareG2)
}

// SubmitKeyShare is a paid mutator transaction binding the contract method 0x62a6523e.
//
// Solidity: function submitKeyShare(uint256[2] keyShareG1, uint256[2] keyShareG1CorrectnessProof, uint256[4] keyShareG2) returns()
func (_ETHDKG *ETHDKGSession) SubmitKeyShare(keyShareG1 [2]*big.Int, keyShareG1CorrectnessProof [2]*big.Int, keyShareG2 [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.SubmitKeyShare(&_ETHDKG.TransactOpts, keyShareG1, keyShareG1CorrectnessProof, keyShareG2)
}

// SubmitKeyShare is a paid mutator transaction binding the contract method 0x62a6523e.
//
// Solidity: function submitKeyShare(uint256[2] keyShareG1, uint256[2] keyShareG1CorrectnessProof, uint256[4] keyShareG2) returns()
func (_ETHDKG *ETHDKGTransactorSession) SubmitKeyShare(keyShareG1 [2]*big.Int, keyShareG1CorrectnessProof [2]*big.Int, keyShareG2 [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.SubmitKeyShare(&_ETHDKG.TransactOpts, keyShareG1, keyShareG1CorrectnessProof, keyShareG2)
}

// SubmitMasterPublicKey is a paid mutator transaction binding the contract method 0xe8323224.
//
// Solidity: function submitMasterPublicKey(uint256[4] masterPublicKey_) returns()
func (_ETHDKG *ETHDKGTransactor) SubmitMasterPublicKey(opts *bind.TransactOpts, masterPublicKey_ [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "submitMasterPublicKey", masterPublicKey_)
}

// SubmitMasterPublicKey is a paid mutator transaction binding the contract method 0xe8323224.
//
// Solidity: function submitMasterPublicKey(uint256[4] masterPublicKey_) returns()
func (_ETHDKG *ETHDKGSession) SubmitMasterPublicKey(masterPublicKey_ [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.SubmitMasterPublicKey(&_ETHDKG.TransactOpts, masterPublicKey_)
}

// SubmitMasterPublicKey is a paid mutator transaction binding the contract method 0xe8323224.
//
// Solidity: function submitMasterPublicKey(uint256[4] masterPublicKey_) returns()
func (_ETHDKG *ETHDKGTransactorSession) SubmitMasterPublicKey(masterPublicKey_ [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.SubmitMasterPublicKey(&_ETHDKG.TransactOpts, masterPublicKey_)
}

// ETHDKGAddressRegisteredIterator is returned from FilterAddressRegistered and is used to iterate over the raw logs and unpacked data for AddressRegistered events raised by the ETHDKG contract.
type ETHDKGAddressRegisteredIterator struct {
	Event *ETHDKGAddressRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGAddressRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGAddressRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGAddressRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGAddressRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGAddressRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGAddressRegistered represents a AddressRegistered event raised by the ETHDKG contract.
type ETHDKGAddressRegistered struct {
	Account   common.Address
	Index     *big.Int
	Nonce     *big.Int
	PublicKey [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAddressRegistered is a free log retrieval operation binding the contract event 0x7f1304057ec61140fbf2f5f236790f34fcafe123d3eb0d298d92317c97da500d.
//
// Solidity: event AddressRegistered(address account, uint256 index, uint256 nonce, uint256[2] publicKey)
func (_ETHDKG *ETHDKGFilterer) FilterAddressRegistered(opts *bind.FilterOpts) (*ETHDKGAddressRegisteredIterator, error) {

	logs, sub, err := _ETHDKG.contract.FilterLogs(opts, "AddressRegistered")
	if err != nil {
		return nil, err
	}
	return &ETHDKGAddressRegisteredIterator{contract: _ETHDKG.contract, event: "AddressRegistered", logs: logs, sub: sub}, nil
}

// WatchAddressRegistered is a free log subscription operation binding the contract event 0x7f1304057ec61140fbf2f5f236790f34fcafe123d3eb0d298d92317c97da500d.
//
// Solidity: event AddressRegistered(address account, uint256 index, uint256 nonce, uint256[2] publicKey)
func (_ETHDKG *ETHDKGFilterer) WatchAddressRegistered(opts *bind.WatchOpts, sink chan<- *ETHDKGAddressRegistered) (event.Subscription, error) {

	logs, sub, err := _ETHDKG.contract.WatchLogs(opts, "AddressRegistered")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGAddressRegistered)
				if err := _ETHDKG.contract.UnpackLog(event, "AddressRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddressRegistered is a log parse operation binding the contract event 0x7f1304057ec61140fbf2f5f236790f34fcafe123d3eb0d298d92317c97da500d.
//
// Solidity: event AddressRegistered(address account, uint256 index, uint256 nonce, uint256[2] publicKey)
func (_ETHDKG *ETHDKGFilterer) ParseAddressRegistered(log types.Log) (*ETHDKGAddressRegistered, error) {
	event := new(ETHDKGAddressRegistered)
	if err := _ETHDKG.contract.UnpackLog(event, "AddressRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGGPKJSubmissionCompleteIterator is returned from FilterGPKJSubmissionComplete and is used to iterate over the raw logs and unpacked data for GPKJSubmissionComplete events raised by the ETHDKG contract.
type ETHDKGGPKJSubmissionCompleteIterator struct {
	Event *ETHDKGGPKJSubmissionComplete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGGPKJSubmissionCompleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGGPKJSubmissionComplete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGGPKJSubmissionComplete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGGPKJSubmissionCompleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGGPKJSubmissionCompleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGGPKJSubmissionComplete represents a GPKJSubmissionComplete event raised by the ETHDKG contract.
type ETHDKGGPKJSubmissionComplete struct {
	BlockNumber *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterGPKJSubmissionComplete is a free log retrieval operation binding the contract event 0x87bfe600b78cad9f7cf68c99eb582c1748f636b3269842b37d5873b0e069f628.
//
// Solidity: event GPKJSubmissionComplete(uint256 blockNumber)
func (_ETHDKG *ETHDKGFilterer) FilterGPKJSubmissionComplete(opts *bind.FilterOpts) (*ETHDKGGPKJSubmissionCompleteIterator, error) {

	logs, sub, err := _ETHDKG.contract.FilterLogs(opts, "GPKJSubmissionComplete")
	if err != nil {
		return nil, err
	}
	return &ETHDKGGPKJSubmissionCompleteIterator{contract: _ETHDKG.contract, event: "GPKJSubmissionComplete", logs: logs, sub: sub}, nil
}

// WatchGPKJSubmissionComplete is a free log subscription operation binding the contract event 0x87bfe600b78cad9f7cf68c99eb582c1748f636b3269842b37d5873b0e069f628.
//
// Solidity: event GPKJSubmissionComplete(uint256 blockNumber)
func (_ETHDKG *ETHDKGFilterer) WatchGPKJSubmissionComplete(opts *bind.WatchOpts, sink chan<- *ETHDKGGPKJSubmissionComplete) (event.Subscription, error) {

	logs, sub, err := _ETHDKG.contract.WatchLogs(opts, "GPKJSubmissionComplete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGGPKJSubmissionComplete)
				if err := _ETHDKG.contract.UnpackLog(event, "GPKJSubmissionComplete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseGPKJSubmissionComplete is a log parse operation binding the contract event 0x87bfe600b78cad9f7cf68c99eb582c1748f636b3269842b37d5873b0e069f628.
//
// Solidity: event GPKJSubmissionComplete(uint256 blockNumber)
func (_ETHDKG *ETHDKGFilterer) ParseGPKJSubmissionComplete(log types.Log) (*ETHDKGGPKJSubmissionComplete, error) {
	event := new(ETHDKGGPKJSubmissionComplete)
	if err := _ETHDKG.contract.UnpackLog(event, "GPKJSubmissionComplete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGKeyShareSubmissionCompleteIterator is returned from FilterKeyShareSubmissionComplete and is used to iterate over the raw logs and unpacked data for KeyShareSubmissionComplete events raised by the ETHDKG contract.
type ETHDKGKeyShareSubmissionCompleteIterator struct {
	Event *ETHDKGKeyShareSubmissionComplete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGKeyShareSubmissionCompleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGKeyShareSubmissionComplete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGKeyShareSubmissionComplete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGKeyShareSubmissionCompleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGKeyShareSubmissionCompleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGKeyShareSubmissionComplete represents a KeyShareSubmissionComplete event raised by the ETHDKG contract.
type ETHDKGKeyShareSubmissionComplete struct {
	BlockNumber *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterKeyShareSubmissionComplete is a free log retrieval operation binding the contract event 0x522cec98f6caa194456c44afa9e8cef9ac63eecb0be60e20d180ce19cfb0ef59.
//
// Solidity: event KeyShareSubmissionComplete(uint256 blockNumber)
func (_ETHDKG *ETHDKGFilterer) FilterKeyShareSubmissionComplete(opts *bind.FilterOpts) (*ETHDKGKeyShareSubmissionCompleteIterator, error) {

	logs, sub, err := _ETHDKG.contract.FilterLogs(opts, "KeyShareSubmissionComplete")
	if err != nil {
		return nil, err
	}
	return &ETHDKGKeyShareSubmissionCompleteIterator{contract: _ETHDKG.contract, event: "KeyShareSubmissionComplete", logs: logs, sub: sub}, nil
}

// WatchKeyShareSubmissionComplete is a free log subscription operation binding the contract event 0x522cec98f6caa194456c44afa9e8cef9ac63eecb0be60e20d180ce19cfb0ef59.
//
// Solidity: event KeyShareSubmissionComplete(uint256 blockNumber)
func (_ETHDKG *ETHDKGFilterer) WatchKeyShareSubmissionComplete(opts *bind.WatchOpts, sink chan<- *ETHDKGKeyShareSubmissionComplete) (event.Subscription, error) {

	logs, sub, err := _ETHDKG.contract.WatchLogs(opts, "KeyShareSubmissionComplete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGKeyShareSubmissionComplete)
				if err := _ETHDKG.contract.UnpackLog(event, "KeyShareSubmissionComplete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKeyShareSubmissionComplete is a log parse operation binding the contract event 0x522cec98f6caa194456c44afa9e8cef9ac63eecb0be60e20d180ce19cfb0ef59.
//
// Solidity: event KeyShareSubmissionComplete(uint256 blockNumber)
func (_ETHDKG *ETHDKGFilterer) ParseKeyShareSubmissionComplete(log types.Log) (*ETHDKGKeyShareSubmissionComplete, error) {
	event := new(ETHDKGKeyShareSubmissionComplete)
	if err := _ETHDKG.contract.UnpackLog(event, "KeyShareSubmissionComplete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGKeyShareSubmittedIterator is returned from FilterKeyShareSubmitted and is used to iterate over the raw logs and unpacked data for KeyShareSubmitted events raised by the ETHDKG contract.
type ETHDKGKeyShareSubmittedIterator struct {
	Event *ETHDKGKeyShareSubmitted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGKeyShareSubmittedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGKeyShareSubmitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGKeyShareSubmitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGKeyShareSubmittedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGKeyShareSubmittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGKeyShareSubmitted represents a KeyShareSubmitted event raised by the ETHDKG contract.
type ETHDKGKeyShareSubmitted struct {
	Account                    common.Address
	Index                      *big.Int
	Nonce                      *big.Int
	KeyShareG1                 [2]*big.Int
	KeyShareG1CorrectnessProof [2]*big.Int
	KeyShareG2                 [4]*big.Int
	Raw                        types.Log // Blockchain specific contextual infos
}

// FilterKeyShareSubmitted is a free log retrieval operation binding the contract event 0x6162e2d11398e4063e4c8565dafc4fb6755bbead93747ea836a5ef73a594aaf7.
//
// Solidity: event KeyShareSubmitted(address account, uint256 index, uint256 nonce, uint256[2] keyShareG1, uint256[2] keyShareG1CorrectnessProof, uint256[4] keyShareG2)
func (_ETHDKG *ETHDKGFilterer) FilterKeyShareSubmitted(opts *bind.FilterOpts) (*ETHDKGKeyShareSubmittedIterator, error) {

	logs, sub, err := _ETHDKG.contract.FilterLogs(opts, "KeyShareSubmitted")
	if err != nil {
		return nil, err
	}
	return &ETHDKGKeyShareSubmittedIterator{contract: _ETHDKG.contract, event: "KeyShareSubmitted", logs: logs, sub: sub}, nil
}

// WatchKeyShareSubmitted is a free log subscription operation binding the contract event 0x6162e2d11398e4063e4c8565dafc4fb6755bbead93747ea836a5ef73a594aaf7.
//
// Solidity: event KeyShareSubmitted(address account, uint256 index, uint256 nonce, uint256[2] keyShareG1, uint256[2] keyShareG1CorrectnessProof, uint256[4] keyShareG2)
func (_ETHDKG *ETHDKGFilterer) WatchKeyShareSubmitted(opts *bind.WatchOpts, sink chan<- *ETHDKGKeyShareSubmitted) (event.Subscription, error) {

	logs, sub, err := _ETHDKG.contract.WatchLogs(opts, "KeyShareSubmitted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGKeyShareSubmitted)
				if err := _ETHDKG.contract.UnpackLog(event, "KeyShareSubmitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKeyShareSubmitted is a log parse operation binding the contract event 0x6162e2d11398e4063e4c8565dafc4fb6755bbead93747ea836a5ef73a594aaf7.
//
// Solidity: event KeyShareSubmitted(address account, uint256 index, uint256 nonce, uint256[2] keyShareG1, uint256[2] keyShareG1CorrectnessProof, uint256[4] keyShareG2)
func (_ETHDKG *ETHDKGFilterer) ParseKeyShareSubmitted(log types.Log) (*ETHDKGKeyShareSubmitted, error) {
	event := new(ETHDKGKeyShareSubmitted)
	if err := _ETHDKG.contract.UnpackLog(event, "KeyShareSubmitted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGMPKSetIterator is returned from FilterMPKSet and is used to iterate over the raw logs and unpacked data for MPKSet events raised by the ETHDKG contract.
type ETHDKGMPKSetIterator struct {
	Event *ETHDKGMPKSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGMPKSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGMPKSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGMPKSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGMPKSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGMPKSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGMPKSet represents a MPKSet event raised by the ETHDKG contract.
type ETHDKGMPKSet struct {
	BlockNumber *big.Int
	Nonce       *big.Int
	Mpk         [4]*big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterMPKSet is a free log retrieval operation binding the contract event 0x71b1ebd27be320895a22125d6458e3363aefa6944a312ede4bf275867e6d5a71.
//
// Solidity: event MPKSet(uint256 blockNumber, uint256 nonce, uint256[4] mpk)
func (_ETHDKG *ETHDKGFilterer) FilterMPKSet(opts *bind.FilterOpts) (*ETHDKGMPKSetIterator, error) {

	logs, sub, err := _ETHDKG.contract.FilterLogs(opts, "MPKSet")
	if err != nil {
		return nil, err
	}
	return &ETHDKGMPKSetIterator{contract: _ETHDKG.contract, event: "MPKSet", logs: logs, sub: sub}, nil
}

// WatchMPKSet is a free log subscription operation binding the contract event 0x71b1ebd27be320895a22125d6458e3363aefa6944a312ede4bf275867e6d5a71.
//
// Solidity: event MPKSet(uint256 blockNumber, uint256 nonce, uint256[4] mpk)
func (_ETHDKG *ETHDKGFilterer) WatchMPKSet(opts *bind.WatchOpts, sink chan<- *ETHDKGMPKSet) (event.Subscription, error) {

	logs, sub, err := _ETHDKG.contract.WatchLogs(opts, "MPKSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGMPKSet)
				if err := _ETHDKG.contract.UnpackLog(event, "MPKSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMPKSet is a log parse operation binding the contract event 0x71b1ebd27be320895a22125d6458e3363aefa6944a312ede4bf275867e6d5a71.
//
// Solidity: event MPKSet(uint256 blockNumber, uint256 nonce, uint256[4] mpk)
func (_ETHDKG *ETHDKGFilterer) ParseMPKSet(log types.Log) (*ETHDKGMPKSet, error) {
	event := new(ETHDKGMPKSet)
	if err := _ETHDKG.contract.UnpackLog(event, "MPKSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGRegistrationCompleteIterator is returned from FilterRegistrationComplete and is used to iterate over the raw logs and unpacked data for RegistrationComplete events raised by the ETHDKG contract.
type ETHDKGRegistrationCompleteIterator struct {
	Event *ETHDKGRegistrationComplete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGRegistrationCompleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGRegistrationComplete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGRegistrationComplete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGRegistrationCompleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGRegistrationCompleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGRegistrationComplete represents a RegistrationComplete event raised by the ETHDKG contract.
type ETHDKGRegistrationComplete struct {
	BlockNumber *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRegistrationComplete is a free log retrieval operation binding the contract event 0x833013b96b786b4eca83baac286920e5e53956c21ff3894f1d9f02e97d6ed764.
//
// Solidity: event RegistrationComplete(uint256 blockNumber)
func (_ETHDKG *ETHDKGFilterer) FilterRegistrationComplete(opts *bind.FilterOpts) (*ETHDKGRegistrationCompleteIterator, error) {

	logs, sub, err := _ETHDKG.contract.FilterLogs(opts, "RegistrationComplete")
	if err != nil {
		return nil, err
	}
	return &ETHDKGRegistrationCompleteIterator{contract: _ETHDKG.contract, event: "RegistrationComplete", logs: logs, sub: sub}, nil
}

// WatchRegistrationComplete is a free log subscription operation binding the contract event 0x833013b96b786b4eca83baac286920e5e53956c21ff3894f1d9f02e97d6ed764.
//
// Solidity: event RegistrationComplete(uint256 blockNumber)
func (_ETHDKG *ETHDKGFilterer) WatchRegistrationComplete(opts *bind.WatchOpts, sink chan<- *ETHDKGRegistrationComplete) (event.Subscription, error) {

	logs, sub, err := _ETHDKG.contract.WatchLogs(opts, "RegistrationComplete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGRegistrationComplete)
				if err := _ETHDKG.contract.UnpackLog(event, "RegistrationComplete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegistrationComplete is a log parse operation binding the contract event 0x833013b96b786b4eca83baac286920e5e53956c21ff3894f1d9f02e97d6ed764.
//
// Solidity: event RegistrationComplete(uint256 blockNumber)
func (_ETHDKG *ETHDKGFilterer) ParseRegistrationComplete(log types.Log) (*ETHDKGRegistrationComplete, error) {
	event := new(ETHDKGRegistrationComplete)
	if err := _ETHDKG.contract.UnpackLog(event, "RegistrationComplete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGRegistrationOpenedIterator is returned from FilterRegistrationOpened and is used to iterate over the raw logs and unpacked data for RegistrationOpened events raised by the ETHDKG contract.
type ETHDKGRegistrationOpenedIterator struct {
	Event *ETHDKGRegistrationOpened // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGRegistrationOpenedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGRegistrationOpened)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGRegistrationOpened)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGRegistrationOpenedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGRegistrationOpenedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGRegistrationOpened represents a RegistrationOpened event raised by the ETHDKG contract.
type ETHDKGRegistrationOpened struct {
	StartBlock         *big.Int
	NumberValidators   *big.Int
	Nonce              *big.Int
	PhaseLength        *big.Int
	ConfirmationLength *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterRegistrationOpened is a free log retrieval operation binding the contract event 0xbda431b9b63510f1398bf33d700e013315bcba905507078a1780f13ea5b354b9.
//
// Solidity: event RegistrationOpened(uint256 startBlock, uint256 numberValidators, uint256 nonce, uint256 phaseLength, uint256 confirmationLength)
func (_ETHDKG *ETHDKGFilterer) FilterRegistrationOpened(opts *bind.FilterOpts) (*ETHDKGRegistrationOpenedIterator, error) {

	logs, sub, err := _ETHDKG.contract.FilterLogs(opts, "RegistrationOpened")
	if err != nil {
		return nil, err
	}
	return &ETHDKGRegistrationOpenedIterator{contract: _ETHDKG.contract, event: "RegistrationOpened", logs: logs, sub: sub}, nil
}

// WatchRegistrationOpened is a free log subscription operation binding the contract event 0xbda431b9b63510f1398bf33d700e013315bcba905507078a1780f13ea5b354b9.
//
// Solidity: event RegistrationOpened(uint256 startBlock, uint256 numberValidators, uint256 nonce, uint256 phaseLength, uint256 confirmationLength)
func (_ETHDKG *ETHDKGFilterer) WatchRegistrationOpened(opts *bind.WatchOpts, sink chan<- *ETHDKGRegistrationOpened) (event.Subscription, error) {

	logs, sub, err := _ETHDKG.contract.WatchLogs(opts, "RegistrationOpened")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGRegistrationOpened)
				if err := _ETHDKG.contract.UnpackLog(event, "RegistrationOpened", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegistrationOpened is a log parse operation binding the contract event 0xbda431b9b63510f1398bf33d700e013315bcba905507078a1780f13ea5b354b9.
//
// Solidity: event RegistrationOpened(uint256 startBlock, uint256 numberValidators, uint256 nonce, uint256 phaseLength, uint256 confirmationLength)
func (_ETHDKG *ETHDKGFilterer) ParseRegistrationOpened(log types.Log) (*ETHDKGRegistrationOpened, error) {
	event := new(ETHDKGRegistrationOpened)
	if err := _ETHDKG.contract.UnpackLog(event, "RegistrationOpened", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGShareDistributionCompleteIterator is returned from FilterShareDistributionComplete and is used to iterate over the raw logs and unpacked data for ShareDistributionComplete events raised by the ETHDKG contract.
type ETHDKGShareDistributionCompleteIterator struct {
	Event *ETHDKGShareDistributionComplete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGShareDistributionCompleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGShareDistributionComplete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGShareDistributionComplete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGShareDistributionCompleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGShareDistributionCompleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGShareDistributionComplete represents a ShareDistributionComplete event raised by the ETHDKG contract.
type ETHDKGShareDistributionComplete struct {
	BlockNumber *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterShareDistributionComplete is a free log retrieval operation binding the contract event 0xbfe94ffef5ddde4d25ac7b652f3f67686ea63f9badbfe1f25451e26fc262d11c.
//
// Solidity: event ShareDistributionComplete(uint256 blockNumber)
func (_ETHDKG *ETHDKGFilterer) FilterShareDistributionComplete(opts *bind.FilterOpts) (*ETHDKGShareDistributionCompleteIterator, error) {

	logs, sub, err := _ETHDKG.contract.FilterLogs(opts, "ShareDistributionComplete")
	if err != nil {
		return nil, err
	}
	return &ETHDKGShareDistributionCompleteIterator{contract: _ETHDKG.contract, event: "ShareDistributionComplete", logs: logs, sub: sub}, nil
}

// WatchShareDistributionComplete is a free log subscription operation binding the contract event 0xbfe94ffef5ddde4d25ac7b652f3f67686ea63f9badbfe1f25451e26fc262d11c.
//
// Solidity: event ShareDistributionComplete(uint256 blockNumber)
func (_ETHDKG *ETHDKGFilterer) WatchShareDistributionComplete(opts *bind.WatchOpts, sink chan<- *ETHDKGShareDistributionComplete) (event.Subscription, error) {

	logs, sub, err := _ETHDKG.contract.WatchLogs(opts, "ShareDistributionComplete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGShareDistributionComplete)
				if err := _ETHDKG.contract.UnpackLog(event, "ShareDistributionComplete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseShareDistributionComplete is a log parse operation binding the contract event 0xbfe94ffef5ddde4d25ac7b652f3f67686ea63f9badbfe1f25451e26fc262d11c.
//
// Solidity: event ShareDistributionComplete(uint256 blockNumber)
func (_ETHDKG *ETHDKGFilterer) ParseShareDistributionComplete(log types.Log) (*ETHDKGShareDistributionComplete, error) {
	event := new(ETHDKGShareDistributionComplete)
	if err := _ETHDKG.contract.UnpackLog(event, "ShareDistributionComplete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGSharesDistributedIterator is returned from FilterSharesDistributed and is used to iterate over the raw logs and unpacked data for SharesDistributed events raised by the ETHDKG contract.
type ETHDKGSharesDistributedIterator struct {
	Event *ETHDKGSharesDistributed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGSharesDistributedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGSharesDistributed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGSharesDistributed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGSharesDistributedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGSharesDistributedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGSharesDistributed represents a SharesDistributed event raised by the ETHDKG contract.
type ETHDKGSharesDistributed struct {
	Account         common.Address
	Index           *big.Int
	Nonce           *big.Int
	EncryptedShares []*big.Int
	Commitments     [][2]*big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterSharesDistributed is a free log retrieval operation binding the contract event 0xf0c8b0ef2867c2b4639b404a0296b6bbf0bf97e20856af42144a5a6035c0d0d2.
//
// Solidity: event SharesDistributed(address account, uint256 index, uint256 nonce, uint256[] encryptedShares, uint256[2][] commitments)
func (_ETHDKG *ETHDKGFilterer) FilterSharesDistributed(opts *bind.FilterOpts) (*ETHDKGSharesDistributedIterator, error) {

	logs, sub, err := _ETHDKG.contract.FilterLogs(opts, "SharesDistributed")
	if err != nil {
		return nil, err
	}
	return &ETHDKGSharesDistributedIterator{contract: _ETHDKG.contract, event: "SharesDistributed", logs: logs, sub: sub}, nil
}

// WatchSharesDistributed is a free log subscription operation binding the contract event 0xf0c8b0ef2867c2b4639b404a0296b6bbf0bf97e20856af42144a5a6035c0d0d2.
//
// Solidity: event SharesDistributed(address account, uint256 index, uint256 nonce, uint256[] encryptedShares, uint256[2][] commitments)
func (_ETHDKG *ETHDKGFilterer) WatchSharesDistributed(opts *bind.WatchOpts, sink chan<- *ETHDKGSharesDistributed) (event.Subscription, error) {

	logs, sub, err := _ETHDKG.contract.WatchLogs(opts, "SharesDistributed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGSharesDistributed)
				if err := _ETHDKG.contract.UnpackLog(event, "SharesDistributed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSharesDistributed is a log parse operation binding the contract event 0xf0c8b0ef2867c2b4639b404a0296b6bbf0bf97e20856af42144a5a6035c0d0d2.
//
// Solidity: event SharesDistributed(address account, uint256 index, uint256 nonce, uint256[] encryptedShares, uint256[2][] commitments)
func (_ETHDKG *ETHDKGFilterer) ParseSharesDistributed(log types.Log) (*ETHDKGSharesDistributed, error) {
	event := new(ETHDKGSharesDistributed)
	if err := _ETHDKG.contract.UnpackLog(event, "SharesDistributed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGValidatorMemberAddedIterator is returned from FilterValidatorMemberAdded and is used to iterate over the raw logs and unpacked data for ValidatorMemberAdded events raised by the ETHDKG contract.
type ETHDKGValidatorMemberAddedIterator struct {
	Event *ETHDKGValidatorMemberAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGValidatorMemberAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGValidatorMemberAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGValidatorMemberAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGValidatorMemberAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGValidatorMemberAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGValidatorMemberAdded represents a ValidatorMemberAdded event raised by the ETHDKG contract.
type ETHDKGValidatorMemberAdded struct {
	Account common.Address
	Index   *big.Int
	Nonce   *big.Int
	Epoch   *big.Int
	Share0  *big.Int
	Share1  *big.Int
	Share2  *big.Int
	Share3  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterValidatorMemberAdded is a free log retrieval operation binding the contract event 0x09b90b08bbc3dbe22e9d2a0bc9c2c7614c7511cd0ad72177727a1e762115bf06.
//
// Solidity: event ValidatorMemberAdded(address account, uint256 index, uint256 nonce, uint256 epoch, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_ETHDKG *ETHDKGFilterer) FilterValidatorMemberAdded(opts *bind.FilterOpts) (*ETHDKGValidatorMemberAddedIterator, error) {

	logs, sub, err := _ETHDKG.contract.FilterLogs(opts, "ValidatorMemberAdded")
	if err != nil {
		return nil, err
	}
	return &ETHDKGValidatorMemberAddedIterator{contract: _ETHDKG.contract, event: "ValidatorMemberAdded", logs: logs, sub: sub}, nil
}

// WatchValidatorMemberAdded is a free log subscription operation binding the contract event 0x09b90b08bbc3dbe22e9d2a0bc9c2c7614c7511cd0ad72177727a1e762115bf06.
//
// Solidity: event ValidatorMemberAdded(address account, uint256 index, uint256 nonce, uint256 epoch, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_ETHDKG *ETHDKGFilterer) WatchValidatorMemberAdded(opts *bind.WatchOpts, sink chan<- *ETHDKGValidatorMemberAdded) (event.Subscription, error) {

	logs, sub, err := _ETHDKG.contract.WatchLogs(opts, "ValidatorMemberAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGValidatorMemberAdded)
				if err := _ETHDKG.contract.UnpackLog(event, "ValidatorMemberAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorMemberAdded is a log parse operation binding the contract event 0x09b90b08bbc3dbe22e9d2a0bc9c2c7614c7511cd0ad72177727a1e762115bf06.
//
// Solidity: event ValidatorMemberAdded(address account, uint256 index, uint256 nonce, uint256 epoch, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_ETHDKG *ETHDKGFilterer) ParseValidatorMemberAdded(log types.Log) (*ETHDKGValidatorMemberAdded, error) {
	event := new(ETHDKGValidatorMemberAdded)
	if err := _ETHDKG.contract.UnpackLog(event, "ValidatorMemberAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGValidatorSetCompletedIterator is returned from FilterValidatorSetCompleted and is used to iterate over the raw logs and unpacked data for ValidatorSetCompleted events raised by the ETHDKG contract.
type ETHDKGValidatorSetCompletedIterator struct {
	Event *ETHDKGValidatorSetCompleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGValidatorSetCompletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGValidatorSetCompleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGValidatorSetCompleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGValidatorSetCompletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGValidatorSetCompletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGValidatorSetCompleted represents a ValidatorSetCompleted event raised by the ETHDKG contract.
type ETHDKGValidatorSetCompleted struct {
	ValidatorCount *big.Int
	Nonce          *big.Int
	Epoch          *big.Int
	EthHeight      *big.Int
	MadHeight      *big.Int
	GroupKey0      *big.Int
	GroupKey1      *big.Int
	GroupKey2      *big.Int
	GroupKey3      *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterValidatorSetCompleted is a free log retrieval operation binding the contract event 0xd7237b781669fa700ecf77be6cd8fa0f4b98b1a24ac584a9b6b44c509216718a.
//
// Solidity: event ValidatorSetCompleted(uint256 validatorCount, uint256 nonce, uint256 epoch, uint256 ethHeight, uint256 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_ETHDKG *ETHDKGFilterer) FilterValidatorSetCompleted(opts *bind.FilterOpts) (*ETHDKGValidatorSetCompletedIterator, error) {

	logs, sub, err := _ETHDKG.contract.FilterLogs(opts, "ValidatorSetCompleted")
	if err != nil {
		return nil, err
	}
	return &ETHDKGValidatorSetCompletedIterator{contract: _ETHDKG.contract, event: "ValidatorSetCompleted", logs: logs, sub: sub}, nil
}

// WatchValidatorSetCompleted is a free log subscription operation binding the contract event 0xd7237b781669fa700ecf77be6cd8fa0f4b98b1a24ac584a9b6b44c509216718a.
//
// Solidity: event ValidatorSetCompleted(uint256 validatorCount, uint256 nonce, uint256 epoch, uint256 ethHeight, uint256 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_ETHDKG *ETHDKGFilterer) WatchValidatorSetCompleted(opts *bind.WatchOpts, sink chan<- *ETHDKGValidatorSetCompleted) (event.Subscription, error) {

	logs, sub, err := _ETHDKG.contract.WatchLogs(opts, "ValidatorSetCompleted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGValidatorSetCompleted)
				if err := _ETHDKG.contract.UnpackLog(event, "ValidatorSetCompleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorSetCompleted is a log parse operation binding the contract event 0xd7237b781669fa700ecf77be6cd8fa0f4b98b1a24ac584a9b6b44c509216718a.
//
// Solidity: event ValidatorSetCompleted(uint256 validatorCount, uint256 nonce, uint256 epoch, uint256 ethHeight, uint256 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_ETHDKG *ETHDKGFilterer) ParseValidatorSetCompleted(log types.Log) (*ETHDKGValidatorSetCompleted, error) {
	event := new(ETHDKGValidatorSetCompleted)
	if err := _ETHDKG.contract.UnpackLog(event, "ValidatorSetCompleted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGStorageMetaData contains all meta data concerning the ETHDKGStorage contract.
var ETHDKGStorageMetaData = &bind.MetaData{
	ABI: "[]",
}

// ETHDKGStorageABI is the input ABI used to generate the binding from.
// Deprecated: Use ETHDKGStorageMetaData.ABI instead.
var ETHDKGStorageABI = ETHDKGStorageMetaData.ABI

// ETHDKGStorage is an auto generated Go binding around an Ethereum contract.
type ETHDKGStorage struct {
	ETHDKGStorageCaller     // Read-only binding to the contract
	ETHDKGStorageTransactor // Write-only binding to the contract
	ETHDKGStorageFilterer   // Log filterer for contract events
}

// ETHDKGStorageCaller is an auto generated read-only Go binding around an Ethereum contract.
type ETHDKGStorageCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETHDKGStorageTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ETHDKGStorageTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETHDKGStorageFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ETHDKGStorageFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETHDKGStorageSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ETHDKGStorageSession struct {
	Contract     *ETHDKGStorage    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ETHDKGStorageCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ETHDKGStorageCallerSession struct {
	Contract *ETHDKGStorageCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// ETHDKGStorageTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ETHDKGStorageTransactorSession struct {
	Contract     *ETHDKGStorageTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// ETHDKGStorageRaw is an auto generated low-level Go binding around an Ethereum contract.
type ETHDKGStorageRaw struct {
	Contract *ETHDKGStorage // Generic contract binding to access the raw methods on
}

// ETHDKGStorageCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ETHDKGStorageCallerRaw struct {
	Contract *ETHDKGStorageCaller // Generic read-only contract binding to access the raw methods on
}

// ETHDKGStorageTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ETHDKGStorageTransactorRaw struct {
	Contract *ETHDKGStorageTransactor // Generic write-only contract binding to access the raw methods on
}

// NewETHDKGStorage creates a new instance of ETHDKGStorage, bound to a specific deployed contract.
func NewETHDKGStorage(address common.Address, backend bind.ContractBackend) (*ETHDKGStorage, error) {
	contract, err := bindETHDKGStorage(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ETHDKGStorage{ETHDKGStorageCaller: ETHDKGStorageCaller{contract: contract}, ETHDKGStorageTransactor: ETHDKGStorageTransactor{contract: contract}, ETHDKGStorageFilterer: ETHDKGStorageFilterer{contract: contract}}, nil
}

// NewETHDKGStorageCaller creates a new read-only instance of ETHDKGStorage, bound to a specific deployed contract.
func NewETHDKGStorageCaller(address common.Address, caller bind.ContractCaller) (*ETHDKGStorageCaller, error) {
	contract, err := bindETHDKGStorage(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ETHDKGStorageCaller{contract: contract}, nil
}

// NewETHDKGStorageTransactor creates a new write-only instance of ETHDKGStorage, bound to a specific deployed contract.
func NewETHDKGStorageTransactor(address common.Address, transactor bind.ContractTransactor) (*ETHDKGStorageTransactor, error) {
	contract, err := bindETHDKGStorage(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ETHDKGStorageTransactor{contract: contract}, nil
}

// NewETHDKGStorageFilterer creates a new log filterer instance of ETHDKGStorage, bound to a specific deployed contract.
func NewETHDKGStorageFilterer(address common.Address, filterer bind.ContractFilterer) (*ETHDKGStorageFilterer, error) {
	contract, err := bindETHDKGStorage(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ETHDKGStorageFilterer{contract: contract}, nil
}

// bindETHDKGStorage binds a generic wrapper to an already deployed contract.
func bindETHDKGStorage(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ETHDKGStorageABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ETHDKGStorage *ETHDKGStorageRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ETHDKGStorage.Contract.ETHDKGStorageCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ETHDKGStorage *ETHDKGStorageRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETHDKGStorage.Contract.ETHDKGStorageTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ETHDKGStorage *ETHDKGStorageRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ETHDKGStorage.Contract.ETHDKGStorageTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ETHDKGStorage *ETHDKGStorageCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ETHDKGStorage.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ETHDKGStorage *ETHDKGStorageTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETHDKGStorage.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ETHDKGStorage *ETHDKGStorageTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ETHDKGStorage.Contract.contract.Transact(opts, method, params...)
}

// ETHDKGUtilsMetaData contains all meta data concerning the ETHDKGUtils contract.
var ETHDKGUtilsMetaData = &bind.MetaData{
	ABI: "[]",
}

// ETHDKGUtilsABI is the input ABI used to generate the binding from.
// Deprecated: Use ETHDKGUtilsMetaData.ABI instead.
var ETHDKGUtilsABI = ETHDKGUtilsMetaData.ABI

// ETHDKGUtils is an auto generated Go binding around an Ethereum contract.
type ETHDKGUtils struct {
	ETHDKGUtilsCaller     // Read-only binding to the contract
	ETHDKGUtilsTransactor // Write-only binding to the contract
	ETHDKGUtilsFilterer   // Log filterer for contract events
}

// ETHDKGUtilsCaller is an auto generated read-only Go binding around an Ethereum contract.
type ETHDKGUtilsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETHDKGUtilsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ETHDKGUtilsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETHDKGUtilsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ETHDKGUtilsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETHDKGUtilsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ETHDKGUtilsSession struct {
	Contract     *ETHDKGUtils      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ETHDKGUtilsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ETHDKGUtilsCallerSession struct {
	Contract *ETHDKGUtilsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// ETHDKGUtilsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ETHDKGUtilsTransactorSession struct {
	Contract     *ETHDKGUtilsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// ETHDKGUtilsRaw is an auto generated low-level Go binding around an Ethereum contract.
type ETHDKGUtilsRaw struct {
	Contract *ETHDKGUtils // Generic contract binding to access the raw methods on
}

// ETHDKGUtilsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ETHDKGUtilsCallerRaw struct {
	Contract *ETHDKGUtilsCaller // Generic read-only contract binding to access the raw methods on
}

// ETHDKGUtilsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ETHDKGUtilsTransactorRaw struct {
	Contract *ETHDKGUtilsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewETHDKGUtils creates a new instance of ETHDKGUtils, bound to a specific deployed contract.
func NewETHDKGUtils(address common.Address, backend bind.ContractBackend) (*ETHDKGUtils, error) {
	contract, err := bindETHDKGUtils(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ETHDKGUtils{ETHDKGUtilsCaller: ETHDKGUtilsCaller{contract: contract}, ETHDKGUtilsTransactor: ETHDKGUtilsTransactor{contract: contract}, ETHDKGUtilsFilterer: ETHDKGUtilsFilterer{contract: contract}}, nil
}

// NewETHDKGUtilsCaller creates a new read-only instance of ETHDKGUtils, bound to a specific deployed contract.
func NewETHDKGUtilsCaller(address common.Address, caller bind.ContractCaller) (*ETHDKGUtilsCaller, error) {
	contract, err := bindETHDKGUtils(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ETHDKGUtilsCaller{contract: contract}, nil
}

// NewETHDKGUtilsTransactor creates a new write-only instance of ETHDKGUtils, bound to a specific deployed contract.
func NewETHDKGUtilsTransactor(address common.Address, transactor bind.ContractTransactor) (*ETHDKGUtilsTransactor, error) {
	contract, err := bindETHDKGUtils(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ETHDKGUtilsTransactor{contract: contract}, nil
}

// NewETHDKGUtilsFilterer creates a new log filterer instance of ETHDKGUtils, bound to a specific deployed contract.
func NewETHDKGUtilsFilterer(address common.Address, filterer bind.ContractFilterer) (*ETHDKGUtilsFilterer, error) {
	contract, err := bindETHDKGUtils(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ETHDKGUtilsFilterer{contract: contract}, nil
}

// bindETHDKGUtils binds a generic wrapper to an already deployed contract.
func bindETHDKGUtils(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ETHDKGUtilsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ETHDKGUtils *ETHDKGUtilsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ETHDKGUtils.Contract.ETHDKGUtilsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ETHDKGUtils *ETHDKGUtilsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETHDKGUtils.Contract.ETHDKGUtilsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ETHDKGUtils *ETHDKGUtilsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ETHDKGUtils.Contract.ETHDKGUtilsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ETHDKGUtils *ETHDKGUtilsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ETHDKGUtils.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ETHDKGUtils *ETHDKGUtilsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETHDKGUtils.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ETHDKGUtils *ETHDKGUtilsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ETHDKGUtils.Contract.contract.Transact(opts, method, params...)
}

// EthSafeTransferMetaData contains all meta data concerning the EthSafeTransfer contract.
var EthSafeTransferMetaData = &bind.MetaData{
	ABI: "[]",
}

// EthSafeTransferABI is the input ABI used to generate the binding from.
// Deprecated: Use EthSafeTransferMetaData.ABI instead.
var EthSafeTransferABI = EthSafeTransferMetaData.ABI

// EthSafeTransfer is an auto generated Go binding around an Ethereum contract.
type EthSafeTransfer struct {
	EthSafeTransferCaller     // Read-only binding to the contract
	EthSafeTransferTransactor // Write-only binding to the contract
	EthSafeTransferFilterer   // Log filterer for contract events
}

// EthSafeTransferCaller is an auto generated read-only Go binding around an Ethereum contract.
type EthSafeTransferCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EthSafeTransferTransactor is an auto generated write-only Go binding around an Ethereum contract.
type EthSafeTransferTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EthSafeTransferFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type EthSafeTransferFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EthSafeTransferSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type EthSafeTransferSession struct {
	Contract     *EthSafeTransfer  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// EthSafeTransferCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type EthSafeTransferCallerSession struct {
	Contract *EthSafeTransferCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// EthSafeTransferTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type EthSafeTransferTransactorSession struct {
	Contract     *EthSafeTransferTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// EthSafeTransferRaw is an auto generated low-level Go binding around an Ethereum contract.
type EthSafeTransferRaw struct {
	Contract *EthSafeTransfer // Generic contract binding to access the raw methods on
}

// EthSafeTransferCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type EthSafeTransferCallerRaw struct {
	Contract *EthSafeTransferCaller // Generic read-only contract binding to access the raw methods on
}

// EthSafeTransferTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type EthSafeTransferTransactorRaw struct {
	Contract *EthSafeTransferTransactor // Generic write-only contract binding to access the raw methods on
}

// NewEthSafeTransfer creates a new instance of EthSafeTransfer, bound to a specific deployed contract.
func NewEthSafeTransfer(address common.Address, backend bind.ContractBackend) (*EthSafeTransfer, error) {
	contract, err := bindEthSafeTransfer(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &EthSafeTransfer{EthSafeTransferCaller: EthSafeTransferCaller{contract: contract}, EthSafeTransferTransactor: EthSafeTransferTransactor{contract: contract}, EthSafeTransferFilterer: EthSafeTransferFilterer{contract: contract}}, nil
}

// NewEthSafeTransferCaller creates a new read-only instance of EthSafeTransfer, bound to a specific deployed contract.
func NewEthSafeTransferCaller(address common.Address, caller bind.ContractCaller) (*EthSafeTransferCaller, error) {
	contract, err := bindEthSafeTransfer(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &EthSafeTransferCaller{contract: contract}, nil
}

// NewEthSafeTransferTransactor creates a new write-only instance of EthSafeTransfer, bound to a specific deployed contract.
func NewEthSafeTransferTransactor(address common.Address, transactor bind.ContractTransactor) (*EthSafeTransferTransactor, error) {
	contract, err := bindEthSafeTransfer(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &EthSafeTransferTransactor{contract: contract}, nil
}

// NewEthSafeTransferFilterer creates a new log filterer instance of EthSafeTransfer, bound to a specific deployed contract.
func NewEthSafeTransferFilterer(address common.Address, filterer bind.ContractFilterer) (*EthSafeTransferFilterer, error) {
	contract, err := bindEthSafeTransfer(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &EthSafeTransferFilterer{contract: contract}, nil
}

// bindEthSafeTransfer binds a generic wrapper to an already deployed contract.
func bindEthSafeTransfer(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(EthSafeTransferABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_EthSafeTransfer *EthSafeTransferRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _EthSafeTransfer.Contract.EthSafeTransferCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_EthSafeTransfer *EthSafeTransferRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EthSafeTransfer.Contract.EthSafeTransferTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_EthSafeTransfer *EthSafeTransferRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _EthSafeTransfer.Contract.EthSafeTransferTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_EthSafeTransfer *EthSafeTransferCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _EthSafeTransfer.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_EthSafeTransfer *EthSafeTransferTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EthSafeTransfer.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_EthSafeTransfer *EthSafeTransferTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _EthSafeTransfer.Contract.contract.Transact(opts, method, params...)
}

// GovernanceMetaData contains all meta data concerning the Governance contract.
var GovernanceMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"getGovernance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isAllowedProposal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governance_\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// GovernanceABI is the input ABI used to generate the binding from.
// Deprecated: Use GovernanceMetaData.ABI instead.
var GovernanceABI = GovernanceMetaData.ABI

// Governance is an auto generated Go binding around an Ethereum contract.
type Governance struct {
	GovernanceCaller     // Read-only binding to the contract
	GovernanceTransactor // Write-only binding to the contract
	GovernanceFilterer   // Log filterer for contract events
}

// GovernanceCaller is an auto generated read-only Go binding around an Ethereum contract.
type GovernanceCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovernanceTransactor is an auto generated write-only Go binding around an Ethereum contract.
type GovernanceTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovernanceFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type GovernanceFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovernanceSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type GovernanceSession struct {
	Contract     *Governance       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// GovernanceCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type GovernanceCallerSession struct {
	Contract *GovernanceCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// GovernanceTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type GovernanceTransactorSession struct {
	Contract     *GovernanceTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// GovernanceRaw is an auto generated low-level Go binding around an Ethereum contract.
type GovernanceRaw struct {
	Contract *Governance // Generic contract binding to access the raw methods on
}

// GovernanceCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type GovernanceCallerRaw struct {
	Contract *GovernanceCaller // Generic read-only contract binding to access the raw methods on
}

// GovernanceTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type GovernanceTransactorRaw struct {
	Contract *GovernanceTransactor // Generic write-only contract binding to access the raw methods on
}

// NewGovernance creates a new instance of Governance, bound to a specific deployed contract.
func NewGovernance(address common.Address, backend bind.ContractBackend) (*Governance, error) {
	contract, err := bindGovernance(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Governance{GovernanceCaller: GovernanceCaller{contract: contract}, GovernanceTransactor: GovernanceTransactor{contract: contract}, GovernanceFilterer: GovernanceFilterer{contract: contract}}, nil
}

// NewGovernanceCaller creates a new read-only instance of Governance, bound to a specific deployed contract.
func NewGovernanceCaller(address common.Address, caller bind.ContractCaller) (*GovernanceCaller, error) {
	contract, err := bindGovernance(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &GovernanceCaller{contract: contract}, nil
}

// NewGovernanceTransactor creates a new write-only instance of Governance, bound to a specific deployed contract.
func NewGovernanceTransactor(address common.Address, transactor bind.ContractTransactor) (*GovernanceTransactor, error) {
	contract, err := bindGovernance(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &GovernanceTransactor{contract: contract}, nil
}

// NewGovernanceFilterer creates a new log filterer instance of Governance, bound to a specific deployed contract.
func NewGovernanceFilterer(address common.Address, filterer bind.ContractFilterer) (*GovernanceFilterer, error) {
	contract, err := bindGovernance(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &GovernanceFilterer{contract: contract}, nil
}

// bindGovernance binds a generic wrapper to an already deployed contract.
func bindGovernance(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(GovernanceABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Governance *GovernanceRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Governance.Contract.GovernanceCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Governance *GovernanceRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Governance.Contract.GovernanceTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Governance *GovernanceRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Governance.Contract.GovernanceTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Governance *GovernanceCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Governance.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Governance *GovernanceTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Governance.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Governance *GovernanceTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Governance.Contract.contract.Transact(opts, method, params...)
}

// GetGovernance is a free data retrieval call binding the contract method 0x289b3c0d.
//
// Solidity: function getGovernance() view returns(address)
func (_Governance *GovernanceCaller) GetGovernance(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Governance.contract.Call(opts, &out, "getGovernance")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetGovernance is a free data retrieval call binding the contract method 0x289b3c0d.
//
// Solidity: function getGovernance() view returns(address)
func (_Governance *GovernanceSession) GetGovernance() (common.Address, error) {
	return _Governance.Contract.GetGovernance(&_Governance.CallOpts)
}

// GetGovernance is a free data retrieval call binding the contract method 0x289b3c0d.
//
// Solidity: function getGovernance() view returns(address)
func (_Governance *GovernanceCallerSession) GetGovernance() (common.Address, error) {
	return _Governance.Contract.GetGovernance(&_Governance.CallOpts)
}

// IsAllowedProposal is a free data retrieval call binding the contract method 0x3771165e.
//
// Solidity: function isAllowedProposal(address addr) view returns(bool)
func (_Governance *GovernanceCaller) IsAllowedProposal(opts *bind.CallOpts, addr common.Address) (bool, error) {
	var out []interface{}
	err := _Governance.contract.Call(opts, &out, "isAllowedProposal", addr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsAllowedProposal is a free data retrieval call binding the contract method 0x3771165e.
//
// Solidity: function isAllowedProposal(address addr) view returns(bool)
func (_Governance *GovernanceSession) IsAllowedProposal(addr common.Address) (bool, error) {
	return _Governance.Contract.IsAllowedProposal(&_Governance.CallOpts, addr)
}

// IsAllowedProposal is a free data retrieval call binding the contract method 0x3771165e.
//
// Solidity: function isAllowedProposal(address addr) view returns(bool)
func (_Governance *GovernanceCallerSession) IsAllowedProposal(addr common.Address) (bool, error) {
	return _Governance.Contract.IsAllowedProposal(&_Governance.CallOpts, addr)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_Governance *GovernanceTransactor) SetGovernance(opts *bind.TransactOpts, governance_ common.Address) (*types.Transaction, error) {
	return _Governance.contract.Transact(opts, "setGovernance", governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_Governance *GovernanceSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _Governance.Contract.SetGovernance(&_Governance.TransactOpts, governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_Governance *GovernanceTransactorSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _Governance.Contract.SetGovernance(&_Governance.TransactOpts, governance_)
}

// GovernanceManagerMetaData contains all meta data concerning the GovernanceManager contract.
var GovernanceManagerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Stake_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"MinerStake_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"allowedProposal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalID_\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinerStakeTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalID_\",\"type\":\"uint256\"}],\"name\":\"getProposal\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"logic\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"voteCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockEndVote\",\"type\":\"uint256\"}],\"internalType\":\"structGovernanceStorage.Proposal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalID_\",\"type\":\"uint256\"}],\"name\":\"isProposalExecuted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"logic_\",\"type\":\"address\"}],\"name\":\"propose\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalID_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"voteAsMiner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalID_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"voteAsStaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040526000805534801561001457600080fd5b506040516111263803806111268339810160408190526100339161008f565b600180546001600160a01b039384166001600160a01b031991821617909155600280549290931691161790556a5ccf4630096a8c5d0000006003556100c2565b80516001600160a01b038116811461008a57600080fd5b919050565b600080604083850312156100a257600080fd5b6100ab83610073565b91506100b960208401610073565b90509250929050565b611055806100d16000396000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c8063a35d463311610076578063d00c1aec1161005b578063d00c1aec146101b1578063f4f58000146101d4578063fe0d94c1146101f457600080fd5b8063a35d463314610140578063c7f758a81461015357600080fd5b806301267951146100a85780632590edcb146100ce57806385e52ffe1461010d5780638b0441e214610122575b600080fd5b6100bb6100b6366004610ef5565b610207565b6040519081526020015b60405180910390f35b60025473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100c5565b61012061011b366004610f32565b6103cc565b005b60015473ffffffffffffffffffffffffffffffffffffffff166100e8565b61012061014e366004610f32565b6103f5565b610166610161366004610f54565b610419565b6040516100c5919081511515815260208083015173ffffffffffffffffffffffffffffffffffffffff1690820152604080830151908201526060918201519181019190915260800190565b6101c46101bf366004610f54565b61052e565b60405190151581526020016100c5565b6006546100e89073ffffffffffffffffffffffffffffffffffffffff1681565b610120610202366004610f54565b6105de565b600073ffffffffffffffffffffffffffffffffffffffff82166102d7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604960248201527f476f7665726e616e63654d616e616765723a204c6f676963206164647265737360448201527f206d75737420626520646966666572656e742066726f6d20746865207a65726f60648201527f2061646472657373210000000000000000000000000000000000000000000000608482015260a4015b60405180910390fd5b60408051608081018252600080825273ffffffffffffffffffffffffffffffffffffffff85166020830152918101829052606081016103196202a30043610f9c565b90529050610325610a22565b60008181526005602090815260409182902084518154928601517fffffffffffffffffffffff0000000000000000000000000000000000000000009093169015157fffffffffffffffffffffff0000000000000000000000000000000000000000ff161761010073ffffffffffffffffffffffffffffffffffffffff9093169290920291909117815590830151600182015560609092015160029092019190915592915050565b60025473ffffffffffffffffffffffffffffffffffffffff166103f0818484610a3a565b505050565b60015473ffffffffffffffffffffffffffffffffffffffff166103f0818484610a3a565b604080516080810182526000808252602082018190529181018290526060810182905290548211156104cd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f476f7665726e616e63654d616e616765723a20496e76616c69642070726f706f60448201527f73616c204944000000000000000000000000000000000000000000000000000060648201526084016102ce565b506000908152600560209081526040918290208251608081018452815460ff811615158252610100900473ffffffffffffffffffffffffffffffffffffffff1692810192909252600181015492820192909252600290910154606082015290565b60008161053a60005490565b10156105c8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f476f7665726e616e63654d616e616765723a20496e76616c69642070726f706f60448201527f73616c204944000000000000000000000000000000000000000000000000000060648201526084016102ce565b5060009081526005602052604090205460ff1690565b806105e860005490565b1015610676576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f476f7665726e616e63654d616e616765723a20496e76616c69642070726f706f60448201527f73616c204944000000000000000000000000000000000000000000000000000060648201526084016102ce565b6000818152600560209081526040918290208251608081018452815460ff811615158252610100900473ffffffffffffffffffffffffffffffffffffffff1692810192909252600181015492820183905260020154606082015260035490911015610763576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f476f7665726e616e63654d616e616765723a2050726f706f73616c20646f657360448201527f206e6f74206861766520656e6f75676820766f7465730000000000000000000060648201526084016102ce565b8051156107f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f476f7665726e616e63654d616e616765723a20546869732070726f706f73616c60448201527f20686173206265656e20657865637574656420616c726561647900000000000060648201526084016102ce565b6001808252600083815260056020908152604080832085518154938701517fffffffffffffffffffffff0000000000000000000000000000000000000000009094169015157fffffffffffffffffffffff0000000000000000000000000000000000000000ff161761010073ffffffffffffffffffffffffffffffffffffffff90941693840217815581860151948101949094556060850151600290940193909355915160248101839052909190604401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f4b64e49200000000000000000000000000000000000000000000000000000000179052516109249190610fb4565b600060405180830381855af49150503d806000811461095f576040519150601f19603f3d011682016040523d82523d6000602084013e610964565b606091505b50509050806109f5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603460248201527f476f7665726e616e63654d616e616765723a2043414c4c204641494c4544207460448201527f6f2070726f706f73616c2065786563757465282900000000000000000000000060648201526084016102ce565b5050600680547fffffffffffffffffffffffff000000000000000000000000000000000000000016905550565b600054610a30600182610f9c565b6000819055919050565b81610a4460005490565b1015610ad2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f476f7665726e616e63654d616e616765723a20496e76616c69642070726f706f60448201527f73616c204944000000000000000000000000000000000000000000000000000060648201526084016102ce565b6000828152600560209081526040918290208251608081018452815460ff811615158252610100900473ffffffffffffffffffffffffffffffffffffffff169281019290925260018101549282019290925260029091015460608201819052431115610bc0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603760248201527f476f7665726e616e63654d616e616765723a2043616e6e6f7420766f7465206f60448201527f6e20746869732070726f706f73616c20616e796d6f726500000000000000000060648201526084016102ce565b805115610c4f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f476f7665726e616e63654d616e616765723a20546869732070726f706f73616c60448201527f20686173206265656e20657865637574656420616c726561647900000000000060648201526084016102ce565b600083815260046020908152604080832073ffffffffffffffffffffffffffffffffffffffff88168452825280832085845290915290205460ff1615610d17576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603560248201527f476f7665726e616e63654d616e616765723a20596f7520616c7265616479207660448201527f6f746564206f6e20746869732070726f706f73616c000000000000000000000060648201526084016102ce565b600083815260046020908152604080832073ffffffffffffffffffffffffffffffffffffffff8816808552908352818420868552909252822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790556060830151630cc65dfb9033908690610d93904390610fef565b610d9e906001610f9c565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff9093166004840152602483019190915260448201526064016020604051808303816000875af1158015610e16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3a9190611006565b90508082604001818151610e4e9190610f9c565b9052505060009283526005602090815260409384902082518154928401517fffffffffffffffffffffff0000000000000000000000000000000000000000009093169015157fffffffffffffffffffffff0000000000000000000000000000000000000000ff161761010073ffffffffffffffffffffffffffffffffffffffff90931692909202919091178155928101516001840155606001516002909201919091555050565b600060208284031215610f0757600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610f2b57600080fd5b9392505050565b60008060408385031215610f4557600080fd5b50508035926020909101359150565b600060208284031215610f6657600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115610faf57610faf610f6d565b500190565b6000825160005b81811015610fd55760208186018101518583015201610fbb565b81811115610fe4576000828501525b509190910192915050565b60008282101561100157611001610f6d565b500390565b60006020828403121561101857600080fd5b505191905056fea26469706673582212208e71958f84dae89602b85aef5d1fd3cd03888f311e819646e492a58c28a88b7d64736f6c634300080b0033",
}

// GovernanceManagerABI is the input ABI used to generate the binding from.
// Deprecated: Use GovernanceManagerMetaData.ABI instead.
var GovernanceManagerABI = GovernanceManagerMetaData.ABI

// GovernanceManagerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use GovernanceManagerMetaData.Bin instead.
var GovernanceManagerBin = GovernanceManagerMetaData.Bin

// DeployGovernanceManager deploys a new Ethereum contract, binding an instance of GovernanceManager to it.
func DeployGovernanceManager(auth *bind.TransactOpts, backend bind.ContractBackend, Stake_ common.Address, MinerStake_ common.Address) (common.Address, *types.Transaction, *GovernanceManager, error) {
	parsed, err := GovernanceManagerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(GovernanceManagerBin), backend, Stake_, MinerStake_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &GovernanceManager{GovernanceManagerCaller: GovernanceManagerCaller{contract: contract}, GovernanceManagerTransactor: GovernanceManagerTransactor{contract: contract}, GovernanceManagerFilterer: GovernanceManagerFilterer{contract: contract}}, nil
}

// GovernanceManager is an auto generated Go binding around an Ethereum contract.
type GovernanceManager struct {
	GovernanceManagerCaller     // Read-only binding to the contract
	GovernanceManagerTransactor // Write-only binding to the contract
	GovernanceManagerFilterer   // Log filterer for contract events
}

// GovernanceManagerCaller is an auto generated read-only Go binding around an Ethereum contract.
type GovernanceManagerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovernanceManagerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type GovernanceManagerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovernanceManagerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type GovernanceManagerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovernanceManagerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type GovernanceManagerSession struct {
	Contract     *GovernanceManager // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// GovernanceManagerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type GovernanceManagerCallerSession struct {
	Contract *GovernanceManagerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// GovernanceManagerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type GovernanceManagerTransactorSession struct {
	Contract     *GovernanceManagerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// GovernanceManagerRaw is an auto generated low-level Go binding around an Ethereum contract.
type GovernanceManagerRaw struct {
	Contract *GovernanceManager // Generic contract binding to access the raw methods on
}

// GovernanceManagerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type GovernanceManagerCallerRaw struct {
	Contract *GovernanceManagerCaller // Generic read-only contract binding to access the raw methods on
}

// GovernanceManagerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type GovernanceManagerTransactorRaw struct {
	Contract *GovernanceManagerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewGovernanceManager creates a new instance of GovernanceManager, bound to a specific deployed contract.
func NewGovernanceManager(address common.Address, backend bind.ContractBackend) (*GovernanceManager, error) {
	contract, err := bindGovernanceManager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &GovernanceManager{GovernanceManagerCaller: GovernanceManagerCaller{contract: contract}, GovernanceManagerTransactor: GovernanceManagerTransactor{contract: contract}, GovernanceManagerFilterer: GovernanceManagerFilterer{contract: contract}}, nil
}

// NewGovernanceManagerCaller creates a new read-only instance of GovernanceManager, bound to a specific deployed contract.
func NewGovernanceManagerCaller(address common.Address, caller bind.ContractCaller) (*GovernanceManagerCaller, error) {
	contract, err := bindGovernanceManager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &GovernanceManagerCaller{contract: contract}, nil
}

// NewGovernanceManagerTransactor creates a new write-only instance of GovernanceManager, bound to a specific deployed contract.
func NewGovernanceManagerTransactor(address common.Address, transactor bind.ContractTransactor) (*GovernanceManagerTransactor, error) {
	contract, err := bindGovernanceManager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &GovernanceManagerTransactor{contract: contract}, nil
}

// NewGovernanceManagerFilterer creates a new log filterer instance of GovernanceManager, bound to a specific deployed contract.
func NewGovernanceManagerFilterer(address common.Address, filterer bind.ContractFilterer) (*GovernanceManagerFilterer, error) {
	contract, err := bindGovernanceManager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &GovernanceManagerFilterer{contract: contract}, nil
}

// bindGovernanceManager binds a generic wrapper to an already deployed contract.
func bindGovernanceManager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(GovernanceManagerABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_GovernanceManager *GovernanceManagerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _GovernanceManager.Contract.GovernanceManagerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_GovernanceManager *GovernanceManagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GovernanceManager.Contract.GovernanceManagerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_GovernanceManager *GovernanceManagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _GovernanceManager.Contract.GovernanceManagerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_GovernanceManager *GovernanceManagerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _GovernanceManager.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_GovernanceManager *GovernanceManagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GovernanceManager.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_GovernanceManager *GovernanceManagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _GovernanceManager.Contract.contract.Transact(opts, method, params...)
}

// AllowedProposal is a free data retrieval call binding the contract method 0xf4f58000.
//
// Solidity: function allowedProposal() view returns(address)
func (_GovernanceManager *GovernanceManagerCaller) AllowedProposal(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _GovernanceManager.contract.Call(opts, &out, "allowedProposal")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AllowedProposal is a free data retrieval call binding the contract method 0xf4f58000.
//
// Solidity: function allowedProposal() view returns(address)
func (_GovernanceManager *GovernanceManagerSession) AllowedProposal() (common.Address, error) {
	return _GovernanceManager.Contract.AllowedProposal(&_GovernanceManager.CallOpts)
}

// AllowedProposal is a free data retrieval call binding the contract method 0xf4f58000.
//
// Solidity: function allowedProposal() view returns(address)
func (_GovernanceManager *GovernanceManagerCallerSession) AllowedProposal() (common.Address, error) {
	return _GovernanceManager.Contract.AllowedProposal(&_GovernanceManager.CallOpts)
}

// GetMinerStakeTokenAddress is a free data retrieval call binding the contract method 0x2590edcb.
//
// Solidity: function getMinerStakeTokenAddress() view returns(address)
func (_GovernanceManager *GovernanceManagerCaller) GetMinerStakeTokenAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _GovernanceManager.contract.Call(opts, &out, "getMinerStakeTokenAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetMinerStakeTokenAddress is a free data retrieval call binding the contract method 0x2590edcb.
//
// Solidity: function getMinerStakeTokenAddress() view returns(address)
func (_GovernanceManager *GovernanceManagerSession) GetMinerStakeTokenAddress() (common.Address, error) {
	return _GovernanceManager.Contract.GetMinerStakeTokenAddress(&_GovernanceManager.CallOpts)
}

// GetMinerStakeTokenAddress is a free data retrieval call binding the contract method 0x2590edcb.
//
// Solidity: function getMinerStakeTokenAddress() view returns(address)
func (_GovernanceManager *GovernanceManagerCallerSession) GetMinerStakeTokenAddress() (common.Address, error) {
	return _GovernanceManager.Contract.GetMinerStakeTokenAddress(&_GovernanceManager.CallOpts)
}

// GetProposal is a free data retrieval call binding the contract method 0xc7f758a8.
//
// Solidity: function getProposal(uint256 proposalID_) view returns((bool,address,uint256,uint256))
func (_GovernanceManager *GovernanceManagerCaller) GetProposal(opts *bind.CallOpts, proposalID_ *big.Int) (GovernanceStorageProposal, error) {
	var out []interface{}
	err := _GovernanceManager.contract.Call(opts, &out, "getProposal", proposalID_)

	if err != nil {
		return *new(GovernanceStorageProposal), err
	}

	out0 := *abi.ConvertType(out[0], new(GovernanceStorageProposal)).(*GovernanceStorageProposal)

	return out0, err

}

// GetProposal is a free data retrieval call binding the contract method 0xc7f758a8.
//
// Solidity: function getProposal(uint256 proposalID_) view returns((bool,address,uint256,uint256))
func (_GovernanceManager *GovernanceManagerSession) GetProposal(proposalID_ *big.Int) (GovernanceStorageProposal, error) {
	return _GovernanceManager.Contract.GetProposal(&_GovernanceManager.CallOpts, proposalID_)
}

// GetProposal is a free data retrieval call binding the contract method 0xc7f758a8.
//
// Solidity: function getProposal(uint256 proposalID_) view returns((bool,address,uint256,uint256))
func (_GovernanceManager *GovernanceManagerCallerSession) GetProposal(proposalID_ *big.Int) (GovernanceStorageProposal, error) {
	return _GovernanceManager.Contract.GetProposal(&_GovernanceManager.CallOpts, proposalID_)
}

// GetStakeTokenAddress is a free data retrieval call binding the contract method 0x8b0441e2.
//
// Solidity: function getStakeTokenAddress() view returns(address)
func (_GovernanceManager *GovernanceManagerCaller) GetStakeTokenAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _GovernanceManager.contract.Call(opts, &out, "getStakeTokenAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetStakeTokenAddress is a free data retrieval call binding the contract method 0x8b0441e2.
//
// Solidity: function getStakeTokenAddress() view returns(address)
func (_GovernanceManager *GovernanceManagerSession) GetStakeTokenAddress() (common.Address, error) {
	return _GovernanceManager.Contract.GetStakeTokenAddress(&_GovernanceManager.CallOpts)
}

// GetStakeTokenAddress is a free data retrieval call binding the contract method 0x8b0441e2.
//
// Solidity: function getStakeTokenAddress() view returns(address)
func (_GovernanceManager *GovernanceManagerCallerSession) GetStakeTokenAddress() (common.Address, error) {
	return _GovernanceManager.Contract.GetStakeTokenAddress(&_GovernanceManager.CallOpts)
}

// IsProposalExecuted is a free data retrieval call binding the contract method 0xd00c1aec.
//
// Solidity: function isProposalExecuted(uint256 proposalID_) view returns(bool)
func (_GovernanceManager *GovernanceManagerCaller) IsProposalExecuted(opts *bind.CallOpts, proposalID_ *big.Int) (bool, error) {
	var out []interface{}
	err := _GovernanceManager.contract.Call(opts, &out, "isProposalExecuted", proposalID_)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsProposalExecuted is a free data retrieval call binding the contract method 0xd00c1aec.
//
// Solidity: function isProposalExecuted(uint256 proposalID_) view returns(bool)
func (_GovernanceManager *GovernanceManagerSession) IsProposalExecuted(proposalID_ *big.Int) (bool, error) {
	return _GovernanceManager.Contract.IsProposalExecuted(&_GovernanceManager.CallOpts, proposalID_)
}

// IsProposalExecuted is a free data retrieval call binding the contract method 0xd00c1aec.
//
// Solidity: function isProposalExecuted(uint256 proposalID_) view returns(bool)
func (_GovernanceManager *GovernanceManagerCallerSession) IsProposalExecuted(proposalID_ *big.Int) (bool, error) {
	return _GovernanceManager.Contract.IsProposalExecuted(&_GovernanceManager.CallOpts, proposalID_)
}

// Execute is a paid mutator transaction binding the contract method 0xfe0d94c1.
//
// Solidity: function execute(uint256 proposalID_) returns()
func (_GovernanceManager *GovernanceManagerTransactor) Execute(opts *bind.TransactOpts, proposalID_ *big.Int) (*types.Transaction, error) {
	return _GovernanceManager.contract.Transact(opts, "execute", proposalID_)
}

// Execute is a paid mutator transaction binding the contract method 0xfe0d94c1.
//
// Solidity: function execute(uint256 proposalID_) returns()
func (_GovernanceManager *GovernanceManagerSession) Execute(proposalID_ *big.Int) (*types.Transaction, error) {
	return _GovernanceManager.Contract.Execute(&_GovernanceManager.TransactOpts, proposalID_)
}

// Execute is a paid mutator transaction binding the contract method 0xfe0d94c1.
//
// Solidity: function execute(uint256 proposalID_) returns()
func (_GovernanceManager *GovernanceManagerTransactorSession) Execute(proposalID_ *big.Int) (*types.Transaction, error) {
	return _GovernanceManager.Contract.Execute(&_GovernanceManager.TransactOpts, proposalID_)
}

// Propose is a paid mutator transaction binding the contract method 0x01267951.
//
// Solidity: function propose(address logic_) returns(uint256 proposalID)
func (_GovernanceManager *GovernanceManagerTransactor) Propose(opts *bind.TransactOpts, logic_ common.Address) (*types.Transaction, error) {
	return _GovernanceManager.contract.Transact(opts, "propose", logic_)
}

// Propose is a paid mutator transaction binding the contract method 0x01267951.
//
// Solidity: function propose(address logic_) returns(uint256 proposalID)
func (_GovernanceManager *GovernanceManagerSession) Propose(logic_ common.Address) (*types.Transaction, error) {
	return _GovernanceManager.Contract.Propose(&_GovernanceManager.TransactOpts, logic_)
}

// Propose is a paid mutator transaction binding the contract method 0x01267951.
//
// Solidity: function propose(address logic_) returns(uint256 proposalID)
func (_GovernanceManager *GovernanceManagerTransactorSession) Propose(logic_ common.Address) (*types.Transaction, error) {
	return _GovernanceManager.Contract.Propose(&_GovernanceManager.TransactOpts, logic_)
}

// VoteAsMiner is a paid mutator transaction binding the contract method 0x85e52ffe.
//
// Solidity: function voteAsMiner(uint256 proposalID_, uint256 tokenID_) returns()
func (_GovernanceManager *GovernanceManagerTransactor) VoteAsMiner(opts *bind.TransactOpts, proposalID_ *big.Int, tokenID_ *big.Int) (*types.Transaction, error) {
	return _GovernanceManager.contract.Transact(opts, "voteAsMiner", proposalID_, tokenID_)
}

// VoteAsMiner is a paid mutator transaction binding the contract method 0x85e52ffe.
//
// Solidity: function voteAsMiner(uint256 proposalID_, uint256 tokenID_) returns()
func (_GovernanceManager *GovernanceManagerSession) VoteAsMiner(proposalID_ *big.Int, tokenID_ *big.Int) (*types.Transaction, error) {
	return _GovernanceManager.Contract.VoteAsMiner(&_GovernanceManager.TransactOpts, proposalID_, tokenID_)
}

// VoteAsMiner is a paid mutator transaction binding the contract method 0x85e52ffe.
//
// Solidity: function voteAsMiner(uint256 proposalID_, uint256 tokenID_) returns()
func (_GovernanceManager *GovernanceManagerTransactorSession) VoteAsMiner(proposalID_ *big.Int, tokenID_ *big.Int) (*types.Transaction, error) {
	return _GovernanceManager.Contract.VoteAsMiner(&_GovernanceManager.TransactOpts, proposalID_, tokenID_)
}

// VoteAsStaker is a paid mutator transaction binding the contract method 0xa35d4633.
//
// Solidity: function voteAsStaker(uint256 proposalID_, uint256 tokenID_) returns()
func (_GovernanceManager *GovernanceManagerTransactor) VoteAsStaker(opts *bind.TransactOpts, proposalID_ *big.Int, tokenID_ *big.Int) (*types.Transaction, error) {
	return _GovernanceManager.contract.Transact(opts, "voteAsStaker", proposalID_, tokenID_)
}

// VoteAsStaker is a paid mutator transaction binding the contract method 0xa35d4633.
//
// Solidity: function voteAsStaker(uint256 proposalID_, uint256 tokenID_) returns()
func (_GovernanceManager *GovernanceManagerSession) VoteAsStaker(proposalID_ *big.Int, tokenID_ *big.Int) (*types.Transaction, error) {
	return _GovernanceManager.Contract.VoteAsStaker(&_GovernanceManager.TransactOpts, proposalID_, tokenID_)
}

// VoteAsStaker is a paid mutator transaction binding the contract method 0xa35d4633.
//
// Solidity: function voteAsStaker(uint256 proposalID_, uint256 tokenID_) returns()
func (_GovernanceManager *GovernanceManagerTransactorSession) VoteAsStaker(proposalID_ *big.Int, tokenID_ *big.Int) (*types.Transaction, error) {
	return _GovernanceManager.Contract.VoteAsStaker(&_GovernanceManager.TransactOpts, proposalID_, tokenID_)
}

// GovernanceMaxLockMetaData contains all meta data concerning the GovernanceMaxLock contract.
var GovernanceMaxLockMetaData = &bind.MetaData{
	ABI: "[]",
}

// GovernanceMaxLockABI is the input ABI used to generate the binding from.
// Deprecated: Use GovernanceMaxLockMetaData.ABI instead.
var GovernanceMaxLockABI = GovernanceMaxLockMetaData.ABI

// GovernanceMaxLock is an auto generated Go binding around an Ethereum contract.
type GovernanceMaxLock struct {
	GovernanceMaxLockCaller     // Read-only binding to the contract
	GovernanceMaxLockTransactor // Write-only binding to the contract
	GovernanceMaxLockFilterer   // Log filterer for contract events
}

// GovernanceMaxLockCaller is an auto generated read-only Go binding around an Ethereum contract.
type GovernanceMaxLockCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovernanceMaxLockTransactor is an auto generated write-only Go binding around an Ethereum contract.
type GovernanceMaxLockTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovernanceMaxLockFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type GovernanceMaxLockFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovernanceMaxLockSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type GovernanceMaxLockSession struct {
	Contract     *GovernanceMaxLock // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// GovernanceMaxLockCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type GovernanceMaxLockCallerSession struct {
	Contract *GovernanceMaxLockCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// GovernanceMaxLockTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type GovernanceMaxLockTransactorSession struct {
	Contract     *GovernanceMaxLockTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// GovernanceMaxLockRaw is an auto generated low-level Go binding around an Ethereum contract.
type GovernanceMaxLockRaw struct {
	Contract *GovernanceMaxLock // Generic contract binding to access the raw methods on
}

// GovernanceMaxLockCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type GovernanceMaxLockCallerRaw struct {
	Contract *GovernanceMaxLockCaller // Generic read-only contract binding to access the raw methods on
}

// GovernanceMaxLockTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type GovernanceMaxLockTransactorRaw struct {
	Contract *GovernanceMaxLockTransactor // Generic write-only contract binding to access the raw methods on
}

// NewGovernanceMaxLock creates a new instance of GovernanceMaxLock, bound to a specific deployed contract.
func NewGovernanceMaxLock(address common.Address, backend bind.ContractBackend) (*GovernanceMaxLock, error) {
	contract, err := bindGovernanceMaxLock(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &GovernanceMaxLock{GovernanceMaxLockCaller: GovernanceMaxLockCaller{contract: contract}, GovernanceMaxLockTransactor: GovernanceMaxLockTransactor{contract: contract}, GovernanceMaxLockFilterer: GovernanceMaxLockFilterer{contract: contract}}, nil
}

// NewGovernanceMaxLockCaller creates a new read-only instance of GovernanceMaxLock, bound to a specific deployed contract.
func NewGovernanceMaxLockCaller(address common.Address, caller bind.ContractCaller) (*GovernanceMaxLockCaller, error) {
	contract, err := bindGovernanceMaxLock(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &GovernanceMaxLockCaller{contract: contract}, nil
}

// NewGovernanceMaxLockTransactor creates a new write-only instance of GovernanceMaxLock, bound to a specific deployed contract.
func NewGovernanceMaxLockTransactor(address common.Address, transactor bind.ContractTransactor) (*GovernanceMaxLockTransactor, error) {
	contract, err := bindGovernanceMaxLock(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &GovernanceMaxLockTransactor{contract: contract}, nil
}

// NewGovernanceMaxLockFilterer creates a new log filterer instance of GovernanceMaxLock, bound to a specific deployed contract.
func NewGovernanceMaxLockFilterer(address common.Address, filterer bind.ContractFilterer) (*GovernanceMaxLockFilterer, error) {
	contract, err := bindGovernanceMaxLock(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &GovernanceMaxLockFilterer{contract: contract}, nil
}

// bindGovernanceMaxLock binds a generic wrapper to an already deployed contract.
func bindGovernanceMaxLock(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(GovernanceMaxLockABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_GovernanceMaxLock *GovernanceMaxLockRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _GovernanceMaxLock.Contract.GovernanceMaxLockCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_GovernanceMaxLock *GovernanceMaxLockRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GovernanceMaxLock.Contract.GovernanceMaxLockTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_GovernanceMaxLock *GovernanceMaxLockRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _GovernanceMaxLock.Contract.GovernanceMaxLockTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_GovernanceMaxLock *GovernanceMaxLockCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _GovernanceMaxLock.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_GovernanceMaxLock *GovernanceMaxLockTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GovernanceMaxLock.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_GovernanceMaxLock *GovernanceMaxLockTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _GovernanceMaxLock.Contract.contract.Transact(opts, method, params...)
}

// GovernanceStorageMetaData contains all meta data concerning the GovernanceStorage contract.
var GovernanceStorageMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"allowedProposal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// GovernanceStorageABI is the input ABI used to generate the binding from.
// Deprecated: Use GovernanceStorageMetaData.ABI instead.
var GovernanceStorageABI = GovernanceStorageMetaData.ABI

// GovernanceStorage is an auto generated Go binding around an Ethereum contract.
type GovernanceStorage struct {
	GovernanceStorageCaller     // Read-only binding to the contract
	GovernanceStorageTransactor // Write-only binding to the contract
	GovernanceStorageFilterer   // Log filterer for contract events
}

// GovernanceStorageCaller is an auto generated read-only Go binding around an Ethereum contract.
type GovernanceStorageCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovernanceStorageTransactor is an auto generated write-only Go binding around an Ethereum contract.
type GovernanceStorageTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovernanceStorageFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type GovernanceStorageFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovernanceStorageSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type GovernanceStorageSession struct {
	Contract     *GovernanceStorage // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// GovernanceStorageCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type GovernanceStorageCallerSession struct {
	Contract *GovernanceStorageCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// GovernanceStorageTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type GovernanceStorageTransactorSession struct {
	Contract     *GovernanceStorageTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// GovernanceStorageRaw is an auto generated low-level Go binding around an Ethereum contract.
type GovernanceStorageRaw struct {
	Contract *GovernanceStorage // Generic contract binding to access the raw methods on
}

// GovernanceStorageCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type GovernanceStorageCallerRaw struct {
	Contract *GovernanceStorageCaller // Generic read-only contract binding to access the raw methods on
}

// GovernanceStorageTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type GovernanceStorageTransactorRaw struct {
	Contract *GovernanceStorageTransactor // Generic write-only contract binding to access the raw methods on
}

// NewGovernanceStorage creates a new instance of GovernanceStorage, bound to a specific deployed contract.
func NewGovernanceStorage(address common.Address, backend bind.ContractBackend) (*GovernanceStorage, error) {
	contract, err := bindGovernanceStorage(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &GovernanceStorage{GovernanceStorageCaller: GovernanceStorageCaller{contract: contract}, GovernanceStorageTransactor: GovernanceStorageTransactor{contract: contract}, GovernanceStorageFilterer: GovernanceStorageFilterer{contract: contract}}, nil
}

// NewGovernanceStorageCaller creates a new read-only instance of GovernanceStorage, bound to a specific deployed contract.
func NewGovernanceStorageCaller(address common.Address, caller bind.ContractCaller) (*GovernanceStorageCaller, error) {
	contract, err := bindGovernanceStorage(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &GovernanceStorageCaller{contract: contract}, nil
}

// NewGovernanceStorageTransactor creates a new write-only instance of GovernanceStorage, bound to a specific deployed contract.
func NewGovernanceStorageTransactor(address common.Address, transactor bind.ContractTransactor) (*GovernanceStorageTransactor, error) {
	contract, err := bindGovernanceStorage(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &GovernanceStorageTransactor{contract: contract}, nil
}

// NewGovernanceStorageFilterer creates a new log filterer instance of GovernanceStorage, bound to a specific deployed contract.
func NewGovernanceStorageFilterer(address common.Address, filterer bind.ContractFilterer) (*GovernanceStorageFilterer, error) {
	contract, err := bindGovernanceStorage(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &GovernanceStorageFilterer{contract: contract}, nil
}

// bindGovernanceStorage binds a generic wrapper to an already deployed contract.
func bindGovernanceStorage(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(GovernanceStorageABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_GovernanceStorage *GovernanceStorageRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _GovernanceStorage.Contract.GovernanceStorageCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_GovernanceStorage *GovernanceStorageRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GovernanceStorage.Contract.GovernanceStorageTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_GovernanceStorage *GovernanceStorageRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _GovernanceStorage.Contract.GovernanceStorageTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_GovernanceStorage *GovernanceStorageCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _GovernanceStorage.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_GovernanceStorage *GovernanceStorageTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GovernanceStorage.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_GovernanceStorage *GovernanceStorageTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _GovernanceStorage.Contract.contract.Transact(opts, method, params...)
}

// AllowedProposal is a free data retrieval call binding the contract method 0xf4f58000.
//
// Solidity: function allowedProposal() view returns(address)
func (_GovernanceStorage *GovernanceStorageCaller) AllowedProposal(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _GovernanceStorage.contract.Call(opts, &out, "allowedProposal")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AllowedProposal is a free data retrieval call binding the contract method 0xf4f58000.
//
// Solidity: function allowedProposal() view returns(address)
func (_GovernanceStorage *GovernanceStorageSession) AllowedProposal() (common.Address, error) {
	return _GovernanceStorage.Contract.AllowedProposal(&_GovernanceStorage.CallOpts)
}

// AllowedProposal is a free data retrieval call binding the contract method 0xf4f58000.
//
// Solidity: function allowedProposal() view returns(address)
func (_GovernanceStorage *GovernanceStorageCallerSession) AllowedProposal() (common.Address, error) {
	return _GovernanceStorage.Contract.AllowedProposal(&_GovernanceStorage.CallOpts)
}

// ICBOpenerMetaData contains all meta data concerning the ICBOpener contract.
var ICBOpenerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"tripCB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// ICBOpenerABI is the input ABI used to generate the binding from.
// Deprecated: Use ICBOpenerMetaData.ABI instead.
var ICBOpenerABI = ICBOpenerMetaData.ABI

// ICBOpener is an auto generated Go binding around an Ethereum contract.
type ICBOpener struct {
	ICBOpenerCaller     // Read-only binding to the contract
	ICBOpenerTransactor // Write-only binding to the contract
	ICBOpenerFilterer   // Log filterer for contract events
}

// ICBOpenerCaller is an auto generated read-only Go binding around an Ethereum contract.
type ICBOpenerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ICBOpenerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ICBOpenerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ICBOpenerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ICBOpenerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ICBOpenerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ICBOpenerSession struct {
	Contract     *ICBOpener        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ICBOpenerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ICBOpenerCallerSession struct {
	Contract *ICBOpenerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// ICBOpenerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ICBOpenerTransactorSession struct {
	Contract     *ICBOpenerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// ICBOpenerRaw is an auto generated low-level Go binding around an Ethereum contract.
type ICBOpenerRaw struct {
	Contract *ICBOpener // Generic contract binding to access the raw methods on
}

// ICBOpenerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ICBOpenerCallerRaw struct {
	Contract *ICBOpenerCaller // Generic read-only contract binding to access the raw methods on
}

// ICBOpenerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ICBOpenerTransactorRaw struct {
	Contract *ICBOpenerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewICBOpener creates a new instance of ICBOpener, bound to a specific deployed contract.
func NewICBOpener(address common.Address, backend bind.ContractBackend) (*ICBOpener, error) {
	contract, err := bindICBOpener(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ICBOpener{ICBOpenerCaller: ICBOpenerCaller{contract: contract}, ICBOpenerTransactor: ICBOpenerTransactor{contract: contract}, ICBOpenerFilterer: ICBOpenerFilterer{contract: contract}}, nil
}

// NewICBOpenerCaller creates a new read-only instance of ICBOpener, bound to a specific deployed contract.
func NewICBOpenerCaller(address common.Address, caller bind.ContractCaller) (*ICBOpenerCaller, error) {
	contract, err := bindICBOpener(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ICBOpenerCaller{contract: contract}, nil
}

// NewICBOpenerTransactor creates a new write-only instance of ICBOpener, bound to a specific deployed contract.
func NewICBOpenerTransactor(address common.Address, transactor bind.ContractTransactor) (*ICBOpenerTransactor, error) {
	contract, err := bindICBOpener(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ICBOpenerTransactor{contract: contract}, nil
}

// NewICBOpenerFilterer creates a new log filterer instance of ICBOpener, bound to a specific deployed contract.
func NewICBOpenerFilterer(address common.Address, filterer bind.ContractFilterer) (*ICBOpenerFilterer, error) {
	contract, err := bindICBOpener(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ICBOpenerFilterer{contract: contract}, nil
}

// bindICBOpener binds a generic wrapper to an already deployed contract.
func bindICBOpener(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ICBOpenerABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ICBOpener *ICBOpenerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ICBOpener.Contract.ICBOpenerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ICBOpener *ICBOpenerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ICBOpener.Contract.ICBOpenerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ICBOpener *ICBOpenerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ICBOpener.Contract.ICBOpenerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ICBOpener *ICBOpenerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ICBOpener.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ICBOpener *ICBOpenerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ICBOpener.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ICBOpener *ICBOpenerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ICBOpener.Contract.contract.Transact(opts, method, params...)
}

// TripCB is a paid mutator transaction binding the contract method 0xadfdc03f.
//
// Solidity: function tripCB() returns()
func (_ICBOpener *ICBOpenerTransactor) TripCB(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ICBOpener.contract.Transact(opts, "tripCB")
}

// TripCB is a paid mutator transaction binding the contract method 0xadfdc03f.
//
// Solidity: function tripCB() returns()
func (_ICBOpener *ICBOpenerSession) TripCB() (*types.Transaction, error) {
	return _ICBOpener.Contract.TripCB(&_ICBOpener.TransactOpts)
}

// TripCB is a paid mutator transaction binding the contract method 0xadfdc03f.
//
// Solidity: function tripCB() returns()
func (_ICBOpener *ICBOpenerTransactorSession) TripCB() (*types.Transaction, error) {
	return _ICBOpener.Contract.TripCB(&_ICBOpener.TransactOpts)
}

// IDutchAuctionMetaData contains all meta data concerning the IDutchAuction contract.
var IDutchAuctionMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"AuctionStarted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getAuctionEndBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuctionPhaseLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuctionPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuctionStartBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAuctionRunning\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"basePrice\",\"type\":\"uint256\"}],\"name\":\"setAuctionBasePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"decayRate\",\"type\":\"uint256\"}],\"name\":\"setAuctionDecayRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"phaseLength\",\"type\":\"uint256\"}],\"name\":\"setAuctionPhaseLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// IDutchAuctionABI is the input ABI used to generate the binding from.
// Deprecated: Use IDutchAuctionMetaData.ABI instead.
var IDutchAuctionABI = IDutchAuctionMetaData.ABI

// IDutchAuction is an auto generated Go binding around an Ethereum contract.
type IDutchAuction struct {
	IDutchAuctionCaller     // Read-only binding to the contract
	IDutchAuctionTransactor // Write-only binding to the contract
	IDutchAuctionFilterer   // Log filterer for contract events
}

// IDutchAuctionCaller is an auto generated read-only Go binding around an Ethereum contract.
type IDutchAuctionCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IDutchAuctionTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IDutchAuctionTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IDutchAuctionFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IDutchAuctionFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IDutchAuctionSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IDutchAuctionSession struct {
	Contract     *IDutchAuction    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IDutchAuctionCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IDutchAuctionCallerSession struct {
	Contract *IDutchAuctionCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// IDutchAuctionTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IDutchAuctionTransactorSession struct {
	Contract     *IDutchAuctionTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// IDutchAuctionRaw is an auto generated low-level Go binding around an Ethereum contract.
type IDutchAuctionRaw struct {
	Contract *IDutchAuction // Generic contract binding to access the raw methods on
}

// IDutchAuctionCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IDutchAuctionCallerRaw struct {
	Contract *IDutchAuctionCaller // Generic read-only contract binding to access the raw methods on
}

// IDutchAuctionTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IDutchAuctionTransactorRaw struct {
	Contract *IDutchAuctionTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIDutchAuction creates a new instance of IDutchAuction, bound to a specific deployed contract.
func NewIDutchAuction(address common.Address, backend bind.ContractBackend) (*IDutchAuction, error) {
	contract, err := bindIDutchAuction(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IDutchAuction{IDutchAuctionCaller: IDutchAuctionCaller{contract: contract}, IDutchAuctionTransactor: IDutchAuctionTransactor{contract: contract}, IDutchAuctionFilterer: IDutchAuctionFilterer{contract: contract}}, nil
}

// NewIDutchAuctionCaller creates a new read-only instance of IDutchAuction, bound to a specific deployed contract.
func NewIDutchAuctionCaller(address common.Address, caller bind.ContractCaller) (*IDutchAuctionCaller, error) {
	contract, err := bindIDutchAuction(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IDutchAuctionCaller{contract: contract}, nil
}

// NewIDutchAuctionTransactor creates a new write-only instance of IDutchAuction, bound to a specific deployed contract.
func NewIDutchAuctionTransactor(address common.Address, transactor bind.ContractTransactor) (*IDutchAuctionTransactor, error) {
	contract, err := bindIDutchAuction(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IDutchAuctionTransactor{contract: contract}, nil
}

// NewIDutchAuctionFilterer creates a new log filterer instance of IDutchAuction, bound to a specific deployed contract.
func NewIDutchAuctionFilterer(address common.Address, filterer bind.ContractFilterer) (*IDutchAuctionFilterer, error) {
	contract, err := bindIDutchAuction(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IDutchAuctionFilterer{contract: contract}, nil
}

// bindIDutchAuction binds a generic wrapper to an already deployed contract.
func bindIDutchAuction(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IDutchAuctionABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IDutchAuction *IDutchAuctionRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IDutchAuction.Contract.IDutchAuctionCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IDutchAuction *IDutchAuctionRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IDutchAuction.Contract.IDutchAuctionTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IDutchAuction *IDutchAuctionRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IDutchAuction.Contract.IDutchAuctionTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IDutchAuction *IDutchAuctionCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IDutchAuction.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IDutchAuction *IDutchAuctionTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IDutchAuction.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IDutchAuction *IDutchAuctionTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IDutchAuction.Contract.contract.Transact(opts, method, params...)
}

// GetAuctionEndBlock is a free data retrieval call binding the contract method 0x60ce883c.
//
// Solidity: function getAuctionEndBlock() view returns(uint256)
func (_IDutchAuction *IDutchAuctionCaller) GetAuctionEndBlock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IDutchAuction.contract.Call(opts, &out, "getAuctionEndBlock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetAuctionEndBlock is a free data retrieval call binding the contract method 0x60ce883c.
//
// Solidity: function getAuctionEndBlock() view returns(uint256)
func (_IDutchAuction *IDutchAuctionSession) GetAuctionEndBlock() (*big.Int, error) {
	return _IDutchAuction.Contract.GetAuctionEndBlock(&_IDutchAuction.CallOpts)
}

// GetAuctionEndBlock is a free data retrieval call binding the contract method 0x60ce883c.
//
// Solidity: function getAuctionEndBlock() view returns(uint256)
func (_IDutchAuction *IDutchAuctionCallerSession) GetAuctionEndBlock() (*big.Int, error) {
	return _IDutchAuction.Contract.GetAuctionEndBlock(&_IDutchAuction.CallOpts)
}

// GetAuctionPhaseLength is a free data retrieval call binding the contract method 0x93f908a7.
//
// Solidity: function getAuctionPhaseLength() view returns(uint256)
func (_IDutchAuction *IDutchAuctionCaller) GetAuctionPhaseLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IDutchAuction.contract.Call(opts, &out, "getAuctionPhaseLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetAuctionPhaseLength is a free data retrieval call binding the contract method 0x93f908a7.
//
// Solidity: function getAuctionPhaseLength() view returns(uint256)
func (_IDutchAuction *IDutchAuctionSession) GetAuctionPhaseLength() (*big.Int, error) {
	return _IDutchAuction.Contract.GetAuctionPhaseLength(&_IDutchAuction.CallOpts)
}

// GetAuctionPhaseLength is a free data retrieval call binding the contract method 0x93f908a7.
//
// Solidity: function getAuctionPhaseLength() view returns(uint256)
func (_IDutchAuction *IDutchAuctionCallerSession) GetAuctionPhaseLength() (*big.Int, error) {
	return _IDutchAuction.Contract.GetAuctionPhaseLength(&_IDutchAuction.CallOpts)
}

// GetAuctionPrice is a free data retrieval call binding the contract method 0x4bd25c6f.
//
// Solidity: function getAuctionPrice() view returns(uint256)
func (_IDutchAuction *IDutchAuctionCaller) GetAuctionPrice(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IDutchAuction.contract.Call(opts, &out, "getAuctionPrice")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetAuctionPrice is a free data retrieval call binding the contract method 0x4bd25c6f.
//
// Solidity: function getAuctionPrice() view returns(uint256)
func (_IDutchAuction *IDutchAuctionSession) GetAuctionPrice() (*big.Int, error) {
	return _IDutchAuction.Contract.GetAuctionPrice(&_IDutchAuction.CallOpts)
}

// GetAuctionPrice is a free data retrieval call binding the contract method 0x4bd25c6f.
//
// Solidity: function getAuctionPrice() view returns(uint256)
func (_IDutchAuction *IDutchAuctionCallerSession) GetAuctionPrice() (*big.Int, error) {
	return _IDutchAuction.Contract.GetAuctionPrice(&_IDutchAuction.CallOpts)
}

// GetAuctionStartBlock is a free data retrieval call binding the contract method 0x27f15d58.
//
// Solidity: function getAuctionStartBlock() view returns(uint256)
func (_IDutchAuction *IDutchAuctionCaller) GetAuctionStartBlock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IDutchAuction.contract.Call(opts, &out, "getAuctionStartBlock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetAuctionStartBlock is a free data retrieval call binding the contract method 0x27f15d58.
//
// Solidity: function getAuctionStartBlock() view returns(uint256)
func (_IDutchAuction *IDutchAuctionSession) GetAuctionStartBlock() (*big.Int, error) {
	return _IDutchAuction.Contract.GetAuctionStartBlock(&_IDutchAuction.CallOpts)
}

// GetAuctionStartBlock is a free data retrieval call binding the contract method 0x27f15d58.
//
// Solidity: function getAuctionStartBlock() view returns(uint256)
func (_IDutchAuction *IDutchAuctionCallerSession) GetAuctionStartBlock() (*big.Int, error) {
	return _IDutchAuction.Contract.GetAuctionStartBlock(&_IDutchAuction.CallOpts)
}

// IsAuctionRunning is a free data retrieval call binding the contract method 0xd96ca25e.
//
// Solidity: function isAuctionRunning() view returns(bool)
func (_IDutchAuction *IDutchAuctionCaller) IsAuctionRunning(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _IDutchAuction.contract.Call(opts, &out, "isAuctionRunning")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsAuctionRunning is a free data retrieval call binding the contract method 0xd96ca25e.
//
// Solidity: function isAuctionRunning() view returns(bool)
func (_IDutchAuction *IDutchAuctionSession) IsAuctionRunning() (bool, error) {
	return _IDutchAuction.Contract.IsAuctionRunning(&_IDutchAuction.CallOpts)
}

// IsAuctionRunning is a free data retrieval call binding the contract method 0xd96ca25e.
//
// Solidity: function isAuctionRunning() view returns(bool)
func (_IDutchAuction *IDutchAuctionCallerSession) IsAuctionRunning() (bool, error) {
	return _IDutchAuction.Contract.IsAuctionRunning(&_IDutchAuction.CallOpts)
}

// SetAuctionBasePrice is a paid mutator transaction binding the contract method 0xed7f99df.
//
// Solidity: function setAuctionBasePrice(uint256 basePrice) returns()
func (_IDutchAuction *IDutchAuctionTransactor) SetAuctionBasePrice(opts *bind.TransactOpts, basePrice *big.Int) (*types.Transaction, error) {
	return _IDutchAuction.contract.Transact(opts, "setAuctionBasePrice", basePrice)
}

// SetAuctionBasePrice is a paid mutator transaction binding the contract method 0xed7f99df.
//
// Solidity: function setAuctionBasePrice(uint256 basePrice) returns()
func (_IDutchAuction *IDutchAuctionSession) SetAuctionBasePrice(basePrice *big.Int) (*types.Transaction, error) {
	return _IDutchAuction.Contract.SetAuctionBasePrice(&_IDutchAuction.TransactOpts, basePrice)
}

// SetAuctionBasePrice is a paid mutator transaction binding the contract method 0xed7f99df.
//
// Solidity: function setAuctionBasePrice(uint256 basePrice) returns()
func (_IDutchAuction *IDutchAuctionTransactorSession) SetAuctionBasePrice(basePrice *big.Int) (*types.Transaction, error) {
	return _IDutchAuction.Contract.SetAuctionBasePrice(&_IDutchAuction.TransactOpts, basePrice)
}

// SetAuctionDecayRate is a paid mutator transaction binding the contract method 0xb31ca4c0.
//
// Solidity: function setAuctionDecayRate(uint256 decayRate) returns()
func (_IDutchAuction *IDutchAuctionTransactor) SetAuctionDecayRate(opts *bind.TransactOpts, decayRate *big.Int) (*types.Transaction, error) {
	return _IDutchAuction.contract.Transact(opts, "setAuctionDecayRate", decayRate)
}

// SetAuctionDecayRate is a paid mutator transaction binding the contract method 0xb31ca4c0.
//
// Solidity: function setAuctionDecayRate(uint256 decayRate) returns()
func (_IDutchAuction *IDutchAuctionSession) SetAuctionDecayRate(decayRate *big.Int) (*types.Transaction, error) {
	return _IDutchAuction.Contract.SetAuctionDecayRate(&_IDutchAuction.TransactOpts, decayRate)
}

// SetAuctionDecayRate is a paid mutator transaction binding the contract method 0xb31ca4c0.
//
// Solidity: function setAuctionDecayRate(uint256 decayRate) returns()
func (_IDutchAuction *IDutchAuctionTransactorSession) SetAuctionDecayRate(decayRate *big.Int) (*types.Transaction, error) {
	return _IDutchAuction.Contract.SetAuctionDecayRate(&_IDutchAuction.TransactOpts, decayRate)
}

// SetAuctionPhaseLength is a paid mutator transaction binding the contract method 0xf56a1c93.
//
// Solidity: function setAuctionPhaseLength(uint256 phaseLength) returns()
func (_IDutchAuction *IDutchAuctionTransactor) SetAuctionPhaseLength(opts *bind.TransactOpts, phaseLength *big.Int) (*types.Transaction, error) {
	return _IDutchAuction.contract.Transact(opts, "setAuctionPhaseLength", phaseLength)
}

// SetAuctionPhaseLength is a paid mutator transaction binding the contract method 0xf56a1c93.
//
// Solidity: function setAuctionPhaseLength(uint256 phaseLength) returns()
func (_IDutchAuction *IDutchAuctionSession) SetAuctionPhaseLength(phaseLength *big.Int) (*types.Transaction, error) {
	return _IDutchAuction.Contract.SetAuctionPhaseLength(&_IDutchAuction.TransactOpts, phaseLength)
}

// SetAuctionPhaseLength is a paid mutator transaction binding the contract method 0xf56a1c93.
//
// Solidity: function setAuctionPhaseLength(uint256 phaseLength) returns()
func (_IDutchAuction *IDutchAuctionTransactorSession) SetAuctionPhaseLength(phaseLength *big.Int) (*types.Transaction, error) {
	return _IDutchAuction.Contract.SetAuctionPhaseLength(&_IDutchAuction.TransactOpts, phaseLength)
}

// StartAuction is a paid mutator transaction binding the contract method 0x6b64c769.
//
// Solidity: function startAuction() returns()
func (_IDutchAuction *IDutchAuctionTransactor) StartAuction(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IDutchAuction.contract.Transact(opts, "startAuction")
}

// StartAuction is a paid mutator transaction binding the contract method 0x6b64c769.
//
// Solidity: function startAuction() returns()
func (_IDutchAuction *IDutchAuctionSession) StartAuction() (*types.Transaction, error) {
	return _IDutchAuction.Contract.StartAuction(&_IDutchAuction.TransactOpts)
}

// StartAuction is a paid mutator transaction binding the contract method 0x6b64c769.
//
// Solidity: function startAuction() returns()
func (_IDutchAuction *IDutchAuctionTransactorSession) StartAuction() (*types.Transaction, error) {
	return _IDutchAuction.Contract.StartAuction(&_IDutchAuction.TransactOpts)
}

// IDutchAuctionAuctionStartedIterator is returned from FilterAuctionStarted and is used to iterate over the raw logs and unpacked data for AuctionStarted events raised by the IDutchAuction contract.
type IDutchAuctionAuctionStartedIterator struct {
	Event *IDutchAuctionAuctionStarted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IDutchAuctionAuctionStartedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IDutchAuctionAuctionStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IDutchAuctionAuctionStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IDutchAuctionAuctionStartedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IDutchAuctionAuctionStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IDutchAuctionAuctionStarted represents a AuctionStarted event raised by the IDutchAuction contract.
type IDutchAuctionAuctionStarted struct {
	BlockNumber *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterAuctionStarted is a free log retrieval operation binding the contract event 0x1bb96dff6ab5005aff98cdc0cf176bb7d8e0423cb48e02217d35b042cec81e9f.
//
// Solidity: event AuctionStarted(uint256 blockNumber)
func (_IDutchAuction *IDutchAuctionFilterer) FilterAuctionStarted(opts *bind.FilterOpts) (*IDutchAuctionAuctionStartedIterator, error) {

	logs, sub, err := _IDutchAuction.contract.FilterLogs(opts, "AuctionStarted")
	if err != nil {
		return nil, err
	}
	return &IDutchAuctionAuctionStartedIterator{contract: _IDutchAuction.contract, event: "AuctionStarted", logs: logs, sub: sub}, nil
}

// WatchAuctionStarted is a free log subscription operation binding the contract event 0x1bb96dff6ab5005aff98cdc0cf176bb7d8e0423cb48e02217d35b042cec81e9f.
//
// Solidity: event AuctionStarted(uint256 blockNumber)
func (_IDutchAuction *IDutchAuctionFilterer) WatchAuctionStarted(opts *bind.WatchOpts, sink chan<- *IDutchAuctionAuctionStarted) (event.Subscription, error) {

	logs, sub, err := _IDutchAuction.contract.WatchLogs(opts, "AuctionStarted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IDutchAuctionAuctionStarted)
				if err := _IDutchAuction.contract.UnpackLog(event, "AuctionStarted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAuctionStarted is a log parse operation binding the contract event 0x1bb96dff6ab5005aff98cdc0cf176bb7d8e0423cb48e02217d35b042cec81e9f.
//
// Solidity: event AuctionStarted(uint256 blockNumber)
func (_IDutchAuction *IDutchAuctionFilterer) ParseAuctionStarted(log types.Log) (*IDutchAuctionAuctionStarted, error) {
	event := new(IDutchAuctionAuctionStarted)
	if err := _IDutchAuction.contract.UnpackLog(event, "AuctionStarted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC165MetaData contains all meta data concerning the IERC165 contract.
var IERC165MetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// IERC165ABI is the input ABI used to generate the binding from.
// Deprecated: Use IERC165MetaData.ABI instead.
var IERC165ABI = IERC165MetaData.ABI

// IERC165 is an auto generated Go binding around an Ethereum contract.
type IERC165 struct {
	IERC165Caller     // Read-only binding to the contract
	IERC165Transactor // Write-only binding to the contract
	IERC165Filterer   // Log filterer for contract events
}

// IERC165Caller is an auto generated read-only Go binding around an Ethereum contract.
type IERC165Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC165Transactor is an auto generated write-only Go binding around an Ethereum contract.
type IERC165Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC165Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IERC165Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC165Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IERC165Session struct {
	Contract     *IERC165          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IERC165CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IERC165CallerSession struct {
	Contract *IERC165Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// IERC165TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IERC165TransactorSession struct {
	Contract     *IERC165Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// IERC165Raw is an auto generated low-level Go binding around an Ethereum contract.
type IERC165Raw struct {
	Contract *IERC165 // Generic contract binding to access the raw methods on
}

// IERC165CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IERC165CallerRaw struct {
	Contract *IERC165Caller // Generic read-only contract binding to access the raw methods on
}

// IERC165TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IERC165TransactorRaw struct {
	Contract *IERC165Transactor // Generic write-only contract binding to access the raw methods on
}

// NewIERC165 creates a new instance of IERC165, bound to a specific deployed contract.
func NewIERC165(address common.Address, backend bind.ContractBackend) (*IERC165, error) {
	contract, err := bindIERC165(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IERC165{IERC165Caller: IERC165Caller{contract: contract}, IERC165Transactor: IERC165Transactor{contract: contract}, IERC165Filterer: IERC165Filterer{contract: contract}}, nil
}

// NewIERC165Caller creates a new read-only instance of IERC165, bound to a specific deployed contract.
func NewIERC165Caller(address common.Address, caller bind.ContractCaller) (*IERC165Caller, error) {
	contract, err := bindIERC165(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IERC165Caller{contract: contract}, nil
}

// NewIERC165Transactor creates a new write-only instance of IERC165, bound to a specific deployed contract.
func NewIERC165Transactor(address common.Address, transactor bind.ContractTransactor) (*IERC165Transactor, error) {
	contract, err := bindIERC165(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IERC165Transactor{contract: contract}, nil
}

// NewIERC165Filterer creates a new log filterer instance of IERC165, bound to a specific deployed contract.
func NewIERC165Filterer(address common.Address, filterer bind.ContractFilterer) (*IERC165Filterer, error) {
	contract, err := bindIERC165(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IERC165Filterer{contract: contract}, nil
}

// bindIERC165 binds a generic wrapper to an already deployed contract.
func bindIERC165(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IERC165ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC165 *IERC165Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC165.Contract.IERC165Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC165 *IERC165Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC165.Contract.IERC165Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC165 *IERC165Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC165.Contract.IERC165Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC165 *IERC165CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC165.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC165 *IERC165TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC165.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC165 *IERC165TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC165.Contract.contract.Transact(opts, method, params...)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_IERC165 *IERC165Caller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _IERC165.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_IERC165 *IERC165Session) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _IERC165.Contract.SupportsInterface(&_IERC165.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_IERC165 *IERC165CallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _IERC165.Contract.SupportsInterface(&_IERC165.CallOpts, interfaceId)
}

// IERC20MetaData contains all meta data concerning the IERC20 contract.
var IERC20MetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// IERC20ABI is the input ABI used to generate the binding from.
// Deprecated: Use IERC20MetaData.ABI instead.
var IERC20ABI = IERC20MetaData.ABI

// IERC20 is an auto generated Go binding around an Ethereum contract.
type IERC20 struct {
	IERC20Caller     // Read-only binding to the contract
	IERC20Transactor // Write-only binding to the contract
	IERC20Filterer   // Log filterer for contract events
}

// IERC20Caller is an auto generated read-only Go binding around an Ethereum contract.
type IERC20Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20Transactor is an auto generated write-only Go binding around an Ethereum contract.
type IERC20Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IERC20Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IERC20Session struct {
	Contract     *IERC20           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IERC20CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IERC20CallerSession struct {
	Contract *IERC20Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// IERC20TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IERC20TransactorSession struct {
	Contract     *IERC20Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IERC20Raw is an auto generated low-level Go binding around an Ethereum contract.
type IERC20Raw struct {
	Contract *IERC20 // Generic contract binding to access the raw methods on
}

// IERC20CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IERC20CallerRaw struct {
	Contract *IERC20Caller // Generic read-only contract binding to access the raw methods on
}

// IERC20TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IERC20TransactorRaw struct {
	Contract *IERC20Transactor // Generic write-only contract binding to access the raw methods on
}

// NewIERC20 creates a new instance of IERC20, bound to a specific deployed contract.
func NewIERC20(address common.Address, backend bind.ContractBackend) (*IERC20, error) {
	contract, err := bindIERC20(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IERC20{IERC20Caller: IERC20Caller{contract: contract}, IERC20Transactor: IERC20Transactor{contract: contract}, IERC20Filterer: IERC20Filterer{contract: contract}}, nil
}

// NewIERC20Caller creates a new read-only instance of IERC20, bound to a specific deployed contract.
func NewIERC20Caller(address common.Address, caller bind.ContractCaller) (*IERC20Caller, error) {
	contract, err := bindIERC20(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IERC20Caller{contract: contract}, nil
}

// NewIERC20Transactor creates a new write-only instance of IERC20, bound to a specific deployed contract.
func NewIERC20Transactor(address common.Address, transactor bind.ContractTransactor) (*IERC20Transactor, error) {
	contract, err := bindIERC20(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IERC20Transactor{contract: contract}, nil
}

// NewIERC20Filterer creates a new log filterer instance of IERC20, bound to a specific deployed contract.
func NewIERC20Filterer(address common.Address, filterer bind.ContractFilterer) (*IERC20Filterer, error) {
	contract, err := bindIERC20(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IERC20Filterer{contract: contract}, nil
}

// bindIERC20 binds a generic wrapper to an already deployed contract.
func bindIERC20(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IERC20ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC20 *IERC20Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC20.Contract.IERC20Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC20 *IERC20Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC20.Contract.IERC20Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC20 *IERC20Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC20.Contract.IERC20Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC20 *IERC20CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC20.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC20 *IERC20TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC20.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC20 *IERC20TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC20.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IERC20 *IERC20Caller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IERC20.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IERC20 *IERC20Session) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _IERC20.Contract.Allowance(&_IERC20.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IERC20 *IERC20CallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _IERC20.Contract.Allowance(&_IERC20.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20 *IERC20Caller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IERC20.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20 *IERC20Session) BalanceOf(account common.Address) (*big.Int, error) {
	return _IERC20.Contract.BalanceOf(&_IERC20.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20 *IERC20CallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _IERC20.Contract.BalanceOf(&_IERC20.CallOpts, account)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IERC20 *IERC20Caller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IERC20.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IERC20 *IERC20Session) TotalSupply() (*big.Int, error) {
	return _IERC20.Contract.TotalSupply(&_IERC20.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IERC20 *IERC20CallerSession) TotalSupply() (*big.Int, error) {
	return _IERC20.Contract.TotalSupply(&_IERC20.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20 *IERC20Transactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20 *IERC20Session) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.Approve(&_IERC20.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20 *IERC20TransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.Approve(&_IERC20.TransactOpts, spender, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_IERC20 *IERC20Transactor) Transfer(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.contract.Transact(opts, "transfer", to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_IERC20 *IERC20Session) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.Transfer(&_IERC20.TransactOpts, to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_IERC20 *IERC20TransactorSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.Transfer(&_IERC20.TransactOpts, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_IERC20 *IERC20Transactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.contract.Transact(opts, "transferFrom", from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_IERC20 *IERC20Session) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.TransferFrom(&_IERC20.TransactOpts, from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_IERC20 *IERC20TransactorSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.TransferFrom(&_IERC20.TransactOpts, from, to, amount)
}

// IERC20ApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the IERC20 contract.
type IERC20ApprovalIterator struct {
	Event *IERC20Approval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC20ApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC20Approval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC20Approval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC20ApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC20ApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC20Approval represents a Approval event raised by the IERC20 contract.
type IERC20Approval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IERC20 *IERC20Filterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*IERC20ApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _IERC20.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &IERC20ApprovalIterator{contract: _IERC20.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IERC20 *IERC20Filterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *IERC20Approval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _IERC20.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC20Approval)
				if err := _IERC20.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IERC20 *IERC20Filterer) ParseApproval(log types.Log) (*IERC20Approval, error) {
	event := new(IERC20Approval)
	if err := _IERC20.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC20TransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the IERC20 contract.
type IERC20TransferIterator struct {
	Event *IERC20Transfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC20TransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC20Transfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC20Transfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC20TransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC20TransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC20Transfer represents a Transfer event raised by the IERC20 contract.
type IERC20Transfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IERC20 *IERC20Filterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*IERC20TransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IERC20.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &IERC20TransferIterator{contract: _IERC20.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IERC20 *IERC20Filterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *IERC20Transfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IERC20.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC20Transfer)
				if err := _IERC20.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IERC20 *IERC20Filterer) ParseTransfer(log types.Log) (*IERC20Transfer, error) {
	event := new(IERC20Transfer)
	if err := _IERC20.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC20MetadataMetaData contains all meta data concerning the IERC20Metadata contract.
var IERC20MetadataMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// IERC20MetadataABI is the input ABI used to generate the binding from.
// Deprecated: Use IERC20MetadataMetaData.ABI instead.
var IERC20MetadataABI = IERC20MetadataMetaData.ABI

// IERC20Metadata is an auto generated Go binding around an Ethereum contract.
type IERC20Metadata struct {
	IERC20MetadataCaller     // Read-only binding to the contract
	IERC20MetadataTransactor // Write-only binding to the contract
	IERC20MetadataFilterer   // Log filterer for contract events
}

// IERC20MetadataCaller is an auto generated read-only Go binding around an Ethereum contract.
type IERC20MetadataCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20MetadataTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IERC20MetadataTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20MetadataFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IERC20MetadataFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20MetadataSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IERC20MetadataSession struct {
	Contract     *IERC20Metadata   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IERC20MetadataCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IERC20MetadataCallerSession struct {
	Contract *IERC20MetadataCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// IERC20MetadataTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IERC20MetadataTransactorSession struct {
	Contract     *IERC20MetadataTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// IERC20MetadataRaw is an auto generated low-level Go binding around an Ethereum contract.
type IERC20MetadataRaw struct {
	Contract *IERC20Metadata // Generic contract binding to access the raw methods on
}

// IERC20MetadataCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IERC20MetadataCallerRaw struct {
	Contract *IERC20MetadataCaller // Generic read-only contract binding to access the raw methods on
}

// IERC20MetadataTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IERC20MetadataTransactorRaw struct {
	Contract *IERC20MetadataTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIERC20Metadata creates a new instance of IERC20Metadata, bound to a specific deployed contract.
func NewIERC20Metadata(address common.Address, backend bind.ContractBackend) (*IERC20Metadata, error) {
	contract, err := bindIERC20Metadata(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IERC20Metadata{IERC20MetadataCaller: IERC20MetadataCaller{contract: contract}, IERC20MetadataTransactor: IERC20MetadataTransactor{contract: contract}, IERC20MetadataFilterer: IERC20MetadataFilterer{contract: contract}}, nil
}

// NewIERC20MetadataCaller creates a new read-only instance of IERC20Metadata, bound to a specific deployed contract.
func NewIERC20MetadataCaller(address common.Address, caller bind.ContractCaller) (*IERC20MetadataCaller, error) {
	contract, err := bindIERC20Metadata(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IERC20MetadataCaller{contract: contract}, nil
}

// NewIERC20MetadataTransactor creates a new write-only instance of IERC20Metadata, bound to a specific deployed contract.
func NewIERC20MetadataTransactor(address common.Address, transactor bind.ContractTransactor) (*IERC20MetadataTransactor, error) {
	contract, err := bindIERC20Metadata(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IERC20MetadataTransactor{contract: contract}, nil
}

// NewIERC20MetadataFilterer creates a new log filterer instance of IERC20Metadata, bound to a specific deployed contract.
func NewIERC20MetadataFilterer(address common.Address, filterer bind.ContractFilterer) (*IERC20MetadataFilterer, error) {
	contract, err := bindIERC20Metadata(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IERC20MetadataFilterer{contract: contract}, nil
}

// bindIERC20Metadata binds a generic wrapper to an already deployed contract.
func bindIERC20Metadata(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IERC20MetadataABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC20Metadata *IERC20MetadataRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC20Metadata.Contract.IERC20MetadataCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC20Metadata *IERC20MetadataRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC20Metadata.Contract.IERC20MetadataTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC20Metadata *IERC20MetadataRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC20Metadata.Contract.IERC20MetadataTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC20Metadata *IERC20MetadataCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC20Metadata.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC20Metadata *IERC20MetadataTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC20Metadata.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC20Metadata *IERC20MetadataTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC20Metadata.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IERC20Metadata *IERC20MetadataCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IERC20Metadata.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IERC20Metadata *IERC20MetadataSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _IERC20Metadata.Contract.Allowance(&_IERC20Metadata.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IERC20Metadata *IERC20MetadataCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _IERC20Metadata.Contract.Allowance(&_IERC20Metadata.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20Metadata *IERC20MetadataCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IERC20Metadata.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20Metadata *IERC20MetadataSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _IERC20Metadata.Contract.BalanceOf(&_IERC20Metadata.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20Metadata *IERC20MetadataCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _IERC20Metadata.Contract.BalanceOf(&_IERC20Metadata.CallOpts, account)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_IERC20Metadata *IERC20MetadataCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _IERC20Metadata.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_IERC20Metadata *IERC20MetadataSession) Decimals() (uint8, error) {
	return _IERC20Metadata.Contract.Decimals(&_IERC20Metadata.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_IERC20Metadata *IERC20MetadataCallerSession) Decimals() (uint8, error) {
	return _IERC20Metadata.Contract.Decimals(&_IERC20Metadata.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_IERC20Metadata *IERC20MetadataCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _IERC20Metadata.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_IERC20Metadata *IERC20MetadataSession) Name() (string, error) {
	return _IERC20Metadata.Contract.Name(&_IERC20Metadata.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_IERC20Metadata *IERC20MetadataCallerSession) Name() (string, error) {
	return _IERC20Metadata.Contract.Name(&_IERC20Metadata.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_IERC20Metadata *IERC20MetadataCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _IERC20Metadata.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_IERC20Metadata *IERC20MetadataSession) Symbol() (string, error) {
	return _IERC20Metadata.Contract.Symbol(&_IERC20Metadata.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_IERC20Metadata *IERC20MetadataCallerSession) Symbol() (string, error) {
	return _IERC20Metadata.Contract.Symbol(&_IERC20Metadata.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IERC20Metadata *IERC20MetadataCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IERC20Metadata.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IERC20Metadata *IERC20MetadataSession) TotalSupply() (*big.Int, error) {
	return _IERC20Metadata.Contract.TotalSupply(&_IERC20Metadata.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IERC20Metadata *IERC20MetadataCallerSession) TotalSupply() (*big.Int, error) {
	return _IERC20Metadata.Contract.TotalSupply(&_IERC20Metadata.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20Metadata *IERC20MetadataTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Metadata.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20Metadata *IERC20MetadataSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Metadata.Contract.Approve(&_IERC20Metadata.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20Metadata *IERC20MetadataTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Metadata.Contract.Approve(&_IERC20Metadata.TransactOpts, spender, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_IERC20Metadata *IERC20MetadataTransactor) Transfer(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Metadata.contract.Transact(opts, "transfer", to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_IERC20Metadata *IERC20MetadataSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Metadata.Contract.Transfer(&_IERC20Metadata.TransactOpts, to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_IERC20Metadata *IERC20MetadataTransactorSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Metadata.Contract.Transfer(&_IERC20Metadata.TransactOpts, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_IERC20Metadata *IERC20MetadataTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Metadata.contract.Transact(opts, "transferFrom", from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_IERC20Metadata *IERC20MetadataSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Metadata.Contract.TransferFrom(&_IERC20Metadata.TransactOpts, from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_IERC20Metadata *IERC20MetadataTransactorSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Metadata.Contract.TransferFrom(&_IERC20Metadata.TransactOpts, from, to, amount)
}

// IERC20MetadataApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the IERC20Metadata contract.
type IERC20MetadataApprovalIterator struct {
	Event *IERC20MetadataApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC20MetadataApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC20MetadataApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC20MetadataApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC20MetadataApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC20MetadataApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC20MetadataApproval represents a Approval event raised by the IERC20Metadata contract.
type IERC20MetadataApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IERC20Metadata *IERC20MetadataFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*IERC20MetadataApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _IERC20Metadata.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &IERC20MetadataApprovalIterator{contract: _IERC20Metadata.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IERC20Metadata *IERC20MetadataFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *IERC20MetadataApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _IERC20Metadata.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC20MetadataApproval)
				if err := _IERC20Metadata.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IERC20Metadata *IERC20MetadataFilterer) ParseApproval(log types.Log) (*IERC20MetadataApproval, error) {
	event := new(IERC20MetadataApproval)
	if err := _IERC20Metadata.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC20MetadataTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the IERC20Metadata contract.
type IERC20MetadataTransferIterator struct {
	Event *IERC20MetadataTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC20MetadataTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC20MetadataTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC20MetadataTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC20MetadataTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC20MetadataTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC20MetadataTransfer represents a Transfer event raised by the IERC20Metadata contract.
type IERC20MetadataTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IERC20Metadata *IERC20MetadataFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*IERC20MetadataTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IERC20Metadata.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &IERC20MetadataTransferIterator{contract: _IERC20Metadata.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IERC20Metadata *IERC20MetadataFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *IERC20MetadataTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IERC20Metadata.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC20MetadataTransfer)
				if err := _IERC20Metadata.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IERC20Metadata *IERC20MetadataFilterer) ParseTransfer(log types.Log) (*IERC20MetadataTransfer, error) {
	event := new(IERC20MetadataTransfer)
	if err := _IERC20Metadata.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC20TransferableMetaData contains all meta data concerning the IERC20Transferable contract.
var IERC20TransferableMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// IERC20TransferableABI is the input ABI used to generate the binding from.
// Deprecated: Use IERC20TransferableMetaData.ABI instead.
var IERC20TransferableABI = IERC20TransferableMetaData.ABI

// IERC20Transferable is an auto generated Go binding around an Ethereum contract.
type IERC20Transferable struct {
	IERC20TransferableCaller     // Read-only binding to the contract
	IERC20TransferableTransactor // Write-only binding to the contract
	IERC20TransferableFilterer   // Log filterer for contract events
}

// IERC20TransferableCaller is an auto generated read-only Go binding around an Ethereum contract.
type IERC20TransferableCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20TransferableTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IERC20TransferableTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20TransferableFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IERC20TransferableFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20TransferableSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IERC20TransferableSession struct {
	Contract     *IERC20Transferable // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// IERC20TransferableCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IERC20TransferableCallerSession struct {
	Contract *IERC20TransferableCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// IERC20TransferableTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IERC20TransferableTransactorSession struct {
	Contract     *IERC20TransferableTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// IERC20TransferableRaw is an auto generated low-level Go binding around an Ethereum contract.
type IERC20TransferableRaw struct {
	Contract *IERC20Transferable // Generic contract binding to access the raw methods on
}

// IERC20TransferableCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IERC20TransferableCallerRaw struct {
	Contract *IERC20TransferableCaller // Generic read-only contract binding to access the raw methods on
}

// IERC20TransferableTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IERC20TransferableTransactorRaw struct {
	Contract *IERC20TransferableTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIERC20Transferable creates a new instance of IERC20Transferable, bound to a specific deployed contract.
func NewIERC20Transferable(address common.Address, backend bind.ContractBackend) (*IERC20Transferable, error) {
	contract, err := bindIERC20Transferable(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IERC20Transferable{IERC20TransferableCaller: IERC20TransferableCaller{contract: contract}, IERC20TransferableTransactor: IERC20TransferableTransactor{contract: contract}, IERC20TransferableFilterer: IERC20TransferableFilterer{contract: contract}}, nil
}

// NewIERC20TransferableCaller creates a new read-only instance of IERC20Transferable, bound to a specific deployed contract.
func NewIERC20TransferableCaller(address common.Address, caller bind.ContractCaller) (*IERC20TransferableCaller, error) {
	contract, err := bindIERC20Transferable(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IERC20TransferableCaller{contract: contract}, nil
}

// NewIERC20TransferableTransactor creates a new write-only instance of IERC20Transferable, bound to a specific deployed contract.
func NewIERC20TransferableTransactor(address common.Address, transactor bind.ContractTransactor) (*IERC20TransferableTransactor, error) {
	contract, err := bindIERC20Transferable(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IERC20TransferableTransactor{contract: contract}, nil
}

// NewIERC20TransferableFilterer creates a new log filterer instance of IERC20Transferable, bound to a specific deployed contract.
func NewIERC20TransferableFilterer(address common.Address, filterer bind.ContractFilterer) (*IERC20TransferableFilterer, error) {
	contract, err := bindIERC20Transferable(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IERC20TransferableFilterer{contract: contract}, nil
}

// bindIERC20Transferable binds a generic wrapper to an already deployed contract.
func bindIERC20Transferable(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IERC20TransferableABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC20Transferable *IERC20TransferableRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC20Transferable.Contract.IERC20TransferableCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC20Transferable *IERC20TransferableRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC20Transferable.Contract.IERC20TransferableTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC20Transferable *IERC20TransferableRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC20Transferable.Contract.IERC20TransferableTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC20Transferable *IERC20TransferableCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC20Transferable.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC20Transferable *IERC20TransferableTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC20Transferable.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC20Transferable *IERC20TransferableTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC20Transferable.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20Transferable *IERC20TransferableCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IERC20Transferable.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20Transferable *IERC20TransferableSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _IERC20Transferable.Contract.BalanceOf(&_IERC20Transferable.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20Transferable *IERC20TransferableCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _IERC20Transferable.Contract.BalanceOf(&_IERC20Transferable.CallOpts, account)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20Transferable *IERC20TransferableTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Transferable.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20Transferable *IERC20TransferableSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Transferable.Contract.Approve(&_IERC20Transferable.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20Transferable *IERC20TransferableTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Transferable.Contract.Approve(&_IERC20Transferable.TransactOpts, spender, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_IERC20Transferable *IERC20TransferableTransactor) Transfer(opts *bind.TransactOpts, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Transferable.contract.Transact(opts, "transfer", recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_IERC20Transferable *IERC20TransferableSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Transferable.Contract.Transfer(&_IERC20Transferable.TransactOpts, recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_IERC20Transferable *IERC20TransferableTransactorSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Transferable.Contract.Transfer(&_IERC20Transferable.TransactOpts, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_IERC20Transferable *IERC20TransferableTransactor) TransferFrom(opts *bind.TransactOpts, sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Transferable.contract.Transact(opts, "transferFrom", sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_IERC20Transferable *IERC20TransferableSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Transferable.Contract.TransferFrom(&_IERC20Transferable.TransactOpts, sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_IERC20Transferable *IERC20TransferableTransactorSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Transferable.Contract.TransferFrom(&_IERC20Transferable.TransactOpts, sender, recipient, amount)
}

// IERC721MetaData contains all meta data concerning the IERC721 contract.
var IERC721MetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// IERC721ABI is the input ABI used to generate the binding from.
// Deprecated: Use IERC721MetaData.ABI instead.
var IERC721ABI = IERC721MetaData.ABI

// IERC721 is an auto generated Go binding around an Ethereum contract.
type IERC721 struct {
	IERC721Caller     // Read-only binding to the contract
	IERC721Transactor // Write-only binding to the contract
	IERC721Filterer   // Log filterer for contract events
}

// IERC721Caller is an auto generated read-only Go binding around an Ethereum contract.
type IERC721Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721Transactor is an auto generated write-only Go binding around an Ethereum contract.
type IERC721Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IERC721Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IERC721Session struct {
	Contract     *IERC721          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IERC721CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IERC721CallerSession struct {
	Contract *IERC721Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// IERC721TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IERC721TransactorSession struct {
	Contract     *IERC721Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// IERC721Raw is an auto generated low-level Go binding around an Ethereum contract.
type IERC721Raw struct {
	Contract *IERC721 // Generic contract binding to access the raw methods on
}

// IERC721CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IERC721CallerRaw struct {
	Contract *IERC721Caller // Generic read-only contract binding to access the raw methods on
}

// IERC721TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IERC721TransactorRaw struct {
	Contract *IERC721Transactor // Generic write-only contract binding to access the raw methods on
}

// NewIERC721 creates a new instance of IERC721, bound to a specific deployed contract.
func NewIERC721(address common.Address, backend bind.ContractBackend) (*IERC721, error) {
	contract, err := bindIERC721(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IERC721{IERC721Caller: IERC721Caller{contract: contract}, IERC721Transactor: IERC721Transactor{contract: contract}, IERC721Filterer: IERC721Filterer{contract: contract}}, nil
}

// NewIERC721Caller creates a new read-only instance of IERC721, bound to a specific deployed contract.
func NewIERC721Caller(address common.Address, caller bind.ContractCaller) (*IERC721Caller, error) {
	contract, err := bindIERC721(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IERC721Caller{contract: contract}, nil
}

// NewIERC721Transactor creates a new write-only instance of IERC721, bound to a specific deployed contract.
func NewIERC721Transactor(address common.Address, transactor bind.ContractTransactor) (*IERC721Transactor, error) {
	contract, err := bindIERC721(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IERC721Transactor{contract: contract}, nil
}

// NewIERC721Filterer creates a new log filterer instance of IERC721, bound to a specific deployed contract.
func NewIERC721Filterer(address common.Address, filterer bind.ContractFilterer) (*IERC721Filterer, error) {
	contract, err := bindIERC721(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IERC721Filterer{contract: contract}, nil
}

// bindIERC721 binds a generic wrapper to an already deployed contract.
func bindIERC721(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IERC721ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC721 *IERC721Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC721.Contract.IERC721Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC721 *IERC721Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC721.Contract.IERC721Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC721 *IERC721Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC721.Contract.IERC721Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC721 *IERC721CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC721.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC721 *IERC721TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC721.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC721 *IERC721TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC721.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256 balance)
func (_IERC721 *IERC721Caller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IERC721.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256 balance)
func (_IERC721 *IERC721Session) BalanceOf(owner common.Address) (*big.Int, error) {
	return _IERC721.Contract.BalanceOf(&_IERC721.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256 balance)
func (_IERC721 *IERC721CallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _IERC721.Contract.BalanceOf(&_IERC721.CallOpts, owner)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address operator)
func (_IERC721 *IERC721Caller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _IERC721.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address operator)
func (_IERC721 *IERC721Session) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _IERC721.Contract.GetApproved(&_IERC721.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address operator)
func (_IERC721 *IERC721CallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _IERC721.Contract.GetApproved(&_IERC721.CallOpts, tokenId)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_IERC721 *IERC721Caller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _IERC721.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_IERC721 *IERC721Session) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _IERC721.Contract.IsApprovedForAll(&_IERC721.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_IERC721 *IERC721CallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _IERC721.Contract.IsApprovedForAll(&_IERC721.CallOpts, owner, operator)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address owner)
func (_IERC721 *IERC721Caller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _IERC721.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address owner)
func (_IERC721 *IERC721Session) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _IERC721.Contract.OwnerOf(&_IERC721.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address owner)
func (_IERC721 *IERC721CallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _IERC721.Contract.OwnerOf(&_IERC721.CallOpts, tokenId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_IERC721 *IERC721Caller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _IERC721.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_IERC721 *IERC721Session) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _IERC721.Contract.SupportsInterface(&_IERC721.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_IERC721 *IERC721CallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _IERC721.Contract.SupportsInterface(&_IERC721.CallOpts, interfaceId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_IERC721 *IERC721Transactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_IERC721 *IERC721Session) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721.Contract.Approve(&_IERC721.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_IERC721 *IERC721TransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721.Contract.Approve(&_IERC721.TransactOpts, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_IERC721 *IERC721Transactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_IERC721 *IERC721Session) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721.Contract.SafeTransferFrom(&_IERC721.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_IERC721 *IERC721TransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721.Contract.SafeTransferFrom(&_IERC721.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_IERC721 *IERC721Transactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _IERC721.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_IERC721 *IERC721Session) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _IERC721.Contract.SafeTransferFrom0(&_IERC721.TransactOpts, from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_IERC721 *IERC721TransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _IERC721.Contract.SafeTransferFrom0(&_IERC721.TransactOpts, from, to, tokenId, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool _approved) returns()
func (_IERC721 *IERC721Transactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, _approved bool) (*types.Transaction, error) {
	return _IERC721.contract.Transact(opts, "setApprovalForAll", operator, _approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool _approved) returns()
func (_IERC721 *IERC721Session) SetApprovalForAll(operator common.Address, _approved bool) (*types.Transaction, error) {
	return _IERC721.Contract.SetApprovalForAll(&_IERC721.TransactOpts, operator, _approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool _approved) returns()
func (_IERC721 *IERC721TransactorSession) SetApprovalForAll(operator common.Address, _approved bool) (*types.Transaction, error) {
	return _IERC721.Contract.SetApprovalForAll(&_IERC721.TransactOpts, operator, _approved)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_IERC721 *IERC721Transactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_IERC721 *IERC721Session) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721.Contract.TransferFrom(&_IERC721.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_IERC721 *IERC721TransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721.Contract.TransferFrom(&_IERC721.TransactOpts, from, to, tokenId)
}

// IERC721ApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the IERC721 contract.
type IERC721ApprovalIterator struct {
	Event *IERC721Approval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC721ApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC721Approval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC721Approval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC721ApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC721ApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC721Approval represents a Approval event raised by the IERC721 contract.
type IERC721Approval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_IERC721 *IERC721Filterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*IERC721ApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _IERC721.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &IERC721ApprovalIterator{contract: _IERC721.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_IERC721 *IERC721Filterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *IERC721Approval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _IERC721.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC721Approval)
				if err := _IERC721.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_IERC721 *IERC721Filterer) ParseApproval(log types.Log) (*IERC721Approval, error) {
	event := new(IERC721Approval)
	if err := _IERC721.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC721ApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the IERC721 contract.
type IERC721ApprovalForAllIterator struct {
	Event *IERC721ApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC721ApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC721ApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC721ApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC721ApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC721ApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC721ApprovalForAll represents a ApprovalForAll event raised by the IERC721 contract.
type IERC721ApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_IERC721 *IERC721Filterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*IERC721ApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _IERC721.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &IERC721ApprovalForAllIterator{contract: _IERC721.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_IERC721 *IERC721Filterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *IERC721ApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _IERC721.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC721ApprovalForAll)
				if err := _IERC721.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_IERC721 *IERC721Filterer) ParseApprovalForAll(log types.Log) (*IERC721ApprovalForAll, error) {
	event := new(IERC721ApprovalForAll)
	if err := _IERC721.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC721TransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the IERC721 contract.
type IERC721TransferIterator struct {
	Event *IERC721Transfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC721TransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC721Transfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC721Transfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC721TransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC721TransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC721Transfer represents a Transfer event raised by the IERC721 contract.
type IERC721Transfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_IERC721 *IERC721Filterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*IERC721TransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _IERC721.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &IERC721TransferIterator{contract: _IERC721.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_IERC721 *IERC721Filterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *IERC721Transfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _IERC721.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC721Transfer)
				if err := _IERC721.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_IERC721 *IERC721Filterer) ParseTransfer(log types.Log) (*IERC721Transfer, error) {
	event := new(IERC721Transfer)
	if err := _IERC721.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC721MetadataMetaData contains all meta data concerning the IERC721Metadata contract.
var IERC721MetadataMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// IERC721MetadataABI is the input ABI used to generate the binding from.
// Deprecated: Use IERC721MetadataMetaData.ABI instead.
var IERC721MetadataABI = IERC721MetadataMetaData.ABI

// IERC721Metadata is an auto generated Go binding around an Ethereum contract.
type IERC721Metadata struct {
	IERC721MetadataCaller     // Read-only binding to the contract
	IERC721MetadataTransactor // Write-only binding to the contract
	IERC721MetadataFilterer   // Log filterer for contract events
}

// IERC721MetadataCaller is an auto generated read-only Go binding around an Ethereum contract.
type IERC721MetadataCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721MetadataTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IERC721MetadataTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721MetadataFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IERC721MetadataFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721MetadataSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IERC721MetadataSession struct {
	Contract     *IERC721Metadata  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IERC721MetadataCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IERC721MetadataCallerSession struct {
	Contract *IERC721MetadataCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// IERC721MetadataTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IERC721MetadataTransactorSession struct {
	Contract     *IERC721MetadataTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// IERC721MetadataRaw is an auto generated low-level Go binding around an Ethereum contract.
type IERC721MetadataRaw struct {
	Contract *IERC721Metadata // Generic contract binding to access the raw methods on
}

// IERC721MetadataCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IERC721MetadataCallerRaw struct {
	Contract *IERC721MetadataCaller // Generic read-only contract binding to access the raw methods on
}

// IERC721MetadataTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IERC721MetadataTransactorRaw struct {
	Contract *IERC721MetadataTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIERC721Metadata creates a new instance of IERC721Metadata, bound to a specific deployed contract.
func NewIERC721Metadata(address common.Address, backend bind.ContractBackend) (*IERC721Metadata, error) {
	contract, err := bindIERC721Metadata(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IERC721Metadata{IERC721MetadataCaller: IERC721MetadataCaller{contract: contract}, IERC721MetadataTransactor: IERC721MetadataTransactor{contract: contract}, IERC721MetadataFilterer: IERC721MetadataFilterer{contract: contract}}, nil
}

// NewIERC721MetadataCaller creates a new read-only instance of IERC721Metadata, bound to a specific deployed contract.
func NewIERC721MetadataCaller(address common.Address, caller bind.ContractCaller) (*IERC721MetadataCaller, error) {
	contract, err := bindIERC721Metadata(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IERC721MetadataCaller{contract: contract}, nil
}

// NewIERC721MetadataTransactor creates a new write-only instance of IERC721Metadata, bound to a specific deployed contract.
func NewIERC721MetadataTransactor(address common.Address, transactor bind.ContractTransactor) (*IERC721MetadataTransactor, error) {
	contract, err := bindIERC721Metadata(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IERC721MetadataTransactor{contract: contract}, nil
}

// NewIERC721MetadataFilterer creates a new log filterer instance of IERC721Metadata, bound to a specific deployed contract.
func NewIERC721MetadataFilterer(address common.Address, filterer bind.ContractFilterer) (*IERC721MetadataFilterer, error) {
	contract, err := bindIERC721Metadata(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IERC721MetadataFilterer{contract: contract}, nil
}

// bindIERC721Metadata binds a generic wrapper to an already deployed contract.
func bindIERC721Metadata(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IERC721MetadataABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC721Metadata *IERC721MetadataRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC721Metadata.Contract.IERC721MetadataCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC721Metadata *IERC721MetadataRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC721Metadata.Contract.IERC721MetadataTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC721Metadata *IERC721MetadataRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC721Metadata.Contract.IERC721MetadataTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC721Metadata *IERC721MetadataCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC721Metadata.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC721Metadata *IERC721MetadataTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC721Metadata.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC721Metadata *IERC721MetadataTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC721Metadata.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256 balance)
func (_IERC721Metadata *IERC721MetadataCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IERC721Metadata.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256 balance)
func (_IERC721Metadata *IERC721MetadataSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _IERC721Metadata.Contract.BalanceOf(&_IERC721Metadata.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256 balance)
func (_IERC721Metadata *IERC721MetadataCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _IERC721Metadata.Contract.BalanceOf(&_IERC721Metadata.CallOpts, owner)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address operator)
func (_IERC721Metadata *IERC721MetadataCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _IERC721Metadata.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address operator)
func (_IERC721Metadata *IERC721MetadataSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _IERC721Metadata.Contract.GetApproved(&_IERC721Metadata.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address operator)
func (_IERC721Metadata *IERC721MetadataCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _IERC721Metadata.Contract.GetApproved(&_IERC721Metadata.CallOpts, tokenId)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_IERC721Metadata *IERC721MetadataCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _IERC721Metadata.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_IERC721Metadata *IERC721MetadataSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _IERC721Metadata.Contract.IsApprovedForAll(&_IERC721Metadata.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_IERC721Metadata *IERC721MetadataCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _IERC721Metadata.Contract.IsApprovedForAll(&_IERC721Metadata.CallOpts, owner, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_IERC721Metadata *IERC721MetadataCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _IERC721Metadata.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_IERC721Metadata *IERC721MetadataSession) Name() (string, error) {
	return _IERC721Metadata.Contract.Name(&_IERC721Metadata.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_IERC721Metadata *IERC721MetadataCallerSession) Name() (string, error) {
	return _IERC721Metadata.Contract.Name(&_IERC721Metadata.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address owner)
func (_IERC721Metadata *IERC721MetadataCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _IERC721Metadata.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address owner)
func (_IERC721Metadata *IERC721MetadataSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _IERC721Metadata.Contract.OwnerOf(&_IERC721Metadata.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address owner)
func (_IERC721Metadata *IERC721MetadataCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _IERC721Metadata.Contract.OwnerOf(&_IERC721Metadata.CallOpts, tokenId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_IERC721Metadata *IERC721MetadataCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _IERC721Metadata.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_IERC721Metadata *IERC721MetadataSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _IERC721Metadata.Contract.SupportsInterface(&_IERC721Metadata.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_IERC721Metadata *IERC721MetadataCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _IERC721Metadata.Contract.SupportsInterface(&_IERC721Metadata.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_IERC721Metadata *IERC721MetadataCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _IERC721Metadata.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_IERC721Metadata *IERC721MetadataSession) Symbol() (string, error) {
	return _IERC721Metadata.Contract.Symbol(&_IERC721Metadata.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_IERC721Metadata *IERC721MetadataCallerSession) Symbol() (string, error) {
	return _IERC721Metadata.Contract.Symbol(&_IERC721Metadata.CallOpts)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_IERC721Metadata *IERC721MetadataCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _IERC721Metadata.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_IERC721Metadata *IERC721MetadataSession) TokenURI(tokenId *big.Int) (string, error) {
	return _IERC721Metadata.Contract.TokenURI(&_IERC721Metadata.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_IERC721Metadata *IERC721MetadataCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _IERC721Metadata.Contract.TokenURI(&_IERC721Metadata.CallOpts, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_IERC721Metadata *IERC721MetadataTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721Metadata.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_IERC721Metadata *IERC721MetadataSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721Metadata.Contract.Approve(&_IERC721Metadata.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_IERC721Metadata *IERC721MetadataTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721Metadata.Contract.Approve(&_IERC721Metadata.TransactOpts, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_IERC721Metadata *IERC721MetadataTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721Metadata.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_IERC721Metadata *IERC721MetadataSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721Metadata.Contract.SafeTransferFrom(&_IERC721Metadata.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_IERC721Metadata *IERC721MetadataTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721Metadata.Contract.SafeTransferFrom(&_IERC721Metadata.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_IERC721Metadata *IERC721MetadataTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _IERC721Metadata.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_IERC721Metadata *IERC721MetadataSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _IERC721Metadata.Contract.SafeTransferFrom0(&_IERC721Metadata.TransactOpts, from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_IERC721Metadata *IERC721MetadataTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _IERC721Metadata.Contract.SafeTransferFrom0(&_IERC721Metadata.TransactOpts, from, to, tokenId, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool _approved) returns()
func (_IERC721Metadata *IERC721MetadataTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, _approved bool) (*types.Transaction, error) {
	return _IERC721Metadata.contract.Transact(opts, "setApprovalForAll", operator, _approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool _approved) returns()
func (_IERC721Metadata *IERC721MetadataSession) SetApprovalForAll(operator common.Address, _approved bool) (*types.Transaction, error) {
	return _IERC721Metadata.Contract.SetApprovalForAll(&_IERC721Metadata.TransactOpts, operator, _approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool _approved) returns()
func (_IERC721Metadata *IERC721MetadataTransactorSession) SetApprovalForAll(operator common.Address, _approved bool) (*types.Transaction, error) {
	return _IERC721Metadata.Contract.SetApprovalForAll(&_IERC721Metadata.TransactOpts, operator, _approved)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_IERC721Metadata *IERC721MetadataTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721Metadata.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_IERC721Metadata *IERC721MetadataSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721Metadata.Contract.TransferFrom(&_IERC721Metadata.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_IERC721Metadata *IERC721MetadataTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721Metadata.Contract.TransferFrom(&_IERC721Metadata.TransactOpts, from, to, tokenId)
}

// IERC721MetadataApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the IERC721Metadata contract.
type IERC721MetadataApprovalIterator struct {
	Event *IERC721MetadataApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC721MetadataApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC721MetadataApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC721MetadataApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC721MetadataApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC721MetadataApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC721MetadataApproval represents a Approval event raised by the IERC721Metadata contract.
type IERC721MetadataApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_IERC721Metadata *IERC721MetadataFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*IERC721MetadataApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _IERC721Metadata.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &IERC721MetadataApprovalIterator{contract: _IERC721Metadata.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_IERC721Metadata *IERC721MetadataFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *IERC721MetadataApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _IERC721Metadata.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC721MetadataApproval)
				if err := _IERC721Metadata.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_IERC721Metadata *IERC721MetadataFilterer) ParseApproval(log types.Log) (*IERC721MetadataApproval, error) {
	event := new(IERC721MetadataApproval)
	if err := _IERC721Metadata.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC721MetadataApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the IERC721Metadata contract.
type IERC721MetadataApprovalForAllIterator struct {
	Event *IERC721MetadataApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC721MetadataApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC721MetadataApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC721MetadataApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC721MetadataApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC721MetadataApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC721MetadataApprovalForAll represents a ApprovalForAll event raised by the IERC721Metadata contract.
type IERC721MetadataApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_IERC721Metadata *IERC721MetadataFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*IERC721MetadataApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _IERC721Metadata.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &IERC721MetadataApprovalForAllIterator{contract: _IERC721Metadata.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_IERC721Metadata *IERC721MetadataFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *IERC721MetadataApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _IERC721Metadata.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC721MetadataApprovalForAll)
				if err := _IERC721Metadata.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_IERC721Metadata *IERC721MetadataFilterer) ParseApprovalForAll(log types.Log) (*IERC721MetadataApprovalForAll, error) {
	event := new(IERC721MetadataApprovalForAll)
	if err := _IERC721Metadata.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC721MetadataTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the IERC721Metadata contract.
type IERC721MetadataTransferIterator struct {
	Event *IERC721MetadataTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC721MetadataTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC721MetadataTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC721MetadataTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC721MetadataTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC721MetadataTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC721MetadataTransfer represents a Transfer event raised by the IERC721Metadata contract.
type IERC721MetadataTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_IERC721Metadata *IERC721MetadataFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*IERC721MetadataTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _IERC721Metadata.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &IERC721MetadataTransferIterator{contract: _IERC721Metadata.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_IERC721Metadata *IERC721MetadataFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *IERC721MetadataTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _IERC721Metadata.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC721MetadataTransfer)
				if err := _IERC721Metadata.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_IERC721Metadata *IERC721MetadataFilterer) ParseTransfer(log types.Log) (*IERC721MetadataTransfer, error) {
	event := new(IERC721MetadataTransfer)
	if err := _IERC721Metadata.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC721ReceiverMetaData contains all meta data concerning the IERC721Receiver contract.
var IERC721ReceiverMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// IERC721ReceiverABI is the input ABI used to generate the binding from.
// Deprecated: Use IERC721ReceiverMetaData.ABI instead.
var IERC721ReceiverABI = IERC721ReceiverMetaData.ABI

// IERC721Receiver is an auto generated Go binding around an Ethereum contract.
type IERC721Receiver struct {
	IERC721ReceiverCaller     // Read-only binding to the contract
	IERC721ReceiverTransactor // Write-only binding to the contract
	IERC721ReceiverFilterer   // Log filterer for contract events
}

// IERC721ReceiverCaller is an auto generated read-only Go binding around an Ethereum contract.
type IERC721ReceiverCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721ReceiverTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IERC721ReceiverTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721ReceiverFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IERC721ReceiverFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721ReceiverSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IERC721ReceiverSession struct {
	Contract     *IERC721Receiver  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IERC721ReceiverCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IERC721ReceiverCallerSession struct {
	Contract *IERC721ReceiverCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// IERC721ReceiverTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IERC721ReceiverTransactorSession struct {
	Contract     *IERC721ReceiverTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// IERC721ReceiverRaw is an auto generated low-level Go binding around an Ethereum contract.
type IERC721ReceiverRaw struct {
	Contract *IERC721Receiver // Generic contract binding to access the raw methods on
}

// IERC721ReceiverCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IERC721ReceiverCallerRaw struct {
	Contract *IERC721ReceiverCaller // Generic read-only contract binding to access the raw methods on
}

// IERC721ReceiverTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IERC721ReceiverTransactorRaw struct {
	Contract *IERC721ReceiverTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIERC721Receiver creates a new instance of IERC721Receiver, bound to a specific deployed contract.
func NewIERC721Receiver(address common.Address, backend bind.ContractBackend) (*IERC721Receiver, error) {
	contract, err := bindIERC721Receiver(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IERC721Receiver{IERC721ReceiverCaller: IERC721ReceiverCaller{contract: contract}, IERC721ReceiverTransactor: IERC721ReceiverTransactor{contract: contract}, IERC721ReceiverFilterer: IERC721ReceiverFilterer{contract: contract}}, nil
}

// NewIERC721ReceiverCaller creates a new read-only instance of IERC721Receiver, bound to a specific deployed contract.
func NewIERC721ReceiverCaller(address common.Address, caller bind.ContractCaller) (*IERC721ReceiverCaller, error) {
	contract, err := bindIERC721Receiver(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IERC721ReceiverCaller{contract: contract}, nil
}

// NewIERC721ReceiverTransactor creates a new write-only instance of IERC721Receiver, bound to a specific deployed contract.
func NewIERC721ReceiverTransactor(address common.Address, transactor bind.ContractTransactor) (*IERC721ReceiverTransactor, error) {
	contract, err := bindIERC721Receiver(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IERC721ReceiverTransactor{contract: contract}, nil
}

// NewIERC721ReceiverFilterer creates a new log filterer instance of IERC721Receiver, bound to a specific deployed contract.
func NewIERC721ReceiverFilterer(address common.Address, filterer bind.ContractFilterer) (*IERC721ReceiverFilterer, error) {
	contract, err := bindIERC721Receiver(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IERC721ReceiverFilterer{contract: contract}, nil
}

// bindIERC721Receiver binds a generic wrapper to an already deployed contract.
func bindIERC721Receiver(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IERC721ReceiverABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC721Receiver *IERC721ReceiverRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC721Receiver.Contract.IERC721ReceiverCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC721Receiver *IERC721ReceiverRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC721Receiver.Contract.IERC721ReceiverTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC721Receiver *IERC721ReceiverRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC721Receiver.Contract.IERC721ReceiverTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC721Receiver *IERC721ReceiverCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC721Receiver.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC721Receiver *IERC721ReceiverTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC721Receiver.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC721Receiver *IERC721ReceiverTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC721Receiver.Contract.contract.Transact(opts, method, params...)
}

// OnERC721Received is a paid mutator transaction binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address operator, address from, uint256 tokenId, bytes data) returns(bytes4)
func (_IERC721Receiver *IERC721ReceiverTransactor) OnERC721Received(opts *bind.TransactOpts, operator common.Address, from common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _IERC721Receiver.contract.Transact(opts, "onERC721Received", operator, from, tokenId, data)
}

// OnERC721Received is a paid mutator transaction binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address operator, address from, uint256 tokenId, bytes data) returns(bytes4)
func (_IERC721Receiver *IERC721ReceiverSession) OnERC721Received(operator common.Address, from common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _IERC721Receiver.Contract.OnERC721Received(&_IERC721Receiver.TransactOpts, operator, from, tokenId, data)
}

// OnERC721Received is a paid mutator transaction binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address operator, address from, uint256 tokenId, bytes data) returns(bytes4)
func (_IERC721Receiver *IERC721ReceiverTransactorSession) OnERC721Received(operator common.Address, from common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _IERC721Receiver.Contract.OnERC721Received(&_IERC721Receiver.TransactOpts, operator, from, tokenId, data)
}

// IERC721TransferableMetaData contains all meta data concerning the IERC721Transferable contract.
var IERC721TransferableMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// IERC721TransferableABI is the input ABI used to generate the binding from.
// Deprecated: Use IERC721TransferableMetaData.ABI instead.
var IERC721TransferableABI = IERC721TransferableMetaData.ABI

// IERC721Transferable is an auto generated Go binding around an Ethereum contract.
type IERC721Transferable struct {
	IERC721TransferableCaller     // Read-only binding to the contract
	IERC721TransferableTransactor // Write-only binding to the contract
	IERC721TransferableFilterer   // Log filterer for contract events
}

// IERC721TransferableCaller is an auto generated read-only Go binding around an Ethereum contract.
type IERC721TransferableCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721TransferableTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IERC721TransferableTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721TransferableFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IERC721TransferableFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721TransferableSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IERC721TransferableSession struct {
	Contract     *IERC721Transferable // Generic contract binding to set the session for
	CallOpts     bind.CallOpts        // Call options to use throughout this session
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// IERC721TransferableCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IERC721TransferableCallerSession struct {
	Contract *IERC721TransferableCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts              // Call options to use throughout this session
}

// IERC721TransferableTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IERC721TransferableTransactorSession struct {
	Contract     *IERC721TransferableTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts              // Transaction auth options to use throughout this session
}

// IERC721TransferableRaw is an auto generated low-level Go binding around an Ethereum contract.
type IERC721TransferableRaw struct {
	Contract *IERC721Transferable // Generic contract binding to access the raw methods on
}

// IERC721TransferableCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IERC721TransferableCallerRaw struct {
	Contract *IERC721TransferableCaller // Generic read-only contract binding to access the raw methods on
}

// IERC721TransferableTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IERC721TransferableTransactorRaw struct {
	Contract *IERC721TransferableTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIERC721Transferable creates a new instance of IERC721Transferable, bound to a specific deployed contract.
func NewIERC721Transferable(address common.Address, backend bind.ContractBackend) (*IERC721Transferable, error) {
	contract, err := bindIERC721Transferable(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IERC721Transferable{IERC721TransferableCaller: IERC721TransferableCaller{contract: contract}, IERC721TransferableTransactor: IERC721TransferableTransactor{contract: contract}, IERC721TransferableFilterer: IERC721TransferableFilterer{contract: contract}}, nil
}

// NewIERC721TransferableCaller creates a new read-only instance of IERC721Transferable, bound to a specific deployed contract.
func NewIERC721TransferableCaller(address common.Address, caller bind.ContractCaller) (*IERC721TransferableCaller, error) {
	contract, err := bindIERC721Transferable(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IERC721TransferableCaller{contract: contract}, nil
}

// NewIERC721TransferableTransactor creates a new write-only instance of IERC721Transferable, bound to a specific deployed contract.
func NewIERC721TransferableTransactor(address common.Address, transactor bind.ContractTransactor) (*IERC721TransferableTransactor, error) {
	contract, err := bindIERC721Transferable(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IERC721TransferableTransactor{contract: contract}, nil
}

// NewIERC721TransferableFilterer creates a new log filterer instance of IERC721Transferable, bound to a specific deployed contract.
func NewIERC721TransferableFilterer(address common.Address, filterer bind.ContractFilterer) (*IERC721TransferableFilterer, error) {
	contract, err := bindIERC721Transferable(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IERC721TransferableFilterer{contract: contract}, nil
}

// bindIERC721Transferable binds a generic wrapper to an already deployed contract.
func bindIERC721Transferable(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IERC721TransferableABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC721Transferable *IERC721TransferableRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC721Transferable.Contract.IERC721TransferableCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC721Transferable *IERC721TransferableRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC721Transferable.Contract.IERC721TransferableTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC721Transferable *IERC721TransferableRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC721Transferable.Contract.IERC721TransferableTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC721Transferable *IERC721TransferableCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC721Transferable.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC721Transferable *IERC721TransferableTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC721Transferable.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC721Transferable *IERC721TransferableTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC721Transferable.Contract.contract.Transact(opts, method, params...)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_IERC721Transferable *IERC721TransferableTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721Transferable.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_IERC721Transferable *IERC721TransferableSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721Transferable.Contract.SafeTransferFrom(&_IERC721Transferable.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_IERC721Transferable *IERC721TransferableTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721Transferable.Contract.SafeTransferFrom(&_IERC721Transferable.TransactOpts, from, to, tokenId)
}

// IETHDKGMetaData contains all meta data concerning the IETHDKG contract.
var IETHDKGMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"dishonestAddresses\",\"type\":\"address[]\"}],\"name\":\"accuseParticipantDidNotDistributeShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"dishonestAddresses\",\"type\":\"address[]\"}],\"name\":\"accuseParticipantDidNotSubmitGPKJ\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"dishonestAddresses\",\"type\":\"address[]\"}],\"name\":\"accuseParticipantDidNotSubmitKeyShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dishonestAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"encryptedShares\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[2][]\",\"name\":\"commitments\",\"type\":\"uint256[2][]\"},{\"internalType\":\"uint256[2]\",\"name\":\"sharedKey\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"sharedKeyCorrectnessProof\",\"type\":\"uint256[2]\"}],\"name\":\"accuseParticipantDistributedBadShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"dishonestAddresses\",\"type\":\"address[]\"}],\"name\":\"accuseParticipantNotRegistered\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"encryptedSharesHash\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[2][][]\",\"name\":\"commitments\",\"type\":\"uint256[2][][]\"},{\"internalType\":\"address\",\"name\":\"dishonestAddress\",\"type\":\"address\"}],\"name\":\"accuseParticipantSubmittedBadGPKJ\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"complete\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"encryptedShares\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[2][]\",\"name\":\"commitments\",\"type\":\"uint256[2][]\"}],\"name\":\"distributeShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBadParticipants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConfirmationLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getETHDKGPhase\",\"outputs\":[{\"internalType\":\"enumPhase\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMasterPublicKey\",\"outputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"\",\"type\":\"uint256[4]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinValidators\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumParticipants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"getParticipantInternalState\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"publicKey\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"enumPhase\",\"name\":\"phase\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"distributedSharesHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[2]\",\"name\":\"commitmentsFirstCoefficient\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"keyShares\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[4]\",\"name\":\"gpkj\",\"type\":\"uint256[4]\"}],\"internalType\":\"structParticipant\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPhaseLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPhaseStartBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeETHDKG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isETHDKGRunning\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMasterPublicKeySet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"publicKey\",\"type\":\"uint256[2]\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"confirmationLength_\",\"type\":\"uint16\"}],\"name\":\"setConfirmationLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"madnetHeight\",\"type\":\"uint256\"}],\"name\":\"setCustomMadnetHeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"minValidators_\",\"type\":\"uint16\"}],\"name\":\"setMinNumberOfValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"phaseLength_\",\"type\":\"uint16\"}],\"name\":\"setPhaseLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"snapshots\",\"type\":\"address\"}],\"name\":\"setSnapshotsAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validatorPool\",\"type\":\"address\"}],\"name\":\"setValidatorPoolAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"gpkj\",\"type\":\"uint256[4]\"}],\"name\":\"submitGPKJ\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"keyShareG1\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"keyShareG1CorrectnessProof\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[4]\",\"name\":\"keyShareG2\",\"type\":\"uint256[4]\"}],\"name\":\"submitKeyShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"masterPublicKey_\",\"type\":\"uint256[4]\"}],\"name\":\"submitMasterPublicKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"tryGetParticipantIndex\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// IETHDKGABI is the input ABI used to generate the binding from.
// Deprecated: Use IETHDKGMetaData.ABI instead.
var IETHDKGABI = IETHDKGMetaData.ABI

// IETHDKG is an auto generated Go binding around an Ethereum contract.
type IETHDKG struct {
	IETHDKGCaller     // Read-only binding to the contract
	IETHDKGTransactor // Write-only binding to the contract
	IETHDKGFilterer   // Log filterer for contract events
}

// IETHDKGCaller is an auto generated read-only Go binding around an Ethereum contract.
type IETHDKGCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IETHDKGTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IETHDKGTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IETHDKGFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IETHDKGFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IETHDKGSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IETHDKGSession struct {
	Contract     *IETHDKG          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IETHDKGCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IETHDKGCallerSession struct {
	Contract *IETHDKGCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// IETHDKGTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IETHDKGTransactorSession struct {
	Contract     *IETHDKGTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// IETHDKGRaw is an auto generated low-level Go binding around an Ethereum contract.
type IETHDKGRaw struct {
	Contract *IETHDKG // Generic contract binding to access the raw methods on
}

// IETHDKGCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IETHDKGCallerRaw struct {
	Contract *IETHDKGCaller // Generic read-only contract binding to access the raw methods on
}

// IETHDKGTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IETHDKGTransactorRaw struct {
	Contract *IETHDKGTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIETHDKG creates a new instance of IETHDKG, bound to a specific deployed contract.
func NewIETHDKG(address common.Address, backend bind.ContractBackend) (*IETHDKG, error) {
	contract, err := bindIETHDKG(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IETHDKG{IETHDKGCaller: IETHDKGCaller{contract: contract}, IETHDKGTransactor: IETHDKGTransactor{contract: contract}, IETHDKGFilterer: IETHDKGFilterer{contract: contract}}, nil
}

// NewIETHDKGCaller creates a new read-only instance of IETHDKG, bound to a specific deployed contract.
func NewIETHDKGCaller(address common.Address, caller bind.ContractCaller) (*IETHDKGCaller, error) {
	contract, err := bindIETHDKG(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IETHDKGCaller{contract: contract}, nil
}

// NewIETHDKGTransactor creates a new write-only instance of IETHDKG, bound to a specific deployed contract.
func NewIETHDKGTransactor(address common.Address, transactor bind.ContractTransactor) (*IETHDKGTransactor, error) {
	contract, err := bindIETHDKG(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IETHDKGTransactor{contract: contract}, nil
}

// NewIETHDKGFilterer creates a new log filterer instance of IETHDKG, bound to a specific deployed contract.
func NewIETHDKGFilterer(address common.Address, filterer bind.ContractFilterer) (*IETHDKGFilterer, error) {
	contract, err := bindIETHDKG(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IETHDKGFilterer{contract: contract}, nil
}

// bindIETHDKG binds a generic wrapper to an already deployed contract.
func bindIETHDKG(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IETHDKGABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IETHDKG *IETHDKGRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IETHDKG.Contract.IETHDKGCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IETHDKG *IETHDKGRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IETHDKG.Contract.IETHDKGTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IETHDKG *IETHDKGRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IETHDKG.Contract.IETHDKGTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IETHDKG *IETHDKGCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IETHDKG.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IETHDKG *IETHDKGTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IETHDKG.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IETHDKG *IETHDKGTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IETHDKG.Contract.contract.Transact(opts, method, params...)
}

// GetBadParticipants is a free data retrieval call binding the contract method 0x32d4d570.
//
// Solidity: function getBadParticipants() view returns(uint256)
func (_IETHDKG *IETHDKGCaller) GetBadParticipants(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IETHDKG.contract.Call(opts, &out, "getBadParticipants")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetBadParticipants is a free data retrieval call binding the contract method 0x32d4d570.
//
// Solidity: function getBadParticipants() view returns(uint256)
func (_IETHDKG *IETHDKGSession) GetBadParticipants() (*big.Int, error) {
	return _IETHDKG.Contract.GetBadParticipants(&_IETHDKG.CallOpts)
}

// GetBadParticipants is a free data retrieval call binding the contract method 0x32d4d570.
//
// Solidity: function getBadParticipants() view returns(uint256)
func (_IETHDKG *IETHDKGCallerSession) GetBadParticipants() (*big.Int, error) {
	return _IETHDKG.Contract.GetBadParticipants(&_IETHDKG.CallOpts)
}

// GetConfirmationLength is a free data retrieval call binding the contract method 0x8c848d32.
//
// Solidity: function getConfirmationLength() view returns(uint256)
func (_IETHDKG *IETHDKGCaller) GetConfirmationLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IETHDKG.contract.Call(opts, &out, "getConfirmationLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetConfirmationLength is a free data retrieval call binding the contract method 0x8c848d32.
//
// Solidity: function getConfirmationLength() view returns(uint256)
func (_IETHDKG *IETHDKGSession) GetConfirmationLength() (*big.Int, error) {
	return _IETHDKG.Contract.GetConfirmationLength(&_IETHDKG.CallOpts)
}

// GetConfirmationLength is a free data retrieval call binding the contract method 0x8c848d32.
//
// Solidity: function getConfirmationLength() view returns(uint256)
func (_IETHDKG *IETHDKGCallerSession) GetConfirmationLength() (*big.Int, error) {
	return _IETHDKG.Contract.GetConfirmationLength(&_IETHDKG.CallOpts)
}

// GetETHDKGPhase is a free data retrieval call binding the contract method 0x2958e81c.
//
// Solidity: function getETHDKGPhase() view returns(uint8)
func (_IETHDKG *IETHDKGCaller) GetETHDKGPhase(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _IETHDKG.contract.Call(opts, &out, "getETHDKGPhase")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetETHDKGPhase is a free data retrieval call binding the contract method 0x2958e81c.
//
// Solidity: function getETHDKGPhase() view returns(uint8)
func (_IETHDKG *IETHDKGSession) GetETHDKGPhase() (uint8, error) {
	return _IETHDKG.Contract.GetETHDKGPhase(&_IETHDKG.CallOpts)
}

// GetETHDKGPhase is a free data retrieval call binding the contract method 0x2958e81c.
//
// Solidity: function getETHDKGPhase() view returns(uint8)
func (_IETHDKG *IETHDKGCallerSession) GetETHDKGPhase() (uint8, error) {
	return _IETHDKG.Contract.GetETHDKGPhase(&_IETHDKG.CallOpts)
}

// GetMasterPublicKey is a free data retrieval call binding the contract method 0xe146372a.
//
// Solidity: function getMasterPublicKey() view returns(uint256[4])
func (_IETHDKG *IETHDKGCaller) GetMasterPublicKey(opts *bind.CallOpts) ([4]*big.Int, error) {
	var out []interface{}
	err := _IETHDKG.contract.Call(opts, &out, "getMasterPublicKey")

	if err != nil {
		return *new([4]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([4]*big.Int)).(*[4]*big.Int)

	return out0, err

}

// GetMasterPublicKey is a free data retrieval call binding the contract method 0xe146372a.
//
// Solidity: function getMasterPublicKey() view returns(uint256[4])
func (_IETHDKG *IETHDKGSession) GetMasterPublicKey() ([4]*big.Int, error) {
	return _IETHDKG.Contract.GetMasterPublicKey(&_IETHDKG.CallOpts)
}

// GetMasterPublicKey is a free data retrieval call binding the contract method 0xe146372a.
//
// Solidity: function getMasterPublicKey() view returns(uint256[4])
func (_IETHDKG *IETHDKGCallerSession) GetMasterPublicKey() ([4]*big.Int, error) {
	return _IETHDKG.Contract.GetMasterPublicKey(&_IETHDKG.CallOpts)
}

// GetMinValidators is a free data retrieval call binding the contract method 0xecbadb36.
//
// Solidity: function getMinValidators() view returns(uint256)
func (_IETHDKG *IETHDKGCaller) GetMinValidators(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IETHDKG.contract.Call(opts, &out, "getMinValidators")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMinValidators is a free data retrieval call binding the contract method 0xecbadb36.
//
// Solidity: function getMinValidators() view returns(uint256)
func (_IETHDKG *IETHDKGSession) GetMinValidators() (*big.Int, error) {
	return _IETHDKG.Contract.GetMinValidators(&_IETHDKG.CallOpts)
}

// GetMinValidators is a free data retrieval call binding the contract method 0xecbadb36.
//
// Solidity: function getMinValidators() view returns(uint256)
func (_IETHDKG *IETHDKGCallerSession) GetMinValidators() (*big.Int, error) {
	return _IETHDKG.Contract.GetMinValidators(&_IETHDKG.CallOpts)
}

// GetNonce is a free data retrieval call binding the contract method 0xd087d288.
//
// Solidity: function getNonce() view returns(uint256)
func (_IETHDKG *IETHDKGCaller) GetNonce(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IETHDKG.contract.Call(opts, &out, "getNonce")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetNonce is a free data retrieval call binding the contract method 0xd087d288.
//
// Solidity: function getNonce() view returns(uint256)
func (_IETHDKG *IETHDKGSession) GetNonce() (*big.Int, error) {
	return _IETHDKG.Contract.GetNonce(&_IETHDKG.CallOpts)
}

// GetNonce is a free data retrieval call binding the contract method 0xd087d288.
//
// Solidity: function getNonce() view returns(uint256)
func (_IETHDKG *IETHDKGCallerSession) GetNonce() (*big.Int, error) {
	return _IETHDKG.Contract.GetNonce(&_IETHDKG.CallOpts)
}

// GetNumParticipants is a free data retrieval call binding the contract method 0xfd478ca9.
//
// Solidity: function getNumParticipants() view returns(uint256)
func (_IETHDKG *IETHDKGCaller) GetNumParticipants(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IETHDKG.contract.Call(opts, &out, "getNumParticipants")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetNumParticipants is a free data retrieval call binding the contract method 0xfd478ca9.
//
// Solidity: function getNumParticipants() view returns(uint256)
func (_IETHDKG *IETHDKGSession) GetNumParticipants() (*big.Int, error) {
	return _IETHDKG.Contract.GetNumParticipants(&_IETHDKG.CallOpts)
}

// GetNumParticipants is a free data retrieval call binding the contract method 0xfd478ca9.
//
// Solidity: function getNumParticipants() view returns(uint256)
func (_IETHDKG *IETHDKGCallerSession) GetNumParticipants() (*big.Int, error) {
	return _IETHDKG.Contract.GetNumParticipants(&_IETHDKG.CallOpts)
}

// GetParticipantInternalState is a free data retrieval call binding the contract method 0xbf7786b6.
//
// Solidity: function getParticipantInternalState(address participant) view returns((uint256[2],uint64,uint64,uint8,bytes32,uint256[2],uint256[2],uint256[4]))
func (_IETHDKG *IETHDKGCaller) GetParticipantInternalState(opts *bind.CallOpts, participant common.Address) (Participant, error) {
	var out []interface{}
	err := _IETHDKG.contract.Call(opts, &out, "getParticipantInternalState", participant)

	if err != nil {
		return *new(Participant), err
	}

	out0 := *abi.ConvertType(out[0], new(Participant)).(*Participant)

	return out0, err

}

// GetParticipantInternalState is a free data retrieval call binding the contract method 0xbf7786b6.
//
// Solidity: function getParticipantInternalState(address participant) view returns((uint256[2],uint64,uint64,uint8,bytes32,uint256[2],uint256[2],uint256[4]))
func (_IETHDKG *IETHDKGSession) GetParticipantInternalState(participant common.Address) (Participant, error) {
	return _IETHDKG.Contract.GetParticipantInternalState(&_IETHDKG.CallOpts, participant)
}

// GetParticipantInternalState is a free data retrieval call binding the contract method 0xbf7786b6.
//
// Solidity: function getParticipantInternalState(address participant) view returns((uint256[2],uint64,uint64,uint8,bytes32,uint256[2],uint256[2],uint256[4]))
func (_IETHDKG *IETHDKGCallerSession) GetParticipantInternalState(participant common.Address) (Participant, error) {
	return _IETHDKG.Contract.GetParticipantInternalState(&_IETHDKG.CallOpts, participant)
}

// GetPhaseLength is a free data retrieval call binding the contract method 0x106da57d.
//
// Solidity: function getPhaseLength() view returns(uint256)
func (_IETHDKG *IETHDKGCaller) GetPhaseLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IETHDKG.contract.Call(opts, &out, "getPhaseLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPhaseLength is a free data retrieval call binding the contract method 0x106da57d.
//
// Solidity: function getPhaseLength() view returns(uint256)
func (_IETHDKG *IETHDKGSession) GetPhaseLength() (*big.Int, error) {
	return _IETHDKG.Contract.GetPhaseLength(&_IETHDKG.CallOpts)
}

// GetPhaseLength is a free data retrieval call binding the contract method 0x106da57d.
//
// Solidity: function getPhaseLength() view returns(uint256)
func (_IETHDKG *IETHDKGCallerSession) GetPhaseLength() (*big.Int, error) {
	return _IETHDKG.Contract.GetPhaseLength(&_IETHDKG.CallOpts)
}

// GetPhaseStartBlock is a free data retrieval call binding the contract method 0xa2bc9c78.
//
// Solidity: function getPhaseStartBlock() view returns(uint256)
func (_IETHDKG *IETHDKGCaller) GetPhaseStartBlock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IETHDKG.contract.Call(opts, &out, "getPhaseStartBlock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPhaseStartBlock is a free data retrieval call binding the contract method 0xa2bc9c78.
//
// Solidity: function getPhaseStartBlock() view returns(uint256)
func (_IETHDKG *IETHDKGSession) GetPhaseStartBlock() (*big.Int, error) {
	return _IETHDKG.Contract.GetPhaseStartBlock(&_IETHDKG.CallOpts)
}

// GetPhaseStartBlock is a free data retrieval call binding the contract method 0xa2bc9c78.
//
// Solidity: function getPhaseStartBlock() view returns(uint256)
func (_IETHDKG *IETHDKGCallerSession) GetPhaseStartBlock() (*big.Int, error) {
	return _IETHDKG.Contract.GetPhaseStartBlock(&_IETHDKG.CallOpts)
}

// IsETHDKGRunning is a free data retrieval call binding the contract method 0x747b217c.
//
// Solidity: function isETHDKGRunning() view returns(bool)
func (_IETHDKG *IETHDKGCaller) IsETHDKGRunning(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _IETHDKG.contract.Call(opts, &out, "isETHDKGRunning")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsETHDKGRunning is a free data retrieval call binding the contract method 0x747b217c.
//
// Solidity: function isETHDKGRunning() view returns(bool)
func (_IETHDKG *IETHDKGSession) IsETHDKGRunning() (bool, error) {
	return _IETHDKG.Contract.IsETHDKGRunning(&_IETHDKG.CallOpts)
}

// IsETHDKGRunning is a free data retrieval call binding the contract method 0x747b217c.
//
// Solidity: function isETHDKGRunning() view returns(bool)
func (_IETHDKG *IETHDKGCallerSession) IsETHDKGRunning() (bool, error) {
	return _IETHDKG.Contract.IsETHDKGRunning(&_IETHDKG.CallOpts)
}

// IsMasterPublicKeySet is a free data retrieval call binding the contract method 0x08efcf16.
//
// Solidity: function isMasterPublicKeySet() view returns(bool)
func (_IETHDKG *IETHDKGCaller) IsMasterPublicKeySet(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _IETHDKG.contract.Call(opts, &out, "isMasterPublicKeySet")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsMasterPublicKeySet is a free data retrieval call binding the contract method 0x08efcf16.
//
// Solidity: function isMasterPublicKeySet() view returns(bool)
func (_IETHDKG *IETHDKGSession) IsMasterPublicKeySet() (bool, error) {
	return _IETHDKG.Contract.IsMasterPublicKeySet(&_IETHDKG.CallOpts)
}

// IsMasterPublicKeySet is a free data retrieval call binding the contract method 0x08efcf16.
//
// Solidity: function isMasterPublicKeySet() view returns(bool)
func (_IETHDKG *IETHDKGCallerSession) IsMasterPublicKeySet() (bool, error) {
	return _IETHDKG.Contract.IsMasterPublicKeySet(&_IETHDKG.CallOpts)
}

// TryGetParticipantIndex is a free data retrieval call binding the contract method 0x65e62b9b.
//
// Solidity: function tryGetParticipantIndex(address participant) view returns(bool, uint256)
func (_IETHDKG *IETHDKGCaller) TryGetParticipantIndex(opts *bind.CallOpts, participant common.Address) (bool, *big.Int, error) {
	var out []interface{}
	err := _IETHDKG.contract.Call(opts, &out, "tryGetParticipantIndex", participant)

	if err != nil {
		return *new(bool), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return out0, out1, err

}

// TryGetParticipantIndex is a free data retrieval call binding the contract method 0x65e62b9b.
//
// Solidity: function tryGetParticipantIndex(address participant) view returns(bool, uint256)
func (_IETHDKG *IETHDKGSession) TryGetParticipantIndex(participant common.Address) (bool, *big.Int, error) {
	return _IETHDKG.Contract.TryGetParticipantIndex(&_IETHDKG.CallOpts, participant)
}

// TryGetParticipantIndex is a free data retrieval call binding the contract method 0x65e62b9b.
//
// Solidity: function tryGetParticipantIndex(address participant) view returns(bool, uint256)
func (_IETHDKG *IETHDKGCallerSession) TryGetParticipantIndex(participant common.Address) (bool, *big.Int, error) {
	return _IETHDKG.Contract.TryGetParticipantIndex(&_IETHDKG.CallOpts, participant)
}

// AccuseParticipantDidNotDistributeShares is a paid mutator transaction binding the contract method 0xdae681bc.
//
// Solidity: function accuseParticipantDidNotDistributeShares(address[] dishonestAddresses) returns()
func (_IETHDKG *IETHDKGTransactor) AccuseParticipantDidNotDistributeShares(opts *bind.TransactOpts, dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _IETHDKG.contract.Transact(opts, "accuseParticipantDidNotDistributeShares", dishonestAddresses)
}

// AccuseParticipantDidNotDistributeShares is a paid mutator transaction binding the contract method 0xdae681bc.
//
// Solidity: function accuseParticipantDidNotDistributeShares(address[] dishonestAddresses) returns()
func (_IETHDKG *IETHDKGSession) AccuseParticipantDidNotDistributeShares(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _IETHDKG.Contract.AccuseParticipantDidNotDistributeShares(&_IETHDKG.TransactOpts, dishonestAddresses)
}

// AccuseParticipantDidNotDistributeShares is a paid mutator transaction binding the contract method 0xdae681bc.
//
// Solidity: function accuseParticipantDidNotDistributeShares(address[] dishonestAddresses) returns()
func (_IETHDKG *IETHDKGTransactorSession) AccuseParticipantDidNotDistributeShares(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _IETHDKG.Contract.AccuseParticipantDidNotDistributeShares(&_IETHDKG.TransactOpts, dishonestAddresses)
}

// AccuseParticipantDidNotSubmitGPKJ is a paid mutator transaction binding the contract method 0x7df24ee9.
//
// Solidity: function accuseParticipantDidNotSubmitGPKJ(address[] dishonestAddresses) returns()
func (_IETHDKG *IETHDKGTransactor) AccuseParticipantDidNotSubmitGPKJ(opts *bind.TransactOpts, dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _IETHDKG.contract.Transact(opts, "accuseParticipantDidNotSubmitGPKJ", dishonestAddresses)
}

// AccuseParticipantDidNotSubmitGPKJ is a paid mutator transaction binding the contract method 0x7df24ee9.
//
// Solidity: function accuseParticipantDidNotSubmitGPKJ(address[] dishonestAddresses) returns()
func (_IETHDKG *IETHDKGSession) AccuseParticipantDidNotSubmitGPKJ(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _IETHDKG.Contract.AccuseParticipantDidNotSubmitGPKJ(&_IETHDKG.TransactOpts, dishonestAddresses)
}

// AccuseParticipantDidNotSubmitGPKJ is a paid mutator transaction binding the contract method 0x7df24ee9.
//
// Solidity: function accuseParticipantDidNotSubmitGPKJ(address[] dishonestAddresses) returns()
func (_IETHDKG *IETHDKGTransactorSession) AccuseParticipantDidNotSubmitGPKJ(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _IETHDKG.Contract.AccuseParticipantDidNotSubmitGPKJ(&_IETHDKG.TransactOpts, dishonestAddresses)
}

// AccuseParticipantDidNotSubmitKeyShares is a paid mutator transaction binding the contract method 0x043a6f12.
//
// Solidity: function accuseParticipantDidNotSubmitKeyShares(address[] dishonestAddresses) returns()
func (_IETHDKG *IETHDKGTransactor) AccuseParticipantDidNotSubmitKeyShares(opts *bind.TransactOpts, dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _IETHDKG.contract.Transact(opts, "accuseParticipantDidNotSubmitKeyShares", dishonestAddresses)
}

// AccuseParticipantDidNotSubmitKeyShares is a paid mutator transaction binding the contract method 0x043a6f12.
//
// Solidity: function accuseParticipantDidNotSubmitKeyShares(address[] dishonestAddresses) returns()
func (_IETHDKG *IETHDKGSession) AccuseParticipantDidNotSubmitKeyShares(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _IETHDKG.Contract.AccuseParticipantDidNotSubmitKeyShares(&_IETHDKG.TransactOpts, dishonestAddresses)
}

// AccuseParticipantDidNotSubmitKeyShares is a paid mutator transaction binding the contract method 0x043a6f12.
//
// Solidity: function accuseParticipantDidNotSubmitKeyShares(address[] dishonestAddresses) returns()
func (_IETHDKG *IETHDKGTransactorSession) AccuseParticipantDidNotSubmitKeyShares(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _IETHDKG.Contract.AccuseParticipantDidNotSubmitKeyShares(&_IETHDKG.TransactOpts, dishonestAddresses)
}

// AccuseParticipantDistributedBadShares is a paid mutator transaction binding the contract method 0xedbe7bf7.
//
// Solidity: function accuseParticipantDistributedBadShares(address dishonestAddress, uint256[] encryptedShares, uint256[2][] commitments, uint256[2] sharedKey, uint256[2] sharedKeyCorrectnessProof) returns()
func (_IETHDKG *IETHDKGTransactor) AccuseParticipantDistributedBadShares(opts *bind.TransactOpts, dishonestAddress common.Address, encryptedShares []*big.Int, commitments [][2]*big.Int, sharedKey [2]*big.Int, sharedKeyCorrectnessProof [2]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.contract.Transact(opts, "accuseParticipantDistributedBadShares", dishonestAddress, encryptedShares, commitments, sharedKey, sharedKeyCorrectnessProof)
}

// AccuseParticipantDistributedBadShares is a paid mutator transaction binding the contract method 0xedbe7bf7.
//
// Solidity: function accuseParticipantDistributedBadShares(address dishonestAddress, uint256[] encryptedShares, uint256[2][] commitments, uint256[2] sharedKey, uint256[2] sharedKeyCorrectnessProof) returns()
func (_IETHDKG *IETHDKGSession) AccuseParticipantDistributedBadShares(dishonestAddress common.Address, encryptedShares []*big.Int, commitments [][2]*big.Int, sharedKey [2]*big.Int, sharedKeyCorrectnessProof [2]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.Contract.AccuseParticipantDistributedBadShares(&_IETHDKG.TransactOpts, dishonestAddress, encryptedShares, commitments, sharedKey, sharedKeyCorrectnessProof)
}

// AccuseParticipantDistributedBadShares is a paid mutator transaction binding the contract method 0xedbe7bf7.
//
// Solidity: function accuseParticipantDistributedBadShares(address dishonestAddress, uint256[] encryptedShares, uint256[2][] commitments, uint256[2] sharedKey, uint256[2] sharedKeyCorrectnessProof) returns()
func (_IETHDKG *IETHDKGTransactorSession) AccuseParticipantDistributedBadShares(dishonestAddress common.Address, encryptedShares []*big.Int, commitments [][2]*big.Int, sharedKey [2]*big.Int, sharedKeyCorrectnessProof [2]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.Contract.AccuseParticipantDistributedBadShares(&_IETHDKG.TransactOpts, dishonestAddress, encryptedShares, commitments, sharedKey, sharedKeyCorrectnessProof)
}

// AccuseParticipantNotRegistered is a paid mutator transaction binding the contract method 0xf72c45b6.
//
// Solidity: function accuseParticipantNotRegistered(address[] dishonestAddresses) returns()
func (_IETHDKG *IETHDKGTransactor) AccuseParticipantNotRegistered(opts *bind.TransactOpts, dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _IETHDKG.contract.Transact(opts, "accuseParticipantNotRegistered", dishonestAddresses)
}

// AccuseParticipantNotRegistered is a paid mutator transaction binding the contract method 0xf72c45b6.
//
// Solidity: function accuseParticipantNotRegistered(address[] dishonestAddresses) returns()
func (_IETHDKG *IETHDKGSession) AccuseParticipantNotRegistered(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _IETHDKG.Contract.AccuseParticipantNotRegistered(&_IETHDKG.TransactOpts, dishonestAddresses)
}

// AccuseParticipantNotRegistered is a paid mutator transaction binding the contract method 0xf72c45b6.
//
// Solidity: function accuseParticipantNotRegistered(address[] dishonestAddresses) returns()
func (_IETHDKG *IETHDKGTransactorSession) AccuseParticipantNotRegistered(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _IETHDKG.Contract.AccuseParticipantNotRegistered(&_IETHDKG.TransactOpts, dishonestAddresses)
}

// AccuseParticipantSubmittedBadGPKJ is a paid mutator transaction binding the contract method 0x80001264.
//
// Solidity: function accuseParticipantSubmittedBadGPKJ(address[] validators, bytes32[] encryptedSharesHash, uint256[2][][] commitments, address dishonestAddress) returns()
func (_IETHDKG *IETHDKGTransactor) AccuseParticipantSubmittedBadGPKJ(opts *bind.TransactOpts, validators []common.Address, encryptedSharesHash [][32]byte, commitments [][][2]*big.Int, dishonestAddress common.Address) (*types.Transaction, error) {
	return _IETHDKG.contract.Transact(opts, "accuseParticipantSubmittedBadGPKJ", validators, encryptedSharesHash, commitments, dishonestAddress)
}

// AccuseParticipantSubmittedBadGPKJ is a paid mutator transaction binding the contract method 0x80001264.
//
// Solidity: function accuseParticipantSubmittedBadGPKJ(address[] validators, bytes32[] encryptedSharesHash, uint256[2][][] commitments, address dishonestAddress) returns()
func (_IETHDKG *IETHDKGSession) AccuseParticipantSubmittedBadGPKJ(validators []common.Address, encryptedSharesHash [][32]byte, commitments [][][2]*big.Int, dishonestAddress common.Address) (*types.Transaction, error) {
	return _IETHDKG.Contract.AccuseParticipantSubmittedBadGPKJ(&_IETHDKG.TransactOpts, validators, encryptedSharesHash, commitments, dishonestAddress)
}

// AccuseParticipantSubmittedBadGPKJ is a paid mutator transaction binding the contract method 0x80001264.
//
// Solidity: function accuseParticipantSubmittedBadGPKJ(address[] validators, bytes32[] encryptedSharesHash, uint256[2][][] commitments, address dishonestAddress) returns()
func (_IETHDKG *IETHDKGTransactorSession) AccuseParticipantSubmittedBadGPKJ(validators []common.Address, encryptedSharesHash [][32]byte, commitments [][][2]*big.Int, dishonestAddress common.Address) (*types.Transaction, error) {
	return _IETHDKG.Contract.AccuseParticipantSubmittedBadGPKJ(&_IETHDKG.TransactOpts, validators, encryptedSharesHash, commitments, dishonestAddress)
}

// Complete is a paid mutator transaction binding the contract method 0x522e1177.
//
// Solidity: function complete() returns()
func (_IETHDKG *IETHDKGTransactor) Complete(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IETHDKG.contract.Transact(opts, "complete")
}

// Complete is a paid mutator transaction binding the contract method 0x522e1177.
//
// Solidity: function complete() returns()
func (_IETHDKG *IETHDKGSession) Complete() (*types.Transaction, error) {
	return _IETHDKG.Contract.Complete(&_IETHDKG.TransactOpts)
}

// Complete is a paid mutator transaction binding the contract method 0x522e1177.
//
// Solidity: function complete() returns()
func (_IETHDKG *IETHDKGTransactorSession) Complete() (*types.Transaction, error) {
	return _IETHDKG.Contract.Complete(&_IETHDKG.TransactOpts)
}

// DistributeShares is a paid mutator transaction binding the contract method 0x80b97e01.
//
// Solidity: function distributeShares(uint256[] encryptedShares, uint256[2][] commitments) returns()
func (_IETHDKG *IETHDKGTransactor) DistributeShares(opts *bind.TransactOpts, encryptedShares []*big.Int, commitments [][2]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.contract.Transact(opts, "distributeShares", encryptedShares, commitments)
}

// DistributeShares is a paid mutator transaction binding the contract method 0x80b97e01.
//
// Solidity: function distributeShares(uint256[] encryptedShares, uint256[2][] commitments) returns()
func (_IETHDKG *IETHDKGSession) DistributeShares(encryptedShares []*big.Int, commitments [][2]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.Contract.DistributeShares(&_IETHDKG.TransactOpts, encryptedShares, commitments)
}

// DistributeShares is a paid mutator transaction binding the contract method 0x80b97e01.
//
// Solidity: function distributeShares(uint256[] encryptedShares, uint256[2][] commitments) returns()
func (_IETHDKG *IETHDKGTransactorSession) DistributeShares(encryptedShares []*big.Int, commitments [][2]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.Contract.DistributeShares(&_IETHDKG.TransactOpts, encryptedShares, commitments)
}

// InitializeETHDKG is a paid mutator transaction binding the contract method 0x57b51c9c.
//
// Solidity: function initializeETHDKG() returns()
func (_IETHDKG *IETHDKGTransactor) InitializeETHDKG(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IETHDKG.contract.Transact(opts, "initializeETHDKG")
}

// InitializeETHDKG is a paid mutator transaction binding the contract method 0x57b51c9c.
//
// Solidity: function initializeETHDKG() returns()
func (_IETHDKG *IETHDKGSession) InitializeETHDKG() (*types.Transaction, error) {
	return _IETHDKG.Contract.InitializeETHDKG(&_IETHDKG.TransactOpts)
}

// InitializeETHDKG is a paid mutator transaction binding the contract method 0x57b51c9c.
//
// Solidity: function initializeETHDKG() returns()
func (_IETHDKG *IETHDKGTransactorSession) InitializeETHDKG() (*types.Transaction, error) {
	return _IETHDKG.Contract.InitializeETHDKG(&_IETHDKG.TransactOpts)
}

// Register is a paid mutator transaction binding the contract method 0x3442af5c.
//
// Solidity: function register(uint256[2] publicKey) returns()
func (_IETHDKG *IETHDKGTransactor) Register(opts *bind.TransactOpts, publicKey [2]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.contract.Transact(opts, "register", publicKey)
}

// Register is a paid mutator transaction binding the contract method 0x3442af5c.
//
// Solidity: function register(uint256[2] publicKey) returns()
func (_IETHDKG *IETHDKGSession) Register(publicKey [2]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.Contract.Register(&_IETHDKG.TransactOpts, publicKey)
}

// Register is a paid mutator transaction binding the contract method 0x3442af5c.
//
// Solidity: function register(uint256[2] publicKey) returns()
func (_IETHDKG *IETHDKGTransactorSession) Register(publicKey [2]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.Contract.Register(&_IETHDKG.TransactOpts, publicKey)
}

// SetConfirmationLength is a paid mutator transaction binding the contract method 0xff3e5e45.
//
// Solidity: function setConfirmationLength(uint16 confirmationLength_) returns()
func (_IETHDKG *IETHDKGTransactor) SetConfirmationLength(opts *bind.TransactOpts, confirmationLength_ uint16) (*types.Transaction, error) {
	return _IETHDKG.contract.Transact(opts, "setConfirmationLength", confirmationLength_)
}

// SetConfirmationLength is a paid mutator transaction binding the contract method 0xff3e5e45.
//
// Solidity: function setConfirmationLength(uint16 confirmationLength_) returns()
func (_IETHDKG *IETHDKGSession) SetConfirmationLength(confirmationLength_ uint16) (*types.Transaction, error) {
	return _IETHDKG.Contract.SetConfirmationLength(&_IETHDKG.TransactOpts, confirmationLength_)
}

// SetConfirmationLength is a paid mutator transaction binding the contract method 0xff3e5e45.
//
// Solidity: function setConfirmationLength(uint16 confirmationLength_) returns()
func (_IETHDKG *IETHDKGTransactorSession) SetConfirmationLength(confirmationLength_ uint16) (*types.Transaction, error) {
	return _IETHDKG.Contract.SetConfirmationLength(&_IETHDKG.TransactOpts, confirmationLength_)
}

// SetCustomMadnetHeight is a paid mutator transaction binding the contract method 0x8328cdf7.
//
// Solidity: function setCustomMadnetHeight(uint256 madnetHeight) returns()
func (_IETHDKG *IETHDKGTransactor) SetCustomMadnetHeight(opts *bind.TransactOpts, madnetHeight *big.Int) (*types.Transaction, error) {
	return _IETHDKG.contract.Transact(opts, "setCustomMadnetHeight", madnetHeight)
}

// SetCustomMadnetHeight is a paid mutator transaction binding the contract method 0x8328cdf7.
//
// Solidity: function setCustomMadnetHeight(uint256 madnetHeight) returns()
func (_IETHDKG *IETHDKGSession) SetCustomMadnetHeight(madnetHeight *big.Int) (*types.Transaction, error) {
	return _IETHDKG.Contract.SetCustomMadnetHeight(&_IETHDKG.TransactOpts, madnetHeight)
}

// SetCustomMadnetHeight is a paid mutator transaction binding the contract method 0x8328cdf7.
//
// Solidity: function setCustomMadnetHeight(uint256 madnetHeight) returns()
func (_IETHDKG *IETHDKGTransactorSession) SetCustomMadnetHeight(madnetHeight *big.Int) (*types.Transaction, error) {
	return _IETHDKG.Contract.SetCustomMadnetHeight(&_IETHDKG.TransactOpts, madnetHeight)
}

// SetMinNumberOfValidator is a paid mutator transaction binding the contract method 0xfb89c899.
//
// Solidity: function setMinNumberOfValidator(uint16 minValidators_) returns()
func (_IETHDKG *IETHDKGTransactor) SetMinNumberOfValidator(opts *bind.TransactOpts, minValidators_ uint16) (*types.Transaction, error) {
	return _IETHDKG.contract.Transact(opts, "setMinNumberOfValidator", minValidators_)
}

// SetMinNumberOfValidator is a paid mutator transaction binding the contract method 0xfb89c899.
//
// Solidity: function setMinNumberOfValidator(uint16 minValidators_) returns()
func (_IETHDKG *IETHDKGSession) SetMinNumberOfValidator(minValidators_ uint16) (*types.Transaction, error) {
	return _IETHDKG.Contract.SetMinNumberOfValidator(&_IETHDKG.TransactOpts, minValidators_)
}

// SetMinNumberOfValidator is a paid mutator transaction binding the contract method 0xfb89c899.
//
// Solidity: function setMinNumberOfValidator(uint16 minValidators_) returns()
func (_IETHDKG *IETHDKGTransactorSession) SetMinNumberOfValidator(minValidators_ uint16) (*types.Transaction, error) {
	return _IETHDKG.Contract.SetMinNumberOfValidator(&_IETHDKG.TransactOpts, minValidators_)
}

// SetPhaseLength is a paid mutator transaction binding the contract method 0x8a3c24cc.
//
// Solidity: function setPhaseLength(uint16 phaseLength_) returns()
func (_IETHDKG *IETHDKGTransactor) SetPhaseLength(opts *bind.TransactOpts, phaseLength_ uint16) (*types.Transaction, error) {
	return _IETHDKG.contract.Transact(opts, "setPhaseLength", phaseLength_)
}

// SetPhaseLength is a paid mutator transaction binding the contract method 0x8a3c24cc.
//
// Solidity: function setPhaseLength(uint16 phaseLength_) returns()
func (_IETHDKG *IETHDKGSession) SetPhaseLength(phaseLength_ uint16) (*types.Transaction, error) {
	return _IETHDKG.Contract.SetPhaseLength(&_IETHDKG.TransactOpts, phaseLength_)
}

// SetPhaseLength is a paid mutator transaction binding the contract method 0x8a3c24cc.
//
// Solidity: function setPhaseLength(uint16 phaseLength_) returns()
func (_IETHDKG *IETHDKGTransactorSession) SetPhaseLength(phaseLength_ uint16) (*types.Transaction, error) {
	return _IETHDKG.Contract.SetPhaseLength(&_IETHDKG.TransactOpts, phaseLength_)
}

// SetSnapshotsAddress is a paid mutator transaction binding the contract method 0xd8552806.
//
// Solidity: function setSnapshotsAddress(address snapshots) returns()
func (_IETHDKG *IETHDKGTransactor) SetSnapshotsAddress(opts *bind.TransactOpts, snapshots common.Address) (*types.Transaction, error) {
	return _IETHDKG.contract.Transact(opts, "setSnapshotsAddress", snapshots)
}

// SetSnapshotsAddress is a paid mutator transaction binding the contract method 0xd8552806.
//
// Solidity: function setSnapshotsAddress(address snapshots) returns()
func (_IETHDKG *IETHDKGSession) SetSnapshotsAddress(snapshots common.Address) (*types.Transaction, error) {
	return _IETHDKG.Contract.SetSnapshotsAddress(&_IETHDKG.TransactOpts, snapshots)
}

// SetSnapshotsAddress is a paid mutator transaction binding the contract method 0xd8552806.
//
// Solidity: function setSnapshotsAddress(address snapshots) returns()
func (_IETHDKG *IETHDKGTransactorSession) SetSnapshotsAddress(snapshots common.Address) (*types.Transaction, error) {
	return _IETHDKG.Contract.SetSnapshotsAddress(&_IETHDKG.TransactOpts, snapshots)
}

// SetValidatorPoolAddress is a paid mutator transaction binding the contract method 0xfe0fe422.
//
// Solidity: function setValidatorPoolAddress(address validatorPool) returns()
func (_IETHDKG *IETHDKGTransactor) SetValidatorPoolAddress(opts *bind.TransactOpts, validatorPool common.Address) (*types.Transaction, error) {
	return _IETHDKG.contract.Transact(opts, "setValidatorPoolAddress", validatorPool)
}

// SetValidatorPoolAddress is a paid mutator transaction binding the contract method 0xfe0fe422.
//
// Solidity: function setValidatorPoolAddress(address validatorPool) returns()
func (_IETHDKG *IETHDKGSession) SetValidatorPoolAddress(validatorPool common.Address) (*types.Transaction, error) {
	return _IETHDKG.Contract.SetValidatorPoolAddress(&_IETHDKG.TransactOpts, validatorPool)
}

// SetValidatorPoolAddress is a paid mutator transaction binding the contract method 0xfe0fe422.
//
// Solidity: function setValidatorPoolAddress(address validatorPool) returns()
func (_IETHDKG *IETHDKGTransactorSession) SetValidatorPoolAddress(validatorPool common.Address) (*types.Transaction, error) {
	return _IETHDKG.Contract.SetValidatorPoolAddress(&_IETHDKG.TransactOpts, validatorPool)
}

// SubmitGPKJ is a paid mutator transaction binding the contract method 0x101f49c1.
//
// Solidity: function submitGPKJ(uint256[4] gpkj) returns()
func (_IETHDKG *IETHDKGTransactor) SubmitGPKJ(opts *bind.TransactOpts, gpkj [4]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.contract.Transact(opts, "submitGPKJ", gpkj)
}

// SubmitGPKJ is a paid mutator transaction binding the contract method 0x101f49c1.
//
// Solidity: function submitGPKJ(uint256[4] gpkj) returns()
func (_IETHDKG *IETHDKGSession) SubmitGPKJ(gpkj [4]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.Contract.SubmitGPKJ(&_IETHDKG.TransactOpts, gpkj)
}

// SubmitGPKJ is a paid mutator transaction binding the contract method 0x101f49c1.
//
// Solidity: function submitGPKJ(uint256[4] gpkj) returns()
func (_IETHDKG *IETHDKGTransactorSession) SubmitGPKJ(gpkj [4]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.Contract.SubmitGPKJ(&_IETHDKG.TransactOpts, gpkj)
}

// SubmitKeyShare is a paid mutator transaction binding the contract method 0x62a6523e.
//
// Solidity: function submitKeyShare(uint256[2] keyShareG1, uint256[2] keyShareG1CorrectnessProof, uint256[4] keyShareG2) returns()
func (_IETHDKG *IETHDKGTransactor) SubmitKeyShare(opts *bind.TransactOpts, keyShareG1 [2]*big.Int, keyShareG1CorrectnessProof [2]*big.Int, keyShareG2 [4]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.contract.Transact(opts, "submitKeyShare", keyShareG1, keyShareG1CorrectnessProof, keyShareG2)
}

// SubmitKeyShare is a paid mutator transaction binding the contract method 0x62a6523e.
//
// Solidity: function submitKeyShare(uint256[2] keyShareG1, uint256[2] keyShareG1CorrectnessProof, uint256[4] keyShareG2) returns()
func (_IETHDKG *IETHDKGSession) SubmitKeyShare(keyShareG1 [2]*big.Int, keyShareG1CorrectnessProof [2]*big.Int, keyShareG2 [4]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.Contract.SubmitKeyShare(&_IETHDKG.TransactOpts, keyShareG1, keyShareG1CorrectnessProof, keyShareG2)
}

// SubmitKeyShare is a paid mutator transaction binding the contract method 0x62a6523e.
//
// Solidity: function submitKeyShare(uint256[2] keyShareG1, uint256[2] keyShareG1CorrectnessProof, uint256[4] keyShareG2) returns()
func (_IETHDKG *IETHDKGTransactorSession) SubmitKeyShare(keyShareG1 [2]*big.Int, keyShareG1CorrectnessProof [2]*big.Int, keyShareG2 [4]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.Contract.SubmitKeyShare(&_IETHDKG.TransactOpts, keyShareG1, keyShareG1CorrectnessProof, keyShareG2)
}

// SubmitMasterPublicKey is a paid mutator transaction binding the contract method 0xe8323224.
//
// Solidity: function submitMasterPublicKey(uint256[4] masterPublicKey_) returns()
func (_IETHDKG *IETHDKGTransactor) SubmitMasterPublicKey(opts *bind.TransactOpts, masterPublicKey_ [4]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.contract.Transact(opts, "submitMasterPublicKey", masterPublicKey_)
}

// SubmitMasterPublicKey is a paid mutator transaction binding the contract method 0xe8323224.
//
// Solidity: function submitMasterPublicKey(uint256[4] masterPublicKey_) returns()
func (_IETHDKG *IETHDKGSession) SubmitMasterPublicKey(masterPublicKey_ [4]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.Contract.SubmitMasterPublicKey(&_IETHDKG.TransactOpts, masterPublicKey_)
}

// SubmitMasterPublicKey is a paid mutator transaction binding the contract method 0xe8323224.
//
// Solidity: function submitMasterPublicKey(uint256[4] masterPublicKey_) returns()
func (_IETHDKG *IETHDKGTransactorSession) SubmitMasterPublicKey(masterPublicKey_ [4]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.Contract.SubmitMasterPublicKey(&_IETHDKG.TransactOpts, masterPublicKey_)
}

// IETHDKGEventsMetaData contains all meta data concerning the IETHDKGEvents contract.
var IETHDKGEventsMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"publicKey\",\"type\":\"uint256[2]\"}],\"name\":\"AddressRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"GPKJSubmissionComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"KeyShareSubmissionComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"keyShareG1\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"keyShareG1CorrectnessProof\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[4]\",\"name\":\"keyShareG2\",\"type\":\"uint256[4]\"}],\"name\":\"KeyShareSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[4]\",\"name\":\"mpk\",\"type\":\"uint256[4]\"}],\"name\":\"MPKSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"RegistrationComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numberValidators\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"phaseLength\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"confirmationLength\",\"type\":\"uint256\"}],\"name\":\"RegistrationOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"ShareDistributionComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"encryptedShares\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[2][]\",\"name\":\"commitments\",\"type\":\"uint256[2][]\"}],\"name\":\"SharesDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share3\",\"type\":\"uint256\"}],\"name\":\"ValidatorMemberAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validatorCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethHeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"madHeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey3\",\"type\":\"uint256\"}],\"name\":\"ValidatorSetCompleted\",\"type\":\"event\"}]",
}

// IETHDKGEventsABI is the input ABI used to generate the binding from.
// Deprecated: Use IETHDKGEventsMetaData.ABI instead.
var IETHDKGEventsABI = IETHDKGEventsMetaData.ABI

// IETHDKGEvents is an auto generated Go binding around an Ethereum contract.
type IETHDKGEvents struct {
	IETHDKGEventsCaller     // Read-only binding to the contract
	IETHDKGEventsTransactor // Write-only binding to the contract
	IETHDKGEventsFilterer   // Log filterer for contract events
}

// IETHDKGEventsCaller is an auto generated read-only Go binding around an Ethereum contract.
type IETHDKGEventsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IETHDKGEventsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IETHDKGEventsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IETHDKGEventsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IETHDKGEventsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IETHDKGEventsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IETHDKGEventsSession struct {
	Contract     *IETHDKGEvents    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IETHDKGEventsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IETHDKGEventsCallerSession struct {
	Contract *IETHDKGEventsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// IETHDKGEventsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IETHDKGEventsTransactorSession struct {
	Contract     *IETHDKGEventsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// IETHDKGEventsRaw is an auto generated low-level Go binding around an Ethereum contract.
type IETHDKGEventsRaw struct {
	Contract *IETHDKGEvents // Generic contract binding to access the raw methods on
}

// IETHDKGEventsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IETHDKGEventsCallerRaw struct {
	Contract *IETHDKGEventsCaller // Generic read-only contract binding to access the raw methods on
}

// IETHDKGEventsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IETHDKGEventsTransactorRaw struct {
	Contract *IETHDKGEventsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIETHDKGEvents creates a new instance of IETHDKGEvents, bound to a specific deployed contract.
func NewIETHDKGEvents(address common.Address, backend bind.ContractBackend) (*IETHDKGEvents, error) {
	contract, err := bindIETHDKGEvents(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IETHDKGEvents{IETHDKGEventsCaller: IETHDKGEventsCaller{contract: contract}, IETHDKGEventsTransactor: IETHDKGEventsTransactor{contract: contract}, IETHDKGEventsFilterer: IETHDKGEventsFilterer{contract: contract}}, nil
}

// NewIETHDKGEventsCaller creates a new read-only instance of IETHDKGEvents, bound to a specific deployed contract.
func NewIETHDKGEventsCaller(address common.Address, caller bind.ContractCaller) (*IETHDKGEventsCaller, error) {
	contract, err := bindIETHDKGEvents(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IETHDKGEventsCaller{contract: contract}, nil
}

// NewIETHDKGEventsTransactor creates a new write-only instance of IETHDKGEvents, bound to a specific deployed contract.
func NewIETHDKGEventsTransactor(address common.Address, transactor bind.ContractTransactor) (*IETHDKGEventsTransactor, error) {
	contract, err := bindIETHDKGEvents(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IETHDKGEventsTransactor{contract: contract}, nil
}

// NewIETHDKGEventsFilterer creates a new log filterer instance of IETHDKGEvents, bound to a specific deployed contract.
func NewIETHDKGEventsFilterer(address common.Address, filterer bind.ContractFilterer) (*IETHDKGEventsFilterer, error) {
	contract, err := bindIETHDKGEvents(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IETHDKGEventsFilterer{contract: contract}, nil
}

// bindIETHDKGEvents binds a generic wrapper to an already deployed contract.
func bindIETHDKGEvents(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IETHDKGEventsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IETHDKGEvents *IETHDKGEventsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IETHDKGEvents.Contract.IETHDKGEventsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IETHDKGEvents *IETHDKGEventsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IETHDKGEvents.Contract.IETHDKGEventsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IETHDKGEvents *IETHDKGEventsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IETHDKGEvents.Contract.IETHDKGEventsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IETHDKGEvents *IETHDKGEventsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IETHDKGEvents.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IETHDKGEvents *IETHDKGEventsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IETHDKGEvents.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IETHDKGEvents *IETHDKGEventsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IETHDKGEvents.Contract.contract.Transact(opts, method, params...)
}

// IETHDKGEventsAddressRegisteredIterator is returned from FilterAddressRegistered and is used to iterate over the raw logs and unpacked data for AddressRegistered events raised by the IETHDKGEvents contract.
type IETHDKGEventsAddressRegisteredIterator struct {
	Event *IETHDKGEventsAddressRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IETHDKGEventsAddressRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IETHDKGEventsAddressRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IETHDKGEventsAddressRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IETHDKGEventsAddressRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IETHDKGEventsAddressRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IETHDKGEventsAddressRegistered represents a AddressRegistered event raised by the IETHDKGEvents contract.
type IETHDKGEventsAddressRegistered struct {
	Account   common.Address
	Index     *big.Int
	Nonce     *big.Int
	PublicKey [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAddressRegistered is a free log retrieval operation binding the contract event 0x7f1304057ec61140fbf2f5f236790f34fcafe123d3eb0d298d92317c97da500d.
//
// Solidity: event AddressRegistered(address account, uint256 index, uint256 nonce, uint256[2] publicKey)
func (_IETHDKGEvents *IETHDKGEventsFilterer) FilterAddressRegistered(opts *bind.FilterOpts) (*IETHDKGEventsAddressRegisteredIterator, error) {

	logs, sub, err := _IETHDKGEvents.contract.FilterLogs(opts, "AddressRegistered")
	if err != nil {
		return nil, err
	}
	return &IETHDKGEventsAddressRegisteredIterator{contract: _IETHDKGEvents.contract, event: "AddressRegistered", logs: logs, sub: sub}, nil
}

// WatchAddressRegistered is a free log subscription operation binding the contract event 0x7f1304057ec61140fbf2f5f236790f34fcafe123d3eb0d298d92317c97da500d.
//
// Solidity: event AddressRegistered(address account, uint256 index, uint256 nonce, uint256[2] publicKey)
func (_IETHDKGEvents *IETHDKGEventsFilterer) WatchAddressRegistered(opts *bind.WatchOpts, sink chan<- *IETHDKGEventsAddressRegistered) (event.Subscription, error) {

	logs, sub, err := _IETHDKGEvents.contract.WatchLogs(opts, "AddressRegistered")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IETHDKGEventsAddressRegistered)
				if err := _IETHDKGEvents.contract.UnpackLog(event, "AddressRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddressRegistered is a log parse operation binding the contract event 0x7f1304057ec61140fbf2f5f236790f34fcafe123d3eb0d298d92317c97da500d.
//
// Solidity: event AddressRegistered(address account, uint256 index, uint256 nonce, uint256[2] publicKey)
func (_IETHDKGEvents *IETHDKGEventsFilterer) ParseAddressRegistered(log types.Log) (*IETHDKGEventsAddressRegistered, error) {
	event := new(IETHDKGEventsAddressRegistered)
	if err := _IETHDKGEvents.contract.UnpackLog(event, "AddressRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IETHDKGEventsGPKJSubmissionCompleteIterator is returned from FilterGPKJSubmissionComplete and is used to iterate over the raw logs and unpacked data for GPKJSubmissionComplete events raised by the IETHDKGEvents contract.
type IETHDKGEventsGPKJSubmissionCompleteIterator struct {
	Event *IETHDKGEventsGPKJSubmissionComplete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IETHDKGEventsGPKJSubmissionCompleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IETHDKGEventsGPKJSubmissionComplete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IETHDKGEventsGPKJSubmissionComplete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IETHDKGEventsGPKJSubmissionCompleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IETHDKGEventsGPKJSubmissionCompleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IETHDKGEventsGPKJSubmissionComplete represents a GPKJSubmissionComplete event raised by the IETHDKGEvents contract.
type IETHDKGEventsGPKJSubmissionComplete struct {
	BlockNumber *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterGPKJSubmissionComplete is a free log retrieval operation binding the contract event 0x87bfe600b78cad9f7cf68c99eb582c1748f636b3269842b37d5873b0e069f628.
//
// Solidity: event GPKJSubmissionComplete(uint256 blockNumber)
func (_IETHDKGEvents *IETHDKGEventsFilterer) FilterGPKJSubmissionComplete(opts *bind.FilterOpts) (*IETHDKGEventsGPKJSubmissionCompleteIterator, error) {

	logs, sub, err := _IETHDKGEvents.contract.FilterLogs(opts, "GPKJSubmissionComplete")
	if err != nil {
		return nil, err
	}
	return &IETHDKGEventsGPKJSubmissionCompleteIterator{contract: _IETHDKGEvents.contract, event: "GPKJSubmissionComplete", logs: logs, sub: sub}, nil
}

// WatchGPKJSubmissionComplete is a free log subscription operation binding the contract event 0x87bfe600b78cad9f7cf68c99eb582c1748f636b3269842b37d5873b0e069f628.
//
// Solidity: event GPKJSubmissionComplete(uint256 blockNumber)
func (_IETHDKGEvents *IETHDKGEventsFilterer) WatchGPKJSubmissionComplete(opts *bind.WatchOpts, sink chan<- *IETHDKGEventsGPKJSubmissionComplete) (event.Subscription, error) {

	logs, sub, err := _IETHDKGEvents.contract.WatchLogs(opts, "GPKJSubmissionComplete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IETHDKGEventsGPKJSubmissionComplete)
				if err := _IETHDKGEvents.contract.UnpackLog(event, "GPKJSubmissionComplete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseGPKJSubmissionComplete is a log parse operation binding the contract event 0x87bfe600b78cad9f7cf68c99eb582c1748f636b3269842b37d5873b0e069f628.
//
// Solidity: event GPKJSubmissionComplete(uint256 blockNumber)
func (_IETHDKGEvents *IETHDKGEventsFilterer) ParseGPKJSubmissionComplete(log types.Log) (*IETHDKGEventsGPKJSubmissionComplete, error) {
	event := new(IETHDKGEventsGPKJSubmissionComplete)
	if err := _IETHDKGEvents.contract.UnpackLog(event, "GPKJSubmissionComplete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IETHDKGEventsKeyShareSubmissionCompleteIterator is returned from FilterKeyShareSubmissionComplete and is used to iterate over the raw logs and unpacked data for KeyShareSubmissionComplete events raised by the IETHDKGEvents contract.
type IETHDKGEventsKeyShareSubmissionCompleteIterator struct {
	Event *IETHDKGEventsKeyShareSubmissionComplete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IETHDKGEventsKeyShareSubmissionCompleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IETHDKGEventsKeyShareSubmissionComplete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IETHDKGEventsKeyShareSubmissionComplete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IETHDKGEventsKeyShareSubmissionCompleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IETHDKGEventsKeyShareSubmissionCompleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IETHDKGEventsKeyShareSubmissionComplete represents a KeyShareSubmissionComplete event raised by the IETHDKGEvents contract.
type IETHDKGEventsKeyShareSubmissionComplete struct {
	BlockNumber *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterKeyShareSubmissionComplete is a free log retrieval operation binding the contract event 0x522cec98f6caa194456c44afa9e8cef9ac63eecb0be60e20d180ce19cfb0ef59.
//
// Solidity: event KeyShareSubmissionComplete(uint256 blockNumber)
func (_IETHDKGEvents *IETHDKGEventsFilterer) FilterKeyShareSubmissionComplete(opts *bind.FilterOpts) (*IETHDKGEventsKeyShareSubmissionCompleteIterator, error) {

	logs, sub, err := _IETHDKGEvents.contract.FilterLogs(opts, "KeyShareSubmissionComplete")
	if err != nil {
		return nil, err
	}
	return &IETHDKGEventsKeyShareSubmissionCompleteIterator{contract: _IETHDKGEvents.contract, event: "KeyShareSubmissionComplete", logs: logs, sub: sub}, nil
}

// WatchKeyShareSubmissionComplete is a free log subscription operation binding the contract event 0x522cec98f6caa194456c44afa9e8cef9ac63eecb0be60e20d180ce19cfb0ef59.
//
// Solidity: event KeyShareSubmissionComplete(uint256 blockNumber)
func (_IETHDKGEvents *IETHDKGEventsFilterer) WatchKeyShareSubmissionComplete(opts *bind.WatchOpts, sink chan<- *IETHDKGEventsKeyShareSubmissionComplete) (event.Subscription, error) {

	logs, sub, err := _IETHDKGEvents.contract.WatchLogs(opts, "KeyShareSubmissionComplete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IETHDKGEventsKeyShareSubmissionComplete)
				if err := _IETHDKGEvents.contract.UnpackLog(event, "KeyShareSubmissionComplete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKeyShareSubmissionComplete is a log parse operation binding the contract event 0x522cec98f6caa194456c44afa9e8cef9ac63eecb0be60e20d180ce19cfb0ef59.
//
// Solidity: event KeyShareSubmissionComplete(uint256 blockNumber)
func (_IETHDKGEvents *IETHDKGEventsFilterer) ParseKeyShareSubmissionComplete(log types.Log) (*IETHDKGEventsKeyShareSubmissionComplete, error) {
	event := new(IETHDKGEventsKeyShareSubmissionComplete)
	if err := _IETHDKGEvents.contract.UnpackLog(event, "KeyShareSubmissionComplete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IETHDKGEventsKeyShareSubmittedIterator is returned from FilterKeyShareSubmitted and is used to iterate over the raw logs and unpacked data for KeyShareSubmitted events raised by the IETHDKGEvents contract.
type IETHDKGEventsKeyShareSubmittedIterator struct {
	Event *IETHDKGEventsKeyShareSubmitted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IETHDKGEventsKeyShareSubmittedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IETHDKGEventsKeyShareSubmitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IETHDKGEventsKeyShareSubmitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IETHDKGEventsKeyShareSubmittedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IETHDKGEventsKeyShareSubmittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IETHDKGEventsKeyShareSubmitted represents a KeyShareSubmitted event raised by the IETHDKGEvents contract.
type IETHDKGEventsKeyShareSubmitted struct {
	Account                    common.Address
	Index                      *big.Int
	Nonce                      *big.Int
	KeyShareG1                 [2]*big.Int
	KeyShareG1CorrectnessProof [2]*big.Int
	KeyShareG2                 [4]*big.Int
	Raw                        types.Log // Blockchain specific contextual infos
}

// FilterKeyShareSubmitted is a free log retrieval operation binding the contract event 0x6162e2d11398e4063e4c8565dafc4fb6755bbead93747ea836a5ef73a594aaf7.
//
// Solidity: event KeyShareSubmitted(address account, uint256 index, uint256 nonce, uint256[2] keyShareG1, uint256[2] keyShareG1CorrectnessProof, uint256[4] keyShareG2)
func (_IETHDKGEvents *IETHDKGEventsFilterer) FilterKeyShareSubmitted(opts *bind.FilterOpts) (*IETHDKGEventsKeyShareSubmittedIterator, error) {

	logs, sub, err := _IETHDKGEvents.contract.FilterLogs(opts, "KeyShareSubmitted")
	if err != nil {
		return nil, err
	}
	return &IETHDKGEventsKeyShareSubmittedIterator{contract: _IETHDKGEvents.contract, event: "KeyShareSubmitted", logs: logs, sub: sub}, nil
}

// WatchKeyShareSubmitted is a free log subscription operation binding the contract event 0x6162e2d11398e4063e4c8565dafc4fb6755bbead93747ea836a5ef73a594aaf7.
//
// Solidity: event KeyShareSubmitted(address account, uint256 index, uint256 nonce, uint256[2] keyShareG1, uint256[2] keyShareG1CorrectnessProof, uint256[4] keyShareG2)
func (_IETHDKGEvents *IETHDKGEventsFilterer) WatchKeyShareSubmitted(opts *bind.WatchOpts, sink chan<- *IETHDKGEventsKeyShareSubmitted) (event.Subscription, error) {

	logs, sub, err := _IETHDKGEvents.contract.WatchLogs(opts, "KeyShareSubmitted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IETHDKGEventsKeyShareSubmitted)
				if err := _IETHDKGEvents.contract.UnpackLog(event, "KeyShareSubmitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKeyShareSubmitted is a log parse operation binding the contract event 0x6162e2d11398e4063e4c8565dafc4fb6755bbead93747ea836a5ef73a594aaf7.
//
// Solidity: event KeyShareSubmitted(address account, uint256 index, uint256 nonce, uint256[2] keyShareG1, uint256[2] keyShareG1CorrectnessProof, uint256[4] keyShareG2)
func (_IETHDKGEvents *IETHDKGEventsFilterer) ParseKeyShareSubmitted(log types.Log) (*IETHDKGEventsKeyShareSubmitted, error) {
	event := new(IETHDKGEventsKeyShareSubmitted)
	if err := _IETHDKGEvents.contract.UnpackLog(event, "KeyShareSubmitted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IETHDKGEventsMPKSetIterator is returned from FilterMPKSet and is used to iterate over the raw logs and unpacked data for MPKSet events raised by the IETHDKGEvents contract.
type IETHDKGEventsMPKSetIterator struct {
	Event *IETHDKGEventsMPKSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IETHDKGEventsMPKSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IETHDKGEventsMPKSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IETHDKGEventsMPKSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IETHDKGEventsMPKSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IETHDKGEventsMPKSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IETHDKGEventsMPKSet represents a MPKSet event raised by the IETHDKGEvents contract.
type IETHDKGEventsMPKSet struct {
	BlockNumber *big.Int
	Nonce       *big.Int
	Mpk         [4]*big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterMPKSet is a free log retrieval operation binding the contract event 0x71b1ebd27be320895a22125d6458e3363aefa6944a312ede4bf275867e6d5a71.
//
// Solidity: event MPKSet(uint256 blockNumber, uint256 nonce, uint256[4] mpk)
func (_IETHDKGEvents *IETHDKGEventsFilterer) FilterMPKSet(opts *bind.FilterOpts) (*IETHDKGEventsMPKSetIterator, error) {

	logs, sub, err := _IETHDKGEvents.contract.FilterLogs(opts, "MPKSet")
	if err != nil {
		return nil, err
	}
	return &IETHDKGEventsMPKSetIterator{contract: _IETHDKGEvents.contract, event: "MPKSet", logs: logs, sub: sub}, nil
}

// WatchMPKSet is a free log subscription operation binding the contract event 0x71b1ebd27be320895a22125d6458e3363aefa6944a312ede4bf275867e6d5a71.
//
// Solidity: event MPKSet(uint256 blockNumber, uint256 nonce, uint256[4] mpk)
func (_IETHDKGEvents *IETHDKGEventsFilterer) WatchMPKSet(opts *bind.WatchOpts, sink chan<- *IETHDKGEventsMPKSet) (event.Subscription, error) {

	logs, sub, err := _IETHDKGEvents.contract.WatchLogs(opts, "MPKSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IETHDKGEventsMPKSet)
				if err := _IETHDKGEvents.contract.UnpackLog(event, "MPKSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMPKSet is a log parse operation binding the contract event 0x71b1ebd27be320895a22125d6458e3363aefa6944a312ede4bf275867e6d5a71.
//
// Solidity: event MPKSet(uint256 blockNumber, uint256 nonce, uint256[4] mpk)
func (_IETHDKGEvents *IETHDKGEventsFilterer) ParseMPKSet(log types.Log) (*IETHDKGEventsMPKSet, error) {
	event := new(IETHDKGEventsMPKSet)
	if err := _IETHDKGEvents.contract.UnpackLog(event, "MPKSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IETHDKGEventsRegistrationCompleteIterator is returned from FilterRegistrationComplete and is used to iterate over the raw logs and unpacked data for RegistrationComplete events raised by the IETHDKGEvents contract.
type IETHDKGEventsRegistrationCompleteIterator struct {
	Event *IETHDKGEventsRegistrationComplete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IETHDKGEventsRegistrationCompleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IETHDKGEventsRegistrationComplete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IETHDKGEventsRegistrationComplete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IETHDKGEventsRegistrationCompleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IETHDKGEventsRegistrationCompleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IETHDKGEventsRegistrationComplete represents a RegistrationComplete event raised by the IETHDKGEvents contract.
type IETHDKGEventsRegistrationComplete struct {
	BlockNumber *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRegistrationComplete is a free log retrieval operation binding the contract event 0x833013b96b786b4eca83baac286920e5e53956c21ff3894f1d9f02e97d6ed764.
//
// Solidity: event RegistrationComplete(uint256 blockNumber)
func (_IETHDKGEvents *IETHDKGEventsFilterer) FilterRegistrationComplete(opts *bind.FilterOpts) (*IETHDKGEventsRegistrationCompleteIterator, error) {

	logs, sub, err := _IETHDKGEvents.contract.FilterLogs(opts, "RegistrationComplete")
	if err != nil {
		return nil, err
	}
	return &IETHDKGEventsRegistrationCompleteIterator{contract: _IETHDKGEvents.contract, event: "RegistrationComplete", logs: logs, sub: sub}, nil
}

// WatchRegistrationComplete is a free log subscription operation binding the contract event 0x833013b96b786b4eca83baac286920e5e53956c21ff3894f1d9f02e97d6ed764.
//
// Solidity: event RegistrationComplete(uint256 blockNumber)
func (_IETHDKGEvents *IETHDKGEventsFilterer) WatchRegistrationComplete(opts *bind.WatchOpts, sink chan<- *IETHDKGEventsRegistrationComplete) (event.Subscription, error) {

	logs, sub, err := _IETHDKGEvents.contract.WatchLogs(opts, "RegistrationComplete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IETHDKGEventsRegistrationComplete)
				if err := _IETHDKGEvents.contract.UnpackLog(event, "RegistrationComplete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegistrationComplete is a log parse operation binding the contract event 0x833013b96b786b4eca83baac286920e5e53956c21ff3894f1d9f02e97d6ed764.
//
// Solidity: event RegistrationComplete(uint256 blockNumber)
func (_IETHDKGEvents *IETHDKGEventsFilterer) ParseRegistrationComplete(log types.Log) (*IETHDKGEventsRegistrationComplete, error) {
	event := new(IETHDKGEventsRegistrationComplete)
	if err := _IETHDKGEvents.contract.UnpackLog(event, "RegistrationComplete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IETHDKGEventsRegistrationOpenedIterator is returned from FilterRegistrationOpened and is used to iterate over the raw logs and unpacked data for RegistrationOpened events raised by the IETHDKGEvents contract.
type IETHDKGEventsRegistrationOpenedIterator struct {
	Event *IETHDKGEventsRegistrationOpened // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IETHDKGEventsRegistrationOpenedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IETHDKGEventsRegistrationOpened)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IETHDKGEventsRegistrationOpened)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IETHDKGEventsRegistrationOpenedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IETHDKGEventsRegistrationOpenedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IETHDKGEventsRegistrationOpened represents a RegistrationOpened event raised by the IETHDKGEvents contract.
type IETHDKGEventsRegistrationOpened struct {
	StartBlock         *big.Int
	NumberValidators   *big.Int
	Nonce              *big.Int
	PhaseLength        *big.Int
	ConfirmationLength *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterRegistrationOpened is a free log retrieval operation binding the contract event 0xbda431b9b63510f1398bf33d700e013315bcba905507078a1780f13ea5b354b9.
//
// Solidity: event RegistrationOpened(uint256 startBlock, uint256 numberValidators, uint256 nonce, uint256 phaseLength, uint256 confirmationLength)
func (_IETHDKGEvents *IETHDKGEventsFilterer) FilterRegistrationOpened(opts *bind.FilterOpts) (*IETHDKGEventsRegistrationOpenedIterator, error) {

	logs, sub, err := _IETHDKGEvents.contract.FilterLogs(opts, "RegistrationOpened")
	if err != nil {
		return nil, err
	}
	return &IETHDKGEventsRegistrationOpenedIterator{contract: _IETHDKGEvents.contract, event: "RegistrationOpened", logs: logs, sub: sub}, nil
}

// WatchRegistrationOpened is a free log subscription operation binding the contract event 0xbda431b9b63510f1398bf33d700e013315bcba905507078a1780f13ea5b354b9.
//
// Solidity: event RegistrationOpened(uint256 startBlock, uint256 numberValidators, uint256 nonce, uint256 phaseLength, uint256 confirmationLength)
func (_IETHDKGEvents *IETHDKGEventsFilterer) WatchRegistrationOpened(opts *bind.WatchOpts, sink chan<- *IETHDKGEventsRegistrationOpened) (event.Subscription, error) {

	logs, sub, err := _IETHDKGEvents.contract.WatchLogs(opts, "RegistrationOpened")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IETHDKGEventsRegistrationOpened)
				if err := _IETHDKGEvents.contract.UnpackLog(event, "RegistrationOpened", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegistrationOpened is a log parse operation binding the contract event 0xbda431b9b63510f1398bf33d700e013315bcba905507078a1780f13ea5b354b9.
//
// Solidity: event RegistrationOpened(uint256 startBlock, uint256 numberValidators, uint256 nonce, uint256 phaseLength, uint256 confirmationLength)
func (_IETHDKGEvents *IETHDKGEventsFilterer) ParseRegistrationOpened(log types.Log) (*IETHDKGEventsRegistrationOpened, error) {
	event := new(IETHDKGEventsRegistrationOpened)
	if err := _IETHDKGEvents.contract.UnpackLog(event, "RegistrationOpened", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IETHDKGEventsShareDistributionCompleteIterator is returned from FilterShareDistributionComplete and is used to iterate over the raw logs and unpacked data for ShareDistributionComplete events raised by the IETHDKGEvents contract.
type IETHDKGEventsShareDistributionCompleteIterator struct {
	Event *IETHDKGEventsShareDistributionComplete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IETHDKGEventsShareDistributionCompleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IETHDKGEventsShareDistributionComplete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IETHDKGEventsShareDistributionComplete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IETHDKGEventsShareDistributionCompleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IETHDKGEventsShareDistributionCompleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IETHDKGEventsShareDistributionComplete represents a ShareDistributionComplete event raised by the IETHDKGEvents contract.
type IETHDKGEventsShareDistributionComplete struct {
	BlockNumber *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterShareDistributionComplete is a free log retrieval operation binding the contract event 0xbfe94ffef5ddde4d25ac7b652f3f67686ea63f9badbfe1f25451e26fc262d11c.
//
// Solidity: event ShareDistributionComplete(uint256 blockNumber)
func (_IETHDKGEvents *IETHDKGEventsFilterer) FilterShareDistributionComplete(opts *bind.FilterOpts) (*IETHDKGEventsShareDistributionCompleteIterator, error) {

	logs, sub, err := _IETHDKGEvents.contract.FilterLogs(opts, "ShareDistributionComplete")
	if err != nil {
		return nil, err
	}
	return &IETHDKGEventsShareDistributionCompleteIterator{contract: _IETHDKGEvents.contract, event: "ShareDistributionComplete", logs: logs, sub: sub}, nil
}

// WatchShareDistributionComplete is a free log subscription operation binding the contract event 0xbfe94ffef5ddde4d25ac7b652f3f67686ea63f9badbfe1f25451e26fc262d11c.
//
// Solidity: event ShareDistributionComplete(uint256 blockNumber)
func (_IETHDKGEvents *IETHDKGEventsFilterer) WatchShareDistributionComplete(opts *bind.WatchOpts, sink chan<- *IETHDKGEventsShareDistributionComplete) (event.Subscription, error) {

	logs, sub, err := _IETHDKGEvents.contract.WatchLogs(opts, "ShareDistributionComplete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IETHDKGEventsShareDistributionComplete)
				if err := _IETHDKGEvents.contract.UnpackLog(event, "ShareDistributionComplete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseShareDistributionComplete is a log parse operation binding the contract event 0xbfe94ffef5ddde4d25ac7b652f3f67686ea63f9badbfe1f25451e26fc262d11c.
//
// Solidity: event ShareDistributionComplete(uint256 blockNumber)
func (_IETHDKGEvents *IETHDKGEventsFilterer) ParseShareDistributionComplete(log types.Log) (*IETHDKGEventsShareDistributionComplete, error) {
	event := new(IETHDKGEventsShareDistributionComplete)
	if err := _IETHDKGEvents.contract.UnpackLog(event, "ShareDistributionComplete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IETHDKGEventsSharesDistributedIterator is returned from FilterSharesDistributed and is used to iterate over the raw logs and unpacked data for SharesDistributed events raised by the IETHDKGEvents contract.
type IETHDKGEventsSharesDistributedIterator struct {
	Event *IETHDKGEventsSharesDistributed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IETHDKGEventsSharesDistributedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IETHDKGEventsSharesDistributed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IETHDKGEventsSharesDistributed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IETHDKGEventsSharesDistributedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IETHDKGEventsSharesDistributedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IETHDKGEventsSharesDistributed represents a SharesDistributed event raised by the IETHDKGEvents contract.
type IETHDKGEventsSharesDistributed struct {
	Account         common.Address
	Index           *big.Int
	Nonce           *big.Int
	EncryptedShares []*big.Int
	Commitments     [][2]*big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterSharesDistributed is a free log retrieval operation binding the contract event 0xf0c8b0ef2867c2b4639b404a0296b6bbf0bf97e20856af42144a5a6035c0d0d2.
//
// Solidity: event SharesDistributed(address account, uint256 index, uint256 nonce, uint256[] encryptedShares, uint256[2][] commitments)
func (_IETHDKGEvents *IETHDKGEventsFilterer) FilterSharesDistributed(opts *bind.FilterOpts) (*IETHDKGEventsSharesDistributedIterator, error) {

	logs, sub, err := _IETHDKGEvents.contract.FilterLogs(opts, "SharesDistributed")
	if err != nil {
		return nil, err
	}
	return &IETHDKGEventsSharesDistributedIterator{contract: _IETHDKGEvents.contract, event: "SharesDistributed", logs: logs, sub: sub}, nil
}

// WatchSharesDistributed is a free log subscription operation binding the contract event 0xf0c8b0ef2867c2b4639b404a0296b6bbf0bf97e20856af42144a5a6035c0d0d2.
//
// Solidity: event SharesDistributed(address account, uint256 index, uint256 nonce, uint256[] encryptedShares, uint256[2][] commitments)
func (_IETHDKGEvents *IETHDKGEventsFilterer) WatchSharesDistributed(opts *bind.WatchOpts, sink chan<- *IETHDKGEventsSharesDistributed) (event.Subscription, error) {

	logs, sub, err := _IETHDKGEvents.contract.WatchLogs(opts, "SharesDistributed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IETHDKGEventsSharesDistributed)
				if err := _IETHDKGEvents.contract.UnpackLog(event, "SharesDistributed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSharesDistributed is a log parse operation binding the contract event 0xf0c8b0ef2867c2b4639b404a0296b6bbf0bf97e20856af42144a5a6035c0d0d2.
//
// Solidity: event SharesDistributed(address account, uint256 index, uint256 nonce, uint256[] encryptedShares, uint256[2][] commitments)
func (_IETHDKGEvents *IETHDKGEventsFilterer) ParseSharesDistributed(log types.Log) (*IETHDKGEventsSharesDistributed, error) {
	event := new(IETHDKGEventsSharesDistributed)
	if err := _IETHDKGEvents.contract.UnpackLog(event, "SharesDistributed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IETHDKGEventsValidatorMemberAddedIterator is returned from FilterValidatorMemberAdded and is used to iterate over the raw logs and unpacked data for ValidatorMemberAdded events raised by the IETHDKGEvents contract.
type IETHDKGEventsValidatorMemberAddedIterator struct {
	Event *IETHDKGEventsValidatorMemberAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IETHDKGEventsValidatorMemberAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IETHDKGEventsValidatorMemberAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IETHDKGEventsValidatorMemberAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IETHDKGEventsValidatorMemberAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IETHDKGEventsValidatorMemberAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IETHDKGEventsValidatorMemberAdded represents a ValidatorMemberAdded event raised by the IETHDKGEvents contract.
type IETHDKGEventsValidatorMemberAdded struct {
	Account common.Address
	Index   *big.Int
	Nonce   *big.Int
	Epoch   *big.Int
	Share0  *big.Int
	Share1  *big.Int
	Share2  *big.Int
	Share3  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterValidatorMemberAdded is a free log retrieval operation binding the contract event 0x09b90b08bbc3dbe22e9d2a0bc9c2c7614c7511cd0ad72177727a1e762115bf06.
//
// Solidity: event ValidatorMemberAdded(address account, uint256 index, uint256 nonce, uint256 epoch, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_IETHDKGEvents *IETHDKGEventsFilterer) FilterValidatorMemberAdded(opts *bind.FilterOpts) (*IETHDKGEventsValidatorMemberAddedIterator, error) {

	logs, sub, err := _IETHDKGEvents.contract.FilterLogs(opts, "ValidatorMemberAdded")
	if err != nil {
		return nil, err
	}
	return &IETHDKGEventsValidatorMemberAddedIterator{contract: _IETHDKGEvents.contract, event: "ValidatorMemberAdded", logs: logs, sub: sub}, nil
}

// WatchValidatorMemberAdded is a free log subscription operation binding the contract event 0x09b90b08bbc3dbe22e9d2a0bc9c2c7614c7511cd0ad72177727a1e762115bf06.
//
// Solidity: event ValidatorMemberAdded(address account, uint256 index, uint256 nonce, uint256 epoch, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_IETHDKGEvents *IETHDKGEventsFilterer) WatchValidatorMemberAdded(opts *bind.WatchOpts, sink chan<- *IETHDKGEventsValidatorMemberAdded) (event.Subscription, error) {

	logs, sub, err := _IETHDKGEvents.contract.WatchLogs(opts, "ValidatorMemberAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IETHDKGEventsValidatorMemberAdded)
				if err := _IETHDKGEvents.contract.UnpackLog(event, "ValidatorMemberAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorMemberAdded is a log parse operation binding the contract event 0x09b90b08bbc3dbe22e9d2a0bc9c2c7614c7511cd0ad72177727a1e762115bf06.
//
// Solidity: event ValidatorMemberAdded(address account, uint256 index, uint256 nonce, uint256 epoch, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_IETHDKGEvents *IETHDKGEventsFilterer) ParseValidatorMemberAdded(log types.Log) (*IETHDKGEventsValidatorMemberAdded, error) {
	event := new(IETHDKGEventsValidatorMemberAdded)
	if err := _IETHDKGEvents.contract.UnpackLog(event, "ValidatorMemberAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IETHDKGEventsValidatorSetCompletedIterator is returned from FilterValidatorSetCompleted and is used to iterate over the raw logs and unpacked data for ValidatorSetCompleted events raised by the IETHDKGEvents contract.
type IETHDKGEventsValidatorSetCompletedIterator struct {
	Event *IETHDKGEventsValidatorSetCompleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IETHDKGEventsValidatorSetCompletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IETHDKGEventsValidatorSetCompleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IETHDKGEventsValidatorSetCompleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IETHDKGEventsValidatorSetCompletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IETHDKGEventsValidatorSetCompletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IETHDKGEventsValidatorSetCompleted represents a ValidatorSetCompleted event raised by the IETHDKGEvents contract.
type IETHDKGEventsValidatorSetCompleted struct {
	ValidatorCount *big.Int
	Nonce          *big.Int
	Epoch          *big.Int
	EthHeight      *big.Int
	MadHeight      *big.Int
	GroupKey0      *big.Int
	GroupKey1      *big.Int
	GroupKey2      *big.Int
	GroupKey3      *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterValidatorSetCompleted is a free log retrieval operation binding the contract event 0xd7237b781669fa700ecf77be6cd8fa0f4b98b1a24ac584a9b6b44c509216718a.
//
// Solidity: event ValidatorSetCompleted(uint256 validatorCount, uint256 nonce, uint256 epoch, uint256 ethHeight, uint256 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_IETHDKGEvents *IETHDKGEventsFilterer) FilterValidatorSetCompleted(opts *bind.FilterOpts) (*IETHDKGEventsValidatorSetCompletedIterator, error) {

	logs, sub, err := _IETHDKGEvents.contract.FilterLogs(opts, "ValidatorSetCompleted")
	if err != nil {
		return nil, err
	}
	return &IETHDKGEventsValidatorSetCompletedIterator{contract: _IETHDKGEvents.contract, event: "ValidatorSetCompleted", logs: logs, sub: sub}, nil
}

// WatchValidatorSetCompleted is a free log subscription operation binding the contract event 0xd7237b781669fa700ecf77be6cd8fa0f4b98b1a24ac584a9b6b44c509216718a.
//
// Solidity: event ValidatorSetCompleted(uint256 validatorCount, uint256 nonce, uint256 epoch, uint256 ethHeight, uint256 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_IETHDKGEvents *IETHDKGEventsFilterer) WatchValidatorSetCompleted(opts *bind.WatchOpts, sink chan<- *IETHDKGEventsValidatorSetCompleted) (event.Subscription, error) {

	logs, sub, err := _IETHDKGEvents.contract.WatchLogs(opts, "ValidatorSetCompleted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IETHDKGEventsValidatorSetCompleted)
				if err := _IETHDKGEvents.contract.UnpackLog(event, "ValidatorSetCompleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorSetCompleted is a log parse operation binding the contract event 0xd7237b781669fa700ecf77be6cd8fa0f4b98b1a24ac584a9b6b44c509216718a.
//
// Solidity: event ValidatorSetCompleted(uint256 validatorCount, uint256 nonce, uint256 epoch, uint256 ethHeight, uint256 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_IETHDKGEvents *IETHDKGEventsFilterer) ParseValidatorSetCompleted(log types.Log) (*IETHDKGEventsValidatorSetCompleted, error) {
	event := new(IETHDKGEventsValidatorSetCompleted)
	if err := _IETHDKGEvents.contract.UnpackLog(event, "ValidatorSetCompleted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IMagicEthTransferMetaData contains all meta data concerning the IMagicEthTransfer contract.
var IMagicEthTransferMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"magic_\",\"type\":\"uint8\"}],\"name\":\"depositEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]",
}

// IMagicEthTransferABI is the input ABI used to generate the binding from.
// Deprecated: Use IMagicEthTransferMetaData.ABI instead.
var IMagicEthTransferABI = IMagicEthTransferMetaData.ABI

// IMagicEthTransfer is an auto generated Go binding around an Ethereum contract.
type IMagicEthTransfer struct {
	IMagicEthTransferCaller     // Read-only binding to the contract
	IMagicEthTransferTransactor // Write-only binding to the contract
	IMagicEthTransferFilterer   // Log filterer for contract events
}

// IMagicEthTransferCaller is an auto generated read-only Go binding around an Ethereum contract.
type IMagicEthTransferCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IMagicEthTransferTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IMagicEthTransferTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IMagicEthTransferFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IMagicEthTransferFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IMagicEthTransferSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IMagicEthTransferSession struct {
	Contract     *IMagicEthTransfer // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// IMagicEthTransferCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IMagicEthTransferCallerSession struct {
	Contract *IMagicEthTransferCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// IMagicEthTransferTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IMagicEthTransferTransactorSession struct {
	Contract     *IMagicEthTransferTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// IMagicEthTransferRaw is an auto generated low-level Go binding around an Ethereum contract.
type IMagicEthTransferRaw struct {
	Contract *IMagicEthTransfer // Generic contract binding to access the raw methods on
}

// IMagicEthTransferCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IMagicEthTransferCallerRaw struct {
	Contract *IMagicEthTransferCaller // Generic read-only contract binding to access the raw methods on
}

// IMagicEthTransferTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IMagicEthTransferTransactorRaw struct {
	Contract *IMagicEthTransferTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIMagicEthTransfer creates a new instance of IMagicEthTransfer, bound to a specific deployed contract.
func NewIMagicEthTransfer(address common.Address, backend bind.ContractBackend) (*IMagicEthTransfer, error) {
	contract, err := bindIMagicEthTransfer(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IMagicEthTransfer{IMagicEthTransferCaller: IMagicEthTransferCaller{contract: contract}, IMagicEthTransferTransactor: IMagicEthTransferTransactor{contract: contract}, IMagicEthTransferFilterer: IMagicEthTransferFilterer{contract: contract}}, nil
}

// NewIMagicEthTransferCaller creates a new read-only instance of IMagicEthTransfer, bound to a specific deployed contract.
func NewIMagicEthTransferCaller(address common.Address, caller bind.ContractCaller) (*IMagicEthTransferCaller, error) {
	contract, err := bindIMagicEthTransfer(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IMagicEthTransferCaller{contract: contract}, nil
}

// NewIMagicEthTransferTransactor creates a new write-only instance of IMagicEthTransfer, bound to a specific deployed contract.
func NewIMagicEthTransferTransactor(address common.Address, transactor bind.ContractTransactor) (*IMagicEthTransferTransactor, error) {
	contract, err := bindIMagicEthTransfer(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IMagicEthTransferTransactor{contract: contract}, nil
}

// NewIMagicEthTransferFilterer creates a new log filterer instance of IMagicEthTransfer, bound to a specific deployed contract.
func NewIMagicEthTransferFilterer(address common.Address, filterer bind.ContractFilterer) (*IMagicEthTransferFilterer, error) {
	contract, err := bindIMagicEthTransfer(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IMagicEthTransferFilterer{contract: contract}, nil
}

// bindIMagicEthTransfer binds a generic wrapper to an already deployed contract.
func bindIMagicEthTransfer(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IMagicEthTransferABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IMagicEthTransfer *IMagicEthTransferRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IMagicEthTransfer.Contract.IMagicEthTransferCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IMagicEthTransfer *IMagicEthTransferRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IMagicEthTransfer.Contract.IMagicEthTransferTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IMagicEthTransfer *IMagicEthTransferRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IMagicEthTransfer.Contract.IMagicEthTransferTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IMagicEthTransfer *IMagicEthTransferCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IMagicEthTransfer.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IMagicEthTransfer *IMagicEthTransferTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IMagicEthTransfer.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IMagicEthTransfer *IMagicEthTransferTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IMagicEthTransfer.Contract.contract.Transact(opts, method, params...)
}

// DepositEth is a paid mutator transaction binding the contract method 0x99a89ecc.
//
// Solidity: function depositEth(uint8 magic_) payable returns()
func (_IMagicEthTransfer *IMagicEthTransferTransactor) DepositEth(opts *bind.TransactOpts, magic_ uint8) (*types.Transaction, error) {
	return _IMagicEthTransfer.contract.Transact(opts, "depositEth", magic_)
}

// DepositEth is a paid mutator transaction binding the contract method 0x99a89ecc.
//
// Solidity: function depositEth(uint8 magic_) payable returns()
func (_IMagicEthTransfer *IMagicEthTransferSession) DepositEth(magic_ uint8) (*types.Transaction, error) {
	return _IMagicEthTransfer.Contract.DepositEth(&_IMagicEthTransfer.TransactOpts, magic_)
}

// DepositEth is a paid mutator transaction binding the contract method 0x99a89ecc.
//
// Solidity: function depositEth(uint8 magic_) payable returns()
func (_IMagicEthTransfer *IMagicEthTransferTransactorSession) DepositEth(magic_ uint8) (*types.Transaction, error) {
	return _IMagicEthTransfer.Contract.DepositEth(&_IMagicEthTransfer.TransactOpts, magic_)
}

// INFTStakeMetaData contains all meta data concerning the INFTStake contract.
var INFTStakeMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"accumulatorScaleFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payoutEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payoutMadToken\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"burnTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payoutEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payoutMadToken\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"collectEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"collectEthTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"collectToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"collectTokenTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"magic_\",\"type\":\"uint8\"}],\"name\":\"depositEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"magic_\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"estimateEthCollection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateExcessEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"excess\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateExcessToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"excess\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"estimateTokenCollection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEthAccumulator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accumulator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slush\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"getPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"freeAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawFreeAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accumulatorEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accumulatorToken\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenAccumulator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accumulator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slush\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalReserveEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalReserveMadToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration_\",\"type\":\"uint256\"}],\"name\":\"lockOwnPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration_\",\"type\":\"uint256\"}],\"name\":\"lockPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration_\",\"type\":\"uint256\"}],\"name\":\"lockWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration_\",\"type\":\"uint256\"}],\"name\":\"mintTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"}],\"name\":\"skimExcessEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"excess\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"}],\"name\":\"skimExcessToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"excess\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// INFTStakeABI is the input ABI used to generate the binding from.
// Deprecated: Use INFTStakeMetaData.ABI instead.
var INFTStakeABI = INFTStakeMetaData.ABI

// INFTStake is an auto generated Go binding around an Ethereum contract.
type INFTStake struct {
	INFTStakeCaller     // Read-only binding to the contract
	INFTStakeTransactor // Write-only binding to the contract
	INFTStakeFilterer   // Log filterer for contract events
}

// INFTStakeCaller is an auto generated read-only Go binding around an Ethereum contract.
type INFTStakeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// INFTStakeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type INFTStakeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// INFTStakeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type INFTStakeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// INFTStakeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type INFTStakeSession struct {
	Contract     *INFTStake        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// INFTStakeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type INFTStakeCallerSession struct {
	Contract *INFTStakeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// INFTStakeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type INFTStakeTransactorSession struct {
	Contract     *INFTStakeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// INFTStakeRaw is an auto generated low-level Go binding around an Ethereum contract.
type INFTStakeRaw struct {
	Contract *INFTStake // Generic contract binding to access the raw methods on
}

// INFTStakeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type INFTStakeCallerRaw struct {
	Contract *INFTStakeCaller // Generic read-only contract binding to access the raw methods on
}

// INFTStakeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type INFTStakeTransactorRaw struct {
	Contract *INFTStakeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewINFTStake creates a new instance of INFTStake, bound to a specific deployed contract.
func NewINFTStake(address common.Address, backend bind.ContractBackend) (*INFTStake, error) {
	contract, err := bindINFTStake(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &INFTStake{INFTStakeCaller: INFTStakeCaller{contract: contract}, INFTStakeTransactor: INFTStakeTransactor{contract: contract}, INFTStakeFilterer: INFTStakeFilterer{contract: contract}}, nil
}

// NewINFTStakeCaller creates a new read-only instance of INFTStake, bound to a specific deployed contract.
func NewINFTStakeCaller(address common.Address, caller bind.ContractCaller) (*INFTStakeCaller, error) {
	contract, err := bindINFTStake(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &INFTStakeCaller{contract: contract}, nil
}

// NewINFTStakeTransactor creates a new write-only instance of INFTStake, bound to a specific deployed contract.
func NewINFTStakeTransactor(address common.Address, transactor bind.ContractTransactor) (*INFTStakeTransactor, error) {
	contract, err := bindINFTStake(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &INFTStakeTransactor{contract: contract}, nil
}

// NewINFTStakeFilterer creates a new log filterer instance of INFTStake, bound to a specific deployed contract.
func NewINFTStakeFilterer(address common.Address, filterer bind.ContractFilterer) (*INFTStakeFilterer, error) {
	contract, err := bindINFTStake(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &INFTStakeFilterer{contract: contract}, nil
}

// bindINFTStake binds a generic wrapper to an already deployed contract.
func bindINFTStake(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(INFTStakeABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_INFTStake *INFTStakeRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _INFTStake.Contract.INFTStakeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_INFTStake *INFTStakeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _INFTStake.Contract.INFTStakeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_INFTStake *INFTStakeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _INFTStake.Contract.INFTStakeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_INFTStake *INFTStakeCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _INFTStake.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_INFTStake *INFTStakeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _INFTStake.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_INFTStake *INFTStakeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _INFTStake.Contract.contract.Transact(opts, method, params...)
}

// AccumulatorScaleFactor is a free data retrieval call binding the contract method 0xe7718640.
//
// Solidity: function accumulatorScaleFactor() pure returns(uint256)
func (_INFTStake *INFTStakeCaller) AccumulatorScaleFactor(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _INFTStake.contract.Call(opts, &out, "accumulatorScaleFactor")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AccumulatorScaleFactor is a free data retrieval call binding the contract method 0xe7718640.
//
// Solidity: function accumulatorScaleFactor() pure returns(uint256)
func (_INFTStake *INFTStakeSession) AccumulatorScaleFactor() (*big.Int, error) {
	return _INFTStake.Contract.AccumulatorScaleFactor(&_INFTStake.CallOpts)
}

// AccumulatorScaleFactor is a free data retrieval call binding the contract method 0xe7718640.
//
// Solidity: function accumulatorScaleFactor() pure returns(uint256)
func (_INFTStake *INFTStakeCallerSession) AccumulatorScaleFactor() (*big.Int, error) {
	return _INFTStake.Contract.AccumulatorScaleFactor(&_INFTStake.CallOpts)
}

// EstimateEthCollection is a free data retrieval call binding the contract method 0x20ea0d48.
//
// Solidity: function estimateEthCollection(uint256 tokenID_) view returns(uint256 payout)
func (_INFTStake *INFTStakeCaller) EstimateEthCollection(opts *bind.CallOpts, tokenID_ *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _INFTStake.contract.Call(opts, &out, "estimateEthCollection", tokenID_)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EstimateEthCollection is a free data retrieval call binding the contract method 0x20ea0d48.
//
// Solidity: function estimateEthCollection(uint256 tokenID_) view returns(uint256 payout)
func (_INFTStake *INFTStakeSession) EstimateEthCollection(tokenID_ *big.Int) (*big.Int, error) {
	return _INFTStake.Contract.EstimateEthCollection(&_INFTStake.CallOpts, tokenID_)
}

// EstimateEthCollection is a free data retrieval call binding the contract method 0x20ea0d48.
//
// Solidity: function estimateEthCollection(uint256 tokenID_) view returns(uint256 payout)
func (_INFTStake *INFTStakeCallerSession) EstimateEthCollection(tokenID_ *big.Int) (*big.Int, error) {
	return _INFTStake.Contract.EstimateEthCollection(&_INFTStake.CallOpts, tokenID_)
}

// EstimateExcessEth is a free data retrieval call binding the contract method 0x905953ed.
//
// Solidity: function estimateExcessEth() view returns(uint256 excess)
func (_INFTStake *INFTStakeCaller) EstimateExcessEth(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _INFTStake.contract.Call(opts, &out, "estimateExcessEth")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EstimateExcessEth is a free data retrieval call binding the contract method 0x905953ed.
//
// Solidity: function estimateExcessEth() view returns(uint256 excess)
func (_INFTStake *INFTStakeSession) EstimateExcessEth() (*big.Int, error) {
	return _INFTStake.Contract.EstimateExcessEth(&_INFTStake.CallOpts)
}

// EstimateExcessEth is a free data retrieval call binding the contract method 0x905953ed.
//
// Solidity: function estimateExcessEth() view returns(uint256 excess)
func (_INFTStake *INFTStakeCallerSession) EstimateExcessEth() (*big.Int, error) {
	return _INFTStake.Contract.EstimateExcessEth(&_INFTStake.CallOpts)
}

// EstimateExcessToken is a free data retrieval call binding the contract method 0x3eed3eff.
//
// Solidity: function estimateExcessToken() view returns(uint256 excess)
func (_INFTStake *INFTStakeCaller) EstimateExcessToken(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _INFTStake.contract.Call(opts, &out, "estimateExcessToken")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EstimateExcessToken is a free data retrieval call binding the contract method 0x3eed3eff.
//
// Solidity: function estimateExcessToken() view returns(uint256 excess)
func (_INFTStake *INFTStakeSession) EstimateExcessToken() (*big.Int, error) {
	return _INFTStake.Contract.EstimateExcessToken(&_INFTStake.CallOpts)
}

// EstimateExcessToken is a free data retrieval call binding the contract method 0x3eed3eff.
//
// Solidity: function estimateExcessToken() view returns(uint256 excess)
func (_INFTStake *INFTStakeCallerSession) EstimateExcessToken() (*big.Int, error) {
	return _INFTStake.Contract.EstimateExcessToken(&_INFTStake.CallOpts)
}

// EstimateTokenCollection is a free data retrieval call binding the contract method 0x93c5748d.
//
// Solidity: function estimateTokenCollection(uint256 tokenID_) view returns(uint256 payout)
func (_INFTStake *INFTStakeCaller) EstimateTokenCollection(opts *bind.CallOpts, tokenID_ *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _INFTStake.contract.Call(opts, &out, "estimateTokenCollection", tokenID_)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EstimateTokenCollection is a free data retrieval call binding the contract method 0x93c5748d.
//
// Solidity: function estimateTokenCollection(uint256 tokenID_) view returns(uint256 payout)
func (_INFTStake *INFTStakeSession) EstimateTokenCollection(tokenID_ *big.Int) (*big.Int, error) {
	return _INFTStake.Contract.EstimateTokenCollection(&_INFTStake.CallOpts, tokenID_)
}

// EstimateTokenCollection is a free data retrieval call binding the contract method 0x93c5748d.
//
// Solidity: function estimateTokenCollection(uint256 tokenID_) view returns(uint256 payout)
func (_INFTStake *INFTStakeCallerSession) EstimateTokenCollection(tokenID_ *big.Int) (*big.Int, error) {
	return _INFTStake.Contract.EstimateTokenCollection(&_INFTStake.CallOpts, tokenID_)
}

// GetEthAccumulator is a free data retrieval call binding the contract method 0x548652d2.
//
// Solidity: function getEthAccumulator() view returns(uint256 accumulator, uint256 slush)
func (_INFTStake *INFTStakeCaller) GetEthAccumulator(opts *bind.CallOpts) (struct {
	Accumulator *big.Int
	Slush       *big.Int
}, error) {
	var out []interface{}
	err := _INFTStake.contract.Call(opts, &out, "getEthAccumulator")

	outstruct := new(struct {
		Accumulator *big.Int
		Slush       *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Accumulator = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Slush = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetEthAccumulator is a free data retrieval call binding the contract method 0x548652d2.
//
// Solidity: function getEthAccumulator() view returns(uint256 accumulator, uint256 slush)
func (_INFTStake *INFTStakeSession) GetEthAccumulator() (struct {
	Accumulator *big.Int
	Slush       *big.Int
}, error) {
	return _INFTStake.Contract.GetEthAccumulator(&_INFTStake.CallOpts)
}

// GetEthAccumulator is a free data retrieval call binding the contract method 0x548652d2.
//
// Solidity: function getEthAccumulator() view returns(uint256 accumulator, uint256 slush)
func (_INFTStake *INFTStakeCallerSession) GetEthAccumulator() (struct {
	Accumulator *big.Int
	Slush       *big.Int
}, error) {
	return _INFTStake.Contract.GetEthAccumulator(&_INFTStake.CallOpts)
}

// GetPosition is a free data retrieval call binding the contract method 0xeb02c301.
//
// Solidity: function getPosition(uint256 tokenID_) view returns(uint256 shares, uint256 freeAfter, uint256 withdrawFreeAfter, uint256 accumulatorEth, uint256 accumulatorToken)
func (_INFTStake *INFTStakeCaller) GetPosition(opts *bind.CallOpts, tokenID_ *big.Int) (struct {
	Shares            *big.Int
	FreeAfter         *big.Int
	WithdrawFreeAfter *big.Int
	AccumulatorEth    *big.Int
	AccumulatorToken  *big.Int
}, error) {
	var out []interface{}
	err := _INFTStake.contract.Call(opts, &out, "getPosition", tokenID_)

	outstruct := new(struct {
		Shares            *big.Int
		FreeAfter         *big.Int
		WithdrawFreeAfter *big.Int
		AccumulatorEth    *big.Int
		AccumulatorToken  *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Shares = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.FreeAfter = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.WithdrawFreeAfter = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.AccumulatorEth = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.AccumulatorToken = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetPosition is a free data retrieval call binding the contract method 0xeb02c301.
//
// Solidity: function getPosition(uint256 tokenID_) view returns(uint256 shares, uint256 freeAfter, uint256 withdrawFreeAfter, uint256 accumulatorEth, uint256 accumulatorToken)
func (_INFTStake *INFTStakeSession) GetPosition(tokenID_ *big.Int) (struct {
	Shares            *big.Int
	FreeAfter         *big.Int
	WithdrawFreeAfter *big.Int
	AccumulatorEth    *big.Int
	AccumulatorToken  *big.Int
}, error) {
	return _INFTStake.Contract.GetPosition(&_INFTStake.CallOpts, tokenID_)
}

// GetPosition is a free data retrieval call binding the contract method 0xeb02c301.
//
// Solidity: function getPosition(uint256 tokenID_) view returns(uint256 shares, uint256 freeAfter, uint256 withdrawFreeAfter, uint256 accumulatorEth, uint256 accumulatorToken)
func (_INFTStake *INFTStakeCallerSession) GetPosition(tokenID_ *big.Int) (struct {
	Shares            *big.Int
	FreeAfter         *big.Int
	WithdrawFreeAfter *big.Int
	AccumulatorEth    *big.Int
	AccumulatorToken  *big.Int
}, error) {
	return _INFTStake.Contract.GetPosition(&_INFTStake.CallOpts, tokenID_)
}

// GetTokenAccumulator is a free data retrieval call binding the contract method 0xc47c6e14.
//
// Solidity: function getTokenAccumulator() view returns(uint256 accumulator, uint256 slush)
func (_INFTStake *INFTStakeCaller) GetTokenAccumulator(opts *bind.CallOpts) (struct {
	Accumulator *big.Int
	Slush       *big.Int
}, error) {
	var out []interface{}
	err := _INFTStake.contract.Call(opts, &out, "getTokenAccumulator")

	outstruct := new(struct {
		Accumulator *big.Int
		Slush       *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Accumulator = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Slush = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetTokenAccumulator is a free data retrieval call binding the contract method 0xc47c6e14.
//
// Solidity: function getTokenAccumulator() view returns(uint256 accumulator, uint256 slush)
func (_INFTStake *INFTStakeSession) GetTokenAccumulator() (struct {
	Accumulator *big.Int
	Slush       *big.Int
}, error) {
	return _INFTStake.Contract.GetTokenAccumulator(&_INFTStake.CallOpts)
}

// GetTokenAccumulator is a free data retrieval call binding the contract method 0xc47c6e14.
//
// Solidity: function getTokenAccumulator() view returns(uint256 accumulator, uint256 slush)
func (_INFTStake *INFTStakeCallerSession) GetTokenAccumulator() (struct {
	Accumulator *big.Int
	Slush       *big.Int
}, error) {
	return _INFTStake.Contract.GetTokenAccumulator(&_INFTStake.CallOpts)
}

// GetTotalReserveEth is a free data retrieval call binding the contract method 0x19b8be2f.
//
// Solidity: function getTotalReserveEth() view returns(uint256)
func (_INFTStake *INFTStakeCaller) GetTotalReserveEth(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _INFTStake.contract.Call(opts, &out, "getTotalReserveEth")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalReserveEth is a free data retrieval call binding the contract method 0x19b8be2f.
//
// Solidity: function getTotalReserveEth() view returns(uint256)
func (_INFTStake *INFTStakeSession) GetTotalReserveEth() (*big.Int, error) {
	return _INFTStake.Contract.GetTotalReserveEth(&_INFTStake.CallOpts)
}

// GetTotalReserveEth is a free data retrieval call binding the contract method 0x19b8be2f.
//
// Solidity: function getTotalReserveEth() view returns(uint256)
func (_INFTStake *INFTStakeCallerSession) GetTotalReserveEth() (*big.Int, error) {
	return _INFTStake.Contract.GetTotalReserveEth(&_INFTStake.CallOpts)
}

// GetTotalReserveMadToken is a free data retrieval call binding the contract method 0x9aeac659.
//
// Solidity: function getTotalReserveMadToken() view returns(uint256)
func (_INFTStake *INFTStakeCaller) GetTotalReserveMadToken(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _INFTStake.contract.Call(opts, &out, "getTotalReserveMadToken")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalReserveMadToken is a free data retrieval call binding the contract method 0x9aeac659.
//
// Solidity: function getTotalReserveMadToken() view returns(uint256)
func (_INFTStake *INFTStakeSession) GetTotalReserveMadToken() (*big.Int, error) {
	return _INFTStake.Contract.GetTotalReserveMadToken(&_INFTStake.CallOpts)
}

// GetTotalReserveMadToken is a free data retrieval call binding the contract method 0x9aeac659.
//
// Solidity: function getTotalReserveMadToken() view returns(uint256)
func (_INFTStake *INFTStakeCallerSession) GetTotalReserveMadToken() (*big.Int, error) {
	return _INFTStake.Contract.GetTotalReserveMadToken(&_INFTStake.CallOpts)
}

// GetTotalShares is a free data retrieval call binding the contract method 0xd5002f2e.
//
// Solidity: function getTotalShares() view returns(uint256)
func (_INFTStake *INFTStakeCaller) GetTotalShares(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _INFTStake.contract.Call(opts, &out, "getTotalShares")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalShares is a free data retrieval call binding the contract method 0xd5002f2e.
//
// Solidity: function getTotalShares() view returns(uint256)
func (_INFTStake *INFTStakeSession) GetTotalShares() (*big.Int, error) {
	return _INFTStake.Contract.GetTotalShares(&_INFTStake.CallOpts)
}

// GetTotalShares is a free data retrieval call binding the contract method 0xd5002f2e.
//
// Solidity: function getTotalShares() view returns(uint256)
func (_INFTStake *INFTStakeCallerSession) GetTotalShares() (*big.Int, error) {
	return _INFTStake.Contract.GetTotalShares(&_INFTStake.CallOpts)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 tokenID_) returns(uint256 payoutEth, uint256 payoutMadToken)
func (_INFTStake *INFTStakeTransactor) Burn(opts *bind.TransactOpts, tokenID_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.contract.Transact(opts, "burn", tokenID_)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 tokenID_) returns(uint256 payoutEth, uint256 payoutMadToken)
func (_INFTStake *INFTStakeSession) Burn(tokenID_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.Contract.Burn(&_INFTStake.TransactOpts, tokenID_)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 tokenID_) returns(uint256 payoutEth, uint256 payoutMadToken)
func (_INFTStake *INFTStakeTransactorSession) Burn(tokenID_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.Contract.Burn(&_INFTStake.TransactOpts, tokenID_)
}

// BurnTo is a paid mutator transaction binding the contract method 0xea785a5e.
//
// Solidity: function burnTo(address to_, uint256 tokenID_) returns(uint256 payoutEth, uint256 payoutMadToken)
func (_INFTStake *INFTStakeTransactor) BurnTo(opts *bind.TransactOpts, to_ common.Address, tokenID_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.contract.Transact(opts, "burnTo", to_, tokenID_)
}

// BurnTo is a paid mutator transaction binding the contract method 0xea785a5e.
//
// Solidity: function burnTo(address to_, uint256 tokenID_) returns(uint256 payoutEth, uint256 payoutMadToken)
func (_INFTStake *INFTStakeSession) BurnTo(to_ common.Address, tokenID_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.Contract.BurnTo(&_INFTStake.TransactOpts, to_, tokenID_)
}

// BurnTo is a paid mutator transaction binding the contract method 0xea785a5e.
//
// Solidity: function burnTo(address to_, uint256 tokenID_) returns(uint256 payoutEth, uint256 payoutMadToken)
func (_INFTStake *INFTStakeTransactorSession) BurnTo(to_ common.Address, tokenID_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.Contract.BurnTo(&_INFTStake.TransactOpts, to_, tokenID_)
}

// CollectEth is a paid mutator transaction binding the contract method 0x2a0d8bd1.
//
// Solidity: function collectEth(uint256 tokenID_) returns(uint256 payout)
func (_INFTStake *INFTStakeTransactor) CollectEth(opts *bind.TransactOpts, tokenID_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.contract.Transact(opts, "collectEth", tokenID_)
}

// CollectEth is a paid mutator transaction binding the contract method 0x2a0d8bd1.
//
// Solidity: function collectEth(uint256 tokenID_) returns(uint256 payout)
func (_INFTStake *INFTStakeSession) CollectEth(tokenID_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.Contract.CollectEth(&_INFTStake.TransactOpts, tokenID_)
}

// CollectEth is a paid mutator transaction binding the contract method 0x2a0d8bd1.
//
// Solidity: function collectEth(uint256 tokenID_) returns(uint256 payout)
func (_INFTStake *INFTStakeTransactorSession) CollectEth(tokenID_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.Contract.CollectEth(&_INFTStake.TransactOpts, tokenID_)
}

// CollectEthTo is a paid mutator transaction binding the contract method 0xbe444379.
//
// Solidity: function collectEthTo(address to_, uint256 tokenID_) returns(uint256 payout)
func (_INFTStake *INFTStakeTransactor) CollectEthTo(opts *bind.TransactOpts, to_ common.Address, tokenID_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.contract.Transact(opts, "collectEthTo", to_, tokenID_)
}

// CollectEthTo is a paid mutator transaction binding the contract method 0xbe444379.
//
// Solidity: function collectEthTo(address to_, uint256 tokenID_) returns(uint256 payout)
func (_INFTStake *INFTStakeSession) CollectEthTo(to_ common.Address, tokenID_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.Contract.CollectEthTo(&_INFTStake.TransactOpts, to_, tokenID_)
}

// CollectEthTo is a paid mutator transaction binding the contract method 0xbe444379.
//
// Solidity: function collectEthTo(address to_, uint256 tokenID_) returns(uint256 payout)
func (_INFTStake *INFTStakeTransactorSession) CollectEthTo(to_ common.Address, tokenID_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.Contract.CollectEthTo(&_INFTStake.TransactOpts, to_, tokenID_)
}

// CollectToken is a paid mutator transaction binding the contract method 0xe35c3e28.
//
// Solidity: function collectToken(uint256 tokenID_) returns(uint256 payout)
func (_INFTStake *INFTStakeTransactor) CollectToken(opts *bind.TransactOpts, tokenID_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.contract.Transact(opts, "collectToken", tokenID_)
}

// CollectToken is a paid mutator transaction binding the contract method 0xe35c3e28.
//
// Solidity: function collectToken(uint256 tokenID_) returns(uint256 payout)
func (_INFTStake *INFTStakeSession) CollectToken(tokenID_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.Contract.CollectToken(&_INFTStake.TransactOpts, tokenID_)
}

// CollectToken is a paid mutator transaction binding the contract method 0xe35c3e28.
//
// Solidity: function collectToken(uint256 tokenID_) returns(uint256 payout)
func (_INFTStake *INFTStakeTransactorSession) CollectToken(tokenID_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.Contract.CollectToken(&_INFTStake.TransactOpts, tokenID_)
}

// CollectTokenTo is a paid mutator transaction binding the contract method 0x8853b950.
//
// Solidity: function collectTokenTo(address to_, uint256 tokenID_) returns(uint256 payout)
func (_INFTStake *INFTStakeTransactor) CollectTokenTo(opts *bind.TransactOpts, to_ common.Address, tokenID_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.contract.Transact(opts, "collectTokenTo", to_, tokenID_)
}

// CollectTokenTo is a paid mutator transaction binding the contract method 0x8853b950.
//
// Solidity: function collectTokenTo(address to_, uint256 tokenID_) returns(uint256 payout)
func (_INFTStake *INFTStakeSession) CollectTokenTo(to_ common.Address, tokenID_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.Contract.CollectTokenTo(&_INFTStake.TransactOpts, to_, tokenID_)
}

// CollectTokenTo is a paid mutator transaction binding the contract method 0x8853b950.
//
// Solidity: function collectTokenTo(address to_, uint256 tokenID_) returns(uint256 payout)
func (_INFTStake *INFTStakeTransactorSession) CollectTokenTo(to_ common.Address, tokenID_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.Contract.CollectTokenTo(&_INFTStake.TransactOpts, to_, tokenID_)
}

// DepositEth is a paid mutator transaction binding the contract method 0x99a89ecc.
//
// Solidity: function depositEth(uint8 magic_) payable returns()
func (_INFTStake *INFTStakeTransactor) DepositEth(opts *bind.TransactOpts, magic_ uint8) (*types.Transaction, error) {
	return _INFTStake.contract.Transact(opts, "depositEth", magic_)
}

// DepositEth is a paid mutator transaction binding the contract method 0x99a89ecc.
//
// Solidity: function depositEth(uint8 magic_) payable returns()
func (_INFTStake *INFTStakeSession) DepositEth(magic_ uint8) (*types.Transaction, error) {
	return _INFTStake.Contract.DepositEth(&_INFTStake.TransactOpts, magic_)
}

// DepositEth is a paid mutator transaction binding the contract method 0x99a89ecc.
//
// Solidity: function depositEth(uint8 magic_) payable returns()
func (_INFTStake *INFTStakeTransactorSession) DepositEth(magic_ uint8) (*types.Transaction, error) {
	return _INFTStake.Contract.DepositEth(&_INFTStake.TransactOpts, magic_)
}

// DepositToken is a paid mutator transaction binding the contract method 0x8191f5e5.
//
// Solidity: function depositToken(uint8 magic_, uint256 amount_) returns()
func (_INFTStake *INFTStakeTransactor) DepositToken(opts *bind.TransactOpts, magic_ uint8, amount_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.contract.Transact(opts, "depositToken", magic_, amount_)
}

// DepositToken is a paid mutator transaction binding the contract method 0x8191f5e5.
//
// Solidity: function depositToken(uint8 magic_, uint256 amount_) returns()
func (_INFTStake *INFTStakeSession) DepositToken(magic_ uint8, amount_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.Contract.DepositToken(&_INFTStake.TransactOpts, magic_, amount_)
}

// DepositToken is a paid mutator transaction binding the contract method 0x8191f5e5.
//
// Solidity: function depositToken(uint8 magic_, uint256 amount_) returns()
func (_INFTStake *INFTStakeTransactorSession) DepositToken(magic_ uint8, amount_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.Contract.DepositToken(&_INFTStake.TransactOpts, magic_, amount_)
}

// LockOwnPosition is a paid mutator transaction binding the contract method 0xe42a673c.
//
// Solidity: function lockOwnPosition(uint256 tokenID_, uint256 lockDuration_) returns(uint256)
func (_INFTStake *INFTStakeTransactor) LockOwnPosition(opts *bind.TransactOpts, tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.contract.Transact(opts, "lockOwnPosition", tokenID_, lockDuration_)
}

// LockOwnPosition is a paid mutator transaction binding the contract method 0xe42a673c.
//
// Solidity: function lockOwnPosition(uint256 tokenID_, uint256 lockDuration_) returns(uint256)
func (_INFTStake *INFTStakeSession) LockOwnPosition(tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.Contract.LockOwnPosition(&_INFTStake.TransactOpts, tokenID_, lockDuration_)
}

// LockOwnPosition is a paid mutator transaction binding the contract method 0xe42a673c.
//
// Solidity: function lockOwnPosition(uint256 tokenID_, uint256 lockDuration_) returns(uint256)
func (_INFTStake *INFTStakeTransactorSession) LockOwnPosition(tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.Contract.LockOwnPosition(&_INFTStake.TransactOpts, tokenID_, lockDuration_)
}

// LockPosition is a paid mutator transaction binding the contract method 0x0cc65dfb.
//
// Solidity: function lockPosition(address caller_, uint256 tokenID_, uint256 lockDuration_) returns(uint256)
func (_INFTStake *INFTStakeTransactor) LockPosition(opts *bind.TransactOpts, caller_ common.Address, tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.contract.Transact(opts, "lockPosition", caller_, tokenID_, lockDuration_)
}

// LockPosition is a paid mutator transaction binding the contract method 0x0cc65dfb.
//
// Solidity: function lockPosition(address caller_, uint256 tokenID_, uint256 lockDuration_) returns(uint256)
func (_INFTStake *INFTStakeSession) LockPosition(caller_ common.Address, tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.Contract.LockPosition(&_INFTStake.TransactOpts, caller_, tokenID_, lockDuration_)
}

// LockPosition is a paid mutator transaction binding the contract method 0x0cc65dfb.
//
// Solidity: function lockPosition(address caller_, uint256 tokenID_, uint256 lockDuration_) returns(uint256)
func (_INFTStake *INFTStakeTransactorSession) LockPosition(caller_ common.Address, tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.Contract.LockPosition(&_INFTStake.TransactOpts, caller_, tokenID_, lockDuration_)
}

// LockWithdraw is a paid mutator transaction binding the contract method 0x0e4eb15b.
//
// Solidity: function lockWithdraw(uint256 tokenID_, uint256 lockDuration_) returns(uint256)
func (_INFTStake *INFTStakeTransactor) LockWithdraw(opts *bind.TransactOpts, tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.contract.Transact(opts, "lockWithdraw", tokenID_, lockDuration_)
}

// LockWithdraw is a paid mutator transaction binding the contract method 0x0e4eb15b.
//
// Solidity: function lockWithdraw(uint256 tokenID_, uint256 lockDuration_) returns(uint256)
func (_INFTStake *INFTStakeSession) LockWithdraw(tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.Contract.LockWithdraw(&_INFTStake.TransactOpts, tokenID_, lockDuration_)
}

// LockWithdraw is a paid mutator transaction binding the contract method 0x0e4eb15b.
//
// Solidity: function lockWithdraw(uint256 tokenID_, uint256 lockDuration_) returns(uint256)
func (_INFTStake *INFTStakeTransactorSession) LockWithdraw(tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.Contract.LockWithdraw(&_INFTStake.TransactOpts, tokenID_, lockDuration_)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 amount_) returns(uint256 tokenID)
func (_INFTStake *INFTStakeTransactor) Mint(opts *bind.TransactOpts, amount_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.contract.Transact(opts, "mint", amount_)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 amount_) returns(uint256 tokenID)
func (_INFTStake *INFTStakeSession) Mint(amount_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.Contract.Mint(&_INFTStake.TransactOpts, amount_)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 amount_) returns(uint256 tokenID)
func (_INFTStake *INFTStakeTransactorSession) Mint(amount_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.Contract.Mint(&_INFTStake.TransactOpts, amount_)
}

// MintTo is a paid mutator transaction binding the contract method 0x2baf2acb.
//
// Solidity: function mintTo(address to_, uint256 amount_, uint256 lockDuration_) returns(uint256 tokenID)
func (_INFTStake *INFTStakeTransactor) MintTo(opts *bind.TransactOpts, to_ common.Address, amount_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.contract.Transact(opts, "mintTo", to_, amount_, lockDuration_)
}

// MintTo is a paid mutator transaction binding the contract method 0x2baf2acb.
//
// Solidity: function mintTo(address to_, uint256 amount_, uint256 lockDuration_) returns(uint256 tokenID)
func (_INFTStake *INFTStakeSession) MintTo(to_ common.Address, amount_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.Contract.MintTo(&_INFTStake.TransactOpts, to_, amount_, lockDuration_)
}

// MintTo is a paid mutator transaction binding the contract method 0x2baf2acb.
//
// Solidity: function mintTo(address to_, uint256 amount_, uint256 lockDuration_) returns(uint256 tokenID)
func (_INFTStake *INFTStakeTransactorSession) MintTo(to_ common.Address, amount_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.Contract.MintTo(&_INFTStake.TransactOpts, to_, amount_, lockDuration_)
}

// SkimExcessEth is a paid mutator transaction binding the contract method 0x971b505b.
//
// Solidity: function skimExcessEth(address to_) returns(uint256 excess)
func (_INFTStake *INFTStakeTransactor) SkimExcessEth(opts *bind.TransactOpts, to_ common.Address) (*types.Transaction, error) {
	return _INFTStake.contract.Transact(opts, "skimExcessEth", to_)
}

// SkimExcessEth is a paid mutator transaction binding the contract method 0x971b505b.
//
// Solidity: function skimExcessEth(address to_) returns(uint256 excess)
func (_INFTStake *INFTStakeSession) SkimExcessEth(to_ common.Address) (*types.Transaction, error) {
	return _INFTStake.Contract.SkimExcessEth(&_INFTStake.TransactOpts, to_)
}

// SkimExcessEth is a paid mutator transaction binding the contract method 0x971b505b.
//
// Solidity: function skimExcessEth(address to_) returns(uint256 excess)
func (_INFTStake *INFTStakeTransactorSession) SkimExcessEth(to_ common.Address) (*types.Transaction, error) {
	return _INFTStake.Contract.SkimExcessEth(&_INFTStake.TransactOpts, to_)
}

// SkimExcessToken is a paid mutator transaction binding the contract method 0x7aa507fb.
//
// Solidity: function skimExcessToken(address to_) returns(uint256 excess)
func (_INFTStake *INFTStakeTransactor) SkimExcessToken(opts *bind.TransactOpts, to_ common.Address) (*types.Transaction, error) {
	return _INFTStake.contract.Transact(opts, "skimExcessToken", to_)
}

// SkimExcessToken is a paid mutator transaction binding the contract method 0x7aa507fb.
//
// Solidity: function skimExcessToken(address to_) returns(uint256 excess)
func (_INFTStake *INFTStakeSession) SkimExcessToken(to_ common.Address) (*types.Transaction, error) {
	return _INFTStake.Contract.SkimExcessToken(&_INFTStake.TransactOpts, to_)
}

// SkimExcessToken is a paid mutator transaction binding the contract method 0x7aa507fb.
//
// Solidity: function skimExcessToken(address to_) returns(uint256 excess)
func (_INFTStake *INFTStakeTransactorSession) SkimExcessToken(to_ common.Address) (*types.Transaction, error) {
	return _INFTStake.Contract.SkimExcessToken(&_INFTStake.TransactOpts, to_)
}

// ISnapshotsMetaData contains all meta data concerning the ISnapshots contract.
var ISnapshotsMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"safeToProceedConsensus\",\"type\":\"bool\"}],\"name\":\"SnapshotTaken\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getBlockClaimsFromLatestSnapshot\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"chainId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"height\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"txCount\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"prevBlock\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"txRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"headerRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structBClaimsParserLibrary.BClaims\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotNumber\",\"type\":\"uint256\"}],\"name\":\"getBlockClaimsFromSnapshot\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"chainId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"height\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"txCount\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"prevBlock\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"txRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"headerRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structBClaimsParserLibrary.BClaims\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainIdFromLatestSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotNumber\",\"type\":\"uint256\"}],\"name\":\"getChainIdFromSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommittedHeightFromLatestSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotNumber\",\"type\":\"uint256\"}],\"name\":\"getCommittedHeightFromSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEpochLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestSnapshot\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"committedAt\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"chainId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"height\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"txCount\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"prevBlock\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"txRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"headerRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structBClaimsParserLibrary.BClaims\",\"name\":\"blockClaims\",\"type\":\"tuple\"},{\"internalType\":\"uint256[2]\",\"name\":\"signature\",\"type\":\"uint256[2]\"}],\"internalType\":\"structSnapshot\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMadnetHeightFromLatestSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotNumber\",\"type\":\"uint256\"}],\"name\":\"getMadnetHeightFromSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSignatureFromLatestSnapshot\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotNumber\",\"type\":\"uint256\"}],\"name\":\"getSignatureFromSnapshot\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotNumber\",\"type\":\"uint256\"}],\"name\":\"getSnapshot\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"committedAt\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"chainId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"height\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"txCount\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"prevBlock\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"txRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"headerRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structBClaimsParserLibrary.BClaims\",\"name\":\"blockClaims\",\"type\":\"tuple\"},{\"internalType\":\"uint256[2]\",\"name\":\"signature\",\"type\":\"uint256[2]\"}],\"internalType\":\"structSnapshot\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSnapshotDesperationDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSnapshotDesperationFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numValidators\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"myIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blocksSinceDesperation\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"blsig\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"desperationFactor\",\"type\":\"uint256\"}],\"name\":\"mayValidatorSnapshot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"epochLength_\",\"type\":\"uint32\"}],\"name\":\"setEpochLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"desperationDelay_\",\"type\":\"uint32\"}],\"name\":\"setSnapshotDesperationDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"desperationFactor_\",\"type\":\"uint32\"}],\"name\":\"setSnapshotDesperationFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signatureGroup_\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"bClaims_\",\"type\":\"bytes\"}],\"name\":\"snapshot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// ISnapshotsABI is the input ABI used to generate the binding from.
// Deprecated: Use ISnapshotsMetaData.ABI instead.
var ISnapshotsABI = ISnapshotsMetaData.ABI

// ISnapshots is an auto generated Go binding around an Ethereum contract.
type ISnapshots struct {
	ISnapshotsCaller     // Read-only binding to the contract
	ISnapshotsTransactor // Write-only binding to the contract
	ISnapshotsFilterer   // Log filterer for contract events
}

// ISnapshotsCaller is an auto generated read-only Go binding around an Ethereum contract.
type ISnapshotsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ISnapshotsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ISnapshotsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ISnapshotsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ISnapshotsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ISnapshotsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ISnapshotsSession struct {
	Contract     *ISnapshots       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ISnapshotsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ISnapshotsCallerSession struct {
	Contract *ISnapshotsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// ISnapshotsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ISnapshotsTransactorSession struct {
	Contract     *ISnapshotsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// ISnapshotsRaw is an auto generated low-level Go binding around an Ethereum contract.
type ISnapshotsRaw struct {
	Contract *ISnapshots // Generic contract binding to access the raw methods on
}

// ISnapshotsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ISnapshotsCallerRaw struct {
	Contract *ISnapshotsCaller // Generic read-only contract binding to access the raw methods on
}

// ISnapshotsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ISnapshotsTransactorRaw struct {
	Contract *ISnapshotsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewISnapshots creates a new instance of ISnapshots, bound to a specific deployed contract.
func NewISnapshots(address common.Address, backend bind.ContractBackend) (*ISnapshots, error) {
	contract, err := bindISnapshots(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ISnapshots{ISnapshotsCaller: ISnapshotsCaller{contract: contract}, ISnapshotsTransactor: ISnapshotsTransactor{contract: contract}, ISnapshotsFilterer: ISnapshotsFilterer{contract: contract}}, nil
}

// NewISnapshotsCaller creates a new read-only instance of ISnapshots, bound to a specific deployed contract.
func NewISnapshotsCaller(address common.Address, caller bind.ContractCaller) (*ISnapshotsCaller, error) {
	contract, err := bindISnapshots(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ISnapshotsCaller{contract: contract}, nil
}

// NewISnapshotsTransactor creates a new write-only instance of ISnapshots, bound to a specific deployed contract.
func NewISnapshotsTransactor(address common.Address, transactor bind.ContractTransactor) (*ISnapshotsTransactor, error) {
	contract, err := bindISnapshots(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ISnapshotsTransactor{contract: contract}, nil
}

// NewISnapshotsFilterer creates a new log filterer instance of ISnapshots, bound to a specific deployed contract.
func NewISnapshotsFilterer(address common.Address, filterer bind.ContractFilterer) (*ISnapshotsFilterer, error) {
	contract, err := bindISnapshots(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ISnapshotsFilterer{contract: contract}, nil
}

// bindISnapshots binds a generic wrapper to an already deployed contract.
func bindISnapshots(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ISnapshotsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ISnapshots *ISnapshotsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ISnapshots.Contract.ISnapshotsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ISnapshots *ISnapshotsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ISnapshots.Contract.ISnapshotsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ISnapshots *ISnapshotsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ISnapshots.Contract.ISnapshotsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ISnapshots *ISnapshotsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ISnapshots.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ISnapshots *ISnapshotsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ISnapshots.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ISnapshots *ISnapshotsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ISnapshots.Contract.contract.Transact(opts, method, params...)
}

// GetBlockClaimsFromLatestSnapshot is a free data retrieval call binding the contract method 0xc2ea6603.
//
// Solidity: function getBlockClaimsFromLatestSnapshot() view returns((uint32,uint32,uint32,bytes32,bytes32,bytes32,bytes32))
func (_ISnapshots *ISnapshotsCaller) GetBlockClaimsFromLatestSnapshot(opts *bind.CallOpts) (BClaimsParserLibraryBClaims, error) {
	var out []interface{}
	err := _ISnapshots.contract.Call(opts, &out, "getBlockClaimsFromLatestSnapshot")

	if err != nil {
		return *new(BClaimsParserLibraryBClaims), err
	}

	out0 := *abi.ConvertType(out[0], new(BClaimsParserLibraryBClaims)).(*BClaimsParserLibraryBClaims)

	return out0, err

}

// GetBlockClaimsFromLatestSnapshot is a free data retrieval call binding the contract method 0xc2ea6603.
//
// Solidity: function getBlockClaimsFromLatestSnapshot() view returns((uint32,uint32,uint32,bytes32,bytes32,bytes32,bytes32))
func (_ISnapshots *ISnapshotsSession) GetBlockClaimsFromLatestSnapshot() (BClaimsParserLibraryBClaims, error) {
	return _ISnapshots.Contract.GetBlockClaimsFromLatestSnapshot(&_ISnapshots.CallOpts)
}

// GetBlockClaimsFromLatestSnapshot is a free data retrieval call binding the contract method 0xc2ea6603.
//
// Solidity: function getBlockClaimsFromLatestSnapshot() view returns((uint32,uint32,uint32,bytes32,bytes32,bytes32,bytes32))
func (_ISnapshots *ISnapshotsCallerSession) GetBlockClaimsFromLatestSnapshot() (BClaimsParserLibraryBClaims, error) {
	return _ISnapshots.Contract.GetBlockClaimsFromLatestSnapshot(&_ISnapshots.CallOpts)
}

// GetBlockClaimsFromSnapshot is a free data retrieval call binding the contract method 0x45dfc599.
//
// Solidity: function getBlockClaimsFromSnapshot(uint256 snapshotNumber) view returns((uint32,uint32,uint32,bytes32,bytes32,bytes32,bytes32))
func (_ISnapshots *ISnapshotsCaller) GetBlockClaimsFromSnapshot(opts *bind.CallOpts, snapshotNumber *big.Int) (BClaimsParserLibraryBClaims, error) {
	var out []interface{}
	err := _ISnapshots.contract.Call(opts, &out, "getBlockClaimsFromSnapshot", snapshotNumber)

	if err != nil {
		return *new(BClaimsParserLibraryBClaims), err
	}

	out0 := *abi.ConvertType(out[0], new(BClaimsParserLibraryBClaims)).(*BClaimsParserLibraryBClaims)

	return out0, err

}

// GetBlockClaimsFromSnapshot is a free data retrieval call binding the contract method 0x45dfc599.
//
// Solidity: function getBlockClaimsFromSnapshot(uint256 snapshotNumber) view returns((uint32,uint32,uint32,bytes32,bytes32,bytes32,bytes32))
func (_ISnapshots *ISnapshotsSession) GetBlockClaimsFromSnapshot(snapshotNumber *big.Int) (BClaimsParserLibraryBClaims, error) {
	return _ISnapshots.Contract.GetBlockClaimsFromSnapshot(&_ISnapshots.CallOpts, snapshotNumber)
}

// GetBlockClaimsFromSnapshot is a free data retrieval call binding the contract method 0x45dfc599.
//
// Solidity: function getBlockClaimsFromSnapshot(uint256 snapshotNumber) view returns((uint32,uint32,uint32,bytes32,bytes32,bytes32,bytes32))
func (_ISnapshots *ISnapshotsCallerSession) GetBlockClaimsFromSnapshot(snapshotNumber *big.Int) (BClaimsParserLibraryBClaims, error) {
	return _ISnapshots.Contract.GetBlockClaimsFromSnapshot(&_ISnapshots.CallOpts, snapshotNumber)
}

// GetChainId is a free data retrieval call binding the contract method 0x3408e470.
//
// Solidity: function getChainId() view returns(uint256)
func (_ISnapshots *ISnapshotsCaller) GetChainId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ISnapshots.contract.Call(opts, &out, "getChainId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetChainId is a free data retrieval call binding the contract method 0x3408e470.
//
// Solidity: function getChainId() view returns(uint256)
func (_ISnapshots *ISnapshotsSession) GetChainId() (*big.Int, error) {
	return _ISnapshots.Contract.GetChainId(&_ISnapshots.CallOpts)
}

// GetChainId is a free data retrieval call binding the contract method 0x3408e470.
//
// Solidity: function getChainId() view returns(uint256)
func (_ISnapshots *ISnapshotsCallerSession) GetChainId() (*big.Int, error) {
	return _ISnapshots.Contract.GetChainId(&_ISnapshots.CallOpts)
}

// GetChainIdFromLatestSnapshot is a free data retrieval call binding the contract method 0xd9c11657.
//
// Solidity: function getChainIdFromLatestSnapshot() view returns(uint256)
func (_ISnapshots *ISnapshotsCaller) GetChainIdFromLatestSnapshot(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ISnapshots.contract.Call(opts, &out, "getChainIdFromLatestSnapshot")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetChainIdFromLatestSnapshot is a free data retrieval call binding the contract method 0xd9c11657.
//
// Solidity: function getChainIdFromLatestSnapshot() view returns(uint256)
func (_ISnapshots *ISnapshotsSession) GetChainIdFromLatestSnapshot() (*big.Int, error) {
	return _ISnapshots.Contract.GetChainIdFromLatestSnapshot(&_ISnapshots.CallOpts)
}

// GetChainIdFromLatestSnapshot is a free data retrieval call binding the contract method 0xd9c11657.
//
// Solidity: function getChainIdFromLatestSnapshot() view returns(uint256)
func (_ISnapshots *ISnapshotsCallerSession) GetChainIdFromLatestSnapshot() (*big.Int, error) {
	return _ISnapshots.Contract.GetChainIdFromLatestSnapshot(&_ISnapshots.CallOpts)
}

// GetChainIdFromSnapshot is a free data retrieval call binding the contract method 0x19f74669.
//
// Solidity: function getChainIdFromSnapshot(uint256 snapshotNumber) view returns(uint256)
func (_ISnapshots *ISnapshotsCaller) GetChainIdFromSnapshot(opts *bind.CallOpts, snapshotNumber *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ISnapshots.contract.Call(opts, &out, "getChainIdFromSnapshot", snapshotNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetChainIdFromSnapshot is a free data retrieval call binding the contract method 0x19f74669.
//
// Solidity: function getChainIdFromSnapshot(uint256 snapshotNumber) view returns(uint256)
func (_ISnapshots *ISnapshotsSession) GetChainIdFromSnapshot(snapshotNumber *big.Int) (*big.Int, error) {
	return _ISnapshots.Contract.GetChainIdFromSnapshot(&_ISnapshots.CallOpts, snapshotNumber)
}

// GetChainIdFromSnapshot is a free data retrieval call binding the contract method 0x19f74669.
//
// Solidity: function getChainIdFromSnapshot(uint256 snapshotNumber) view returns(uint256)
func (_ISnapshots *ISnapshotsCallerSession) GetChainIdFromSnapshot(snapshotNumber *big.Int) (*big.Int, error) {
	return _ISnapshots.Contract.GetChainIdFromSnapshot(&_ISnapshots.CallOpts, snapshotNumber)
}

// GetCommittedHeightFromLatestSnapshot is a free data retrieval call binding the contract method 0x026c2b7e.
//
// Solidity: function getCommittedHeightFromLatestSnapshot() view returns(uint256)
func (_ISnapshots *ISnapshotsCaller) GetCommittedHeightFromLatestSnapshot(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ISnapshots.contract.Call(opts, &out, "getCommittedHeightFromLatestSnapshot")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCommittedHeightFromLatestSnapshot is a free data retrieval call binding the contract method 0x026c2b7e.
//
// Solidity: function getCommittedHeightFromLatestSnapshot() view returns(uint256)
func (_ISnapshots *ISnapshotsSession) GetCommittedHeightFromLatestSnapshot() (*big.Int, error) {
	return _ISnapshots.Contract.GetCommittedHeightFromLatestSnapshot(&_ISnapshots.CallOpts)
}

// GetCommittedHeightFromLatestSnapshot is a free data retrieval call binding the contract method 0x026c2b7e.
//
// Solidity: function getCommittedHeightFromLatestSnapshot() view returns(uint256)
func (_ISnapshots *ISnapshotsCallerSession) GetCommittedHeightFromLatestSnapshot() (*big.Int, error) {
	return _ISnapshots.Contract.GetCommittedHeightFromLatestSnapshot(&_ISnapshots.CallOpts)
}

// GetCommittedHeightFromSnapshot is a free data retrieval call binding the contract method 0xe18c697a.
//
// Solidity: function getCommittedHeightFromSnapshot(uint256 snapshotNumber) view returns(uint256)
func (_ISnapshots *ISnapshotsCaller) GetCommittedHeightFromSnapshot(opts *bind.CallOpts, snapshotNumber *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ISnapshots.contract.Call(opts, &out, "getCommittedHeightFromSnapshot", snapshotNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCommittedHeightFromSnapshot is a free data retrieval call binding the contract method 0xe18c697a.
//
// Solidity: function getCommittedHeightFromSnapshot(uint256 snapshotNumber) view returns(uint256)
func (_ISnapshots *ISnapshotsSession) GetCommittedHeightFromSnapshot(snapshotNumber *big.Int) (*big.Int, error) {
	return _ISnapshots.Contract.GetCommittedHeightFromSnapshot(&_ISnapshots.CallOpts, snapshotNumber)
}

// GetCommittedHeightFromSnapshot is a free data retrieval call binding the contract method 0xe18c697a.
//
// Solidity: function getCommittedHeightFromSnapshot(uint256 snapshotNumber) view returns(uint256)
func (_ISnapshots *ISnapshotsCallerSession) GetCommittedHeightFromSnapshot(snapshotNumber *big.Int) (*big.Int, error) {
	return _ISnapshots.Contract.GetCommittedHeightFromSnapshot(&_ISnapshots.CallOpts, snapshotNumber)
}

// GetEpoch is a free data retrieval call binding the contract method 0x757991a8.
//
// Solidity: function getEpoch() view returns(uint256)
func (_ISnapshots *ISnapshotsCaller) GetEpoch(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ISnapshots.contract.Call(opts, &out, "getEpoch")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetEpoch is a free data retrieval call binding the contract method 0x757991a8.
//
// Solidity: function getEpoch() view returns(uint256)
func (_ISnapshots *ISnapshotsSession) GetEpoch() (*big.Int, error) {
	return _ISnapshots.Contract.GetEpoch(&_ISnapshots.CallOpts)
}

// GetEpoch is a free data retrieval call binding the contract method 0x757991a8.
//
// Solidity: function getEpoch() view returns(uint256)
func (_ISnapshots *ISnapshotsCallerSession) GetEpoch() (*big.Int, error) {
	return _ISnapshots.Contract.GetEpoch(&_ISnapshots.CallOpts)
}

// GetEpochLength is a free data retrieval call binding the contract method 0xcfe8a73b.
//
// Solidity: function getEpochLength() view returns(uint256)
func (_ISnapshots *ISnapshotsCaller) GetEpochLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ISnapshots.contract.Call(opts, &out, "getEpochLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetEpochLength is a free data retrieval call binding the contract method 0xcfe8a73b.
//
// Solidity: function getEpochLength() view returns(uint256)
func (_ISnapshots *ISnapshotsSession) GetEpochLength() (*big.Int, error) {
	return _ISnapshots.Contract.GetEpochLength(&_ISnapshots.CallOpts)
}

// GetEpochLength is a free data retrieval call binding the contract method 0xcfe8a73b.
//
// Solidity: function getEpochLength() view returns(uint256)
func (_ISnapshots *ISnapshotsCallerSession) GetEpochLength() (*big.Int, error) {
	return _ISnapshots.Contract.GetEpochLength(&_ISnapshots.CallOpts)
}

// GetLatestSnapshot is a free data retrieval call binding the contract method 0xd518f243.
//
// Solidity: function getLatestSnapshot() view returns((uint256,(uint32,uint32,uint32,bytes32,bytes32,bytes32,bytes32),uint256[2]))
func (_ISnapshots *ISnapshotsCaller) GetLatestSnapshot(opts *bind.CallOpts) (Snapshot, error) {
	var out []interface{}
	err := _ISnapshots.contract.Call(opts, &out, "getLatestSnapshot")

	if err != nil {
		return *new(Snapshot), err
	}

	out0 := *abi.ConvertType(out[0], new(Snapshot)).(*Snapshot)

	return out0, err

}

// GetLatestSnapshot is a free data retrieval call binding the contract method 0xd518f243.
//
// Solidity: function getLatestSnapshot() view returns((uint256,(uint32,uint32,uint32,bytes32,bytes32,bytes32,bytes32),uint256[2]))
func (_ISnapshots *ISnapshotsSession) GetLatestSnapshot() (Snapshot, error) {
	return _ISnapshots.Contract.GetLatestSnapshot(&_ISnapshots.CallOpts)
}

// GetLatestSnapshot is a free data retrieval call binding the contract method 0xd518f243.
//
// Solidity: function getLatestSnapshot() view returns((uint256,(uint32,uint32,uint32,bytes32,bytes32,bytes32,bytes32),uint256[2]))
func (_ISnapshots *ISnapshotsCallerSession) GetLatestSnapshot() (Snapshot, error) {
	return _ISnapshots.Contract.GetLatestSnapshot(&_ISnapshots.CallOpts)
}

// GetMadnetHeightFromLatestSnapshot is a free data retrieval call binding the contract method 0x9c262671.
//
// Solidity: function getMadnetHeightFromLatestSnapshot() view returns(uint256)
func (_ISnapshots *ISnapshotsCaller) GetMadnetHeightFromLatestSnapshot(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ISnapshots.contract.Call(opts, &out, "getMadnetHeightFromLatestSnapshot")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMadnetHeightFromLatestSnapshot is a free data retrieval call binding the contract method 0x9c262671.
//
// Solidity: function getMadnetHeightFromLatestSnapshot() view returns(uint256)
func (_ISnapshots *ISnapshotsSession) GetMadnetHeightFromLatestSnapshot() (*big.Int, error) {
	return _ISnapshots.Contract.GetMadnetHeightFromLatestSnapshot(&_ISnapshots.CallOpts)
}

// GetMadnetHeightFromLatestSnapshot is a free data retrieval call binding the contract method 0x9c262671.
//
// Solidity: function getMadnetHeightFromLatestSnapshot() view returns(uint256)
func (_ISnapshots *ISnapshotsCallerSession) GetMadnetHeightFromLatestSnapshot() (*big.Int, error) {
	return _ISnapshots.Contract.GetMadnetHeightFromLatestSnapshot(&_ISnapshots.CallOpts)
}

// GetMadnetHeightFromSnapshot is a free data retrieval call binding the contract method 0xa8c07fc3.
//
// Solidity: function getMadnetHeightFromSnapshot(uint256 snapshotNumber) view returns(uint256)
func (_ISnapshots *ISnapshotsCaller) GetMadnetHeightFromSnapshot(opts *bind.CallOpts, snapshotNumber *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ISnapshots.contract.Call(opts, &out, "getMadnetHeightFromSnapshot", snapshotNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMadnetHeightFromSnapshot is a free data retrieval call binding the contract method 0xa8c07fc3.
//
// Solidity: function getMadnetHeightFromSnapshot(uint256 snapshotNumber) view returns(uint256)
func (_ISnapshots *ISnapshotsSession) GetMadnetHeightFromSnapshot(snapshotNumber *big.Int) (*big.Int, error) {
	return _ISnapshots.Contract.GetMadnetHeightFromSnapshot(&_ISnapshots.CallOpts, snapshotNumber)
}

// GetMadnetHeightFromSnapshot is a free data retrieval call binding the contract method 0xa8c07fc3.
//
// Solidity: function getMadnetHeightFromSnapshot(uint256 snapshotNumber) view returns(uint256)
func (_ISnapshots *ISnapshotsCallerSession) GetMadnetHeightFromSnapshot(snapshotNumber *big.Int) (*big.Int, error) {
	return _ISnapshots.Contract.GetMadnetHeightFromSnapshot(&_ISnapshots.CallOpts, snapshotNumber)
}

// GetSignatureFromLatestSnapshot is a free data retrieval call binding the contract method 0xc0804ea9.
//
// Solidity: function getSignatureFromLatestSnapshot() view returns(uint256[2])
func (_ISnapshots *ISnapshotsCaller) GetSignatureFromLatestSnapshot(opts *bind.CallOpts) ([2]*big.Int, error) {
	var out []interface{}
	err := _ISnapshots.contract.Call(opts, &out, "getSignatureFromLatestSnapshot")

	if err != nil {
		return *new([2]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([2]*big.Int)).(*[2]*big.Int)

	return out0, err

}

// GetSignatureFromLatestSnapshot is a free data retrieval call binding the contract method 0xc0804ea9.
//
// Solidity: function getSignatureFromLatestSnapshot() view returns(uint256[2])
func (_ISnapshots *ISnapshotsSession) GetSignatureFromLatestSnapshot() ([2]*big.Int, error) {
	return _ISnapshots.Contract.GetSignatureFromLatestSnapshot(&_ISnapshots.CallOpts)
}

// GetSignatureFromLatestSnapshot is a free data retrieval call binding the contract method 0xc0804ea9.
//
// Solidity: function getSignatureFromLatestSnapshot() view returns(uint256[2])
func (_ISnapshots *ISnapshotsCallerSession) GetSignatureFromLatestSnapshot() ([2]*big.Int, error) {
	return _ISnapshots.Contract.GetSignatureFromLatestSnapshot(&_ISnapshots.CallOpts)
}

// GetSignatureFromSnapshot is a free data retrieval call binding the contract method 0xdbe7eae7.
//
// Solidity: function getSignatureFromSnapshot(uint256 snapshotNumber) view returns(uint256[2])
func (_ISnapshots *ISnapshotsCaller) GetSignatureFromSnapshot(opts *bind.CallOpts, snapshotNumber *big.Int) ([2]*big.Int, error) {
	var out []interface{}
	err := _ISnapshots.contract.Call(opts, &out, "getSignatureFromSnapshot", snapshotNumber)

	if err != nil {
		return *new([2]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([2]*big.Int)).(*[2]*big.Int)

	return out0, err

}

// GetSignatureFromSnapshot is a free data retrieval call binding the contract method 0xdbe7eae7.
//
// Solidity: function getSignatureFromSnapshot(uint256 snapshotNumber) view returns(uint256[2])
func (_ISnapshots *ISnapshotsSession) GetSignatureFromSnapshot(snapshotNumber *big.Int) ([2]*big.Int, error) {
	return _ISnapshots.Contract.GetSignatureFromSnapshot(&_ISnapshots.CallOpts, snapshotNumber)
}

// GetSignatureFromSnapshot is a free data retrieval call binding the contract method 0xdbe7eae7.
//
// Solidity: function getSignatureFromSnapshot(uint256 snapshotNumber) view returns(uint256[2])
func (_ISnapshots *ISnapshotsCallerSession) GetSignatureFromSnapshot(snapshotNumber *big.Int) ([2]*big.Int, error) {
	return _ISnapshots.Contract.GetSignatureFromSnapshot(&_ISnapshots.CallOpts, snapshotNumber)
}

// GetSnapshot is a free data retrieval call binding the contract method 0x76f10ad0.
//
// Solidity: function getSnapshot(uint256 snapshotNumber) view returns((uint256,(uint32,uint32,uint32,bytes32,bytes32,bytes32,bytes32),uint256[2]))
func (_ISnapshots *ISnapshotsCaller) GetSnapshot(opts *bind.CallOpts, snapshotNumber *big.Int) (Snapshot, error) {
	var out []interface{}
	err := _ISnapshots.contract.Call(opts, &out, "getSnapshot", snapshotNumber)

	if err != nil {
		return *new(Snapshot), err
	}

	out0 := *abi.ConvertType(out[0], new(Snapshot)).(*Snapshot)

	return out0, err

}

// GetSnapshot is a free data retrieval call binding the contract method 0x76f10ad0.
//
// Solidity: function getSnapshot(uint256 snapshotNumber) view returns((uint256,(uint32,uint32,uint32,bytes32,bytes32,bytes32,bytes32),uint256[2]))
func (_ISnapshots *ISnapshotsSession) GetSnapshot(snapshotNumber *big.Int) (Snapshot, error) {
	return _ISnapshots.Contract.GetSnapshot(&_ISnapshots.CallOpts, snapshotNumber)
}

// GetSnapshot is a free data retrieval call binding the contract method 0x76f10ad0.
//
// Solidity: function getSnapshot(uint256 snapshotNumber) view returns((uint256,(uint32,uint32,uint32,bytes32,bytes32,bytes32,bytes32),uint256[2]))
func (_ISnapshots *ISnapshotsCallerSession) GetSnapshot(snapshotNumber *big.Int) (Snapshot, error) {
	return _ISnapshots.Contract.GetSnapshot(&_ISnapshots.CallOpts, snapshotNumber)
}

// GetSnapshotDesperationDelay is a free data retrieval call binding the contract method 0xd17fcc56.
//
// Solidity: function getSnapshotDesperationDelay() view returns(uint256)
func (_ISnapshots *ISnapshotsCaller) GetSnapshotDesperationDelay(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ISnapshots.contract.Call(opts, &out, "getSnapshotDesperationDelay")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetSnapshotDesperationDelay is a free data retrieval call binding the contract method 0xd17fcc56.
//
// Solidity: function getSnapshotDesperationDelay() view returns(uint256)
func (_ISnapshots *ISnapshotsSession) GetSnapshotDesperationDelay() (*big.Int, error) {
	return _ISnapshots.Contract.GetSnapshotDesperationDelay(&_ISnapshots.CallOpts)
}

// GetSnapshotDesperationDelay is a free data retrieval call binding the contract method 0xd17fcc56.
//
// Solidity: function getSnapshotDesperationDelay() view returns(uint256)
func (_ISnapshots *ISnapshotsCallerSession) GetSnapshotDesperationDelay() (*big.Int, error) {
	return _ISnapshots.Contract.GetSnapshotDesperationDelay(&_ISnapshots.CallOpts)
}

// GetSnapshotDesperationFactor is a free data retrieval call binding the contract method 0x7cc4cce6.
//
// Solidity: function getSnapshotDesperationFactor() view returns(uint256)
func (_ISnapshots *ISnapshotsCaller) GetSnapshotDesperationFactor(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ISnapshots.contract.Call(opts, &out, "getSnapshotDesperationFactor")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetSnapshotDesperationFactor is a free data retrieval call binding the contract method 0x7cc4cce6.
//
// Solidity: function getSnapshotDesperationFactor() view returns(uint256)
func (_ISnapshots *ISnapshotsSession) GetSnapshotDesperationFactor() (*big.Int, error) {
	return _ISnapshots.Contract.GetSnapshotDesperationFactor(&_ISnapshots.CallOpts)
}

// GetSnapshotDesperationFactor is a free data retrieval call binding the contract method 0x7cc4cce6.
//
// Solidity: function getSnapshotDesperationFactor() view returns(uint256)
func (_ISnapshots *ISnapshotsCallerSession) GetSnapshotDesperationFactor() (*big.Int, error) {
	return _ISnapshots.Contract.GetSnapshotDesperationFactor(&_ISnapshots.CallOpts)
}

// MayValidatorSnapshot is a free data retrieval call binding the contract method 0xf45fa246.
//
// Solidity: function mayValidatorSnapshot(uint256 numValidators, uint256 myIdx, uint256 blocksSinceDesperation, bytes32 blsig, uint256 desperationFactor) pure returns(bool)
func (_ISnapshots *ISnapshotsCaller) MayValidatorSnapshot(opts *bind.CallOpts, numValidators *big.Int, myIdx *big.Int, blocksSinceDesperation *big.Int, blsig [32]byte, desperationFactor *big.Int) (bool, error) {
	var out []interface{}
	err := _ISnapshots.contract.Call(opts, &out, "mayValidatorSnapshot", numValidators, myIdx, blocksSinceDesperation, blsig, desperationFactor)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// MayValidatorSnapshot is a free data retrieval call binding the contract method 0xf45fa246.
//
// Solidity: function mayValidatorSnapshot(uint256 numValidators, uint256 myIdx, uint256 blocksSinceDesperation, bytes32 blsig, uint256 desperationFactor) pure returns(bool)
func (_ISnapshots *ISnapshotsSession) MayValidatorSnapshot(numValidators *big.Int, myIdx *big.Int, blocksSinceDesperation *big.Int, blsig [32]byte, desperationFactor *big.Int) (bool, error) {
	return _ISnapshots.Contract.MayValidatorSnapshot(&_ISnapshots.CallOpts, numValidators, myIdx, blocksSinceDesperation, blsig, desperationFactor)
}

// MayValidatorSnapshot is a free data retrieval call binding the contract method 0xf45fa246.
//
// Solidity: function mayValidatorSnapshot(uint256 numValidators, uint256 myIdx, uint256 blocksSinceDesperation, bytes32 blsig, uint256 desperationFactor) pure returns(bool)
func (_ISnapshots *ISnapshotsCallerSession) MayValidatorSnapshot(numValidators *big.Int, myIdx *big.Int, blocksSinceDesperation *big.Int, blsig [32]byte, desperationFactor *big.Int) (bool, error) {
	return _ISnapshots.Contract.MayValidatorSnapshot(&_ISnapshots.CallOpts, numValidators, myIdx, blocksSinceDesperation, blsig, desperationFactor)
}

// SetEpochLength is a paid mutator transaction binding the contract method 0xdeb1e56e.
//
// Solidity: function setEpochLength(uint32 epochLength_) returns()
func (_ISnapshots *ISnapshotsTransactor) SetEpochLength(opts *bind.TransactOpts, epochLength_ uint32) (*types.Transaction, error) {
	return _ISnapshots.contract.Transact(opts, "setEpochLength", epochLength_)
}

// SetEpochLength is a paid mutator transaction binding the contract method 0xdeb1e56e.
//
// Solidity: function setEpochLength(uint32 epochLength_) returns()
func (_ISnapshots *ISnapshotsSession) SetEpochLength(epochLength_ uint32) (*types.Transaction, error) {
	return _ISnapshots.Contract.SetEpochLength(&_ISnapshots.TransactOpts, epochLength_)
}

// SetEpochLength is a paid mutator transaction binding the contract method 0xdeb1e56e.
//
// Solidity: function setEpochLength(uint32 epochLength_) returns()
func (_ISnapshots *ISnapshotsTransactorSession) SetEpochLength(epochLength_ uint32) (*types.Transaction, error) {
	return _ISnapshots.Contract.SetEpochLength(&_ISnapshots.TransactOpts, epochLength_)
}

// SetSnapshotDesperationDelay is a paid mutator transaction binding the contract method 0xc2e8fef2.
//
// Solidity: function setSnapshotDesperationDelay(uint32 desperationDelay_) returns()
func (_ISnapshots *ISnapshotsTransactor) SetSnapshotDesperationDelay(opts *bind.TransactOpts, desperationDelay_ uint32) (*types.Transaction, error) {
	return _ISnapshots.contract.Transact(opts, "setSnapshotDesperationDelay", desperationDelay_)
}

// SetSnapshotDesperationDelay is a paid mutator transaction binding the contract method 0xc2e8fef2.
//
// Solidity: function setSnapshotDesperationDelay(uint32 desperationDelay_) returns()
func (_ISnapshots *ISnapshotsSession) SetSnapshotDesperationDelay(desperationDelay_ uint32) (*types.Transaction, error) {
	return _ISnapshots.Contract.SetSnapshotDesperationDelay(&_ISnapshots.TransactOpts, desperationDelay_)
}

// SetSnapshotDesperationDelay is a paid mutator transaction binding the contract method 0xc2e8fef2.
//
// Solidity: function setSnapshotDesperationDelay(uint32 desperationDelay_) returns()
func (_ISnapshots *ISnapshotsTransactorSession) SetSnapshotDesperationDelay(desperationDelay_ uint32) (*types.Transaction, error) {
	return _ISnapshots.Contract.SetSnapshotDesperationDelay(&_ISnapshots.TransactOpts, desperationDelay_)
}

// SetSnapshotDesperationFactor is a paid mutator transaction binding the contract method 0x3fa7a1ad.
//
// Solidity: function setSnapshotDesperationFactor(uint32 desperationFactor_) returns()
func (_ISnapshots *ISnapshotsTransactor) SetSnapshotDesperationFactor(opts *bind.TransactOpts, desperationFactor_ uint32) (*types.Transaction, error) {
	return _ISnapshots.contract.Transact(opts, "setSnapshotDesperationFactor", desperationFactor_)
}

// SetSnapshotDesperationFactor is a paid mutator transaction binding the contract method 0x3fa7a1ad.
//
// Solidity: function setSnapshotDesperationFactor(uint32 desperationFactor_) returns()
func (_ISnapshots *ISnapshotsSession) SetSnapshotDesperationFactor(desperationFactor_ uint32) (*types.Transaction, error) {
	return _ISnapshots.Contract.SetSnapshotDesperationFactor(&_ISnapshots.TransactOpts, desperationFactor_)
}

// SetSnapshotDesperationFactor is a paid mutator transaction binding the contract method 0x3fa7a1ad.
//
// Solidity: function setSnapshotDesperationFactor(uint32 desperationFactor_) returns()
func (_ISnapshots *ISnapshotsTransactorSession) SetSnapshotDesperationFactor(desperationFactor_ uint32) (*types.Transaction, error) {
	return _ISnapshots.Contract.SetSnapshotDesperationFactor(&_ISnapshots.TransactOpts, desperationFactor_)
}

// Snapshot is a paid mutator transaction binding the contract method 0x08ca1f25.
//
// Solidity: function snapshot(bytes signatureGroup_, bytes bClaims_) returns(bool)
func (_ISnapshots *ISnapshotsTransactor) Snapshot(opts *bind.TransactOpts, signatureGroup_ []byte, bClaims_ []byte) (*types.Transaction, error) {
	return _ISnapshots.contract.Transact(opts, "snapshot", signatureGroup_, bClaims_)
}

// Snapshot is a paid mutator transaction binding the contract method 0x08ca1f25.
//
// Solidity: function snapshot(bytes signatureGroup_, bytes bClaims_) returns(bool)
func (_ISnapshots *ISnapshotsSession) Snapshot(signatureGroup_ []byte, bClaims_ []byte) (*types.Transaction, error) {
	return _ISnapshots.Contract.Snapshot(&_ISnapshots.TransactOpts, signatureGroup_, bClaims_)
}

// Snapshot is a paid mutator transaction binding the contract method 0x08ca1f25.
//
// Solidity: function snapshot(bytes signatureGroup_, bytes bClaims_) returns(bool)
func (_ISnapshots *ISnapshotsTransactorSession) Snapshot(signatureGroup_ []byte, bClaims_ []byte) (*types.Transaction, error) {
	return _ISnapshots.Contract.Snapshot(&_ISnapshots.TransactOpts, signatureGroup_, bClaims_)
}

// ISnapshotsSnapshotTakenIterator is returned from FilterSnapshotTaken and is used to iterate over the raw logs and unpacked data for SnapshotTaken events raised by the ISnapshots contract.
type ISnapshotsSnapshotTakenIterator struct {
	Event *ISnapshotsSnapshotTaken // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ISnapshotsSnapshotTakenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ISnapshotsSnapshotTaken)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ISnapshotsSnapshotTaken)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ISnapshotsSnapshotTakenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ISnapshotsSnapshotTakenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ISnapshotsSnapshotTaken represents a SnapshotTaken event raised by the ISnapshots contract.
type ISnapshotsSnapshotTaken struct {
	ChainId                *big.Int
	Epoch                  *big.Int
	Height                 *big.Int
	Validator              common.Address
	SafeToProceedConsensus bool
	Raw                    types.Log // Blockchain specific contextual infos
}

// FilterSnapshotTaken is a free log retrieval operation binding the contract event 0x740c230bf3b8e6d0997cb207d19155e2721234d5690acf42dbc85615aedc362f.
//
// Solidity: event SnapshotTaken(uint256 chainId, uint256 indexed epoch, uint256 height, address indexed validator, bool safeToProceedConsensus)
func (_ISnapshots *ISnapshotsFilterer) FilterSnapshotTaken(opts *bind.FilterOpts, epoch []*big.Int, validator []common.Address) (*ISnapshotsSnapshotTakenIterator, error) {

	var epochRule []interface{}
	for _, epochItem := range epoch {
		epochRule = append(epochRule, epochItem)
	}

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ISnapshots.contract.FilterLogs(opts, "SnapshotTaken", epochRule, validatorRule)
	if err != nil {
		return nil, err
	}
	return &ISnapshotsSnapshotTakenIterator{contract: _ISnapshots.contract, event: "SnapshotTaken", logs: logs, sub: sub}, nil
}

// WatchSnapshotTaken is a free log subscription operation binding the contract event 0x740c230bf3b8e6d0997cb207d19155e2721234d5690acf42dbc85615aedc362f.
//
// Solidity: event SnapshotTaken(uint256 chainId, uint256 indexed epoch, uint256 height, address indexed validator, bool safeToProceedConsensus)
func (_ISnapshots *ISnapshotsFilterer) WatchSnapshotTaken(opts *bind.WatchOpts, sink chan<- *ISnapshotsSnapshotTaken, epoch []*big.Int, validator []common.Address) (event.Subscription, error) {

	var epochRule []interface{}
	for _, epochItem := range epoch {
		epochRule = append(epochRule, epochItem)
	}

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ISnapshots.contract.WatchLogs(opts, "SnapshotTaken", epochRule, validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ISnapshotsSnapshotTaken)
				if err := _ISnapshots.contract.UnpackLog(event, "SnapshotTaken", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSnapshotTaken is a log parse operation binding the contract event 0x740c230bf3b8e6d0997cb207d19155e2721234d5690acf42dbc85615aedc362f.
//
// Solidity: event SnapshotTaken(uint256 chainId, uint256 indexed epoch, uint256 height, address indexed validator, bool safeToProceedConsensus)
func (_ISnapshots *ISnapshotsFilterer) ParseSnapshotTaken(log types.Log) (*ISnapshotsSnapshotTaken, error) {
	event := new(ISnapshotsSnapshotTaken)
	if err := _ISnapshots.contract.UnpackLog(event, "SnapshotTaken", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IValidatorPoolMetaData contains all meta data concerning the IValidatorPool contract.
var IValidatorPoolMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"claimStakeNFTPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectProfits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payoutEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payoutToken\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"completeETHDKG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"getLocation\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"validators_\",\"type\":\"address[]\"}],\"name\":\"getLocations\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getValidator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidatorAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getValidatorData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"internalType\":\"structValidatorData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidatorsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeETHDKG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"isAccusable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"isInExitingQueue\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMaintenanceScheduled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dishonestValidator_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"disputer_\",\"type\":\"address\"}],\"name\":\"majorSlash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dishonestValidator_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"disputer_\",\"type\":\"address\"}],\"name\":\"minorSlash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseConsensus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"madnetHeight\",\"type\":\"uint256\"}],\"name\":\"pauseConsensusOnArbitraryHeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"stakerTokenIDs\",\"type\":\"uint256[]\"}],\"name\":\"registerValidators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scheduleMaintenance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setETHDKG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"ip\",\"type\":\"string\"}],\"name\":\"setLocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxNumValidators_\",\"type\":\"uint256\"}],\"name\":\"setMaxNumValidators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSnapshot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeAmount_\",\"type\":\"uint256\"}],\"name\":\"setStakeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unregisterAllValidators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"}],\"name\":\"unregisterValidators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// IValidatorPoolABI is the input ABI used to generate the binding from.
// Deprecated: Use IValidatorPoolMetaData.ABI instead.
var IValidatorPoolABI = IValidatorPoolMetaData.ABI

// IValidatorPool is an auto generated Go binding around an Ethereum contract.
type IValidatorPool struct {
	IValidatorPoolCaller     // Read-only binding to the contract
	IValidatorPoolTransactor // Write-only binding to the contract
	IValidatorPoolFilterer   // Log filterer for contract events
}

// IValidatorPoolCaller is an auto generated read-only Go binding around an Ethereum contract.
type IValidatorPoolCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IValidatorPoolTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IValidatorPoolTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IValidatorPoolFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IValidatorPoolFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IValidatorPoolSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IValidatorPoolSession struct {
	Contract     *IValidatorPool   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IValidatorPoolCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IValidatorPoolCallerSession struct {
	Contract *IValidatorPoolCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// IValidatorPoolTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IValidatorPoolTransactorSession struct {
	Contract     *IValidatorPoolTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// IValidatorPoolRaw is an auto generated low-level Go binding around an Ethereum contract.
type IValidatorPoolRaw struct {
	Contract *IValidatorPool // Generic contract binding to access the raw methods on
}

// IValidatorPoolCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IValidatorPoolCallerRaw struct {
	Contract *IValidatorPoolCaller // Generic read-only contract binding to access the raw methods on
}

// IValidatorPoolTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IValidatorPoolTransactorRaw struct {
	Contract *IValidatorPoolTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIValidatorPool creates a new instance of IValidatorPool, bound to a specific deployed contract.
func NewIValidatorPool(address common.Address, backend bind.ContractBackend) (*IValidatorPool, error) {
	contract, err := bindIValidatorPool(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IValidatorPool{IValidatorPoolCaller: IValidatorPoolCaller{contract: contract}, IValidatorPoolTransactor: IValidatorPoolTransactor{contract: contract}, IValidatorPoolFilterer: IValidatorPoolFilterer{contract: contract}}, nil
}

// NewIValidatorPoolCaller creates a new read-only instance of IValidatorPool, bound to a specific deployed contract.
func NewIValidatorPoolCaller(address common.Address, caller bind.ContractCaller) (*IValidatorPoolCaller, error) {
	contract, err := bindIValidatorPool(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IValidatorPoolCaller{contract: contract}, nil
}

// NewIValidatorPoolTransactor creates a new write-only instance of IValidatorPool, bound to a specific deployed contract.
func NewIValidatorPoolTransactor(address common.Address, transactor bind.ContractTransactor) (*IValidatorPoolTransactor, error) {
	contract, err := bindIValidatorPool(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IValidatorPoolTransactor{contract: contract}, nil
}

// NewIValidatorPoolFilterer creates a new log filterer instance of IValidatorPool, bound to a specific deployed contract.
func NewIValidatorPoolFilterer(address common.Address, filterer bind.ContractFilterer) (*IValidatorPoolFilterer, error) {
	contract, err := bindIValidatorPool(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IValidatorPoolFilterer{contract: contract}, nil
}

// bindIValidatorPool binds a generic wrapper to an already deployed contract.
func bindIValidatorPool(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IValidatorPoolABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IValidatorPool *IValidatorPoolRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IValidatorPool.Contract.IValidatorPoolCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IValidatorPool *IValidatorPoolRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IValidatorPool.Contract.IValidatorPoolTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IValidatorPool *IValidatorPoolRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IValidatorPool.Contract.IValidatorPoolTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IValidatorPool *IValidatorPoolCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IValidatorPool.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IValidatorPool *IValidatorPoolTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IValidatorPool.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IValidatorPool *IValidatorPoolTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IValidatorPool.Contract.contract.Transact(opts, method, params...)
}

// GetLocation is a free data retrieval call binding the contract method 0xd9e0dc59.
//
// Solidity: function getLocation(address validator) view returns(string)
func (_IValidatorPool *IValidatorPoolCaller) GetLocation(opts *bind.CallOpts, validator common.Address) (string, error) {
	var out []interface{}
	err := _IValidatorPool.contract.Call(opts, &out, "getLocation", validator)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetLocation is a free data retrieval call binding the contract method 0xd9e0dc59.
//
// Solidity: function getLocation(address validator) view returns(string)
func (_IValidatorPool *IValidatorPoolSession) GetLocation(validator common.Address) (string, error) {
	return _IValidatorPool.Contract.GetLocation(&_IValidatorPool.CallOpts, validator)
}

// GetLocation is a free data retrieval call binding the contract method 0xd9e0dc59.
//
// Solidity: function getLocation(address validator) view returns(string)
func (_IValidatorPool *IValidatorPoolCallerSession) GetLocation(validator common.Address) (string, error) {
	return _IValidatorPool.Contract.GetLocation(&_IValidatorPool.CallOpts, validator)
}

// GetLocations is a free data retrieval call binding the contract method 0x76207f9c.
//
// Solidity: function getLocations(address[] validators_) view returns(string[])
func (_IValidatorPool *IValidatorPoolCaller) GetLocations(opts *bind.CallOpts, validators_ []common.Address) ([]string, error) {
	var out []interface{}
	err := _IValidatorPool.contract.Call(opts, &out, "getLocations", validators_)

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// GetLocations is a free data retrieval call binding the contract method 0x76207f9c.
//
// Solidity: function getLocations(address[] validators_) view returns(string[])
func (_IValidatorPool *IValidatorPoolSession) GetLocations(validators_ []common.Address) ([]string, error) {
	return _IValidatorPool.Contract.GetLocations(&_IValidatorPool.CallOpts, validators_)
}

// GetLocations is a free data retrieval call binding the contract method 0x76207f9c.
//
// Solidity: function getLocations(address[] validators_) view returns(string[])
func (_IValidatorPool *IValidatorPoolCallerSession) GetLocations(validators_ []common.Address) ([]string, error) {
	return _IValidatorPool.Contract.GetLocations(&_IValidatorPool.CallOpts, validators_)
}

// GetValidator is a free data retrieval call binding the contract method 0xb5d89627.
//
// Solidity: function getValidator(uint256 index) view returns(address)
func (_IValidatorPool *IValidatorPoolCaller) GetValidator(opts *bind.CallOpts, index *big.Int) (common.Address, error) {
	var out []interface{}
	err := _IValidatorPool.contract.Call(opts, &out, "getValidator", index)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetValidator is a free data retrieval call binding the contract method 0xb5d89627.
//
// Solidity: function getValidator(uint256 index) view returns(address)
func (_IValidatorPool *IValidatorPoolSession) GetValidator(index *big.Int) (common.Address, error) {
	return _IValidatorPool.Contract.GetValidator(&_IValidatorPool.CallOpts, index)
}

// GetValidator is a free data retrieval call binding the contract method 0xb5d89627.
//
// Solidity: function getValidator(uint256 index) view returns(address)
func (_IValidatorPool *IValidatorPoolCallerSession) GetValidator(index *big.Int) (common.Address, error) {
	return _IValidatorPool.Contract.GetValidator(&_IValidatorPool.CallOpts, index)
}

// GetValidatorAddresses is a free data retrieval call binding the contract method 0xf74e921f.
//
// Solidity: function getValidatorAddresses() view returns(address[])
func (_IValidatorPool *IValidatorPoolCaller) GetValidatorAddresses(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _IValidatorPool.contract.Call(opts, &out, "getValidatorAddresses")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetValidatorAddresses is a free data retrieval call binding the contract method 0xf74e921f.
//
// Solidity: function getValidatorAddresses() view returns(address[])
func (_IValidatorPool *IValidatorPoolSession) GetValidatorAddresses() ([]common.Address, error) {
	return _IValidatorPool.Contract.GetValidatorAddresses(&_IValidatorPool.CallOpts)
}

// GetValidatorAddresses is a free data retrieval call binding the contract method 0xf74e921f.
//
// Solidity: function getValidatorAddresses() view returns(address[])
func (_IValidatorPool *IValidatorPoolCallerSession) GetValidatorAddresses() ([]common.Address, error) {
	return _IValidatorPool.Contract.GetValidatorAddresses(&_IValidatorPool.CallOpts)
}

// GetValidatorData is a free data retrieval call binding the contract method 0xc0951451.
//
// Solidity: function getValidatorData(uint256 index) view returns((address,uint256))
func (_IValidatorPool *IValidatorPoolCaller) GetValidatorData(opts *bind.CallOpts, index *big.Int) (ValidatorData, error) {
	var out []interface{}
	err := _IValidatorPool.contract.Call(opts, &out, "getValidatorData", index)

	if err != nil {
		return *new(ValidatorData), err
	}

	out0 := *abi.ConvertType(out[0], new(ValidatorData)).(*ValidatorData)

	return out0, err

}

// GetValidatorData is a free data retrieval call binding the contract method 0xc0951451.
//
// Solidity: function getValidatorData(uint256 index) view returns((address,uint256))
func (_IValidatorPool *IValidatorPoolSession) GetValidatorData(index *big.Int) (ValidatorData, error) {
	return _IValidatorPool.Contract.GetValidatorData(&_IValidatorPool.CallOpts, index)
}

// GetValidatorData is a free data retrieval call binding the contract method 0xc0951451.
//
// Solidity: function getValidatorData(uint256 index) view returns((address,uint256))
func (_IValidatorPool *IValidatorPoolCallerSession) GetValidatorData(index *big.Int) (ValidatorData, error) {
	return _IValidatorPool.Contract.GetValidatorData(&_IValidatorPool.CallOpts, index)
}

// GetValidatorsCount is a free data retrieval call binding the contract method 0x27498240.
//
// Solidity: function getValidatorsCount() view returns(uint256)
func (_IValidatorPool *IValidatorPoolCaller) GetValidatorsCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IValidatorPool.contract.Call(opts, &out, "getValidatorsCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetValidatorsCount is a free data retrieval call binding the contract method 0x27498240.
//
// Solidity: function getValidatorsCount() view returns(uint256)
func (_IValidatorPool *IValidatorPoolSession) GetValidatorsCount() (*big.Int, error) {
	return _IValidatorPool.Contract.GetValidatorsCount(&_IValidatorPool.CallOpts)
}

// GetValidatorsCount is a free data retrieval call binding the contract method 0x27498240.
//
// Solidity: function getValidatorsCount() view returns(uint256)
func (_IValidatorPool *IValidatorPoolCallerSession) GetValidatorsCount() (*big.Int, error) {
	return _IValidatorPool.Contract.GetValidatorsCount(&_IValidatorPool.CallOpts)
}

// IsAccusable is a free data retrieval call binding the contract method 0x20c2856d.
//
// Solidity: function isAccusable(address participant) view returns(bool)
func (_IValidatorPool *IValidatorPoolCaller) IsAccusable(opts *bind.CallOpts, participant common.Address) (bool, error) {
	var out []interface{}
	err := _IValidatorPool.contract.Call(opts, &out, "isAccusable", participant)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsAccusable is a free data retrieval call binding the contract method 0x20c2856d.
//
// Solidity: function isAccusable(address participant) view returns(bool)
func (_IValidatorPool *IValidatorPoolSession) IsAccusable(participant common.Address) (bool, error) {
	return _IValidatorPool.Contract.IsAccusable(&_IValidatorPool.CallOpts, participant)
}

// IsAccusable is a free data retrieval call binding the contract method 0x20c2856d.
//
// Solidity: function isAccusable(address participant) view returns(bool)
func (_IValidatorPool *IValidatorPoolCallerSession) IsAccusable(participant common.Address) (bool, error) {
	return _IValidatorPool.Contract.IsAccusable(&_IValidatorPool.CallOpts, participant)
}

// IsInExitingQueue is a free data retrieval call binding the contract method 0xe4ad75f1.
//
// Solidity: function isInExitingQueue(address participant) view returns(bool)
func (_IValidatorPool *IValidatorPoolCaller) IsInExitingQueue(opts *bind.CallOpts, participant common.Address) (bool, error) {
	var out []interface{}
	err := _IValidatorPool.contract.Call(opts, &out, "isInExitingQueue", participant)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsInExitingQueue is a free data retrieval call binding the contract method 0xe4ad75f1.
//
// Solidity: function isInExitingQueue(address participant) view returns(bool)
func (_IValidatorPool *IValidatorPoolSession) IsInExitingQueue(participant common.Address) (bool, error) {
	return _IValidatorPool.Contract.IsInExitingQueue(&_IValidatorPool.CallOpts, participant)
}

// IsInExitingQueue is a free data retrieval call binding the contract method 0xe4ad75f1.
//
// Solidity: function isInExitingQueue(address participant) view returns(bool)
func (_IValidatorPool *IValidatorPoolCallerSession) IsInExitingQueue(participant common.Address) (bool, error) {
	return _IValidatorPool.Contract.IsInExitingQueue(&_IValidatorPool.CallOpts, participant)
}

// IsMaintenanceScheduled is a free data retrieval call binding the contract method 0x1885570f.
//
// Solidity: function isMaintenanceScheduled() view returns(bool)
func (_IValidatorPool *IValidatorPoolCaller) IsMaintenanceScheduled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _IValidatorPool.contract.Call(opts, &out, "isMaintenanceScheduled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsMaintenanceScheduled is a free data retrieval call binding the contract method 0x1885570f.
//
// Solidity: function isMaintenanceScheduled() view returns(bool)
func (_IValidatorPool *IValidatorPoolSession) IsMaintenanceScheduled() (bool, error) {
	return _IValidatorPool.Contract.IsMaintenanceScheduled(&_IValidatorPool.CallOpts)
}

// IsMaintenanceScheduled is a free data retrieval call binding the contract method 0x1885570f.
//
// Solidity: function isMaintenanceScheduled() view returns(bool)
func (_IValidatorPool *IValidatorPoolCallerSession) IsMaintenanceScheduled() (bool, error) {
	return _IValidatorPool.Contract.IsMaintenanceScheduled(&_IValidatorPool.CallOpts)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address participant) view returns(bool)
func (_IValidatorPool *IValidatorPoolCaller) IsValidator(opts *bind.CallOpts, participant common.Address) (bool, error) {
	var out []interface{}
	err := _IValidatorPool.contract.Call(opts, &out, "isValidator", participant)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address participant) view returns(bool)
func (_IValidatorPool *IValidatorPoolSession) IsValidator(participant common.Address) (bool, error) {
	return _IValidatorPool.Contract.IsValidator(&_IValidatorPool.CallOpts, participant)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address participant) view returns(bool)
func (_IValidatorPool *IValidatorPoolCallerSession) IsValidator(participant common.Address) (bool, error) {
	return _IValidatorPool.Contract.IsValidator(&_IValidatorPool.CallOpts, participant)
}

// ClaimStakeNFTPosition is a paid mutator transaction binding the contract method 0xd9b4a939.
//
// Solidity: function claimStakeNFTPosition() returns(uint256)
func (_IValidatorPool *IValidatorPoolTransactor) ClaimStakeNFTPosition(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IValidatorPool.contract.Transact(opts, "claimStakeNFTPosition")
}

// ClaimStakeNFTPosition is a paid mutator transaction binding the contract method 0xd9b4a939.
//
// Solidity: function claimStakeNFTPosition() returns(uint256)
func (_IValidatorPool *IValidatorPoolSession) ClaimStakeNFTPosition() (*types.Transaction, error) {
	return _IValidatorPool.Contract.ClaimStakeNFTPosition(&_IValidatorPool.TransactOpts)
}

// ClaimStakeNFTPosition is a paid mutator transaction binding the contract method 0xd9b4a939.
//
// Solidity: function claimStakeNFTPosition() returns(uint256)
func (_IValidatorPool *IValidatorPoolTransactorSession) ClaimStakeNFTPosition() (*types.Transaction, error) {
	return _IValidatorPool.Contract.ClaimStakeNFTPosition(&_IValidatorPool.TransactOpts)
}

// CollectProfits is a paid mutator transaction binding the contract method 0xc958e0d6.
//
// Solidity: function collectProfits() returns(uint256 payoutEth, uint256 payoutToken)
func (_IValidatorPool *IValidatorPoolTransactor) CollectProfits(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IValidatorPool.contract.Transact(opts, "collectProfits")
}

// CollectProfits is a paid mutator transaction binding the contract method 0xc958e0d6.
//
// Solidity: function collectProfits() returns(uint256 payoutEth, uint256 payoutToken)
func (_IValidatorPool *IValidatorPoolSession) CollectProfits() (*types.Transaction, error) {
	return _IValidatorPool.Contract.CollectProfits(&_IValidatorPool.TransactOpts)
}

// CollectProfits is a paid mutator transaction binding the contract method 0xc958e0d6.
//
// Solidity: function collectProfits() returns(uint256 payoutEth, uint256 payoutToken)
func (_IValidatorPool *IValidatorPoolTransactorSession) CollectProfits() (*types.Transaction, error) {
	return _IValidatorPool.Contract.CollectProfits(&_IValidatorPool.TransactOpts)
}

// CompleteETHDKG is a paid mutator transaction binding the contract method 0x8f579924.
//
// Solidity: function completeETHDKG() returns()
func (_IValidatorPool *IValidatorPoolTransactor) CompleteETHDKG(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IValidatorPool.contract.Transact(opts, "completeETHDKG")
}

// CompleteETHDKG is a paid mutator transaction binding the contract method 0x8f579924.
//
// Solidity: function completeETHDKG() returns()
func (_IValidatorPool *IValidatorPoolSession) CompleteETHDKG() (*types.Transaction, error) {
	return _IValidatorPool.Contract.CompleteETHDKG(&_IValidatorPool.TransactOpts)
}

// CompleteETHDKG is a paid mutator transaction binding the contract method 0x8f579924.
//
// Solidity: function completeETHDKG() returns()
func (_IValidatorPool *IValidatorPoolTransactorSession) CompleteETHDKG() (*types.Transaction, error) {
	return _IValidatorPool.Contract.CompleteETHDKG(&_IValidatorPool.TransactOpts)
}

// InitializeETHDKG is a paid mutator transaction binding the contract method 0x57b51c9c.
//
// Solidity: function initializeETHDKG() returns()
func (_IValidatorPool *IValidatorPoolTransactor) InitializeETHDKG(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IValidatorPool.contract.Transact(opts, "initializeETHDKG")
}

// InitializeETHDKG is a paid mutator transaction binding the contract method 0x57b51c9c.
//
// Solidity: function initializeETHDKG() returns()
func (_IValidatorPool *IValidatorPoolSession) InitializeETHDKG() (*types.Transaction, error) {
	return _IValidatorPool.Contract.InitializeETHDKG(&_IValidatorPool.TransactOpts)
}

// InitializeETHDKG is a paid mutator transaction binding the contract method 0x57b51c9c.
//
// Solidity: function initializeETHDKG() returns()
func (_IValidatorPool *IValidatorPoolTransactorSession) InitializeETHDKG() (*types.Transaction, error) {
	return _IValidatorPool.Contract.InitializeETHDKG(&_IValidatorPool.TransactOpts)
}

// MajorSlash is a paid mutator transaction binding the contract method 0x048d56c7.
//
// Solidity: function majorSlash(address dishonestValidator_, address disputer_) returns()
func (_IValidatorPool *IValidatorPoolTransactor) MajorSlash(opts *bind.TransactOpts, dishonestValidator_ common.Address, disputer_ common.Address) (*types.Transaction, error) {
	return _IValidatorPool.contract.Transact(opts, "majorSlash", dishonestValidator_, disputer_)
}

// MajorSlash is a paid mutator transaction binding the contract method 0x048d56c7.
//
// Solidity: function majorSlash(address dishonestValidator_, address disputer_) returns()
func (_IValidatorPool *IValidatorPoolSession) MajorSlash(dishonestValidator_ common.Address, disputer_ common.Address) (*types.Transaction, error) {
	return _IValidatorPool.Contract.MajorSlash(&_IValidatorPool.TransactOpts, dishonestValidator_, disputer_)
}

// MajorSlash is a paid mutator transaction binding the contract method 0x048d56c7.
//
// Solidity: function majorSlash(address dishonestValidator_, address disputer_) returns()
func (_IValidatorPool *IValidatorPoolTransactorSession) MajorSlash(dishonestValidator_ common.Address, disputer_ common.Address) (*types.Transaction, error) {
	return _IValidatorPool.Contract.MajorSlash(&_IValidatorPool.TransactOpts, dishonestValidator_, disputer_)
}

// MinorSlash is a paid mutator transaction binding the contract method 0x64c0461c.
//
// Solidity: function minorSlash(address dishonestValidator_, address disputer_) returns()
func (_IValidatorPool *IValidatorPoolTransactor) MinorSlash(opts *bind.TransactOpts, dishonestValidator_ common.Address, disputer_ common.Address) (*types.Transaction, error) {
	return _IValidatorPool.contract.Transact(opts, "minorSlash", dishonestValidator_, disputer_)
}

// MinorSlash is a paid mutator transaction binding the contract method 0x64c0461c.
//
// Solidity: function minorSlash(address dishonestValidator_, address disputer_) returns()
func (_IValidatorPool *IValidatorPoolSession) MinorSlash(dishonestValidator_ common.Address, disputer_ common.Address) (*types.Transaction, error) {
	return _IValidatorPool.Contract.MinorSlash(&_IValidatorPool.TransactOpts, dishonestValidator_, disputer_)
}

// MinorSlash is a paid mutator transaction binding the contract method 0x64c0461c.
//
// Solidity: function minorSlash(address dishonestValidator_, address disputer_) returns()
func (_IValidatorPool *IValidatorPoolTransactorSession) MinorSlash(dishonestValidator_ common.Address, disputer_ common.Address) (*types.Transaction, error) {
	return _IValidatorPool.Contract.MinorSlash(&_IValidatorPool.TransactOpts, dishonestValidator_, disputer_)
}

// PauseConsensus is a paid mutator transaction binding the contract method 0x1e5975f4.
//
// Solidity: function pauseConsensus() returns()
func (_IValidatorPool *IValidatorPoolTransactor) PauseConsensus(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IValidatorPool.contract.Transact(opts, "pauseConsensus")
}

// PauseConsensus is a paid mutator transaction binding the contract method 0x1e5975f4.
//
// Solidity: function pauseConsensus() returns()
func (_IValidatorPool *IValidatorPoolSession) PauseConsensus() (*types.Transaction, error) {
	return _IValidatorPool.Contract.PauseConsensus(&_IValidatorPool.TransactOpts)
}

// PauseConsensus is a paid mutator transaction binding the contract method 0x1e5975f4.
//
// Solidity: function pauseConsensus() returns()
func (_IValidatorPool *IValidatorPoolTransactorSession) PauseConsensus() (*types.Transaction, error) {
	return _IValidatorPool.Contract.PauseConsensus(&_IValidatorPool.TransactOpts)
}

// PauseConsensusOnArbitraryHeight is a paid mutator transaction binding the contract method 0xbc33bb01.
//
// Solidity: function pauseConsensusOnArbitraryHeight(uint256 madnetHeight) returns()
func (_IValidatorPool *IValidatorPoolTransactor) PauseConsensusOnArbitraryHeight(opts *bind.TransactOpts, madnetHeight *big.Int) (*types.Transaction, error) {
	return _IValidatorPool.contract.Transact(opts, "pauseConsensusOnArbitraryHeight", madnetHeight)
}

// PauseConsensusOnArbitraryHeight is a paid mutator transaction binding the contract method 0xbc33bb01.
//
// Solidity: function pauseConsensusOnArbitraryHeight(uint256 madnetHeight) returns()
func (_IValidatorPool *IValidatorPoolSession) PauseConsensusOnArbitraryHeight(madnetHeight *big.Int) (*types.Transaction, error) {
	return _IValidatorPool.Contract.PauseConsensusOnArbitraryHeight(&_IValidatorPool.TransactOpts, madnetHeight)
}

// PauseConsensusOnArbitraryHeight is a paid mutator transaction binding the contract method 0xbc33bb01.
//
// Solidity: function pauseConsensusOnArbitraryHeight(uint256 madnetHeight) returns()
func (_IValidatorPool *IValidatorPoolTransactorSession) PauseConsensusOnArbitraryHeight(madnetHeight *big.Int) (*types.Transaction, error) {
	return _IValidatorPool.Contract.PauseConsensusOnArbitraryHeight(&_IValidatorPool.TransactOpts, madnetHeight)
}

// RegisterValidators is a paid mutator transaction binding the contract method 0x65bd91af.
//
// Solidity: function registerValidators(address[] validators, uint256[] stakerTokenIDs) returns()
func (_IValidatorPool *IValidatorPoolTransactor) RegisterValidators(opts *bind.TransactOpts, validators []common.Address, stakerTokenIDs []*big.Int) (*types.Transaction, error) {
	return _IValidatorPool.contract.Transact(opts, "registerValidators", validators, stakerTokenIDs)
}

// RegisterValidators is a paid mutator transaction binding the contract method 0x65bd91af.
//
// Solidity: function registerValidators(address[] validators, uint256[] stakerTokenIDs) returns()
func (_IValidatorPool *IValidatorPoolSession) RegisterValidators(validators []common.Address, stakerTokenIDs []*big.Int) (*types.Transaction, error) {
	return _IValidatorPool.Contract.RegisterValidators(&_IValidatorPool.TransactOpts, validators, stakerTokenIDs)
}

// RegisterValidators is a paid mutator transaction binding the contract method 0x65bd91af.
//
// Solidity: function registerValidators(address[] validators, uint256[] stakerTokenIDs) returns()
func (_IValidatorPool *IValidatorPoolTransactorSession) RegisterValidators(validators []common.Address, stakerTokenIDs []*big.Int) (*types.Transaction, error) {
	return _IValidatorPool.Contract.RegisterValidators(&_IValidatorPool.TransactOpts, validators, stakerTokenIDs)
}

// ScheduleMaintenance is a paid mutator transaction binding the contract method 0x2380db1a.
//
// Solidity: function scheduleMaintenance() returns()
func (_IValidatorPool *IValidatorPoolTransactor) ScheduleMaintenance(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IValidatorPool.contract.Transact(opts, "scheduleMaintenance")
}

// ScheduleMaintenance is a paid mutator transaction binding the contract method 0x2380db1a.
//
// Solidity: function scheduleMaintenance() returns()
func (_IValidatorPool *IValidatorPoolSession) ScheduleMaintenance() (*types.Transaction, error) {
	return _IValidatorPool.Contract.ScheduleMaintenance(&_IValidatorPool.TransactOpts)
}

// ScheduleMaintenance is a paid mutator transaction binding the contract method 0x2380db1a.
//
// Solidity: function scheduleMaintenance() returns()
func (_IValidatorPool *IValidatorPoolTransactorSession) ScheduleMaintenance() (*types.Transaction, error) {
	return _IValidatorPool.Contract.ScheduleMaintenance(&_IValidatorPool.TransactOpts)
}

// SetETHDKG is a paid mutator transaction binding the contract method 0x8785a460.
//
// Solidity: function setETHDKG(address _address) returns()
func (_IValidatorPool *IValidatorPoolTransactor) SetETHDKG(opts *bind.TransactOpts, _address common.Address) (*types.Transaction, error) {
	return _IValidatorPool.contract.Transact(opts, "setETHDKG", _address)
}

// SetETHDKG is a paid mutator transaction binding the contract method 0x8785a460.
//
// Solidity: function setETHDKG(address _address) returns()
func (_IValidatorPool *IValidatorPoolSession) SetETHDKG(_address common.Address) (*types.Transaction, error) {
	return _IValidatorPool.Contract.SetETHDKG(&_IValidatorPool.TransactOpts, _address)
}

// SetETHDKG is a paid mutator transaction binding the contract method 0x8785a460.
//
// Solidity: function setETHDKG(address _address) returns()
func (_IValidatorPool *IValidatorPoolTransactorSession) SetETHDKG(_address common.Address) (*types.Transaction, error) {
	return _IValidatorPool.Contract.SetETHDKG(&_IValidatorPool.TransactOpts, _address)
}

// SetLocation is a paid mutator transaction binding the contract method 0x827bfbdf.
//
// Solidity: function setLocation(string ip) returns()
func (_IValidatorPool *IValidatorPoolTransactor) SetLocation(opts *bind.TransactOpts, ip string) (*types.Transaction, error) {
	return _IValidatorPool.contract.Transact(opts, "setLocation", ip)
}

// SetLocation is a paid mutator transaction binding the contract method 0x827bfbdf.
//
// Solidity: function setLocation(string ip) returns()
func (_IValidatorPool *IValidatorPoolSession) SetLocation(ip string) (*types.Transaction, error) {
	return _IValidatorPool.Contract.SetLocation(&_IValidatorPool.TransactOpts, ip)
}

// SetLocation is a paid mutator transaction binding the contract method 0x827bfbdf.
//
// Solidity: function setLocation(string ip) returns()
func (_IValidatorPool *IValidatorPoolTransactorSession) SetLocation(ip string) (*types.Transaction, error) {
	return _IValidatorPool.Contract.SetLocation(&_IValidatorPool.TransactOpts, ip)
}

// SetMaxNumValidators is a paid mutator transaction binding the contract method 0x6c0da0b4.
//
// Solidity: function setMaxNumValidators(uint256 maxNumValidators_) returns()
func (_IValidatorPool *IValidatorPoolTransactor) SetMaxNumValidators(opts *bind.TransactOpts, maxNumValidators_ *big.Int) (*types.Transaction, error) {
	return _IValidatorPool.contract.Transact(opts, "setMaxNumValidators", maxNumValidators_)
}

// SetMaxNumValidators is a paid mutator transaction binding the contract method 0x6c0da0b4.
//
// Solidity: function setMaxNumValidators(uint256 maxNumValidators_) returns()
func (_IValidatorPool *IValidatorPoolSession) SetMaxNumValidators(maxNumValidators_ *big.Int) (*types.Transaction, error) {
	return _IValidatorPool.Contract.SetMaxNumValidators(&_IValidatorPool.TransactOpts, maxNumValidators_)
}

// SetMaxNumValidators is a paid mutator transaction binding the contract method 0x6c0da0b4.
//
// Solidity: function setMaxNumValidators(uint256 maxNumValidators_) returns()
func (_IValidatorPool *IValidatorPoolTransactorSession) SetMaxNumValidators(maxNumValidators_ *big.Int) (*types.Transaction, error) {
	return _IValidatorPool.Contract.SetMaxNumValidators(&_IValidatorPool.TransactOpts, maxNumValidators_)
}

// SetSnapshot is a paid mutator transaction binding the contract method 0xf5fe902f.
//
// Solidity: function setSnapshot(address _address) returns()
func (_IValidatorPool *IValidatorPoolTransactor) SetSnapshot(opts *bind.TransactOpts, _address common.Address) (*types.Transaction, error) {
	return _IValidatorPool.contract.Transact(opts, "setSnapshot", _address)
}

// SetSnapshot is a paid mutator transaction binding the contract method 0xf5fe902f.
//
// Solidity: function setSnapshot(address _address) returns()
func (_IValidatorPool *IValidatorPoolSession) SetSnapshot(_address common.Address) (*types.Transaction, error) {
	return _IValidatorPool.Contract.SetSnapshot(&_IValidatorPool.TransactOpts, _address)
}

// SetSnapshot is a paid mutator transaction binding the contract method 0xf5fe902f.
//
// Solidity: function setSnapshot(address _address) returns()
func (_IValidatorPool *IValidatorPoolTransactorSession) SetSnapshot(_address common.Address) (*types.Transaction, error) {
	return _IValidatorPool.Contract.SetSnapshot(&_IValidatorPool.TransactOpts, _address)
}

// SetStakeAmount is a paid mutator transaction binding the contract method 0x43808c50.
//
// Solidity: function setStakeAmount(uint256 stakeAmount_) returns()
func (_IValidatorPool *IValidatorPoolTransactor) SetStakeAmount(opts *bind.TransactOpts, stakeAmount_ *big.Int) (*types.Transaction, error) {
	return _IValidatorPool.contract.Transact(opts, "setStakeAmount", stakeAmount_)
}

// SetStakeAmount is a paid mutator transaction binding the contract method 0x43808c50.
//
// Solidity: function setStakeAmount(uint256 stakeAmount_) returns()
func (_IValidatorPool *IValidatorPoolSession) SetStakeAmount(stakeAmount_ *big.Int) (*types.Transaction, error) {
	return _IValidatorPool.Contract.SetStakeAmount(&_IValidatorPool.TransactOpts, stakeAmount_)
}

// SetStakeAmount is a paid mutator transaction binding the contract method 0x43808c50.
//
// Solidity: function setStakeAmount(uint256 stakeAmount_) returns()
func (_IValidatorPool *IValidatorPoolTransactorSession) SetStakeAmount(stakeAmount_ *big.Int) (*types.Transaction, error) {
	return _IValidatorPool.Contract.SetStakeAmount(&_IValidatorPool.TransactOpts, stakeAmount_)
}

// UnregisterAllValidators is a paid mutator transaction binding the contract method 0xf6442e24.
//
// Solidity: function unregisterAllValidators() returns()
func (_IValidatorPool *IValidatorPoolTransactor) UnregisterAllValidators(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IValidatorPool.contract.Transact(opts, "unregisterAllValidators")
}

// UnregisterAllValidators is a paid mutator transaction binding the contract method 0xf6442e24.
//
// Solidity: function unregisterAllValidators() returns()
func (_IValidatorPool *IValidatorPoolSession) UnregisterAllValidators() (*types.Transaction, error) {
	return _IValidatorPool.Contract.UnregisterAllValidators(&_IValidatorPool.TransactOpts)
}

// UnregisterAllValidators is a paid mutator transaction binding the contract method 0xf6442e24.
//
// Solidity: function unregisterAllValidators() returns()
func (_IValidatorPool *IValidatorPoolTransactorSession) UnregisterAllValidators() (*types.Transaction, error) {
	return _IValidatorPool.Contract.UnregisterAllValidators(&_IValidatorPool.TransactOpts)
}

// UnregisterValidators is a paid mutator transaction binding the contract method 0xc6e86ad6.
//
// Solidity: function unregisterValidators(address[] validators) returns()
func (_IValidatorPool *IValidatorPoolTransactor) UnregisterValidators(opts *bind.TransactOpts, validators []common.Address) (*types.Transaction, error) {
	return _IValidatorPool.contract.Transact(opts, "unregisterValidators", validators)
}

// UnregisterValidators is a paid mutator transaction binding the contract method 0xc6e86ad6.
//
// Solidity: function unregisterValidators(address[] validators) returns()
func (_IValidatorPool *IValidatorPoolSession) UnregisterValidators(validators []common.Address) (*types.Transaction, error) {
	return _IValidatorPool.Contract.UnregisterValidators(&_IValidatorPool.TransactOpts, validators)
}

// UnregisterValidators is a paid mutator transaction binding the contract method 0xc6e86ad6.
//
// Solidity: function unregisterValidators(address[] validators) returns()
func (_IValidatorPool *IValidatorPoolTransactorSession) UnregisterValidators(validators []common.Address) (*types.Transaction, error) {
	return _IValidatorPool.Contract.UnregisterValidators(&_IValidatorPool.TransactOpts, validators)
}

// IValidatorPoolEventsMetaData contains all meta data concerning the IValidatorPoolEvents contract.
var IValidatorPoolEventsMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[],\"name\":\"MaintenanceScheduled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validatorNFT\",\"type\":\"uint256\"}],\"name\":\"ValidatorJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeNFT\",\"type\":\"uint256\"}],\"name\":\"ValidatorLeft\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ValidatorMajorSlashed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeNFT\",\"type\":\"uint256\"}],\"name\":\"ValidatorMinorSlashed\",\"type\":\"event\"}]",
}

// IValidatorPoolEventsABI is the input ABI used to generate the binding from.
// Deprecated: Use IValidatorPoolEventsMetaData.ABI instead.
var IValidatorPoolEventsABI = IValidatorPoolEventsMetaData.ABI

// IValidatorPoolEvents is an auto generated Go binding around an Ethereum contract.
type IValidatorPoolEvents struct {
	IValidatorPoolEventsCaller     // Read-only binding to the contract
	IValidatorPoolEventsTransactor // Write-only binding to the contract
	IValidatorPoolEventsFilterer   // Log filterer for contract events
}

// IValidatorPoolEventsCaller is an auto generated read-only Go binding around an Ethereum contract.
type IValidatorPoolEventsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IValidatorPoolEventsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IValidatorPoolEventsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IValidatorPoolEventsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IValidatorPoolEventsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IValidatorPoolEventsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IValidatorPoolEventsSession struct {
	Contract     *IValidatorPoolEvents // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// IValidatorPoolEventsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IValidatorPoolEventsCallerSession struct {
	Contract *IValidatorPoolEventsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// IValidatorPoolEventsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IValidatorPoolEventsTransactorSession struct {
	Contract     *IValidatorPoolEventsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// IValidatorPoolEventsRaw is an auto generated low-level Go binding around an Ethereum contract.
type IValidatorPoolEventsRaw struct {
	Contract *IValidatorPoolEvents // Generic contract binding to access the raw methods on
}

// IValidatorPoolEventsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IValidatorPoolEventsCallerRaw struct {
	Contract *IValidatorPoolEventsCaller // Generic read-only contract binding to access the raw methods on
}

// IValidatorPoolEventsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IValidatorPoolEventsTransactorRaw struct {
	Contract *IValidatorPoolEventsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIValidatorPoolEvents creates a new instance of IValidatorPoolEvents, bound to a specific deployed contract.
func NewIValidatorPoolEvents(address common.Address, backend bind.ContractBackend) (*IValidatorPoolEvents, error) {
	contract, err := bindIValidatorPoolEvents(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IValidatorPoolEvents{IValidatorPoolEventsCaller: IValidatorPoolEventsCaller{contract: contract}, IValidatorPoolEventsTransactor: IValidatorPoolEventsTransactor{contract: contract}, IValidatorPoolEventsFilterer: IValidatorPoolEventsFilterer{contract: contract}}, nil
}

// NewIValidatorPoolEventsCaller creates a new read-only instance of IValidatorPoolEvents, bound to a specific deployed contract.
func NewIValidatorPoolEventsCaller(address common.Address, caller bind.ContractCaller) (*IValidatorPoolEventsCaller, error) {
	contract, err := bindIValidatorPoolEvents(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IValidatorPoolEventsCaller{contract: contract}, nil
}

// NewIValidatorPoolEventsTransactor creates a new write-only instance of IValidatorPoolEvents, bound to a specific deployed contract.
func NewIValidatorPoolEventsTransactor(address common.Address, transactor bind.ContractTransactor) (*IValidatorPoolEventsTransactor, error) {
	contract, err := bindIValidatorPoolEvents(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IValidatorPoolEventsTransactor{contract: contract}, nil
}

// NewIValidatorPoolEventsFilterer creates a new log filterer instance of IValidatorPoolEvents, bound to a specific deployed contract.
func NewIValidatorPoolEventsFilterer(address common.Address, filterer bind.ContractFilterer) (*IValidatorPoolEventsFilterer, error) {
	contract, err := bindIValidatorPoolEvents(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IValidatorPoolEventsFilterer{contract: contract}, nil
}

// bindIValidatorPoolEvents binds a generic wrapper to an already deployed contract.
func bindIValidatorPoolEvents(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IValidatorPoolEventsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IValidatorPoolEvents *IValidatorPoolEventsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IValidatorPoolEvents.Contract.IValidatorPoolEventsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IValidatorPoolEvents *IValidatorPoolEventsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IValidatorPoolEvents.Contract.IValidatorPoolEventsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IValidatorPoolEvents *IValidatorPoolEventsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IValidatorPoolEvents.Contract.IValidatorPoolEventsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IValidatorPoolEvents *IValidatorPoolEventsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IValidatorPoolEvents.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IValidatorPoolEvents *IValidatorPoolEventsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IValidatorPoolEvents.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IValidatorPoolEvents *IValidatorPoolEventsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IValidatorPoolEvents.Contract.contract.Transact(opts, method, params...)
}

// IValidatorPoolEventsMaintenanceScheduledIterator is returned from FilterMaintenanceScheduled and is used to iterate over the raw logs and unpacked data for MaintenanceScheduled events raised by the IValidatorPoolEvents contract.
type IValidatorPoolEventsMaintenanceScheduledIterator struct {
	Event *IValidatorPoolEventsMaintenanceScheduled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IValidatorPoolEventsMaintenanceScheduledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IValidatorPoolEventsMaintenanceScheduled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IValidatorPoolEventsMaintenanceScheduled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IValidatorPoolEventsMaintenanceScheduledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IValidatorPoolEventsMaintenanceScheduledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IValidatorPoolEventsMaintenanceScheduled represents a MaintenanceScheduled event raised by the IValidatorPoolEvents contract.
type IValidatorPoolEventsMaintenanceScheduled struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterMaintenanceScheduled is a free log retrieval operation binding the contract event 0xc77f315ab4072b428052ff8f369916ce39f7fa7e925613f3e9b28fe383c565c8.
//
// Solidity: event MaintenanceScheduled()
func (_IValidatorPoolEvents *IValidatorPoolEventsFilterer) FilterMaintenanceScheduled(opts *bind.FilterOpts) (*IValidatorPoolEventsMaintenanceScheduledIterator, error) {

	logs, sub, err := _IValidatorPoolEvents.contract.FilterLogs(opts, "MaintenanceScheduled")
	if err != nil {
		return nil, err
	}
	return &IValidatorPoolEventsMaintenanceScheduledIterator{contract: _IValidatorPoolEvents.contract, event: "MaintenanceScheduled", logs: logs, sub: sub}, nil
}

// WatchMaintenanceScheduled is a free log subscription operation binding the contract event 0xc77f315ab4072b428052ff8f369916ce39f7fa7e925613f3e9b28fe383c565c8.
//
// Solidity: event MaintenanceScheduled()
func (_IValidatorPoolEvents *IValidatorPoolEventsFilterer) WatchMaintenanceScheduled(opts *bind.WatchOpts, sink chan<- *IValidatorPoolEventsMaintenanceScheduled) (event.Subscription, error) {

	logs, sub, err := _IValidatorPoolEvents.contract.WatchLogs(opts, "MaintenanceScheduled")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IValidatorPoolEventsMaintenanceScheduled)
				if err := _IValidatorPoolEvents.contract.UnpackLog(event, "MaintenanceScheduled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMaintenanceScheduled is a log parse operation binding the contract event 0xc77f315ab4072b428052ff8f369916ce39f7fa7e925613f3e9b28fe383c565c8.
//
// Solidity: event MaintenanceScheduled()
func (_IValidatorPoolEvents *IValidatorPoolEventsFilterer) ParseMaintenanceScheduled(log types.Log) (*IValidatorPoolEventsMaintenanceScheduled, error) {
	event := new(IValidatorPoolEventsMaintenanceScheduled)
	if err := _IValidatorPoolEvents.contract.UnpackLog(event, "MaintenanceScheduled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IValidatorPoolEventsValidatorJoinedIterator is returned from FilterValidatorJoined and is used to iterate over the raw logs and unpacked data for ValidatorJoined events raised by the IValidatorPoolEvents contract.
type IValidatorPoolEventsValidatorJoinedIterator struct {
	Event *IValidatorPoolEventsValidatorJoined // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IValidatorPoolEventsValidatorJoinedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IValidatorPoolEventsValidatorJoined)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IValidatorPoolEventsValidatorJoined)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IValidatorPoolEventsValidatorJoinedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IValidatorPoolEventsValidatorJoinedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IValidatorPoolEventsValidatorJoined represents a ValidatorJoined event raised by the IValidatorPoolEvents contract.
type IValidatorPoolEventsValidatorJoined struct {
	Account      common.Address
	ValidatorNFT *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterValidatorJoined is a free log retrieval operation binding the contract event 0xe30848520248cd6b60cf19fe62a302a47e2d2c1c147deea1188e471751557a52.
//
// Solidity: event ValidatorJoined(address indexed account, uint256 validatorNFT)
func (_IValidatorPoolEvents *IValidatorPoolEventsFilterer) FilterValidatorJoined(opts *bind.FilterOpts, account []common.Address) (*IValidatorPoolEventsValidatorJoinedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _IValidatorPoolEvents.contract.FilterLogs(opts, "ValidatorJoined", accountRule)
	if err != nil {
		return nil, err
	}
	return &IValidatorPoolEventsValidatorJoinedIterator{contract: _IValidatorPoolEvents.contract, event: "ValidatorJoined", logs: logs, sub: sub}, nil
}

// WatchValidatorJoined is a free log subscription operation binding the contract event 0xe30848520248cd6b60cf19fe62a302a47e2d2c1c147deea1188e471751557a52.
//
// Solidity: event ValidatorJoined(address indexed account, uint256 validatorNFT)
func (_IValidatorPoolEvents *IValidatorPoolEventsFilterer) WatchValidatorJoined(opts *bind.WatchOpts, sink chan<- *IValidatorPoolEventsValidatorJoined, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _IValidatorPoolEvents.contract.WatchLogs(opts, "ValidatorJoined", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IValidatorPoolEventsValidatorJoined)
				if err := _IValidatorPoolEvents.contract.UnpackLog(event, "ValidatorJoined", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorJoined is a log parse operation binding the contract event 0xe30848520248cd6b60cf19fe62a302a47e2d2c1c147deea1188e471751557a52.
//
// Solidity: event ValidatorJoined(address indexed account, uint256 validatorNFT)
func (_IValidatorPoolEvents *IValidatorPoolEventsFilterer) ParseValidatorJoined(log types.Log) (*IValidatorPoolEventsValidatorJoined, error) {
	event := new(IValidatorPoolEventsValidatorJoined)
	if err := _IValidatorPoolEvents.contract.UnpackLog(event, "ValidatorJoined", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IValidatorPoolEventsValidatorLeftIterator is returned from FilterValidatorLeft and is used to iterate over the raw logs and unpacked data for ValidatorLeft events raised by the IValidatorPoolEvents contract.
type IValidatorPoolEventsValidatorLeftIterator struct {
	Event *IValidatorPoolEventsValidatorLeft // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IValidatorPoolEventsValidatorLeftIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IValidatorPoolEventsValidatorLeft)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IValidatorPoolEventsValidatorLeft)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IValidatorPoolEventsValidatorLeftIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IValidatorPoolEventsValidatorLeftIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IValidatorPoolEventsValidatorLeft represents a ValidatorLeft event raised by the IValidatorPoolEvents contract.
type IValidatorPoolEventsValidatorLeft struct {
	Account  common.Address
	StakeNFT *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterValidatorLeft is a free log retrieval operation binding the contract event 0x33ff7b2beda3cb99406d3401fd9e8d9001b93e74b845cf7346f6e7f70c703e73.
//
// Solidity: event ValidatorLeft(address indexed account, uint256 stakeNFT)
func (_IValidatorPoolEvents *IValidatorPoolEventsFilterer) FilterValidatorLeft(opts *bind.FilterOpts, account []common.Address) (*IValidatorPoolEventsValidatorLeftIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _IValidatorPoolEvents.contract.FilterLogs(opts, "ValidatorLeft", accountRule)
	if err != nil {
		return nil, err
	}
	return &IValidatorPoolEventsValidatorLeftIterator{contract: _IValidatorPoolEvents.contract, event: "ValidatorLeft", logs: logs, sub: sub}, nil
}

// WatchValidatorLeft is a free log subscription operation binding the contract event 0x33ff7b2beda3cb99406d3401fd9e8d9001b93e74b845cf7346f6e7f70c703e73.
//
// Solidity: event ValidatorLeft(address indexed account, uint256 stakeNFT)
func (_IValidatorPoolEvents *IValidatorPoolEventsFilterer) WatchValidatorLeft(opts *bind.WatchOpts, sink chan<- *IValidatorPoolEventsValidatorLeft, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _IValidatorPoolEvents.contract.WatchLogs(opts, "ValidatorLeft", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IValidatorPoolEventsValidatorLeft)
				if err := _IValidatorPoolEvents.contract.UnpackLog(event, "ValidatorLeft", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorLeft is a log parse operation binding the contract event 0x33ff7b2beda3cb99406d3401fd9e8d9001b93e74b845cf7346f6e7f70c703e73.
//
// Solidity: event ValidatorLeft(address indexed account, uint256 stakeNFT)
func (_IValidatorPoolEvents *IValidatorPoolEventsFilterer) ParseValidatorLeft(log types.Log) (*IValidatorPoolEventsValidatorLeft, error) {
	event := new(IValidatorPoolEventsValidatorLeft)
	if err := _IValidatorPoolEvents.contract.UnpackLog(event, "ValidatorLeft", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IValidatorPoolEventsValidatorMajorSlashedIterator is returned from FilterValidatorMajorSlashed and is used to iterate over the raw logs and unpacked data for ValidatorMajorSlashed events raised by the IValidatorPoolEvents contract.
type IValidatorPoolEventsValidatorMajorSlashedIterator struct {
	Event *IValidatorPoolEventsValidatorMajorSlashed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IValidatorPoolEventsValidatorMajorSlashedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IValidatorPoolEventsValidatorMajorSlashed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IValidatorPoolEventsValidatorMajorSlashed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IValidatorPoolEventsValidatorMajorSlashedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IValidatorPoolEventsValidatorMajorSlashedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IValidatorPoolEventsValidatorMajorSlashed represents a ValidatorMajorSlashed event raised by the IValidatorPoolEvents contract.
type IValidatorPoolEventsValidatorMajorSlashed struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterValidatorMajorSlashed is a free log retrieval operation binding the contract event 0xee806478c61c75fc3ec50328b2af43290d1860ef40d5dfbba62ece0e1e3abe9e.
//
// Solidity: event ValidatorMajorSlashed(address indexed account)
func (_IValidatorPoolEvents *IValidatorPoolEventsFilterer) FilterValidatorMajorSlashed(opts *bind.FilterOpts, account []common.Address) (*IValidatorPoolEventsValidatorMajorSlashedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _IValidatorPoolEvents.contract.FilterLogs(opts, "ValidatorMajorSlashed", accountRule)
	if err != nil {
		return nil, err
	}
	return &IValidatorPoolEventsValidatorMajorSlashedIterator{contract: _IValidatorPoolEvents.contract, event: "ValidatorMajorSlashed", logs: logs, sub: sub}, nil
}

// WatchValidatorMajorSlashed is a free log subscription operation binding the contract event 0xee806478c61c75fc3ec50328b2af43290d1860ef40d5dfbba62ece0e1e3abe9e.
//
// Solidity: event ValidatorMajorSlashed(address indexed account)
func (_IValidatorPoolEvents *IValidatorPoolEventsFilterer) WatchValidatorMajorSlashed(opts *bind.WatchOpts, sink chan<- *IValidatorPoolEventsValidatorMajorSlashed, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _IValidatorPoolEvents.contract.WatchLogs(opts, "ValidatorMajorSlashed", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IValidatorPoolEventsValidatorMajorSlashed)
				if err := _IValidatorPoolEvents.contract.UnpackLog(event, "ValidatorMajorSlashed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorMajorSlashed is a log parse operation binding the contract event 0xee806478c61c75fc3ec50328b2af43290d1860ef40d5dfbba62ece0e1e3abe9e.
//
// Solidity: event ValidatorMajorSlashed(address indexed account)
func (_IValidatorPoolEvents *IValidatorPoolEventsFilterer) ParseValidatorMajorSlashed(log types.Log) (*IValidatorPoolEventsValidatorMajorSlashed, error) {
	event := new(IValidatorPoolEventsValidatorMajorSlashed)
	if err := _IValidatorPoolEvents.contract.UnpackLog(event, "ValidatorMajorSlashed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IValidatorPoolEventsValidatorMinorSlashedIterator is returned from FilterValidatorMinorSlashed and is used to iterate over the raw logs and unpacked data for ValidatorMinorSlashed events raised by the IValidatorPoolEvents contract.
type IValidatorPoolEventsValidatorMinorSlashedIterator struct {
	Event *IValidatorPoolEventsValidatorMinorSlashed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IValidatorPoolEventsValidatorMinorSlashedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IValidatorPoolEventsValidatorMinorSlashed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IValidatorPoolEventsValidatorMinorSlashed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IValidatorPoolEventsValidatorMinorSlashedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IValidatorPoolEventsValidatorMinorSlashedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IValidatorPoolEventsValidatorMinorSlashed represents a ValidatorMinorSlashed event raised by the IValidatorPoolEvents contract.
type IValidatorPoolEventsValidatorMinorSlashed struct {
	Account  common.Address
	StakeNFT *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterValidatorMinorSlashed is a free log retrieval operation binding the contract event 0x23f67a6ac6d764dca01e28630334f5b636e2b1928c0a5d5b5428da3f69167208.
//
// Solidity: event ValidatorMinorSlashed(address indexed account, uint256 stakeNFT)
func (_IValidatorPoolEvents *IValidatorPoolEventsFilterer) FilterValidatorMinorSlashed(opts *bind.FilterOpts, account []common.Address) (*IValidatorPoolEventsValidatorMinorSlashedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _IValidatorPoolEvents.contract.FilterLogs(opts, "ValidatorMinorSlashed", accountRule)
	if err != nil {
		return nil, err
	}
	return &IValidatorPoolEventsValidatorMinorSlashedIterator{contract: _IValidatorPoolEvents.contract, event: "ValidatorMinorSlashed", logs: logs, sub: sub}, nil
}

// WatchValidatorMinorSlashed is a free log subscription operation binding the contract event 0x23f67a6ac6d764dca01e28630334f5b636e2b1928c0a5d5b5428da3f69167208.
//
// Solidity: event ValidatorMinorSlashed(address indexed account, uint256 stakeNFT)
func (_IValidatorPoolEvents *IValidatorPoolEventsFilterer) WatchValidatorMinorSlashed(opts *bind.WatchOpts, sink chan<- *IValidatorPoolEventsValidatorMinorSlashed, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _IValidatorPoolEvents.contract.WatchLogs(opts, "ValidatorMinorSlashed", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IValidatorPoolEventsValidatorMinorSlashed)
				if err := _IValidatorPoolEvents.contract.UnpackLog(event, "ValidatorMinorSlashed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorMinorSlashed is a log parse operation binding the contract event 0x23f67a6ac6d764dca01e28630334f5b636e2b1928c0a5d5b5428da3f69167208.
//
// Solidity: event ValidatorMinorSlashed(address indexed account, uint256 stakeNFT)
func (_IValidatorPoolEvents *IValidatorPoolEventsFilterer) ParseValidatorMinorSlashed(log types.Log) (*IValidatorPoolEventsValidatorMinorSlashed, error) {
	event := new(IValidatorPoolEventsValidatorMinorSlashed)
	if err := _IValidatorPoolEvents.contract.UnpackLog(event, "ValidatorMinorSlashed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MadByteMetaData contains all meta data concerning the MadByte contract.
var MadByteMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"madStaking_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minerStaking_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lpStaking_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"foundation_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"to0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"to1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"to2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"to3\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositReceivedBN\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolBalance_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numEth_\",\"type\":\"uint256\"}],\"name\":\"EthtoMB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolBalance_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numMB_\",\"type\":\"uint256\"}],\"name\":\"MBtoEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"numEth\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minEth_\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"numEth\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minEth_\",\"type\":\"uint256\"}],\"name\":\"burnTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"numEth\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"depositTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"to0_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to1_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to2_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to3_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"depositToBN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distribute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minerAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpStakingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"foundationAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositID\",\"type\":\"uint256\"}],\"name\":\"getDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositID\",\"type\":\"uint256\"}],\"name\":\"getDepositOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"to0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to3\",\"type\":\"uint256\"}],\"internalType\":\"structMadByte.BNAddress\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalMadBytesDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minMB_\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nuMB\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minMB_\",\"type\":\"uint256\"}],\"name\":\"mintDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minMB_\",\"type\":\"uint256\"}],\"name\":\"mintTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nuMB\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"foundation_\",\"type\":\"address\"}],\"name\":\"setFoundation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpStaking_\",\"type\":\"address\"}],\"name\":\"setLPStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"madStaking_\",\"type\":\"address\"}],\"name\":\"setMadStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minerStaking_\",\"type\":\"address\"}],\"name\":\"setMinerStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minerStakingSplit_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"madStakingSplit_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpStakingSplit_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee_\",\"type\":\"uint256\"}],\"name\":\"setSplits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"virtualMintDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x6080604052600060075561014d60085561014c60095561014c600a556003600b556000600c556000600d553480156200003757600080fd5b5060405162003565380380620035658339810160408190526200005a91620001e7565b60408051808201825260078152664d61644279746560c81b60208083019182528351808501909452600284526126a160f11b908401528151889391620000a4916003919062000124565b508051620000ba90600490602084019062000124565b5050600580546001600160a01b03199081166001600160a01b03948516179091556002600655601180548216978416979097179096555060128054861694821694909417909355601380548516928416929092179091556014805490931691161790555062000294565b828054620001329062000257565b90600052602060002090601f016020900481019282620001565760008555620001a1565b82601f106200017157805160ff1916838001178555620001a1565b82800160010185558215620001a1579182015b82811115620001a157825182559160200191906001019062000184565b50620001af929150620001b3565b5090565b5b80821115620001af5760008155600101620001b4565b80516001600160a01b0381168114620001e257600080fd5b919050565b600080600080600060a086880312156200020057600080fd5b6200020b86620001ca565b94506200021b60208701620001ca565b93506200022b60408701620001ca565b92506200023b60608701620001ca565b91506200024b60808701620001ca565b90509295509295909350565b600181811c908216806200026c57607f821691505b602082108114156200028e57634e487b7160e01b600052602260045260246000fd5b50919050565b6132c180620002a46000396000f3fe6080604052600436106102195760003560e01c806395d89b411161011d578063abd70aa2116100b0578063cf04ada01161007f578063dd62ed3e11610064578063dd62ed3e14610655578063e4fc6b6d146106a8578063ffaad6a5146106dd57600080fd5b8063cf04ada0146105ca578063db3543f51461063557600080fd5b8063abd70aa214610555578063b3113b2a1461056a578063b390c0ab1461058a578063b6b55f25146105aa57600080fd5b80639f9fb968116100ec5780639f9fb968146104e2578063a0712d6814610502578063a457c2d714610515578063a9059cbb1461053557600080fd5b806395d89b411461046d5780639b057203146104825780639f1d6c19146104a25780639f8a3402146104c257600080fd5b806339509351116101b05780636e9960c31161017f57806370a082311161016457806370a08231146103ea578063767bc1bf1461042d5780637ef5da041461044d57600080fd5b80636e9960c314610393578063704b6c02146103c857600080fd5b8063395093511461032b578063449a52f81461034b57806360f89f191461035e5780636957dc0e1461037e57600080fd5b806323b872dd116101ec57806323b872dd146102bc5780632444b15c146102dc578063313ce567146102fc57806334afbf601461031857600080fd5b806306fdde031461021e578063095ea7b314610249578063142c514e1461027957806318160ddd146102a7575b600080fd5b34801561022a57600080fd5b506102336106fd565b6040516102409190612db2565b60405180910390f35b34801561025557600080fd5b50610269610264366004612e4e565b61078f565b6040519015158152602001610240565b34801561028557600080fd5b50610299610294366004612e4e565b6107a9565b604051908152602001610240565b3480156102b357600080fd5b50600254610299565b3480156102c857600080fd5b506102696102d7366004612e78565b610843565b3480156102e857600080fd5b506102996102f7366004612eb4565b610867565b34801561030857600080fd5b5060405160128152602001610240565b610299610326366004612e4e565b610880565b34801561033757600080fd5b50610269610346366004612e4e565b61088d565b610299610359366004612e4e565b6108d9565b34801561036a57600080fd5b50610299610379366004612eef565b6108e6565b34801561038a57600080fd5b50600d54610299565b34801561039f57600080fd5b5060055460405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610240565b3480156103d457600080fd5b506103e86103e3366004612f11565b6108f2565b005b3480156103f657600080fd5b50610299610405366004612f11565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b34801561043957600080fd5b506103e8610448366004612f2c565b6109b6565b34801561045957600080fd5b506103e8610468366004612f11565b610afb565b34801561047957600080fd5b50610233610bc3565b34801561048e57600080fd5b5061029961049d366004612f5e565b610bd2565b3480156104ae57600080fd5b506103e86104bd366004612f11565b610be8565b3480156104ce57600080fd5b506102996104dd366004612f91565b610cb0565b3480156104ee57600080fd5b506102996104fd366004612fbd565b610cbd565b610299610510366004612fbd565b610d3e565b34801561052157600080fd5b50610269610530366004612e4e565b610d4b565b34801561054157600080fd5b50610269610550366004612e4e565b610e1c565b34801561056157600080fd5b50600754610299565b34801561057657600080fd5b506103e8610585366004612f11565b610e2a565b34801561059657600080fd5b506102996105a5366004612eef565b610ef2565b3480156105b657600080fd5b506102996105c5366004612fbd565b610f00565b3480156105d657600080fd5b506105ea6105e5366004612fbd565b610f0c565b6040805173ffffffffffffffffffffffffffffffffffffffff90931683528151602080850191909152820151838201528101516060808401919091520151608082015260a001610240565b34801561064157600080fd5b506103e8610650366004612f11565b611009565b34801561066157600080fd5b50610299610670366004612fd6565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b3480156106b457600080fd5b506106bd6110d1565b604080519485526020850193909352918301526060820152608001610240565b3480156106e957600080fd5b506102996106f8366004612e4e565b6110ed565b60606003805461070c90613009565b80601f016020809104026020016040519081016040528092919081815260200182805461073890613009565b80156107855780601f1061075a57610100808354040283529160200191610785565b820191906000526020600020905b81548152906001019060200180831161076857829003601f168201915b5050505050905090565b60003361079d8185856110f9565b60019150505b92915050565b60055460009073ffffffffffffffffffffffffffffffffffffffff163314610832576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4d7573742062652061646d696e0000000000000000000000000000000000000060448201526064015b60405180910390fd5b61083c83836112ac565b9392505050565b6000336108518582856114ac565b61085c858585611583565b506001949350505050565b60006108768686868686611836565b9695505050505050565b600061083c838334611a19565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716845290915281205490919061079d90829086906108d4908790613086565b6110f9565b600061083c833484611cc9565b600061083c8383611e06565b60055473ffffffffffffffffffffffffffffffffffffffff163314610973576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4d7573742062652061646d696e000000000000000000000000000000000000006044820152606401610829565b600580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff831617905550565b60055473ffffffffffffffffffffffffffffffffffffffff163314610a37576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4d7573742062652061646d696e000000000000000000000000000000000000006044820152606401610829565b6103e88183610a468688613086565b610a509190613086565b610a5a9190613086565b14610ae7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603560248201527f4d6164427974653a20416c6c207468652073706c69742076616c756573206d7560448201527f73742073756d20746f206d6164556e69744f6e652100000000000000000000006064820152608401610829565b600893909355600991909155600a55600b55565b60055473ffffffffffffffffffffffffffffffffffffffff163314610b7c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4d7573742062652061646d696e000000000000000000000000000000000000006044820152606401610829565b601280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60606004805461070c90613009565b6000610be033858585611e2d565b949350505050565b60055473ffffffffffffffffffffffffffffffffffffffff163314610c69576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4d7573742062652061646d696e000000000000000000000000000000000000006044820152606401610829565b601180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6000610be0848484611fb9565b6000600c54821115610d2b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f4d6164427974653a20496e76616c6964206465706f73697420494421000000006044820152606401610829565b506000908152600e602052604090205490565b60006107a3333484611cc9565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716845290915281205490919083811015610e0f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152608401610829565b61085c82868684036110f9565b60003361079d818585611583565b60055473ffffffffffffffffffffffffffffffffffffffff163314610eab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4d7573742062652061646d696e000000000000000000000000000000000000006044820152606401610829565b601380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600061083c33338585611e2d565b60006107a3338361209f565b6000610f396040518060800160405280600081526020016000815260200160008152602001600081525090565b600c54831115610fa5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f4d6164427974653a20496e76616c6964206465706f73697420494421000000006044820152606401610829565b50506000908152600f6020908152604080832054601083529281902081516080810183528154815260018201549381019390935260028101549183019190915260030154606082015273ffffffffffffffffffffffffffffffffffffffff90911691565b60055473ffffffffffffffffffffffffffffffffffffffff16331461108a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4d7573742062652061646d696e000000000000000000000000000000000000006044820152606401610829565b601480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6000806000806110df612255565b935093509350935090919293565b600061083c838361209f565b73ffffffffffffffffffffffffffffffffffffffff831661119b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610829565b73ffffffffffffffffffffffffffffffffffffffff821661123e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610829565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000823b1561133d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f4d6164427974653a20436f6e7472616374732063616e6e6f74206d616b65204d60448201527f61644279746573206465706f73697473210000000000000000000000000000006064820152608401610829565b600082116113cd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f4d6164427974653a20546865206465706f73697420616d6f756e74206d75737460448201527f2062652067726561746572207468616e207a65726f21000000000000000000006064820152608401610829565b6000600c5460016113de9190613086565b6000818152600e60209081526040808320879055600f909152812080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8816179055600d8054929350859290919061144e908490613086565b9091555050600c81905560405183815273ffffffffffffffffffffffffffffffffffffffff85169082907f5b063c6569a91e8133fc6cd71d31a4ca5c65c652fd53ae093f46107754f085419060200160405180910390a39392505050565b73ffffffffffffffffffffffffffffffffffffffff8381166000908152600160209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461157d5781811015611570576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610829565b61157d84848484036110f9565b50505050565b73ffffffffffffffffffffffffffffffffffffffff8316611626576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610829565b73ffffffffffffffffffffffffffffffffffffffff82166116c9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610829565b73ffffffffffffffffffffffffffffffffffffffff83166000908152602081905260409020548181101561177f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401610829565b73ffffffffffffffffffffffffffffffffffffffff8085166000908152602081905260408082208585039055918516815290812080548492906117c3908490613086565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161182991815260200190565b60405180910390a361157d565b60008082116118c7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f4d6164427974653a20546865206465706f73697420616d6f756e74206d75737460448201527f2062652067726561746572207468616e207a65726f21000000000000000000006064820152608401610829565b6118d0826124ce565b611936576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4d6164427974653a205472616e73666572206661696c656421000000000000006044820152606401610829565b6000600c5460016119479190613086565b6000818152600e6020908152604080832087905580516080810182528b81528083018b81528183018b8152606083018b8152878752601090955292852091518255516001820155905160028201559051600390910155600d805492935085929091906119b4908490613086565b9091555050600c8190556040805188815260208101889052908101869052606081018590526080810184905281907fbc042d1da385bbdd954b3996e43a972c725a235e533042d3cf3ba68dba57a1639060a00160405180910390a29695505050505050565b6000833b15611aaa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f4d6164427974653a20436f6e7472616374732063616e6e6f74206d616b65204d60448201527f61644279746573206465706f73697473210000000000000000000000000000006064820152608401610829565b6004821015611b15576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4d6164427974653a207265717569726573206174206c656173742034205745496044820152606401610829565b611b206004836130cd565b91506000611b3060075484611e06565b905083811015611be8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604b60248201527f4d6164427974653a20636f756c64206e6f74206d696e74206465706f7369742060448201527f77697468206d696e696d756d204d6164427974657320676976656e207468652060648201527f65746865722073656e7421000000000000000000000000000000000000000000608482015260a401610829565b6000600c546001611bf99190613086565b6000818152600e60209081526040808320869055600f909152812080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8a16179055600d80549293508492909190611c69908490613086565b9091555050600c81905560405182815273ffffffffffffffffffffffffffffffffffffffff87169082907f5b063c6569a91e8133fc6cd71d31a4ca5c65c652fd53ae093f46107754f085419060200160405180910390a395945050505050565b60006004831015611d36576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4d6164427974653a207265717569726573206174206c656173742034205745496044820152606401610829565b611d416004846130cd565b600754909350611d518185611e06565b915082821015611de3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f4d6164427974653a20636f756c64206e6f74206d696e74206d696e696d756d2060448201527f4d616442797465730000000000000000000000000000000000000000000000006064820152608401610829565b611ded8482613086565b60078190559050611dfe85836125c2565b509392505050565b6000611e11836126e2565b611e23611e1e8486613086565b6126e2565b61083c9190613108565b600082611ee3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526044602482018190527f4d6164427974653a20546865206e756d626572206f66204d6164427974657320908201527f746f206265206275726e2073686f756c6420626520677265617465722074686160648201527f6e20302100000000000000000000000000000000000000000000000000000000608482015260a401610829565b600754611ef981611ef360025490565b86611fb9565b915082821015611f8b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f4d6164427974653a20436f756c646e2774206275726e20746865206d696e457460448201527f6820616d6f756e740000000000000000000000000000000000000000000000006064820152608401610829565b611f958282613108565b60078190559050611fa6868561275c565b611fb08583612949565b50949350505050565b600081831015612071576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604c60248201527f4d6164427974653a20546865206e756d626572206f6620746f6b656e7320746f60448201527f206265206275726e65642069732067726561746572207468616e20746865205460648201527f6f74616c20537570706c79210000000000000000000000000000000000000000608482015260a401610829565b610be0846120876120828587613108565b612ae5565b61209086612ae5565b61209a9190613108565b612b6a565b6000823b15612130576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f4d6164427974653a20436f6e7472616374732063616e6e6f74206d616b65204d60448201527f61644279746573206465706f73697473210000000000000000000000000000006064820152608401610829565b600082116121c0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f4d6164427974653a20546865206465706f73697420616d6f756e74206d75737460448201527f2062652067726561746572207468616e207a65726f21000000000000000000006064820152608401610829565b6121c9826124ce565b6113cd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f4d6164427974653a204275726e206661696c656420647572696e67207468652060448201527f6465706f736974210000000000000000000000000000000000000000000000006064820152608401610829565b600080600080600160065414156122ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4d757465783a20436f756c646e2774206163717569726520746865206c6f636b60448201527f21000000000000000000000000000000000000000000000000000000000000006064820152608401610829565b600160065560075460006123028247613108565b90506103e8600b5482612315919061311f565b61231f91906130cd565b92506103e860095482612332919061311f565b61233c91906130cd565b94506103e8600a548261234f919061311f565b61235991906130cd565b9350826123668587613086565b6123709190613086565b61237a9082613108565b6014549096506123a09073ffffffffffffffffffffffffffffffffffffffff1684612b80565b6012546123c39073ffffffffffffffffffffffffffffffffffffffff1687612b80565b6011546123e69073ffffffffffffffffffffffffffffffffffffffff1686612b80565b6013546124099073ffffffffffffffffffffffffffffffffffffffff1685612b80565b814710156124bf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604860248201527f4d6164427974653a20416464726573732062616c616e63652073686f756c642060448201527f626520616c776179732067726561746572207468616e2074686520706f6f6c2060648201527f62616c616e636521000000000000000000000000000000000000000000000000608482015260a401610829565b50506002600655929391929091565b600081612584576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526044602482018190527f4d6164427974653a20546865206e756d626572206f66204d6164427974657320908201527f746f206265206275726e2073686f756c6420626520677265617465722074686160648201527f6e20302100000000000000000000000000000000000000000000000000000000608482015260a401610829565b61259960075461259360025490565b84611fb9565b600760008282546125aa9190613108565b909155506125ba9050338361275c565b506001919050565b73ffffffffffffffffffffffffffffffffffffffff821661263f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610829565b80600260008282546126519190613086565b909155505073ffffffffffffffffffffffffffffffffffffffff82166000908152602081905260408120805483929061268b908490613086565b909155505060405181815273ffffffffffffffffffffffffffffffffffffffff8316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b600061273360026126fc68878678326eac90000085612c0e565b612706919061327c565b6127229071016f578c4e0a0610001239056923109ffb90613086565b61272e90619c4061311f565b612c24565b61273e8360c961311f565b61275290696aeec3532e7de04e5e60613086565b6107a39190613108565b73ffffffffffffffffffffffffffffffffffffffff82166127ff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610829565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260208190526040902054818110156128b5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f63650000000000000000000000000000000000000000000000000000000000006064820152608401610829565b73ffffffffffffffffffffffffffffffffffffffff831660009081526020819052604081208383039055600280548492906128f1908490613108565b909155505060405182815260009073ffffffffffffffffffffffffffffffffffffffff8516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b80612952575050565b73ffffffffffffffffffffffffffffffffffffffff82166129f5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603360248201527f457468536166655472616e736665723a2063616e6e6f74207472616e7366657260448201527f2045544820746f206164647265737320307830000000000000000000000000006064820152608401610829565b604051829060009073ffffffffffffffffffffffffffffffffffffffff83169084908381818185875af1925050503d8060008114612a4f576040519150601f19603f3d011682016040523d82523d6000602084013e612a54565b606091505b505090508061157d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f457468536166655472616e736665723a205472616e73666572206661696c656460448201527f2e000000000000000000000000000000000000000000000000000000000000006064820152608401610829565b60006101916aa6ad4a39178da801881960612b41612b0e856a01aaaeaf658ec6babcbcc061311f565b612b1960028761327c565b612b379073b1ccb5245c201cfb692f9ee5debda1883be3b090613086565b6127229190613108565b612b4c8560c961311f565b612b569190613086565b612b609190613108565b6107a391906130cd565b6000818311612b7a5750816107a3565b50919050565b73ffffffffffffffffffffffffffffffffffffffff82166399a89ecc82602a6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815260ff90911660048201526024016000604051808303818588803b158015612bf157600080fd5b505af1158015612c05573d6000803e3d6000fd5b50505050505050565b6000612c1a8383612b6a565b611e238484612da2565b600081612c3357506000919050565b506001817001000000000000000000000000000000008110612c5a5760409190911b9060801c5b680100000000000000008110612c755760209190911b9060401c5b6401000000008110612c8c5760109190911b9060201c5b620100008110612ca15760089190911b9060101c5b6101008110612cb55760049190911b9060081c5b60108110612cc85760029190911b9060041c5b60088110612cd857600182901b91505b6001828481612ce957612ce961309e565b048301901c91506001828481612d0157612d0161309e565b048301901c91506001828481612d1957612d1961309e565b048301901c91506001828481612d3157612d3161309e565b048301901c91506001828481612d4957612d4961309e565b048301901c91506001828481612d6157612d6161309e565b048301901c91506001828481612d7957612d7961309e565b048301901c91506000828481612d9157612d9161309e565b0490508083101561083c5782610be0565b6000818310612b7a5750816107a3565b600060208083528351808285015260005b81811015612ddf57858101830151858201604001528201612dc3565b81811115612df1576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b803573ffffffffffffffffffffffffffffffffffffffff81168114612e4957600080fd5b919050565b60008060408385031215612e6157600080fd5b612e6a83612e25565b946020939093013593505050565b600080600060608486031215612e8d57600080fd5b612e9684612e25565b9250612ea460208501612e25565b9150604084013590509250925092565b600080600080600060a08688031215612ecc57600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b60008060408385031215612f0257600080fd5b50508035926020909101359150565b600060208284031215612f2357600080fd5b61083c82612e25565b60008060008060808587031215612f4257600080fd5b5050823594602084013594506040840135936060013592509050565b600080600060608486031215612f7357600080fd5b612f7c84612e25565b95602085013595506040909401359392505050565b600080600060608486031215612fa657600080fd5b505081359360208301359350604090920135919050565b600060208284031215612fcf57600080fd5b5035919050565b60008060408385031215612fe957600080fd5b612ff283612e25565b915061300060208401612e25565b90509250929050565b600181811c9082168061301d57607f821691505b60208210811415612b7a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000821982111561309957613099613057565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082613103577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60008282101561311a5761311a613057565b500390565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561315757613157613057565b500290565b600181815b808511156131b557817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561319b5761319b613057565b808516156131a857918102915b93841c9390800290613161565b509250929050565b6000826131cc575060016107a3565b816131d9575060006107a3565b81600181146131ef57600281146131f957613215565b60019150506107a3565b60ff84111561320a5761320a613057565b50506001821b6107a3565b5060208310610133831016604e8410600b8410161715613238575081810a6107a3565b613242838361315c565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561327457613274613057565b029392505050565b600061083c60ff8416836131bd56fea2646970667358221220b012fdb046bc2128799a186e92463b247ea98f6b9db21134fff35707be7c4eee64736f6c634300080b0033",
}

// MadByteABI is the input ABI used to generate the binding from.
// Deprecated: Use MadByteMetaData.ABI instead.
var MadByteABI = MadByteMetaData.ABI

// MadByteBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MadByteMetaData.Bin instead.
var MadByteBin = MadByteMetaData.Bin

// DeployMadByte deploys a new Ethereum contract, binding an instance of MadByte to it.
func DeployMadByte(auth *bind.TransactOpts, backend bind.ContractBackend, admin_ common.Address, madStaking_ common.Address, minerStaking_ common.Address, lpStaking_ common.Address, foundation_ common.Address) (common.Address, *types.Transaction, *MadByte, error) {
	parsed, err := MadByteMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MadByteBin), backend, admin_, madStaking_, minerStaking_, lpStaking_, foundation_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MadByte{MadByteCaller: MadByteCaller{contract: contract}, MadByteTransactor: MadByteTransactor{contract: contract}, MadByteFilterer: MadByteFilterer{contract: contract}}, nil
}

// MadByte is an auto generated Go binding around an Ethereum contract.
type MadByte struct {
	MadByteCaller     // Read-only binding to the contract
	MadByteTransactor // Write-only binding to the contract
	MadByteFilterer   // Log filterer for contract events
}

// MadByteCaller is an auto generated read-only Go binding around an Ethereum contract.
type MadByteCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MadByteTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MadByteTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MadByteFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MadByteFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MadByteSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MadByteSession struct {
	Contract     *MadByte          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MadByteCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MadByteCallerSession struct {
	Contract *MadByteCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// MadByteTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MadByteTransactorSession struct {
	Contract     *MadByteTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// MadByteRaw is an auto generated low-level Go binding around an Ethereum contract.
type MadByteRaw struct {
	Contract *MadByte // Generic contract binding to access the raw methods on
}

// MadByteCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MadByteCallerRaw struct {
	Contract *MadByteCaller // Generic read-only contract binding to access the raw methods on
}

// MadByteTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MadByteTransactorRaw struct {
	Contract *MadByteTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMadByte creates a new instance of MadByte, bound to a specific deployed contract.
func NewMadByte(address common.Address, backend bind.ContractBackend) (*MadByte, error) {
	contract, err := bindMadByte(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MadByte{MadByteCaller: MadByteCaller{contract: contract}, MadByteTransactor: MadByteTransactor{contract: contract}, MadByteFilterer: MadByteFilterer{contract: contract}}, nil
}

// NewMadByteCaller creates a new read-only instance of MadByte, bound to a specific deployed contract.
func NewMadByteCaller(address common.Address, caller bind.ContractCaller) (*MadByteCaller, error) {
	contract, err := bindMadByte(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MadByteCaller{contract: contract}, nil
}

// NewMadByteTransactor creates a new write-only instance of MadByte, bound to a specific deployed contract.
func NewMadByteTransactor(address common.Address, transactor bind.ContractTransactor) (*MadByteTransactor, error) {
	contract, err := bindMadByte(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MadByteTransactor{contract: contract}, nil
}

// NewMadByteFilterer creates a new log filterer instance of MadByte, bound to a specific deployed contract.
func NewMadByteFilterer(address common.Address, filterer bind.ContractFilterer) (*MadByteFilterer, error) {
	contract, err := bindMadByte(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MadByteFilterer{contract: contract}, nil
}

// bindMadByte binds a generic wrapper to an already deployed contract.
func bindMadByte(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MadByteABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MadByte *MadByteRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MadByte.Contract.MadByteCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MadByte *MadByteRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MadByte.Contract.MadByteTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MadByte *MadByteRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MadByte.Contract.MadByteTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MadByte *MadByteCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MadByte.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MadByte *MadByteTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MadByte.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MadByte *MadByteTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MadByte.Contract.contract.Transact(opts, method, params...)
}

// EthtoMB is a free data retrieval call binding the contract method 0x60f89f19.
//
// Solidity: function EthtoMB(uint256 poolBalance_, uint256 numEth_) pure returns(uint256)
func (_MadByte *MadByteCaller) EthtoMB(opts *bind.CallOpts, poolBalance_ *big.Int, numEth_ *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _MadByte.contract.Call(opts, &out, "EthtoMB", poolBalance_, numEth_)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EthtoMB is a free data retrieval call binding the contract method 0x60f89f19.
//
// Solidity: function EthtoMB(uint256 poolBalance_, uint256 numEth_) pure returns(uint256)
func (_MadByte *MadByteSession) EthtoMB(poolBalance_ *big.Int, numEth_ *big.Int) (*big.Int, error) {
	return _MadByte.Contract.EthtoMB(&_MadByte.CallOpts, poolBalance_, numEth_)
}

// EthtoMB is a free data retrieval call binding the contract method 0x60f89f19.
//
// Solidity: function EthtoMB(uint256 poolBalance_, uint256 numEth_) pure returns(uint256)
func (_MadByte *MadByteCallerSession) EthtoMB(poolBalance_ *big.Int, numEth_ *big.Int) (*big.Int, error) {
	return _MadByte.Contract.EthtoMB(&_MadByte.CallOpts, poolBalance_, numEth_)
}

// MBtoEth is a free data retrieval call binding the contract method 0x9f8a3402.
//
// Solidity: function MBtoEth(uint256 poolBalance_, uint256 totalSupply_, uint256 numMB_) pure returns(uint256 numEth)
func (_MadByte *MadByteCaller) MBtoEth(opts *bind.CallOpts, poolBalance_ *big.Int, totalSupply_ *big.Int, numMB_ *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _MadByte.contract.Call(opts, &out, "MBtoEth", poolBalance_, totalSupply_, numMB_)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MBtoEth is a free data retrieval call binding the contract method 0x9f8a3402.
//
// Solidity: function MBtoEth(uint256 poolBalance_, uint256 totalSupply_, uint256 numMB_) pure returns(uint256 numEth)
func (_MadByte *MadByteSession) MBtoEth(poolBalance_ *big.Int, totalSupply_ *big.Int, numMB_ *big.Int) (*big.Int, error) {
	return _MadByte.Contract.MBtoEth(&_MadByte.CallOpts, poolBalance_, totalSupply_, numMB_)
}

// MBtoEth is a free data retrieval call binding the contract method 0x9f8a3402.
//
// Solidity: function MBtoEth(uint256 poolBalance_, uint256 totalSupply_, uint256 numMB_) pure returns(uint256 numEth)
func (_MadByte *MadByteCallerSession) MBtoEth(poolBalance_ *big.Int, totalSupply_ *big.Int, numMB_ *big.Int) (*big.Int, error) {
	return _MadByte.Contract.MBtoEth(&_MadByte.CallOpts, poolBalance_, totalSupply_, numMB_)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_MadByte *MadByteCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _MadByte.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_MadByte *MadByteSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _MadByte.Contract.Allowance(&_MadByte.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_MadByte *MadByteCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _MadByte.Contract.Allowance(&_MadByte.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_MadByte *MadByteCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _MadByte.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_MadByte *MadByteSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _MadByte.Contract.BalanceOf(&_MadByte.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_MadByte *MadByteCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _MadByte.Contract.BalanceOf(&_MadByte.CallOpts, account)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_MadByte *MadByteCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _MadByte.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_MadByte *MadByteSession) Decimals() (uint8, error) {
	return _MadByte.Contract.Decimals(&_MadByte.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_MadByte *MadByteCallerSession) Decimals() (uint8, error) {
	return _MadByte.Contract.Decimals(&_MadByte.CallOpts)
}

// GetAdmin is a free data retrieval call binding the contract method 0x6e9960c3.
//
// Solidity: function getAdmin() view returns(address)
func (_MadByte *MadByteCaller) GetAdmin(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MadByte.contract.Call(opts, &out, "getAdmin")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetAdmin is a free data retrieval call binding the contract method 0x6e9960c3.
//
// Solidity: function getAdmin() view returns(address)
func (_MadByte *MadByteSession) GetAdmin() (common.Address, error) {
	return _MadByte.Contract.GetAdmin(&_MadByte.CallOpts)
}

// GetAdmin is a free data retrieval call binding the contract method 0x6e9960c3.
//
// Solidity: function getAdmin() view returns(address)
func (_MadByte *MadByteCallerSession) GetAdmin() (common.Address, error) {
	return _MadByte.Contract.GetAdmin(&_MadByte.CallOpts)
}

// GetDeposit is a free data retrieval call binding the contract method 0x9f9fb968.
//
// Solidity: function getDeposit(uint256 depositID) view returns(uint256)
func (_MadByte *MadByteCaller) GetDeposit(opts *bind.CallOpts, depositID *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _MadByte.contract.Call(opts, &out, "getDeposit", depositID)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetDeposit is a free data retrieval call binding the contract method 0x9f9fb968.
//
// Solidity: function getDeposit(uint256 depositID) view returns(uint256)
func (_MadByte *MadByteSession) GetDeposit(depositID *big.Int) (*big.Int, error) {
	return _MadByte.Contract.GetDeposit(&_MadByte.CallOpts, depositID)
}

// GetDeposit is a free data retrieval call binding the contract method 0x9f9fb968.
//
// Solidity: function getDeposit(uint256 depositID) view returns(uint256)
func (_MadByte *MadByteCallerSession) GetDeposit(depositID *big.Int) (*big.Int, error) {
	return _MadByte.Contract.GetDeposit(&_MadByte.CallOpts, depositID)
}

// GetDepositOwner is a free data retrieval call binding the contract method 0xcf04ada0.
//
// Solidity: function getDepositOwner(uint256 depositID) view returns(address, (uint256,uint256,uint256,uint256))
func (_MadByte *MadByteCaller) GetDepositOwner(opts *bind.CallOpts, depositID *big.Int) (common.Address, MadByteBNAddress, error) {
	var out []interface{}
	err := _MadByte.contract.Call(opts, &out, "getDepositOwner", depositID)

	if err != nil {
		return *new(common.Address), *new(MadByteBNAddress), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	out1 := *abi.ConvertType(out[1], new(MadByteBNAddress)).(*MadByteBNAddress)

	return out0, out1, err

}

// GetDepositOwner is a free data retrieval call binding the contract method 0xcf04ada0.
//
// Solidity: function getDepositOwner(uint256 depositID) view returns(address, (uint256,uint256,uint256,uint256))
func (_MadByte *MadByteSession) GetDepositOwner(depositID *big.Int) (common.Address, MadByteBNAddress, error) {
	return _MadByte.Contract.GetDepositOwner(&_MadByte.CallOpts, depositID)
}

// GetDepositOwner is a free data retrieval call binding the contract method 0xcf04ada0.
//
// Solidity: function getDepositOwner(uint256 depositID) view returns(address, (uint256,uint256,uint256,uint256))
func (_MadByte *MadByteCallerSession) GetDepositOwner(depositID *big.Int) (common.Address, MadByteBNAddress, error) {
	return _MadByte.Contract.GetDepositOwner(&_MadByte.CallOpts, depositID)
}

// GetPoolBalance is a free data retrieval call binding the contract method 0xabd70aa2.
//
// Solidity: function getPoolBalance() view returns(uint256)
func (_MadByte *MadByteCaller) GetPoolBalance(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _MadByte.contract.Call(opts, &out, "getPoolBalance")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPoolBalance is a free data retrieval call binding the contract method 0xabd70aa2.
//
// Solidity: function getPoolBalance() view returns(uint256)
func (_MadByte *MadByteSession) GetPoolBalance() (*big.Int, error) {
	return _MadByte.Contract.GetPoolBalance(&_MadByte.CallOpts)
}

// GetPoolBalance is a free data retrieval call binding the contract method 0xabd70aa2.
//
// Solidity: function getPoolBalance() view returns(uint256)
func (_MadByte *MadByteCallerSession) GetPoolBalance() (*big.Int, error) {
	return _MadByte.Contract.GetPoolBalance(&_MadByte.CallOpts)
}

// GetTotalMadBytesDeposited is a free data retrieval call binding the contract method 0x6957dc0e.
//
// Solidity: function getTotalMadBytesDeposited() view returns(uint256)
func (_MadByte *MadByteCaller) GetTotalMadBytesDeposited(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _MadByte.contract.Call(opts, &out, "getTotalMadBytesDeposited")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalMadBytesDeposited is a free data retrieval call binding the contract method 0x6957dc0e.
//
// Solidity: function getTotalMadBytesDeposited() view returns(uint256)
func (_MadByte *MadByteSession) GetTotalMadBytesDeposited() (*big.Int, error) {
	return _MadByte.Contract.GetTotalMadBytesDeposited(&_MadByte.CallOpts)
}

// GetTotalMadBytesDeposited is a free data retrieval call binding the contract method 0x6957dc0e.
//
// Solidity: function getTotalMadBytesDeposited() view returns(uint256)
func (_MadByte *MadByteCallerSession) GetTotalMadBytesDeposited() (*big.Int, error) {
	return _MadByte.Contract.GetTotalMadBytesDeposited(&_MadByte.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_MadByte *MadByteCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _MadByte.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_MadByte *MadByteSession) Name() (string, error) {
	return _MadByte.Contract.Name(&_MadByte.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_MadByte *MadByteCallerSession) Name() (string, error) {
	return _MadByte.Contract.Name(&_MadByte.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_MadByte *MadByteCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _MadByte.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_MadByte *MadByteSession) Symbol() (string, error) {
	return _MadByte.Contract.Symbol(&_MadByte.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_MadByte *MadByteCallerSession) Symbol() (string, error) {
	return _MadByte.Contract.Symbol(&_MadByte.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_MadByte *MadByteCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _MadByte.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_MadByte *MadByteSession) TotalSupply() (*big.Int, error) {
	return _MadByte.Contract.TotalSupply(&_MadByte.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_MadByte *MadByteCallerSession) TotalSupply() (*big.Int, error) {
	return _MadByte.Contract.TotalSupply(&_MadByte.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_MadByte *MadByteTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MadByte.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_MadByte *MadByteSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.Approve(&_MadByte.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_MadByte *MadByteTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.Approve(&_MadByte.TransactOpts, spender, amount)
}

// Burn is a paid mutator transaction binding the contract method 0xb390c0ab.
//
// Solidity: function burn(uint256 amount_, uint256 minEth_) returns(uint256 numEth)
func (_MadByte *MadByteTransactor) Burn(opts *bind.TransactOpts, amount_ *big.Int, minEth_ *big.Int) (*types.Transaction, error) {
	return _MadByte.contract.Transact(opts, "burn", amount_, minEth_)
}

// Burn is a paid mutator transaction binding the contract method 0xb390c0ab.
//
// Solidity: function burn(uint256 amount_, uint256 minEth_) returns(uint256 numEth)
func (_MadByte *MadByteSession) Burn(amount_ *big.Int, minEth_ *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.Burn(&_MadByte.TransactOpts, amount_, minEth_)
}

// Burn is a paid mutator transaction binding the contract method 0xb390c0ab.
//
// Solidity: function burn(uint256 amount_, uint256 minEth_) returns(uint256 numEth)
func (_MadByte *MadByteTransactorSession) Burn(amount_ *big.Int, minEth_ *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.Burn(&_MadByte.TransactOpts, amount_, minEth_)
}

// BurnTo is a paid mutator transaction binding the contract method 0x9b057203.
//
// Solidity: function burnTo(address to_, uint256 amount_, uint256 minEth_) returns(uint256 numEth)
func (_MadByte *MadByteTransactor) BurnTo(opts *bind.TransactOpts, to_ common.Address, amount_ *big.Int, minEth_ *big.Int) (*types.Transaction, error) {
	return _MadByte.contract.Transact(opts, "burnTo", to_, amount_, minEth_)
}

// BurnTo is a paid mutator transaction binding the contract method 0x9b057203.
//
// Solidity: function burnTo(address to_, uint256 amount_, uint256 minEth_) returns(uint256 numEth)
func (_MadByte *MadByteSession) BurnTo(to_ common.Address, amount_ *big.Int, minEth_ *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.BurnTo(&_MadByte.TransactOpts, to_, amount_, minEth_)
}

// BurnTo is a paid mutator transaction binding the contract method 0x9b057203.
//
// Solidity: function burnTo(address to_, uint256 amount_, uint256 minEth_) returns(uint256 numEth)
func (_MadByte *MadByteTransactorSession) BurnTo(to_ common.Address, amount_ *big.Int, minEth_ *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.BurnTo(&_MadByte.TransactOpts, to_, amount_, minEth_)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_MadByte *MadByteTransactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _MadByte.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_MadByte *MadByteSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.DecreaseAllowance(&_MadByte.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_MadByte *MadByteTransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.DecreaseAllowance(&_MadByte.TransactOpts, spender, subtractedValue)
}

// Deposit is a paid mutator transaction binding the contract method 0xb6b55f25.
//
// Solidity: function deposit(uint256 amount_) returns(uint256)
func (_MadByte *MadByteTransactor) Deposit(opts *bind.TransactOpts, amount_ *big.Int) (*types.Transaction, error) {
	return _MadByte.contract.Transact(opts, "deposit", amount_)
}

// Deposit is a paid mutator transaction binding the contract method 0xb6b55f25.
//
// Solidity: function deposit(uint256 amount_) returns(uint256)
func (_MadByte *MadByteSession) Deposit(amount_ *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.Deposit(&_MadByte.TransactOpts, amount_)
}

// Deposit is a paid mutator transaction binding the contract method 0xb6b55f25.
//
// Solidity: function deposit(uint256 amount_) returns(uint256)
func (_MadByte *MadByteTransactorSession) Deposit(amount_ *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.Deposit(&_MadByte.TransactOpts, amount_)
}

// DepositTo is a paid mutator transaction binding the contract method 0xffaad6a5.
//
// Solidity: function depositTo(address to_, uint256 amount_) returns(uint256)
func (_MadByte *MadByteTransactor) DepositTo(opts *bind.TransactOpts, to_ common.Address, amount_ *big.Int) (*types.Transaction, error) {
	return _MadByte.contract.Transact(opts, "depositTo", to_, amount_)
}

// DepositTo is a paid mutator transaction binding the contract method 0xffaad6a5.
//
// Solidity: function depositTo(address to_, uint256 amount_) returns(uint256)
func (_MadByte *MadByteSession) DepositTo(to_ common.Address, amount_ *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.DepositTo(&_MadByte.TransactOpts, to_, amount_)
}

// DepositTo is a paid mutator transaction binding the contract method 0xffaad6a5.
//
// Solidity: function depositTo(address to_, uint256 amount_) returns(uint256)
func (_MadByte *MadByteTransactorSession) DepositTo(to_ common.Address, amount_ *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.DepositTo(&_MadByte.TransactOpts, to_, amount_)
}

// DepositToBN is a paid mutator transaction binding the contract method 0x2444b15c.
//
// Solidity: function depositToBN(uint256 to0_, uint256 to1_, uint256 to2_, uint256 to3_, uint256 amount_) returns(uint256)
func (_MadByte *MadByteTransactor) DepositToBN(opts *bind.TransactOpts, to0_ *big.Int, to1_ *big.Int, to2_ *big.Int, to3_ *big.Int, amount_ *big.Int) (*types.Transaction, error) {
	return _MadByte.contract.Transact(opts, "depositToBN", to0_, to1_, to2_, to3_, amount_)
}

// DepositToBN is a paid mutator transaction binding the contract method 0x2444b15c.
//
// Solidity: function depositToBN(uint256 to0_, uint256 to1_, uint256 to2_, uint256 to3_, uint256 amount_) returns(uint256)
func (_MadByte *MadByteSession) DepositToBN(to0_ *big.Int, to1_ *big.Int, to2_ *big.Int, to3_ *big.Int, amount_ *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.DepositToBN(&_MadByte.TransactOpts, to0_, to1_, to2_, to3_, amount_)
}

// DepositToBN is a paid mutator transaction binding the contract method 0x2444b15c.
//
// Solidity: function depositToBN(uint256 to0_, uint256 to1_, uint256 to2_, uint256 to3_, uint256 amount_) returns(uint256)
func (_MadByte *MadByteTransactorSession) DepositToBN(to0_ *big.Int, to1_ *big.Int, to2_ *big.Int, to3_ *big.Int, amount_ *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.DepositToBN(&_MadByte.TransactOpts, to0_, to1_, to2_, to3_, amount_)
}

// Distribute is a paid mutator transaction binding the contract method 0xe4fc6b6d.
//
// Solidity: function distribute() returns(uint256 minerAmount, uint256 stakingAmount, uint256 lpStakingAmount, uint256 foundationAmount)
func (_MadByte *MadByteTransactor) Distribute(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MadByte.contract.Transact(opts, "distribute")
}

// Distribute is a paid mutator transaction binding the contract method 0xe4fc6b6d.
//
// Solidity: function distribute() returns(uint256 minerAmount, uint256 stakingAmount, uint256 lpStakingAmount, uint256 foundationAmount)
func (_MadByte *MadByteSession) Distribute() (*types.Transaction, error) {
	return _MadByte.Contract.Distribute(&_MadByte.TransactOpts)
}

// Distribute is a paid mutator transaction binding the contract method 0xe4fc6b6d.
//
// Solidity: function distribute() returns(uint256 minerAmount, uint256 stakingAmount, uint256 lpStakingAmount, uint256 foundationAmount)
func (_MadByte *MadByteTransactorSession) Distribute() (*types.Transaction, error) {
	return _MadByte.Contract.Distribute(&_MadByte.TransactOpts)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_MadByte *MadByteTransactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _MadByte.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_MadByte *MadByteSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.IncreaseAllowance(&_MadByte.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_MadByte *MadByteTransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.IncreaseAllowance(&_MadByte.TransactOpts, spender, addedValue)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 minMB_) payable returns(uint256 nuMB)
func (_MadByte *MadByteTransactor) Mint(opts *bind.TransactOpts, minMB_ *big.Int) (*types.Transaction, error) {
	return _MadByte.contract.Transact(opts, "mint", minMB_)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 minMB_) payable returns(uint256 nuMB)
func (_MadByte *MadByteSession) Mint(minMB_ *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.Mint(&_MadByte.TransactOpts, minMB_)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 minMB_) payable returns(uint256 nuMB)
func (_MadByte *MadByteTransactorSession) Mint(minMB_ *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.Mint(&_MadByte.TransactOpts, minMB_)
}

// MintDeposit is a paid mutator transaction binding the contract method 0x34afbf60.
//
// Solidity: function mintDeposit(address to_, uint256 minMB_) payable returns(uint256)
func (_MadByte *MadByteTransactor) MintDeposit(opts *bind.TransactOpts, to_ common.Address, minMB_ *big.Int) (*types.Transaction, error) {
	return _MadByte.contract.Transact(opts, "mintDeposit", to_, minMB_)
}

// MintDeposit is a paid mutator transaction binding the contract method 0x34afbf60.
//
// Solidity: function mintDeposit(address to_, uint256 minMB_) payable returns(uint256)
func (_MadByte *MadByteSession) MintDeposit(to_ common.Address, minMB_ *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.MintDeposit(&_MadByte.TransactOpts, to_, minMB_)
}

// MintDeposit is a paid mutator transaction binding the contract method 0x34afbf60.
//
// Solidity: function mintDeposit(address to_, uint256 minMB_) payable returns(uint256)
func (_MadByte *MadByteTransactorSession) MintDeposit(to_ common.Address, minMB_ *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.MintDeposit(&_MadByte.TransactOpts, to_, minMB_)
}

// MintTo is a paid mutator transaction binding the contract method 0x449a52f8.
//
// Solidity: function mintTo(address to_, uint256 minMB_) payable returns(uint256 nuMB)
func (_MadByte *MadByteTransactor) MintTo(opts *bind.TransactOpts, to_ common.Address, minMB_ *big.Int) (*types.Transaction, error) {
	return _MadByte.contract.Transact(opts, "mintTo", to_, minMB_)
}

// MintTo is a paid mutator transaction binding the contract method 0x449a52f8.
//
// Solidity: function mintTo(address to_, uint256 minMB_) payable returns(uint256 nuMB)
func (_MadByte *MadByteSession) MintTo(to_ common.Address, minMB_ *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.MintTo(&_MadByte.TransactOpts, to_, minMB_)
}

// MintTo is a paid mutator transaction binding the contract method 0x449a52f8.
//
// Solidity: function mintTo(address to_, uint256 minMB_) payable returns(uint256 nuMB)
func (_MadByte *MadByteTransactorSession) MintTo(to_ common.Address, minMB_ *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.MintTo(&_MadByte.TransactOpts, to_, minMB_)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address admin_) returns()
func (_MadByte *MadByteTransactor) SetAdmin(opts *bind.TransactOpts, admin_ common.Address) (*types.Transaction, error) {
	return _MadByte.contract.Transact(opts, "setAdmin", admin_)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address admin_) returns()
func (_MadByte *MadByteSession) SetAdmin(admin_ common.Address) (*types.Transaction, error) {
	return _MadByte.Contract.SetAdmin(&_MadByte.TransactOpts, admin_)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address admin_) returns()
func (_MadByte *MadByteTransactorSession) SetAdmin(admin_ common.Address) (*types.Transaction, error) {
	return _MadByte.Contract.SetAdmin(&_MadByte.TransactOpts, admin_)
}

// SetFoundation is a paid mutator transaction binding the contract method 0xdb3543f5.
//
// Solidity: function setFoundation(address foundation_) returns()
func (_MadByte *MadByteTransactor) SetFoundation(opts *bind.TransactOpts, foundation_ common.Address) (*types.Transaction, error) {
	return _MadByte.contract.Transact(opts, "setFoundation", foundation_)
}

// SetFoundation is a paid mutator transaction binding the contract method 0xdb3543f5.
//
// Solidity: function setFoundation(address foundation_) returns()
func (_MadByte *MadByteSession) SetFoundation(foundation_ common.Address) (*types.Transaction, error) {
	return _MadByte.Contract.SetFoundation(&_MadByte.TransactOpts, foundation_)
}

// SetFoundation is a paid mutator transaction binding the contract method 0xdb3543f5.
//
// Solidity: function setFoundation(address foundation_) returns()
func (_MadByte *MadByteTransactorSession) SetFoundation(foundation_ common.Address) (*types.Transaction, error) {
	return _MadByte.Contract.SetFoundation(&_MadByte.TransactOpts, foundation_)
}

// SetLPStaking is a paid mutator transaction binding the contract method 0xb3113b2a.
//
// Solidity: function setLPStaking(address lpStaking_) returns()
func (_MadByte *MadByteTransactor) SetLPStaking(opts *bind.TransactOpts, lpStaking_ common.Address) (*types.Transaction, error) {
	return _MadByte.contract.Transact(opts, "setLPStaking", lpStaking_)
}

// SetLPStaking is a paid mutator transaction binding the contract method 0xb3113b2a.
//
// Solidity: function setLPStaking(address lpStaking_) returns()
func (_MadByte *MadByteSession) SetLPStaking(lpStaking_ common.Address) (*types.Transaction, error) {
	return _MadByte.Contract.SetLPStaking(&_MadByte.TransactOpts, lpStaking_)
}

// SetLPStaking is a paid mutator transaction binding the contract method 0xb3113b2a.
//
// Solidity: function setLPStaking(address lpStaking_) returns()
func (_MadByte *MadByteTransactorSession) SetLPStaking(lpStaking_ common.Address) (*types.Transaction, error) {
	return _MadByte.Contract.SetLPStaking(&_MadByte.TransactOpts, lpStaking_)
}

// SetMadStaking is a paid mutator transaction binding the contract method 0x9f1d6c19.
//
// Solidity: function setMadStaking(address madStaking_) returns()
func (_MadByte *MadByteTransactor) SetMadStaking(opts *bind.TransactOpts, madStaking_ common.Address) (*types.Transaction, error) {
	return _MadByte.contract.Transact(opts, "setMadStaking", madStaking_)
}

// SetMadStaking is a paid mutator transaction binding the contract method 0x9f1d6c19.
//
// Solidity: function setMadStaking(address madStaking_) returns()
func (_MadByte *MadByteSession) SetMadStaking(madStaking_ common.Address) (*types.Transaction, error) {
	return _MadByte.Contract.SetMadStaking(&_MadByte.TransactOpts, madStaking_)
}

// SetMadStaking is a paid mutator transaction binding the contract method 0x9f1d6c19.
//
// Solidity: function setMadStaking(address madStaking_) returns()
func (_MadByte *MadByteTransactorSession) SetMadStaking(madStaking_ common.Address) (*types.Transaction, error) {
	return _MadByte.Contract.SetMadStaking(&_MadByte.TransactOpts, madStaking_)
}

// SetMinerStaking is a paid mutator transaction binding the contract method 0x7ef5da04.
//
// Solidity: function setMinerStaking(address minerStaking_) returns()
func (_MadByte *MadByteTransactor) SetMinerStaking(opts *bind.TransactOpts, minerStaking_ common.Address) (*types.Transaction, error) {
	return _MadByte.contract.Transact(opts, "setMinerStaking", minerStaking_)
}

// SetMinerStaking is a paid mutator transaction binding the contract method 0x7ef5da04.
//
// Solidity: function setMinerStaking(address minerStaking_) returns()
func (_MadByte *MadByteSession) SetMinerStaking(minerStaking_ common.Address) (*types.Transaction, error) {
	return _MadByte.Contract.SetMinerStaking(&_MadByte.TransactOpts, minerStaking_)
}

// SetMinerStaking is a paid mutator transaction binding the contract method 0x7ef5da04.
//
// Solidity: function setMinerStaking(address minerStaking_) returns()
func (_MadByte *MadByteTransactorSession) SetMinerStaking(minerStaking_ common.Address) (*types.Transaction, error) {
	return _MadByte.Contract.SetMinerStaking(&_MadByte.TransactOpts, minerStaking_)
}

// SetSplits is a paid mutator transaction binding the contract method 0x767bc1bf.
//
// Solidity: function setSplits(uint256 minerStakingSplit_, uint256 madStakingSplit_, uint256 lpStakingSplit_, uint256 protocolFee_) returns()
func (_MadByte *MadByteTransactor) SetSplits(opts *bind.TransactOpts, minerStakingSplit_ *big.Int, madStakingSplit_ *big.Int, lpStakingSplit_ *big.Int, protocolFee_ *big.Int) (*types.Transaction, error) {
	return _MadByte.contract.Transact(opts, "setSplits", minerStakingSplit_, madStakingSplit_, lpStakingSplit_, protocolFee_)
}

// SetSplits is a paid mutator transaction binding the contract method 0x767bc1bf.
//
// Solidity: function setSplits(uint256 minerStakingSplit_, uint256 madStakingSplit_, uint256 lpStakingSplit_, uint256 protocolFee_) returns()
func (_MadByte *MadByteSession) SetSplits(minerStakingSplit_ *big.Int, madStakingSplit_ *big.Int, lpStakingSplit_ *big.Int, protocolFee_ *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.SetSplits(&_MadByte.TransactOpts, minerStakingSplit_, madStakingSplit_, lpStakingSplit_, protocolFee_)
}

// SetSplits is a paid mutator transaction binding the contract method 0x767bc1bf.
//
// Solidity: function setSplits(uint256 minerStakingSplit_, uint256 madStakingSplit_, uint256 lpStakingSplit_, uint256 protocolFee_) returns()
func (_MadByte *MadByteTransactorSession) SetSplits(minerStakingSplit_ *big.Int, madStakingSplit_ *big.Int, lpStakingSplit_ *big.Int, protocolFee_ *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.SetSplits(&_MadByte.TransactOpts, minerStakingSplit_, madStakingSplit_, lpStakingSplit_, protocolFee_)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_MadByte *MadByteTransactor) Transfer(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MadByte.contract.Transact(opts, "transfer", to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_MadByte *MadByteSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.Transfer(&_MadByte.TransactOpts, to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_MadByte *MadByteTransactorSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.Transfer(&_MadByte.TransactOpts, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_MadByte *MadByteTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MadByte.contract.Transact(opts, "transferFrom", from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_MadByte *MadByteSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.TransferFrom(&_MadByte.TransactOpts, from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_MadByte *MadByteTransactorSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.TransferFrom(&_MadByte.TransactOpts, from, to, amount)
}

// VirtualMintDeposit is a paid mutator transaction binding the contract method 0x142c514e.
//
// Solidity: function virtualMintDeposit(address to_, uint256 amount_) returns(uint256)
func (_MadByte *MadByteTransactor) VirtualMintDeposit(opts *bind.TransactOpts, to_ common.Address, amount_ *big.Int) (*types.Transaction, error) {
	return _MadByte.contract.Transact(opts, "virtualMintDeposit", to_, amount_)
}

// VirtualMintDeposit is a paid mutator transaction binding the contract method 0x142c514e.
//
// Solidity: function virtualMintDeposit(address to_, uint256 amount_) returns(uint256)
func (_MadByte *MadByteSession) VirtualMintDeposit(to_ common.Address, amount_ *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.VirtualMintDeposit(&_MadByte.TransactOpts, to_, amount_)
}

// VirtualMintDeposit is a paid mutator transaction binding the contract method 0x142c514e.
//
// Solidity: function virtualMintDeposit(address to_, uint256 amount_) returns(uint256)
func (_MadByte *MadByteTransactorSession) VirtualMintDeposit(to_ common.Address, amount_ *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.VirtualMintDeposit(&_MadByte.TransactOpts, to_, amount_)
}

// MadByteApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the MadByte contract.
type MadByteApprovalIterator struct {
	Event *MadByteApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MadByteApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MadByteApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MadByteApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MadByteApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MadByteApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MadByteApproval represents a Approval event raised by the MadByte contract.
type MadByteApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_MadByte *MadByteFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*MadByteApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _MadByte.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &MadByteApprovalIterator{contract: _MadByte.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_MadByte *MadByteFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *MadByteApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _MadByte.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MadByteApproval)
				if err := _MadByte.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_MadByte *MadByteFilterer) ParseApproval(log types.Log) (*MadByteApproval, error) {
	event := new(MadByteApproval)
	if err := _MadByte.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MadByteDepositReceivedIterator is returned from FilterDepositReceived and is used to iterate over the raw logs and unpacked data for DepositReceived events raised by the MadByte contract.
type MadByteDepositReceivedIterator struct {
	Event *MadByteDepositReceived // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MadByteDepositReceivedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MadByteDepositReceived)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MadByteDepositReceived)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MadByteDepositReceivedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MadByteDepositReceivedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MadByteDepositReceived represents a DepositReceived event raised by the MadByte contract.
type MadByteDepositReceived struct {
	DepositID *big.Int
	Depositor common.Address
	Amount    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterDepositReceived is a free log retrieval operation binding the contract event 0x5b063c6569a91e8133fc6cd71d31a4ca5c65c652fd53ae093f46107754f08541.
//
// Solidity: event DepositReceived(uint256 indexed depositID, address indexed depositor, uint256 amount)
func (_MadByte *MadByteFilterer) FilterDepositReceived(opts *bind.FilterOpts, depositID []*big.Int, depositor []common.Address) (*MadByteDepositReceivedIterator, error) {

	var depositIDRule []interface{}
	for _, depositIDItem := range depositID {
		depositIDRule = append(depositIDRule, depositIDItem)
	}
	var depositorRule []interface{}
	for _, depositorItem := range depositor {
		depositorRule = append(depositorRule, depositorItem)
	}

	logs, sub, err := _MadByte.contract.FilterLogs(opts, "DepositReceived", depositIDRule, depositorRule)
	if err != nil {
		return nil, err
	}
	return &MadByteDepositReceivedIterator{contract: _MadByte.contract, event: "DepositReceived", logs: logs, sub: sub}, nil
}

// WatchDepositReceived is a free log subscription operation binding the contract event 0x5b063c6569a91e8133fc6cd71d31a4ca5c65c652fd53ae093f46107754f08541.
//
// Solidity: event DepositReceived(uint256 indexed depositID, address indexed depositor, uint256 amount)
func (_MadByte *MadByteFilterer) WatchDepositReceived(opts *bind.WatchOpts, sink chan<- *MadByteDepositReceived, depositID []*big.Int, depositor []common.Address) (event.Subscription, error) {

	var depositIDRule []interface{}
	for _, depositIDItem := range depositID {
		depositIDRule = append(depositIDRule, depositIDItem)
	}
	var depositorRule []interface{}
	for _, depositorItem := range depositor {
		depositorRule = append(depositorRule, depositorItem)
	}

	logs, sub, err := _MadByte.contract.WatchLogs(opts, "DepositReceived", depositIDRule, depositorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MadByteDepositReceived)
				if err := _MadByte.contract.UnpackLog(event, "DepositReceived", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDepositReceived is a log parse operation binding the contract event 0x5b063c6569a91e8133fc6cd71d31a4ca5c65c652fd53ae093f46107754f08541.
//
// Solidity: event DepositReceived(uint256 indexed depositID, address indexed depositor, uint256 amount)
func (_MadByte *MadByteFilterer) ParseDepositReceived(log types.Log) (*MadByteDepositReceived, error) {
	event := new(MadByteDepositReceived)
	if err := _MadByte.contract.UnpackLog(event, "DepositReceived", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MadByteDepositReceivedBNIterator is returned from FilterDepositReceivedBN and is used to iterate over the raw logs and unpacked data for DepositReceivedBN events raised by the MadByte contract.
type MadByteDepositReceivedBNIterator struct {
	Event *MadByteDepositReceivedBN // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MadByteDepositReceivedBNIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MadByteDepositReceivedBN)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MadByteDepositReceivedBN)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MadByteDepositReceivedBNIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MadByteDepositReceivedBNIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MadByteDepositReceivedBN represents a DepositReceivedBN event raised by the MadByte contract.
type MadByteDepositReceivedBN struct {
	DepositID *big.Int
	To0       *big.Int
	To1       *big.Int
	To2       *big.Int
	To3       *big.Int
	Amount    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterDepositReceivedBN is a free log retrieval operation binding the contract event 0xbc042d1da385bbdd954b3996e43a972c725a235e533042d3cf3ba68dba57a163.
//
// Solidity: event DepositReceivedBN(uint256 indexed depositID, uint256 to0, uint256 to1, uint256 to2, uint256 to3, uint256 amount)
func (_MadByte *MadByteFilterer) FilterDepositReceivedBN(opts *bind.FilterOpts, depositID []*big.Int) (*MadByteDepositReceivedBNIterator, error) {

	var depositIDRule []interface{}
	for _, depositIDItem := range depositID {
		depositIDRule = append(depositIDRule, depositIDItem)
	}

	logs, sub, err := _MadByte.contract.FilterLogs(opts, "DepositReceivedBN", depositIDRule)
	if err != nil {
		return nil, err
	}
	return &MadByteDepositReceivedBNIterator{contract: _MadByte.contract, event: "DepositReceivedBN", logs: logs, sub: sub}, nil
}

// WatchDepositReceivedBN is a free log subscription operation binding the contract event 0xbc042d1da385bbdd954b3996e43a972c725a235e533042d3cf3ba68dba57a163.
//
// Solidity: event DepositReceivedBN(uint256 indexed depositID, uint256 to0, uint256 to1, uint256 to2, uint256 to3, uint256 amount)
func (_MadByte *MadByteFilterer) WatchDepositReceivedBN(opts *bind.WatchOpts, sink chan<- *MadByteDepositReceivedBN, depositID []*big.Int) (event.Subscription, error) {

	var depositIDRule []interface{}
	for _, depositIDItem := range depositID {
		depositIDRule = append(depositIDRule, depositIDItem)
	}

	logs, sub, err := _MadByte.contract.WatchLogs(opts, "DepositReceivedBN", depositIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MadByteDepositReceivedBN)
				if err := _MadByte.contract.UnpackLog(event, "DepositReceivedBN", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDepositReceivedBN is a log parse operation binding the contract event 0xbc042d1da385bbdd954b3996e43a972c725a235e533042d3cf3ba68dba57a163.
//
// Solidity: event DepositReceivedBN(uint256 indexed depositID, uint256 to0, uint256 to1, uint256 to2, uint256 to3, uint256 amount)
func (_MadByte *MadByteFilterer) ParseDepositReceivedBN(log types.Log) (*MadByteDepositReceivedBN, error) {
	event := new(MadByteDepositReceivedBN)
	if err := _MadByte.contract.UnpackLog(event, "DepositReceivedBN", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MadByteTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the MadByte contract.
type MadByteTransferIterator struct {
	Event *MadByteTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MadByteTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MadByteTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MadByteTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MadByteTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MadByteTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MadByteTransfer represents a Transfer event raised by the MadByte contract.
type MadByteTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_MadByte *MadByteFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*MadByteTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MadByte.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &MadByteTransferIterator{contract: _MadByte.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_MadByte *MadByteFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *MadByteTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MadByte.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MadByteTransfer)
				if err := _MadByte.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_MadByte *MadByteFilterer) ParseTransfer(log types.Log) (*MadByteTransfer, error) {
	event := new(MadByteTransfer)
	if err := _MadByte.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MadTokenMetaData contains all meta data concerning the MadToken contract.
var MadTokenMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "",
}

// MadTokenABI is the input ABI used to generate the binding from.
// Deprecated: Use MadTokenMetaData.ABI instead.
var MadTokenABI = MadTokenMetaData.ABI

// MadTokenBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MadTokenMetaData.Bin instead.
var MadTokenBin = MadTokenMetaData.Bin

// DeployMadToken deploys a new Ethereum contract, binding an instance of MadToken to it.
func DeployMadToken(auth *bind.TransactOpts, backend bind.ContractBackend, name_ string, symbol_ string) (common.Address, *types.Transaction, *MadToken, error) {
	parsed, err := MadTokenMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MadTokenBin), backend, name_, symbol_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MadToken{MadTokenCaller: MadTokenCaller{contract: contract}, MadTokenTransactor: MadTokenTransactor{contract: contract}, MadTokenFilterer: MadTokenFilterer{contract: contract}}, nil
}

// MadToken is an auto generated Go binding around an Ethereum contract.
type MadToken struct {
	MadTokenCaller     // Read-only binding to the contract
	MadTokenTransactor // Write-only binding to the contract
	MadTokenFilterer   // Log filterer for contract events
}

// MadTokenCaller is an auto generated read-only Go binding around an Ethereum contract.
type MadTokenCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MadTokenTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MadTokenTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MadTokenFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MadTokenFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MadTokenSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MadTokenSession struct {
	Contract     *MadToken         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MadTokenCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MadTokenCallerSession struct {
	Contract *MadTokenCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// MadTokenTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MadTokenTransactorSession struct {
	Contract     *MadTokenTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// MadTokenRaw is an auto generated low-level Go binding around an Ethereum contract.
type MadTokenRaw struct {
	Contract *MadToken // Generic contract binding to access the raw methods on
}

// MadTokenCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MadTokenCallerRaw struct {
	Contract *MadTokenCaller // Generic read-only contract binding to access the raw methods on
}

// MadTokenTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MadTokenTransactorRaw struct {
	Contract *MadTokenTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMadToken creates a new instance of MadToken, bound to a specific deployed contract.
func NewMadToken(address common.Address, backend bind.ContractBackend) (*MadToken, error) {
	contract, err := bindMadToken(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MadToken{MadTokenCaller: MadTokenCaller{contract: contract}, MadTokenTransactor: MadTokenTransactor{contract: contract}, MadTokenFilterer: MadTokenFilterer{contract: contract}}, nil
}

// NewMadTokenCaller creates a new read-only instance of MadToken, bound to a specific deployed contract.
func NewMadTokenCaller(address common.Address, caller bind.ContractCaller) (*MadTokenCaller, error) {
	contract, err := bindMadToken(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MadTokenCaller{contract: contract}, nil
}

// NewMadTokenTransactor creates a new write-only instance of MadToken, bound to a specific deployed contract.
func NewMadTokenTransactor(address common.Address, transactor bind.ContractTransactor) (*MadTokenTransactor, error) {
	contract, err := bindMadToken(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MadTokenTransactor{contract: contract}, nil
}

// NewMadTokenFilterer creates a new log filterer instance of MadToken, bound to a specific deployed contract.
func NewMadTokenFilterer(address common.Address, filterer bind.ContractFilterer) (*MadTokenFilterer, error) {
	contract, err := bindMadToken(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MadTokenFilterer{contract: contract}, nil
}

// bindMadToken binds a generic wrapper to an already deployed contract.
func bindMadToken(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MadTokenABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MadToken *MadTokenRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MadToken.Contract.MadTokenCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MadToken *MadTokenRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MadToken.Contract.MadTokenTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MadToken *MadTokenRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MadToken.Contract.MadTokenTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MadToken *MadTokenCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MadToken.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MadToken *MadTokenTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MadToken.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MadToken *MadTokenTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MadToken.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_MadToken *MadTokenCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _MadToken.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_MadToken *MadTokenSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _MadToken.Contract.Allowance(&_MadToken.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_MadToken *MadTokenCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _MadToken.Contract.Allowance(&_MadToken.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_MadToken *MadTokenCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _MadToken.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_MadToken *MadTokenSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _MadToken.Contract.BalanceOf(&_MadToken.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_MadToken *MadTokenCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _MadToken.Contract.BalanceOf(&_MadToken.CallOpts, account)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_MadToken *MadTokenCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _MadToken.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_MadToken *MadTokenSession) Decimals() (uint8, error) {
	return _MadToken.Contract.Decimals(&_MadToken.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_MadToken *MadTokenCallerSession) Decimals() (uint8, error) {
	return _MadToken.Contract.Decimals(&_MadToken.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_MadToken *MadTokenCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _MadToken.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_MadToken *MadTokenSession) Name() (string, error) {
	return _MadToken.Contract.Name(&_MadToken.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_MadToken *MadTokenCallerSession) Name() (string, error) {
	return _MadToken.Contract.Name(&_MadToken.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_MadToken *MadTokenCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _MadToken.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_MadToken *MadTokenSession) Symbol() (string, error) {
	return _MadToken.Contract.Symbol(&_MadToken.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_MadToken *MadTokenCallerSession) Symbol() (string, error) {
	return _MadToken.Contract.Symbol(&_MadToken.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_MadToken *MadTokenCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _MadToken.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_MadToken *MadTokenSession) TotalSupply() (*big.Int, error) {
	return _MadToken.Contract.TotalSupply(&_MadToken.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_MadToken *MadTokenCallerSession) TotalSupply() (*big.Int, error) {
	return _MadToken.Contract.TotalSupply(&_MadToken.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_MadToken *MadTokenTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MadToken.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_MadToken *MadTokenSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MadToken.Contract.Approve(&_MadToken.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_MadToken *MadTokenTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MadToken.Contract.Approve(&_MadToken.TransactOpts, spender, amount)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_MadToken *MadTokenTransactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _MadToken.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_MadToken *MadTokenSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _MadToken.Contract.DecreaseAllowance(&_MadToken.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_MadToken *MadTokenTransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _MadToken.Contract.DecreaseAllowance(&_MadToken.TransactOpts, spender, subtractedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_MadToken *MadTokenTransactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _MadToken.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_MadToken *MadTokenSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _MadToken.Contract.IncreaseAllowance(&_MadToken.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_MadToken *MadTokenTransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _MadToken.Contract.IncreaseAllowance(&_MadToken.TransactOpts, spender, addedValue)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_MadToken *MadTokenTransactor) Transfer(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MadToken.contract.Transact(opts, "transfer", to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_MadToken *MadTokenSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MadToken.Contract.Transfer(&_MadToken.TransactOpts, to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_MadToken *MadTokenTransactorSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MadToken.Contract.Transfer(&_MadToken.TransactOpts, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_MadToken *MadTokenTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MadToken.contract.Transact(opts, "transferFrom", from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_MadToken *MadTokenSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MadToken.Contract.TransferFrom(&_MadToken.TransactOpts, from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_MadToken *MadTokenTransactorSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MadToken.Contract.TransferFrom(&_MadToken.TransactOpts, from, to, amount)
}

// MadTokenApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the MadToken contract.
type MadTokenApprovalIterator struct {
	Event *MadTokenApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MadTokenApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MadTokenApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MadTokenApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MadTokenApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MadTokenApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MadTokenApproval represents a Approval event raised by the MadToken contract.
type MadTokenApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_MadToken *MadTokenFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*MadTokenApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _MadToken.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &MadTokenApprovalIterator{contract: _MadToken.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_MadToken *MadTokenFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *MadTokenApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _MadToken.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MadTokenApproval)
				if err := _MadToken.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_MadToken *MadTokenFilterer) ParseApproval(log types.Log) (*MadTokenApproval, error) {
	event := new(MadTokenApproval)
	if err := _MadToken.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MadTokenTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the MadToken contract.
type MadTokenTransferIterator struct {
	Event *MadTokenTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MadTokenTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MadTokenTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MadTokenTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MadTokenTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MadTokenTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MadTokenTransfer represents a Transfer event raised by the MadToken contract.
type MadTokenTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_MadToken *MadTokenFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*MadTokenTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MadToken.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &MadTokenTransferIterator{contract: _MadToken.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_MadToken *MadTokenFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *MadTokenTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MadToken.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MadTokenTransfer)
				if err := _MadToken.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_MadToken *MadTokenFilterer) ParseTransfer(log types.Log) (*MadTokenTransfer, error) {
	event := new(MadTokenTransfer)
	if err := _MadToken.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MagicEthTransferMetaData contains all meta data concerning the MagicEthTransfer contract.
var MagicEthTransferMetaData = &bind.MetaData{
	ABI: "[]",
}

// MagicEthTransferABI is the input ABI used to generate the binding from.
// Deprecated: Use MagicEthTransferMetaData.ABI instead.
var MagicEthTransferABI = MagicEthTransferMetaData.ABI

// MagicEthTransfer is an auto generated Go binding around an Ethereum contract.
type MagicEthTransfer struct {
	MagicEthTransferCaller     // Read-only binding to the contract
	MagicEthTransferTransactor // Write-only binding to the contract
	MagicEthTransferFilterer   // Log filterer for contract events
}

// MagicEthTransferCaller is an auto generated read-only Go binding around an Ethereum contract.
type MagicEthTransferCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MagicEthTransferTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MagicEthTransferTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MagicEthTransferFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MagicEthTransferFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MagicEthTransferSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MagicEthTransferSession struct {
	Contract     *MagicEthTransfer // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MagicEthTransferCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MagicEthTransferCallerSession struct {
	Contract *MagicEthTransferCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// MagicEthTransferTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MagicEthTransferTransactorSession struct {
	Contract     *MagicEthTransferTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// MagicEthTransferRaw is an auto generated low-level Go binding around an Ethereum contract.
type MagicEthTransferRaw struct {
	Contract *MagicEthTransfer // Generic contract binding to access the raw methods on
}

// MagicEthTransferCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MagicEthTransferCallerRaw struct {
	Contract *MagicEthTransferCaller // Generic read-only contract binding to access the raw methods on
}

// MagicEthTransferTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MagicEthTransferTransactorRaw struct {
	Contract *MagicEthTransferTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMagicEthTransfer creates a new instance of MagicEthTransfer, bound to a specific deployed contract.
func NewMagicEthTransfer(address common.Address, backend bind.ContractBackend) (*MagicEthTransfer, error) {
	contract, err := bindMagicEthTransfer(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MagicEthTransfer{MagicEthTransferCaller: MagicEthTransferCaller{contract: contract}, MagicEthTransferTransactor: MagicEthTransferTransactor{contract: contract}, MagicEthTransferFilterer: MagicEthTransferFilterer{contract: contract}}, nil
}

// NewMagicEthTransferCaller creates a new read-only instance of MagicEthTransfer, bound to a specific deployed contract.
func NewMagicEthTransferCaller(address common.Address, caller bind.ContractCaller) (*MagicEthTransferCaller, error) {
	contract, err := bindMagicEthTransfer(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MagicEthTransferCaller{contract: contract}, nil
}

// NewMagicEthTransferTransactor creates a new write-only instance of MagicEthTransfer, bound to a specific deployed contract.
func NewMagicEthTransferTransactor(address common.Address, transactor bind.ContractTransactor) (*MagicEthTransferTransactor, error) {
	contract, err := bindMagicEthTransfer(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MagicEthTransferTransactor{contract: contract}, nil
}

// NewMagicEthTransferFilterer creates a new log filterer instance of MagicEthTransfer, bound to a specific deployed contract.
func NewMagicEthTransferFilterer(address common.Address, filterer bind.ContractFilterer) (*MagicEthTransferFilterer, error) {
	contract, err := bindMagicEthTransfer(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MagicEthTransferFilterer{contract: contract}, nil
}

// bindMagicEthTransfer binds a generic wrapper to an already deployed contract.
func bindMagicEthTransfer(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MagicEthTransferABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MagicEthTransfer *MagicEthTransferRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MagicEthTransfer.Contract.MagicEthTransferCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MagicEthTransfer *MagicEthTransferRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MagicEthTransfer.Contract.MagicEthTransferTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MagicEthTransfer *MagicEthTransferRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MagicEthTransfer.Contract.MagicEthTransferTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MagicEthTransfer *MagicEthTransferCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MagicEthTransfer.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MagicEthTransfer *MagicEthTransferTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MagicEthTransfer.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MagicEthTransfer *MagicEthTransferTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MagicEthTransfer.Contract.contract.Transact(opts, method, params...)
}

// MagicValueMetaData contains all meta data concerning the MagicValue contract.
var MagicValueMetaData = &bind.MetaData{
	ABI: "[]",
}

// MagicValueABI is the input ABI used to generate the binding from.
// Deprecated: Use MagicValueMetaData.ABI instead.
var MagicValueABI = MagicValueMetaData.ABI

// MagicValue is an auto generated Go binding around an Ethereum contract.
type MagicValue struct {
	MagicValueCaller     // Read-only binding to the contract
	MagicValueTransactor // Write-only binding to the contract
	MagicValueFilterer   // Log filterer for contract events
}

// MagicValueCaller is an auto generated read-only Go binding around an Ethereum contract.
type MagicValueCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MagicValueTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MagicValueTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MagicValueFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MagicValueFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MagicValueSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MagicValueSession struct {
	Contract     *MagicValue       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MagicValueCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MagicValueCallerSession struct {
	Contract *MagicValueCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// MagicValueTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MagicValueTransactorSession struct {
	Contract     *MagicValueTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// MagicValueRaw is an auto generated low-level Go binding around an Ethereum contract.
type MagicValueRaw struct {
	Contract *MagicValue // Generic contract binding to access the raw methods on
}

// MagicValueCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MagicValueCallerRaw struct {
	Contract *MagicValueCaller // Generic read-only contract binding to access the raw methods on
}

// MagicValueTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MagicValueTransactorRaw struct {
	Contract *MagicValueTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMagicValue creates a new instance of MagicValue, bound to a specific deployed contract.
func NewMagicValue(address common.Address, backend bind.ContractBackend) (*MagicValue, error) {
	contract, err := bindMagicValue(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MagicValue{MagicValueCaller: MagicValueCaller{contract: contract}, MagicValueTransactor: MagicValueTransactor{contract: contract}, MagicValueFilterer: MagicValueFilterer{contract: contract}}, nil
}

// NewMagicValueCaller creates a new read-only instance of MagicValue, bound to a specific deployed contract.
func NewMagicValueCaller(address common.Address, caller bind.ContractCaller) (*MagicValueCaller, error) {
	contract, err := bindMagicValue(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MagicValueCaller{contract: contract}, nil
}

// NewMagicValueTransactor creates a new write-only instance of MagicValue, bound to a specific deployed contract.
func NewMagicValueTransactor(address common.Address, transactor bind.ContractTransactor) (*MagicValueTransactor, error) {
	contract, err := bindMagicValue(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MagicValueTransactor{contract: contract}, nil
}

// NewMagicValueFilterer creates a new log filterer instance of MagicValue, bound to a specific deployed contract.
func NewMagicValueFilterer(address common.Address, filterer bind.ContractFilterer) (*MagicValueFilterer, error) {
	contract, err := bindMagicValue(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MagicValueFilterer{contract: contract}, nil
}

// bindMagicValue binds a generic wrapper to an already deployed contract.
func bindMagicValue(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MagicValueABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MagicValue *MagicValueRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MagicValue.Contract.MagicValueCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MagicValue *MagicValueRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MagicValue.Contract.MagicValueTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MagicValue *MagicValueRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MagicValue.Contract.MagicValueTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MagicValue *MagicValueCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MagicValue.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MagicValue *MagicValueTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MagicValue.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MagicValue *MagicValueTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MagicValue.Contract.contract.Transact(opts, method, params...)
}

// MutexMetaData contains all meta data concerning the Mutex contract.
var MutexMetaData = &bind.MetaData{
	ABI: "[]",
}

// MutexABI is the input ABI used to generate the binding from.
// Deprecated: Use MutexMetaData.ABI instead.
var MutexABI = MutexMetaData.ABI

// Mutex is an auto generated Go binding around an Ethereum contract.
type Mutex struct {
	MutexCaller     // Read-only binding to the contract
	MutexTransactor // Write-only binding to the contract
	MutexFilterer   // Log filterer for contract events
}

// MutexCaller is an auto generated read-only Go binding around an Ethereum contract.
type MutexCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MutexTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MutexTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MutexFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MutexFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MutexSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MutexSession struct {
	Contract     *Mutex            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MutexCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MutexCallerSession struct {
	Contract *MutexCaller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// MutexTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MutexTransactorSession struct {
	Contract     *MutexTransactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MutexRaw is an auto generated low-level Go binding around an Ethereum contract.
type MutexRaw struct {
	Contract *Mutex // Generic contract binding to access the raw methods on
}

// MutexCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MutexCallerRaw struct {
	Contract *MutexCaller // Generic read-only contract binding to access the raw methods on
}

// MutexTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MutexTransactorRaw struct {
	Contract *MutexTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMutex creates a new instance of Mutex, bound to a specific deployed contract.
func NewMutex(address common.Address, backend bind.ContractBackend) (*Mutex, error) {
	contract, err := bindMutex(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Mutex{MutexCaller: MutexCaller{contract: contract}, MutexTransactor: MutexTransactor{contract: contract}, MutexFilterer: MutexFilterer{contract: contract}}, nil
}

// NewMutexCaller creates a new read-only instance of Mutex, bound to a specific deployed contract.
func NewMutexCaller(address common.Address, caller bind.ContractCaller) (*MutexCaller, error) {
	contract, err := bindMutex(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MutexCaller{contract: contract}, nil
}

// NewMutexTransactor creates a new write-only instance of Mutex, bound to a specific deployed contract.
func NewMutexTransactor(address common.Address, transactor bind.ContractTransactor) (*MutexTransactor, error) {
	contract, err := bindMutex(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MutexTransactor{contract: contract}, nil
}

// NewMutexFilterer creates a new log filterer instance of Mutex, bound to a specific deployed contract.
func NewMutexFilterer(address common.Address, filterer bind.ContractFilterer) (*MutexFilterer, error) {
	contract, err := bindMutex(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MutexFilterer{contract: contract}, nil
}

// bindMutex binds a generic wrapper to an already deployed contract.
func bindMutex(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MutexABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Mutex *MutexRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Mutex.Contract.MutexCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Mutex *MutexRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Mutex.Contract.MutexTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Mutex *MutexRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Mutex.Contract.MutexTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Mutex *MutexCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Mutex.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Mutex *MutexTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Mutex.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Mutex *MutexTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Mutex.Contract.contract.Transact(opts, method, params...)
}

// RCertParserLibraryMetaData contains all meta data concerning the RCertParserLibrary contract.
var RCertParserLibraryMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212201dc6824c585a243956ba806a00f47ea201969b7b5599223a53b3c86e9c5b131064736f6c634300080b0033",
}

// RCertParserLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use RCertParserLibraryMetaData.ABI instead.
var RCertParserLibraryABI = RCertParserLibraryMetaData.ABI

// RCertParserLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RCertParserLibraryMetaData.Bin instead.
var RCertParserLibraryBin = RCertParserLibraryMetaData.Bin

// DeployRCertParserLibrary deploys a new Ethereum contract, binding an instance of RCertParserLibrary to it.
func DeployRCertParserLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *RCertParserLibrary, error) {
	parsed, err := RCertParserLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RCertParserLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &RCertParserLibrary{RCertParserLibraryCaller: RCertParserLibraryCaller{contract: contract}, RCertParserLibraryTransactor: RCertParserLibraryTransactor{contract: contract}, RCertParserLibraryFilterer: RCertParserLibraryFilterer{contract: contract}}, nil
}

// RCertParserLibrary is an auto generated Go binding around an Ethereum contract.
type RCertParserLibrary struct {
	RCertParserLibraryCaller     // Read-only binding to the contract
	RCertParserLibraryTransactor // Write-only binding to the contract
	RCertParserLibraryFilterer   // Log filterer for contract events
}

// RCertParserLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type RCertParserLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RCertParserLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RCertParserLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RCertParserLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RCertParserLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RCertParserLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RCertParserLibrarySession struct {
	Contract     *RCertParserLibrary // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// RCertParserLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RCertParserLibraryCallerSession struct {
	Contract *RCertParserLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// RCertParserLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RCertParserLibraryTransactorSession struct {
	Contract     *RCertParserLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// RCertParserLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type RCertParserLibraryRaw struct {
	Contract *RCertParserLibrary // Generic contract binding to access the raw methods on
}

// RCertParserLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RCertParserLibraryCallerRaw struct {
	Contract *RCertParserLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// RCertParserLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RCertParserLibraryTransactorRaw struct {
	Contract *RCertParserLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRCertParserLibrary creates a new instance of RCertParserLibrary, bound to a specific deployed contract.
func NewRCertParserLibrary(address common.Address, backend bind.ContractBackend) (*RCertParserLibrary, error) {
	contract, err := bindRCertParserLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RCertParserLibrary{RCertParserLibraryCaller: RCertParserLibraryCaller{contract: contract}, RCertParserLibraryTransactor: RCertParserLibraryTransactor{contract: contract}, RCertParserLibraryFilterer: RCertParserLibraryFilterer{contract: contract}}, nil
}

// NewRCertParserLibraryCaller creates a new read-only instance of RCertParserLibrary, bound to a specific deployed contract.
func NewRCertParserLibraryCaller(address common.Address, caller bind.ContractCaller) (*RCertParserLibraryCaller, error) {
	contract, err := bindRCertParserLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RCertParserLibraryCaller{contract: contract}, nil
}

// NewRCertParserLibraryTransactor creates a new write-only instance of RCertParserLibrary, bound to a specific deployed contract.
func NewRCertParserLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*RCertParserLibraryTransactor, error) {
	contract, err := bindRCertParserLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RCertParserLibraryTransactor{contract: contract}, nil
}

// NewRCertParserLibraryFilterer creates a new log filterer instance of RCertParserLibrary, bound to a specific deployed contract.
func NewRCertParserLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*RCertParserLibraryFilterer, error) {
	contract, err := bindRCertParserLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RCertParserLibraryFilterer{contract: contract}, nil
}

// bindRCertParserLibrary binds a generic wrapper to an already deployed contract.
func bindRCertParserLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(RCertParserLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RCertParserLibrary *RCertParserLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RCertParserLibrary.Contract.RCertParserLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RCertParserLibrary *RCertParserLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RCertParserLibrary.Contract.RCertParserLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RCertParserLibrary *RCertParserLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RCertParserLibrary.Contract.RCertParserLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RCertParserLibrary *RCertParserLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RCertParserLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RCertParserLibrary *RCertParserLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RCertParserLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RCertParserLibrary *RCertParserLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RCertParserLibrary.Contract.contract.Transact(opts, method, params...)
}

// RClaimsParserLibraryMetaData contains all meta data concerning the RClaimsParserLibrary contract.
var RClaimsParserLibraryMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122018212c70756b5603c335a287761fd4712a2d091eeeace904d1e3e21c1c5545af64736f6c634300080b0033",
}

// RClaimsParserLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use RClaimsParserLibraryMetaData.ABI instead.
var RClaimsParserLibraryABI = RClaimsParserLibraryMetaData.ABI

// RClaimsParserLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RClaimsParserLibraryMetaData.Bin instead.
var RClaimsParserLibraryBin = RClaimsParserLibraryMetaData.Bin

// DeployRClaimsParserLibrary deploys a new Ethereum contract, binding an instance of RClaimsParserLibrary to it.
func DeployRClaimsParserLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *RClaimsParserLibrary, error) {
	parsed, err := RClaimsParserLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RClaimsParserLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &RClaimsParserLibrary{RClaimsParserLibraryCaller: RClaimsParserLibraryCaller{contract: contract}, RClaimsParserLibraryTransactor: RClaimsParserLibraryTransactor{contract: contract}, RClaimsParserLibraryFilterer: RClaimsParserLibraryFilterer{contract: contract}}, nil
}

// RClaimsParserLibrary is an auto generated Go binding around an Ethereum contract.
type RClaimsParserLibrary struct {
	RClaimsParserLibraryCaller     // Read-only binding to the contract
	RClaimsParserLibraryTransactor // Write-only binding to the contract
	RClaimsParserLibraryFilterer   // Log filterer for contract events
}

// RClaimsParserLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type RClaimsParserLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RClaimsParserLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RClaimsParserLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RClaimsParserLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RClaimsParserLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RClaimsParserLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RClaimsParserLibrarySession struct {
	Contract     *RClaimsParserLibrary // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// RClaimsParserLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RClaimsParserLibraryCallerSession struct {
	Contract *RClaimsParserLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// RClaimsParserLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RClaimsParserLibraryTransactorSession struct {
	Contract     *RClaimsParserLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// RClaimsParserLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type RClaimsParserLibraryRaw struct {
	Contract *RClaimsParserLibrary // Generic contract binding to access the raw methods on
}

// RClaimsParserLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RClaimsParserLibraryCallerRaw struct {
	Contract *RClaimsParserLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// RClaimsParserLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RClaimsParserLibraryTransactorRaw struct {
	Contract *RClaimsParserLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRClaimsParserLibrary creates a new instance of RClaimsParserLibrary, bound to a specific deployed contract.
func NewRClaimsParserLibrary(address common.Address, backend bind.ContractBackend) (*RClaimsParserLibrary, error) {
	contract, err := bindRClaimsParserLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RClaimsParserLibrary{RClaimsParserLibraryCaller: RClaimsParserLibraryCaller{contract: contract}, RClaimsParserLibraryTransactor: RClaimsParserLibraryTransactor{contract: contract}, RClaimsParserLibraryFilterer: RClaimsParserLibraryFilterer{contract: contract}}, nil
}

// NewRClaimsParserLibraryCaller creates a new read-only instance of RClaimsParserLibrary, bound to a specific deployed contract.
func NewRClaimsParserLibraryCaller(address common.Address, caller bind.ContractCaller) (*RClaimsParserLibraryCaller, error) {
	contract, err := bindRClaimsParserLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RClaimsParserLibraryCaller{contract: contract}, nil
}

// NewRClaimsParserLibraryTransactor creates a new write-only instance of RClaimsParserLibrary, bound to a specific deployed contract.
func NewRClaimsParserLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*RClaimsParserLibraryTransactor, error) {
	contract, err := bindRClaimsParserLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RClaimsParserLibraryTransactor{contract: contract}, nil
}

// NewRClaimsParserLibraryFilterer creates a new log filterer instance of RClaimsParserLibrary, bound to a specific deployed contract.
func NewRClaimsParserLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*RClaimsParserLibraryFilterer, error) {
	contract, err := bindRClaimsParserLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RClaimsParserLibraryFilterer{contract: contract}, nil
}

// bindRClaimsParserLibrary binds a generic wrapper to an already deployed contract.
func bindRClaimsParserLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(RClaimsParserLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RClaimsParserLibrary *RClaimsParserLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RClaimsParserLibrary.Contract.RClaimsParserLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RClaimsParserLibrary *RClaimsParserLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RClaimsParserLibrary.Contract.RClaimsParserLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RClaimsParserLibrary *RClaimsParserLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RClaimsParserLibrary.Contract.RClaimsParserLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RClaimsParserLibrary *RClaimsParserLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RClaimsParserLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RClaimsParserLibrary *RClaimsParserLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RClaimsParserLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RClaimsParserLibrary *RClaimsParserLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RClaimsParserLibrary.Contract.contract.Transact(opts, method, params...)
}

// RegistryMetaData contains all meta data concerning the Registry contract.
var RegistryMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"lookup\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"remove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50600280546001600160a01b0319163390811790915561002f90610034565b610129565b6002546001600160a01b031633148061005c57503360009081526020819052604090205460ff165b6100c65760405162461bcd60e51b815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527037b934bd32b21037b832b930ba37b9399760791b606482015260840160405180910390fd5b6001600160a01b0381166000908152602081905260408120805460ff191660019081179091558054916100f883610100565b919050555050565b600060001982141561012257634e487b7160e01b600052601160045260246000fd5b5060010190565b6108d5806101386000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063e348da1311610050578063e348da1314610094578063f67187ac146100a7578063fad8b32a146100e357600080fd5b80631e59c5291461006c57806380599e4b14610081575b600080fd5b61007f61007a36600461071a565b6100f6565b005b61007f61008f366004610768565b610225565b61007f6100a23660046107a5565b61032e565b6100ba6100b5366004610768565b610454565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b61007f6100f13660046107a5565b610492565b60025473ffffffffffffffffffffffffffffffffffffffff1633148061012b57503360009081526020819052604090205460ff165b6101bc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527f6f72697a6564206f70657261746f72732e00000000000000000000000000000060648201526084015b60405180910390fd5b806003836040516101cd91906107c7565b908152604051908190036020019020805473ffffffffffffffffffffffffffffffffffffffff929092167fffffffffffffffffffffffff00000000000000000000000000000000000000009092169190911790555050565b60025473ffffffffffffffffffffffffffffffffffffffff1633148061025a57503360009081526020819052604090205460ff165b6102e6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527f6f72697a6564206f70657261746f72732e00000000000000000000000000000060648201526084016101b3565b6003816040516102f691906107c7565b90815260405190819003602001902080547fffffffffffffffffffffffff000000000000000000000000000000000000000016905550565b60025473ffffffffffffffffffffffffffffffffffffffff1633148061036357503360009081526020819052604090205460ff165b6103ef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527f6f72697a6564206f70657261746f72732e00000000000000000000000000000060648201526084016101b3565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260208190526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600190811790915580549161044c83610831565b919050555050565b600060038260405161046691906107c7565b9081526040519081900360200190205473ffffffffffffffffffffffffffffffffffffffff1692915050565b60025473ffffffffffffffffffffffffffffffffffffffff163314806104c757503360009081526020819052604090205460ff165b610553576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527f6f72697a6564206f70657261746f72732e00000000000000000000000000000060648201526084016101b3565b60018054116105be576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f43616e27742072656d6f766520616c6c206f70657261746f727300000000000060448201526064016101b3565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260208190526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055600180549161044c8361086a565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f83011261065757600080fd5b813567ffffffffffffffff8082111561067257610672610617565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019082821181831017156106b8576106b8610617565b816040528381528660208588010111156106d157600080fd5b836020870160208301376000602085830101528094505050505092915050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461071557600080fd5b919050565b6000806040838503121561072d57600080fd5b823567ffffffffffffffff81111561074457600080fd5b61075085828601610646565b92505061075f602084016106f1565b90509250929050565b60006020828403121561077a57600080fd5b813567ffffffffffffffff81111561079157600080fd5b61079d84828501610646565b949350505050565b6000602082840312156107b757600080fd5b6107c0826106f1565b9392505050565b6000825160005b818110156107e857602081860181015185830152016107ce565b818111156107f7576000828501525b509190910192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561086357610863610802565b5060010190565b60008161087957610879610802565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019056fea264697066735822122067fe96d4d45944e571ea08f8a61757acc2d466449293be3448165a41b668c12964736f6c634300080b0033",
}

// RegistryABI is the input ABI used to generate the binding from.
// Deprecated: Use RegistryMetaData.ABI instead.
var RegistryABI = RegistryMetaData.ABI

// RegistryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RegistryMetaData.Bin instead.
var RegistryBin = RegistryMetaData.Bin

// DeployRegistry deploys a new Ethereum contract, binding an instance of Registry to it.
func DeployRegistry(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Registry, error) {
	parsed, err := RegistryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RegistryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Registry{RegistryCaller: RegistryCaller{contract: contract}, RegistryTransactor: RegistryTransactor{contract: contract}, RegistryFilterer: RegistryFilterer{contract: contract}}, nil
}

// Registry is an auto generated Go binding around an Ethereum contract.
type Registry struct {
	RegistryCaller     // Read-only binding to the contract
	RegistryTransactor // Write-only binding to the contract
	RegistryFilterer   // Log filterer for contract events
}

// RegistryCaller is an auto generated read-only Go binding around an Ethereum contract.
type RegistryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RegistryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RegistryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistrySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RegistrySession struct {
	Contract     *Registry         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RegistryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RegistryCallerSession struct {
	Contract *RegistryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// RegistryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RegistryTransactorSession struct {
	Contract     *RegistryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// RegistryRaw is an auto generated low-level Go binding around an Ethereum contract.
type RegistryRaw struct {
	Contract *Registry // Generic contract binding to access the raw methods on
}

// RegistryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RegistryCallerRaw struct {
	Contract *RegistryCaller // Generic read-only contract binding to access the raw methods on
}

// RegistryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RegistryTransactorRaw struct {
	Contract *RegistryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRegistry creates a new instance of Registry, bound to a specific deployed contract.
func NewRegistry(address common.Address, backend bind.ContractBackend) (*Registry, error) {
	contract, err := bindRegistry(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Registry{RegistryCaller: RegistryCaller{contract: contract}, RegistryTransactor: RegistryTransactor{contract: contract}, RegistryFilterer: RegistryFilterer{contract: contract}}, nil
}

// NewRegistryCaller creates a new read-only instance of Registry, bound to a specific deployed contract.
func NewRegistryCaller(address common.Address, caller bind.ContractCaller) (*RegistryCaller, error) {
	contract, err := bindRegistry(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RegistryCaller{contract: contract}, nil
}

// NewRegistryTransactor creates a new write-only instance of Registry, bound to a specific deployed contract.
func NewRegistryTransactor(address common.Address, transactor bind.ContractTransactor) (*RegistryTransactor, error) {
	contract, err := bindRegistry(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RegistryTransactor{contract: contract}, nil
}

// NewRegistryFilterer creates a new log filterer instance of Registry, bound to a specific deployed contract.
func NewRegistryFilterer(address common.Address, filterer bind.ContractFilterer) (*RegistryFilterer, error) {
	contract, err := bindRegistry(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RegistryFilterer{contract: contract}, nil
}

// bindRegistry binds a generic wrapper to an already deployed contract.
func bindRegistry(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(RegistryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Registry *RegistryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Registry.Contract.RegistryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Registry *RegistryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Registry.Contract.RegistryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Registry *RegistryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Registry.Contract.RegistryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Registry *RegistryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Registry.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Registry *RegistryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Registry.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Registry *RegistryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Registry.Contract.contract.Transact(opts, method, params...)
}

// Lookup is a free data retrieval call binding the contract method 0xf67187ac.
//
// Solidity: function lookup(string name) view returns(address)
func (_Registry *RegistryCaller) Lookup(opts *bind.CallOpts, name string) (common.Address, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "lookup", name)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Lookup is a free data retrieval call binding the contract method 0xf67187ac.
//
// Solidity: function lookup(string name) view returns(address)
func (_Registry *RegistrySession) Lookup(name string) (common.Address, error) {
	return _Registry.Contract.Lookup(&_Registry.CallOpts, name)
}

// Lookup is a free data retrieval call binding the contract method 0xf67187ac.
//
// Solidity: function lookup(string name) view returns(address)
func (_Registry *RegistryCallerSession) Lookup(name string) (common.Address, error) {
	return _Registry.Contract.Lookup(&_Registry.CallOpts, name)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_Registry *RegistryTransactor) GrantOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "grantOperator", _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_Registry *RegistrySession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _Registry.Contract.GrantOperator(&_Registry.TransactOpts, _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_Registry *RegistryTransactorSession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _Registry.Contract.GrantOperator(&_Registry.TransactOpts, _operator)
}

// Register is a paid mutator transaction binding the contract method 0x1e59c529.
//
// Solidity: function register(string name, address dst) returns()
func (_Registry *RegistryTransactor) Register(opts *bind.TransactOpts, name string, dst common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "register", name, dst)
}

// Register is a paid mutator transaction binding the contract method 0x1e59c529.
//
// Solidity: function register(string name, address dst) returns()
func (_Registry *RegistrySession) Register(name string, dst common.Address) (*types.Transaction, error) {
	return _Registry.Contract.Register(&_Registry.TransactOpts, name, dst)
}

// Register is a paid mutator transaction binding the contract method 0x1e59c529.
//
// Solidity: function register(string name, address dst) returns()
func (_Registry *RegistryTransactorSession) Register(name string, dst common.Address) (*types.Transaction, error) {
	return _Registry.Contract.Register(&_Registry.TransactOpts, name, dst)
}

// Remove is a paid mutator transaction binding the contract method 0x80599e4b.
//
// Solidity: function remove(string name) returns()
func (_Registry *RegistryTransactor) Remove(opts *bind.TransactOpts, name string) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "remove", name)
}

// Remove is a paid mutator transaction binding the contract method 0x80599e4b.
//
// Solidity: function remove(string name) returns()
func (_Registry *RegistrySession) Remove(name string) (*types.Transaction, error) {
	return _Registry.Contract.Remove(&_Registry.TransactOpts, name)
}

// Remove is a paid mutator transaction binding the contract method 0x80599e4b.
//
// Solidity: function remove(string name) returns()
func (_Registry *RegistryTransactorSession) Remove(name string) (*types.Transaction, error) {
	return _Registry.Contract.Remove(&_Registry.TransactOpts, name)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_Registry *RegistryTransactor) RevokeOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "revokeOperator", _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_Registry *RegistrySession) RevokeOperator(_operator common.Address) (*types.Transaction, error) {
	return _Registry.Contract.RevokeOperator(&_Registry.TransactOpts, _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_Registry *RegistryTransactorSession) RevokeOperator(_operator common.Address) (*types.Transaction, error) {
	return _Registry.Contract.RevokeOperator(&_Registry.TransactOpts, _operator)
}

// RegistryClientMetaData contains all meta data concerning the RegistryClient contract.
var RegistryClientMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"reloadRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// RegistryClientABI is the input ABI used to generate the binding from.
// Deprecated: Use RegistryClientMetaData.ABI instead.
var RegistryClientABI = RegistryClientMetaData.ABI

// RegistryClient is an auto generated Go binding around an Ethereum contract.
type RegistryClient struct {
	RegistryClientCaller     // Read-only binding to the contract
	RegistryClientTransactor // Write-only binding to the contract
	RegistryClientFilterer   // Log filterer for contract events
}

// RegistryClientCaller is an auto generated read-only Go binding around an Ethereum contract.
type RegistryClientCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryClientTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RegistryClientTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryClientFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RegistryClientFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryClientSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RegistryClientSession struct {
	Contract     *RegistryClient   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RegistryClientCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RegistryClientCallerSession struct {
	Contract *RegistryClientCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// RegistryClientTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RegistryClientTransactorSession struct {
	Contract     *RegistryClientTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// RegistryClientRaw is an auto generated low-level Go binding around an Ethereum contract.
type RegistryClientRaw struct {
	Contract *RegistryClient // Generic contract binding to access the raw methods on
}

// RegistryClientCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RegistryClientCallerRaw struct {
	Contract *RegistryClientCaller // Generic read-only contract binding to access the raw methods on
}

// RegistryClientTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RegistryClientTransactorRaw struct {
	Contract *RegistryClientTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRegistryClient creates a new instance of RegistryClient, bound to a specific deployed contract.
func NewRegistryClient(address common.Address, backend bind.ContractBackend) (*RegistryClient, error) {
	contract, err := bindRegistryClient(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RegistryClient{RegistryClientCaller: RegistryClientCaller{contract: contract}, RegistryClientTransactor: RegistryClientTransactor{contract: contract}, RegistryClientFilterer: RegistryClientFilterer{contract: contract}}, nil
}

// NewRegistryClientCaller creates a new read-only instance of RegistryClient, bound to a specific deployed contract.
func NewRegistryClientCaller(address common.Address, caller bind.ContractCaller) (*RegistryClientCaller, error) {
	contract, err := bindRegistryClient(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RegistryClientCaller{contract: contract}, nil
}

// NewRegistryClientTransactor creates a new write-only instance of RegistryClient, bound to a specific deployed contract.
func NewRegistryClientTransactor(address common.Address, transactor bind.ContractTransactor) (*RegistryClientTransactor, error) {
	contract, err := bindRegistryClient(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RegistryClientTransactor{contract: contract}, nil
}

// NewRegistryClientFilterer creates a new log filterer instance of RegistryClient, bound to a specific deployed contract.
func NewRegistryClientFilterer(address common.Address, filterer bind.ContractFilterer) (*RegistryClientFilterer, error) {
	contract, err := bindRegistryClient(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RegistryClientFilterer{contract: contract}, nil
}

// bindRegistryClient binds a generic wrapper to an already deployed contract.
func bindRegistryClient(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(RegistryClientABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RegistryClient *RegistryClientRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RegistryClient.Contract.RegistryClientCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RegistryClient *RegistryClientRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryClient.Contract.RegistryClientTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RegistryClient *RegistryClientRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RegistryClient.Contract.RegistryClientTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RegistryClient *RegistryClientCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RegistryClient.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RegistryClient *RegistryClientTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryClient.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RegistryClient *RegistryClientTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RegistryClient.Contract.contract.Transact(opts, method, params...)
}

// ReloadRegistry is a paid mutator transaction binding the contract method 0x1476601d.
//
// Solidity: function reloadRegistry() returns()
func (_RegistryClient *RegistryClientTransactor) ReloadRegistry(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryClient.contract.Transact(opts, "reloadRegistry")
}

// ReloadRegistry is a paid mutator transaction binding the contract method 0x1476601d.
//
// Solidity: function reloadRegistry() returns()
func (_RegistryClient *RegistryClientSession) ReloadRegistry() (*types.Transaction, error) {
	return _RegistryClient.Contract.ReloadRegistry(&_RegistryClient.TransactOpts)
}

// ReloadRegistry is a paid mutator transaction binding the contract method 0x1476601d.
//
// Solidity: function reloadRegistry() returns()
func (_RegistryClient *RegistryClientTransactorSession) ReloadRegistry() (*types.Transaction, error) {
	return _RegistryClient.Contract.ReloadRegistry(&_RegistryClient.TransactOpts)
}

// SigmoidMetaData contains all meta data concerning the Sigmoid contract.
var SigmoidMetaData = &bind.MetaData{
	ABI: "[]",
}

// SigmoidABI is the input ABI used to generate the binding from.
// Deprecated: Use SigmoidMetaData.ABI instead.
var SigmoidABI = SigmoidMetaData.ABI

// Sigmoid is an auto generated Go binding around an Ethereum contract.
type Sigmoid struct {
	SigmoidCaller     // Read-only binding to the contract
	SigmoidTransactor // Write-only binding to the contract
	SigmoidFilterer   // Log filterer for contract events
}

// SigmoidCaller is an auto generated read-only Go binding around an Ethereum contract.
type SigmoidCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SigmoidTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SigmoidTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SigmoidFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SigmoidFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SigmoidSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SigmoidSession struct {
	Contract     *Sigmoid          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SigmoidCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SigmoidCallerSession struct {
	Contract *SigmoidCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// SigmoidTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SigmoidTransactorSession struct {
	Contract     *SigmoidTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// SigmoidRaw is an auto generated low-level Go binding around an Ethereum contract.
type SigmoidRaw struct {
	Contract *Sigmoid // Generic contract binding to access the raw methods on
}

// SigmoidCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SigmoidCallerRaw struct {
	Contract *SigmoidCaller // Generic read-only contract binding to access the raw methods on
}

// SigmoidTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SigmoidTransactorRaw struct {
	Contract *SigmoidTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSigmoid creates a new instance of Sigmoid, bound to a specific deployed contract.
func NewSigmoid(address common.Address, backend bind.ContractBackend) (*Sigmoid, error) {
	contract, err := bindSigmoid(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Sigmoid{SigmoidCaller: SigmoidCaller{contract: contract}, SigmoidTransactor: SigmoidTransactor{contract: contract}, SigmoidFilterer: SigmoidFilterer{contract: contract}}, nil
}

// NewSigmoidCaller creates a new read-only instance of Sigmoid, bound to a specific deployed contract.
func NewSigmoidCaller(address common.Address, caller bind.ContractCaller) (*SigmoidCaller, error) {
	contract, err := bindSigmoid(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SigmoidCaller{contract: contract}, nil
}

// NewSigmoidTransactor creates a new write-only instance of Sigmoid, bound to a specific deployed contract.
func NewSigmoidTransactor(address common.Address, transactor bind.ContractTransactor) (*SigmoidTransactor, error) {
	contract, err := bindSigmoid(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SigmoidTransactor{contract: contract}, nil
}

// NewSigmoidFilterer creates a new log filterer instance of Sigmoid, bound to a specific deployed contract.
func NewSigmoidFilterer(address common.Address, filterer bind.ContractFilterer) (*SigmoidFilterer, error) {
	contract, err := bindSigmoid(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SigmoidFilterer{contract: contract}, nil
}

// bindSigmoid binds a generic wrapper to an already deployed contract.
func bindSigmoid(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SigmoidABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Sigmoid *SigmoidRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Sigmoid.Contract.SigmoidCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Sigmoid *SigmoidRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Sigmoid.Contract.SigmoidTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Sigmoid *SigmoidRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Sigmoid.Contract.SigmoidTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Sigmoid *SigmoidCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Sigmoid.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Sigmoid *SigmoidTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Sigmoid.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Sigmoid *SigmoidTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Sigmoid.Contract.contract.Transact(opts, method, params...)
}

// SimpleAuthMetaData contains all meta data concerning the SimpleAuth contract.
var SimpleAuthMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50600280546001600160a01b0319163390811790915561002f90610034565b610129565b6002546001600160a01b031633148061005c57503360009081526020819052604090205460ff165b6100c65760405162461bcd60e51b815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527037b934bd32b21037b832b930ba37b9399760791b606482015260840160405180910390fd5b6001600160a01b0381166000908152602081905260408120805460ff191660019081179091558054916100f883610100565b919050555050565b600060001982141561012257634e487b7160e01b600052601160045260246000fd5b5060010190565b610423806101386000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063e348da131461003b578063fad8b32a14610050575b600080fd5b61004e610049366004610313565b610063565b005b61004e61005e366004610313565b61018e565b60025473ffffffffffffffffffffffffffffffffffffffff1633148061009857503360009081526020819052604090205460ff165b610129576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527f6f72697a6564206f70657261746f72732e00000000000000000000000000000060648201526084015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8116600090815260208190526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660019081179091558054916101868361037f565b919050555050565b60025473ffffffffffffffffffffffffffffffffffffffff163314806101c357503360009081526020819052604090205460ff165b61024f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527f6f72697a6564206f70657261746f72732e0000000000000000000000000000006064820152608401610120565b60018054116102ba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f43616e27742072656d6f766520616c6c206f70657261746f72730000000000006044820152606401610120565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260208190526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690556001805491610186836103b8565b60006020828403121561032557600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461034957600080fd5b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156103b1576103b1610350565b5060010190565b6000816103c7576103c7610350565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019056fea2646970667358221220356b08f5e61350e50b2db2fa77ee2fa421262a828ca42a8691f4dc933ac509f964736f6c634300080b0033",
}

// SimpleAuthABI is the input ABI used to generate the binding from.
// Deprecated: Use SimpleAuthMetaData.ABI instead.
var SimpleAuthABI = SimpleAuthMetaData.ABI

// SimpleAuthBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SimpleAuthMetaData.Bin instead.
var SimpleAuthBin = SimpleAuthMetaData.Bin

// DeploySimpleAuth deploys a new Ethereum contract, binding an instance of SimpleAuth to it.
func DeploySimpleAuth(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *SimpleAuth, error) {
	parsed, err := SimpleAuthMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SimpleAuthBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SimpleAuth{SimpleAuthCaller: SimpleAuthCaller{contract: contract}, SimpleAuthTransactor: SimpleAuthTransactor{contract: contract}, SimpleAuthFilterer: SimpleAuthFilterer{contract: contract}}, nil
}

// SimpleAuth is an auto generated Go binding around an Ethereum contract.
type SimpleAuth struct {
	SimpleAuthCaller     // Read-only binding to the contract
	SimpleAuthTransactor // Write-only binding to the contract
	SimpleAuthFilterer   // Log filterer for contract events
}

// SimpleAuthCaller is an auto generated read-only Go binding around an Ethereum contract.
type SimpleAuthCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimpleAuthTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SimpleAuthTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimpleAuthFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SimpleAuthFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimpleAuthSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SimpleAuthSession struct {
	Contract     *SimpleAuth       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SimpleAuthCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SimpleAuthCallerSession struct {
	Contract *SimpleAuthCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// SimpleAuthTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SimpleAuthTransactorSession struct {
	Contract     *SimpleAuthTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// SimpleAuthRaw is an auto generated low-level Go binding around an Ethereum contract.
type SimpleAuthRaw struct {
	Contract *SimpleAuth // Generic contract binding to access the raw methods on
}

// SimpleAuthCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SimpleAuthCallerRaw struct {
	Contract *SimpleAuthCaller // Generic read-only contract binding to access the raw methods on
}

// SimpleAuthTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SimpleAuthTransactorRaw struct {
	Contract *SimpleAuthTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSimpleAuth creates a new instance of SimpleAuth, bound to a specific deployed contract.
func NewSimpleAuth(address common.Address, backend bind.ContractBackend) (*SimpleAuth, error) {
	contract, err := bindSimpleAuth(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SimpleAuth{SimpleAuthCaller: SimpleAuthCaller{contract: contract}, SimpleAuthTransactor: SimpleAuthTransactor{contract: contract}, SimpleAuthFilterer: SimpleAuthFilterer{contract: contract}}, nil
}

// NewSimpleAuthCaller creates a new read-only instance of SimpleAuth, bound to a specific deployed contract.
func NewSimpleAuthCaller(address common.Address, caller bind.ContractCaller) (*SimpleAuthCaller, error) {
	contract, err := bindSimpleAuth(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SimpleAuthCaller{contract: contract}, nil
}

// NewSimpleAuthTransactor creates a new write-only instance of SimpleAuth, bound to a specific deployed contract.
func NewSimpleAuthTransactor(address common.Address, transactor bind.ContractTransactor) (*SimpleAuthTransactor, error) {
	contract, err := bindSimpleAuth(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SimpleAuthTransactor{contract: contract}, nil
}

// NewSimpleAuthFilterer creates a new log filterer instance of SimpleAuth, bound to a specific deployed contract.
func NewSimpleAuthFilterer(address common.Address, filterer bind.ContractFilterer) (*SimpleAuthFilterer, error) {
	contract, err := bindSimpleAuth(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SimpleAuthFilterer{contract: contract}, nil
}

// bindSimpleAuth binds a generic wrapper to an already deployed contract.
func bindSimpleAuth(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SimpleAuthABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SimpleAuth *SimpleAuthRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SimpleAuth.Contract.SimpleAuthCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SimpleAuth *SimpleAuthRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SimpleAuth.Contract.SimpleAuthTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SimpleAuth *SimpleAuthRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SimpleAuth.Contract.SimpleAuthTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SimpleAuth *SimpleAuthCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SimpleAuth.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SimpleAuth *SimpleAuthTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SimpleAuth.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SimpleAuth *SimpleAuthTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SimpleAuth.Contract.contract.Transact(opts, method, params...)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_SimpleAuth *SimpleAuthTransactor) GrantOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _SimpleAuth.contract.Transact(opts, "grantOperator", _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_SimpleAuth *SimpleAuthSession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _SimpleAuth.Contract.GrantOperator(&_SimpleAuth.TransactOpts, _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_SimpleAuth *SimpleAuthTransactorSession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _SimpleAuth.Contract.GrantOperator(&_SimpleAuth.TransactOpts, _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_SimpleAuth *SimpleAuthTransactor) RevokeOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _SimpleAuth.contract.Transact(opts, "revokeOperator", _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_SimpleAuth *SimpleAuthSession) RevokeOperator(_operator common.Address) (*types.Transaction, error) {
	return _SimpleAuth.Contract.RevokeOperator(&_SimpleAuth.TransactOpts, _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_SimpleAuth *SimpleAuthTransactorSession) RevokeOperator(_operator common.Address) (*types.Transaction, error) {
	return _SimpleAuth.Contract.RevokeOperator(&_SimpleAuth.TransactOpts, _operator)
}

// SnapshotsMetaData contains all meta data concerning the Snapshots contract.
var SnapshotsMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractIETHDKG\",\"name\":\"ethdkg_\",\"type\":\"address\"},{\"internalType\":\"contractIValidatorPool\",\"name\":\"validatorPool_\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"chainID_\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"factory_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"safeToProceedConsensus\",\"type\":\"bool\"}],\"name\":\"SnapshotTaken\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getBlockClaimsFromLatestSnapshot\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"chainId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"height\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"txCount\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"prevBlock\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"txRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"headerRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structBClaimsParserLibrary.BClaims\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotNumber\",\"type\":\"uint256\"}],\"name\":\"getBlockClaimsFromSnapshot\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"chainId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"height\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"txCount\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"prevBlock\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"txRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"headerRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structBClaimsParserLibrary.BClaims\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainIdFromLatestSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotNumber\",\"type\":\"uint256\"}],\"name\":\"getChainIdFromSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommittedHeightFromLatestSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotNumber\",\"type\":\"uint256\"}],\"name\":\"getCommittedHeightFromSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEpochLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestSnapshot\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"committedAt\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"chainId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"height\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"txCount\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"prevBlock\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"txRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"headerRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structBClaimsParserLibrary.BClaims\",\"name\":\"blockClaims\",\"type\":\"tuple\"},{\"internalType\":\"uint256[2]\",\"name\":\"signature\",\"type\":\"uint256[2]\"}],\"internalType\":\"structSnapshot\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMadnetHeightFromLatestSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotNumber\",\"type\":\"uint256\"}],\"name\":\"getMadnetHeightFromSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSignatureFromLatestSnapshot\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotNumber\",\"type\":\"uint256\"}],\"name\":\"getSignatureFromSnapshot\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotNumber\",\"type\":\"uint256\"}],\"name\":\"getSnapshot\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"committedAt\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"chainId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"height\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"txCount\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"prevBlock\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"txRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"headerRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structBClaimsParserLibrary.BClaims\",\"name\":\"blockClaims\",\"type\":\"tuple\"},{\"internalType\":\"uint256[2]\",\"name\":\"signature\",\"type\":\"uint256[2]\"}],\"internalType\":\"structSnapshot\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSnapshotDesperationDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSnapshotDesperationFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numValidators\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"myIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blocksSinceDesperation\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"blsig\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"desperationFactor\",\"type\":\"uint256\"}],\"name\":\"mayValidatorSnapshot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"epochLength_\",\"type\":\"uint32\"}],\"name\":\"setEpochLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"desperationDelay_\",\"type\":\"uint32\"}],\"name\":\"setSnapshotDesperationDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"desperationFactor_\",\"type\":\"uint32\"}],\"name\":\"setSnapshotDesperationFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"groupSignature_\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"bClaims_\",\"type\":\"bytes\"}],\"name\":\"snapshot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "",
}

// SnapshotsABI is the input ABI used to generate the binding from.
// Deprecated: Use SnapshotsMetaData.ABI instead.
var SnapshotsABI = SnapshotsMetaData.ABI

// SnapshotsBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SnapshotsMetaData.Bin instead.
var SnapshotsBin = SnapshotsMetaData.Bin

// DeploySnapshots deploys a new Ethereum contract, binding an instance of Snapshots to it.
func DeploySnapshots(auth *bind.TransactOpts, backend bind.ContractBackend, ethdkg_ common.Address, validatorPool_ common.Address, chainID_ uint32, factory_ common.Address) (common.Address, *types.Transaction, *Snapshots, error) {
	parsed, err := SnapshotsMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SnapshotsBin), backend, ethdkg_, validatorPool_, chainID_, factory_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Snapshots{SnapshotsCaller: SnapshotsCaller{contract: contract}, SnapshotsTransactor: SnapshotsTransactor{contract: contract}, SnapshotsFilterer: SnapshotsFilterer{contract: contract}}, nil
}

// Snapshots is an auto generated Go binding around an Ethereum contract.
type Snapshots struct {
	SnapshotsCaller     // Read-only binding to the contract
	SnapshotsTransactor // Write-only binding to the contract
	SnapshotsFilterer   // Log filterer for contract events
}

// SnapshotsCaller is an auto generated read-only Go binding around an Ethereum contract.
type SnapshotsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SnapshotsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SnapshotsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SnapshotsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SnapshotsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SnapshotsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SnapshotsSession struct {
	Contract     *Snapshots        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SnapshotsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SnapshotsCallerSession struct {
	Contract *SnapshotsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// SnapshotsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SnapshotsTransactorSession struct {
	Contract     *SnapshotsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// SnapshotsRaw is an auto generated low-level Go binding around an Ethereum contract.
type SnapshotsRaw struct {
	Contract *Snapshots // Generic contract binding to access the raw methods on
}

// SnapshotsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SnapshotsCallerRaw struct {
	Contract *SnapshotsCaller // Generic read-only contract binding to access the raw methods on
}

// SnapshotsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SnapshotsTransactorRaw struct {
	Contract *SnapshotsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSnapshots creates a new instance of Snapshots, bound to a specific deployed contract.
func NewSnapshots(address common.Address, backend bind.ContractBackend) (*Snapshots, error) {
	contract, err := bindSnapshots(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Snapshots{SnapshotsCaller: SnapshotsCaller{contract: contract}, SnapshotsTransactor: SnapshotsTransactor{contract: contract}, SnapshotsFilterer: SnapshotsFilterer{contract: contract}}, nil
}

// NewSnapshotsCaller creates a new read-only instance of Snapshots, bound to a specific deployed contract.
func NewSnapshotsCaller(address common.Address, caller bind.ContractCaller) (*SnapshotsCaller, error) {
	contract, err := bindSnapshots(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SnapshotsCaller{contract: contract}, nil
}

// NewSnapshotsTransactor creates a new write-only instance of Snapshots, bound to a specific deployed contract.
func NewSnapshotsTransactor(address common.Address, transactor bind.ContractTransactor) (*SnapshotsTransactor, error) {
	contract, err := bindSnapshots(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SnapshotsTransactor{contract: contract}, nil
}

// NewSnapshotsFilterer creates a new log filterer instance of Snapshots, bound to a specific deployed contract.
func NewSnapshotsFilterer(address common.Address, filterer bind.ContractFilterer) (*SnapshotsFilterer, error) {
	contract, err := bindSnapshots(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SnapshotsFilterer{contract: contract}, nil
}

// bindSnapshots binds a generic wrapper to an already deployed contract.
func bindSnapshots(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SnapshotsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Snapshots *SnapshotsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Snapshots.Contract.SnapshotsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Snapshots *SnapshotsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Snapshots.Contract.SnapshotsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Snapshots *SnapshotsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Snapshots.Contract.SnapshotsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Snapshots *SnapshotsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Snapshots.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Snapshots *SnapshotsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Snapshots.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Snapshots *SnapshotsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Snapshots.Contract.contract.Transact(opts, method, params...)
}

// GetBlockClaimsFromLatestSnapshot is a free data retrieval call binding the contract method 0xc2ea6603.
//
// Solidity: function getBlockClaimsFromLatestSnapshot() view returns((uint32,uint32,uint32,bytes32,bytes32,bytes32,bytes32))
func (_Snapshots *SnapshotsCaller) GetBlockClaimsFromLatestSnapshot(opts *bind.CallOpts) (BClaimsParserLibraryBClaims, error) {
	var out []interface{}
	err := _Snapshots.contract.Call(opts, &out, "getBlockClaimsFromLatestSnapshot")

	if err != nil {
		return *new(BClaimsParserLibraryBClaims), err
	}

	out0 := *abi.ConvertType(out[0], new(BClaimsParserLibraryBClaims)).(*BClaimsParserLibraryBClaims)

	return out0, err

}

// GetBlockClaimsFromLatestSnapshot is a free data retrieval call binding the contract method 0xc2ea6603.
//
// Solidity: function getBlockClaimsFromLatestSnapshot() view returns((uint32,uint32,uint32,bytes32,bytes32,bytes32,bytes32))
func (_Snapshots *SnapshotsSession) GetBlockClaimsFromLatestSnapshot() (BClaimsParserLibraryBClaims, error) {
	return _Snapshots.Contract.GetBlockClaimsFromLatestSnapshot(&_Snapshots.CallOpts)
}

// GetBlockClaimsFromLatestSnapshot is a free data retrieval call binding the contract method 0xc2ea6603.
//
// Solidity: function getBlockClaimsFromLatestSnapshot() view returns((uint32,uint32,uint32,bytes32,bytes32,bytes32,bytes32))
func (_Snapshots *SnapshotsCallerSession) GetBlockClaimsFromLatestSnapshot() (BClaimsParserLibraryBClaims, error) {
	return _Snapshots.Contract.GetBlockClaimsFromLatestSnapshot(&_Snapshots.CallOpts)
}

// GetBlockClaimsFromSnapshot is a free data retrieval call binding the contract method 0x45dfc599.
//
// Solidity: function getBlockClaimsFromSnapshot(uint256 snapshotNumber) view returns((uint32,uint32,uint32,bytes32,bytes32,bytes32,bytes32))
func (_Snapshots *SnapshotsCaller) GetBlockClaimsFromSnapshot(opts *bind.CallOpts, snapshotNumber *big.Int) (BClaimsParserLibraryBClaims, error) {
	var out []interface{}
	err := _Snapshots.contract.Call(opts, &out, "getBlockClaimsFromSnapshot", snapshotNumber)

	if err != nil {
		return *new(BClaimsParserLibraryBClaims), err
	}

	out0 := *abi.ConvertType(out[0], new(BClaimsParserLibraryBClaims)).(*BClaimsParserLibraryBClaims)

	return out0, err

}

// GetBlockClaimsFromSnapshot is a free data retrieval call binding the contract method 0x45dfc599.
//
// Solidity: function getBlockClaimsFromSnapshot(uint256 snapshotNumber) view returns((uint32,uint32,uint32,bytes32,bytes32,bytes32,bytes32))
func (_Snapshots *SnapshotsSession) GetBlockClaimsFromSnapshot(snapshotNumber *big.Int) (BClaimsParserLibraryBClaims, error) {
	return _Snapshots.Contract.GetBlockClaimsFromSnapshot(&_Snapshots.CallOpts, snapshotNumber)
}

// GetBlockClaimsFromSnapshot is a free data retrieval call binding the contract method 0x45dfc599.
//
// Solidity: function getBlockClaimsFromSnapshot(uint256 snapshotNumber) view returns((uint32,uint32,uint32,bytes32,bytes32,bytes32,bytes32))
func (_Snapshots *SnapshotsCallerSession) GetBlockClaimsFromSnapshot(snapshotNumber *big.Int) (BClaimsParserLibraryBClaims, error) {
	return _Snapshots.Contract.GetBlockClaimsFromSnapshot(&_Snapshots.CallOpts, snapshotNumber)
}

// GetChainId is a free data retrieval call binding the contract method 0x3408e470.
//
// Solidity: function getChainId() view returns(uint256)
func (_Snapshots *SnapshotsCaller) GetChainId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Snapshots.contract.Call(opts, &out, "getChainId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetChainId is a free data retrieval call binding the contract method 0x3408e470.
//
// Solidity: function getChainId() view returns(uint256)
func (_Snapshots *SnapshotsSession) GetChainId() (*big.Int, error) {
	return _Snapshots.Contract.GetChainId(&_Snapshots.CallOpts)
}

// GetChainId is a free data retrieval call binding the contract method 0x3408e470.
//
// Solidity: function getChainId() view returns(uint256)
func (_Snapshots *SnapshotsCallerSession) GetChainId() (*big.Int, error) {
	return _Snapshots.Contract.GetChainId(&_Snapshots.CallOpts)
}

// GetChainIdFromLatestSnapshot is a free data retrieval call binding the contract method 0xd9c11657.
//
// Solidity: function getChainIdFromLatestSnapshot() view returns(uint256)
func (_Snapshots *SnapshotsCaller) GetChainIdFromLatestSnapshot(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Snapshots.contract.Call(opts, &out, "getChainIdFromLatestSnapshot")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetChainIdFromLatestSnapshot is a free data retrieval call binding the contract method 0xd9c11657.
//
// Solidity: function getChainIdFromLatestSnapshot() view returns(uint256)
func (_Snapshots *SnapshotsSession) GetChainIdFromLatestSnapshot() (*big.Int, error) {
	return _Snapshots.Contract.GetChainIdFromLatestSnapshot(&_Snapshots.CallOpts)
}

// GetChainIdFromLatestSnapshot is a free data retrieval call binding the contract method 0xd9c11657.
//
// Solidity: function getChainIdFromLatestSnapshot() view returns(uint256)
func (_Snapshots *SnapshotsCallerSession) GetChainIdFromLatestSnapshot() (*big.Int, error) {
	return _Snapshots.Contract.GetChainIdFromLatestSnapshot(&_Snapshots.CallOpts)
}

// GetChainIdFromSnapshot is a free data retrieval call binding the contract method 0x19f74669.
//
// Solidity: function getChainIdFromSnapshot(uint256 snapshotNumber) view returns(uint256)
func (_Snapshots *SnapshotsCaller) GetChainIdFromSnapshot(opts *bind.CallOpts, snapshotNumber *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Snapshots.contract.Call(opts, &out, "getChainIdFromSnapshot", snapshotNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetChainIdFromSnapshot is a free data retrieval call binding the contract method 0x19f74669.
//
// Solidity: function getChainIdFromSnapshot(uint256 snapshotNumber) view returns(uint256)
func (_Snapshots *SnapshotsSession) GetChainIdFromSnapshot(snapshotNumber *big.Int) (*big.Int, error) {
	return _Snapshots.Contract.GetChainIdFromSnapshot(&_Snapshots.CallOpts, snapshotNumber)
}

// GetChainIdFromSnapshot is a free data retrieval call binding the contract method 0x19f74669.
//
// Solidity: function getChainIdFromSnapshot(uint256 snapshotNumber) view returns(uint256)
func (_Snapshots *SnapshotsCallerSession) GetChainIdFromSnapshot(snapshotNumber *big.Int) (*big.Int, error) {
	return _Snapshots.Contract.GetChainIdFromSnapshot(&_Snapshots.CallOpts, snapshotNumber)
}

// GetCommittedHeightFromLatestSnapshot is a free data retrieval call binding the contract method 0x026c2b7e.
//
// Solidity: function getCommittedHeightFromLatestSnapshot() view returns(uint256)
func (_Snapshots *SnapshotsCaller) GetCommittedHeightFromLatestSnapshot(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Snapshots.contract.Call(opts, &out, "getCommittedHeightFromLatestSnapshot")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCommittedHeightFromLatestSnapshot is a free data retrieval call binding the contract method 0x026c2b7e.
//
// Solidity: function getCommittedHeightFromLatestSnapshot() view returns(uint256)
func (_Snapshots *SnapshotsSession) GetCommittedHeightFromLatestSnapshot() (*big.Int, error) {
	return _Snapshots.Contract.GetCommittedHeightFromLatestSnapshot(&_Snapshots.CallOpts)
}

// GetCommittedHeightFromLatestSnapshot is a free data retrieval call binding the contract method 0x026c2b7e.
//
// Solidity: function getCommittedHeightFromLatestSnapshot() view returns(uint256)
func (_Snapshots *SnapshotsCallerSession) GetCommittedHeightFromLatestSnapshot() (*big.Int, error) {
	return _Snapshots.Contract.GetCommittedHeightFromLatestSnapshot(&_Snapshots.CallOpts)
}

// GetCommittedHeightFromSnapshot is a free data retrieval call binding the contract method 0xe18c697a.
//
// Solidity: function getCommittedHeightFromSnapshot(uint256 snapshotNumber) view returns(uint256)
func (_Snapshots *SnapshotsCaller) GetCommittedHeightFromSnapshot(opts *bind.CallOpts, snapshotNumber *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Snapshots.contract.Call(opts, &out, "getCommittedHeightFromSnapshot", snapshotNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCommittedHeightFromSnapshot is a free data retrieval call binding the contract method 0xe18c697a.
//
// Solidity: function getCommittedHeightFromSnapshot(uint256 snapshotNumber) view returns(uint256)
func (_Snapshots *SnapshotsSession) GetCommittedHeightFromSnapshot(snapshotNumber *big.Int) (*big.Int, error) {
	return _Snapshots.Contract.GetCommittedHeightFromSnapshot(&_Snapshots.CallOpts, snapshotNumber)
}

// GetCommittedHeightFromSnapshot is a free data retrieval call binding the contract method 0xe18c697a.
//
// Solidity: function getCommittedHeightFromSnapshot(uint256 snapshotNumber) view returns(uint256)
func (_Snapshots *SnapshotsCallerSession) GetCommittedHeightFromSnapshot(snapshotNumber *big.Int) (*big.Int, error) {
	return _Snapshots.Contract.GetCommittedHeightFromSnapshot(&_Snapshots.CallOpts, snapshotNumber)
}

// GetEpoch is a free data retrieval call binding the contract method 0x757991a8.
//
// Solidity: function getEpoch() view returns(uint256)
func (_Snapshots *SnapshotsCaller) GetEpoch(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Snapshots.contract.Call(opts, &out, "getEpoch")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetEpoch is a free data retrieval call binding the contract method 0x757991a8.
//
// Solidity: function getEpoch() view returns(uint256)
func (_Snapshots *SnapshotsSession) GetEpoch() (*big.Int, error) {
	return _Snapshots.Contract.GetEpoch(&_Snapshots.CallOpts)
}

// GetEpoch is a free data retrieval call binding the contract method 0x757991a8.
//
// Solidity: function getEpoch() view returns(uint256)
func (_Snapshots *SnapshotsCallerSession) GetEpoch() (*big.Int, error) {
	return _Snapshots.Contract.GetEpoch(&_Snapshots.CallOpts)
}

// GetEpochLength is a free data retrieval call binding the contract method 0xcfe8a73b.
//
// Solidity: function getEpochLength() view returns(uint256)
func (_Snapshots *SnapshotsCaller) GetEpochLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Snapshots.contract.Call(opts, &out, "getEpochLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetEpochLength is a free data retrieval call binding the contract method 0xcfe8a73b.
//
// Solidity: function getEpochLength() view returns(uint256)
func (_Snapshots *SnapshotsSession) GetEpochLength() (*big.Int, error) {
	return _Snapshots.Contract.GetEpochLength(&_Snapshots.CallOpts)
}

// GetEpochLength is a free data retrieval call binding the contract method 0xcfe8a73b.
//
// Solidity: function getEpochLength() view returns(uint256)
func (_Snapshots *SnapshotsCallerSession) GetEpochLength() (*big.Int, error) {
	return _Snapshots.Contract.GetEpochLength(&_Snapshots.CallOpts)
}

// GetLatestSnapshot is a free data retrieval call binding the contract method 0xd518f243.
//
// Solidity: function getLatestSnapshot() view returns((uint256,(uint32,uint32,uint32,bytes32,bytes32,bytes32,bytes32),uint256[2]))
func (_Snapshots *SnapshotsCaller) GetLatestSnapshot(opts *bind.CallOpts) (Snapshot, error) {
	var out []interface{}
	err := _Snapshots.contract.Call(opts, &out, "getLatestSnapshot")

	if err != nil {
		return *new(Snapshot), err
	}

	out0 := *abi.ConvertType(out[0], new(Snapshot)).(*Snapshot)

	return out0, err

}

// GetLatestSnapshot is a free data retrieval call binding the contract method 0xd518f243.
//
// Solidity: function getLatestSnapshot() view returns((uint256,(uint32,uint32,uint32,bytes32,bytes32,bytes32,bytes32),uint256[2]))
func (_Snapshots *SnapshotsSession) GetLatestSnapshot() (Snapshot, error) {
	return _Snapshots.Contract.GetLatestSnapshot(&_Snapshots.CallOpts)
}

// GetLatestSnapshot is a free data retrieval call binding the contract method 0xd518f243.
//
// Solidity: function getLatestSnapshot() view returns((uint256,(uint32,uint32,uint32,bytes32,bytes32,bytes32,bytes32),uint256[2]))
func (_Snapshots *SnapshotsCallerSession) GetLatestSnapshot() (Snapshot, error) {
	return _Snapshots.Contract.GetLatestSnapshot(&_Snapshots.CallOpts)
}

// GetMadnetHeightFromLatestSnapshot is a free data retrieval call binding the contract method 0x9c262671.
//
// Solidity: function getMadnetHeightFromLatestSnapshot() view returns(uint256)
func (_Snapshots *SnapshotsCaller) GetMadnetHeightFromLatestSnapshot(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Snapshots.contract.Call(opts, &out, "getMadnetHeightFromLatestSnapshot")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMadnetHeightFromLatestSnapshot is a free data retrieval call binding the contract method 0x9c262671.
//
// Solidity: function getMadnetHeightFromLatestSnapshot() view returns(uint256)
func (_Snapshots *SnapshotsSession) GetMadnetHeightFromLatestSnapshot() (*big.Int, error) {
	return _Snapshots.Contract.GetMadnetHeightFromLatestSnapshot(&_Snapshots.CallOpts)
}

// GetMadnetHeightFromLatestSnapshot is a free data retrieval call binding the contract method 0x9c262671.
//
// Solidity: function getMadnetHeightFromLatestSnapshot() view returns(uint256)
func (_Snapshots *SnapshotsCallerSession) GetMadnetHeightFromLatestSnapshot() (*big.Int, error) {
	return _Snapshots.Contract.GetMadnetHeightFromLatestSnapshot(&_Snapshots.CallOpts)
}

// GetMadnetHeightFromSnapshot is a free data retrieval call binding the contract method 0xa8c07fc3.
//
// Solidity: function getMadnetHeightFromSnapshot(uint256 snapshotNumber) view returns(uint256)
func (_Snapshots *SnapshotsCaller) GetMadnetHeightFromSnapshot(opts *bind.CallOpts, snapshotNumber *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Snapshots.contract.Call(opts, &out, "getMadnetHeightFromSnapshot", snapshotNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMadnetHeightFromSnapshot is a free data retrieval call binding the contract method 0xa8c07fc3.
//
// Solidity: function getMadnetHeightFromSnapshot(uint256 snapshotNumber) view returns(uint256)
func (_Snapshots *SnapshotsSession) GetMadnetHeightFromSnapshot(snapshotNumber *big.Int) (*big.Int, error) {
	return _Snapshots.Contract.GetMadnetHeightFromSnapshot(&_Snapshots.CallOpts, snapshotNumber)
}

// GetMadnetHeightFromSnapshot is a free data retrieval call binding the contract method 0xa8c07fc3.
//
// Solidity: function getMadnetHeightFromSnapshot(uint256 snapshotNumber) view returns(uint256)
func (_Snapshots *SnapshotsCallerSession) GetMadnetHeightFromSnapshot(snapshotNumber *big.Int) (*big.Int, error) {
	return _Snapshots.Contract.GetMadnetHeightFromSnapshot(&_Snapshots.CallOpts, snapshotNumber)
}

// GetSignatureFromLatestSnapshot is a free data retrieval call binding the contract method 0xc0804ea9.
//
// Solidity: function getSignatureFromLatestSnapshot() view returns(uint256[2])
func (_Snapshots *SnapshotsCaller) GetSignatureFromLatestSnapshot(opts *bind.CallOpts) ([2]*big.Int, error) {
	var out []interface{}
	err := _Snapshots.contract.Call(opts, &out, "getSignatureFromLatestSnapshot")

	if err != nil {
		return *new([2]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([2]*big.Int)).(*[2]*big.Int)

	return out0, err

}

// GetSignatureFromLatestSnapshot is a free data retrieval call binding the contract method 0xc0804ea9.
//
// Solidity: function getSignatureFromLatestSnapshot() view returns(uint256[2])
func (_Snapshots *SnapshotsSession) GetSignatureFromLatestSnapshot() ([2]*big.Int, error) {
	return _Snapshots.Contract.GetSignatureFromLatestSnapshot(&_Snapshots.CallOpts)
}

// GetSignatureFromLatestSnapshot is a free data retrieval call binding the contract method 0xc0804ea9.
//
// Solidity: function getSignatureFromLatestSnapshot() view returns(uint256[2])
func (_Snapshots *SnapshotsCallerSession) GetSignatureFromLatestSnapshot() ([2]*big.Int, error) {
	return _Snapshots.Contract.GetSignatureFromLatestSnapshot(&_Snapshots.CallOpts)
}

// GetSignatureFromSnapshot is a free data retrieval call binding the contract method 0xdbe7eae7.
//
// Solidity: function getSignatureFromSnapshot(uint256 snapshotNumber) view returns(uint256[2])
func (_Snapshots *SnapshotsCaller) GetSignatureFromSnapshot(opts *bind.CallOpts, snapshotNumber *big.Int) ([2]*big.Int, error) {
	var out []interface{}
	err := _Snapshots.contract.Call(opts, &out, "getSignatureFromSnapshot", snapshotNumber)

	if err != nil {
		return *new([2]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([2]*big.Int)).(*[2]*big.Int)

	return out0, err

}

// GetSignatureFromSnapshot is a free data retrieval call binding the contract method 0xdbe7eae7.
//
// Solidity: function getSignatureFromSnapshot(uint256 snapshotNumber) view returns(uint256[2])
func (_Snapshots *SnapshotsSession) GetSignatureFromSnapshot(snapshotNumber *big.Int) ([2]*big.Int, error) {
	return _Snapshots.Contract.GetSignatureFromSnapshot(&_Snapshots.CallOpts, snapshotNumber)
}

// GetSignatureFromSnapshot is a free data retrieval call binding the contract method 0xdbe7eae7.
//
// Solidity: function getSignatureFromSnapshot(uint256 snapshotNumber) view returns(uint256[2])
func (_Snapshots *SnapshotsCallerSession) GetSignatureFromSnapshot(snapshotNumber *big.Int) ([2]*big.Int, error) {
	return _Snapshots.Contract.GetSignatureFromSnapshot(&_Snapshots.CallOpts, snapshotNumber)
}

// GetSnapshot is a free data retrieval call binding the contract method 0x76f10ad0.
//
// Solidity: function getSnapshot(uint256 snapshotNumber) view returns((uint256,(uint32,uint32,uint32,bytes32,bytes32,bytes32,bytes32),uint256[2]))
func (_Snapshots *SnapshotsCaller) GetSnapshot(opts *bind.CallOpts, snapshotNumber *big.Int) (Snapshot, error) {
	var out []interface{}
	err := _Snapshots.contract.Call(opts, &out, "getSnapshot", snapshotNumber)

	if err != nil {
		return *new(Snapshot), err
	}

	out0 := *abi.ConvertType(out[0], new(Snapshot)).(*Snapshot)

	return out0, err

}

// GetSnapshot is a free data retrieval call binding the contract method 0x76f10ad0.
//
// Solidity: function getSnapshot(uint256 snapshotNumber) view returns((uint256,(uint32,uint32,uint32,bytes32,bytes32,bytes32,bytes32),uint256[2]))
func (_Snapshots *SnapshotsSession) GetSnapshot(snapshotNumber *big.Int) (Snapshot, error) {
	return _Snapshots.Contract.GetSnapshot(&_Snapshots.CallOpts, snapshotNumber)
}

// GetSnapshot is a free data retrieval call binding the contract method 0x76f10ad0.
//
// Solidity: function getSnapshot(uint256 snapshotNumber) view returns((uint256,(uint32,uint32,uint32,bytes32,bytes32,bytes32,bytes32),uint256[2]))
func (_Snapshots *SnapshotsCallerSession) GetSnapshot(snapshotNumber *big.Int) (Snapshot, error) {
	return _Snapshots.Contract.GetSnapshot(&_Snapshots.CallOpts, snapshotNumber)
}

// GetSnapshotDesperationDelay is a free data retrieval call binding the contract method 0xd17fcc56.
//
// Solidity: function getSnapshotDesperationDelay() view returns(uint256)
func (_Snapshots *SnapshotsCaller) GetSnapshotDesperationDelay(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Snapshots.contract.Call(opts, &out, "getSnapshotDesperationDelay")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetSnapshotDesperationDelay is a free data retrieval call binding the contract method 0xd17fcc56.
//
// Solidity: function getSnapshotDesperationDelay() view returns(uint256)
func (_Snapshots *SnapshotsSession) GetSnapshotDesperationDelay() (*big.Int, error) {
	return _Snapshots.Contract.GetSnapshotDesperationDelay(&_Snapshots.CallOpts)
}

// GetSnapshotDesperationDelay is a free data retrieval call binding the contract method 0xd17fcc56.
//
// Solidity: function getSnapshotDesperationDelay() view returns(uint256)
func (_Snapshots *SnapshotsCallerSession) GetSnapshotDesperationDelay() (*big.Int, error) {
	return _Snapshots.Contract.GetSnapshotDesperationDelay(&_Snapshots.CallOpts)
}

// GetSnapshotDesperationFactor is a free data retrieval call binding the contract method 0x7cc4cce6.
//
// Solidity: function getSnapshotDesperationFactor() view returns(uint256)
func (_Snapshots *SnapshotsCaller) GetSnapshotDesperationFactor(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Snapshots.contract.Call(opts, &out, "getSnapshotDesperationFactor")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetSnapshotDesperationFactor is a free data retrieval call binding the contract method 0x7cc4cce6.
//
// Solidity: function getSnapshotDesperationFactor() view returns(uint256)
func (_Snapshots *SnapshotsSession) GetSnapshotDesperationFactor() (*big.Int, error) {
	return _Snapshots.Contract.GetSnapshotDesperationFactor(&_Snapshots.CallOpts)
}

// GetSnapshotDesperationFactor is a free data retrieval call binding the contract method 0x7cc4cce6.
//
// Solidity: function getSnapshotDesperationFactor() view returns(uint256)
func (_Snapshots *SnapshotsCallerSession) GetSnapshotDesperationFactor() (*big.Int, error) {
	return _Snapshots.Contract.GetSnapshotDesperationFactor(&_Snapshots.CallOpts)
}

// MayValidatorSnapshot is a free data retrieval call binding the contract method 0xf45fa246.
//
// Solidity: function mayValidatorSnapshot(uint256 numValidators, uint256 myIdx, uint256 blocksSinceDesperation, bytes32 blsig, uint256 desperationFactor) pure returns(bool)
func (_Snapshots *SnapshotsCaller) MayValidatorSnapshot(opts *bind.CallOpts, numValidators *big.Int, myIdx *big.Int, blocksSinceDesperation *big.Int, blsig [32]byte, desperationFactor *big.Int) (bool, error) {
	var out []interface{}
	err := _Snapshots.contract.Call(opts, &out, "mayValidatorSnapshot", numValidators, myIdx, blocksSinceDesperation, blsig, desperationFactor)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// MayValidatorSnapshot is a free data retrieval call binding the contract method 0xf45fa246.
//
// Solidity: function mayValidatorSnapshot(uint256 numValidators, uint256 myIdx, uint256 blocksSinceDesperation, bytes32 blsig, uint256 desperationFactor) pure returns(bool)
func (_Snapshots *SnapshotsSession) MayValidatorSnapshot(numValidators *big.Int, myIdx *big.Int, blocksSinceDesperation *big.Int, blsig [32]byte, desperationFactor *big.Int) (bool, error) {
	return _Snapshots.Contract.MayValidatorSnapshot(&_Snapshots.CallOpts, numValidators, myIdx, blocksSinceDesperation, blsig, desperationFactor)
}

// MayValidatorSnapshot is a free data retrieval call binding the contract method 0xf45fa246.
//
// Solidity: function mayValidatorSnapshot(uint256 numValidators, uint256 myIdx, uint256 blocksSinceDesperation, bytes32 blsig, uint256 desperationFactor) pure returns(bool)
func (_Snapshots *SnapshotsCallerSession) MayValidatorSnapshot(numValidators *big.Int, myIdx *big.Int, blocksSinceDesperation *big.Int, blsig [32]byte, desperationFactor *big.Int) (bool, error) {
	return _Snapshots.Contract.MayValidatorSnapshot(&_Snapshots.CallOpts, numValidators, myIdx, blocksSinceDesperation, blsig, desperationFactor)
}

// SetEpochLength is a paid mutator transaction binding the contract method 0xdeb1e56e.
//
// Solidity: function setEpochLength(uint32 epochLength_) returns()
func (_Snapshots *SnapshotsTransactor) SetEpochLength(opts *bind.TransactOpts, epochLength_ uint32) (*types.Transaction, error) {
	return _Snapshots.contract.Transact(opts, "setEpochLength", epochLength_)
}

// SetEpochLength is a paid mutator transaction binding the contract method 0xdeb1e56e.
//
// Solidity: function setEpochLength(uint32 epochLength_) returns()
func (_Snapshots *SnapshotsSession) SetEpochLength(epochLength_ uint32) (*types.Transaction, error) {
	return _Snapshots.Contract.SetEpochLength(&_Snapshots.TransactOpts, epochLength_)
}

// SetEpochLength is a paid mutator transaction binding the contract method 0xdeb1e56e.
//
// Solidity: function setEpochLength(uint32 epochLength_) returns()
func (_Snapshots *SnapshotsTransactorSession) SetEpochLength(epochLength_ uint32) (*types.Transaction, error) {
	return _Snapshots.Contract.SetEpochLength(&_Snapshots.TransactOpts, epochLength_)
}

// SetSnapshotDesperationDelay is a paid mutator transaction binding the contract method 0xc2e8fef2.
//
// Solidity: function setSnapshotDesperationDelay(uint32 desperationDelay_) returns()
func (_Snapshots *SnapshotsTransactor) SetSnapshotDesperationDelay(opts *bind.TransactOpts, desperationDelay_ uint32) (*types.Transaction, error) {
	return _Snapshots.contract.Transact(opts, "setSnapshotDesperationDelay", desperationDelay_)
}

// SetSnapshotDesperationDelay is a paid mutator transaction binding the contract method 0xc2e8fef2.
//
// Solidity: function setSnapshotDesperationDelay(uint32 desperationDelay_) returns()
func (_Snapshots *SnapshotsSession) SetSnapshotDesperationDelay(desperationDelay_ uint32) (*types.Transaction, error) {
	return _Snapshots.Contract.SetSnapshotDesperationDelay(&_Snapshots.TransactOpts, desperationDelay_)
}

// SetSnapshotDesperationDelay is a paid mutator transaction binding the contract method 0xc2e8fef2.
//
// Solidity: function setSnapshotDesperationDelay(uint32 desperationDelay_) returns()
func (_Snapshots *SnapshotsTransactorSession) SetSnapshotDesperationDelay(desperationDelay_ uint32) (*types.Transaction, error) {
	return _Snapshots.Contract.SetSnapshotDesperationDelay(&_Snapshots.TransactOpts, desperationDelay_)
}

// SetSnapshotDesperationFactor is a paid mutator transaction binding the contract method 0x3fa7a1ad.
//
// Solidity: function setSnapshotDesperationFactor(uint32 desperationFactor_) returns()
func (_Snapshots *SnapshotsTransactor) SetSnapshotDesperationFactor(opts *bind.TransactOpts, desperationFactor_ uint32) (*types.Transaction, error) {
	return _Snapshots.contract.Transact(opts, "setSnapshotDesperationFactor", desperationFactor_)
}

// SetSnapshotDesperationFactor is a paid mutator transaction binding the contract method 0x3fa7a1ad.
//
// Solidity: function setSnapshotDesperationFactor(uint32 desperationFactor_) returns()
func (_Snapshots *SnapshotsSession) SetSnapshotDesperationFactor(desperationFactor_ uint32) (*types.Transaction, error) {
	return _Snapshots.Contract.SetSnapshotDesperationFactor(&_Snapshots.TransactOpts, desperationFactor_)
}

// SetSnapshotDesperationFactor is a paid mutator transaction binding the contract method 0x3fa7a1ad.
//
// Solidity: function setSnapshotDesperationFactor(uint32 desperationFactor_) returns()
func (_Snapshots *SnapshotsTransactorSession) SetSnapshotDesperationFactor(desperationFactor_ uint32) (*types.Transaction, error) {
	return _Snapshots.Contract.SetSnapshotDesperationFactor(&_Snapshots.TransactOpts, desperationFactor_)
}

// Snapshot is a paid mutator transaction binding the contract method 0x08ca1f25.
//
// Solidity: function snapshot(bytes groupSignature_, bytes bClaims_) returns(bool)
func (_Snapshots *SnapshotsTransactor) Snapshot(opts *bind.TransactOpts, groupSignature_ []byte, bClaims_ []byte) (*types.Transaction, error) {
	return _Snapshots.contract.Transact(opts, "snapshot", groupSignature_, bClaims_)
}

// Snapshot is a paid mutator transaction binding the contract method 0x08ca1f25.
//
// Solidity: function snapshot(bytes groupSignature_, bytes bClaims_) returns(bool)
func (_Snapshots *SnapshotsSession) Snapshot(groupSignature_ []byte, bClaims_ []byte) (*types.Transaction, error) {
	return _Snapshots.Contract.Snapshot(&_Snapshots.TransactOpts, groupSignature_, bClaims_)
}

// Snapshot is a paid mutator transaction binding the contract method 0x08ca1f25.
//
// Solidity: function snapshot(bytes groupSignature_, bytes bClaims_) returns(bool)
func (_Snapshots *SnapshotsTransactorSession) Snapshot(groupSignature_ []byte, bClaims_ []byte) (*types.Transaction, error) {
	return _Snapshots.Contract.Snapshot(&_Snapshots.TransactOpts, groupSignature_, bClaims_)
}

// SnapshotsSnapshotTakenIterator is returned from FilterSnapshotTaken and is used to iterate over the raw logs and unpacked data for SnapshotTaken events raised by the Snapshots contract.
type SnapshotsSnapshotTakenIterator struct {
	Event *SnapshotsSnapshotTaken // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SnapshotsSnapshotTakenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SnapshotsSnapshotTaken)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SnapshotsSnapshotTaken)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SnapshotsSnapshotTakenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SnapshotsSnapshotTakenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SnapshotsSnapshotTaken represents a SnapshotTaken event raised by the Snapshots contract.
type SnapshotsSnapshotTaken struct {
	ChainId                *big.Int
	Epoch                  *big.Int
	Height                 *big.Int
	Validator              common.Address
	SafeToProceedConsensus bool
	Raw                    types.Log // Blockchain specific contextual infos
}

// FilterSnapshotTaken is a free log retrieval operation binding the contract event 0x740c230bf3b8e6d0997cb207d19155e2721234d5690acf42dbc85615aedc362f.
//
// Solidity: event SnapshotTaken(uint256 chainId, uint256 indexed epoch, uint256 height, address indexed validator, bool safeToProceedConsensus)
func (_Snapshots *SnapshotsFilterer) FilterSnapshotTaken(opts *bind.FilterOpts, epoch []*big.Int, validator []common.Address) (*SnapshotsSnapshotTakenIterator, error) {

	var epochRule []interface{}
	for _, epochItem := range epoch {
		epochRule = append(epochRule, epochItem)
	}

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _Snapshots.contract.FilterLogs(opts, "SnapshotTaken", epochRule, validatorRule)
	if err != nil {
		return nil, err
	}
	return &SnapshotsSnapshotTakenIterator{contract: _Snapshots.contract, event: "SnapshotTaken", logs: logs, sub: sub}, nil
}

// WatchSnapshotTaken is a free log subscription operation binding the contract event 0x740c230bf3b8e6d0997cb207d19155e2721234d5690acf42dbc85615aedc362f.
//
// Solidity: event SnapshotTaken(uint256 chainId, uint256 indexed epoch, uint256 height, address indexed validator, bool safeToProceedConsensus)
func (_Snapshots *SnapshotsFilterer) WatchSnapshotTaken(opts *bind.WatchOpts, sink chan<- *SnapshotsSnapshotTaken, epoch []*big.Int, validator []common.Address) (event.Subscription, error) {

	var epochRule []interface{}
	for _, epochItem := range epoch {
		epochRule = append(epochRule, epochItem)
	}

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _Snapshots.contract.WatchLogs(opts, "SnapshotTaken", epochRule, validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SnapshotsSnapshotTaken)
				if err := _Snapshots.contract.UnpackLog(event, "SnapshotTaken", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSnapshotTaken is a log parse operation binding the contract event 0x740c230bf3b8e6d0997cb207d19155e2721234d5690acf42dbc85615aedc362f.
//
// Solidity: event SnapshotTaken(uint256 chainId, uint256 indexed epoch, uint256 height, address indexed validator, bool safeToProceedConsensus)
func (_Snapshots *SnapshotsFilterer) ParseSnapshotTaken(log types.Log) (*SnapshotsSnapshotTaken, error) {
	event := new(SnapshotsSnapshotTaken)
	if err := _Snapshots.contract.UnpackLog(event, "SnapshotTaken", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakeNFTMetaData contains all meta data concerning the StakeNFT contract.
var StakeNFTMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"contractIERC20Transferable\",\"name\":\"MadToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"governance_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accumulatorScaleFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payoutEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payoutMadToken\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"burnTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payoutEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payoutMadToken\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cbState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"collectEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"collectEthTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"collectToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"collectTokenTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"magic_\",\"type\":\"uint8\"}],\"name\":\"depositEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"magic_\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"estimateEthCollection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateExcessEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"excess\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateExcessToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"excess\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"estimateTokenCollection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEthAccumulator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accumulator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slush\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGovernance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"getPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"freeAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawFreeAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accumulatorEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accumulatorToken\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenAccumulator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accumulator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slush\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalReserveEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalReserveMadToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isAllowedProposal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration_\",\"type\":\"uint256\"}],\"name\":\"lockOwnPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration_\",\"type\":\"uint256\"}],\"name\":\"lockPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration_\",\"type\":\"uint256\"}],\"name\":\"lockWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration_\",\"type\":\"uint256\"}],\"name\":\"mintTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governance_\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"}],\"name\":\"skimExcessEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"excess\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"}],\"name\":\"skimExcessToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"excess\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tripCB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "",
}

// StakeNFTABI is the input ABI used to generate the binding from.
// Deprecated: Use StakeNFTMetaData.ABI instead.
var StakeNFTABI = StakeNFTMetaData.ABI

// StakeNFTBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StakeNFTMetaData.Bin instead.
var StakeNFTBin = StakeNFTMetaData.Bin

// DeployStakeNFT deploys a new Ethereum contract, binding an instance of StakeNFT to it.
func DeployStakeNFT(auth *bind.TransactOpts, backend bind.ContractBackend, name_ string, symbol_ string, MadToken_ common.Address, admin_ common.Address, governance_ common.Address) (common.Address, *types.Transaction, *StakeNFT, error) {
	parsed, err := StakeNFTMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StakeNFTBin), backend, name_, symbol_, MadToken_, admin_, governance_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &StakeNFT{StakeNFTCaller: StakeNFTCaller{contract: contract}, StakeNFTTransactor: StakeNFTTransactor{contract: contract}, StakeNFTFilterer: StakeNFTFilterer{contract: contract}}, nil
}

// StakeNFT is an auto generated Go binding around an Ethereum contract.
type StakeNFT struct {
	StakeNFTCaller     // Read-only binding to the contract
	StakeNFTTransactor // Write-only binding to the contract
	StakeNFTFilterer   // Log filterer for contract events
}

// StakeNFTCaller is an auto generated read-only Go binding around an Ethereum contract.
type StakeNFTCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakeNFTTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StakeNFTTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakeNFTFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StakeNFTFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakeNFTSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StakeNFTSession struct {
	Contract     *StakeNFT         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StakeNFTCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StakeNFTCallerSession struct {
	Contract *StakeNFTCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// StakeNFTTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StakeNFTTransactorSession struct {
	Contract     *StakeNFTTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// StakeNFTRaw is an auto generated low-level Go binding around an Ethereum contract.
type StakeNFTRaw struct {
	Contract *StakeNFT // Generic contract binding to access the raw methods on
}

// StakeNFTCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StakeNFTCallerRaw struct {
	Contract *StakeNFTCaller // Generic read-only contract binding to access the raw methods on
}

// StakeNFTTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StakeNFTTransactorRaw struct {
	Contract *StakeNFTTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStakeNFT creates a new instance of StakeNFT, bound to a specific deployed contract.
func NewStakeNFT(address common.Address, backend bind.ContractBackend) (*StakeNFT, error) {
	contract, err := bindStakeNFT(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &StakeNFT{StakeNFTCaller: StakeNFTCaller{contract: contract}, StakeNFTTransactor: StakeNFTTransactor{contract: contract}, StakeNFTFilterer: StakeNFTFilterer{contract: contract}}, nil
}

// NewStakeNFTCaller creates a new read-only instance of StakeNFT, bound to a specific deployed contract.
func NewStakeNFTCaller(address common.Address, caller bind.ContractCaller) (*StakeNFTCaller, error) {
	contract, err := bindStakeNFT(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StakeNFTCaller{contract: contract}, nil
}

// NewStakeNFTTransactor creates a new write-only instance of StakeNFT, bound to a specific deployed contract.
func NewStakeNFTTransactor(address common.Address, transactor bind.ContractTransactor) (*StakeNFTTransactor, error) {
	contract, err := bindStakeNFT(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StakeNFTTransactor{contract: contract}, nil
}

// NewStakeNFTFilterer creates a new log filterer instance of StakeNFT, bound to a specific deployed contract.
func NewStakeNFTFilterer(address common.Address, filterer bind.ContractFilterer) (*StakeNFTFilterer, error) {
	contract, err := bindStakeNFT(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StakeNFTFilterer{contract: contract}, nil
}

// bindStakeNFT binds a generic wrapper to an already deployed contract.
func bindStakeNFT(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StakeNFTABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StakeNFT *StakeNFTRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StakeNFT.Contract.StakeNFTCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StakeNFT *StakeNFTRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakeNFT.Contract.StakeNFTTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StakeNFT *StakeNFTRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StakeNFT.Contract.StakeNFTTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StakeNFT *StakeNFTCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StakeNFT.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StakeNFT *StakeNFTTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakeNFT.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StakeNFT *StakeNFTTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StakeNFT.Contract.contract.Transact(opts, method, params...)
}

// AccumulatorScaleFactor is a free data retrieval call binding the contract method 0xe7718640.
//
// Solidity: function accumulatorScaleFactor() pure returns(uint256)
func (_StakeNFT *StakeNFTCaller) AccumulatorScaleFactor(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakeNFT.contract.Call(opts, &out, "accumulatorScaleFactor")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AccumulatorScaleFactor is a free data retrieval call binding the contract method 0xe7718640.
//
// Solidity: function accumulatorScaleFactor() pure returns(uint256)
func (_StakeNFT *StakeNFTSession) AccumulatorScaleFactor() (*big.Int, error) {
	return _StakeNFT.Contract.AccumulatorScaleFactor(&_StakeNFT.CallOpts)
}

// AccumulatorScaleFactor is a free data retrieval call binding the contract method 0xe7718640.
//
// Solidity: function accumulatorScaleFactor() pure returns(uint256)
func (_StakeNFT *StakeNFTCallerSession) AccumulatorScaleFactor() (*big.Int, error) {
	return _StakeNFT.Contract.AccumulatorScaleFactor(&_StakeNFT.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_StakeNFT *StakeNFTCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _StakeNFT.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_StakeNFT *StakeNFTSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _StakeNFT.Contract.BalanceOf(&_StakeNFT.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_StakeNFT *StakeNFTCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _StakeNFT.Contract.BalanceOf(&_StakeNFT.CallOpts, owner)
}

// CbState is a free data retrieval call binding the contract method 0x608115df.
//
// Solidity: function cbState() view returns(bool)
func (_StakeNFT *StakeNFTCaller) CbState(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _StakeNFT.contract.Call(opts, &out, "cbState")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CbState is a free data retrieval call binding the contract method 0x608115df.
//
// Solidity: function cbState() view returns(bool)
func (_StakeNFT *StakeNFTSession) CbState() (bool, error) {
	return _StakeNFT.Contract.CbState(&_StakeNFT.CallOpts)
}

// CbState is a free data retrieval call binding the contract method 0x608115df.
//
// Solidity: function cbState() view returns(bool)
func (_StakeNFT *StakeNFTCallerSession) CbState() (bool, error) {
	return _StakeNFT.Contract.CbState(&_StakeNFT.CallOpts)
}

// EstimateEthCollection is a free data retrieval call binding the contract method 0x20ea0d48.
//
// Solidity: function estimateEthCollection(uint256 tokenID_) view returns(uint256 payout)
func (_StakeNFT *StakeNFTCaller) EstimateEthCollection(opts *bind.CallOpts, tokenID_ *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _StakeNFT.contract.Call(opts, &out, "estimateEthCollection", tokenID_)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EstimateEthCollection is a free data retrieval call binding the contract method 0x20ea0d48.
//
// Solidity: function estimateEthCollection(uint256 tokenID_) view returns(uint256 payout)
func (_StakeNFT *StakeNFTSession) EstimateEthCollection(tokenID_ *big.Int) (*big.Int, error) {
	return _StakeNFT.Contract.EstimateEthCollection(&_StakeNFT.CallOpts, tokenID_)
}

// EstimateEthCollection is a free data retrieval call binding the contract method 0x20ea0d48.
//
// Solidity: function estimateEthCollection(uint256 tokenID_) view returns(uint256 payout)
func (_StakeNFT *StakeNFTCallerSession) EstimateEthCollection(tokenID_ *big.Int) (*big.Int, error) {
	return _StakeNFT.Contract.EstimateEthCollection(&_StakeNFT.CallOpts, tokenID_)
}

// EstimateExcessEth is a free data retrieval call binding the contract method 0x905953ed.
//
// Solidity: function estimateExcessEth() view returns(uint256 excess)
func (_StakeNFT *StakeNFTCaller) EstimateExcessEth(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakeNFT.contract.Call(opts, &out, "estimateExcessEth")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EstimateExcessEth is a free data retrieval call binding the contract method 0x905953ed.
//
// Solidity: function estimateExcessEth() view returns(uint256 excess)
func (_StakeNFT *StakeNFTSession) EstimateExcessEth() (*big.Int, error) {
	return _StakeNFT.Contract.EstimateExcessEth(&_StakeNFT.CallOpts)
}

// EstimateExcessEth is a free data retrieval call binding the contract method 0x905953ed.
//
// Solidity: function estimateExcessEth() view returns(uint256 excess)
func (_StakeNFT *StakeNFTCallerSession) EstimateExcessEth() (*big.Int, error) {
	return _StakeNFT.Contract.EstimateExcessEth(&_StakeNFT.CallOpts)
}

// EstimateExcessToken is a free data retrieval call binding the contract method 0x3eed3eff.
//
// Solidity: function estimateExcessToken() view returns(uint256 excess)
func (_StakeNFT *StakeNFTCaller) EstimateExcessToken(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakeNFT.contract.Call(opts, &out, "estimateExcessToken")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EstimateExcessToken is a free data retrieval call binding the contract method 0x3eed3eff.
//
// Solidity: function estimateExcessToken() view returns(uint256 excess)
func (_StakeNFT *StakeNFTSession) EstimateExcessToken() (*big.Int, error) {
	return _StakeNFT.Contract.EstimateExcessToken(&_StakeNFT.CallOpts)
}

// EstimateExcessToken is a free data retrieval call binding the contract method 0x3eed3eff.
//
// Solidity: function estimateExcessToken() view returns(uint256 excess)
func (_StakeNFT *StakeNFTCallerSession) EstimateExcessToken() (*big.Int, error) {
	return _StakeNFT.Contract.EstimateExcessToken(&_StakeNFT.CallOpts)
}

// EstimateTokenCollection is a free data retrieval call binding the contract method 0x93c5748d.
//
// Solidity: function estimateTokenCollection(uint256 tokenID_) view returns(uint256 payout)
func (_StakeNFT *StakeNFTCaller) EstimateTokenCollection(opts *bind.CallOpts, tokenID_ *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _StakeNFT.contract.Call(opts, &out, "estimateTokenCollection", tokenID_)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EstimateTokenCollection is a free data retrieval call binding the contract method 0x93c5748d.
//
// Solidity: function estimateTokenCollection(uint256 tokenID_) view returns(uint256 payout)
func (_StakeNFT *StakeNFTSession) EstimateTokenCollection(tokenID_ *big.Int) (*big.Int, error) {
	return _StakeNFT.Contract.EstimateTokenCollection(&_StakeNFT.CallOpts, tokenID_)
}

// EstimateTokenCollection is a free data retrieval call binding the contract method 0x93c5748d.
//
// Solidity: function estimateTokenCollection(uint256 tokenID_) view returns(uint256 payout)
func (_StakeNFT *StakeNFTCallerSession) EstimateTokenCollection(tokenID_ *big.Int) (*big.Int, error) {
	return _StakeNFT.Contract.EstimateTokenCollection(&_StakeNFT.CallOpts, tokenID_)
}

// GetAdmin is a free data retrieval call binding the contract method 0x6e9960c3.
//
// Solidity: function getAdmin() view returns(address)
func (_StakeNFT *StakeNFTCaller) GetAdmin(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _StakeNFT.contract.Call(opts, &out, "getAdmin")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetAdmin is a free data retrieval call binding the contract method 0x6e9960c3.
//
// Solidity: function getAdmin() view returns(address)
func (_StakeNFT *StakeNFTSession) GetAdmin() (common.Address, error) {
	return _StakeNFT.Contract.GetAdmin(&_StakeNFT.CallOpts)
}

// GetAdmin is a free data retrieval call binding the contract method 0x6e9960c3.
//
// Solidity: function getAdmin() view returns(address)
func (_StakeNFT *StakeNFTCallerSession) GetAdmin() (common.Address, error) {
	return _StakeNFT.Contract.GetAdmin(&_StakeNFT.CallOpts)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_StakeNFT *StakeNFTCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _StakeNFT.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_StakeNFT *StakeNFTSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _StakeNFT.Contract.GetApproved(&_StakeNFT.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_StakeNFT *StakeNFTCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _StakeNFT.Contract.GetApproved(&_StakeNFT.CallOpts, tokenId)
}

// GetEthAccumulator is a free data retrieval call binding the contract method 0x548652d2.
//
// Solidity: function getEthAccumulator() view returns(uint256 accumulator, uint256 slush)
func (_StakeNFT *StakeNFTCaller) GetEthAccumulator(opts *bind.CallOpts) (struct {
	Accumulator *big.Int
	Slush       *big.Int
}, error) {
	var out []interface{}
	err := _StakeNFT.contract.Call(opts, &out, "getEthAccumulator")

	outstruct := new(struct {
		Accumulator *big.Int
		Slush       *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Accumulator = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Slush = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetEthAccumulator is a free data retrieval call binding the contract method 0x548652d2.
//
// Solidity: function getEthAccumulator() view returns(uint256 accumulator, uint256 slush)
func (_StakeNFT *StakeNFTSession) GetEthAccumulator() (struct {
	Accumulator *big.Int
	Slush       *big.Int
}, error) {
	return _StakeNFT.Contract.GetEthAccumulator(&_StakeNFT.CallOpts)
}

// GetEthAccumulator is a free data retrieval call binding the contract method 0x548652d2.
//
// Solidity: function getEthAccumulator() view returns(uint256 accumulator, uint256 slush)
func (_StakeNFT *StakeNFTCallerSession) GetEthAccumulator() (struct {
	Accumulator *big.Int
	Slush       *big.Int
}, error) {
	return _StakeNFT.Contract.GetEthAccumulator(&_StakeNFT.CallOpts)
}

// GetGovernance is a free data retrieval call binding the contract method 0x289b3c0d.
//
// Solidity: function getGovernance() view returns(address)
func (_StakeNFT *StakeNFTCaller) GetGovernance(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _StakeNFT.contract.Call(opts, &out, "getGovernance")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetGovernance is a free data retrieval call binding the contract method 0x289b3c0d.
//
// Solidity: function getGovernance() view returns(address)
func (_StakeNFT *StakeNFTSession) GetGovernance() (common.Address, error) {
	return _StakeNFT.Contract.GetGovernance(&_StakeNFT.CallOpts)
}

// GetGovernance is a free data retrieval call binding the contract method 0x289b3c0d.
//
// Solidity: function getGovernance() view returns(address)
func (_StakeNFT *StakeNFTCallerSession) GetGovernance() (common.Address, error) {
	return _StakeNFT.Contract.GetGovernance(&_StakeNFT.CallOpts)
}

// GetPosition is a free data retrieval call binding the contract method 0xeb02c301.
//
// Solidity: function getPosition(uint256 tokenID_) view returns(uint256 shares, uint256 freeAfter, uint256 withdrawFreeAfter, uint256 accumulatorEth, uint256 accumulatorToken)
func (_StakeNFT *StakeNFTCaller) GetPosition(opts *bind.CallOpts, tokenID_ *big.Int) (struct {
	Shares            *big.Int
	FreeAfter         *big.Int
	WithdrawFreeAfter *big.Int
	AccumulatorEth    *big.Int
	AccumulatorToken  *big.Int
}, error) {
	var out []interface{}
	err := _StakeNFT.contract.Call(opts, &out, "getPosition", tokenID_)

	outstruct := new(struct {
		Shares            *big.Int
		FreeAfter         *big.Int
		WithdrawFreeAfter *big.Int
		AccumulatorEth    *big.Int
		AccumulatorToken  *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Shares = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.FreeAfter = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.WithdrawFreeAfter = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.AccumulatorEth = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.AccumulatorToken = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetPosition is a free data retrieval call binding the contract method 0xeb02c301.
//
// Solidity: function getPosition(uint256 tokenID_) view returns(uint256 shares, uint256 freeAfter, uint256 withdrawFreeAfter, uint256 accumulatorEth, uint256 accumulatorToken)
func (_StakeNFT *StakeNFTSession) GetPosition(tokenID_ *big.Int) (struct {
	Shares            *big.Int
	FreeAfter         *big.Int
	WithdrawFreeAfter *big.Int
	AccumulatorEth    *big.Int
	AccumulatorToken  *big.Int
}, error) {
	return _StakeNFT.Contract.GetPosition(&_StakeNFT.CallOpts, tokenID_)
}

// GetPosition is a free data retrieval call binding the contract method 0xeb02c301.
//
// Solidity: function getPosition(uint256 tokenID_) view returns(uint256 shares, uint256 freeAfter, uint256 withdrawFreeAfter, uint256 accumulatorEth, uint256 accumulatorToken)
func (_StakeNFT *StakeNFTCallerSession) GetPosition(tokenID_ *big.Int) (struct {
	Shares            *big.Int
	FreeAfter         *big.Int
	WithdrawFreeAfter *big.Int
	AccumulatorEth    *big.Int
	AccumulatorToken  *big.Int
}, error) {
	return _StakeNFT.Contract.GetPosition(&_StakeNFT.CallOpts, tokenID_)
}

// GetTokenAccumulator is a free data retrieval call binding the contract method 0xc47c6e14.
//
// Solidity: function getTokenAccumulator() view returns(uint256 accumulator, uint256 slush)
func (_StakeNFT *StakeNFTCaller) GetTokenAccumulator(opts *bind.CallOpts) (struct {
	Accumulator *big.Int
	Slush       *big.Int
}, error) {
	var out []interface{}
	err := _StakeNFT.contract.Call(opts, &out, "getTokenAccumulator")

	outstruct := new(struct {
		Accumulator *big.Int
		Slush       *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Accumulator = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Slush = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetTokenAccumulator is a free data retrieval call binding the contract method 0xc47c6e14.
//
// Solidity: function getTokenAccumulator() view returns(uint256 accumulator, uint256 slush)
func (_StakeNFT *StakeNFTSession) GetTokenAccumulator() (struct {
	Accumulator *big.Int
	Slush       *big.Int
}, error) {
	return _StakeNFT.Contract.GetTokenAccumulator(&_StakeNFT.CallOpts)
}

// GetTokenAccumulator is a free data retrieval call binding the contract method 0xc47c6e14.
//
// Solidity: function getTokenAccumulator() view returns(uint256 accumulator, uint256 slush)
func (_StakeNFT *StakeNFTCallerSession) GetTokenAccumulator() (struct {
	Accumulator *big.Int
	Slush       *big.Int
}, error) {
	return _StakeNFT.Contract.GetTokenAccumulator(&_StakeNFT.CallOpts)
}

// GetTotalReserveEth is a free data retrieval call binding the contract method 0x19b8be2f.
//
// Solidity: function getTotalReserveEth() view returns(uint256)
func (_StakeNFT *StakeNFTCaller) GetTotalReserveEth(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakeNFT.contract.Call(opts, &out, "getTotalReserveEth")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalReserveEth is a free data retrieval call binding the contract method 0x19b8be2f.
//
// Solidity: function getTotalReserveEth() view returns(uint256)
func (_StakeNFT *StakeNFTSession) GetTotalReserveEth() (*big.Int, error) {
	return _StakeNFT.Contract.GetTotalReserveEth(&_StakeNFT.CallOpts)
}

// GetTotalReserveEth is a free data retrieval call binding the contract method 0x19b8be2f.
//
// Solidity: function getTotalReserveEth() view returns(uint256)
func (_StakeNFT *StakeNFTCallerSession) GetTotalReserveEth() (*big.Int, error) {
	return _StakeNFT.Contract.GetTotalReserveEth(&_StakeNFT.CallOpts)
}

// GetTotalReserveMadToken is a free data retrieval call binding the contract method 0x9aeac659.
//
// Solidity: function getTotalReserveMadToken() view returns(uint256)
func (_StakeNFT *StakeNFTCaller) GetTotalReserveMadToken(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakeNFT.contract.Call(opts, &out, "getTotalReserveMadToken")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalReserveMadToken is a free data retrieval call binding the contract method 0x9aeac659.
//
// Solidity: function getTotalReserveMadToken() view returns(uint256)
func (_StakeNFT *StakeNFTSession) GetTotalReserveMadToken() (*big.Int, error) {
	return _StakeNFT.Contract.GetTotalReserveMadToken(&_StakeNFT.CallOpts)
}

// GetTotalReserveMadToken is a free data retrieval call binding the contract method 0x9aeac659.
//
// Solidity: function getTotalReserveMadToken() view returns(uint256)
func (_StakeNFT *StakeNFTCallerSession) GetTotalReserveMadToken() (*big.Int, error) {
	return _StakeNFT.Contract.GetTotalReserveMadToken(&_StakeNFT.CallOpts)
}

// GetTotalShares is a free data retrieval call binding the contract method 0xd5002f2e.
//
// Solidity: function getTotalShares() view returns(uint256)
func (_StakeNFT *StakeNFTCaller) GetTotalShares(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakeNFT.contract.Call(opts, &out, "getTotalShares")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalShares is a free data retrieval call binding the contract method 0xd5002f2e.
//
// Solidity: function getTotalShares() view returns(uint256)
func (_StakeNFT *StakeNFTSession) GetTotalShares() (*big.Int, error) {
	return _StakeNFT.Contract.GetTotalShares(&_StakeNFT.CallOpts)
}

// GetTotalShares is a free data retrieval call binding the contract method 0xd5002f2e.
//
// Solidity: function getTotalShares() view returns(uint256)
func (_StakeNFT *StakeNFTCallerSession) GetTotalShares() (*big.Int, error) {
	return _StakeNFT.Contract.GetTotalShares(&_StakeNFT.CallOpts)
}

// IsAllowedProposal is a free data retrieval call binding the contract method 0x3771165e.
//
// Solidity: function isAllowedProposal(address addr) view returns(bool)
func (_StakeNFT *StakeNFTCaller) IsAllowedProposal(opts *bind.CallOpts, addr common.Address) (bool, error) {
	var out []interface{}
	err := _StakeNFT.contract.Call(opts, &out, "isAllowedProposal", addr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsAllowedProposal is a free data retrieval call binding the contract method 0x3771165e.
//
// Solidity: function isAllowedProposal(address addr) view returns(bool)
func (_StakeNFT *StakeNFTSession) IsAllowedProposal(addr common.Address) (bool, error) {
	return _StakeNFT.Contract.IsAllowedProposal(&_StakeNFT.CallOpts, addr)
}

// IsAllowedProposal is a free data retrieval call binding the contract method 0x3771165e.
//
// Solidity: function isAllowedProposal(address addr) view returns(bool)
func (_StakeNFT *StakeNFTCallerSession) IsAllowedProposal(addr common.Address) (bool, error) {
	return _StakeNFT.Contract.IsAllowedProposal(&_StakeNFT.CallOpts, addr)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_StakeNFT *StakeNFTCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _StakeNFT.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_StakeNFT *StakeNFTSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _StakeNFT.Contract.IsApprovedForAll(&_StakeNFT.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_StakeNFT *StakeNFTCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _StakeNFT.Contract.IsApprovedForAll(&_StakeNFT.CallOpts, owner, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_StakeNFT *StakeNFTCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _StakeNFT.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_StakeNFT *StakeNFTSession) Name() (string, error) {
	return _StakeNFT.Contract.Name(&_StakeNFT.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_StakeNFT *StakeNFTCallerSession) Name() (string, error) {
	return _StakeNFT.Contract.Name(&_StakeNFT.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_StakeNFT *StakeNFTCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _StakeNFT.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_StakeNFT *StakeNFTSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _StakeNFT.Contract.OwnerOf(&_StakeNFT.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_StakeNFT *StakeNFTCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _StakeNFT.Contract.OwnerOf(&_StakeNFT.CallOpts, tokenId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_StakeNFT *StakeNFTCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _StakeNFT.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_StakeNFT *StakeNFTSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _StakeNFT.Contract.SupportsInterface(&_StakeNFT.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_StakeNFT *StakeNFTCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _StakeNFT.Contract.SupportsInterface(&_StakeNFT.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_StakeNFT *StakeNFTCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _StakeNFT.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_StakeNFT *StakeNFTSession) Symbol() (string, error) {
	return _StakeNFT.Contract.Symbol(&_StakeNFT.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_StakeNFT *StakeNFTCallerSession) Symbol() (string, error) {
	return _StakeNFT.Contract.Symbol(&_StakeNFT.CallOpts)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_StakeNFT *StakeNFTCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _StakeNFT.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_StakeNFT *StakeNFTSession) TokenURI(tokenId *big.Int) (string, error) {
	return _StakeNFT.Contract.TokenURI(&_StakeNFT.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_StakeNFT *StakeNFTCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _StakeNFT.Contract.TokenURI(&_StakeNFT.CallOpts, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_StakeNFT *StakeNFTTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _StakeNFT.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_StakeNFT *StakeNFTSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.Approve(&_StakeNFT.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_StakeNFT *StakeNFTTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.Approve(&_StakeNFT.TransactOpts, to, tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 tokenID_) returns(uint256 payoutEth, uint256 payoutMadToken)
func (_StakeNFT *StakeNFTTransactor) Burn(opts *bind.TransactOpts, tokenID_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.contract.Transact(opts, "burn", tokenID_)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 tokenID_) returns(uint256 payoutEth, uint256 payoutMadToken)
func (_StakeNFT *StakeNFTSession) Burn(tokenID_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.Burn(&_StakeNFT.TransactOpts, tokenID_)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 tokenID_) returns(uint256 payoutEth, uint256 payoutMadToken)
func (_StakeNFT *StakeNFTTransactorSession) Burn(tokenID_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.Burn(&_StakeNFT.TransactOpts, tokenID_)
}

// BurnTo is a paid mutator transaction binding the contract method 0xea785a5e.
//
// Solidity: function burnTo(address to_, uint256 tokenID_) returns(uint256 payoutEth, uint256 payoutMadToken)
func (_StakeNFT *StakeNFTTransactor) BurnTo(opts *bind.TransactOpts, to_ common.Address, tokenID_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.contract.Transact(opts, "burnTo", to_, tokenID_)
}

// BurnTo is a paid mutator transaction binding the contract method 0xea785a5e.
//
// Solidity: function burnTo(address to_, uint256 tokenID_) returns(uint256 payoutEth, uint256 payoutMadToken)
func (_StakeNFT *StakeNFTSession) BurnTo(to_ common.Address, tokenID_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.BurnTo(&_StakeNFT.TransactOpts, to_, tokenID_)
}

// BurnTo is a paid mutator transaction binding the contract method 0xea785a5e.
//
// Solidity: function burnTo(address to_, uint256 tokenID_) returns(uint256 payoutEth, uint256 payoutMadToken)
func (_StakeNFT *StakeNFTTransactorSession) BurnTo(to_ common.Address, tokenID_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.BurnTo(&_StakeNFT.TransactOpts, to_, tokenID_)
}

// CollectEth is a paid mutator transaction binding the contract method 0x2a0d8bd1.
//
// Solidity: function collectEth(uint256 tokenID_) returns(uint256 payout)
func (_StakeNFT *StakeNFTTransactor) CollectEth(opts *bind.TransactOpts, tokenID_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.contract.Transact(opts, "collectEth", tokenID_)
}

// CollectEth is a paid mutator transaction binding the contract method 0x2a0d8bd1.
//
// Solidity: function collectEth(uint256 tokenID_) returns(uint256 payout)
func (_StakeNFT *StakeNFTSession) CollectEth(tokenID_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.CollectEth(&_StakeNFT.TransactOpts, tokenID_)
}

// CollectEth is a paid mutator transaction binding the contract method 0x2a0d8bd1.
//
// Solidity: function collectEth(uint256 tokenID_) returns(uint256 payout)
func (_StakeNFT *StakeNFTTransactorSession) CollectEth(tokenID_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.CollectEth(&_StakeNFT.TransactOpts, tokenID_)
}

// CollectEthTo is a paid mutator transaction binding the contract method 0xbe444379.
//
// Solidity: function collectEthTo(address to_, uint256 tokenID_) returns(uint256 payout)
func (_StakeNFT *StakeNFTTransactor) CollectEthTo(opts *bind.TransactOpts, to_ common.Address, tokenID_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.contract.Transact(opts, "collectEthTo", to_, tokenID_)
}

// CollectEthTo is a paid mutator transaction binding the contract method 0xbe444379.
//
// Solidity: function collectEthTo(address to_, uint256 tokenID_) returns(uint256 payout)
func (_StakeNFT *StakeNFTSession) CollectEthTo(to_ common.Address, tokenID_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.CollectEthTo(&_StakeNFT.TransactOpts, to_, tokenID_)
}

// CollectEthTo is a paid mutator transaction binding the contract method 0xbe444379.
//
// Solidity: function collectEthTo(address to_, uint256 tokenID_) returns(uint256 payout)
func (_StakeNFT *StakeNFTTransactorSession) CollectEthTo(to_ common.Address, tokenID_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.CollectEthTo(&_StakeNFT.TransactOpts, to_, tokenID_)
}

// CollectToken is a paid mutator transaction binding the contract method 0xe35c3e28.
//
// Solidity: function collectToken(uint256 tokenID_) returns(uint256 payout)
func (_StakeNFT *StakeNFTTransactor) CollectToken(opts *bind.TransactOpts, tokenID_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.contract.Transact(opts, "collectToken", tokenID_)
}

// CollectToken is a paid mutator transaction binding the contract method 0xe35c3e28.
//
// Solidity: function collectToken(uint256 tokenID_) returns(uint256 payout)
func (_StakeNFT *StakeNFTSession) CollectToken(tokenID_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.CollectToken(&_StakeNFT.TransactOpts, tokenID_)
}

// CollectToken is a paid mutator transaction binding the contract method 0xe35c3e28.
//
// Solidity: function collectToken(uint256 tokenID_) returns(uint256 payout)
func (_StakeNFT *StakeNFTTransactorSession) CollectToken(tokenID_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.CollectToken(&_StakeNFT.TransactOpts, tokenID_)
}

// CollectTokenTo is a paid mutator transaction binding the contract method 0x8853b950.
//
// Solidity: function collectTokenTo(address to_, uint256 tokenID_) returns(uint256 payout)
func (_StakeNFT *StakeNFTTransactor) CollectTokenTo(opts *bind.TransactOpts, to_ common.Address, tokenID_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.contract.Transact(opts, "collectTokenTo", to_, tokenID_)
}

// CollectTokenTo is a paid mutator transaction binding the contract method 0x8853b950.
//
// Solidity: function collectTokenTo(address to_, uint256 tokenID_) returns(uint256 payout)
func (_StakeNFT *StakeNFTSession) CollectTokenTo(to_ common.Address, tokenID_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.CollectTokenTo(&_StakeNFT.TransactOpts, to_, tokenID_)
}

// CollectTokenTo is a paid mutator transaction binding the contract method 0x8853b950.
//
// Solidity: function collectTokenTo(address to_, uint256 tokenID_) returns(uint256 payout)
func (_StakeNFT *StakeNFTTransactorSession) CollectTokenTo(to_ common.Address, tokenID_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.CollectTokenTo(&_StakeNFT.TransactOpts, to_, tokenID_)
}

// DepositEth is a paid mutator transaction binding the contract method 0x99a89ecc.
//
// Solidity: function depositEth(uint8 magic_) payable returns()
func (_StakeNFT *StakeNFTTransactor) DepositEth(opts *bind.TransactOpts, magic_ uint8) (*types.Transaction, error) {
	return _StakeNFT.contract.Transact(opts, "depositEth", magic_)
}

// DepositEth is a paid mutator transaction binding the contract method 0x99a89ecc.
//
// Solidity: function depositEth(uint8 magic_) payable returns()
func (_StakeNFT *StakeNFTSession) DepositEth(magic_ uint8) (*types.Transaction, error) {
	return _StakeNFT.Contract.DepositEth(&_StakeNFT.TransactOpts, magic_)
}

// DepositEth is a paid mutator transaction binding the contract method 0x99a89ecc.
//
// Solidity: function depositEth(uint8 magic_) payable returns()
func (_StakeNFT *StakeNFTTransactorSession) DepositEth(magic_ uint8) (*types.Transaction, error) {
	return _StakeNFT.Contract.DepositEth(&_StakeNFT.TransactOpts, magic_)
}

// DepositToken is a paid mutator transaction binding the contract method 0x8191f5e5.
//
// Solidity: function depositToken(uint8 magic_, uint256 amount_) returns()
func (_StakeNFT *StakeNFTTransactor) DepositToken(opts *bind.TransactOpts, magic_ uint8, amount_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.contract.Transact(opts, "depositToken", magic_, amount_)
}

// DepositToken is a paid mutator transaction binding the contract method 0x8191f5e5.
//
// Solidity: function depositToken(uint8 magic_, uint256 amount_) returns()
func (_StakeNFT *StakeNFTSession) DepositToken(magic_ uint8, amount_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.DepositToken(&_StakeNFT.TransactOpts, magic_, amount_)
}

// DepositToken is a paid mutator transaction binding the contract method 0x8191f5e5.
//
// Solidity: function depositToken(uint8 magic_, uint256 amount_) returns()
func (_StakeNFT *StakeNFTTransactorSession) DepositToken(magic_ uint8, amount_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.DepositToken(&_StakeNFT.TransactOpts, magic_, amount_)
}

// LockOwnPosition is a paid mutator transaction binding the contract method 0xe42a673c.
//
// Solidity: function lockOwnPosition(uint256 tokenID_, uint256 lockDuration_) returns(uint256)
func (_StakeNFT *StakeNFTTransactor) LockOwnPosition(opts *bind.TransactOpts, tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.contract.Transact(opts, "lockOwnPosition", tokenID_, lockDuration_)
}

// LockOwnPosition is a paid mutator transaction binding the contract method 0xe42a673c.
//
// Solidity: function lockOwnPosition(uint256 tokenID_, uint256 lockDuration_) returns(uint256)
func (_StakeNFT *StakeNFTSession) LockOwnPosition(tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.LockOwnPosition(&_StakeNFT.TransactOpts, tokenID_, lockDuration_)
}

// LockOwnPosition is a paid mutator transaction binding the contract method 0xe42a673c.
//
// Solidity: function lockOwnPosition(uint256 tokenID_, uint256 lockDuration_) returns(uint256)
func (_StakeNFT *StakeNFTTransactorSession) LockOwnPosition(tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.LockOwnPosition(&_StakeNFT.TransactOpts, tokenID_, lockDuration_)
}

// LockPosition is a paid mutator transaction binding the contract method 0x0cc65dfb.
//
// Solidity: function lockPosition(address caller_, uint256 tokenID_, uint256 lockDuration_) returns(uint256)
func (_StakeNFT *StakeNFTTransactor) LockPosition(opts *bind.TransactOpts, caller_ common.Address, tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.contract.Transact(opts, "lockPosition", caller_, tokenID_, lockDuration_)
}

// LockPosition is a paid mutator transaction binding the contract method 0x0cc65dfb.
//
// Solidity: function lockPosition(address caller_, uint256 tokenID_, uint256 lockDuration_) returns(uint256)
func (_StakeNFT *StakeNFTSession) LockPosition(caller_ common.Address, tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.LockPosition(&_StakeNFT.TransactOpts, caller_, tokenID_, lockDuration_)
}

// LockPosition is a paid mutator transaction binding the contract method 0x0cc65dfb.
//
// Solidity: function lockPosition(address caller_, uint256 tokenID_, uint256 lockDuration_) returns(uint256)
func (_StakeNFT *StakeNFTTransactorSession) LockPosition(caller_ common.Address, tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.LockPosition(&_StakeNFT.TransactOpts, caller_, tokenID_, lockDuration_)
}

// LockWithdraw is a paid mutator transaction binding the contract method 0x0e4eb15b.
//
// Solidity: function lockWithdraw(uint256 tokenID_, uint256 lockDuration_) returns(uint256)
func (_StakeNFT *StakeNFTTransactor) LockWithdraw(opts *bind.TransactOpts, tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.contract.Transact(opts, "lockWithdraw", tokenID_, lockDuration_)
}

// LockWithdraw is a paid mutator transaction binding the contract method 0x0e4eb15b.
//
// Solidity: function lockWithdraw(uint256 tokenID_, uint256 lockDuration_) returns(uint256)
func (_StakeNFT *StakeNFTSession) LockWithdraw(tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.LockWithdraw(&_StakeNFT.TransactOpts, tokenID_, lockDuration_)
}

// LockWithdraw is a paid mutator transaction binding the contract method 0x0e4eb15b.
//
// Solidity: function lockWithdraw(uint256 tokenID_, uint256 lockDuration_) returns(uint256)
func (_StakeNFT *StakeNFTTransactorSession) LockWithdraw(tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.LockWithdraw(&_StakeNFT.TransactOpts, tokenID_, lockDuration_)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 amount_) returns(uint256 tokenID)
func (_StakeNFT *StakeNFTTransactor) Mint(opts *bind.TransactOpts, amount_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.contract.Transact(opts, "mint", amount_)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 amount_) returns(uint256 tokenID)
func (_StakeNFT *StakeNFTSession) Mint(amount_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.Mint(&_StakeNFT.TransactOpts, amount_)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 amount_) returns(uint256 tokenID)
func (_StakeNFT *StakeNFTTransactorSession) Mint(amount_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.Mint(&_StakeNFT.TransactOpts, amount_)
}

// MintTo is a paid mutator transaction binding the contract method 0x2baf2acb.
//
// Solidity: function mintTo(address to_, uint256 amount_, uint256 lockDuration_) returns(uint256 tokenID)
func (_StakeNFT *StakeNFTTransactor) MintTo(opts *bind.TransactOpts, to_ common.Address, amount_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.contract.Transact(opts, "mintTo", to_, amount_, lockDuration_)
}

// MintTo is a paid mutator transaction binding the contract method 0x2baf2acb.
//
// Solidity: function mintTo(address to_, uint256 amount_, uint256 lockDuration_) returns(uint256 tokenID)
func (_StakeNFT *StakeNFTSession) MintTo(to_ common.Address, amount_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.MintTo(&_StakeNFT.TransactOpts, to_, amount_, lockDuration_)
}

// MintTo is a paid mutator transaction binding the contract method 0x2baf2acb.
//
// Solidity: function mintTo(address to_, uint256 amount_, uint256 lockDuration_) returns(uint256 tokenID)
func (_StakeNFT *StakeNFTTransactorSession) MintTo(to_ common.Address, amount_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.MintTo(&_StakeNFT.TransactOpts, to_, amount_, lockDuration_)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_StakeNFT *StakeNFTTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _StakeNFT.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_StakeNFT *StakeNFTSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.SafeTransferFrom(&_StakeNFT.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_StakeNFT *StakeNFTTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.SafeTransferFrom(&_StakeNFT.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_StakeNFT *StakeNFTTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _StakeNFT.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_StakeNFT *StakeNFTSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _StakeNFT.Contract.SafeTransferFrom0(&_StakeNFT.TransactOpts, from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_StakeNFT *StakeNFTTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _StakeNFT.Contract.SafeTransferFrom0(&_StakeNFT.TransactOpts, from, to, tokenId, _data)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address admin_) returns()
func (_StakeNFT *StakeNFTTransactor) SetAdmin(opts *bind.TransactOpts, admin_ common.Address) (*types.Transaction, error) {
	return _StakeNFT.contract.Transact(opts, "setAdmin", admin_)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address admin_) returns()
func (_StakeNFT *StakeNFTSession) SetAdmin(admin_ common.Address) (*types.Transaction, error) {
	return _StakeNFT.Contract.SetAdmin(&_StakeNFT.TransactOpts, admin_)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address admin_) returns()
func (_StakeNFT *StakeNFTTransactorSession) SetAdmin(admin_ common.Address) (*types.Transaction, error) {
	return _StakeNFT.Contract.SetAdmin(&_StakeNFT.TransactOpts, admin_)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_StakeNFT *StakeNFTTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _StakeNFT.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_StakeNFT *StakeNFTSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _StakeNFT.Contract.SetApprovalForAll(&_StakeNFT.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_StakeNFT *StakeNFTTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _StakeNFT.Contract.SetApprovalForAll(&_StakeNFT.TransactOpts, operator, approved)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_StakeNFT *StakeNFTTransactor) SetGovernance(opts *bind.TransactOpts, governance_ common.Address) (*types.Transaction, error) {
	return _StakeNFT.contract.Transact(opts, "setGovernance", governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_StakeNFT *StakeNFTSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _StakeNFT.Contract.SetGovernance(&_StakeNFT.TransactOpts, governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_StakeNFT *StakeNFTTransactorSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _StakeNFT.Contract.SetGovernance(&_StakeNFT.TransactOpts, governance_)
}

// SkimExcessEth is a paid mutator transaction binding the contract method 0x971b505b.
//
// Solidity: function skimExcessEth(address to_) returns(uint256 excess)
func (_StakeNFT *StakeNFTTransactor) SkimExcessEth(opts *bind.TransactOpts, to_ common.Address) (*types.Transaction, error) {
	return _StakeNFT.contract.Transact(opts, "skimExcessEth", to_)
}

// SkimExcessEth is a paid mutator transaction binding the contract method 0x971b505b.
//
// Solidity: function skimExcessEth(address to_) returns(uint256 excess)
func (_StakeNFT *StakeNFTSession) SkimExcessEth(to_ common.Address) (*types.Transaction, error) {
	return _StakeNFT.Contract.SkimExcessEth(&_StakeNFT.TransactOpts, to_)
}

// SkimExcessEth is a paid mutator transaction binding the contract method 0x971b505b.
//
// Solidity: function skimExcessEth(address to_) returns(uint256 excess)
func (_StakeNFT *StakeNFTTransactorSession) SkimExcessEth(to_ common.Address) (*types.Transaction, error) {
	return _StakeNFT.Contract.SkimExcessEth(&_StakeNFT.TransactOpts, to_)
}

// SkimExcessToken is a paid mutator transaction binding the contract method 0x7aa507fb.
//
// Solidity: function skimExcessToken(address to_) returns(uint256 excess)
func (_StakeNFT *StakeNFTTransactor) SkimExcessToken(opts *bind.TransactOpts, to_ common.Address) (*types.Transaction, error) {
	return _StakeNFT.contract.Transact(opts, "skimExcessToken", to_)
}

// SkimExcessToken is a paid mutator transaction binding the contract method 0x7aa507fb.
//
// Solidity: function skimExcessToken(address to_) returns(uint256 excess)
func (_StakeNFT *StakeNFTSession) SkimExcessToken(to_ common.Address) (*types.Transaction, error) {
	return _StakeNFT.Contract.SkimExcessToken(&_StakeNFT.TransactOpts, to_)
}

// SkimExcessToken is a paid mutator transaction binding the contract method 0x7aa507fb.
//
// Solidity: function skimExcessToken(address to_) returns(uint256 excess)
func (_StakeNFT *StakeNFTTransactorSession) SkimExcessToken(to_ common.Address) (*types.Transaction, error) {
	return _StakeNFT.Contract.SkimExcessToken(&_StakeNFT.TransactOpts, to_)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_StakeNFT *StakeNFTTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _StakeNFT.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_StakeNFT *StakeNFTSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.TransferFrom(&_StakeNFT.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_StakeNFT *StakeNFTTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.TransferFrom(&_StakeNFT.TransactOpts, from, to, tokenId)
}

// TripCB is a paid mutator transaction binding the contract method 0xadfdc03f.
//
// Solidity: function tripCB() returns()
func (_StakeNFT *StakeNFTTransactor) TripCB(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakeNFT.contract.Transact(opts, "tripCB")
}

// TripCB is a paid mutator transaction binding the contract method 0xadfdc03f.
//
// Solidity: function tripCB() returns()
func (_StakeNFT *StakeNFTSession) TripCB() (*types.Transaction, error) {
	return _StakeNFT.Contract.TripCB(&_StakeNFT.TransactOpts)
}

// TripCB is a paid mutator transaction binding the contract method 0xadfdc03f.
//
// Solidity: function tripCB() returns()
func (_StakeNFT *StakeNFTTransactorSession) TripCB() (*types.Transaction, error) {
	return _StakeNFT.Contract.TripCB(&_StakeNFT.TransactOpts)
}

// StakeNFTApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the StakeNFT contract.
type StakeNFTApprovalIterator struct {
	Event *StakeNFTApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakeNFTApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakeNFTApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakeNFTApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakeNFTApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakeNFTApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakeNFTApproval represents a Approval event raised by the StakeNFT contract.
type StakeNFTApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_StakeNFT *StakeNFTFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*StakeNFTApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _StakeNFT.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &StakeNFTApprovalIterator{contract: _StakeNFT.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_StakeNFT *StakeNFTFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *StakeNFTApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _StakeNFT.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakeNFTApproval)
				if err := _StakeNFT.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_StakeNFT *StakeNFTFilterer) ParseApproval(log types.Log) (*StakeNFTApproval, error) {
	event := new(StakeNFTApproval)
	if err := _StakeNFT.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakeNFTApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the StakeNFT contract.
type StakeNFTApprovalForAllIterator struct {
	Event *StakeNFTApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakeNFTApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakeNFTApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakeNFTApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakeNFTApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakeNFTApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakeNFTApprovalForAll represents a ApprovalForAll event raised by the StakeNFT contract.
type StakeNFTApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_StakeNFT *StakeNFTFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*StakeNFTApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _StakeNFT.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &StakeNFTApprovalForAllIterator{contract: _StakeNFT.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_StakeNFT *StakeNFTFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *StakeNFTApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _StakeNFT.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakeNFTApprovalForAll)
				if err := _StakeNFT.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_StakeNFT *StakeNFTFilterer) ParseApprovalForAll(log types.Log) (*StakeNFTApprovalForAll, error) {
	event := new(StakeNFTApprovalForAll)
	if err := _StakeNFT.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakeNFTTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the StakeNFT contract.
type StakeNFTTransferIterator struct {
	Event *StakeNFTTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakeNFTTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakeNFTTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakeNFTTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakeNFTTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakeNFTTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakeNFTTransfer represents a Transfer event raised by the StakeNFT contract.
type StakeNFTTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_StakeNFT *StakeNFTFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*StakeNFTTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _StakeNFT.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &StakeNFTTransferIterator{contract: _StakeNFT.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_StakeNFT *StakeNFTFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *StakeNFTTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _StakeNFT.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakeNFTTransfer)
				if err := _StakeNFT.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_StakeNFT *StakeNFTFilterer) ParseTransfer(log types.Log) (*StakeNFTTransfer, error) {
	event := new(StakeNFTTransfer)
	if err := _StakeNFT.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StringsMetaData contains all meta data concerning the Strings contract.
var StringsMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206bc1a00a7a7473ad5b2a2465370bff179e9cc89700414aaee8fccc53a4e4c39764736f6c634300080b0033",
}

// StringsABI is the input ABI used to generate the binding from.
// Deprecated: Use StringsMetaData.ABI instead.
var StringsABI = StringsMetaData.ABI

// StringsBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StringsMetaData.Bin instead.
var StringsBin = StringsMetaData.Bin

// DeployStrings deploys a new Ethereum contract, binding an instance of Strings to it.
func DeployStrings(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Strings, error) {
	parsed, err := StringsMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StringsBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Strings{StringsCaller: StringsCaller{contract: contract}, StringsTransactor: StringsTransactor{contract: contract}, StringsFilterer: StringsFilterer{contract: contract}}, nil
}

// Strings is an auto generated Go binding around an Ethereum contract.
type Strings struct {
	StringsCaller     // Read-only binding to the contract
	StringsTransactor // Write-only binding to the contract
	StringsFilterer   // Log filterer for contract events
}

// StringsCaller is an auto generated read-only Go binding around an Ethereum contract.
type StringsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StringsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StringsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StringsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StringsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StringsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StringsSession struct {
	Contract     *Strings          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StringsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StringsCallerSession struct {
	Contract *StringsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// StringsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StringsTransactorSession struct {
	Contract     *StringsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// StringsRaw is an auto generated low-level Go binding around an Ethereum contract.
type StringsRaw struct {
	Contract *Strings // Generic contract binding to access the raw methods on
}

// StringsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StringsCallerRaw struct {
	Contract *StringsCaller // Generic read-only contract binding to access the raw methods on
}

// StringsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StringsTransactorRaw struct {
	Contract *StringsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStrings creates a new instance of Strings, bound to a specific deployed contract.
func NewStrings(address common.Address, backend bind.ContractBackend) (*Strings, error) {
	contract, err := bindStrings(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Strings{StringsCaller: StringsCaller{contract: contract}, StringsTransactor: StringsTransactor{contract: contract}, StringsFilterer: StringsFilterer{contract: contract}}, nil
}

// NewStringsCaller creates a new read-only instance of Strings, bound to a specific deployed contract.
func NewStringsCaller(address common.Address, caller bind.ContractCaller) (*StringsCaller, error) {
	contract, err := bindStrings(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StringsCaller{contract: contract}, nil
}

// NewStringsTransactor creates a new write-only instance of Strings, bound to a specific deployed contract.
func NewStringsTransactor(address common.Address, transactor bind.ContractTransactor) (*StringsTransactor, error) {
	contract, err := bindStrings(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StringsTransactor{contract: contract}, nil
}

// NewStringsFilterer creates a new log filterer instance of Strings, bound to a specific deployed contract.
func NewStringsFilterer(address common.Address, filterer bind.ContractFilterer) (*StringsFilterer, error) {
	contract, err := bindStrings(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StringsFilterer{contract: contract}, nil
}

// bindStrings binds a generic wrapper to an already deployed contract.
func bindStrings(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StringsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Strings *StringsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Strings.Contract.StringsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Strings *StringsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Strings.Contract.StringsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Strings *StringsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Strings.Contract.StringsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Strings *StringsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Strings.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Strings *StringsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Strings.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Strings *StringsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Strings.Contract.contract.Transact(opts, method, params...)
}

// ValidatorNFTMetaData contains all meta data concerning the ValidatorNFT contract.
var ValidatorNFTMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"contractIERC20Transferable\",\"name\":\"madToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"governance_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accumulatorScaleFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payoutEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payoutMadToken\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"burnTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payoutEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payoutMadToken\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cbState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"collectEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"collectEthTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"collectToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"collectTokenTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"magic_\",\"type\":\"uint8\"}],\"name\":\"depositEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"magic_\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"estimateEthCollection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateExcessEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"excess\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateExcessToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"excess\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"estimateTokenCollection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEthAccumulator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accumulator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slush\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGovernance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"getPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"freeAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawFreeAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accumulatorEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accumulatorToken\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenAccumulator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accumulator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slush\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalReserveEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalReserveMadToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isAllowedProposal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration_\",\"type\":\"uint256\"}],\"name\":\"lockOwnPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration_\",\"type\":\"uint256\"}],\"name\":\"lockPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration_\",\"type\":\"uint256\"}],\"name\":\"lockWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration_\",\"type\":\"uint256\"}],\"name\":\"mintTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governance_\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"}],\"name\":\"skimExcessEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"excess\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"}],\"name\":\"skimExcessToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"excess\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tripCB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "",
}

// ValidatorNFTABI is the input ABI used to generate the binding from.
// Deprecated: Use ValidatorNFTMetaData.ABI instead.
var ValidatorNFTABI = ValidatorNFTMetaData.ABI

// ValidatorNFTBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ValidatorNFTMetaData.Bin instead.
var ValidatorNFTBin = ValidatorNFTMetaData.Bin

// DeployValidatorNFT deploys a new Ethereum contract, binding an instance of ValidatorNFT to it.
func DeployValidatorNFT(auth *bind.TransactOpts, backend bind.ContractBackend, name_ string, symbol_ string, madToken_ common.Address, admin_ common.Address, governance_ common.Address) (common.Address, *types.Transaction, *ValidatorNFT, error) {
	parsed, err := ValidatorNFTMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ValidatorNFTBin), backend, name_, symbol_, madToken_, admin_, governance_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ValidatorNFT{ValidatorNFTCaller: ValidatorNFTCaller{contract: contract}, ValidatorNFTTransactor: ValidatorNFTTransactor{contract: contract}, ValidatorNFTFilterer: ValidatorNFTFilterer{contract: contract}}, nil
}

// ValidatorNFT is an auto generated Go binding around an Ethereum contract.
type ValidatorNFT struct {
	ValidatorNFTCaller     // Read-only binding to the contract
	ValidatorNFTTransactor // Write-only binding to the contract
	ValidatorNFTFilterer   // Log filterer for contract events
}

// ValidatorNFTCaller is an auto generated read-only Go binding around an Ethereum contract.
type ValidatorNFTCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorNFTTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ValidatorNFTTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorNFTFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ValidatorNFTFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorNFTSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ValidatorNFTSession struct {
	Contract     *ValidatorNFT     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ValidatorNFTCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ValidatorNFTCallerSession struct {
	Contract *ValidatorNFTCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// ValidatorNFTTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ValidatorNFTTransactorSession struct {
	Contract     *ValidatorNFTTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// ValidatorNFTRaw is an auto generated low-level Go binding around an Ethereum contract.
type ValidatorNFTRaw struct {
	Contract *ValidatorNFT // Generic contract binding to access the raw methods on
}

// ValidatorNFTCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ValidatorNFTCallerRaw struct {
	Contract *ValidatorNFTCaller // Generic read-only contract binding to access the raw methods on
}

// ValidatorNFTTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ValidatorNFTTransactorRaw struct {
	Contract *ValidatorNFTTransactor // Generic write-only contract binding to access the raw methods on
}

// NewValidatorNFT creates a new instance of ValidatorNFT, bound to a specific deployed contract.
func NewValidatorNFT(address common.Address, backend bind.ContractBackend) (*ValidatorNFT, error) {
	contract, err := bindValidatorNFT(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ValidatorNFT{ValidatorNFTCaller: ValidatorNFTCaller{contract: contract}, ValidatorNFTTransactor: ValidatorNFTTransactor{contract: contract}, ValidatorNFTFilterer: ValidatorNFTFilterer{contract: contract}}, nil
}

// NewValidatorNFTCaller creates a new read-only instance of ValidatorNFT, bound to a specific deployed contract.
func NewValidatorNFTCaller(address common.Address, caller bind.ContractCaller) (*ValidatorNFTCaller, error) {
	contract, err := bindValidatorNFT(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorNFTCaller{contract: contract}, nil
}

// NewValidatorNFTTransactor creates a new write-only instance of ValidatorNFT, bound to a specific deployed contract.
func NewValidatorNFTTransactor(address common.Address, transactor bind.ContractTransactor) (*ValidatorNFTTransactor, error) {
	contract, err := bindValidatorNFT(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorNFTTransactor{contract: contract}, nil
}

// NewValidatorNFTFilterer creates a new log filterer instance of ValidatorNFT, bound to a specific deployed contract.
func NewValidatorNFTFilterer(address common.Address, filterer bind.ContractFilterer) (*ValidatorNFTFilterer, error) {
	contract, err := bindValidatorNFT(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ValidatorNFTFilterer{contract: contract}, nil
}

// bindValidatorNFT binds a generic wrapper to an already deployed contract.
func bindValidatorNFT(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ValidatorNFTABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorNFT *ValidatorNFTRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorNFT.Contract.ValidatorNFTCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorNFT *ValidatorNFTRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.ValidatorNFTTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorNFT *ValidatorNFTRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.ValidatorNFTTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorNFT *ValidatorNFTCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorNFT.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorNFT *ValidatorNFTTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorNFT *ValidatorNFTTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.contract.Transact(opts, method, params...)
}

// AccumulatorScaleFactor is a free data retrieval call binding the contract method 0xe7718640.
//
// Solidity: function accumulatorScaleFactor() pure returns(uint256)
func (_ValidatorNFT *ValidatorNFTCaller) AccumulatorScaleFactor(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorNFT.contract.Call(opts, &out, "accumulatorScaleFactor")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AccumulatorScaleFactor is a free data retrieval call binding the contract method 0xe7718640.
//
// Solidity: function accumulatorScaleFactor() pure returns(uint256)
func (_ValidatorNFT *ValidatorNFTSession) AccumulatorScaleFactor() (*big.Int, error) {
	return _ValidatorNFT.Contract.AccumulatorScaleFactor(&_ValidatorNFT.CallOpts)
}

// AccumulatorScaleFactor is a free data retrieval call binding the contract method 0xe7718640.
//
// Solidity: function accumulatorScaleFactor() pure returns(uint256)
func (_ValidatorNFT *ValidatorNFTCallerSession) AccumulatorScaleFactor() (*big.Int, error) {
	return _ValidatorNFT.Contract.AccumulatorScaleFactor(&_ValidatorNFT.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_ValidatorNFT *ValidatorNFTCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorNFT.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_ValidatorNFT *ValidatorNFTSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _ValidatorNFT.Contract.BalanceOf(&_ValidatorNFT.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_ValidatorNFT *ValidatorNFTCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _ValidatorNFT.Contract.BalanceOf(&_ValidatorNFT.CallOpts, owner)
}

// CbState is a free data retrieval call binding the contract method 0x608115df.
//
// Solidity: function cbState() view returns(bool)
func (_ValidatorNFT *ValidatorNFTCaller) CbState(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _ValidatorNFT.contract.Call(opts, &out, "cbState")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CbState is a free data retrieval call binding the contract method 0x608115df.
//
// Solidity: function cbState() view returns(bool)
func (_ValidatorNFT *ValidatorNFTSession) CbState() (bool, error) {
	return _ValidatorNFT.Contract.CbState(&_ValidatorNFT.CallOpts)
}

// CbState is a free data retrieval call binding the contract method 0x608115df.
//
// Solidity: function cbState() view returns(bool)
func (_ValidatorNFT *ValidatorNFTCallerSession) CbState() (bool, error) {
	return _ValidatorNFT.Contract.CbState(&_ValidatorNFT.CallOpts)
}

// EstimateEthCollection is a free data retrieval call binding the contract method 0x20ea0d48.
//
// Solidity: function estimateEthCollection(uint256 tokenID_) view returns(uint256 payout)
func (_ValidatorNFT *ValidatorNFTCaller) EstimateEthCollection(opts *bind.CallOpts, tokenID_ *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorNFT.contract.Call(opts, &out, "estimateEthCollection", tokenID_)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EstimateEthCollection is a free data retrieval call binding the contract method 0x20ea0d48.
//
// Solidity: function estimateEthCollection(uint256 tokenID_) view returns(uint256 payout)
func (_ValidatorNFT *ValidatorNFTSession) EstimateEthCollection(tokenID_ *big.Int) (*big.Int, error) {
	return _ValidatorNFT.Contract.EstimateEthCollection(&_ValidatorNFT.CallOpts, tokenID_)
}

// EstimateEthCollection is a free data retrieval call binding the contract method 0x20ea0d48.
//
// Solidity: function estimateEthCollection(uint256 tokenID_) view returns(uint256 payout)
func (_ValidatorNFT *ValidatorNFTCallerSession) EstimateEthCollection(tokenID_ *big.Int) (*big.Int, error) {
	return _ValidatorNFT.Contract.EstimateEthCollection(&_ValidatorNFT.CallOpts, tokenID_)
}

// EstimateExcessEth is a free data retrieval call binding the contract method 0x905953ed.
//
// Solidity: function estimateExcessEth() view returns(uint256 excess)
func (_ValidatorNFT *ValidatorNFTCaller) EstimateExcessEth(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorNFT.contract.Call(opts, &out, "estimateExcessEth")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EstimateExcessEth is a free data retrieval call binding the contract method 0x905953ed.
//
// Solidity: function estimateExcessEth() view returns(uint256 excess)
func (_ValidatorNFT *ValidatorNFTSession) EstimateExcessEth() (*big.Int, error) {
	return _ValidatorNFT.Contract.EstimateExcessEth(&_ValidatorNFT.CallOpts)
}

// EstimateExcessEth is a free data retrieval call binding the contract method 0x905953ed.
//
// Solidity: function estimateExcessEth() view returns(uint256 excess)
func (_ValidatorNFT *ValidatorNFTCallerSession) EstimateExcessEth() (*big.Int, error) {
	return _ValidatorNFT.Contract.EstimateExcessEth(&_ValidatorNFT.CallOpts)
}

// EstimateExcessToken is a free data retrieval call binding the contract method 0x3eed3eff.
//
// Solidity: function estimateExcessToken() view returns(uint256 excess)
func (_ValidatorNFT *ValidatorNFTCaller) EstimateExcessToken(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorNFT.contract.Call(opts, &out, "estimateExcessToken")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EstimateExcessToken is a free data retrieval call binding the contract method 0x3eed3eff.
//
// Solidity: function estimateExcessToken() view returns(uint256 excess)
func (_ValidatorNFT *ValidatorNFTSession) EstimateExcessToken() (*big.Int, error) {
	return _ValidatorNFT.Contract.EstimateExcessToken(&_ValidatorNFT.CallOpts)
}

// EstimateExcessToken is a free data retrieval call binding the contract method 0x3eed3eff.
//
// Solidity: function estimateExcessToken() view returns(uint256 excess)
func (_ValidatorNFT *ValidatorNFTCallerSession) EstimateExcessToken() (*big.Int, error) {
	return _ValidatorNFT.Contract.EstimateExcessToken(&_ValidatorNFT.CallOpts)
}

// EstimateTokenCollection is a free data retrieval call binding the contract method 0x93c5748d.
//
// Solidity: function estimateTokenCollection(uint256 tokenID_) view returns(uint256 payout)
func (_ValidatorNFT *ValidatorNFTCaller) EstimateTokenCollection(opts *bind.CallOpts, tokenID_ *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorNFT.contract.Call(opts, &out, "estimateTokenCollection", tokenID_)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EstimateTokenCollection is a free data retrieval call binding the contract method 0x93c5748d.
//
// Solidity: function estimateTokenCollection(uint256 tokenID_) view returns(uint256 payout)
func (_ValidatorNFT *ValidatorNFTSession) EstimateTokenCollection(tokenID_ *big.Int) (*big.Int, error) {
	return _ValidatorNFT.Contract.EstimateTokenCollection(&_ValidatorNFT.CallOpts, tokenID_)
}

// EstimateTokenCollection is a free data retrieval call binding the contract method 0x93c5748d.
//
// Solidity: function estimateTokenCollection(uint256 tokenID_) view returns(uint256 payout)
func (_ValidatorNFT *ValidatorNFTCallerSession) EstimateTokenCollection(tokenID_ *big.Int) (*big.Int, error) {
	return _ValidatorNFT.Contract.EstimateTokenCollection(&_ValidatorNFT.CallOpts, tokenID_)
}

// GetAdmin is a free data retrieval call binding the contract method 0x6e9960c3.
//
// Solidity: function getAdmin() view returns(address)
func (_ValidatorNFT *ValidatorNFTCaller) GetAdmin(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ValidatorNFT.contract.Call(opts, &out, "getAdmin")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetAdmin is a free data retrieval call binding the contract method 0x6e9960c3.
//
// Solidity: function getAdmin() view returns(address)
func (_ValidatorNFT *ValidatorNFTSession) GetAdmin() (common.Address, error) {
	return _ValidatorNFT.Contract.GetAdmin(&_ValidatorNFT.CallOpts)
}

// GetAdmin is a free data retrieval call binding the contract method 0x6e9960c3.
//
// Solidity: function getAdmin() view returns(address)
func (_ValidatorNFT *ValidatorNFTCallerSession) GetAdmin() (common.Address, error) {
	return _ValidatorNFT.Contract.GetAdmin(&_ValidatorNFT.CallOpts)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_ValidatorNFT *ValidatorNFTCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ValidatorNFT.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_ValidatorNFT *ValidatorNFTSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _ValidatorNFT.Contract.GetApproved(&_ValidatorNFT.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_ValidatorNFT *ValidatorNFTCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _ValidatorNFT.Contract.GetApproved(&_ValidatorNFT.CallOpts, tokenId)
}

// GetEthAccumulator is a free data retrieval call binding the contract method 0x548652d2.
//
// Solidity: function getEthAccumulator() view returns(uint256 accumulator, uint256 slush)
func (_ValidatorNFT *ValidatorNFTCaller) GetEthAccumulator(opts *bind.CallOpts) (struct {
	Accumulator *big.Int
	Slush       *big.Int
}, error) {
	var out []interface{}
	err := _ValidatorNFT.contract.Call(opts, &out, "getEthAccumulator")

	outstruct := new(struct {
		Accumulator *big.Int
		Slush       *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Accumulator = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Slush = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetEthAccumulator is a free data retrieval call binding the contract method 0x548652d2.
//
// Solidity: function getEthAccumulator() view returns(uint256 accumulator, uint256 slush)
func (_ValidatorNFT *ValidatorNFTSession) GetEthAccumulator() (struct {
	Accumulator *big.Int
	Slush       *big.Int
}, error) {
	return _ValidatorNFT.Contract.GetEthAccumulator(&_ValidatorNFT.CallOpts)
}

// GetEthAccumulator is a free data retrieval call binding the contract method 0x548652d2.
//
// Solidity: function getEthAccumulator() view returns(uint256 accumulator, uint256 slush)
func (_ValidatorNFT *ValidatorNFTCallerSession) GetEthAccumulator() (struct {
	Accumulator *big.Int
	Slush       *big.Int
}, error) {
	return _ValidatorNFT.Contract.GetEthAccumulator(&_ValidatorNFT.CallOpts)
}

// GetGovernance is a free data retrieval call binding the contract method 0x289b3c0d.
//
// Solidity: function getGovernance() view returns(address)
func (_ValidatorNFT *ValidatorNFTCaller) GetGovernance(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ValidatorNFT.contract.Call(opts, &out, "getGovernance")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetGovernance is a free data retrieval call binding the contract method 0x289b3c0d.
//
// Solidity: function getGovernance() view returns(address)
func (_ValidatorNFT *ValidatorNFTSession) GetGovernance() (common.Address, error) {
	return _ValidatorNFT.Contract.GetGovernance(&_ValidatorNFT.CallOpts)
}

// GetGovernance is a free data retrieval call binding the contract method 0x289b3c0d.
//
// Solidity: function getGovernance() view returns(address)
func (_ValidatorNFT *ValidatorNFTCallerSession) GetGovernance() (common.Address, error) {
	return _ValidatorNFT.Contract.GetGovernance(&_ValidatorNFT.CallOpts)
}

// GetPosition is a free data retrieval call binding the contract method 0xeb02c301.
//
// Solidity: function getPosition(uint256 tokenID_) view returns(uint256 shares, uint256 freeAfter, uint256 withdrawFreeAfter, uint256 accumulatorEth, uint256 accumulatorToken)
func (_ValidatorNFT *ValidatorNFTCaller) GetPosition(opts *bind.CallOpts, tokenID_ *big.Int) (struct {
	Shares            *big.Int
	FreeAfter         *big.Int
	WithdrawFreeAfter *big.Int
	AccumulatorEth    *big.Int
	AccumulatorToken  *big.Int
}, error) {
	var out []interface{}
	err := _ValidatorNFT.contract.Call(opts, &out, "getPosition", tokenID_)

	outstruct := new(struct {
		Shares            *big.Int
		FreeAfter         *big.Int
		WithdrawFreeAfter *big.Int
		AccumulatorEth    *big.Int
		AccumulatorToken  *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Shares = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.FreeAfter = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.WithdrawFreeAfter = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.AccumulatorEth = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.AccumulatorToken = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetPosition is a free data retrieval call binding the contract method 0xeb02c301.
//
// Solidity: function getPosition(uint256 tokenID_) view returns(uint256 shares, uint256 freeAfter, uint256 withdrawFreeAfter, uint256 accumulatorEth, uint256 accumulatorToken)
func (_ValidatorNFT *ValidatorNFTSession) GetPosition(tokenID_ *big.Int) (struct {
	Shares            *big.Int
	FreeAfter         *big.Int
	WithdrawFreeAfter *big.Int
	AccumulatorEth    *big.Int
	AccumulatorToken  *big.Int
}, error) {
	return _ValidatorNFT.Contract.GetPosition(&_ValidatorNFT.CallOpts, tokenID_)
}

// GetPosition is a free data retrieval call binding the contract method 0xeb02c301.
//
// Solidity: function getPosition(uint256 tokenID_) view returns(uint256 shares, uint256 freeAfter, uint256 withdrawFreeAfter, uint256 accumulatorEth, uint256 accumulatorToken)
func (_ValidatorNFT *ValidatorNFTCallerSession) GetPosition(tokenID_ *big.Int) (struct {
	Shares            *big.Int
	FreeAfter         *big.Int
	WithdrawFreeAfter *big.Int
	AccumulatorEth    *big.Int
	AccumulatorToken  *big.Int
}, error) {
	return _ValidatorNFT.Contract.GetPosition(&_ValidatorNFT.CallOpts, tokenID_)
}

// GetTokenAccumulator is a free data retrieval call binding the contract method 0xc47c6e14.
//
// Solidity: function getTokenAccumulator() view returns(uint256 accumulator, uint256 slush)
func (_ValidatorNFT *ValidatorNFTCaller) GetTokenAccumulator(opts *bind.CallOpts) (struct {
	Accumulator *big.Int
	Slush       *big.Int
}, error) {
	var out []interface{}
	err := _ValidatorNFT.contract.Call(opts, &out, "getTokenAccumulator")

	outstruct := new(struct {
		Accumulator *big.Int
		Slush       *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Accumulator = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Slush = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetTokenAccumulator is a free data retrieval call binding the contract method 0xc47c6e14.
//
// Solidity: function getTokenAccumulator() view returns(uint256 accumulator, uint256 slush)
func (_ValidatorNFT *ValidatorNFTSession) GetTokenAccumulator() (struct {
	Accumulator *big.Int
	Slush       *big.Int
}, error) {
	return _ValidatorNFT.Contract.GetTokenAccumulator(&_ValidatorNFT.CallOpts)
}

// GetTokenAccumulator is a free data retrieval call binding the contract method 0xc47c6e14.
//
// Solidity: function getTokenAccumulator() view returns(uint256 accumulator, uint256 slush)
func (_ValidatorNFT *ValidatorNFTCallerSession) GetTokenAccumulator() (struct {
	Accumulator *big.Int
	Slush       *big.Int
}, error) {
	return _ValidatorNFT.Contract.GetTokenAccumulator(&_ValidatorNFT.CallOpts)
}

// GetTotalReserveEth is a free data retrieval call binding the contract method 0x19b8be2f.
//
// Solidity: function getTotalReserveEth() view returns(uint256)
func (_ValidatorNFT *ValidatorNFTCaller) GetTotalReserveEth(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorNFT.contract.Call(opts, &out, "getTotalReserveEth")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalReserveEth is a free data retrieval call binding the contract method 0x19b8be2f.
//
// Solidity: function getTotalReserveEth() view returns(uint256)
func (_ValidatorNFT *ValidatorNFTSession) GetTotalReserveEth() (*big.Int, error) {
	return _ValidatorNFT.Contract.GetTotalReserveEth(&_ValidatorNFT.CallOpts)
}

// GetTotalReserveEth is a free data retrieval call binding the contract method 0x19b8be2f.
//
// Solidity: function getTotalReserveEth() view returns(uint256)
func (_ValidatorNFT *ValidatorNFTCallerSession) GetTotalReserveEth() (*big.Int, error) {
	return _ValidatorNFT.Contract.GetTotalReserveEth(&_ValidatorNFT.CallOpts)
}

// GetTotalReserveMadToken is a free data retrieval call binding the contract method 0x9aeac659.
//
// Solidity: function getTotalReserveMadToken() view returns(uint256)
func (_ValidatorNFT *ValidatorNFTCaller) GetTotalReserveMadToken(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorNFT.contract.Call(opts, &out, "getTotalReserveMadToken")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalReserveMadToken is a free data retrieval call binding the contract method 0x9aeac659.
//
// Solidity: function getTotalReserveMadToken() view returns(uint256)
func (_ValidatorNFT *ValidatorNFTSession) GetTotalReserveMadToken() (*big.Int, error) {
	return _ValidatorNFT.Contract.GetTotalReserveMadToken(&_ValidatorNFT.CallOpts)
}

// GetTotalReserveMadToken is a free data retrieval call binding the contract method 0x9aeac659.
//
// Solidity: function getTotalReserveMadToken() view returns(uint256)
func (_ValidatorNFT *ValidatorNFTCallerSession) GetTotalReserveMadToken() (*big.Int, error) {
	return _ValidatorNFT.Contract.GetTotalReserveMadToken(&_ValidatorNFT.CallOpts)
}

// GetTotalShares is a free data retrieval call binding the contract method 0xd5002f2e.
//
// Solidity: function getTotalShares() view returns(uint256)
func (_ValidatorNFT *ValidatorNFTCaller) GetTotalShares(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorNFT.contract.Call(opts, &out, "getTotalShares")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalShares is a free data retrieval call binding the contract method 0xd5002f2e.
//
// Solidity: function getTotalShares() view returns(uint256)
func (_ValidatorNFT *ValidatorNFTSession) GetTotalShares() (*big.Int, error) {
	return _ValidatorNFT.Contract.GetTotalShares(&_ValidatorNFT.CallOpts)
}

// GetTotalShares is a free data retrieval call binding the contract method 0xd5002f2e.
//
// Solidity: function getTotalShares() view returns(uint256)
func (_ValidatorNFT *ValidatorNFTCallerSession) GetTotalShares() (*big.Int, error) {
	return _ValidatorNFT.Contract.GetTotalShares(&_ValidatorNFT.CallOpts)
}

// IsAllowedProposal is a free data retrieval call binding the contract method 0x3771165e.
//
// Solidity: function isAllowedProposal(address addr) view returns(bool)
func (_ValidatorNFT *ValidatorNFTCaller) IsAllowedProposal(opts *bind.CallOpts, addr common.Address) (bool, error) {
	var out []interface{}
	err := _ValidatorNFT.contract.Call(opts, &out, "isAllowedProposal", addr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsAllowedProposal is a free data retrieval call binding the contract method 0x3771165e.
//
// Solidity: function isAllowedProposal(address addr) view returns(bool)
func (_ValidatorNFT *ValidatorNFTSession) IsAllowedProposal(addr common.Address) (bool, error) {
	return _ValidatorNFT.Contract.IsAllowedProposal(&_ValidatorNFT.CallOpts, addr)
}

// IsAllowedProposal is a free data retrieval call binding the contract method 0x3771165e.
//
// Solidity: function isAllowedProposal(address addr) view returns(bool)
func (_ValidatorNFT *ValidatorNFTCallerSession) IsAllowedProposal(addr common.Address) (bool, error) {
	return _ValidatorNFT.Contract.IsAllowedProposal(&_ValidatorNFT.CallOpts, addr)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_ValidatorNFT *ValidatorNFTCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _ValidatorNFT.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_ValidatorNFT *ValidatorNFTSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _ValidatorNFT.Contract.IsApprovedForAll(&_ValidatorNFT.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_ValidatorNFT *ValidatorNFTCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _ValidatorNFT.Contract.IsApprovedForAll(&_ValidatorNFT.CallOpts, owner, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ValidatorNFT *ValidatorNFTCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ValidatorNFT.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ValidatorNFT *ValidatorNFTSession) Name() (string, error) {
	return _ValidatorNFT.Contract.Name(&_ValidatorNFT.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ValidatorNFT *ValidatorNFTCallerSession) Name() (string, error) {
	return _ValidatorNFT.Contract.Name(&_ValidatorNFT.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_ValidatorNFT *ValidatorNFTCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ValidatorNFT.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_ValidatorNFT *ValidatorNFTSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _ValidatorNFT.Contract.OwnerOf(&_ValidatorNFT.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_ValidatorNFT *ValidatorNFTCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _ValidatorNFT.Contract.OwnerOf(&_ValidatorNFT.CallOpts, tokenId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ValidatorNFT *ValidatorNFTCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _ValidatorNFT.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ValidatorNFT *ValidatorNFTSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _ValidatorNFT.Contract.SupportsInterface(&_ValidatorNFT.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ValidatorNFT *ValidatorNFTCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _ValidatorNFT.Contract.SupportsInterface(&_ValidatorNFT.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ValidatorNFT *ValidatorNFTCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ValidatorNFT.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ValidatorNFT *ValidatorNFTSession) Symbol() (string, error) {
	return _ValidatorNFT.Contract.Symbol(&_ValidatorNFT.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ValidatorNFT *ValidatorNFTCallerSession) Symbol() (string, error) {
	return _ValidatorNFT.Contract.Symbol(&_ValidatorNFT.CallOpts)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_ValidatorNFT *ValidatorNFTCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _ValidatorNFT.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_ValidatorNFT *ValidatorNFTSession) TokenURI(tokenId *big.Int) (string, error) {
	return _ValidatorNFT.Contract.TokenURI(&_ValidatorNFT.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_ValidatorNFT *ValidatorNFTCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _ValidatorNFT.Contract.TokenURI(&_ValidatorNFT.CallOpts, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_ValidatorNFT *ValidatorNFTTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_ValidatorNFT *ValidatorNFTSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.Approve(&_ValidatorNFT.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_ValidatorNFT *ValidatorNFTTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.Approve(&_ValidatorNFT.TransactOpts, to, tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 tokenID_) returns(uint256 payoutEth, uint256 payoutMadToken)
func (_ValidatorNFT *ValidatorNFTTransactor) Burn(opts *bind.TransactOpts, tokenID_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.contract.Transact(opts, "burn", tokenID_)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 tokenID_) returns(uint256 payoutEth, uint256 payoutMadToken)
func (_ValidatorNFT *ValidatorNFTSession) Burn(tokenID_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.Burn(&_ValidatorNFT.TransactOpts, tokenID_)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 tokenID_) returns(uint256 payoutEth, uint256 payoutMadToken)
func (_ValidatorNFT *ValidatorNFTTransactorSession) Burn(tokenID_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.Burn(&_ValidatorNFT.TransactOpts, tokenID_)
}

// BurnTo is a paid mutator transaction binding the contract method 0xea785a5e.
//
// Solidity: function burnTo(address to_, uint256 tokenID_) returns(uint256 payoutEth, uint256 payoutMadToken)
func (_ValidatorNFT *ValidatorNFTTransactor) BurnTo(opts *bind.TransactOpts, to_ common.Address, tokenID_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.contract.Transact(opts, "burnTo", to_, tokenID_)
}

// BurnTo is a paid mutator transaction binding the contract method 0xea785a5e.
//
// Solidity: function burnTo(address to_, uint256 tokenID_) returns(uint256 payoutEth, uint256 payoutMadToken)
func (_ValidatorNFT *ValidatorNFTSession) BurnTo(to_ common.Address, tokenID_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.BurnTo(&_ValidatorNFT.TransactOpts, to_, tokenID_)
}

// BurnTo is a paid mutator transaction binding the contract method 0xea785a5e.
//
// Solidity: function burnTo(address to_, uint256 tokenID_) returns(uint256 payoutEth, uint256 payoutMadToken)
func (_ValidatorNFT *ValidatorNFTTransactorSession) BurnTo(to_ common.Address, tokenID_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.BurnTo(&_ValidatorNFT.TransactOpts, to_, tokenID_)
}

// CollectEth is a paid mutator transaction binding the contract method 0x2a0d8bd1.
//
// Solidity: function collectEth(uint256 tokenID_) returns(uint256 payout)
func (_ValidatorNFT *ValidatorNFTTransactor) CollectEth(opts *bind.TransactOpts, tokenID_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.contract.Transact(opts, "collectEth", tokenID_)
}

// CollectEth is a paid mutator transaction binding the contract method 0x2a0d8bd1.
//
// Solidity: function collectEth(uint256 tokenID_) returns(uint256 payout)
func (_ValidatorNFT *ValidatorNFTSession) CollectEth(tokenID_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.CollectEth(&_ValidatorNFT.TransactOpts, tokenID_)
}

// CollectEth is a paid mutator transaction binding the contract method 0x2a0d8bd1.
//
// Solidity: function collectEth(uint256 tokenID_) returns(uint256 payout)
func (_ValidatorNFT *ValidatorNFTTransactorSession) CollectEth(tokenID_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.CollectEth(&_ValidatorNFT.TransactOpts, tokenID_)
}

// CollectEthTo is a paid mutator transaction binding the contract method 0xbe444379.
//
// Solidity: function collectEthTo(address to_, uint256 tokenID_) returns(uint256 payout)
func (_ValidatorNFT *ValidatorNFTTransactor) CollectEthTo(opts *bind.TransactOpts, to_ common.Address, tokenID_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.contract.Transact(opts, "collectEthTo", to_, tokenID_)
}

// CollectEthTo is a paid mutator transaction binding the contract method 0xbe444379.
//
// Solidity: function collectEthTo(address to_, uint256 tokenID_) returns(uint256 payout)
func (_ValidatorNFT *ValidatorNFTSession) CollectEthTo(to_ common.Address, tokenID_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.CollectEthTo(&_ValidatorNFT.TransactOpts, to_, tokenID_)
}

// CollectEthTo is a paid mutator transaction binding the contract method 0xbe444379.
//
// Solidity: function collectEthTo(address to_, uint256 tokenID_) returns(uint256 payout)
func (_ValidatorNFT *ValidatorNFTTransactorSession) CollectEthTo(to_ common.Address, tokenID_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.CollectEthTo(&_ValidatorNFT.TransactOpts, to_, tokenID_)
}

// CollectToken is a paid mutator transaction binding the contract method 0xe35c3e28.
//
// Solidity: function collectToken(uint256 tokenID_) returns(uint256 payout)
func (_ValidatorNFT *ValidatorNFTTransactor) CollectToken(opts *bind.TransactOpts, tokenID_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.contract.Transact(opts, "collectToken", tokenID_)
}

// CollectToken is a paid mutator transaction binding the contract method 0xe35c3e28.
//
// Solidity: function collectToken(uint256 tokenID_) returns(uint256 payout)
func (_ValidatorNFT *ValidatorNFTSession) CollectToken(tokenID_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.CollectToken(&_ValidatorNFT.TransactOpts, tokenID_)
}

// CollectToken is a paid mutator transaction binding the contract method 0xe35c3e28.
//
// Solidity: function collectToken(uint256 tokenID_) returns(uint256 payout)
func (_ValidatorNFT *ValidatorNFTTransactorSession) CollectToken(tokenID_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.CollectToken(&_ValidatorNFT.TransactOpts, tokenID_)
}

// CollectTokenTo is a paid mutator transaction binding the contract method 0x8853b950.
//
// Solidity: function collectTokenTo(address to_, uint256 tokenID_) returns(uint256 payout)
func (_ValidatorNFT *ValidatorNFTTransactor) CollectTokenTo(opts *bind.TransactOpts, to_ common.Address, tokenID_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.contract.Transact(opts, "collectTokenTo", to_, tokenID_)
}

// CollectTokenTo is a paid mutator transaction binding the contract method 0x8853b950.
//
// Solidity: function collectTokenTo(address to_, uint256 tokenID_) returns(uint256 payout)
func (_ValidatorNFT *ValidatorNFTSession) CollectTokenTo(to_ common.Address, tokenID_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.CollectTokenTo(&_ValidatorNFT.TransactOpts, to_, tokenID_)
}

// CollectTokenTo is a paid mutator transaction binding the contract method 0x8853b950.
//
// Solidity: function collectTokenTo(address to_, uint256 tokenID_) returns(uint256 payout)
func (_ValidatorNFT *ValidatorNFTTransactorSession) CollectTokenTo(to_ common.Address, tokenID_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.CollectTokenTo(&_ValidatorNFT.TransactOpts, to_, tokenID_)
}

// DepositEth is a paid mutator transaction binding the contract method 0x99a89ecc.
//
// Solidity: function depositEth(uint8 magic_) payable returns()
func (_ValidatorNFT *ValidatorNFTTransactor) DepositEth(opts *bind.TransactOpts, magic_ uint8) (*types.Transaction, error) {
	return _ValidatorNFT.contract.Transact(opts, "depositEth", magic_)
}

// DepositEth is a paid mutator transaction binding the contract method 0x99a89ecc.
//
// Solidity: function depositEth(uint8 magic_) payable returns()
func (_ValidatorNFT *ValidatorNFTSession) DepositEth(magic_ uint8) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.DepositEth(&_ValidatorNFT.TransactOpts, magic_)
}

// DepositEth is a paid mutator transaction binding the contract method 0x99a89ecc.
//
// Solidity: function depositEth(uint8 magic_) payable returns()
func (_ValidatorNFT *ValidatorNFTTransactorSession) DepositEth(magic_ uint8) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.DepositEth(&_ValidatorNFT.TransactOpts, magic_)
}

// DepositToken is a paid mutator transaction binding the contract method 0x8191f5e5.
//
// Solidity: function depositToken(uint8 magic_, uint256 amount_) returns()
func (_ValidatorNFT *ValidatorNFTTransactor) DepositToken(opts *bind.TransactOpts, magic_ uint8, amount_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.contract.Transact(opts, "depositToken", magic_, amount_)
}

// DepositToken is a paid mutator transaction binding the contract method 0x8191f5e5.
//
// Solidity: function depositToken(uint8 magic_, uint256 amount_) returns()
func (_ValidatorNFT *ValidatorNFTSession) DepositToken(magic_ uint8, amount_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.DepositToken(&_ValidatorNFT.TransactOpts, magic_, amount_)
}

// DepositToken is a paid mutator transaction binding the contract method 0x8191f5e5.
//
// Solidity: function depositToken(uint8 magic_, uint256 amount_) returns()
func (_ValidatorNFT *ValidatorNFTTransactorSession) DepositToken(magic_ uint8, amount_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.DepositToken(&_ValidatorNFT.TransactOpts, magic_, amount_)
}

// LockOwnPosition is a paid mutator transaction binding the contract method 0xe42a673c.
//
// Solidity: function lockOwnPosition(uint256 tokenID_, uint256 lockDuration_) returns(uint256)
func (_ValidatorNFT *ValidatorNFTTransactor) LockOwnPosition(opts *bind.TransactOpts, tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.contract.Transact(opts, "lockOwnPosition", tokenID_, lockDuration_)
}

// LockOwnPosition is a paid mutator transaction binding the contract method 0xe42a673c.
//
// Solidity: function lockOwnPosition(uint256 tokenID_, uint256 lockDuration_) returns(uint256)
func (_ValidatorNFT *ValidatorNFTSession) LockOwnPosition(tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.LockOwnPosition(&_ValidatorNFT.TransactOpts, tokenID_, lockDuration_)
}

// LockOwnPosition is a paid mutator transaction binding the contract method 0xe42a673c.
//
// Solidity: function lockOwnPosition(uint256 tokenID_, uint256 lockDuration_) returns(uint256)
func (_ValidatorNFT *ValidatorNFTTransactorSession) LockOwnPosition(tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.LockOwnPosition(&_ValidatorNFT.TransactOpts, tokenID_, lockDuration_)
}

// LockPosition is a paid mutator transaction binding the contract method 0x0cc65dfb.
//
// Solidity: function lockPosition(address caller_, uint256 tokenID_, uint256 lockDuration_) returns(uint256)
func (_ValidatorNFT *ValidatorNFTTransactor) LockPosition(opts *bind.TransactOpts, caller_ common.Address, tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.contract.Transact(opts, "lockPosition", caller_, tokenID_, lockDuration_)
}

// LockPosition is a paid mutator transaction binding the contract method 0x0cc65dfb.
//
// Solidity: function lockPosition(address caller_, uint256 tokenID_, uint256 lockDuration_) returns(uint256)
func (_ValidatorNFT *ValidatorNFTSession) LockPosition(caller_ common.Address, tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.LockPosition(&_ValidatorNFT.TransactOpts, caller_, tokenID_, lockDuration_)
}

// LockPosition is a paid mutator transaction binding the contract method 0x0cc65dfb.
//
// Solidity: function lockPosition(address caller_, uint256 tokenID_, uint256 lockDuration_) returns(uint256)
func (_ValidatorNFT *ValidatorNFTTransactorSession) LockPosition(caller_ common.Address, tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.LockPosition(&_ValidatorNFT.TransactOpts, caller_, tokenID_, lockDuration_)
}

// LockWithdraw is a paid mutator transaction binding the contract method 0x0e4eb15b.
//
// Solidity: function lockWithdraw(uint256 tokenID_, uint256 lockDuration_) returns(uint256)
func (_ValidatorNFT *ValidatorNFTTransactor) LockWithdraw(opts *bind.TransactOpts, tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.contract.Transact(opts, "lockWithdraw", tokenID_, lockDuration_)
}

// LockWithdraw is a paid mutator transaction binding the contract method 0x0e4eb15b.
//
// Solidity: function lockWithdraw(uint256 tokenID_, uint256 lockDuration_) returns(uint256)
func (_ValidatorNFT *ValidatorNFTSession) LockWithdraw(tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.LockWithdraw(&_ValidatorNFT.TransactOpts, tokenID_, lockDuration_)
}

// LockWithdraw is a paid mutator transaction binding the contract method 0x0e4eb15b.
//
// Solidity: function lockWithdraw(uint256 tokenID_, uint256 lockDuration_) returns(uint256)
func (_ValidatorNFT *ValidatorNFTTransactorSession) LockWithdraw(tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.LockWithdraw(&_ValidatorNFT.TransactOpts, tokenID_, lockDuration_)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 amount_) returns(uint256 tokenID)
func (_ValidatorNFT *ValidatorNFTTransactor) Mint(opts *bind.TransactOpts, amount_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.contract.Transact(opts, "mint", amount_)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 amount_) returns(uint256 tokenID)
func (_ValidatorNFT *ValidatorNFTSession) Mint(amount_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.Mint(&_ValidatorNFT.TransactOpts, amount_)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 amount_) returns(uint256 tokenID)
func (_ValidatorNFT *ValidatorNFTTransactorSession) Mint(amount_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.Mint(&_ValidatorNFT.TransactOpts, amount_)
}

// MintTo is a paid mutator transaction binding the contract method 0x2baf2acb.
//
// Solidity: function mintTo(address to_, uint256 amount_, uint256 lockDuration_) returns(uint256 tokenID)
func (_ValidatorNFT *ValidatorNFTTransactor) MintTo(opts *bind.TransactOpts, to_ common.Address, amount_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.contract.Transact(opts, "mintTo", to_, amount_, lockDuration_)
}

// MintTo is a paid mutator transaction binding the contract method 0x2baf2acb.
//
// Solidity: function mintTo(address to_, uint256 amount_, uint256 lockDuration_) returns(uint256 tokenID)
func (_ValidatorNFT *ValidatorNFTSession) MintTo(to_ common.Address, amount_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.MintTo(&_ValidatorNFT.TransactOpts, to_, amount_, lockDuration_)
}

// MintTo is a paid mutator transaction binding the contract method 0x2baf2acb.
//
// Solidity: function mintTo(address to_, uint256 amount_, uint256 lockDuration_) returns(uint256 tokenID)
func (_ValidatorNFT *ValidatorNFTTransactorSession) MintTo(to_ common.Address, amount_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.MintTo(&_ValidatorNFT.TransactOpts, to_, amount_, lockDuration_)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_ValidatorNFT *ValidatorNFTTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_ValidatorNFT *ValidatorNFTSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.SafeTransferFrom(&_ValidatorNFT.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_ValidatorNFT *ValidatorNFTTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.SafeTransferFrom(&_ValidatorNFT.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_ValidatorNFT *ValidatorNFTTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _ValidatorNFT.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_ValidatorNFT *ValidatorNFTSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.SafeTransferFrom0(&_ValidatorNFT.TransactOpts, from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_ValidatorNFT *ValidatorNFTTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.SafeTransferFrom0(&_ValidatorNFT.TransactOpts, from, to, tokenId, _data)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address admin_) returns()
func (_ValidatorNFT *ValidatorNFTTransactor) SetAdmin(opts *bind.TransactOpts, admin_ common.Address) (*types.Transaction, error) {
	return _ValidatorNFT.contract.Transact(opts, "setAdmin", admin_)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address admin_) returns()
func (_ValidatorNFT *ValidatorNFTSession) SetAdmin(admin_ common.Address) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.SetAdmin(&_ValidatorNFT.TransactOpts, admin_)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address admin_) returns()
func (_ValidatorNFT *ValidatorNFTTransactorSession) SetAdmin(admin_ common.Address) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.SetAdmin(&_ValidatorNFT.TransactOpts, admin_)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_ValidatorNFT *ValidatorNFTTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _ValidatorNFT.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_ValidatorNFT *ValidatorNFTSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.SetApprovalForAll(&_ValidatorNFT.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_ValidatorNFT *ValidatorNFTTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.SetApprovalForAll(&_ValidatorNFT.TransactOpts, operator, approved)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_ValidatorNFT *ValidatorNFTTransactor) SetGovernance(opts *bind.TransactOpts, governance_ common.Address) (*types.Transaction, error) {
	return _ValidatorNFT.contract.Transact(opts, "setGovernance", governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_ValidatorNFT *ValidatorNFTSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.SetGovernance(&_ValidatorNFT.TransactOpts, governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_ValidatorNFT *ValidatorNFTTransactorSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.SetGovernance(&_ValidatorNFT.TransactOpts, governance_)
}

// SkimExcessEth is a paid mutator transaction binding the contract method 0x971b505b.
//
// Solidity: function skimExcessEth(address to_) returns(uint256 excess)
func (_ValidatorNFT *ValidatorNFTTransactor) SkimExcessEth(opts *bind.TransactOpts, to_ common.Address) (*types.Transaction, error) {
	return _ValidatorNFT.contract.Transact(opts, "skimExcessEth", to_)
}

// SkimExcessEth is a paid mutator transaction binding the contract method 0x971b505b.
//
// Solidity: function skimExcessEth(address to_) returns(uint256 excess)
func (_ValidatorNFT *ValidatorNFTSession) SkimExcessEth(to_ common.Address) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.SkimExcessEth(&_ValidatorNFT.TransactOpts, to_)
}

// SkimExcessEth is a paid mutator transaction binding the contract method 0x971b505b.
//
// Solidity: function skimExcessEth(address to_) returns(uint256 excess)
func (_ValidatorNFT *ValidatorNFTTransactorSession) SkimExcessEth(to_ common.Address) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.SkimExcessEth(&_ValidatorNFT.TransactOpts, to_)
}

// SkimExcessToken is a paid mutator transaction binding the contract method 0x7aa507fb.
//
// Solidity: function skimExcessToken(address to_) returns(uint256 excess)
func (_ValidatorNFT *ValidatorNFTTransactor) SkimExcessToken(opts *bind.TransactOpts, to_ common.Address) (*types.Transaction, error) {
	return _ValidatorNFT.contract.Transact(opts, "skimExcessToken", to_)
}

// SkimExcessToken is a paid mutator transaction binding the contract method 0x7aa507fb.
//
// Solidity: function skimExcessToken(address to_) returns(uint256 excess)
func (_ValidatorNFT *ValidatorNFTSession) SkimExcessToken(to_ common.Address) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.SkimExcessToken(&_ValidatorNFT.TransactOpts, to_)
}

// SkimExcessToken is a paid mutator transaction binding the contract method 0x7aa507fb.
//
// Solidity: function skimExcessToken(address to_) returns(uint256 excess)
func (_ValidatorNFT *ValidatorNFTTransactorSession) SkimExcessToken(to_ common.Address) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.SkimExcessToken(&_ValidatorNFT.TransactOpts, to_)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_ValidatorNFT *ValidatorNFTTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_ValidatorNFT *ValidatorNFTSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.TransferFrom(&_ValidatorNFT.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_ValidatorNFT *ValidatorNFTTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.TransferFrom(&_ValidatorNFT.TransactOpts, from, to, tokenId)
}

// TripCB is a paid mutator transaction binding the contract method 0xadfdc03f.
//
// Solidity: function tripCB() returns()
func (_ValidatorNFT *ValidatorNFTTransactor) TripCB(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorNFT.contract.Transact(opts, "tripCB")
}

// TripCB is a paid mutator transaction binding the contract method 0xadfdc03f.
//
// Solidity: function tripCB() returns()
func (_ValidatorNFT *ValidatorNFTSession) TripCB() (*types.Transaction, error) {
	return _ValidatorNFT.Contract.TripCB(&_ValidatorNFT.TransactOpts)
}

// TripCB is a paid mutator transaction binding the contract method 0xadfdc03f.
//
// Solidity: function tripCB() returns()
func (_ValidatorNFT *ValidatorNFTTransactorSession) TripCB() (*types.Transaction, error) {
	return _ValidatorNFT.Contract.TripCB(&_ValidatorNFT.TransactOpts)
}

// ValidatorNFTApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the ValidatorNFT contract.
type ValidatorNFTApprovalIterator struct {
	Event *ValidatorNFTApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorNFTApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorNFTApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorNFTApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorNFTApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorNFTApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorNFTApproval represents a Approval event raised by the ValidatorNFT contract.
type ValidatorNFTApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_ValidatorNFT *ValidatorNFTFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*ValidatorNFTApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ValidatorNFT.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorNFTApprovalIterator{contract: _ValidatorNFT.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_ValidatorNFT *ValidatorNFTFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *ValidatorNFTApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ValidatorNFT.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorNFTApproval)
				if err := _ValidatorNFT.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_ValidatorNFT *ValidatorNFTFilterer) ParseApproval(log types.Log) (*ValidatorNFTApproval, error) {
	event := new(ValidatorNFTApproval)
	if err := _ValidatorNFT.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorNFTApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the ValidatorNFT contract.
type ValidatorNFTApprovalForAllIterator struct {
	Event *ValidatorNFTApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorNFTApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorNFTApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorNFTApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorNFTApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorNFTApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorNFTApprovalForAll represents a ApprovalForAll event raised by the ValidatorNFT contract.
type ValidatorNFTApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_ValidatorNFT *ValidatorNFTFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*ValidatorNFTApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _ValidatorNFT.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorNFTApprovalForAllIterator{contract: _ValidatorNFT.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_ValidatorNFT *ValidatorNFTFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *ValidatorNFTApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _ValidatorNFT.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorNFTApprovalForAll)
				if err := _ValidatorNFT.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_ValidatorNFT *ValidatorNFTFilterer) ParseApprovalForAll(log types.Log) (*ValidatorNFTApprovalForAll, error) {
	event := new(ValidatorNFTApprovalForAll)
	if err := _ValidatorNFT.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorNFTTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the ValidatorNFT contract.
type ValidatorNFTTransferIterator struct {
	Event *ValidatorNFTTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorNFTTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorNFTTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorNFTTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorNFTTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorNFTTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorNFTTransfer represents a Transfer event raised by the ValidatorNFT contract.
type ValidatorNFTTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_ValidatorNFT *ValidatorNFTFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*ValidatorNFTTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ValidatorNFT.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorNFTTransferIterator{contract: _ValidatorNFT.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_ValidatorNFT *ValidatorNFTFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *ValidatorNFTTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ValidatorNFT.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorNFTTransfer)
				if err := _ValidatorNFT.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_ValidatorNFT *ValidatorNFTFilterer) ParseTransfer(log types.Log) (*ValidatorNFTTransfer, error) {
	event := new(ValidatorNFTTransfer)
	if err := _ValidatorNFT.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorPoolMetaData contains all meta data concerning the ValidatorPool contract.
var ValidatorPoolMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractINFTStake\",\"name\":\"stakeNFT_\",\"type\":\"address\"},{\"internalType\":\"contractINFTStake\",\"name\":\"validatorNFT_\",\"type\":\"address\"},{\"internalType\":\"contractIERC20Transferable\",\"name\":\"madToken_\",\"type\":\"address\"},{\"internalType\":\"contractIETHDKG\",\"name\":\"ethdkg_\",\"type\":\"address\"},{\"internalType\":\"contractISnapshots\",\"name\":\"snapshots_\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"hook\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MaintenanceScheduled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validatorNFT\",\"type\":\"uint256\"}],\"name\":\"ValidatorJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeNFT\",\"type\":\"uint256\"}],\"name\":\"ValidatorLeft\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ValidatorMajorSlashed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeNFT\",\"type\":\"uint256\"}],\"name\":\"ValidatorMinorSlashed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLAIM_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_INTERVAL_WITHOUT_SNAPSHOT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POSITION_LOCK_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimStakeNFTPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectProfits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payoutEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payoutToken\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"completeETHDKG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator_\",\"type\":\"address\"}],\"name\":\"getLocation\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"validators_\",\"type\":\"address[]\"}],\"name\":\"getLocations\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index_\",\"type\":\"uint256\"}],\"name\":\"getValidator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidatorAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index_\",\"type\":\"uint256\"}],\"name\":\"getValidatorData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"internalType\":\"structValidatorData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidatorsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeETHDKG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"isAccusable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"isInExitingQueue\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMaintenanceScheduled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dishonestValidator_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"disputer_\",\"type\":\"address\"}],\"name\":\"majorSlash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dishonestValidator_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"disputer_\",\"type\":\"address\"}],\"name\":\"minorSlash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseConsensus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"madnetHeight_\",\"type\":\"uint256\"}],\"name\":\"pauseConsensusOnArbitraryHeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"validators_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"stakerTokenIDs_\",\"type\":\"uint256[]\"}],\"name\":\"registerValidators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scheduleMaintenance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ethdkg_\",\"type\":\"address\"}],\"name\":\"setETHDKG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"ip_\",\"type\":\"string\"}],\"name\":\"setLocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxNumValidators_\",\"type\":\"uint256\"}],\"name\":\"setMaxNumValidators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"snapshots_\",\"type\":\"address\"}],\"name\":\"setSnapshot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeAmount_\",\"type\":\"uint256\"}],\"name\":\"setStakeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unregisterAllValidators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"validators_\",\"type\":\"address[]\"}],\"name\":\"unregisterValidators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "",
}

// ValidatorPoolABI is the input ABI used to generate the binding from.
// Deprecated: Use ValidatorPoolMetaData.ABI instead.
var ValidatorPoolABI = ValidatorPoolMetaData.ABI

// ValidatorPoolBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ValidatorPoolMetaData.Bin instead.
var ValidatorPoolBin = ValidatorPoolMetaData.Bin

// DeployValidatorPool deploys a new Ethereum contract, binding an instance of ValidatorPool to it.
func DeployValidatorPool(auth *bind.TransactOpts, backend bind.ContractBackend, stakeNFT_ common.Address, validatorNFT_ common.Address, madToken_ common.Address, ethdkg_ common.Address, snapshots_ common.Address, hook []byte) (common.Address, *types.Transaction, *ValidatorPool, error) {
	parsed, err := ValidatorPoolMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ValidatorPoolBin), backend, stakeNFT_, validatorNFT_, madToken_, ethdkg_, snapshots_, hook)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ValidatorPool{ValidatorPoolCaller: ValidatorPoolCaller{contract: contract}, ValidatorPoolTransactor: ValidatorPoolTransactor{contract: contract}, ValidatorPoolFilterer: ValidatorPoolFilterer{contract: contract}}, nil
}

// ValidatorPool is an auto generated Go binding around an Ethereum contract.
type ValidatorPool struct {
	ValidatorPoolCaller     // Read-only binding to the contract
	ValidatorPoolTransactor // Write-only binding to the contract
	ValidatorPoolFilterer   // Log filterer for contract events
}

// ValidatorPoolCaller is an auto generated read-only Go binding around an Ethereum contract.
type ValidatorPoolCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorPoolTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ValidatorPoolTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorPoolFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ValidatorPoolFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorPoolSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ValidatorPoolSession struct {
	Contract     *ValidatorPool    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ValidatorPoolCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ValidatorPoolCallerSession struct {
	Contract *ValidatorPoolCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// ValidatorPoolTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ValidatorPoolTransactorSession struct {
	Contract     *ValidatorPoolTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// ValidatorPoolRaw is an auto generated low-level Go binding around an Ethereum contract.
type ValidatorPoolRaw struct {
	Contract *ValidatorPool // Generic contract binding to access the raw methods on
}

// ValidatorPoolCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ValidatorPoolCallerRaw struct {
	Contract *ValidatorPoolCaller // Generic read-only contract binding to access the raw methods on
}

// ValidatorPoolTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ValidatorPoolTransactorRaw struct {
	Contract *ValidatorPoolTransactor // Generic write-only contract binding to access the raw methods on
}

// NewValidatorPool creates a new instance of ValidatorPool, bound to a specific deployed contract.
func NewValidatorPool(address common.Address, backend bind.ContractBackend) (*ValidatorPool, error) {
	contract, err := bindValidatorPool(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ValidatorPool{ValidatorPoolCaller: ValidatorPoolCaller{contract: contract}, ValidatorPoolTransactor: ValidatorPoolTransactor{contract: contract}, ValidatorPoolFilterer: ValidatorPoolFilterer{contract: contract}}, nil
}

// NewValidatorPoolCaller creates a new read-only instance of ValidatorPool, bound to a specific deployed contract.
func NewValidatorPoolCaller(address common.Address, caller bind.ContractCaller) (*ValidatorPoolCaller, error) {
	contract, err := bindValidatorPool(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorPoolCaller{contract: contract}, nil
}

// NewValidatorPoolTransactor creates a new write-only instance of ValidatorPool, bound to a specific deployed contract.
func NewValidatorPoolTransactor(address common.Address, transactor bind.ContractTransactor) (*ValidatorPoolTransactor, error) {
	contract, err := bindValidatorPool(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorPoolTransactor{contract: contract}, nil
}

// NewValidatorPoolFilterer creates a new log filterer instance of ValidatorPool, bound to a specific deployed contract.
func NewValidatorPoolFilterer(address common.Address, filterer bind.ContractFilterer) (*ValidatorPoolFilterer, error) {
	contract, err := bindValidatorPool(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ValidatorPoolFilterer{contract: contract}, nil
}

// bindValidatorPool binds a generic wrapper to an already deployed contract.
func bindValidatorPool(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ValidatorPoolABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorPool *ValidatorPoolRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorPool.Contract.ValidatorPoolCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorPool *ValidatorPoolRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorPool.Contract.ValidatorPoolTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorPool *ValidatorPoolRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorPool.Contract.ValidatorPoolTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorPool *ValidatorPoolCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorPool.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorPool *ValidatorPoolTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorPool.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorPool *ValidatorPoolTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorPool.Contract.contract.Transact(opts, method, params...)
}

// CLAIMPERIOD is a free data retrieval call binding the contract method 0x21241dfe.
//
// Solidity: function CLAIM_PERIOD() view returns(uint256)
func (_ValidatorPool *ValidatorPoolCaller) CLAIMPERIOD(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorPool.contract.Call(opts, &out, "CLAIM_PERIOD")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CLAIMPERIOD is a free data retrieval call binding the contract method 0x21241dfe.
//
// Solidity: function CLAIM_PERIOD() view returns(uint256)
func (_ValidatorPool *ValidatorPoolSession) CLAIMPERIOD() (*big.Int, error) {
	return _ValidatorPool.Contract.CLAIMPERIOD(&_ValidatorPool.CallOpts)
}

// CLAIMPERIOD is a free data retrieval call binding the contract method 0x21241dfe.
//
// Solidity: function CLAIM_PERIOD() view returns(uint256)
func (_ValidatorPool *ValidatorPoolCallerSession) CLAIMPERIOD() (*big.Int, error) {
	return _ValidatorPool.Contract.CLAIMPERIOD(&_ValidatorPool.CallOpts)
}

// MAXINTERVALWITHOUTSNAPSHOT is a free data retrieval call binding the contract method 0x96a0448c.
//
// Solidity: function MAX_INTERVAL_WITHOUT_SNAPSHOT() view returns(uint256)
func (_ValidatorPool *ValidatorPoolCaller) MAXINTERVALWITHOUTSNAPSHOT(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorPool.contract.Call(opts, &out, "MAX_INTERVAL_WITHOUT_SNAPSHOT")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXINTERVALWITHOUTSNAPSHOT is a free data retrieval call binding the contract method 0x96a0448c.
//
// Solidity: function MAX_INTERVAL_WITHOUT_SNAPSHOT() view returns(uint256)
func (_ValidatorPool *ValidatorPoolSession) MAXINTERVALWITHOUTSNAPSHOT() (*big.Int, error) {
	return _ValidatorPool.Contract.MAXINTERVALWITHOUTSNAPSHOT(&_ValidatorPool.CallOpts)
}

// MAXINTERVALWITHOUTSNAPSHOT is a free data retrieval call binding the contract method 0x96a0448c.
//
// Solidity: function MAX_INTERVAL_WITHOUT_SNAPSHOT() view returns(uint256)
func (_ValidatorPool *ValidatorPoolCallerSession) MAXINTERVALWITHOUTSNAPSHOT() (*big.Int, error) {
	return _ValidatorPool.Contract.MAXINTERVALWITHOUTSNAPSHOT(&_ValidatorPool.CallOpts)
}

// POSITIONLOCKPERIOD is a free data retrieval call binding the contract method 0x9c87e3ed.
//
// Solidity: function POSITION_LOCK_PERIOD() view returns(uint256)
func (_ValidatorPool *ValidatorPoolCaller) POSITIONLOCKPERIOD(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorPool.contract.Call(opts, &out, "POSITION_LOCK_PERIOD")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// POSITIONLOCKPERIOD is a free data retrieval call binding the contract method 0x9c87e3ed.
//
// Solidity: function POSITION_LOCK_PERIOD() view returns(uint256)
func (_ValidatorPool *ValidatorPoolSession) POSITIONLOCKPERIOD() (*big.Int, error) {
	return _ValidatorPool.Contract.POSITIONLOCKPERIOD(&_ValidatorPool.CallOpts)
}

// POSITIONLOCKPERIOD is a free data retrieval call binding the contract method 0x9c87e3ed.
//
// Solidity: function POSITION_LOCK_PERIOD() view returns(uint256)
func (_ValidatorPool *ValidatorPoolCallerSession) POSITIONLOCKPERIOD() (*big.Int, error) {
	return _ValidatorPool.Contract.POSITIONLOCKPERIOD(&_ValidatorPool.CallOpts)
}

// GetLocation is a free data retrieval call binding the contract method 0xd9e0dc59.
//
// Solidity: function getLocation(address validator_) view returns(string)
func (_ValidatorPool *ValidatorPoolCaller) GetLocation(opts *bind.CallOpts, validator_ common.Address) (string, error) {
	var out []interface{}
	err := _ValidatorPool.contract.Call(opts, &out, "getLocation", validator_)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetLocation is a free data retrieval call binding the contract method 0xd9e0dc59.
//
// Solidity: function getLocation(address validator_) view returns(string)
func (_ValidatorPool *ValidatorPoolSession) GetLocation(validator_ common.Address) (string, error) {
	return _ValidatorPool.Contract.GetLocation(&_ValidatorPool.CallOpts, validator_)
}

// GetLocation is a free data retrieval call binding the contract method 0xd9e0dc59.
//
// Solidity: function getLocation(address validator_) view returns(string)
func (_ValidatorPool *ValidatorPoolCallerSession) GetLocation(validator_ common.Address) (string, error) {
	return _ValidatorPool.Contract.GetLocation(&_ValidatorPool.CallOpts, validator_)
}

// GetLocations is a free data retrieval call binding the contract method 0x76207f9c.
//
// Solidity: function getLocations(address[] validators_) view returns(string[])
func (_ValidatorPool *ValidatorPoolCaller) GetLocations(opts *bind.CallOpts, validators_ []common.Address) ([]string, error) {
	var out []interface{}
	err := _ValidatorPool.contract.Call(opts, &out, "getLocations", validators_)

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// GetLocations is a free data retrieval call binding the contract method 0x76207f9c.
//
// Solidity: function getLocations(address[] validators_) view returns(string[])
func (_ValidatorPool *ValidatorPoolSession) GetLocations(validators_ []common.Address) ([]string, error) {
	return _ValidatorPool.Contract.GetLocations(&_ValidatorPool.CallOpts, validators_)
}

// GetLocations is a free data retrieval call binding the contract method 0x76207f9c.
//
// Solidity: function getLocations(address[] validators_) view returns(string[])
func (_ValidatorPool *ValidatorPoolCallerSession) GetLocations(validators_ []common.Address) ([]string, error) {
	return _ValidatorPool.Contract.GetLocations(&_ValidatorPool.CallOpts, validators_)
}

// GetValidator is a free data retrieval call binding the contract method 0xb5d89627.
//
// Solidity: function getValidator(uint256 index_) view returns(address)
func (_ValidatorPool *ValidatorPoolCaller) GetValidator(opts *bind.CallOpts, index_ *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ValidatorPool.contract.Call(opts, &out, "getValidator", index_)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetValidator is a free data retrieval call binding the contract method 0xb5d89627.
//
// Solidity: function getValidator(uint256 index_) view returns(address)
func (_ValidatorPool *ValidatorPoolSession) GetValidator(index_ *big.Int) (common.Address, error) {
	return _ValidatorPool.Contract.GetValidator(&_ValidatorPool.CallOpts, index_)
}

// GetValidator is a free data retrieval call binding the contract method 0xb5d89627.
//
// Solidity: function getValidator(uint256 index_) view returns(address)
func (_ValidatorPool *ValidatorPoolCallerSession) GetValidator(index_ *big.Int) (common.Address, error) {
	return _ValidatorPool.Contract.GetValidator(&_ValidatorPool.CallOpts, index_)
}

// GetValidatorAddresses is a free data retrieval call binding the contract method 0xf74e921f.
//
// Solidity: function getValidatorAddresses() view returns(address[])
func (_ValidatorPool *ValidatorPoolCaller) GetValidatorAddresses(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _ValidatorPool.contract.Call(opts, &out, "getValidatorAddresses")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetValidatorAddresses is a free data retrieval call binding the contract method 0xf74e921f.
//
// Solidity: function getValidatorAddresses() view returns(address[])
func (_ValidatorPool *ValidatorPoolSession) GetValidatorAddresses() ([]common.Address, error) {
	return _ValidatorPool.Contract.GetValidatorAddresses(&_ValidatorPool.CallOpts)
}

// GetValidatorAddresses is a free data retrieval call binding the contract method 0xf74e921f.
//
// Solidity: function getValidatorAddresses() view returns(address[])
func (_ValidatorPool *ValidatorPoolCallerSession) GetValidatorAddresses() ([]common.Address, error) {
	return _ValidatorPool.Contract.GetValidatorAddresses(&_ValidatorPool.CallOpts)
}

// GetValidatorData is a free data retrieval call binding the contract method 0xc0951451.
//
// Solidity: function getValidatorData(uint256 index_) view returns((address,uint256))
func (_ValidatorPool *ValidatorPoolCaller) GetValidatorData(opts *bind.CallOpts, index_ *big.Int) (ValidatorData, error) {
	var out []interface{}
	err := _ValidatorPool.contract.Call(opts, &out, "getValidatorData", index_)

	if err != nil {
		return *new(ValidatorData), err
	}

	out0 := *abi.ConvertType(out[0], new(ValidatorData)).(*ValidatorData)

	return out0, err

}

// GetValidatorData is a free data retrieval call binding the contract method 0xc0951451.
//
// Solidity: function getValidatorData(uint256 index_) view returns((address,uint256))
func (_ValidatorPool *ValidatorPoolSession) GetValidatorData(index_ *big.Int) (ValidatorData, error) {
	return _ValidatorPool.Contract.GetValidatorData(&_ValidatorPool.CallOpts, index_)
}

// GetValidatorData is a free data retrieval call binding the contract method 0xc0951451.
//
// Solidity: function getValidatorData(uint256 index_) view returns((address,uint256))
func (_ValidatorPool *ValidatorPoolCallerSession) GetValidatorData(index_ *big.Int) (ValidatorData, error) {
	return _ValidatorPool.Contract.GetValidatorData(&_ValidatorPool.CallOpts, index_)
}

// GetValidatorsCount is a free data retrieval call binding the contract method 0x27498240.
//
// Solidity: function getValidatorsCount() view returns(uint256)
func (_ValidatorPool *ValidatorPoolCaller) GetValidatorsCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorPool.contract.Call(opts, &out, "getValidatorsCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetValidatorsCount is a free data retrieval call binding the contract method 0x27498240.
//
// Solidity: function getValidatorsCount() view returns(uint256)
func (_ValidatorPool *ValidatorPoolSession) GetValidatorsCount() (*big.Int, error) {
	return _ValidatorPool.Contract.GetValidatorsCount(&_ValidatorPool.CallOpts)
}

// GetValidatorsCount is a free data retrieval call binding the contract method 0x27498240.
//
// Solidity: function getValidatorsCount() view returns(uint256)
func (_ValidatorPool *ValidatorPoolCallerSession) GetValidatorsCount() (*big.Int, error) {
	return _ValidatorPool.Contract.GetValidatorsCount(&_ValidatorPool.CallOpts)
}

// IsAccusable is a free data retrieval call binding the contract method 0x20c2856d.
//
// Solidity: function isAccusable(address account_) view returns(bool)
func (_ValidatorPool *ValidatorPoolCaller) IsAccusable(opts *bind.CallOpts, account_ common.Address) (bool, error) {
	var out []interface{}
	err := _ValidatorPool.contract.Call(opts, &out, "isAccusable", account_)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsAccusable is a free data retrieval call binding the contract method 0x20c2856d.
//
// Solidity: function isAccusable(address account_) view returns(bool)
func (_ValidatorPool *ValidatorPoolSession) IsAccusable(account_ common.Address) (bool, error) {
	return _ValidatorPool.Contract.IsAccusable(&_ValidatorPool.CallOpts, account_)
}

// IsAccusable is a free data retrieval call binding the contract method 0x20c2856d.
//
// Solidity: function isAccusable(address account_) view returns(bool)
func (_ValidatorPool *ValidatorPoolCallerSession) IsAccusable(account_ common.Address) (bool, error) {
	return _ValidatorPool.Contract.IsAccusable(&_ValidatorPool.CallOpts, account_)
}

// IsInExitingQueue is a free data retrieval call binding the contract method 0xe4ad75f1.
//
// Solidity: function isInExitingQueue(address account_) view returns(bool)
func (_ValidatorPool *ValidatorPoolCaller) IsInExitingQueue(opts *bind.CallOpts, account_ common.Address) (bool, error) {
	var out []interface{}
	err := _ValidatorPool.contract.Call(opts, &out, "isInExitingQueue", account_)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsInExitingQueue is a free data retrieval call binding the contract method 0xe4ad75f1.
//
// Solidity: function isInExitingQueue(address account_) view returns(bool)
func (_ValidatorPool *ValidatorPoolSession) IsInExitingQueue(account_ common.Address) (bool, error) {
	return _ValidatorPool.Contract.IsInExitingQueue(&_ValidatorPool.CallOpts, account_)
}

// IsInExitingQueue is a free data retrieval call binding the contract method 0xe4ad75f1.
//
// Solidity: function isInExitingQueue(address account_) view returns(bool)
func (_ValidatorPool *ValidatorPoolCallerSession) IsInExitingQueue(account_ common.Address) (bool, error) {
	return _ValidatorPool.Contract.IsInExitingQueue(&_ValidatorPool.CallOpts, account_)
}

// IsMaintenanceScheduled is a free data retrieval call binding the contract method 0x1885570f.
//
// Solidity: function isMaintenanceScheduled() view returns(bool)
func (_ValidatorPool *ValidatorPoolCaller) IsMaintenanceScheduled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _ValidatorPool.contract.Call(opts, &out, "isMaintenanceScheduled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsMaintenanceScheduled is a free data retrieval call binding the contract method 0x1885570f.
//
// Solidity: function isMaintenanceScheduled() view returns(bool)
func (_ValidatorPool *ValidatorPoolSession) IsMaintenanceScheduled() (bool, error) {
	return _ValidatorPool.Contract.IsMaintenanceScheduled(&_ValidatorPool.CallOpts)
}

// IsMaintenanceScheduled is a free data retrieval call binding the contract method 0x1885570f.
//
// Solidity: function isMaintenanceScheduled() view returns(bool)
func (_ValidatorPool *ValidatorPoolCallerSession) IsMaintenanceScheduled() (bool, error) {
	return _ValidatorPool.Contract.IsMaintenanceScheduled(&_ValidatorPool.CallOpts)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address account_) view returns(bool)
func (_ValidatorPool *ValidatorPoolCaller) IsValidator(opts *bind.CallOpts, account_ common.Address) (bool, error) {
	var out []interface{}
	err := _ValidatorPool.contract.Call(opts, &out, "isValidator", account_)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address account_) view returns(bool)
func (_ValidatorPool *ValidatorPoolSession) IsValidator(account_ common.Address) (bool, error) {
	return _ValidatorPool.Contract.IsValidator(&_ValidatorPool.CallOpts, account_)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address account_) view returns(bool)
func (_ValidatorPool *ValidatorPoolCallerSession) IsValidator(account_ common.Address) (bool, error) {
	return _ValidatorPool.Contract.IsValidator(&_ValidatorPool.CallOpts, account_)
}

// ClaimStakeNFTPosition is a paid mutator transaction binding the contract method 0xd9b4a939.
//
// Solidity: function claimStakeNFTPosition() returns(uint256)
func (_ValidatorPool *ValidatorPoolTransactor) ClaimStakeNFTPosition(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorPool.contract.Transact(opts, "claimStakeNFTPosition")
}

// ClaimStakeNFTPosition is a paid mutator transaction binding the contract method 0xd9b4a939.
//
// Solidity: function claimStakeNFTPosition() returns(uint256)
func (_ValidatorPool *ValidatorPoolSession) ClaimStakeNFTPosition() (*types.Transaction, error) {
	return _ValidatorPool.Contract.ClaimStakeNFTPosition(&_ValidatorPool.TransactOpts)
}

// ClaimStakeNFTPosition is a paid mutator transaction binding the contract method 0xd9b4a939.
//
// Solidity: function claimStakeNFTPosition() returns(uint256)
func (_ValidatorPool *ValidatorPoolTransactorSession) ClaimStakeNFTPosition() (*types.Transaction, error) {
	return _ValidatorPool.Contract.ClaimStakeNFTPosition(&_ValidatorPool.TransactOpts)
}

// CollectProfits is a paid mutator transaction binding the contract method 0xc958e0d6.
//
// Solidity: function collectProfits() returns(uint256 payoutEth, uint256 payoutToken)
func (_ValidatorPool *ValidatorPoolTransactor) CollectProfits(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorPool.contract.Transact(opts, "collectProfits")
}

// CollectProfits is a paid mutator transaction binding the contract method 0xc958e0d6.
//
// Solidity: function collectProfits() returns(uint256 payoutEth, uint256 payoutToken)
func (_ValidatorPool *ValidatorPoolSession) CollectProfits() (*types.Transaction, error) {
	return _ValidatorPool.Contract.CollectProfits(&_ValidatorPool.TransactOpts)
}

// CollectProfits is a paid mutator transaction binding the contract method 0xc958e0d6.
//
// Solidity: function collectProfits() returns(uint256 payoutEth, uint256 payoutToken)
func (_ValidatorPool *ValidatorPoolTransactorSession) CollectProfits() (*types.Transaction, error) {
	return _ValidatorPool.Contract.CollectProfits(&_ValidatorPool.TransactOpts)
}

// CompleteETHDKG is a paid mutator transaction binding the contract method 0x8f579924.
//
// Solidity: function completeETHDKG() returns()
func (_ValidatorPool *ValidatorPoolTransactor) CompleteETHDKG(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorPool.contract.Transact(opts, "completeETHDKG")
}

// CompleteETHDKG is a paid mutator transaction binding the contract method 0x8f579924.
//
// Solidity: function completeETHDKG() returns()
func (_ValidatorPool *ValidatorPoolSession) CompleteETHDKG() (*types.Transaction, error) {
	return _ValidatorPool.Contract.CompleteETHDKG(&_ValidatorPool.TransactOpts)
}

// CompleteETHDKG is a paid mutator transaction binding the contract method 0x8f579924.
//
// Solidity: function completeETHDKG() returns()
func (_ValidatorPool *ValidatorPoolTransactorSession) CompleteETHDKG() (*types.Transaction, error) {
	return _ValidatorPool.Contract.CompleteETHDKG(&_ValidatorPool.TransactOpts)
}

// InitializeETHDKG is a paid mutator transaction binding the contract method 0x57b51c9c.
//
// Solidity: function initializeETHDKG() returns()
func (_ValidatorPool *ValidatorPoolTransactor) InitializeETHDKG(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorPool.contract.Transact(opts, "initializeETHDKG")
}

// InitializeETHDKG is a paid mutator transaction binding the contract method 0x57b51c9c.
//
// Solidity: function initializeETHDKG() returns()
func (_ValidatorPool *ValidatorPoolSession) InitializeETHDKG() (*types.Transaction, error) {
	return _ValidatorPool.Contract.InitializeETHDKG(&_ValidatorPool.TransactOpts)
}

// InitializeETHDKG is a paid mutator transaction binding the contract method 0x57b51c9c.
//
// Solidity: function initializeETHDKG() returns()
func (_ValidatorPool *ValidatorPoolTransactorSession) InitializeETHDKG() (*types.Transaction, error) {
	return _ValidatorPool.Contract.InitializeETHDKG(&_ValidatorPool.TransactOpts)
}

// MajorSlash is a paid mutator transaction binding the contract method 0x048d56c7.
//
// Solidity: function majorSlash(address dishonestValidator_, address disputer_) returns()
func (_ValidatorPool *ValidatorPoolTransactor) MajorSlash(opts *bind.TransactOpts, dishonestValidator_ common.Address, disputer_ common.Address) (*types.Transaction, error) {
	return _ValidatorPool.contract.Transact(opts, "majorSlash", dishonestValidator_, disputer_)
}

// MajorSlash is a paid mutator transaction binding the contract method 0x048d56c7.
//
// Solidity: function majorSlash(address dishonestValidator_, address disputer_) returns()
func (_ValidatorPool *ValidatorPoolSession) MajorSlash(dishonestValidator_ common.Address, disputer_ common.Address) (*types.Transaction, error) {
	return _ValidatorPool.Contract.MajorSlash(&_ValidatorPool.TransactOpts, dishonestValidator_, disputer_)
}

// MajorSlash is a paid mutator transaction binding the contract method 0x048d56c7.
//
// Solidity: function majorSlash(address dishonestValidator_, address disputer_) returns()
func (_ValidatorPool *ValidatorPoolTransactorSession) MajorSlash(dishonestValidator_ common.Address, disputer_ common.Address) (*types.Transaction, error) {
	return _ValidatorPool.Contract.MajorSlash(&_ValidatorPool.TransactOpts, dishonestValidator_, disputer_)
}

// MinorSlash is a paid mutator transaction binding the contract method 0x64c0461c.
//
// Solidity: function minorSlash(address dishonestValidator_, address disputer_) returns()
func (_ValidatorPool *ValidatorPoolTransactor) MinorSlash(opts *bind.TransactOpts, dishonestValidator_ common.Address, disputer_ common.Address) (*types.Transaction, error) {
	return _ValidatorPool.contract.Transact(opts, "minorSlash", dishonestValidator_, disputer_)
}

// MinorSlash is a paid mutator transaction binding the contract method 0x64c0461c.
//
// Solidity: function minorSlash(address dishonestValidator_, address disputer_) returns()
func (_ValidatorPool *ValidatorPoolSession) MinorSlash(dishonestValidator_ common.Address, disputer_ common.Address) (*types.Transaction, error) {
	return _ValidatorPool.Contract.MinorSlash(&_ValidatorPool.TransactOpts, dishonestValidator_, disputer_)
}

// MinorSlash is a paid mutator transaction binding the contract method 0x64c0461c.
//
// Solidity: function minorSlash(address dishonestValidator_, address disputer_) returns()
func (_ValidatorPool *ValidatorPoolTransactorSession) MinorSlash(dishonestValidator_ common.Address, disputer_ common.Address) (*types.Transaction, error) {
	return _ValidatorPool.Contract.MinorSlash(&_ValidatorPool.TransactOpts, dishonestValidator_, disputer_)
}

// OnERC721Received is a paid mutator transaction binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address , address , uint256 , bytes ) returns(bytes4)
func (_ValidatorPool *ValidatorPoolTransactor) OnERC721Received(opts *bind.TransactOpts, arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 []byte) (*types.Transaction, error) {
	return _ValidatorPool.contract.Transact(opts, "onERC721Received", arg0, arg1, arg2, arg3)
}

// OnERC721Received is a paid mutator transaction binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address , address , uint256 , bytes ) returns(bytes4)
func (_ValidatorPool *ValidatorPoolSession) OnERC721Received(arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 []byte) (*types.Transaction, error) {
	return _ValidatorPool.Contract.OnERC721Received(&_ValidatorPool.TransactOpts, arg0, arg1, arg2, arg3)
}

// OnERC721Received is a paid mutator transaction binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address , address , uint256 , bytes ) returns(bytes4)
func (_ValidatorPool *ValidatorPoolTransactorSession) OnERC721Received(arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 []byte) (*types.Transaction, error) {
	return _ValidatorPool.Contract.OnERC721Received(&_ValidatorPool.TransactOpts, arg0, arg1, arg2, arg3)
}

// PauseConsensus is a paid mutator transaction binding the contract method 0x1e5975f4.
//
// Solidity: function pauseConsensus() returns()
func (_ValidatorPool *ValidatorPoolTransactor) PauseConsensus(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorPool.contract.Transact(opts, "pauseConsensus")
}

// PauseConsensus is a paid mutator transaction binding the contract method 0x1e5975f4.
//
// Solidity: function pauseConsensus() returns()
func (_ValidatorPool *ValidatorPoolSession) PauseConsensus() (*types.Transaction, error) {
	return _ValidatorPool.Contract.PauseConsensus(&_ValidatorPool.TransactOpts)
}

// PauseConsensus is a paid mutator transaction binding the contract method 0x1e5975f4.
//
// Solidity: function pauseConsensus() returns()
func (_ValidatorPool *ValidatorPoolTransactorSession) PauseConsensus() (*types.Transaction, error) {
	return _ValidatorPool.Contract.PauseConsensus(&_ValidatorPool.TransactOpts)
}

// PauseConsensusOnArbitraryHeight is a paid mutator transaction binding the contract method 0xbc33bb01.
//
// Solidity: function pauseConsensusOnArbitraryHeight(uint256 madnetHeight_) returns()
func (_ValidatorPool *ValidatorPoolTransactor) PauseConsensusOnArbitraryHeight(opts *bind.TransactOpts, madnetHeight_ *big.Int) (*types.Transaction, error) {
	return _ValidatorPool.contract.Transact(opts, "pauseConsensusOnArbitraryHeight", madnetHeight_)
}

// PauseConsensusOnArbitraryHeight is a paid mutator transaction binding the contract method 0xbc33bb01.
//
// Solidity: function pauseConsensusOnArbitraryHeight(uint256 madnetHeight_) returns()
func (_ValidatorPool *ValidatorPoolSession) PauseConsensusOnArbitraryHeight(madnetHeight_ *big.Int) (*types.Transaction, error) {
	return _ValidatorPool.Contract.PauseConsensusOnArbitraryHeight(&_ValidatorPool.TransactOpts, madnetHeight_)
}

// PauseConsensusOnArbitraryHeight is a paid mutator transaction binding the contract method 0xbc33bb01.
//
// Solidity: function pauseConsensusOnArbitraryHeight(uint256 madnetHeight_) returns()
func (_ValidatorPool *ValidatorPoolTransactorSession) PauseConsensusOnArbitraryHeight(madnetHeight_ *big.Int) (*types.Transaction, error) {
	return _ValidatorPool.Contract.PauseConsensusOnArbitraryHeight(&_ValidatorPool.TransactOpts, madnetHeight_)
}

// RegisterValidators is a paid mutator transaction binding the contract method 0x65bd91af.
//
// Solidity: function registerValidators(address[] validators_, uint256[] stakerTokenIDs_) returns()
func (_ValidatorPool *ValidatorPoolTransactor) RegisterValidators(opts *bind.TransactOpts, validators_ []common.Address, stakerTokenIDs_ []*big.Int) (*types.Transaction, error) {
	return _ValidatorPool.contract.Transact(opts, "registerValidators", validators_, stakerTokenIDs_)
}

// RegisterValidators is a paid mutator transaction binding the contract method 0x65bd91af.
//
// Solidity: function registerValidators(address[] validators_, uint256[] stakerTokenIDs_) returns()
func (_ValidatorPool *ValidatorPoolSession) RegisterValidators(validators_ []common.Address, stakerTokenIDs_ []*big.Int) (*types.Transaction, error) {
	return _ValidatorPool.Contract.RegisterValidators(&_ValidatorPool.TransactOpts, validators_, stakerTokenIDs_)
}

// RegisterValidators is a paid mutator transaction binding the contract method 0x65bd91af.
//
// Solidity: function registerValidators(address[] validators_, uint256[] stakerTokenIDs_) returns()
func (_ValidatorPool *ValidatorPoolTransactorSession) RegisterValidators(validators_ []common.Address, stakerTokenIDs_ []*big.Int) (*types.Transaction, error) {
	return _ValidatorPool.Contract.RegisterValidators(&_ValidatorPool.TransactOpts, validators_, stakerTokenIDs_)
}

// ScheduleMaintenance is a paid mutator transaction binding the contract method 0x2380db1a.
//
// Solidity: function scheduleMaintenance() returns()
func (_ValidatorPool *ValidatorPoolTransactor) ScheduleMaintenance(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorPool.contract.Transact(opts, "scheduleMaintenance")
}

// ScheduleMaintenance is a paid mutator transaction binding the contract method 0x2380db1a.
//
// Solidity: function scheduleMaintenance() returns()
func (_ValidatorPool *ValidatorPoolSession) ScheduleMaintenance() (*types.Transaction, error) {
	return _ValidatorPool.Contract.ScheduleMaintenance(&_ValidatorPool.TransactOpts)
}

// ScheduleMaintenance is a paid mutator transaction binding the contract method 0x2380db1a.
//
// Solidity: function scheduleMaintenance() returns()
func (_ValidatorPool *ValidatorPoolTransactorSession) ScheduleMaintenance() (*types.Transaction, error) {
	return _ValidatorPool.Contract.ScheduleMaintenance(&_ValidatorPool.TransactOpts)
}

// SetETHDKG is a paid mutator transaction binding the contract method 0x8785a460.
//
// Solidity: function setETHDKG(address ethdkg_) returns()
func (_ValidatorPool *ValidatorPoolTransactor) SetETHDKG(opts *bind.TransactOpts, ethdkg_ common.Address) (*types.Transaction, error) {
	return _ValidatorPool.contract.Transact(opts, "setETHDKG", ethdkg_)
}

// SetETHDKG is a paid mutator transaction binding the contract method 0x8785a460.
//
// Solidity: function setETHDKG(address ethdkg_) returns()
func (_ValidatorPool *ValidatorPoolSession) SetETHDKG(ethdkg_ common.Address) (*types.Transaction, error) {
	return _ValidatorPool.Contract.SetETHDKG(&_ValidatorPool.TransactOpts, ethdkg_)
}

// SetETHDKG is a paid mutator transaction binding the contract method 0x8785a460.
//
// Solidity: function setETHDKG(address ethdkg_) returns()
func (_ValidatorPool *ValidatorPoolTransactorSession) SetETHDKG(ethdkg_ common.Address) (*types.Transaction, error) {
	return _ValidatorPool.Contract.SetETHDKG(&_ValidatorPool.TransactOpts, ethdkg_)
}

// SetLocation is a paid mutator transaction binding the contract method 0x827bfbdf.
//
// Solidity: function setLocation(string ip_) returns()
func (_ValidatorPool *ValidatorPoolTransactor) SetLocation(opts *bind.TransactOpts, ip_ string) (*types.Transaction, error) {
	return _ValidatorPool.contract.Transact(opts, "setLocation", ip_)
}

// SetLocation is a paid mutator transaction binding the contract method 0x827bfbdf.
//
// Solidity: function setLocation(string ip_) returns()
func (_ValidatorPool *ValidatorPoolSession) SetLocation(ip_ string) (*types.Transaction, error) {
	return _ValidatorPool.Contract.SetLocation(&_ValidatorPool.TransactOpts, ip_)
}

// SetLocation is a paid mutator transaction binding the contract method 0x827bfbdf.
//
// Solidity: function setLocation(string ip_) returns()
func (_ValidatorPool *ValidatorPoolTransactorSession) SetLocation(ip_ string) (*types.Transaction, error) {
	return _ValidatorPool.Contract.SetLocation(&_ValidatorPool.TransactOpts, ip_)
}

// SetMaxNumValidators is a paid mutator transaction binding the contract method 0x6c0da0b4.
//
// Solidity: function setMaxNumValidators(uint256 maxNumValidators_) returns()
func (_ValidatorPool *ValidatorPoolTransactor) SetMaxNumValidators(opts *bind.TransactOpts, maxNumValidators_ *big.Int) (*types.Transaction, error) {
	return _ValidatorPool.contract.Transact(opts, "setMaxNumValidators", maxNumValidators_)
}

// SetMaxNumValidators is a paid mutator transaction binding the contract method 0x6c0da0b4.
//
// Solidity: function setMaxNumValidators(uint256 maxNumValidators_) returns()
func (_ValidatorPool *ValidatorPoolSession) SetMaxNumValidators(maxNumValidators_ *big.Int) (*types.Transaction, error) {
	return _ValidatorPool.Contract.SetMaxNumValidators(&_ValidatorPool.TransactOpts, maxNumValidators_)
}

// SetMaxNumValidators is a paid mutator transaction binding the contract method 0x6c0da0b4.
//
// Solidity: function setMaxNumValidators(uint256 maxNumValidators_) returns()
func (_ValidatorPool *ValidatorPoolTransactorSession) SetMaxNumValidators(maxNumValidators_ *big.Int) (*types.Transaction, error) {
	return _ValidatorPool.Contract.SetMaxNumValidators(&_ValidatorPool.TransactOpts, maxNumValidators_)
}

// SetSnapshot is a paid mutator transaction binding the contract method 0xf5fe902f.
//
// Solidity: function setSnapshot(address snapshots_) returns()
func (_ValidatorPool *ValidatorPoolTransactor) SetSnapshot(opts *bind.TransactOpts, snapshots_ common.Address) (*types.Transaction, error) {
	return _ValidatorPool.contract.Transact(opts, "setSnapshot", snapshots_)
}

// SetSnapshot is a paid mutator transaction binding the contract method 0xf5fe902f.
//
// Solidity: function setSnapshot(address snapshots_) returns()
func (_ValidatorPool *ValidatorPoolSession) SetSnapshot(snapshots_ common.Address) (*types.Transaction, error) {
	return _ValidatorPool.Contract.SetSnapshot(&_ValidatorPool.TransactOpts, snapshots_)
}

// SetSnapshot is a paid mutator transaction binding the contract method 0xf5fe902f.
//
// Solidity: function setSnapshot(address snapshots_) returns()
func (_ValidatorPool *ValidatorPoolTransactorSession) SetSnapshot(snapshots_ common.Address) (*types.Transaction, error) {
	return _ValidatorPool.Contract.SetSnapshot(&_ValidatorPool.TransactOpts, snapshots_)
}

// SetStakeAmount is a paid mutator transaction binding the contract method 0x43808c50.
//
// Solidity: function setStakeAmount(uint256 stakeAmount_) returns()
func (_ValidatorPool *ValidatorPoolTransactor) SetStakeAmount(opts *bind.TransactOpts, stakeAmount_ *big.Int) (*types.Transaction, error) {
	return _ValidatorPool.contract.Transact(opts, "setStakeAmount", stakeAmount_)
}

// SetStakeAmount is a paid mutator transaction binding the contract method 0x43808c50.
//
// Solidity: function setStakeAmount(uint256 stakeAmount_) returns()
func (_ValidatorPool *ValidatorPoolSession) SetStakeAmount(stakeAmount_ *big.Int) (*types.Transaction, error) {
	return _ValidatorPool.Contract.SetStakeAmount(&_ValidatorPool.TransactOpts, stakeAmount_)
}

// SetStakeAmount is a paid mutator transaction binding the contract method 0x43808c50.
//
// Solidity: function setStakeAmount(uint256 stakeAmount_) returns()
func (_ValidatorPool *ValidatorPoolTransactorSession) SetStakeAmount(stakeAmount_ *big.Int) (*types.Transaction, error) {
	return _ValidatorPool.Contract.SetStakeAmount(&_ValidatorPool.TransactOpts, stakeAmount_)
}

// UnregisterAllValidators is a paid mutator transaction binding the contract method 0xf6442e24.
//
// Solidity: function unregisterAllValidators() returns()
func (_ValidatorPool *ValidatorPoolTransactor) UnregisterAllValidators(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorPool.contract.Transact(opts, "unregisterAllValidators")
}

// UnregisterAllValidators is a paid mutator transaction binding the contract method 0xf6442e24.
//
// Solidity: function unregisterAllValidators() returns()
func (_ValidatorPool *ValidatorPoolSession) UnregisterAllValidators() (*types.Transaction, error) {
	return _ValidatorPool.Contract.UnregisterAllValidators(&_ValidatorPool.TransactOpts)
}

// UnregisterAllValidators is a paid mutator transaction binding the contract method 0xf6442e24.
//
// Solidity: function unregisterAllValidators() returns()
func (_ValidatorPool *ValidatorPoolTransactorSession) UnregisterAllValidators() (*types.Transaction, error) {
	return _ValidatorPool.Contract.UnregisterAllValidators(&_ValidatorPool.TransactOpts)
}

// UnregisterValidators is a paid mutator transaction binding the contract method 0xc6e86ad6.
//
// Solidity: function unregisterValidators(address[] validators_) returns()
func (_ValidatorPool *ValidatorPoolTransactor) UnregisterValidators(opts *bind.TransactOpts, validators_ []common.Address) (*types.Transaction, error) {
	return _ValidatorPool.contract.Transact(opts, "unregisterValidators", validators_)
}

// UnregisterValidators is a paid mutator transaction binding the contract method 0xc6e86ad6.
//
// Solidity: function unregisterValidators(address[] validators_) returns()
func (_ValidatorPool *ValidatorPoolSession) UnregisterValidators(validators_ []common.Address) (*types.Transaction, error) {
	return _ValidatorPool.Contract.UnregisterValidators(&_ValidatorPool.TransactOpts, validators_)
}

// UnregisterValidators is a paid mutator transaction binding the contract method 0xc6e86ad6.
//
// Solidity: function unregisterValidators(address[] validators_) returns()
func (_ValidatorPool *ValidatorPoolTransactorSession) UnregisterValidators(validators_ []common.Address) (*types.Transaction, error) {
	return _ValidatorPool.Contract.UnregisterValidators(&_ValidatorPool.TransactOpts, validators_)
}

// ValidatorPoolMaintenanceScheduledIterator is returned from FilterMaintenanceScheduled and is used to iterate over the raw logs and unpacked data for MaintenanceScheduled events raised by the ValidatorPool contract.
type ValidatorPoolMaintenanceScheduledIterator struct {
	Event *ValidatorPoolMaintenanceScheduled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorPoolMaintenanceScheduledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorPoolMaintenanceScheduled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorPoolMaintenanceScheduled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorPoolMaintenanceScheduledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorPoolMaintenanceScheduledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorPoolMaintenanceScheduled represents a MaintenanceScheduled event raised by the ValidatorPool contract.
type ValidatorPoolMaintenanceScheduled struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterMaintenanceScheduled is a free log retrieval operation binding the contract event 0xc77f315ab4072b428052ff8f369916ce39f7fa7e925613f3e9b28fe383c565c8.
//
// Solidity: event MaintenanceScheduled()
func (_ValidatorPool *ValidatorPoolFilterer) FilterMaintenanceScheduled(opts *bind.FilterOpts) (*ValidatorPoolMaintenanceScheduledIterator, error) {

	logs, sub, err := _ValidatorPool.contract.FilterLogs(opts, "MaintenanceScheduled")
	if err != nil {
		return nil, err
	}
	return &ValidatorPoolMaintenanceScheduledIterator{contract: _ValidatorPool.contract, event: "MaintenanceScheduled", logs: logs, sub: sub}, nil
}

// WatchMaintenanceScheduled is a free log subscription operation binding the contract event 0xc77f315ab4072b428052ff8f369916ce39f7fa7e925613f3e9b28fe383c565c8.
//
// Solidity: event MaintenanceScheduled()
func (_ValidatorPool *ValidatorPoolFilterer) WatchMaintenanceScheduled(opts *bind.WatchOpts, sink chan<- *ValidatorPoolMaintenanceScheduled) (event.Subscription, error) {

	logs, sub, err := _ValidatorPool.contract.WatchLogs(opts, "MaintenanceScheduled")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorPoolMaintenanceScheduled)
				if err := _ValidatorPool.contract.UnpackLog(event, "MaintenanceScheduled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMaintenanceScheduled is a log parse operation binding the contract event 0xc77f315ab4072b428052ff8f369916ce39f7fa7e925613f3e9b28fe383c565c8.
//
// Solidity: event MaintenanceScheduled()
func (_ValidatorPool *ValidatorPoolFilterer) ParseMaintenanceScheduled(log types.Log) (*ValidatorPoolMaintenanceScheduled, error) {
	event := new(ValidatorPoolMaintenanceScheduled)
	if err := _ValidatorPool.contract.UnpackLog(event, "MaintenanceScheduled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorPoolValidatorJoinedIterator is returned from FilterValidatorJoined and is used to iterate over the raw logs and unpacked data for ValidatorJoined events raised by the ValidatorPool contract.
type ValidatorPoolValidatorJoinedIterator struct {
	Event *ValidatorPoolValidatorJoined // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorPoolValidatorJoinedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorPoolValidatorJoined)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorPoolValidatorJoined)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorPoolValidatorJoinedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorPoolValidatorJoinedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorPoolValidatorJoined represents a ValidatorJoined event raised by the ValidatorPool contract.
type ValidatorPoolValidatorJoined struct {
	Account      common.Address
	ValidatorNFT *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterValidatorJoined is a free log retrieval operation binding the contract event 0xe30848520248cd6b60cf19fe62a302a47e2d2c1c147deea1188e471751557a52.
//
// Solidity: event ValidatorJoined(address indexed account, uint256 validatorNFT)
func (_ValidatorPool *ValidatorPoolFilterer) FilterValidatorJoined(opts *bind.FilterOpts, account []common.Address) (*ValidatorPoolValidatorJoinedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ValidatorPool.contract.FilterLogs(opts, "ValidatorJoined", accountRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorPoolValidatorJoinedIterator{contract: _ValidatorPool.contract, event: "ValidatorJoined", logs: logs, sub: sub}, nil
}

// WatchValidatorJoined is a free log subscription operation binding the contract event 0xe30848520248cd6b60cf19fe62a302a47e2d2c1c147deea1188e471751557a52.
//
// Solidity: event ValidatorJoined(address indexed account, uint256 validatorNFT)
func (_ValidatorPool *ValidatorPoolFilterer) WatchValidatorJoined(opts *bind.WatchOpts, sink chan<- *ValidatorPoolValidatorJoined, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ValidatorPool.contract.WatchLogs(opts, "ValidatorJoined", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorPoolValidatorJoined)
				if err := _ValidatorPool.contract.UnpackLog(event, "ValidatorJoined", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorJoined is a log parse operation binding the contract event 0xe30848520248cd6b60cf19fe62a302a47e2d2c1c147deea1188e471751557a52.
//
// Solidity: event ValidatorJoined(address indexed account, uint256 validatorNFT)
func (_ValidatorPool *ValidatorPoolFilterer) ParseValidatorJoined(log types.Log) (*ValidatorPoolValidatorJoined, error) {
	event := new(ValidatorPoolValidatorJoined)
	if err := _ValidatorPool.contract.UnpackLog(event, "ValidatorJoined", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorPoolValidatorLeftIterator is returned from FilterValidatorLeft and is used to iterate over the raw logs and unpacked data for ValidatorLeft events raised by the ValidatorPool contract.
type ValidatorPoolValidatorLeftIterator struct {
	Event *ValidatorPoolValidatorLeft // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorPoolValidatorLeftIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorPoolValidatorLeft)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorPoolValidatorLeft)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorPoolValidatorLeftIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorPoolValidatorLeftIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorPoolValidatorLeft represents a ValidatorLeft event raised by the ValidatorPool contract.
type ValidatorPoolValidatorLeft struct {
	Account  common.Address
	StakeNFT *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterValidatorLeft is a free log retrieval operation binding the contract event 0x33ff7b2beda3cb99406d3401fd9e8d9001b93e74b845cf7346f6e7f70c703e73.
//
// Solidity: event ValidatorLeft(address indexed account, uint256 stakeNFT)
func (_ValidatorPool *ValidatorPoolFilterer) FilterValidatorLeft(opts *bind.FilterOpts, account []common.Address) (*ValidatorPoolValidatorLeftIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ValidatorPool.contract.FilterLogs(opts, "ValidatorLeft", accountRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorPoolValidatorLeftIterator{contract: _ValidatorPool.contract, event: "ValidatorLeft", logs: logs, sub: sub}, nil
}

// WatchValidatorLeft is a free log subscription operation binding the contract event 0x33ff7b2beda3cb99406d3401fd9e8d9001b93e74b845cf7346f6e7f70c703e73.
//
// Solidity: event ValidatorLeft(address indexed account, uint256 stakeNFT)
func (_ValidatorPool *ValidatorPoolFilterer) WatchValidatorLeft(opts *bind.WatchOpts, sink chan<- *ValidatorPoolValidatorLeft, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ValidatorPool.contract.WatchLogs(opts, "ValidatorLeft", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorPoolValidatorLeft)
				if err := _ValidatorPool.contract.UnpackLog(event, "ValidatorLeft", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorLeft is a log parse operation binding the contract event 0x33ff7b2beda3cb99406d3401fd9e8d9001b93e74b845cf7346f6e7f70c703e73.
//
// Solidity: event ValidatorLeft(address indexed account, uint256 stakeNFT)
func (_ValidatorPool *ValidatorPoolFilterer) ParseValidatorLeft(log types.Log) (*ValidatorPoolValidatorLeft, error) {
	event := new(ValidatorPoolValidatorLeft)
	if err := _ValidatorPool.contract.UnpackLog(event, "ValidatorLeft", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorPoolValidatorMajorSlashedIterator is returned from FilterValidatorMajorSlashed and is used to iterate over the raw logs and unpacked data for ValidatorMajorSlashed events raised by the ValidatorPool contract.
type ValidatorPoolValidatorMajorSlashedIterator struct {
	Event *ValidatorPoolValidatorMajorSlashed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorPoolValidatorMajorSlashedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorPoolValidatorMajorSlashed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorPoolValidatorMajorSlashed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorPoolValidatorMajorSlashedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorPoolValidatorMajorSlashedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorPoolValidatorMajorSlashed represents a ValidatorMajorSlashed event raised by the ValidatorPool contract.
type ValidatorPoolValidatorMajorSlashed struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterValidatorMajorSlashed is a free log retrieval operation binding the contract event 0xee806478c61c75fc3ec50328b2af43290d1860ef40d5dfbba62ece0e1e3abe9e.
//
// Solidity: event ValidatorMajorSlashed(address indexed account)
func (_ValidatorPool *ValidatorPoolFilterer) FilterValidatorMajorSlashed(opts *bind.FilterOpts, account []common.Address) (*ValidatorPoolValidatorMajorSlashedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ValidatorPool.contract.FilterLogs(opts, "ValidatorMajorSlashed", accountRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorPoolValidatorMajorSlashedIterator{contract: _ValidatorPool.contract, event: "ValidatorMajorSlashed", logs: logs, sub: sub}, nil
}

// WatchValidatorMajorSlashed is a free log subscription operation binding the contract event 0xee806478c61c75fc3ec50328b2af43290d1860ef40d5dfbba62ece0e1e3abe9e.
//
// Solidity: event ValidatorMajorSlashed(address indexed account)
func (_ValidatorPool *ValidatorPoolFilterer) WatchValidatorMajorSlashed(opts *bind.WatchOpts, sink chan<- *ValidatorPoolValidatorMajorSlashed, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ValidatorPool.contract.WatchLogs(opts, "ValidatorMajorSlashed", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorPoolValidatorMajorSlashed)
				if err := _ValidatorPool.contract.UnpackLog(event, "ValidatorMajorSlashed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorMajorSlashed is a log parse operation binding the contract event 0xee806478c61c75fc3ec50328b2af43290d1860ef40d5dfbba62ece0e1e3abe9e.
//
// Solidity: event ValidatorMajorSlashed(address indexed account)
func (_ValidatorPool *ValidatorPoolFilterer) ParseValidatorMajorSlashed(log types.Log) (*ValidatorPoolValidatorMajorSlashed, error) {
	event := new(ValidatorPoolValidatorMajorSlashed)
	if err := _ValidatorPool.contract.UnpackLog(event, "ValidatorMajorSlashed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorPoolValidatorMinorSlashedIterator is returned from FilterValidatorMinorSlashed and is used to iterate over the raw logs and unpacked data for ValidatorMinorSlashed events raised by the ValidatorPool contract.
type ValidatorPoolValidatorMinorSlashedIterator struct {
	Event *ValidatorPoolValidatorMinorSlashed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorPoolValidatorMinorSlashedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorPoolValidatorMinorSlashed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorPoolValidatorMinorSlashed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorPoolValidatorMinorSlashedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorPoolValidatorMinorSlashedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorPoolValidatorMinorSlashed represents a ValidatorMinorSlashed event raised by the ValidatorPool contract.
type ValidatorPoolValidatorMinorSlashed struct {
	Account  common.Address
	StakeNFT *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterValidatorMinorSlashed is a free log retrieval operation binding the contract event 0x23f67a6ac6d764dca01e28630334f5b636e2b1928c0a5d5b5428da3f69167208.
//
// Solidity: event ValidatorMinorSlashed(address indexed account, uint256 stakeNFT)
func (_ValidatorPool *ValidatorPoolFilterer) FilterValidatorMinorSlashed(opts *bind.FilterOpts, account []common.Address) (*ValidatorPoolValidatorMinorSlashedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ValidatorPool.contract.FilterLogs(opts, "ValidatorMinorSlashed", accountRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorPoolValidatorMinorSlashedIterator{contract: _ValidatorPool.contract, event: "ValidatorMinorSlashed", logs: logs, sub: sub}, nil
}

// WatchValidatorMinorSlashed is a free log subscription operation binding the contract event 0x23f67a6ac6d764dca01e28630334f5b636e2b1928c0a5d5b5428da3f69167208.
//
// Solidity: event ValidatorMinorSlashed(address indexed account, uint256 stakeNFT)
func (_ValidatorPool *ValidatorPoolFilterer) WatchValidatorMinorSlashed(opts *bind.WatchOpts, sink chan<- *ValidatorPoolValidatorMinorSlashed, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ValidatorPool.contract.WatchLogs(opts, "ValidatorMinorSlashed", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorPoolValidatorMinorSlashed)
				if err := _ValidatorPool.contract.UnpackLog(event, "ValidatorMinorSlashed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorMinorSlashed is a log parse operation binding the contract event 0x23f67a6ac6d764dca01e28630334f5b636e2b1928c0a5d5b5428da3f69167208.
//
// Solidity: event ValidatorMinorSlashed(address indexed account, uint256 stakeNFT)
func (_ValidatorPool *ValidatorPoolFilterer) ParseValidatorMinorSlashed(log types.Log) (*ValidatorPoolValidatorMinorSlashed, error) {
	event := new(ValidatorPoolValidatorMinorSlashed)
	if err := _ValidatorPool.contract.UnpackLog(event, "ValidatorMinorSlashed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
