// Generated by ifacemaker. DO NOT EDIT.

package bindings

import (
	"math/big"

	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
)

// IETHDKGTransactor ...
type IETHDKGTransactor interface {
	// GroupAccusationGPKj is a paid mutator transaction binding the contract method 0xa6872833.
	//
	// Solidity: function Group_Accusation_GPKj(uint256[] invArray, uint256[] honestIndices, uint256[] dishonestIndices) returns()
	GroupAccusationGPKj(opts *bind.TransactOpts, invArray []*big.Int, honestIndices []*big.Int, dishonestIndices []*big.Int) (*types.Transaction, error)
	// GroupAccusationGPKjComp is a paid mutator transaction binding the contract method 0xd7c47ff2.
	//
	// Solidity: function Group_Accusation_GPKj_Comp(uint256[][] encrypted_shares, uint256[2][][] commitments, uint256 dishonest_list_idx, address dishonestAddress) returns()
	GroupAccusationGPKjComp(opts *bind.TransactOpts, encrypted_shares [][]*big.Int, commitments [][][2]*big.Int, dishonest_list_idx *big.Int, dishonestAddress common.Address) (*types.Transaction, error)
	// SubmitGPKj is a paid mutator transaction binding the contract method 0xdc5e8a0a.
	//
	// Solidity: function Submit_GPKj(uint256[4] gpkj, uint256[2] sig) returns()
	SubmitGPKj(opts *bind.TransactOpts, gpkj [4]*big.Int, sig [2]*big.Int) (*types.Transaction, error)
	// SuccessfulCompletion is a paid mutator transaction binding the contract method 0x65c97c01.
	//
	// Solidity: function Successful_Completion() returns()
	SuccessfulCompletion(opts *bind.TransactOpts) (*types.Transaction, error)
	// DistributeShares is a paid mutator transaction binding the contract method 0xa080e5e0.
	//
	// Solidity: function distribute_shares(uint256[] encrypted_shares, uint256[2][] commitments) returns()
	DistributeShares(opts *bind.TransactOpts, encrypted_shares []*big.Int, commitments [][2]*big.Int) (*types.Transaction, error)
	// InitializeEthDKG is a paid mutator transaction binding the contract method 0xfd0fe4ef.
	//
	// Solidity: function initializeEthDKG(address ) returns()
	InitializeEthDKG(opts *bind.TransactOpts, arg0 common.Address) (*types.Transaction, error)
	// InitializeState is a paid mutator transaction binding the contract method 0x82571195.
	//
	// Solidity: function initializeState() returns()
	InitializeState(opts *bind.TransactOpts) (*types.Transaction, error)
	// Register is a paid mutator transaction binding the contract method 0x3442af5c.
	//
	// Solidity: function register(uint256[2] public_key) returns()
	Register(opts *bind.TransactOpts, public_key [2]*big.Int) (*types.Transaction, error)
	// SubmitDispute is a paid mutator transaction binding the contract method 0x2f123ffc.
	//
	// Solidity: function submit_dispute(address issuer, uint256 issuer_list_idx, uint256 disputer_list_idx, uint256[] encrypted_shares, uint256[2][] commitments, uint256[2] shared_key, uint256[2] shared_key_correctness_proof) returns()
	SubmitDispute(opts *bind.TransactOpts, issuer common.Address, issuer_list_idx *big.Int, disputer_list_idx *big.Int, encrypted_shares []*big.Int, commitments [][2]*big.Int, shared_key [2]*big.Int, shared_key_correctness_proof [2]*big.Int) (*types.Transaction, error)
	// SubmitKeyShare is a paid mutator transaction binding the contract method 0x7163525e.
	//
	// Solidity: function submit_key_share(address issuer, uint256[2] key_share_G1, uint256[2] key_share_G1_correctness_proof, uint256[4] key_share_G2) returns()
	SubmitKeyShare(opts *bind.TransactOpts, issuer common.Address, key_share_G1 [2]*big.Int, key_share_G1_correctness_proof [2]*big.Int, key_share_G2 [4]*big.Int) (*types.Transaction, error)
	// SubmitMasterPublicKey is a paid mutator transaction binding the contract method 0xf47ae6a9.
	//
	// Solidity: function submit_master_public_key(uint256[4] _master_public_key) returns()
	SubmitMasterPublicKey(opts *bind.TransactOpts, _master_public_key [4]*big.Int) (*types.Transaction, error)
	// UpdatePhaseLength is a paid mutator transaction binding the contract method 0x2a702773.
	//
	// Solidity: function updatePhaseLength(uint256 ) returns()
	UpdatePhaseLength(opts *bind.TransactOpts, arg0 *big.Int) (*types.Transaction, error)
}
